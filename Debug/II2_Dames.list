
II2_Dames.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002624c  0800ce20  0800ce20  0001ce20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803306c  0803306c  000500b0  2**0
                  CONTENTS
  4 .ARM          00000008  0803306c  0803306c  0004306c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08033074  08033074  000500b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033074  08033074  00043074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08033078  08033078  00043078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0803307c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008578  200000b0  0803312c  000500b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008628  0803312c  00058628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000329d3  00000000  00000000  000500e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d24  00000000  00000000  00082ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002648  00000000  00000000  000887d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023f0  00000000  00000000  0008ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e861  00000000  00000000  0008d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f4f1  00000000  00000000  000bba71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117867  00000000  00000000  000eaf62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002027c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5a0  00000000  00000000  0020281c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ce08 	.word	0x0800ce08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	0800ce08 	.word	0x0800ce08

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000cc 	.word	0x200000cc
 8000538:	20000180 	.word	0x20000180

0800053c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000546:	20c8      	movs	r0, #200	; 0xc8
 8000548:	f001 fe2e 	bl	80021a8 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800054c:	f000 f9b4 	bl	80008b8 <ft5336_I2C_InitializeIfRequired>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000580:	2300      	movs	r3, #0
 8000582:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000584:	f000 f998 	bl	80008b8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e010      	b.n	80005b0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	21a8      	movs	r1, #168	; 0xa8
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fde9 	bl	800216c <TS_IO_Read>
 800059a:	4603      	mov	r3, r0
 800059c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b51      	cmp	r3, #81	; 0x51
 80005a4:	d101      	bne.n	80005aa <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d802      	bhi.n	80005bc <ft5336_ReadID+0x4e>
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e8      	beq.n	800058e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f97e 	bl	80008d8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f932 	bl	8000848 <ft5336_TS_DisableIT>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fdb3 	bl	800216c <TS_IO_Read>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b05      	cmp	r3, #5
 800061c:	d901      	bls.n	8000622 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 8000628:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	b2db      	uxtb	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000380 	.word	0x20000380

08000640 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000664:	789a      	ldrb	r2, [r3, #2]
 8000666:	4b6c      	ldr	r3, [pc, #432]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	429a      	cmp	r2, r3
 800066c:	f080 80cf 	bcs.w	800080e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000670:	4b69      	ldr	r3, [pc, #420]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d871      	bhi.n	800075c <ft5336_TS_GetXY+0x11c>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <ft5336_TS_GetXY+0x40>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	080006a9 	.word	0x080006a9
 8000684:	080006bb 	.word	0x080006bb
 8000688:	080006cd 	.word	0x080006cd
 800068c:	080006df 	.word	0x080006df
 8000690:	080006f1 	.word	0x080006f1
 8000694:	08000703 	.word	0x08000703
 8000698:	08000715 	.word	0x08000715
 800069c:	08000727 	.word	0x08000727
 80006a0:	08000739 	.word	0x08000739
 80006a4:	0800074b 	.word	0x0800074b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006a8:	2304      	movs	r3, #4
 80006aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006ac:	2303      	movs	r3, #3
 80006ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b0:	2306      	movs	r3, #6
 80006b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006b4:	2305      	movs	r3, #5
 80006b6:	753b      	strb	r3, [r7, #20]
      break;
 80006b8:	e051      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ba:	230a      	movs	r3, #10
 80006bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006be:	2309      	movs	r3, #9
 80006c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006c2:	230c      	movs	r3, #12
 80006c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006c6:	230b      	movs	r3, #11
 80006c8:	753b      	strb	r3, [r7, #20]
      break;
 80006ca:	e048      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006cc:	2310      	movs	r3, #16
 80006ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d0:	230f      	movs	r3, #15
 80006d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006d4:	2312      	movs	r3, #18
 80006d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006d8:	2311      	movs	r3, #17
 80006da:	753b      	strb	r3, [r7, #20]
      break;
 80006dc:	e03f      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006de:	2316      	movs	r3, #22
 80006e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006e2:	2315      	movs	r3, #21
 80006e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006e6:	2318      	movs	r3, #24
 80006e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006ea:	2317      	movs	r3, #23
 80006ec:	753b      	strb	r3, [r7, #20]
      break;
 80006ee:	e036      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f0:	231c      	movs	r3, #28
 80006f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006f4:	231b      	movs	r3, #27
 80006f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006f8:	231e      	movs	r3, #30
 80006fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006fc:	231d      	movs	r3, #29
 80006fe:	753b      	strb	r3, [r7, #20]
      break;
 8000700:	e02d      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000702:	2322      	movs	r3, #34	; 0x22
 8000704:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000706:	2321      	movs	r3, #33	; 0x21
 8000708:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800070a:	2324      	movs	r3, #36	; 0x24
 800070c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800070e:	2323      	movs	r3, #35	; 0x23
 8000710:	753b      	strb	r3, [r7, #20]
      break;
 8000712:	e024      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000714:	2328      	movs	r3, #40	; 0x28
 8000716:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000718:	2327      	movs	r3, #39	; 0x27
 800071a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800071c:	232a      	movs	r3, #42	; 0x2a
 800071e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000720:	2329      	movs	r3, #41	; 0x29
 8000722:	753b      	strb	r3, [r7, #20]
      break;
 8000724:	e01b      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000726:	232e      	movs	r3, #46	; 0x2e
 8000728:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800072a:	232d      	movs	r3, #45	; 0x2d
 800072c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800072e:	2330      	movs	r3, #48	; 0x30
 8000730:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000732:	232f      	movs	r3, #47	; 0x2f
 8000734:	753b      	strb	r3, [r7, #20]
      break;
 8000736:	e012      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000738:	2334      	movs	r3, #52	; 0x34
 800073a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800073c:	2333      	movs	r3, #51	; 0x33
 800073e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000740:	2336      	movs	r3, #54	; 0x36
 8000742:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000744:	2335      	movs	r3, #53	; 0x35
 8000746:	753b      	strb	r3, [r7, #20]
      break;
 8000748:	e009      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800074a:	233a      	movs	r3, #58	; 0x3a
 800074c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800074e:	2339      	movs	r3, #57	; 0x39
 8000750:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000752:	233c      	movs	r3, #60	; 0x3c
 8000754:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000756:	233b      	movs	r3, #59	; 0x3b
 8000758:	753b      	strb	r3, [r7, #20]
      break;
 800075a:	e000      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800075c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	7dfa      	ldrb	r2, [r7, #23]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fd00 	bl	800216c <TS_IO_Read>
 800076c:	4603      	mov	r3, r0
 800076e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 8000778:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	7dba      	ldrb	r2, [r7, #22]
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fcf2 	bl	800216c <TS_IO_Read>
 8000788:	4603      	mov	r3, r0
 800078a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007a6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	7d7a      	ldrb	r2, [r7, #21]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fcd7 	bl	800216c <TS_IO_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007c2:	7cfb      	ldrb	r3, [r7, #19]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ca:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	7d3a      	ldrb	r2, [r7, #20]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fcc9 	bl	800216c <TS_IO_Read>
 80007da:	4603      	mov	r3, r0
 80007dc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007de:	7cfb      	ldrb	r3, [r7, #19]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007f8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007fc:	881a      	ldrh	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	3301      	adds	r3, #1
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 800080c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000380 	.word	0x20000380
 800081c:	20000384 	.word	0x20000384

08000820 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	21a4      	movs	r1, #164	; 0xa4
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fc7c 	bl	8002138 <TS_IO_Write>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	21a4      	movs	r1, #164	; 0xa4
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fc68 	bl	8002138 <TS_IO_Write>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
	...

080008a0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000380 	.word	0x20000380

080008b8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80008bc:	f7ff fff0 	bl	80008a0 <ft5336_Get_I2C_InitializedStatus>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d104      	bne.n	80008d0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80008c6:	f001 fc2d 	bl	8002124 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80008ca:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
  }
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000380 	.word	0x20000380

080008d8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f4:	b5b0      	push	{r4, r5, r7, lr}
 80008f6:	b092      	sub	sp, #72	; 0x48
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//static TS_StateTypeDef  TS_State;
	//uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 80008fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000908:	2301      	movs	r3, #1
 800090a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800090c:	2300      	movs	r3, #0
 800090e:	643b      	str	r3, [r7, #64]	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f003 faf7 	bl	8003f02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f8b0 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f000 fe78 	bl	800160c <MX_GPIO_Init>
  MX_ADC3_Init();
 800091c:	f000 f970 	bl	8000c00 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8000920:	f000 f9ea 	bl	8000cf8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000924:	f000 fe22 	bl	800156c <MX_FMC_Init>
  MX_I2C1_Init();
 8000928:	f000 fa18 	bl	8000d5c <MX_I2C1_Init>
  MX_I2C3_Init();
 800092c:	f000 fa56 	bl	8000ddc <MX_I2C3_Init>
  MX_LTDC_Init();
 8000930:	f000 fa94 	bl	8000e5c <MX_LTDC_Init>
  MX_RTC_Init();
 8000934:	f000 fb14 	bl	8000f60 <MX_RTC_Init>
  MX_SPI2_Init();
 8000938:	f000 fbb8 	bl	80010ac <MX_SPI2_Init>
  MX_TIM1_Init();
 800093c:	f000 fbf4 	bl	8001128 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000940:	f000 fc46 	bl	80011d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000944:	f000 fc92 	bl	800126c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000948:	f000 fcde 	bl	8001308 <MX_TIM5_Init>
  MX_TIM8_Init();
 800094c:	f000 fd2a 	bl	80013a4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000950:	f000 fdac 	bl	80014ac <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000954:	f000 fdda 	bl	800150c <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000958:	f000 f900 	bl	8000b5c <MX_ADC1_Init>
  MX_DAC_Init();
 800095c:	f000 f9a2 	bl	8000ca4 <MX_DAC_Init>
  MX_UART7_Init();
 8000960:	f000 fd74 	bl	800144c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000964:	f001 fc2c 	bl	80021c0 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000968:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800096c:	2000      	movs	r0, #0
 800096e:	f001 fcbf 	bl	80022f0 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000972:	f001 fc95 	bl	80022a0 <BSP_LCD_GetXSize>
 8000976:	4604      	mov	r4, r0
 8000978:	f001 fca6 	bl	80022c8 <BSP_LCD_GetYSize>
 800097c:	4603      	mov	r3, r0
 800097e:	fb03 f304 	mul.w	r3, r3, r4
 8000982:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4619      	mov	r1, r3
 800098a:	2001      	movs	r0, #1
 800098c:	f001 fcb0 	bl	80022f0 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8000990:	f002 f874 	bl	8002a7c <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 8000994:	2000      	movs	r0, #0
 8000996:	f001 fd0b 	bl	80023b0 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 800099a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800099e:	f001 fd63 	bl	8002468 <BSP_LCD_Clear>
    //BSP_LCD_DrawBitmap(0,0,(uint8_t*)HorombeRGB565_bmp);
    BSP_LCD_DrawBitmap(0,0,(uint8_t*)damier_bmp);
 80009a2:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <main+0x160>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	2000      	movs	r0, #0
 80009a8:	f001 ff16 	bl	80027d8 <BSP_LCD_DrawBitmap>
    BSP_LCD_SelectLayer(1);
 80009ac:	2001      	movs	r0, #1
 80009ae:	f001 fcff 	bl	80023b0 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(0);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f001 fd58 	bl	8002468 <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font12);
 80009b8:	4827      	ldr	r0, [pc, #156]	; (8000a58 <main+0x164>)
 80009ba:	f001 fd3b 	bl	8002434 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80009be:	f04f 30ff 	mov.w	r0, #4294967295
 80009c2:	f001 fd05 	bl	80023d0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80009c6:	4825      	ldr	r0, [pc, #148]	; (8000a5c <main+0x168>)
 80009c8:	f001 fd1a 	bl	8002400 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80009cc:	f001 fc68 	bl	80022a0 <BSP_LCD_GetXSize>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29c      	uxth	r4, r3
 80009d4:	f001 fc78 	bl	80022c8 <BSP_LCD_GetYSize>
 80009d8:	4603      	mov	r3, r0
 80009da:	b29b      	uxth	r3, r3
 80009dc:	4619      	mov	r1, r3
 80009de:	4620      	mov	r0, r4
 80009e0:	f002 fba6 	bl	8003130 <BSP_TS_Init>


	// Init potentiometre
	  sConfig.Channel = ADC_CHANNEL_6;
 80009e4:	2306      	movs	r3, #6
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80009e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ec:	4619      	mov	r1, r3
 80009ee:	481c      	ldr	r0, [pc, #112]	; (8000a60 <main+0x16c>)
 80009f0:	f003 fbea 	bl	80041c8 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 80009f4:	481a      	ldr	r0, [pc, #104]	; (8000a60 <main+0x16c>)
 80009f6:	f003 fb19 	bl	800402c <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
    mutexEcran = xSemaphoreCreateMutex();
 80009fa:	2001      	movs	r0, #1
 80009fc:	f00a f833 	bl	800aa66 <xQueueCreateMutex>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <main+0x170>)
 8000a04:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task_init */
  osThreadDef(task_init, fonction_init, osPriorityAboveNormal, 0, 1024);
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <main+0x174>)
 8000a08:	f107 041c 	add.w	r4, r7, #28
 8000a0c:	461d      	mov	r5, r3
 8000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_initHandle = osThreadCreate(osThread(task_init), NULL);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f009 fe3a 	bl	800a69a <osThreadCreate>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <main+0x178>)
 8000a2a:	6013      	str	r3, [r2, #0]

  /* definition and creation of affichage */
  osThreadDef(affichage, fonction_affichage, osPriorityNormal, 0, 1024);
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <main+0x17c>)
 8000a2e:	463c      	mov	r4, r7
 8000a30:	461d      	mov	r5, r3
 8000a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  affichageHandle = osThreadCreate(osThread(affichage), NULL);
 8000a3e:	463b      	mov	r3, r7
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f009 fe29 	bl	800a69a <osThreadCreate>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <main+0x180>)
 8000a4c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a4e:	f009 fe1d 	bl	800a68c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <main+0x15e>
 8000a54:	0800ce78 	.word	0x0800ce78
 8000a58:	20000030 	.word	0x20000030
 8000a5c:	ff0000ff 	.word	0xff0000ff
 8000a60:	2000822c 	.word	0x2000822c
 8000a64:	200082f8 	.word	0x200082f8
 8000a68:	0800ce38 	.word	0x0800ce38
 8000a6c:	20007fd4 	.word	0x20007fd4
 8000a70:	0800ce54 	.word	0x0800ce54
 8000a74:	20008228 	.word	0x20008228

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	; 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	2230      	movs	r2, #48	; 0x30
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f00c f8f0 	bl	800cc6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a9c:	f006 fa2e 	bl	8006efc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <SystemClock_Config+0xdc>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a2b      	ldr	r2, [pc, #172]	; (8000b54 <SystemClock_Config+0xdc>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <SystemClock_Config+0xdc>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <SystemClock_Config+0xe0>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a26      	ldr	r2, [pc, #152]	; (8000b58 <SystemClock_Config+0xe0>)
 8000abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <SystemClock_Config+0xe0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ada:	2301      	movs	r3, #1
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ae8:	2319      	movs	r3, #25
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000aec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000af0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000af6:	2309      	movs	r3, #9
 8000af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	4618      	mov	r0, r3
 8000b00:	f006 fa5c 	bl	8006fbc <HAL_RCC_OscConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b0a:	f001 f9af 	bl	8001e6c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b0e:	f006 fa05 	bl	8006f1c <HAL_PWREx_EnableOverDrive>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000b18:	f001 f9a8 	bl	8001e6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b20:	2302      	movs	r3, #2
 8000b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2106      	movs	r1, #6
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f006 fce2 	bl	8007504 <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b46:	f001 f991 	bl	8001e6c <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3750      	adds	r7, #80	; 0x50
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40007000 	.word	0x40007000

08000b5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b70:	4a21      	ldr	r2, [pc, #132]	; (8000bf8 <MX_ADC1_Init+0x9c>)
 8000b72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000b9e:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <MX_ADC1_Init+0xa0>)
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000bbe:	f003 f9f1 	bl	8003fa4 <HAL_ADC_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bc8:	f001 f950 	bl	8001e6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd8:	463b      	mov	r3, r7
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_ADC1_Init+0x98>)
 8000bde:	f003 faf3 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000be8:	f001 f940 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200081e0 	.word	0x200081e0
 8000bf8:	40012000 	.word	0x40012000
 8000bfc:	0f000001 	.word	0x0f000001

08000c00 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c06:	463b      	mov	r3, r7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c14:	4a21      	ldr	r2, [pc, #132]	; (8000c9c <MX_ADC3_Init+0x9c>)
 8000c16:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c18:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c1e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <MX_ADC3_Init+0xa0>)
 8000c44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c62:	f003 f99f 	bl	8003fa4 <HAL_ADC_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000c6c:	f001 f8fe 	bl	8001e6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c70:	2306      	movs	r3, #6
 8000c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_ADC3_Init+0x98>)
 8000c82:	f003 faa1 	bl	80041c8 <HAL_ADC_ConfigChannel>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c8c:	f001 f8ee 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2000822c 	.word	0x2000822c
 8000c9c:	40012200 	.word	0x40012200
 8000ca0:	0f000001 	.word	0x0f000001

08000ca4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000caa:	463b      	mov	r3, r7
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_DAC_Init+0x4c>)
 8000cb4:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <MX_DAC_Init+0x50>)
 8000cb6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <MX_DAC_Init+0x4c>)
 8000cba:	f003 fdb7 	bl	800482c <HAL_DAC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000cc4:	f001 f8d2 	bl	8001e6c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_DAC_Init+0x4c>)
 8000cd8:	f003 fe2e 	bl	8004938 <HAL_DAC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ce2:	f001 f8c3 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200082fc 	.word	0x200082fc
 8000cf4:	40007400 	.word	0x40007400

08000cf8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000cfe:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <MX_DMA2D_Init+0x60>)
 8000d00:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d2e:	f004 f8ad 	bl	8004e8c <HAL_DMA2D_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000d38:	f001 f898 	bl	8001e6c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_DMA2D_Init+0x5c>)
 8000d40:	f004 fb12 	bl	8005368 <HAL_DMA2D_ConfigLayer>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000d4a:	f001 f88f 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20008400 	.word	0x20008400
 8000d58:	4002b000 	.word	0x4002b000

08000d5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d62:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <MX_I2C1_Init+0x78>)
 8000d64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d68:	4a1b      	ldr	r2, [pc, #108]	; (8000dd8 <MX_I2C1_Init+0x7c>)
 8000d6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d96:	480e      	ldr	r0, [pc, #56]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000d98:	f004 fefe 	bl	8005b98 <HAL_I2C_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000da2:	f001 f863 	bl	8001e6c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000da6:	2100      	movs	r1, #0
 8000da8:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000daa:	f005 fc97 	bl	80066dc <HAL_I2CEx_ConfigAnalogFilter>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000db4:	f001 f85a 	bl	8001e6c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000db8:	2100      	movs	r1, #0
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_I2C1_Init+0x74>)
 8000dbc:	f005 fcd9 	bl	8006772 <HAL_I2CEx_ConfigDigitalFilter>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dc6:	f001 f851 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20008024 	.word	0x20008024
 8000dd4:	40005400 	.word	0x40005400
 8000dd8:	00c0eaff 	.word	0x00c0eaff

08000ddc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <MX_I2C3_Init+0x78>)
 8000de4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <MX_I2C3_Init+0x7c>)
 8000dea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e18:	f004 febe 	bl	8005b98 <HAL_I2C_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e22:	f001 f823 	bl	8001e6c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e2a:	f005 fc57 	bl	80066dc <HAL_I2CEx_ConfigAnalogFilter>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e34:	f001 f81a 	bl	8001e6c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_I2C3_Init+0x74>)
 8000e3c:	f005 fc99 	bl	8006772 <HAL_I2CEx_ConfigDigitalFilter>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e46:	f001 f811 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20007ea0 	.word	0x20007ea0
 8000e54:	40005c00 	.word	0x40005c00
 8000e58:	00c0eaff 	.word	0x00c0eaff

08000e5c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	; 0x38
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2234      	movs	r2, #52	; 0x34
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f00b feff 	bl	800cc6c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e6e:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e70:	4a3a      	ldr	r2, [pc, #232]	; (8000f5c <MX_LTDC_Init+0x100>)
 8000e72:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e74:	4b38      	ldr	r3, [pc, #224]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e7a:	4b37      	ldr	r3, [pc, #220]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e80:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e86:	4b34      	ldr	r3, [pc, #208]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000e8c:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e8e:	2228      	movs	r2, #40	; 0x28
 8000e90:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000e92:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e94:	2209      	movs	r2, #9
 8000e96:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000e98:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000e9a:	2235      	movs	r2, #53	; 0x35
 8000e9c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ea0:	220b      	movs	r2, #11
 8000ea2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ea6:	f240 2215 	movw	r2, #533	; 0x215
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000eac:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000eae:	f240 121b 	movw	r2, #283	; 0x11b
 8000eb2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000eb4:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000eb6:	f240 2235 	movw	r2, #565	; 0x235
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ebc:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ebe:	f240 121d 	movw	r2, #285	; 0x11d
 8000ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ec4:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ed4:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000edc:	481e      	ldr	r0, [pc, #120]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000ede:	f005 fc95 	bl	800680c <HAL_LTDC_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ee8:	f000 ffc0 	bl	8001e6c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000ef0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ef4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000efa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000efe:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f00:	2302      	movs	r3, #2
 8000f02:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000f04:	23ff      	movs	r3, #255	; 0xff
 8000f06:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f10:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f12:	2307      	movs	r3, #7
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f16:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000f1c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000f22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_LTDC_Init+0xfc>)
 8000f42:	f005 fdf5 	bl	8006b30 <HAL_LTDC_ConfigLayer>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000f4c:	f000 ff8e 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	3738      	adds	r7, #56	; 0x38
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20008138 	.word	0x20008138
 8000f5c:	40016800 	.word	0x40016800

08000f60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b092      	sub	sp, #72	; 0x48
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	222c      	movs	r2, #44	; 0x2c
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f00b fe72 	bl	800cc6c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f88:	4b46      	ldr	r3, [pc, #280]	; (80010a4 <MX_RTC_Init+0x144>)
 8000f8a:	4a47      	ldr	r2, [pc, #284]	; (80010a8 <MX_RTC_Init+0x148>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f8e:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <MX_RTC_Init+0x144>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f94:	4b43      	ldr	r3, [pc, #268]	; (80010a4 <MX_RTC_Init+0x144>)
 8000f96:	227f      	movs	r2, #127	; 0x7f
 8000f98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f9a:	4b42      	ldr	r3, [pc, #264]	; (80010a4 <MX_RTC_Init+0x144>)
 8000f9c:	22ff      	movs	r2, #255	; 0xff
 8000f9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fa0:	4b40      	ldr	r3, [pc, #256]	; (80010a4 <MX_RTC_Init+0x144>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fa6:	4b3f      	ldr	r3, [pc, #252]	; (80010a4 <MX_RTC_Init+0x144>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fac:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <MX_RTC_Init+0x144>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fb2:	483c      	ldr	r0, [pc, #240]	; (80010a4 <MX_RTC_Init+0x144>)
 8000fb4:	f007 f89e 	bl	80080f4 <HAL_RTC_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000fbe:	f000 ff55 	bl	8001e6c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	482f      	ldr	r0, [pc, #188]	; (80010a4 <MX_RTC_Init+0x144>)
 8000fe6:	f007 f917 	bl	8008218 <HAL_RTC_SetTime>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000ff0:	f000 ff3c 	bl	8001e6c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001000:	2301      	movs	r3, #1
 8001002:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001006:	2300      	movs	r3, #0
 8001008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800100c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001010:	2201      	movs	r2, #1
 8001012:	4619      	mov	r1, r3
 8001014:	4823      	ldr	r0, [pc, #140]	; (80010a4 <MX_RTC_Init+0x144>)
 8001016:	f007 f9bd 	bl	8008394 <HAL_RTC_SetDate>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001020:	f000 ff24 	bl	8001e6c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001024:	2300      	movs	r3, #0
 8001026:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001028:	2300      	movs	r3, #0
 800102a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800102c:	2300      	movs	r3, #0
 800102e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001048:	2301      	movs	r3, #1
 800104a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800104e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	2201      	movs	r2, #1
 8001058:	4619      	mov	r1, r3
 800105a:	4812      	ldr	r0, [pc, #72]	; (80010a4 <MX_RTC_Init+0x144>)
 800105c:	f007 fa42 	bl	80084e4 <HAL_RTC_SetAlarm>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001066:	f000 ff01 	bl	8001e6c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800106a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	2201      	movs	r2, #1
 8001074:	4619      	mov	r1, r3
 8001076:	480b      	ldr	r0, [pc, #44]	; (80010a4 <MX_RTC_Init+0x144>)
 8001078:	f007 fa34 	bl	80084e4 <HAL_RTC_SetAlarm>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001082:	f000 fef3 	bl	8001e6c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001086:	2202      	movs	r2, #2
 8001088:	2100      	movs	r1, #0
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_RTC_Init+0x144>)
 800108c:	f007 fbb4 	bl	80087f8 <HAL_RTCEx_SetTimeStamp>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001096:	f000 fee9 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3748      	adds	r7, #72	; 0x48
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20008310 	.word	0x20008310
 80010a8:	40002800 	.word	0x40002800

080010ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_SPI2_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <MX_SPI2_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_SPI2_Init+0x74>)
 80010b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_SPI2_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80010c4:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_SPI2_Init+0x74>)
 80010c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_SPI2_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_SPI2_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_SPI2_Init+0x74>)
 80010da:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_SPI2_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <MX_SPI2_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ec:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <MX_SPI2_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <MX_SPI2_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <MX_SPI2_Init+0x74>)
 80010fa:	2207      	movs	r2, #7
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <MX_SPI2_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <MX_SPI2_Init+0x74>)
 8001106:	2208      	movs	r2, #8
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_SPI2_Init+0x74>)
 800110c:	f007 fc5b 	bl	80089c6 <HAL_SPI_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 fea9 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20007eec 	.word	0x20007eec
 8001124:	40003800 	.word	0x40003800

08001128 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001148:	4a20      	ldr	r2, [pc, #128]	; (80011cc <MX_TIM1_Init+0xa4>)
 800114a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_TIM1_Init+0xa0>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_TIM1_Init+0xa0>)
 800115a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_TIM1_Init+0xa0>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001172:	4815      	ldr	r0, [pc, #84]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001174:	f007 fcd2 	bl	8008b1c <HAL_TIM_Base_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800117e:	f000 fe75 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001186:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4619      	mov	r1, r3
 800118e:	480e      	ldr	r0, [pc, #56]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001190:	f007 feb4 	bl	8008efc <HAL_TIM_ConfigClockSource>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800119a:	f000 fe67 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_TIM1_Init+0xa0>)
 80011b0:	f008 f8d0 	bl	8009354 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011ba:	f000 fe57 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20008330 	.word	0x20008330
 80011cc:	40010000 	.word	0x40010000

080011d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <MX_TIM2_Init+0x98>)
 80011f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MX_TIM2_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <MX_TIM2_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MX_TIM2_Init+0x98>)
 8001204:	f04f 32ff 	mov.w	r2, #4294967295
 8001208:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <MX_TIM2_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <MX_TIM2_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001216:	4814      	ldr	r0, [pc, #80]	; (8001268 <MX_TIM2_Init+0x98>)
 8001218:	f007 fc80 	bl	8008b1c <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001222:	f000 fe23 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_TIM2_Init+0x98>)
 8001234:	f007 fe62 	bl	8008efc <HAL_TIM_ConfigClockSource>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800123e:	f000 fe15 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_TIM2_Init+0x98>)
 8001250:	f008 f880 	bl	8009354 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800125a:	f000 fe07 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20008440 	.word	0x20008440

0800126c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_TIM3_Init+0x94>)
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <MX_TIM3_Init+0x98>)
 800128e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_TIM3_Init+0x94>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_TIM3_Init+0x94>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_TIM3_Init+0x94>)
 800129e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_TIM3_Init+0x94>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_TIM3_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <MX_TIM3_Init+0x94>)
 80012b2:	f007 fc33 	bl	8008b1c <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80012bc:	f000 fdd6 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012c6:	f107 0310 	add.w	r3, r7, #16
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <MX_TIM3_Init+0x94>)
 80012ce:	f007 fe15 	bl	8008efc <HAL_TIM_ConfigClockSource>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012d8:	f000 fdc8 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM3_Init+0x94>)
 80012ea:	f008 f833 	bl	8009354 <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012f4:	f000 fdba 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200080ec 	.word	0x200080ec
 8001304:	40000400 	.word	0x40000400

08001308 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM5_Init+0x94>)
 8001328:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <MX_TIM5_Init+0x98>)
 800132a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_TIM5_Init+0x94>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM5_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_TIM5_Init+0x94>)
 800133a:	f04f 32ff 	mov.w	r2, #4294967295
 800133e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_TIM5_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM5_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <MX_TIM5_Init+0x94>)
 800134e:	f007 fbe5 	bl	8008b1c <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001358:	f000 fd88 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM5_Init+0x94>)
 800136a:	f007 fdc7 	bl	8008efc <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001374:	f000 fd7a 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM5_Init+0x94>)
 8001386:	f007 ffe5 	bl	8009354 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001390:	f000 fd6c 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20008070 	.word	0x20008070
 80013a0:	40000c00 	.word	0x40000c00

080013a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0310 	add.w	r3, r7, #16
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013c4:	4a20      	ldr	r2, [pc, #128]	; (8001448 <MX_TIM8_Init+0xa4>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80013c8:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013ee:	4815      	ldr	r0, [pc, #84]	; (8001444 <MX_TIM8_Init+0xa0>)
 80013f0:	f007 fb94 	bl	8008b1c <HAL_TIM_Base_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80013fa:	f000 fd37 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001402:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	4619      	mov	r1, r3
 800140a:	480e      	ldr	r0, [pc, #56]	; (8001444 <MX_TIM8_Init+0xa0>)
 800140c:	f007 fd76 	bl	8008efc <HAL_TIM_ConfigClockSource>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001416:	f000 fd29 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MX_TIM8_Init+0xa0>)
 800142c:	f007 ff92 	bl	8009354 <HAL_TIMEx_MasterConfigSynchronization>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001436:	f000 fd19 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	3720      	adds	r7, #32
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20007fd8 	.word	0x20007fd8
 8001448:	40010400 	.word	0x40010400

0800144c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_UART7_Init+0x58>)
 8001452:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <MX_UART7_Init+0x5c>)
 8001454:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <MX_UART7_Init+0x58>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_UART7_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_UART7_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_UART7_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_UART7_Init+0x58>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_UART7_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_UART7_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_UART7_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_UART7_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_UART7_Init+0x58>)
 8001490:	f008 f80c 	bl	80094ac <HAL_UART_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800149a:	f000 fce7 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20007f50 	.word	0x20007f50
 80014a8:	40007800 	.word	0x40007800

080014ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014b2:	4a15      	ldr	r2, [pc, #84]	; (8001508 <MX_USART1_UART_Init+0x5c>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_USART1_UART_Init+0x58>)
 80014f0:	f007 ffdc 	bl	80094ac <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014fa:	f000 fcb7 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20008274 	.word	0x20008274
 8001508:	40011000 	.word	0x40011000

0800150c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <MX_USART6_UART_Init+0x5c>)
 8001514:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800151c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_USART6_UART_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART6_UART_Init+0x58>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART6_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART6_UART_Init+0x58>)
 8001550:	f007 ffac 	bl	80094ac <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800155a:	f000 fc87 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000837c 	.word	0x2000837c
 8001568:	40011400 	.word	0x40011400

0800156c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]
 8001580:	615a      	str	r2, [r3, #20]
 8001582:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <MX_FMC_Init+0x98>)
 8001586:	4a20      	ldr	r2, [pc, #128]	; (8001608 <MX_FMC_Init+0x9c>)
 8001588:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800158a:	4b1e      	ldr	r3, [pc, #120]	; (8001604 <MX_FMC_Init+0x98>)
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001590:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <MX_FMC_Init+0x98>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <MX_FMC_Init+0x98>)
 8001598:	2204      	movs	r2, #4
 800159a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_FMC_Init+0x98>)
 800159e:	2210      	movs	r2, #16
 80015a0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <MX_FMC_Init+0x98>)
 80015a4:	2240      	movs	r2, #64	; 0x40
 80015a6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <MX_FMC_Init+0x98>)
 80015aa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80015ae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_FMC_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_FMC_Init+0x98>)
 80015b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015bc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_FMC_Init+0x98>)
 80015c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <MX_FMC_Init+0x98>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80015d0:	2307      	movs	r3, #7
 80015d2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80015d4:	2304      	movs	r3, #4
 80015d6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80015d8:	2307      	movs	r3, #7
 80015da:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80015dc:	2303      	movs	r3, #3
 80015de:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <MX_FMC_Init+0x98>)
 80015ee:	f007 f959 	bl	80088a4 <HAL_SDRAM_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80015f8:	f000 fc38 	bl	8001e6c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200084bc 	.word	0x200084bc
 8001608:	a0000140 	.word	0xa0000140

0800160c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b090      	sub	sp, #64	; 0x40
 8001610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001622:	4bae      	ldr	r3, [pc, #696]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4aad      	ldr	r2, [pc, #692]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001628:	f043 0310 	orr.w	r3, r3, #16
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4bab      	ldr	r3, [pc, #684]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
 8001638:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800163a:	4ba8      	ldr	r3, [pc, #672]	; (80018dc <MX_GPIO_Init+0x2d0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4aa7      	ldr	r2, [pc, #668]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4ba5      	ldr	r3, [pc, #660]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4ba2      	ldr	r3, [pc, #648]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4aa1      	ldr	r2, [pc, #644]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b9f      	ldr	r3, [pc, #636]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	623b      	str	r3, [r7, #32]
 8001668:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166a:	4b9c      	ldr	r3, [pc, #624]	; (80018dc <MX_GPIO_Init+0x2d0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a9b      	ldr	r2, [pc, #620]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b99      	ldr	r3, [pc, #612]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	4b96      	ldr	r3, [pc, #600]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a95      	ldr	r2, [pc, #596]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b93      	ldr	r3, [pc, #588]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	4b90      	ldr	r3, [pc, #576]	; (80018dc <MX_GPIO_Init+0x2d0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a8f      	ldr	r2, [pc, #572]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b8d      	ldr	r3, [pc, #564]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016b2:	4b8a      	ldr	r3, [pc, #552]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a89      	ldr	r2, [pc, #548]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b87      	ldr	r3, [pc, #540]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016ca:	4b84      	ldr	r3, [pc, #528]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a83      	ldr	r2, [pc, #524]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b81      	ldr	r3, [pc, #516]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016e2:	4b7e      	ldr	r3, [pc, #504]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a7d      	ldr	r2, [pc, #500]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b7b      	ldr	r3, [pc, #492]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fa:	4b78      	ldr	r3, [pc, #480]	; (80018dc <MX_GPIO_Init+0x2d0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a77      	ldr	r2, [pc, #476]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b75      	ldr	r3, [pc, #468]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0320 	and.w	r3, r3, #32
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a71      	ldr	r2, [pc, #452]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <MX_GPIO_Init+0x2d0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2160      	movs	r1, #96	; 0x60
 800172e:	486c      	ldr	r0, [pc, #432]	; (80018e0 <MX_GPIO_Init+0x2d4>)
 8001730:	f004 fa00 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001734:	2201      	movs	r2, #1
 8001736:	2120      	movs	r1, #32
 8001738:	486a      	ldr	r0, [pc, #424]	; (80018e4 <MX_GPIO_Init+0x2d8>)
 800173a:	f004 f9fb 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2108      	movs	r1, #8
 8001742:	4868      	ldr	r0, [pc, #416]	; (80018e4 <MX_GPIO_Init+0x2d8>)
 8001744:	f004 f9f6 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2108      	movs	r1, #8
 800174c:	4866      	ldr	r0, [pc, #408]	; (80018e8 <MX_GPIO_Init+0x2dc>)
 800174e:	f004 f9f1 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001758:	4864      	ldr	r0, [pc, #400]	; (80018ec <MX_GPIO_Init+0x2e0>)
 800175a:	f004 f9eb 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800175e:	2200      	movs	r2, #0
 8001760:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001764:	4862      	ldr	r0, [pc, #392]	; (80018f0 <MX_GPIO_Init+0x2e4>)
 8001766:	f004 f9e5 	bl	8005b34 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	21c8      	movs	r1, #200	; 0xc8
 800176e:	4861      	ldr	r0, [pc, #388]	; (80018f4 <MX_GPIO_Init+0x2e8>)
 8001770:	f004 f9e0 	bl	8005b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001774:	2308      	movs	r3, #8
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	2300      	movs	r3, #0
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001784:	4619      	mov	r1, r3
 8001786:	4856      	ldr	r0, [pc, #344]	; (80018e0 <MX_GPIO_Init+0x2d4>)
 8001788:	f003 ff1c 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800178c:	2304      	movs	r3, #4
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800179c:	2309      	movs	r3, #9
 800179e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80017a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a4:	4619      	mov	r1, r3
 80017a6:	484e      	ldr	r0, [pc, #312]	; (80018e0 <MX_GPIO_Init+0x2d4>)
 80017a8:	f003 ff0c 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80017ac:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017be:	230b      	movs	r3, #11
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c6:	4619      	mov	r1, r3
 80017c8:	484a      	ldr	r0, [pc, #296]	; (80018f4 <MX_GPIO_Init+0x2e8>)
 80017ca:	f003 fefb 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80017ce:	f643 0323 	movw	r3, #14371	; 0x3823
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	2303      	movs	r3, #3
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017e0:	230a      	movs	r3, #10
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e8:	4619      	mov	r1, r3
 80017ea:	4843      	ldr	r0, [pc, #268]	; (80018f8 <MX_GPIO_Init+0x2ec>)
 80017ec:	f003 feea 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001800:	2308      	movs	r3, #8
 8001802:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001808:	4619      	mov	r1, r3
 800180a:	4836      	ldr	r0, [pc, #216]	; (80018e4 <MX_GPIO_Init+0x2d8>)
 800180c:	f003 feda 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001810:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001822:	230c      	movs	r3, #12
 8001824:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001826:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182a:	4619      	mov	r1, r3
 800182c:	4833      	ldr	r0, [pc, #204]	; (80018fc <MX_GPIO_Init+0x2f0>)
 800182e:	f003 fec9 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001832:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001838:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001846:	4619      	mov	r1, r3
 8001848:	482d      	ldr	r0, [pc, #180]	; (8001900 <MX_GPIO_Init+0x2f4>)
 800184a:	f003 febb 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 800184e:	2360      	movs	r3, #96	; 0x60
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	2301      	movs	r3, #1
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800185e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001862:	4619      	mov	r1, r3
 8001864:	481e      	ldr	r0, [pc, #120]	; (80018e0 <MX_GPIO_Init+0x2d4>)
 8001866:	f003 fead 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800186a:	2340      	movs	r3, #64	; 0x40
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	2303      	movs	r3, #3
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800187a:	230a      	movs	r3, #10
 800187c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001882:	4619      	mov	r1, r3
 8001884:	481c      	ldr	r0, [pc, #112]	; (80018f8 <MX_GPIO_Init+0x2ec>)
 8001886:	f003 fe9d 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800188a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001890:	2300      	movs	r3, #0
 8001892:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189c:	4619      	mov	r1, r3
 800189e:	4819      	ldr	r0, [pc, #100]	; (8001904 <MX_GPIO_Init+0x2f8>)
 80018a0:	f003 fe90 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80018a4:	2340      	movs	r3, #64	; 0x40
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b6:	4619      	mov	r1, r3
 80018b8:	480a      	ldr	r0, [pc, #40]	; (80018e4 <MX_GPIO_Init+0x2d8>)
 80018ba:	f003 fe83 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 80018be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018d0:	230a      	movs	r3, #10
 80018d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d8:	4619      	mov	r1, r3
 80018da:	e015      	b.n	8001908 <MX_GPIO_Init+0x2fc>
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40020c00 	.word	0x40020c00
 80018e8:	40022800 	.word	0x40022800
 80018ec:	40022000 	.word	0x40022000
 80018f0:	40021c00 	.word	0x40021c00
 80018f4:	40021800 	.word	0x40021800
 80018f8:	40020400 	.word	0x40020400
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020000 	.word	0x40020000
 8001904:	40022400 	.word	0x40022400
 8001908:	48a6      	ldr	r0, [pc, #664]	; (8001ba4 <MX_GPIO_Init+0x598>)
 800190a:	f003 fe5b 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800190e:	23f0      	movs	r3, #240	; 0xf0
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800191e:	230a      	movs	r3, #10
 8001920:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001926:	4619      	mov	r1, r3
 8001928:	489f      	ldr	r0, [pc, #636]	; (8001ba8 <MX_GPIO_Init+0x59c>)
 800192a:	f003 fe4b 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800192e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001940:	230a      	movs	r3, #10
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001948:	4619      	mov	r1, r3
 800194a:	4898      	ldr	r0, [pc, #608]	; (8001bac <MX_GPIO_Init+0x5a0>)
 800194c:	f003 fe3a 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001950:	2328      	movs	r3, #40	; 0x28
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001964:	4619      	mov	r1, r3
 8001966:	4892      	ldr	r0, [pc, #584]	; (8001bb0 <MX_GPIO_Init+0x5a4>)
 8001968:	f003 fe2c 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800196c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001972:	2300      	movs	r3, #0
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800197e:	4619      	mov	r1, r3
 8001980:	488c      	ldr	r0, [pc, #560]	; (8001bb4 <MX_GPIO_Init+0x5a8>)
 8001982:	f003 fe1f 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001986:	2308      	movs	r3, #8
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199a:	4619      	mov	r1, r3
 800199c:	4886      	ldr	r0, [pc, #536]	; (8001bb8 <MX_GPIO_Init+0x5ac>)
 800199e:	f003 fe11 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 80019a2:	f44f 7301 	mov.w	r3, #516	; 0x204
 80019a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b4:	4619      	mov	r1, r3
 80019b6:	487d      	ldr	r0, [pc, #500]	; (8001bac <MX_GPIO_Init+0x5a0>)
 80019b8:	f003 fe04 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019bc:	2310      	movs	r3, #16
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c0:	2300      	movs	r3, #0
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019cc:	4619      	mov	r1, r3
 80019ce:	4878      	ldr	r0, [pc, #480]	; (8001bb0 <MX_GPIO_Init+0x5a4>)
 80019d0:	f003 fdf8 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80019d4:	2304      	movs	r3, #4
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80019e4:	230c      	movs	r3, #12
 80019e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ec:	4619      	mov	r1, r3
 80019ee:	4870      	ldr	r0, [pc, #448]	; (8001bb0 <MX_GPIO_Init+0x5a4>)
 80019f0:	f003 fde8 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 80019f4:	f24a 0304 	movw	r3, #40964	; 0xa004
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fa:	2300      	movs	r3, #0
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a06:	4619      	mov	r1, r3
 8001a08:	486c      	ldr	r0, [pc, #432]	; (8001bbc <MX_GPIO_Init+0x5b0>)
 8001a0a:	f003 fddb 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a24:	4619      	mov	r1, r3
 8001a26:	4860      	ldr	r0, [pc, #384]	; (8001ba8 <MX_GPIO_Init+0x59c>)
 8001a28:	f003 fdcc 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001a2c:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a42:	4619      	mov	r1, r3
 8001a44:	485d      	ldr	r0, [pc, #372]	; (8001bbc <MX_GPIO_Init+0x5b0>)
 8001a46:	f003 fdbd 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a50:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4851      	ldr	r0, [pc, #324]	; (8001ba8 <MX_GPIO_Init+0x59c>)
 8001a62:	f003 fdaf 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001a66:	2310      	movs	r3, #16
 8001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a76:	230a      	movs	r3, #10
 8001a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7e:	4619      	mov	r1, r3
 8001a80:	484e      	ldr	r0, [pc, #312]	; (8001bbc <MX_GPIO_Init+0x5b0>)
 8001a82:	f003 fd9f 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001a86:	23c8      	movs	r3, #200	; 0xc8
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4843      	ldr	r0, [pc, #268]	; (8001bac <MX_GPIO_Init+0x5a0>)
 8001a9e:	f003 fd91 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aba:	4619      	mov	r1, r3
 8001abc:	483d      	ldr	r0, [pc, #244]	; (8001bb4 <MX_GPIO_Init+0x5a8>)
 8001abe:	f003 fd81 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ac2:	2332      	movs	r3, #50	; 0x32
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ad2:	230b      	movs	r3, #11
 8001ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ada:	4619      	mov	r1, r3
 8001adc:	4835      	ldr	r0, [pc, #212]	; (8001bb4 <MX_GPIO_Init+0x5a8>)
 8001ade:	f003 fd71 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001af2:	2309      	movs	r3, #9
 8001af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afa:	4619      	mov	r1, r3
 8001afc:	4830      	ldr	r0, [pc, #192]	; (8001bc0 <MX_GPIO_Init+0x5b4>)
 8001afe:	f003 fd61 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001b02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001b14:	2309      	movs	r3, #9
 8001b16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4824      	ldr	r0, [pc, #144]	; (8001bb0 <MX_GPIO_Init+0x5a4>)
 8001b20:	f003 fd50 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b24:	2386      	movs	r3, #134	; 0x86
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b34:	230b      	movs	r3, #11
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4819      	ldr	r0, [pc, #100]	; (8001ba4 <MX_GPIO_Init+0x598>)
 8001b40:	f003 fd40 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b44:	2340      	movs	r3, #64	; 0x40
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b54:	4619      	mov	r1, r3
 8001b56:	4813      	ldr	r0, [pc, #76]	; (8001ba4 <MX_GPIO_Init+0x598>)
 8001b58:	f003 fd34 	bl	80055c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001b5c:	2328      	movs	r3, #40	; 0x28
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b6c:	230a      	movs	r3, #10
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b74:	4619      	mov	r1, r3
 8001b76:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <MX_GPIO_Init+0x598>)
 8001b78:	f003 fd24 	bl	80055c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2105      	movs	r1, #5
 8001b80:	2017      	movs	r0, #23
 8001b82:	f002 fe29 	bl	80047d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b86:	2017      	movs	r0, #23
 8001b88:	f002 fe42 	bl	8004810 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2105      	movs	r1, #5
 8001b90:	2028      	movs	r0, #40	; 0x28
 8001b92:	f002 fe21 	bl	80047d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b96:	2028      	movs	r0, #40	; 0x28
 8001b98:	f002 fe3a 	bl	8004810 <HAL_NVIC_EnableIRQ>

}
 8001b9c:	bf00      	nop
 8001b9e:	3740      	adds	r7, #64	; 0x40
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40022000 	.word	0x40022000
 8001bac:	40021800 	.word	0x40021800
 8001bb0:	40020c00 	.word	0x40020c00
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40022800 	.word	0x40022800
 8001bbc:	40021c00 	.word	0x40021c00
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <HAL_GPIO_EXTI_Callback>:
		HAL_UART_Receive_IT(&huart1,rxbuffer,1); // Rappel (callback) de l'interruption
		*/
	}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	80fb      	strh	r3, [r7, #6]
	//Message[0] = GPIO_Pin;
	//BP2 32758, BP1 256
	//HAL_GPIO_TogglePin(LED11_GPIO_Port, LED11_Pin);
	//xQueueSendFromISR(myQueueBPHandle, &Message, 0);

}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <fonction_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fonction_init */
void fonction_init(void const * argument)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 20;
 8001be4:	2314      	movs	r3, #20
 8001be6:	613b      	str	r3, [r7, #16]
    uint8_t i, j, cpt_lignes = 0, cpt_colonnes = 1;
 8001be8:	2300      	movs	r3, #0
 8001bea:	757b      	strb	r3, [r7, #21]
 8001bec:	2301      	movs	r3, #1
 8001bee:	753b      	strb	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  for (i = 0; i < 3; i++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	75fb      	strb	r3, [r7, #23]
 8001bf4:	e051      	b.n	8001c9a <fonction_init+0xbe>
	  {
		  for (j = 0; j < 4; j++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75bb      	strb	r3, [r7, #22]
 8001bfa:	e03b      	b.n	8001c74 <fonction_init+0x98>
		  {
			  pions_blancs[i * 4 + j].colonne = cpt_colonnes;
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	009a      	lsls	r2, r3, #2
 8001c00:	7dbb      	ldrb	r3, [r7, #22]
 8001c02:	4413      	add	r3, r2
 8001c04:	7d3a      	ldrb	r2, [r7, #20]
 8001c06:	b291      	uxth	r1, r2
 8001c08:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <fonction_init+0xd4>)
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	460a      	mov	r2, r1
 8001c10:	805a      	strh	r2, [r3, #2]
			  pions_blancs[i * 4 + j].ligne = cpt_lignes;
 8001c12:	7dfb      	ldrb	r3, [r7, #23]
 8001c14:	009a      	lsls	r2, r3, #2
 8001c16:	7dbb      	ldrb	r3, [r7, #22]
 8001c18:	4413      	add	r3, r2
 8001c1a:	7d7a      	ldrb	r2, [r7, #21]
 8001c1c:	b291      	uxth	r1, r2
 8001c1e:	4a24      	ldr	r2, [pc, #144]	; (8001cb0 <fonction_init+0xd4>)
 8001c20:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			  pions_noirs[i * 4 + j].colonne = (cpt_colonnes % 2 == 0) ? cpt_colonnes + 1 : cpt_colonnes - 1;
 8001c24:	7d3b      	ldrb	r3, [r7, #20]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d104      	bne.n	8001c3a <fonction_init+0x5e>
 8001c30:	7d3b      	ldrb	r3, [r7, #20]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3301      	adds	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	e003      	b.n	8001c42 <fonction_init+0x66>
 8001c3a:	7d3b      	ldrb	r3, [r7, #20]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
 8001c44:	0099      	lsls	r1, r3, #2
 8001c46:	7dbb      	ldrb	r3, [r7, #22]
 8001c48:	440b      	add	r3, r1
 8001c4a:	491a      	ldr	r1, [pc, #104]	; (8001cb4 <fonction_init+0xd8>)
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	805a      	strh	r2, [r3, #2]
			  pions_noirs[i * 4 + j].ligne = cpt_lignes + 5;
 8001c52:	7d7b      	ldrb	r3, [r7, #21]
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	0099      	lsls	r1, r3, #2
 8001c5a:	7dbb      	ldrb	r3, [r7, #22]
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3205      	adds	r2, #5
 8001c60:	b291      	uxth	r1, r2
 8001c62:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <fonction_init+0xd8>)
 8001c64:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			  cpt_colonnes += 2;
 8001c68:	7d3b      	ldrb	r3, [r7, #20]
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	753b      	strb	r3, [r7, #20]
		  for (j = 0; j < 4; j++)
 8001c6e:	7dbb      	ldrb	r3, [r7, #22]
 8001c70:	3301      	adds	r3, #1
 8001c72:	75bb      	strb	r3, [r7, #22]
 8001c74:	7dbb      	ldrb	r3, [r7, #22]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d9c0      	bls.n	8001bfc <fonction_init+0x20>
		  }
		  cpt_colonnes = (cpt_colonnes % 2 == 0) ? 1 : 0;
 8001c7a:	7d3b      	ldrb	r3, [r7, #20]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	bf0c      	ite	eq
 8001c86:	2301      	moveq	r3, #1
 8001c88:	2300      	movne	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	753b      	strb	r3, [r7, #20]
		  cpt_lignes++;
 8001c8e:	7d7b      	ldrb	r3, [r7, #21]
 8001c90:	3301      	adds	r3, #1
 8001c92:	757b      	strb	r3, [r7, #21]
	  for (i = 0; i < 3; i++)
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
 8001c96:	3301      	adds	r3, #1
 8001c98:	75fb      	strb	r3, [r7, #23]
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d9aa      	bls.n	8001bf6 <fonction_init+0x1a>
	  }

      vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	6939      	ldr	r1, [r7, #16]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f009 fc56 	bl	800b558 <vTaskDelayUntil>
	  for (i = 0; i < 3; i++)
 8001cac:	e7a0      	b.n	8001bf0 <fonction_init+0x14>
 8001cae:	bf00      	nop
 8001cb0:	200080bc 	.word	0x200080bc
 8001cb4:	2000848c 	.word	0x2000848c

08001cb8 <fonction_affichage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_affichage */
void fonction_affichage(void const * argument)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_affichage */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 20;
 8001cc0:	2314      	movs	r3, #20
 8001cc2:	617b      	str	r3, [r7, #20]
	const uint8_t pas 			= 30;
 8001cc4:	231e      	movs	r3, #30
 8001cc6:	74fb      	strb	r3, [r7, #19]
	const uint8_t rayon 		= 6;
 8001cc8:	2306      	movs	r3, #6
 8001cca:	74bb      	strb	r3, [r7, #18]
	const uint8_t marge			= 15;
 8001ccc:	230f      	movs	r3, #15
 8001cce:	747b      	strb	r3, [r7, #17]
	uint16_t pointeurX 			= marge + pas / 2;
 8001cd0:	7c7b      	ldrb	r3, [r7, #17]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	7cfb      	ldrb	r3, [r7, #19]
 8001cd6:	085b      	lsrs	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	81fb      	strh	r3, [r7, #14]
	uint16_t pointeurY 			= marge + pas / 2;
 8001ce0:	7c7b      	ldrb	r3, [r7, #17]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	7cfb      	ldrb	r3, [r7, #19]
 8001ce6:	085b      	lsrs	r3, r3, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	81bb      	strh	r3, [r7, #12]
	vTaskDelete(task_initHandle);
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <fonction_affichage+0x17c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f009 fb9d 	bl	800b434 <vTaskDelete>

  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(task_initHandle);
 8001cfa:	4b4e      	ldr	r3, [pc, #312]	; (8001e34 <fonction_affichage+0x17c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f009 fcae 	bl	800b660 <vTaskSuspend>
	for(int i = 0; i < 12; i++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	e042      	b.n	8001d90 <fonction_affichage+0xd8>
	{
		xSemaphoreTake(mutexEcran, portMAX_DELAY);
 8001d0a:	4b4b      	ldr	r3, [pc, #300]	; (8001e38 <fonction_affichage+0x180>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d12:	4618      	mov	r0, r3
 8001d14:	f008 ffc6 	bl	800aca4 <xQueueSemaphoreTake>
		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f000 fb58 	bl	80023d0 <BSP_LCD_SetTextColor>
		pointeurX = marge + pas / 2 + pions_blancs[i].colonne * pas;
 8001d20:	7c7b      	ldrb	r3, [r7, #17]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	7cfb      	ldrb	r3, [r7, #19]
 8001d26:	085b      	lsrs	r3, r3, #1
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	4942      	ldr	r1, [pc, #264]	; (8001e3c <fonction_affichage+0x184>)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	8859      	ldrh	r1, [r3, #2]
 8001d3a:	7cfb      	ldrb	r3, [r7, #19]
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	fb11 f303 	smulbb	r3, r1, r3
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	81fb      	strh	r3, [r7, #14]
		pointeurY = marge + pas / 2 + pions_blancs[i].ligne * pas;
 8001d48:	7c7b      	ldrb	r3, [r7, #17]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	7cfb      	ldrb	r3, [r7, #19]
 8001d4e:	085b      	lsrs	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	4938      	ldr	r1, [pc, #224]	; (8001e3c <fonction_affichage+0x184>)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
 8001d60:	7cfb      	ldrb	r3, [r7, #19]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	fb11 f303 	smulbb	r3, r1, r3
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	81bb      	strh	r3, [r7, #12]
		BSP_LCD_FillCircle(pointeurX, pointeurY, rayon);
 8001d6e:	7cbb      	ldrb	r3, [r7, #18]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	89b9      	ldrh	r1, [r7, #12]
 8001d74:	89fb      	ldrh	r3, [r7, #14]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fde0 	bl	800293c <BSP_LCD_FillCircle>

		xSemaphoreGive(mutexEcran);
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <fonction_affichage+0x180>)
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	2300      	movs	r3, #0
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	f008 fe87 	bl	800aa98 <xQueueGenericSend>
	for(int i = 0; i < 12; i++)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b0b      	cmp	r3, #11
 8001d94:	ddb9      	ble.n	8001d0a <fonction_affichage+0x52>
	}
	for(int i = 0; i < 12; i++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	e041      	b.n	8001e20 <fonction_affichage+0x168>
	{
		xSemaphoreTake(mutexEcran, portMAX_DELAY);
 8001d9c:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <fonction_affichage+0x180>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	4618      	mov	r0, r3
 8001da6:	f008 ff7d 	bl	800aca4 <xQueueSemaphoreTake>
		BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001daa:	4825      	ldr	r0, [pc, #148]	; (8001e40 <fonction_affichage+0x188>)
 8001dac:	f000 fb10 	bl	80023d0 <BSP_LCD_SetTextColor>
		pointeurX = marge + pas / 2 + pions_noirs[i].colonne * pas;
 8001db0:	7c7b      	ldrb	r3, [r7, #17]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	7cfb      	ldrb	r3, [r7, #19]
 8001db6:	085b      	lsrs	r3, r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4920      	ldr	r1, [pc, #128]	; (8001e44 <fonction_affichage+0x18c>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	8859      	ldrh	r1, [r3, #2]
 8001dca:	7cfb      	ldrb	r3, [r7, #19]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	fb11 f303 	smulbb	r3, r1, r3
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	81fb      	strh	r3, [r7, #14]
		pointeurY = marge + pas / 2 + pions_noirs[i].ligne * pas;
 8001dd8:	7c7b      	ldrb	r3, [r7, #17]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	085b      	lsrs	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4413      	add	r3, r2
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	4916      	ldr	r1, [pc, #88]	; (8001e44 <fonction_affichage+0x18c>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	fb11 f303 	smulbb	r3, r1, r3
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	81bb      	strh	r3, [r7, #12]
		BSP_LCD_FillCircle(pointeurX, pointeurY, rayon);
 8001dfe:	7cbb      	ldrb	r3, [r7, #18]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	89b9      	ldrh	r1, [r7, #12]
 8001e04:	89fb      	ldrh	r3, [r7, #14]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fd98 	bl	800293c <BSP_LCD_FillCircle>

		xSemaphoreGive(mutexEcran);
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <fonction_affichage+0x180>)
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	2300      	movs	r3, #0
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	f008 fe3f 	bl	800aa98 <xQueueGenericSend>
	for(int i = 0; i < 12; i++)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61bb      	str	r3, [r7, #24]
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2b0b      	cmp	r3, #11
 8001e24:	ddba      	ble.n	8001d9c <fonction_affichage+0xe4>
	}
    vTaskDelayUntil(xLastWakeTime, (TickType_t) xFrequency);
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	6979      	ldr	r1, [r7, #20]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f009 fb94 	bl	800b558 <vTaskDelayUntil>
	vTaskSuspend(task_initHandle);
 8001e30:	e763      	b.n	8001cfa <fonction_affichage+0x42>
 8001e32:	bf00      	nop
 8001e34:	20007fd4 	.word	0x20007fd4
 8001e38:	200082f8 	.word	0x200082f8
 8001e3c:	200080bc 	.word	0x200080bc
 8001e40:	ff0000ff 	.word	0xff0000ff
 8001e44:	2000848c 	.word	0x2000848c

08001e48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e5a:	f002 f85f 	bl	8003f1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40001000 	.word	0x40001000

08001e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e70:	b672      	cpsid	i
}
 8001e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <Error_Handler+0x8>
	...

08001e78 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a51      	ldr	r2, [pc, #324]	; (8001fc8 <I2Cx_MspInit+0x150>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d14d      	bne.n	8001f24 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001e88:	4b50      	ldr	r3, [pc, #320]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	4a4f      	ldr	r2, [pc, #316]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e92:	6313      	str	r3, [r2, #48]	; 0x30
 8001e94:	4b4d      	ldr	r3, [pc, #308]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001ea4:	2312      	movs	r3, #18
 8001ea6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001eac:	2302      	movs	r3, #2
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4845      	ldr	r0, [pc, #276]	; (8001fd0 <I2Cx_MspInit+0x158>)
 8001ebc:	f003 fb82 	bl	80055c4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4840      	ldr	r0, [pc, #256]	; (8001fd0 <I2Cx_MspInit+0x158>)
 8001ece:	f003 fb79 	bl	80055c4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	4a3d      	ldr	r2, [pc, #244]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001ed8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	4b3b      	ldr	r3, [pc, #236]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4a37      	ldr	r2, [pc, #220]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001ef0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ef4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001ef6:	4b35      	ldr	r3, [pc, #212]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4a34      	ldr	r2, [pc, #208]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001efc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f00:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	210f      	movs	r1, #15
 8001f06:	2048      	movs	r0, #72	; 0x48
 8001f08:	f002 fc66 	bl	80047d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001f0c:	2048      	movs	r0, #72	; 0x48
 8001f0e:	f002 fc7f 	bl	8004810 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	210f      	movs	r1, #15
 8001f16:	2049      	movs	r0, #73	; 0x49
 8001f18:	f002 fc5e 	bl	80047d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001f1c:	2049      	movs	r0, #73	; 0x49
 8001f1e:	f002 fc77 	bl	8004810 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001f22:	e04d      	b.n	8001fc0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	4a28      	ldr	r2, [pc, #160]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f40:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f42:	2312      	movs	r3, #18
 8001f44:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001f4e:	2304      	movs	r3, #4
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	481e      	ldr	r0, [pc, #120]	; (8001fd4 <I2Cx_MspInit+0x15c>)
 8001f5a:	f003 fb33 	bl	80055c4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	4619      	mov	r1, r3
 8001f6a:	481a      	ldr	r0, [pc, #104]	; (8001fd4 <I2Cx_MspInit+0x15c>)
 8001f6c:	f003 fb2a 	bl	80055c4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	4a15      	ldr	r2, [pc, #84]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001f76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a0f      	ldr	r2, [pc, #60]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f92:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <I2Cx_MspInit+0x154>)
 8001f9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f9e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	201f      	movs	r0, #31
 8001fa6:	f002 fc17 	bl	80047d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001faa:	201f      	movs	r0, #31
 8001fac:	f002 fc30 	bl	8004810 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	2020      	movs	r0, #32
 8001fb6:	f002 fc0f 	bl	80047d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001fba:	2020      	movs	r0, #32
 8001fbc:	f002 fc28 	bl	8004810 <HAL_NVIC_EnableIRQ>
}
 8001fc0:	bf00      	nop
 8001fc2:	3730      	adds	r7, #48	; 0x30
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000388 	.word	0x20000388
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40021c00 	.word	0x40021c00
 8001fd4:	40020400 	.word	0x40020400

08001fd8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f004 f8c7 	bl	8006174 <HAL_I2C_GetState>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d125      	bne.n	8002038 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a14      	ldr	r2, [pc, #80]	; (8002040 <I2Cx_Init+0x68>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d103      	bne.n	8001ffc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a13      	ldr	r2, [pc, #76]	; (8002044 <I2Cx_Init+0x6c>)
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e002      	b.n	8002002 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <I2Cx_Init+0x70>)
 8002000:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <I2Cx_Init+0x74>)
 8002006:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ff23 	bl	8001e78 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f003 fdb0 	bl	8005b98 <HAL_I2C_Init>
  }
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000388 	.word	0x20000388
 8002044:	40005c00 	.word	0x40005c00
 8002048:	40005400 	.word	0x40005400
 800204c:	40912732 	.word	0x40912732

08002050 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08a      	sub	sp, #40	; 0x28
 8002054:	af04      	add	r7, sp, #16
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	4608      	mov	r0, r1
 800205a:	4611      	mov	r1, r2
 800205c:	461a      	mov	r2, r3
 800205e:	4603      	mov	r3, r0
 8002060:	72fb      	strb	r3, [r7, #11]
 8002062:	460b      	mov	r3, r1
 8002064:	813b      	strh	r3, [r7, #8]
 8002066:	4613      	mov	r3, r2
 8002068:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800206a:	2300      	movs	r3, #0
 800206c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	b299      	uxth	r1, r3
 8002072:	88f8      	ldrh	r0, [r7, #6]
 8002074:	893a      	ldrh	r2, [r7, #8]
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	9302      	str	r3, [sp, #8]
 800207c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	4603      	mov	r3, r0
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f003 ff5a 	bl	8005f40 <HAL_I2C_Mem_Read>
 800208c:	4603      	mov	r3, r0
 800208e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d004      	beq.n	80020a0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002096:	7afb      	ldrb	r3, [r7, #11]
 8002098:	4619      	mov	r1, r3
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f832 	bl	8002104 <I2Cx_Error>
  }
  return status;    
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b08a      	sub	sp, #40	; 0x28
 80020ae:	af04      	add	r7, sp, #16
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	4608      	mov	r0, r1
 80020b4:	4611      	mov	r1, r2
 80020b6:	461a      	mov	r2, r3
 80020b8:	4603      	mov	r3, r0
 80020ba:	72fb      	strb	r3, [r7, #11]
 80020bc:	460b      	mov	r3, r1
 80020be:	813b      	strh	r3, [r7, #8]
 80020c0:	4613      	mov	r3, r2
 80020c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	b299      	uxth	r1, r3
 80020cc:	88f8      	ldrh	r0, [r7, #6]
 80020ce:	893a      	ldrh	r2, [r7, #8]
 80020d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d4:	9302      	str	r3, [sp, #8]
 80020d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	4603      	mov	r3, r0
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f003 fe19 	bl	8005d18 <HAL_I2C_Mem_Write>
 80020e6:	4603      	mov	r3, r0
 80020e8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	4619      	mov	r1, r3
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f805 	bl	8002104 <I2Cx_Error>
  }
  return status;
 80020fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f003 fdd1 	bl	8005cb8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ff5e 	bl	8001fd8 <I2Cx_Init>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <TS_IO_Init+0x10>)
 800212a:	f7ff ff55 	bl	8001fd8 <I2Cx_Init>
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000388 	.word	0x20000388

08002138 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af02      	add	r7, sp, #8
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
 8002142:	460b      	mov	r3, r1
 8002144:	71bb      	strb	r3, [r7, #6]
 8002146:	4613      	mov	r3, r2
 8002148:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800214a:	79bb      	ldrb	r3, [r7, #6]
 800214c:	b29a      	uxth	r2, r3
 800214e:	79f9      	ldrb	r1, [r7, #7]
 8002150:	2301      	movs	r3, #1
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	1d7b      	adds	r3, r7, #5
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2301      	movs	r3, #1
 800215a:	4803      	ldr	r0, [pc, #12]	; (8002168 <TS_IO_Write+0x30>)
 800215c:	f7ff ffa5 	bl	80020aa <I2Cx_WriteMultiple>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000388 	.word	0x20000388

0800216c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af02      	add	r7, sp, #8
 8002172:	4603      	mov	r3, r0
 8002174:	460a      	mov	r2, r1
 8002176:	71fb      	strb	r3, [r7, #7]
 8002178:	4613      	mov	r3, r2
 800217a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002180:	79bb      	ldrb	r3, [r7, #6]
 8002182:	b29a      	uxth	r2, r3
 8002184:	79f9      	ldrb	r1, [r7, #7]
 8002186:	2301      	movs	r3, #1
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	f107 030f 	add.w	r3, r7, #15
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	2301      	movs	r3, #1
 8002192:	4804      	ldr	r0, [pc, #16]	; (80021a4 <TS_IO_Read+0x38>)
 8002194:	f7ff ff5c 	bl	8002050 <I2Cx_ReadMultiple>

  return read_value;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000388 	.word	0x20000388

080021a8 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f001 fed3 	bl	8003f5c <HAL_Delay>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80021c4:	4b31      	ldr	r3, [pc, #196]	; (800228c <BSP_LCD_Init+0xcc>)
 80021c6:	2228      	movs	r2, #40	; 0x28
 80021c8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80021ca:	4b30      	ldr	r3, [pc, #192]	; (800228c <BSP_LCD_Init+0xcc>)
 80021cc:	2209      	movs	r2, #9
 80021ce:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80021d0:	4b2e      	ldr	r3, [pc, #184]	; (800228c <BSP_LCD_Init+0xcc>)
 80021d2:	2235      	movs	r2, #53	; 0x35
 80021d4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80021d6:	4b2d      	ldr	r3, [pc, #180]	; (800228c <BSP_LCD_Init+0xcc>)
 80021d8:	220b      	movs	r2, #11
 80021da:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80021dc:	4b2b      	ldr	r3, [pc, #172]	; (800228c <BSP_LCD_Init+0xcc>)
 80021de:	f240 121b 	movw	r2, #283	; 0x11b
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80021e4:	4b29      	ldr	r3, [pc, #164]	; (800228c <BSP_LCD_Init+0xcc>)
 80021e6:	f240 2215 	movw	r2, #533	; 0x215
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <BSP_LCD_Init+0xcc>)
 80021ee:	f240 121d 	movw	r2, #285	; 0x11d
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <BSP_LCD_Init+0xcc>)
 80021f6:	f240 2235 	movw	r2, #565	; 0x235
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80021fc:	2100      	movs	r1, #0
 80021fe:	4823      	ldr	r0, [pc, #140]	; (800228c <BSP_LCD_Init+0xcc>)
 8002200:	f000 fd34 	bl	8002c6c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002204:	4b21      	ldr	r3, [pc, #132]	; (800228c <BSP_LCD_Init+0xcc>)
 8002206:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800220a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <BSP_LCD_Init+0xcc>)
 800220e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002212:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <BSP_LCD_Init+0xcc>)
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <BSP_LCD_Init+0xcc>)
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <BSP_LCD_Init+0xcc>)
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <BSP_LCD_Init+0xcc>)
 800222e:	2200      	movs	r2, #0
 8002230:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <BSP_LCD_Init+0xcc>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <BSP_LCD_Init+0xcc>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <BSP_LCD_Init+0xcc>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <BSP_LCD_Init+0xcc>)
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <BSP_LCD_Init+0xd0>)
 8002248:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800224a:	4810      	ldr	r0, [pc, #64]	; (800228c <BSP_LCD_Init+0xcc>)
 800224c:	f004 fcae 	bl	8006bac <HAL_LTDC_GetState>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d103      	bne.n	800225e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002256:	2100      	movs	r1, #0
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <BSP_LCD_Init+0xcc>)
 800225a:	f000 fc2d 	bl	8002ab8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800225e:	480b      	ldr	r0, [pc, #44]	; (800228c <BSP_LCD_Init+0xcc>)
 8002260:	f004 fad4 	bl	800680c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002264:	2201      	movs	r2, #1
 8002266:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226a:	480a      	ldr	r0, [pc, #40]	; (8002294 <BSP_LCD_Init+0xd4>)
 800226c:	f003 fc62 	bl	8005b34 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002270:	2201      	movs	r2, #1
 8002272:	2108      	movs	r1, #8
 8002274:	4808      	ldr	r0, [pc, #32]	; (8002298 <BSP_LCD_Init+0xd8>)
 8002276:	f003 fc5d 	bl	8005b34 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800227a:	f000 fda3 	bl	8002dc4 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800227e:	4807      	ldr	r0, [pc, #28]	; (800229c <BSP_LCD_Init+0xdc>)
 8002280:	f000 f8d8 	bl	8002434 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200084f0 	.word	0x200084f0
 8002290:	40016800 	.word	0x40016800
 8002294:	40022000 	.word	0x40022000
 8002298:	40022800 	.word	0x40022800
 800229c:	20000028 	.word	0x20000028

080022a0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <BSP_LCD_GetXSize+0x20>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <BSP_LCD_GetXSize+0x24>)
 80022aa:	2134      	movs	r1, #52	; 0x34
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3360      	adds	r3, #96	; 0x60
 80022b4:	681b      	ldr	r3, [r3, #0]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	20000414 	.word	0x20000414
 80022c4:	200084f0 	.word	0x200084f0

080022c8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <BSP_LCD_GetYSize+0x20>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a06      	ldr	r2, [pc, #24]	; (80022ec <BSP_LCD_GetYSize+0x24>)
 80022d2:	2134      	movs	r1, #52	; 0x34
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3364      	adds	r3, #100	; 0x64
 80022dc:	681b      	ldr	r3, [r3, #0]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	20000414 	.word	0x20000414
 80022ec:	200084f0 	.word	0x200084f0

080022f0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b090      	sub	sp, #64	; 0x40
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002300:	f7ff ffce 	bl	80022a0 <BSP_LCD_GetXSize>
 8002304:	4603      	mov	r3, r0
 8002306:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800230c:	f7ff ffdc 	bl	80022c8 <BSP_LCD_GetYSize>
 8002310:	4603      	mov	r3, r0
 8002312:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800231c:	23ff      	movs	r3, #255	; 0xff
 800231e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002336:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800233c:	2307      	movs	r3, #7
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002340:	f7ff ffae 	bl	80022a0 <BSP_LCD_GetXSize>
 8002344:	4603      	mov	r3, r0
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002348:	f7ff ffbe 	bl	80022c8 <BSP_LCD_GetYSize>
 800234c:	4603      	mov	r3, r0
 800234e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	4619      	mov	r1, r3
 8002358:	4812      	ldr	r0, [pc, #72]	; (80023a4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800235a:	f004 fbe9 	bl	8006b30 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800235e:	88fa      	ldrh	r2, [r7, #6]
 8002360:	4911      	ldr	r1, [pc, #68]	; (80023a8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	3304      	adds	r3, #4
 800236e:	f04f 32ff 	mov.w	r2, #4294967295
 8002372:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	490c      	ldr	r1, [pc, #48]	; (80023a8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3308      	adds	r3, #8
 8002384:	4a09      	ldr	r2, [pc, #36]	; (80023ac <BSP_LCD_LayerDefaultInit+0xbc>)
 8002386:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002388:	88fa      	ldrh	r2, [r7, #6]
 800238a:	4907      	ldr	r1, [pc, #28]	; (80023a8 <BSP_LCD_LayerDefaultInit+0xb8>)
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800239a:	601a      	str	r2, [r3, #0]
}
 800239c:	bf00      	nop
 800239e:	3740      	adds	r7, #64	; 0x40
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	200084f0 	.word	0x200084f0
 80023a8:	20000418 	.word	0x20000418
 80023ac:	20000028 	.word	0x20000028

080023b0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <BSP_LCD_SelectLayer+0x1c>)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6013      	str	r3, [r2, #0]
} 
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000414 	.word	0x20000414

080023d0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <BSP_LCD_SetTextColor+0x28>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4907      	ldr	r1, [pc, #28]	; (80023fc <BSP_LCD_SetTextColor+0x2c>)
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	601a      	str	r2, [r3, #0]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	20000414 	.word	0x20000414
 80023fc:	20000418 	.word	0x20000418

08002400 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <BSP_LCD_SetBackColor+0x2c>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4908      	ldr	r1, [pc, #32]	; (8002430 <BSP_LCD_SetBackColor+0x30>)
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	3304      	adds	r3, #4
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	601a      	str	r2, [r3, #0]
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000414 	.word	0x20000414
 8002430:	20000418 	.word	0x20000418

08002434 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <BSP_LCD_SetFont+0x2c>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4908      	ldr	r1, [pc, #32]	; (8002464 <BSP_LCD_SetFont+0x30>)
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	3308      	adds	r3, #8
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	601a      	str	r2, [r3, #0]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000414 	.word	0x20000414
 8002464:	20000418 	.word	0x20000418

08002468 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800246a:	b085      	sub	sp, #20
 800246c:	af02      	add	r7, sp, #8
 800246e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <BSP_LCD_Clear+0x48>)
 8002472:	681c      	ldr	r4, [r3, #0]
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <BSP_LCD_Clear+0x48>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <BSP_LCD_Clear+0x4c>)
 800247a:	2134      	movs	r1, #52	; 0x34
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	335c      	adds	r3, #92	; 0x5c
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461e      	mov	r6, r3
 8002488:	f7ff ff0a 	bl	80022a0 <BSP_LCD_GetXSize>
 800248c:	4605      	mov	r5, r0
 800248e:	f7ff ff1b 	bl	80022c8 <BSP_LCD_GetYSize>
 8002492:	4602      	mov	r2, r0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	2300      	movs	r3, #0
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	4613      	mov	r3, r2
 800249e:	462a      	mov	r2, r5
 80024a0:	4631      	mov	r1, r6
 80024a2:	4620      	mov	r0, r4
 80024a4:	f000 fbfe 	bl	8002ca4 <LL_FillBuffer>
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b0:	20000414 	.word	0x20000414
 80024b4:	200084f0 	.word	0x200084f0

080024b8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af02      	add	r7, sp, #8
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
 80024c2:	460b      	mov	r3, r1
 80024c4:	80bb      	strh	r3, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80024ce:	4b26      	ldr	r3, [pc, #152]	; (8002568 <BSP_LCD_DrawHLine+0xb0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a26      	ldr	r2, [pc, #152]	; (800256c <BSP_LCD_DrawHLine+0xb4>)
 80024d4:	2134      	movs	r1, #52	; 0x34
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3348      	adds	r3, #72	; 0x48
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d114      	bne.n	800250e <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80024e4:	4b20      	ldr	r3, [pc, #128]	; (8002568 <BSP_LCD_DrawHLine+0xb0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a20      	ldr	r2, [pc, #128]	; (800256c <BSP_LCD_DrawHLine+0xb4>)
 80024ea:	2134      	movs	r1, #52	; 0x34
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	335c      	adds	r3, #92	; 0x5c
 80024f4:	681c      	ldr	r4, [r3, #0]
 80024f6:	f7ff fed3 	bl	80022a0 <BSP_LCD_GetXSize>
 80024fa:	4602      	mov	r2, r0
 80024fc:	88bb      	ldrh	r3, [r7, #4]
 80024fe:	fb03 f202 	mul.w	r2, r3, r2
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	4413      	add	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4423      	add	r3, r4
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e013      	b.n	8002536 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <BSP_LCD_DrawHLine+0xb0>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a16      	ldr	r2, [pc, #88]	; (800256c <BSP_LCD_DrawHLine+0xb4>)
 8002514:	2134      	movs	r1, #52	; 0x34
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	335c      	adds	r3, #92	; 0x5c
 800251e:	681c      	ldr	r4, [r3, #0]
 8002520:	f7ff febe 	bl	80022a0 <BSP_LCD_GetXSize>
 8002524:	4602      	mov	r2, r0
 8002526:	88bb      	ldrh	r3, [r7, #4]
 8002528:	fb03 f202 	mul.w	r2, r3, r2
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4423      	add	r3, r4
 8002534:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <BSP_LCD_DrawHLine+0xb0>)
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	68f9      	ldr	r1, [r7, #12]
 800253c:	887c      	ldrh	r4, [r7, #2]
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <BSP_LCD_DrawHLine+0xb0>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4d0b      	ldr	r5, [pc, #44]	; (8002570 <BSP_LCD_DrawHLine+0xb8>)
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	442b      	add	r3, r5
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	9301      	str	r3, [sp, #4]
 8002552:	2300      	movs	r3, #0
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2301      	movs	r3, #1
 8002558:	4622      	mov	r2, r4
 800255a:	f000 fba3 	bl	8002ca4 <LL_FillBuffer>
}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bdb0      	pop	{r4, r5, r7, pc}
 8002566:	bf00      	nop
 8002568:	20000414 	.word	0x20000414
 800256c:	200084f0 	.word	0x200084f0
 8002570:	20000418 	.word	0x20000418

08002574 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	80fb      	strh	r3, [r7, #6]
 800257e:	460b      	mov	r3, r1
 8002580:	80bb      	strh	r3, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	f1c3 0303 	rsb	r3, r3, #3
 800258e:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002594:	887b      	ldrh	r3, [r7, #2]
 8002596:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002598:	e0c7      	b.n	800272a <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	b29a      	uxth	r2, r3
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	4413      	add	r3, r2
 80025a2:	b298      	uxth	r0, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	88ba      	ldrh	r2, [r7, #4]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	b299      	uxth	r1, r3
 80025ae:	4b64      	ldr	r3, [pc, #400]	; (8002740 <BSP_LCD_DrawCircle+0x1cc>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4c64      	ldr	r4, [pc, #400]	; (8002744 <BSP_LCD_DrawCircle+0x1d0>)
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4423      	add	r3, r4
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	f000 f8c1 	bl	8002748 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	b298      	uxth	r0, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	88ba      	ldrh	r2, [r7, #4]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	b299      	uxth	r1, r3
 80025da:	4b59      	ldr	r3, [pc, #356]	; (8002740 <BSP_LCD_DrawCircle+0x1cc>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4c59      	ldr	r4, [pc, #356]	; (8002744 <BSP_LCD_DrawCircle+0x1d0>)
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4423      	add	r3, r4
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	f000 f8ab 	bl	8002748 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	4413      	add	r3, r2
 80025fa:	b298      	uxth	r0, r3
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	88ba      	ldrh	r2, [r7, #4]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	b299      	uxth	r1, r3
 8002606:	4b4e      	ldr	r3, [pc, #312]	; (8002740 <BSP_LCD_DrawCircle+0x1cc>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4c4e      	ldr	r4, [pc, #312]	; (8002744 <BSP_LCD_DrawCircle+0x1d0>)
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4423      	add	r3, r4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	f000 f895 	bl	8002748 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	b29b      	uxth	r3, r3
 8002622:	88fa      	ldrh	r2, [r7, #6]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	b298      	uxth	r0, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	b29b      	uxth	r3, r3
 800262c:	88ba      	ldrh	r2, [r7, #4]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	b299      	uxth	r1, r3
 8002632:	4b43      	ldr	r3, [pc, #268]	; (8002740 <BSP_LCD_DrawCircle+0x1cc>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4c43      	ldr	r4, [pc, #268]	; (8002744 <BSP_LCD_DrawCircle+0x1d0>)
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4423      	add	r3, r4
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	f000 f87f 	bl	8002748 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	b29a      	uxth	r2, r3
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	4413      	add	r3, r2
 8002652:	b298      	uxth	r0, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	b29a      	uxth	r2, r3
 8002658:	88bb      	ldrh	r3, [r7, #4]
 800265a:	4413      	add	r3, r2
 800265c:	b299      	uxth	r1, r3
 800265e:	4b38      	ldr	r3, [pc, #224]	; (8002740 <BSP_LCD_DrawCircle+0x1cc>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4c38      	ldr	r4, [pc, #224]	; (8002744 <BSP_LCD_DrawCircle+0x1d0>)
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4423      	add	r3, r4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	461a      	mov	r2, r3
 8002672:	f000 f869 	bl	8002748 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	b29b      	uxth	r3, r3
 800267a:	88fa      	ldrh	r2, [r7, #6]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	b298      	uxth	r0, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	b29a      	uxth	r2, r3
 8002684:	88bb      	ldrh	r3, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	b299      	uxth	r1, r3
 800268a:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <BSP_LCD_DrawCircle+0x1cc>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4c2d      	ldr	r4, [pc, #180]	; (8002744 <BSP_LCD_DrawCircle+0x1d0>)
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4423      	add	r3, r4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	f000 f853 	bl	8002748 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	4413      	add	r3, r2
 80026aa:	b298      	uxth	r0, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	88bb      	ldrh	r3, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	b299      	uxth	r1, r3
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <BSP_LCD_DrawCircle+0x1cc>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4c22      	ldr	r4, [pc, #136]	; (8002744 <BSP_LCD_DrawCircle+0x1d0>)
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4423      	add	r3, r4
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	f000 f83d 	bl	8002748 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	88fa      	ldrh	r2, [r7, #6]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	b298      	uxth	r0, r3
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	b29a      	uxth	r2, r3
 80026dc:	88bb      	ldrh	r3, [r7, #4]
 80026de:	4413      	add	r3, r2
 80026e0:	b299      	uxth	r1, r3
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <BSP_LCD_DrawCircle+0x1cc>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4c17      	ldr	r4, [pc, #92]	; (8002744 <BSP_LCD_DrawCircle+0x1d0>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4423      	add	r3, r4
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	f000 f827 	bl	8002748 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	da06      	bge.n	800270e <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	009a      	lsls	r2, r3, #2
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	4413      	add	r3, r2
 8002708:	3306      	adds	r3, #6
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	e00a      	b.n	8002724 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	009a      	lsls	r2, r3, #2
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	4413      	add	r3, r2
 800271a:	330a      	adds	r3, #10
 800271c:	617b      	str	r3, [r7, #20]
      current_y--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3b01      	subs	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	3301      	adds	r3, #1
 8002728:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	429a      	cmp	r2, r3
 8002730:	f67f af33 	bls.w	800259a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	bd90      	pop	{r4, r7, pc}
 800273e:	bf00      	nop
 8002740:	20000414 	.word	0x20000414
 8002744:	20000418 	.word	0x20000418

08002748 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002748:	b5b0      	push	{r4, r5, r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	603a      	str	r2, [r7, #0]
 8002752:	80fb      	strh	r3, [r7, #6]
 8002754:	460b      	mov	r3, r1
 8002756:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <BSP_LCD_DrawPixel+0x88>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <BSP_LCD_DrawPixel+0x8c>)
 800275e:	2134      	movs	r1, #52	; 0x34
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	3348      	adds	r3, #72	; 0x48
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d116      	bne.n	800279c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800276e:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <BSP_LCD_DrawPixel+0x88>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <BSP_LCD_DrawPixel+0x8c>)
 8002774:	2134      	movs	r1, #52	; 0x34
 8002776:	fb01 f303 	mul.w	r3, r1, r3
 800277a:	4413      	add	r3, r2
 800277c:	335c      	adds	r3, #92	; 0x5c
 800277e:	681c      	ldr	r4, [r3, #0]
 8002780:	88bd      	ldrh	r5, [r7, #4]
 8002782:	f7ff fd8d 	bl	80022a0 <BSP_LCD_GetXSize>
 8002786:	4603      	mov	r3, r0
 8002788:	fb03 f205 	mul.w	r2, r3, r5
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	4413      	add	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4423      	add	r3, r4
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	b292      	uxth	r2, r2
 8002798:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800279a:	e015      	b.n	80027c8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <BSP_LCD_DrawPixel+0x88>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <BSP_LCD_DrawPixel+0x8c>)
 80027a2:	2134      	movs	r1, #52	; 0x34
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	335c      	adds	r3, #92	; 0x5c
 80027ac:	681c      	ldr	r4, [r3, #0]
 80027ae:	88bd      	ldrh	r5, [r7, #4]
 80027b0:	f7ff fd76 	bl	80022a0 <BSP_LCD_GetXSize>
 80027b4:	4603      	mov	r3, r0
 80027b6:	fb03 f205 	mul.w	r2, r3, r5
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4423      	add	r3, r4
 80027c2:	461a      	mov	r2, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6013      	str	r3, [r2, #0]
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bdb0      	pop	{r4, r5, r7, pc}
 80027d0:	20000414 	.word	0x20000414
 80027d4:	200084f0 	.word	0x200084f0

080027d8 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b08b      	sub	sp, #44	; 0x2c
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	330a      	adds	r3, #10
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	330b      	adds	r3, #11
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	441a      	add	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	330c      	adds	r3, #12
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	041b      	lsls	r3, r3, #16
 8002812:	441a      	add	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	330d      	adds	r3, #13
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	4413      	add	r3, r2
 800281e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3312      	adds	r3, #18
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3313      	adds	r3, #19
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	441a      	add	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3314      	adds	r3, #20
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	041b      	lsls	r3, r3, #16
 800283a:	441a      	add	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3315      	adds	r3, #21
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	061b      	lsls	r3, r3, #24
 8002844:	4413      	add	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3316      	adds	r3, #22
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3317      	adds	r3, #23
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	441a      	add	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3318      	adds	r3, #24
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	441a      	add	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3319      	adds	r3, #25
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	061b      	lsls	r3, r3, #24
 800286c:	4413      	add	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	331c      	adds	r3, #28
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	331d      	adds	r3, #29
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	4413      	add	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002884:	4b2b      	ldr	r3, [pc, #172]	; (8002934 <BSP_LCD_DrawBitmap+0x15c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a2b      	ldr	r2, [pc, #172]	; (8002938 <BSP_LCD_DrawBitmap+0x160>)
 800288a:	2134      	movs	r1, #52	; 0x34
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	335c      	adds	r3, #92	; 0x5c
 8002894:	681c      	ldr	r4, [r3, #0]
 8002896:	f7ff fd03 	bl	80022a0 <BSP_LCD_GetXSize>
 800289a:	4602      	mov	r2, r0
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	fb03 f202 	mul.w	r2, r3, r2
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4423      	add	r3, r4
 80028aa:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	3b20      	subs	r3, #32
 80028b0:	2b07      	cmp	r3, #7
 80028b2:	d802      	bhi.n	80028ba <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	e008      	b.n	80028cc <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	3b10      	subs	r3, #16
 80028be:	2b07      	cmp	r3, #7
 80028c0:	d802      	bhi.n	80028c8 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80028c2:	2302      	movs	r3, #2
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e001      	b.n	80028cc <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80028c8:	2301      	movs	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	fb02 f303 	mul.w	r3, r2, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	08d2      	lsrs	r2, r2, #3
 80028da:	fb02 f203 	mul.w	r2, r2, r3
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	4413      	add	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80028e8:	2300      	movs	r3, #0
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
 80028ec:	e018      	b.n	8002920 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80028ee:	6a39      	ldr	r1, [r7, #32]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fa21 	bl	8002d3c <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80028fa:	f7ff fcd1 	bl	80022a0 <BSP_LCD_GetXSize>
 80028fe:	4603      	mov	r3, r0
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	6a3a      	ldr	r2, [r7, #32]
 8002904:	4413      	add	r3, r2
 8002906:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	08db      	lsrs	r3, r3, #3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	425b      	negs	r3, r3
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	4413      	add	r3, r2
 8002918:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	3301      	adds	r3, #1
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
 8002920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	429a      	cmp	r2, r3
 8002926:	d3e2      	bcc.n	80028ee <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	372c      	adds	r7, #44	; 0x2c
 800292e:	46bd      	mov	sp, r7
 8002930:	bd90      	pop	{r4, r7, pc}
 8002932:	bf00      	nop
 8002934:	20000414 	.word	0x20000414
 8002938:	200084f0 	.word	0x200084f0

0800293c <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	80fb      	strh	r3, [r7, #6]
 8002946:	460b      	mov	r3, r1
 8002948:	80bb      	strh	r3, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	f1c3 0303 	rsb	r3, r3, #3
 8002956:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8002958:	2300      	movs	r3, #0
 800295a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800295c:	887b      	ldrh	r3, [r7, #2]
 800295e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002960:	4b44      	ldr	r3, [pc, #272]	; (8002a74 <BSP_LCD_FillCircle+0x138>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4944      	ldr	r1, [pc, #272]	; (8002a78 <BSP_LCD_FillCircle+0x13c>)
 8002966:	4613      	mov	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fd2c 	bl	80023d0 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8002978:	e061      	b.n	8002a3e <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d021      	beq.n	80029c4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	b29b      	uxth	r3, r3
 8002984:	88fa      	ldrh	r2, [r7, #6]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	b298      	uxth	r0, r3
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	b29a      	uxth	r2, r3
 800298e:	88bb      	ldrh	r3, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	b299      	uxth	r1, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	b29b      	uxth	r3, r3
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	f7ff fd8b 	bl	80024b8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	88fa      	ldrh	r2, [r7, #6]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	b298      	uxth	r0, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	88ba      	ldrh	r2, [r7, #4]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	b299      	uxth	r1, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	b29b      	uxth	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	f7ff fd7a 	bl	80024b8 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d021      	beq.n	8002a0e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	88fa      	ldrh	r2, [r7, #6]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	b298      	uxth	r0, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	88ba      	ldrh	r2, [r7, #4]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	b299      	uxth	r1, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	f7ff fd66 	bl	80024b8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	88fa      	ldrh	r2, [r7, #6]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	b298      	uxth	r0, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	88bb      	ldrh	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	b299      	uxth	r1, r3
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	f7ff fd55 	bl	80024b8 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	da06      	bge.n	8002a22 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	009a      	lsls	r2, r3, #2
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3306      	adds	r3, #6
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	e00a      	b.n	8002a38 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	009a      	lsls	r2, r3, #2
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	330a      	adds	r3, #10
 8002a30:	617b      	str	r3, [r7, #20]
      current_y--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d999      	bls.n	800297a <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <BSP_LCD_FillCircle+0x138>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	490b      	ldr	r1, [pc, #44]	; (8002a78 <BSP_LCD_FillCircle+0x13c>)
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fcb9 	bl	80023d0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	88b9      	ldrh	r1, [r7, #4]
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff fd85 	bl	8002574 <BSP_LCD_DrawCircle>
}
 8002a6a:	bf00      	nop
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000414 	.word	0x20000414
 8002a78:	20000418 	.word	0x20000418

08002a7c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <BSP_LCD_DisplayOn+0x30>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699a      	ldr	r2, [r3, #24]
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <BSP_LCD_DisplayOn+0x30>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002a90:	2201      	movs	r2, #1
 8002a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a96:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <BSP_LCD_DisplayOn+0x34>)
 8002a98:	f003 f84c 	bl	8005b34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	2108      	movs	r1, #8
 8002aa0:	4804      	ldr	r0, [pc, #16]	; (8002ab4 <BSP_LCD_DisplayOn+0x38>)
 8002aa2:	f003 f847 	bl	8005b34 <HAL_GPIO_WritePin>
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	200084f0 	.word	0x200084f0
 8002ab0:	40022000 	.word	0x40022000
 8002ab4:	40022800 	.word	0x40022800

08002ab8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b090      	sub	sp, #64	; 0x40
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002ac2:	4b64      	ldr	r3, [pc, #400]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	4a63      	ldr	r2, [pc, #396]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002ac8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002acc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ace:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002ada:	4b5e      	ldr	r3, [pc, #376]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a5d      	ldr	r2, [pc, #372]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002ae0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b5b      	ldr	r3, [pc, #364]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002af2:	4b58      	ldr	r3, [pc, #352]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a57      	ldr	r2, [pc, #348]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002af8:	f043 0310 	orr.w	r3, r3, #16
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b55      	ldr	r3, [pc, #340]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	623b      	str	r3, [r7, #32]
 8002b08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b0a:	4b52      	ldr	r3, [pc, #328]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a51      	ldr	r2, [pc, #324]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
 8002b16:	4b4f      	ldr	r3, [pc, #316]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002b22:	4b4c      	ldr	r3, [pc, #304]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a4b      	ldr	r2, [pc, #300]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b49      	ldr	r3, [pc, #292]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002b3a:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a45      	ldr	r2, [pc, #276]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002b52:	4b40      	ldr	r3, [pc, #256]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	4a3f      	ldr	r2, [pc, #252]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002b6a:	4b3a      	ldr	r3, [pc, #232]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a39      	ldr	r2, [pc, #228]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002b82:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4a33      	ldr	r2, [pc, #204]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <BSP_LCD_MspInit+0x19c>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002b9a:	2310      	movs	r3, #16
 8002b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002baa:	230e      	movs	r3, #14
 8002bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4828      	ldr	r0, [pc, #160]	; (8002c58 <BSP_LCD_MspInit+0x1a0>)
 8002bb6:	f002 fd05 	bl	80055c4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002bc4:	2309      	movs	r3, #9
 8002bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4823      	ldr	r0, [pc, #140]	; (8002c5c <BSP_LCD_MspInit+0x1a4>)
 8002bd0:	f002 fcf8 	bl	80055c4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002bd4:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002bde:	230e      	movs	r3, #14
 8002be0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002be6:	4619      	mov	r1, r3
 8002be8:	481d      	ldr	r0, [pc, #116]	; (8002c60 <BSP_LCD_MspInit+0x1a8>)
 8002bea:	f002 fceb 	bl	80055c4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002bee:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002bf8:	230e      	movs	r3, #14
 8002bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c00:	4619      	mov	r1, r3
 8002c02:	4818      	ldr	r0, [pc, #96]	; (8002c64 <BSP_LCD_MspInit+0x1ac>)
 8002c04:	f002 fcde 	bl	80055c4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002c08:	23f7      	movs	r3, #247	; 0xf7
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002c10:	230e      	movs	r3, #14
 8002c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4813      	ldr	r0, [pc, #76]	; (8002c68 <BSP_LCD_MspInit+0x1b0>)
 8002c1c:	f002 fcd2 	bl	80055c4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c26:	2301      	movs	r3, #1
 8002c28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c2e:	4619      	mov	r1, r3
 8002c30:	480b      	ldr	r0, [pc, #44]	; (8002c60 <BSP_LCD_MspInit+0x1a8>)
 8002c32:	f002 fcc7 	bl	80055c4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002c36:	2308      	movs	r3, #8
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002c3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c42:	4619      	mov	r1, r3
 8002c44:	4808      	ldr	r0, [pc, #32]	; (8002c68 <BSP_LCD_MspInit+0x1b0>)
 8002c46:	f002 fcbd 	bl	80055c4 <HAL_GPIO_Init>
}
 8002c4a:	bf00      	nop
 8002c4c:	3740      	adds	r7, #64	; 0x40
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40021800 	.word	0x40021800
 8002c60:	40022000 	.word	0x40022000
 8002c64:	40022400 	.word	0x40022400
 8002c68:	40022800 	.word	0x40022800

08002c6c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <BSP_LCD_ClockConfig+0x34>)
 8002c78:	2208      	movs	r2, #8
 8002c7a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <BSP_LCD_ClockConfig+0x34>)
 8002c7e:	22c0      	movs	r2, #192	; 0xc0
 8002c80:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002c82:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <BSP_LCD_ClockConfig+0x34>)
 8002c84:	2205      	movs	r2, #5
 8002c86:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <BSP_LCD_ClockConfig+0x34>)
 8002c8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002c90:	4803      	ldr	r0, [pc, #12]	; (8002ca0 <BSP_LCD_ClockConfig+0x34>)
 8002c92:	f004 fe3f 	bl	8007914 <HAL_RCCEx_PeriphCLKConfig>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000430 	.word	0x20000430

08002ca4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <LL_FillBuffer+0x88>)
 8002cb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002cb8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002cba:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <LL_FillBuffer+0x8c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1d      	ldr	r2, [pc, #116]	; (8002d34 <LL_FillBuffer+0x90>)
 8002cc0:	2134      	movs	r1, #52	; 0x34
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3348      	adds	r3, #72	; 0x48
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d103      	bne.n	8002cd8 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002cd0:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <LL_FillBuffer+0x88>)
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	e002      	b.n	8002cde <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <LL_FillBuffer+0x88>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002cde:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <LL_FillBuffer+0x88>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <LL_FillBuffer+0x88>)
 8002ce6:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <LL_FillBuffer+0x94>)
 8002ce8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002cea:	4810      	ldr	r0, [pc, #64]	; (8002d2c <LL_FillBuffer+0x88>)
 8002cec:	f002 f8ce 	bl	8004e8c <HAL_DMA2D_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d115      	bne.n	8002d22 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002cf6:	68f9      	ldr	r1, [r7, #12]
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <LL_FillBuffer+0x88>)
 8002cfa:	f002 fb35 	bl	8005368 <HAL_DMA2D_ConfigLayer>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10e      	bne.n	8002d22 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69f9      	ldr	r1, [r7, #28]
 8002d0e:	4807      	ldr	r0, [pc, #28]	; (8002d2c <LL_FillBuffer+0x88>)
 8002d10:	f002 f906 	bl	8004f20 <HAL_DMA2D_Start>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002d1a:	210a      	movs	r1, #10
 8002d1c:	4803      	ldr	r0, [pc, #12]	; (8002d2c <LL_FillBuffer+0x88>)
 8002d1e:	f002 f92a 	bl	8004f76 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200003d4 	.word	0x200003d4
 8002d30:	20000414 	.word	0x20000414
 8002d34:	200084f0 	.word	0x200084f0
 8002d38:	4002b000 	.word	0x4002b000

08002d3c <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <LL_ConvertLineToARGB8888+0x80>)
 8002d4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d50:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002d52:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <LL_ConvertLineToARGB8888+0x80>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8002d58:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <LL_ConvertLineToARGB8888+0x80>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <LL_ConvertLineToARGB8888+0x80>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8002d64:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <LL_ConvertLineToARGB8888+0x80>)
 8002d66:	22ff      	movs	r2, #255	; 0xff
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8002d6a:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <LL_ConvertLineToARGB8888+0x80>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <LL_ConvertLineToARGB8888+0x80>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <LL_ConvertLineToARGB8888+0x80>)
 8002d78:	4a11      	ldr	r2, [pc, #68]	; (8002dc0 <LL_ConvertLineToARGB8888+0x84>)
 8002d7a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002d7c:	480f      	ldr	r0, [pc, #60]	; (8002dbc <LL_ConvertLineToARGB8888+0x80>)
 8002d7e:	f002 f885 	bl	8004e8c <HAL_DMA2D_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d115      	bne.n	8002db4 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8002d88:	2101      	movs	r1, #1
 8002d8a:	480c      	ldr	r0, [pc, #48]	; (8002dbc <LL_ConvertLineToARGB8888+0x80>)
 8002d8c:	f002 faec 	bl	8005368 <HAL_DMA2D_ConfigLayer>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10e      	bne.n	8002db4 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8002d96:	68f9      	ldr	r1, [r7, #12]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4806      	ldr	r0, [pc, #24]	; (8002dbc <LL_ConvertLineToARGB8888+0x80>)
 8002da2:	f002 f8bd 	bl	8004f20 <HAL_DMA2D_Start>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d103      	bne.n	8002db4 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002dac:	210a      	movs	r1, #10
 8002dae:	4803      	ldr	r0, [pc, #12]	; (8002dbc <LL_ConvertLineToARGB8888+0x80>)
 8002db0:	f002 f8e1 	bl	8004f76 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	200003d4 	.word	0x200003d4
 8002dc0:	4002b000 	.word	0x4002b000

08002dc4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002dc8:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <BSP_SDRAM_Init+0xac>)
 8002dca:	4a2a      	ldr	r2, [pc, #168]	; (8002e74 <BSP_SDRAM_Init+0xb0>)
 8002dcc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002dce:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <BSP_SDRAM_Init+0xb4>)
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002dd4:	4b28      	ldr	r3, [pc, #160]	; (8002e78 <BSP_SDRAM_Init+0xb4>)
 8002dd6:	2207      	movs	r2, #7
 8002dd8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002dda:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <BSP_SDRAM_Init+0xb4>)
 8002ddc:	2204      	movs	r2, #4
 8002dde:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002de0:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <BSP_SDRAM_Init+0xb4>)
 8002de2:	2207      	movs	r2, #7
 8002de4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002de6:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <BSP_SDRAM_Init+0xb4>)
 8002de8:	2202      	movs	r2, #2
 8002dea:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002dec:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <BSP_SDRAM_Init+0xb4>)
 8002dee:	2202      	movs	r2, #2
 8002df0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002df2:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <BSP_SDRAM_Init+0xb4>)
 8002df4:	2202      	movs	r2, #2
 8002df6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002df8:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <BSP_SDRAM_Init+0xac>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <BSP_SDRAM_Init+0xac>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <BSP_SDRAM_Init+0xac>)
 8002e06:	2204      	movs	r2, #4
 8002e08:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002e0a:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <BSP_SDRAM_Init+0xac>)
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002e10:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <BSP_SDRAM_Init+0xac>)
 8002e12:	2240      	movs	r2, #64	; 0x40
 8002e14:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <BSP_SDRAM_Init+0xac>)
 8002e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e1c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <BSP_SDRAM_Init+0xac>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <BSP_SDRAM_Init+0xac>)
 8002e26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e2a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002e2c:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <BSP_SDRAM_Init+0xac>)
 8002e2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e32:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <BSP_SDRAM_Init+0xac>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	480c      	ldr	r0, [pc, #48]	; (8002e70 <BSP_SDRAM_Init+0xac>)
 8002e3e:	f000 f87f 	bl	8002f40 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002e42:	490d      	ldr	r1, [pc, #52]	; (8002e78 <BSP_SDRAM_Init+0xb4>)
 8002e44:	480a      	ldr	r0, [pc, #40]	; (8002e70 <BSP_SDRAM_Init+0xac>)
 8002e46:	f005 fd2d 	bl	80088a4 <HAL_SDRAM_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <BSP_SDRAM_Init+0xb8>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e002      	b.n	8002e5e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <BSP_SDRAM_Init+0xb8>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002e5e:	f240 6003 	movw	r0, #1539	; 0x603
 8002e62:	f000 f80d 	bl	8002e80 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <BSP_SDRAM_Init+0xb8>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20008598 	.word	0x20008598
 8002e74:	a0000140 	.word	0xa0000140
 8002e78:	200004b4 	.word	0x200004b4
 8002e7c:	20000038 	.word	0x20000038

08002e80 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002e8c:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002e92:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e94:	2210      	movs	r2, #16
 8002e96:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002e98:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ea8:	4923      	ldr	r1, [pc, #140]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eaa:	4824      	ldr	r0, [pc, #144]	; (8002f3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002eac:	f005 fd2e 	bl	800890c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f001 f853 	bl	8003f5c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002eb6:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eb8:	2202      	movs	r2, #2
 8002eba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ebe:	2210      	movs	r2, #16
 8002ec0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ed2:	4919      	ldr	r1, [pc, #100]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ed4:	4819      	ldr	r0, [pc, #100]	; (8002f3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ed6:	f005 fd19 	bl	800890c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002eda:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002edc:	2203      	movs	r2, #3
 8002ede:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ee0:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ee8:	2208      	movs	r2, #8
 8002eea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ef6:	4910      	ldr	r1, [pc, #64]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ef8:	4810      	ldr	r0, [pc, #64]	; (8002f3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002efa:	f005 fd07 	bl	800890c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002efe:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002f02:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f06:	2204      	movs	r2, #4
 8002f08:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f1a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f20:	4905      	ldr	r1, [pc, #20]	; (8002f38 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f22:	4806      	ldr	r0, [pc, #24]	; (8002f3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f24:	f005 fcf2 	bl	800890c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4804      	ldr	r0, [pc, #16]	; (8002f3c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f2c:	f005 fd23 	bl	8008976 <HAL_SDRAM_ProgramRefreshRate>
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	200004d0 	.word	0x200004d0
 8002f3c:	20008598 	.word	0x20008598

08002f40 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b090      	sub	sp, #64	; 0x40
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002f4a:	4b70      	ldr	r3, [pc, #448]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	4a6f      	ldr	r2, [pc, #444]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6393      	str	r3, [r2, #56]	; 0x38
 8002f56:	4b6d      	ldr	r3, [pc, #436]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002f62:	4b6a      	ldr	r3, [pc, #424]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a69      	ldr	r2, [pc, #420]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002f68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b67      	ldr	r3, [pc, #412]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7a:	4b64      	ldr	r3, [pc, #400]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	4a63      	ldr	r2, [pc, #396]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	6313      	str	r3, [r2, #48]	; 0x30
 8002f86:	4b61      	ldr	r3, [pc, #388]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f92:	4b5e      	ldr	r3, [pc, #376]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4a5d      	ldr	r2, [pc, #372]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002f98:	f043 0308 	orr.w	r3, r3, #8
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	4b5b      	ldr	r3, [pc, #364]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	61fb      	str	r3, [r7, #28]
 8002fa8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002faa:	4b58      	ldr	r3, [pc, #352]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a57      	ldr	r2, [pc, #348]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002fb0:	f043 0310 	orr.w	r3, r3, #16
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b55      	ldr	r3, [pc, #340]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fc2:	4b52      	ldr	r3, [pc, #328]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a51      	ldr	r2, [pc, #324]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002fc8:	f043 0320 	orr.w	r3, r3, #32
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b4f      	ldr	r3, [pc, #316]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fda:	4b4c      	ldr	r3, [pc, #304]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a4b      	ldr	r2, [pc, #300]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b49      	ldr	r3, [pc, #292]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ff2:	4b46      	ldr	r3, [pc, #280]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	4a45      	ldr	r2, [pc, #276]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8002ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffe:	4b43      	ldr	r3, [pc, #268]	; (800310c <BSP_SDRAM_MspInit+0x1cc>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800300e:	2301      	movs	r3, #1
 8003010:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003012:	2302      	movs	r3, #2
 8003014:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003016:	230c      	movs	r3, #12
 8003018:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800301a:	2308      	movs	r3, #8
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800301e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003022:	4619      	mov	r1, r3
 8003024:	483a      	ldr	r0, [pc, #232]	; (8003110 <BSP_SDRAM_MspInit+0x1d0>)
 8003026:	f002 facd 	bl	80055c4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800302a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800302e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003034:	4619      	mov	r1, r3
 8003036:	4837      	ldr	r0, [pc, #220]	; (8003114 <BSP_SDRAM_MspInit+0x1d4>)
 8003038:	f002 fac4 	bl	80055c4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800303c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003042:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003046:	4619      	mov	r1, r3
 8003048:	4833      	ldr	r0, [pc, #204]	; (8003118 <BSP_SDRAM_MspInit+0x1d8>)
 800304a:	f002 fabb 	bl	80055c4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800304e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003054:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003058:	4619      	mov	r1, r3
 800305a:	4830      	ldr	r0, [pc, #192]	; (800311c <BSP_SDRAM_MspInit+0x1dc>)
 800305c:	f002 fab2 	bl	80055c4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003060:	f248 1333 	movw	r3, #33075	; 0x8133
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800306a:	4619      	mov	r1, r3
 800306c:	482c      	ldr	r0, [pc, #176]	; (8003120 <BSP_SDRAM_MspInit+0x1e0>)
 800306e:	f002 faa9 	bl	80055c4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003072:	2328      	movs	r3, #40	; 0x28
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003076:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800307a:	4619      	mov	r1, r3
 800307c:	4829      	ldr	r0, [pc, #164]	; (8003124 <BSP_SDRAM_MspInit+0x1e4>)
 800307e:	f002 faa1 	bl	80055c4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 8003084:	2200      	movs	r2, #0
 8003086:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003088:	4b27      	ldr	r3, [pc, #156]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 8003090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003094:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003096:	4b24      	ldr	r3, [pc, #144]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 8003098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800309c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800309e:	4b22      	ldr	r3, [pc, #136]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 80030a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030a4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 80030a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030ac:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80030ae:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80030b4:	4b1c      	ldr	r3, [pc, #112]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 80030b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030ba:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80030bc:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 80030be:	2200      	movs	r2, #0
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80030c2:	4b19      	ldr	r3, [pc, #100]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 80030c4:	2203      	movs	r2, #3
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80030c8:	4b17      	ldr	r3, [pc, #92]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80030ce:	4b16      	ldr	r3, [pc, #88]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80030d4:	4b14      	ldr	r3, [pc, #80]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 80030d6:	4a15      	ldr	r2, [pc, #84]	; (800312c <BSP_SDRAM_MspInit+0x1ec>)
 80030d8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a12      	ldr	r2, [pc, #72]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
 80030e0:	4a11      	ldr	r2, [pc, #68]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80030e6:	4810      	ldr	r0, [pc, #64]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 80030e8:	f001 fd2e 	bl	8004b48 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80030ec:	480e      	ldr	r0, [pc, #56]	; (8003128 <BSP_SDRAM_MspInit+0x1e8>)
 80030ee:	f001 fc7d 	bl	80049ec <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80030f2:	2200      	movs	r2, #0
 80030f4:	210f      	movs	r1, #15
 80030f6:	2038      	movs	r0, #56	; 0x38
 80030f8:	f001 fb6e 	bl	80047d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80030fc:	2038      	movs	r0, #56	; 0x38
 80030fe:	f001 fb87 	bl	8004810 <HAL_NVIC_EnableIRQ>
}
 8003102:	bf00      	nop
 8003104:	3740      	adds	r7, #64	; 0x40
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800
 8003110:	40020800 	.word	0x40020800
 8003114:	40020c00 	.word	0x40020c00
 8003118:	40021000 	.word	0x40021000
 800311c:	40021400 	.word	0x40021400
 8003120:	40021800 	.word	0x40021800
 8003124:	40021c00 	.word	0x40021c00
 8003128:	200004e0 	.word	0x200004e0
 800312c:	40026410 	.word	0x40026410

08003130 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	460a      	mov	r2, r1
 800313a:	80fb      	strh	r3, [r7, #6]
 800313c:	4613      	mov	r3, r2
 800313e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003144:	4a14      	ldr	r2, [pc, #80]	; (8003198 <BSP_TS_Init+0x68>)
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800314a:	4a14      	ldr	r2, [pc, #80]	; (800319c <BSP_TS_Init+0x6c>)
 800314c:	88bb      	ldrh	r3, [r7, #4]
 800314e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <BSP_TS_Init+0x70>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2070      	movs	r0, #112	; 0x70
 8003156:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003158:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <BSP_TS_Init+0x70>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2070      	movs	r0, #112	; 0x70
 800315e:	4798      	blx	r3
 8003160:	4603      	mov	r3, r0
 8003162:	2b51      	cmp	r3, #81	; 0x51
 8003164:	d111      	bne.n	800318a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <BSP_TS_Init+0x74>)
 8003168:	4a0d      	ldr	r2, [pc, #52]	; (80031a0 <BSP_TS_Init+0x70>)
 800316a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800316c:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <BSP_TS_Init+0x78>)
 800316e:	2270      	movs	r2, #112	; 0x70
 8003170:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <BSP_TS_Init+0x7c>)
 8003174:	2208      	movs	r2, #8
 8003176:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <BSP_TS_Init+0x74>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <BSP_TS_Init+0x78>)
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	b292      	uxth	r2, r2
 8003184:	4610      	mov	r0, r2
 8003186:	4798      	blx	r3
 8003188:	e001      	b.n	800318e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800318a:	2303      	movs	r3, #3
 800318c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	20000544 	.word	0x20000544
 800319c:	20000546 	.word	0x20000546
 80031a0:	20000000 	.word	0x20000000
 80031a4:	20000540 	.word	0x20000540
 80031a8:	20000549 	.word	0x20000549
 80031ac:	20000548 	.word	0x20000548

080031b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_MspInit+0x4c>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <HAL_MspInit+0x4c>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	6413      	str	r3, [r2, #64]	; 0x40
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <HAL_MspInit+0x4c>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ce:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_MspInit+0x4c>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <HAL_MspInit+0x4c>)
 80031d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d8:	6453      	str	r3, [r2, #68]	; 0x44
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_MspInit+0x4c>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	210f      	movs	r1, #15
 80031ea:	f06f 0001 	mvn.w	r0, #1
 80031ee:	f001 faf3 	bl	80047d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40023800 	.word	0x40023800

08003200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b08c      	sub	sp, #48	; 0x30
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003208:	f107 031c 	add.w	r3, r7, #28
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	60da      	str	r2, [r3, #12]
 8003216:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2a      	ldr	r2, [pc, #168]	; (80032c8 <HAL_ADC_MspInit+0xc8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d124      	bne.n	800326c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003222:	4b2a      	ldr	r3, [pc, #168]	; (80032cc <HAL_ADC_MspInit+0xcc>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	4a29      	ldr	r2, [pc, #164]	; (80032cc <HAL_ADC_MspInit+0xcc>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	6453      	str	r3, [r2, #68]	; 0x44
 800322e:	4b27      	ldr	r3, [pc, #156]	; (80032cc <HAL_ADC_MspInit+0xcc>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_ADC_MspInit+0xcc>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a23      	ldr	r2, [pc, #140]	; (80032cc <HAL_ADC_MspInit+0xcc>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b21      	ldr	r3, [pc, #132]	; (80032cc <HAL_ADC_MspInit+0xcc>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003252:	2301      	movs	r3, #1
 8003254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003256:	2303      	movs	r3, #3
 8003258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325e:	f107 031c 	add.w	r3, r7, #28
 8003262:	4619      	mov	r1, r3
 8003264:	481a      	ldr	r0, [pc, #104]	; (80032d0 <HAL_ADC_MspInit+0xd0>)
 8003266:	f002 f9ad 	bl	80055c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800326a:	e029      	b.n	80032c0 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <HAL_ADC_MspInit+0xd4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d124      	bne.n	80032c0 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <HAL_ADC_MspInit+0xcc>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	4a14      	ldr	r2, [pc, #80]	; (80032cc <HAL_ADC_MspInit+0xcc>)
 800327c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003280:	6453      	str	r3, [r2, #68]	; 0x44
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_ADC_MspInit+0xcc>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800328e:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <HAL_ADC_MspInit+0xcc>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <HAL_ADC_MspInit+0xcc>)
 8003294:	f043 0320 	orr.w	r3, r3, #32
 8003298:	6313      	str	r3, [r2, #48]	; 0x30
 800329a:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <HAL_ADC_MspInit+0xcc>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80032a6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80032aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032ac:	2303      	movs	r3, #3
 80032ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	4619      	mov	r1, r3
 80032ba:	4807      	ldr	r0, [pc, #28]	; (80032d8 <HAL_ADC_MspInit+0xd8>)
 80032bc:	f002 f982 	bl	80055c4 <HAL_GPIO_Init>
}
 80032c0:	bf00      	nop
 80032c2:	3730      	adds	r7, #48	; 0x30
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40012000 	.word	0x40012000
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40020000 	.word	0x40020000
 80032d4:	40012200 	.word	0x40012200
 80032d8:	40021400 	.word	0x40021400

080032dc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e4:	f107 0314 	add.w	r3, r7, #20
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a19      	ldr	r2, [pc, #100]	; (8003360 <HAL_DAC_MspInit+0x84>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d12b      	bne.n	8003356 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80032fe:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_DAC_MspInit+0x88>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_DAC_MspInit+0x88>)
 8003304:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003308:	6413      	str	r3, [r2, #64]	; 0x40
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <HAL_DAC_MspInit+0x88>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_DAC_MspInit+0x88>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <HAL_DAC_MspInit+0x88>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6313      	str	r3, [r2, #48]	; 0x30
 8003322:	4b10      	ldr	r3, [pc, #64]	; (8003364 <HAL_DAC_MspInit+0x88>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800332e:	2310      	movs	r3, #16
 8003330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003332:	2303      	movs	r3, #3
 8003334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333a:	f107 0314 	add.w	r3, r7, #20
 800333e:	4619      	mov	r1, r3
 8003340:	4809      	ldr	r0, [pc, #36]	; (8003368 <HAL_DAC_MspInit+0x8c>)
 8003342:	f002 f93f 	bl	80055c4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	210f      	movs	r1, #15
 800334a:	2036      	movs	r0, #54	; 0x36
 800334c:	f001 fa44 	bl	80047d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003350:	2036      	movs	r0, #54	; 0x36
 8003352:	f001 fa5d 	bl	8004810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003356:	bf00      	nop
 8003358:	3728      	adds	r7, #40	; 0x28
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40007400 	.word	0x40007400
 8003364:	40023800 	.word	0x40023800
 8003368:	40020000 	.word	0x40020000

0800336c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <HAL_DMA2D_MspInit+0x44>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d113      	bne.n	80033a6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <HAL_DMA2D_MspInit+0x48>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	4a0c      	ldr	r2, [pc, #48]	; (80033b4 <HAL_DMA2D_MspInit+0x48>)
 8003384:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003388:	6313      	str	r3, [r2, #48]	; 0x30
 800338a:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <HAL_DMA2D_MspInit+0x48>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003396:	2200      	movs	r2, #0
 8003398:	2105      	movs	r1, #5
 800339a:	205a      	movs	r0, #90	; 0x5a
 800339c:	f001 fa1c 	bl	80047d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80033a0:	205a      	movs	r0, #90	; 0x5a
 80033a2:	f001 fa35 	bl	8004810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80033a6:	bf00      	nop
 80033a8:	3710      	adds	r7, #16
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	4002b000 	.word	0x4002b000
 80033b4:	40023800 	.word	0x40023800

080033b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b0ac      	sub	sp, #176	; 0xb0
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033d0:	f107 0318 	add.w	r3, r7, #24
 80033d4:	2284      	movs	r2, #132	; 0x84
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f009 fc47 	bl	800cc6c <memset>
  if(hi2c->Instance==I2C1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a44      	ldr	r2, [pc, #272]	; (80034f4 <HAL_I2C_MspInit+0x13c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d13d      	bne.n	8003464 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80033e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80033ee:	2300      	movs	r3, #0
 80033f0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033f2:	f107 0318 	add.w	r3, r7, #24
 80033f6:	4618      	mov	r0, r3
 80033f8:	f004 fa8c 	bl	8007914 <HAL_RCCEx_PeriphCLKConfig>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003402:	f7fe fd33 	bl	8001e6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003406:	4b3c      	ldr	r3, [pc, #240]	; (80034f8 <HAL_I2C_MspInit+0x140>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	4a3b      	ldr	r2, [pc, #236]	; (80034f8 <HAL_I2C_MspInit+0x140>)
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	6313      	str	r3, [r2, #48]	; 0x30
 8003412:	4b39      	ldr	r3, [pc, #228]	; (80034f8 <HAL_I2C_MspInit+0x140>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800341e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003426:	2312      	movs	r3, #18
 8003428:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003432:	2303      	movs	r3, #3
 8003434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003438:	2304      	movs	r3, #4
 800343a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003442:	4619      	mov	r1, r3
 8003444:	482d      	ldr	r0, [pc, #180]	; (80034fc <HAL_I2C_MspInit+0x144>)
 8003446:	f002 f8bd 	bl	80055c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800344a:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <HAL_I2C_MspInit+0x140>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	4a2a      	ldr	r2, [pc, #168]	; (80034f8 <HAL_I2C_MspInit+0x140>)
 8003450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003454:	6413      	str	r3, [r2, #64]	; 0x40
 8003456:	4b28      	ldr	r3, [pc, #160]	; (80034f8 <HAL_I2C_MspInit+0x140>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003462:	e042      	b.n	80034ea <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a25      	ldr	r2, [pc, #148]	; (8003500 <HAL_I2C_MspInit+0x148>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d13d      	bne.n	80034ea <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800346e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003472:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003474:	2300      	movs	r3, #0
 8003476:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800347a:	f107 0318 	add.w	r3, r7, #24
 800347e:	4618      	mov	r0, r3
 8003480:	f004 fa48 	bl	8007914 <HAL_RCCEx_PeriphCLKConfig>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800348a:	f7fe fcef 	bl	8001e6c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <HAL_I2C_MspInit+0x140>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <HAL_I2C_MspInit+0x140>)
 8003494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003498:	6313      	str	r3, [r2, #48]	; 0x30
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <HAL_I2C_MspInit+0x140>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80034a6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80034aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034ae:	2312      	movs	r3, #18
 80034b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ba:	2303      	movs	r3, #3
 80034bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80034c0:	2304      	movs	r3, #4
 80034c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80034c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034ca:	4619      	mov	r1, r3
 80034cc:	480d      	ldr	r0, [pc, #52]	; (8003504 <HAL_I2C_MspInit+0x14c>)
 80034ce:	f002 f879 	bl	80055c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_I2C_MspInit+0x140>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a08      	ldr	r2, [pc, #32]	; (80034f8 <HAL_I2C_MspInit+0x140>)
 80034d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_I2C_MspInit+0x140>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
}
 80034ea:	bf00      	nop
 80034ec:	37b0      	adds	r7, #176	; 0xb0
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40005400 	.word	0x40005400
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40020400 	.word	0x40020400
 8003500:	40005c00 	.word	0x40005c00
 8003504:	40021c00 	.word	0x40021c00

08003508 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a15      	ldr	r2, [pc, #84]	; (800356c <HAL_I2C_MspDeInit+0x64>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d110      	bne.n	800353c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_I2C_MspDeInit+0x68>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	4a14      	ldr	r2, [pc, #80]	; (8003570 <HAL_I2C_MspDeInit+0x68>)
 8003520:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003524:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800352a:	4812      	ldr	r0, [pc, #72]	; (8003574 <HAL_I2C_MspDeInit+0x6c>)
 800352c:	f002 f9f6 	bl	800591c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003530:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003534:	480f      	ldr	r0, [pc, #60]	; (8003574 <HAL_I2C_MspDeInit+0x6c>)
 8003536:	f002 f9f1 	bl	800591c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800353a:	e013      	b.n	8003564 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0d      	ldr	r2, [pc, #52]	; (8003578 <HAL_I2C_MspDeInit+0x70>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d10e      	bne.n	8003564 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_I2C_MspDeInit+0x68>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	4a09      	ldr	r2, [pc, #36]	; (8003570 <HAL_I2C_MspDeInit+0x68>)
 800354c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003550:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003552:	2180      	movs	r1, #128	; 0x80
 8003554:	4809      	ldr	r0, [pc, #36]	; (800357c <HAL_I2C_MspDeInit+0x74>)
 8003556:	f002 f9e1 	bl	800591c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800355a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800355e:	4807      	ldr	r0, [pc, #28]	; (800357c <HAL_I2C_MspDeInit+0x74>)
 8003560:	f002 f9dc 	bl	800591c <HAL_GPIO_DeInit>
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40005400 	.word	0x40005400
 8003570:	40023800 	.word	0x40023800
 8003574:	40020400 	.word	0x40020400
 8003578:	40005c00 	.word	0x40005c00
 800357c:	40021c00 	.word	0x40021c00

08003580 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b0ae      	sub	sp, #184	; 0xb8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003588:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003598:	f107 0320 	add.w	r3, r7, #32
 800359c:	2284      	movs	r2, #132	; 0x84
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f009 fb63 	bl	800cc6c <memset>
  if(hltdc->Instance==LTDC)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a6f      	ldr	r2, [pc, #444]	; (8003768 <HAL_LTDC_MspInit+0x1e8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	f040 80d6 	bne.w	800375e <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80035b2:	2308      	movs	r3, #8
 80035b4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80035b6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80035ba:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80035bc:	2305      	movs	r3, #5
 80035be:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80035c0:	2302      	movs	r3, #2
 80035c2:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80035c4:	2303      	movs	r3, #3
 80035c6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80035c8:	2301      	movs	r3, #1
 80035ca:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80035cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035d2:	f107 0320 	add.w	r3, r7, #32
 80035d6:	4618      	mov	r0, r3
 80035d8:	f004 f99c 	bl	8007914 <HAL_RCCEx_PeriphCLKConfig>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80035e2:	f7fe fc43 	bl	8001e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80035e6:	4b61      	ldr	r3, [pc, #388]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	4a60      	ldr	r2, [pc, #384]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 80035ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035f0:	6453      	str	r3, [r2, #68]	; 0x44
 80035f2:	4b5e      	ldr	r3, [pc, #376]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035fa:	61fb      	str	r3, [r7, #28]
 80035fc:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035fe:	4b5b      	ldr	r3, [pc, #364]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	4a5a      	ldr	r2, [pc, #360]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 8003604:	f043 0310 	orr.w	r3, r3, #16
 8003608:	6313      	str	r3, [r2, #48]	; 0x30
 800360a:	4b58      	ldr	r3, [pc, #352]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003616:	4b55      	ldr	r3, [pc, #340]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a54      	ldr	r2, [pc, #336]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 800361c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b52      	ldr	r3, [pc, #328]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800362e:	4b4f      	ldr	r3, [pc, #316]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a4e      	ldr	r2, [pc, #312]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 8003634:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b4c      	ldr	r3, [pc, #304]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003646:	4b49      	ldr	r3, [pc, #292]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a48      	ldr	r2, [pc, #288]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 800364c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b46      	ldr	r3, [pc, #280]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800365e:	4b43      	ldr	r3, [pc, #268]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a42      	ldr	r2, [pc, #264]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b40      	ldr	r3, [pc, #256]	; (800376c <HAL_LTDC_MspInit+0x1ec>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003676:	2310      	movs	r3, #16
 8003678:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003688:	2300      	movs	r3, #0
 800368a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800368e:	230e      	movs	r3, #14
 8003690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003694:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003698:	4619      	mov	r1, r3
 800369a:	4835      	ldr	r0, [pc, #212]	; (8003770 <HAL_LTDC_MspInit+0x1f0>)
 800369c:	f001 ff92 	bl	80055c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80036a0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80036a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a8:	2302      	movs	r3, #2
 80036aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80036ba:	230e      	movs	r3, #14
 80036bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80036c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036c4:	4619      	mov	r1, r3
 80036c6:	482b      	ldr	r0, [pc, #172]	; (8003774 <HAL_LTDC_MspInit+0x1f4>)
 80036c8:	f001 ff7c 	bl	80055c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80036cc:	23f7      	movs	r3, #247	; 0xf7
 80036ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	2302      	movs	r3, #2
 80036d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80036e4:	230e      	movs	r3, #14
 80036e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80036ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036ee:	4619      	mov	r1, r3
 80036f0:	4821      	ldr	r0, [pc, #132]	; (8003778 <HAL_LTDC_MspInit+0x1f8>)
 80036f2:	f001 ff67 	bl	80055c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80036f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2302      	movs	r3, #2
 8003700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370a:	2300      	movs	r3, #0
 800370c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003710:	2309      	movs	r3, #9
 8003712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003716:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800371a:	4619      	mov	r1, r3
 800371c:	4817      	ldr	r0, [pc, #92]	; (800377c <HAL_LTDC_MspInit+0x1fc>)
 800371e:	f001 ff51 	bl	80055c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003722:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372a:	2302      	movs	r3, #2
 800372c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	2300      	movs	r3, #0
 8003732:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003736:	2300      	movs	r3, #0
 8003738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800373c:	230e      	movs	r3, #14
 800373e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003742:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003746:	4619      	mov	r1, r3
 8003748:	480d      	ldr	r0, [pc, #52]	; (8003780 <HAL_LTDC_MspInit+0x200>)
 800374a:	f001 ff3b 	bl	80055c4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800374e:	2200      	movs	r2, #0
 8003750:	2105      	movs	r1, #5
 8003752:	2058      	movs	r0, #88	; 0x58
 8003754:	f001 f840 	bl	80047d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003758:	2058      	movs	r0, #88	; 0x58
 800375a:	f001 f859 	bl	8004810 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800375e:	bf00      	nop
 8003760:	37b8      	adds	r7, #184	; 0xb8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40016800 	.word	0x40016800
 800376c:	40023800 	.word	0x40023800
 8003770:	40021000 	.word	0x40021000
 8003774:	40022400 	.word	0x40022400
 8003778:	40022800 	.word	0x40022800
 800377c:	40021800 	.word	0x40021800
 8003780:	40022000 	.word	0x40022000

08003784 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b0a4      	sub	sp, #144	; 0x90
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800378c:	f107 030c 	add.w	r3, r7, #12
 8003790:	2284      	movs	r2, #132	; 0x84
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f009 fa69 	bl	800cc6c <memset>
  if(hrtc->Instance==RTC)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <HAL_RTC_MspInit+0x54>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d114      	bne.n	80037ce <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80037a4:	2320      	movs	r3, #32
 80037a6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80037a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037ae:	f107 030c 	add.w	r3, r7, #12
 80037b2:	4618      	mov	r0, r3
 80037b4:	f004 f8ae 	bl	8007914 <HAL_RCCEx_PeriphCLKConfig>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80037be:	f7fe fb55 	bl	8001e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RTC_MspInit+0x58>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	4a05      	ldr	r2, [pc, #20]	; (80037dc <HAL_RTC_MspInit+0x58>)
 80037c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80037ce:	bf00      	nop
 80037d0:	3790      	adds	r7, #144	; 0x90
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40002800 	.word	0x40002800
 80037dc:	40023800 	.word	0x40023800

080037e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e8:	f107 0314 	add.w	r3, r7, #20
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a25      	ldr	r2, [pc, #148]	; (8003894 <HAL_SPI_MspInit+0xb4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d144      	bne.n	800388c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003802:	4b25      	ldr	r3, [pc, #148]	; (8003898 <HAL_SPI_MspInit+0xb8>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a24      	ldr	r2, [pc, #144]	; (8003898 <HAL_SPI_MspInit+0xb8>)
 8003808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b22      	ldr	r3, [pc, #136]	; (8003898 <HAL_SPI_MspInit+0xb8>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800381a:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <HAL_SPI_MspInit+0xb8>)
 800381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381e:	4a1e      	ldr	r2, [pc, #120]	; (8003898 <HAL_SPI_MspInit+0xb8>)
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	6313      	str	r3, [r2, #48]	; 0x30
 8003826:	4b1c      	ldr	r3, [pc, #112]	; (8003898 <HAL_SPI_MspInit+0xb8>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003832:	4b19      	ldr	r3, [pc, #100]	; (8003898 <HAL_SPI_MspInit+0xb8>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	4a18      	ldr	r2, [pc, #96]	; (8003898 <HAL_SPI_MspInit+0xb8>)
 8003838:	f043 0302 	orr.w	r3, r3, #2
 800383c:	6313      	str	r3, [r2, #48]	; 0x30
 800383e:	4b16      	ldr	r3, [pc, #88]	; (8003898 <HAL_SPI_MspInit+0xb8>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800384a:	2303      	movs	r3, #3
 800384c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003856:	2303      	movs	r3, #3
 8003858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800385a:	2305      	movs	r3, #5
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800385e:	f107 0314 	add.w	r3, r7, #20
 8003862:	4619      	mov	r1, r3
 8003864:	480d      	ldr	r0, [pc, #52]	; (800389c <HAL_SPI_MspInit+0xbc>)
 8003866:	f001 fead 	bl	80055c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800386a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800386e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	2302      	movs	r3, #2
 8003872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003878:	2300      	movs	r3, #0
 800387a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800387c:	2305      	movs	r3, #5
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003880:	f107 0314 	add.w	r3, r7, #20
 8003884:	4619      	mov	r1, r3
 8003886:	4806      	ldr	r0, [pc, #24]	; (80038a0 <HAL_SPI_MspInit+0xc0>)
 8003888:	f001 fe9c 	bl	80055c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800388c:	bf00      	nop
 800388e:	3728      	adds	r7, #40	; 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40003800 	.word	0x40003800
 8003898:	40023800 	.word	0x40023800
 800389c:	40022000 	.word	0x40022000
 80038a0:	40020400 	.word	0x40020400

080038a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08e      	sub	sp, #56	; 0x38
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a3b      	ldr	r2, [pc, #236]	; (80039b0 <HAL_TIM_Base_MspInit+0x10c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d10c      	bne.n	80038e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	4a3a      	ldr	r2, [pc, #232]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6453      	str	r3, [r2, #68]	; 0x44
 80038d2:	4b38      	ldr	r3, [pc, #224]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	623b      	str	r3, [r7, #32]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80038de:	e062      	b.n	80039a6 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e8:	d10c      	bne.n	8003904 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038ea:	4b32      	ldr	r3, [pc, #200]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	4a31      	ldr	r2, [pc, #196]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6413      	str	r3, [r2, #64]	; 0x40
 80038f6:	4b2f      	ldr	r3, [pc, #188]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	69fb      	ldr	r3, [r7, #28]
}
 8003902:	e050      	b.n	80039a6 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2b      	ldr	r2, [pc, #172]	; (80039b8 <HAL_TIM_Base_MspInit+0x114>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10c      	bne.n	8003928 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800390e:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	4a28      	ldr	r2, [pc, #160]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 8003914:	f043 0302 	orr.w	r3, r3, #2
 8003918:	6413      	str	r3, [r2, #64]	; 0x40
 800391a:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	69bb      	ldr	r3, [r7, #24]
}
 8003926:	e03e      	b.n	80039a6 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a23      	ldr	r2, [pc, #140]	; (80039bc <HAL_TIM_Base_MspInit+0x118>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d10c      	bne.n	800394c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 8003938:	f043 0308 	orr.w	r3, r3, #8
 800393c:	6413      	str	r3, [r2, #64]	; 0x40
 800393e:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	697b      	ldr	r3, [r7, #20]
}
 800394a:	e02c      	b.n	80039a6 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1b      	ldr	r2, [pc, #108]	; (80039c0 <HAL_TIM_Base_MspInit+0x11c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d127      	bne.n	80039a6 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 800395c:	f043 0302 	orr.w	r3, r3, #2
 8003960:	6453      	str	r3, [r2, #68]	; 0x44
 8003962:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	4a10      	ldr	r2, [pc, #64]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 8003974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003978:	6313      	str	r3, [r2, #48]	; 0x30
 800397a:	4b0e      	ldr	r3, [pc, #56]	; (80039b4 <HAL_TIM_Base_MspInit+0x110>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003986:	2304      	movs	r3, #4
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398a:	2302      	movs	r3, #2
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	2300      	movs	r3, #0
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003992:	2300      	movs	r3, #0
 8003994:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003996:	2303      	movs	r3, #3
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800399a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800399e:	4619      	mov	r1, r3
 80039a0:	4808      	ldr	r0, [pc, #32]	; (80039c4 <HAL_TIM_Base_MspInit+0x120>)
 80039a2:	f001 fe0f 	bl	80055c4 <HAL_GPIO_Init>
}
 80039a6:	bf00      	nop
 80039a8:	3738      	adds	r7, #56	; 0x38
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000c00 	.word	0x40000c00
 80039c0:	40010400 	.word	0x40010400
 80039c4:	40022000 	.word	0x40022000

080039c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b0b0      	sub	sp, #192	; 0xc0
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039e4:	2284      	movs	r2, #132	; 0x84
 80039e6:	2100      	movs	r1, #0
 80039e8:	4618      	mov	r0, r3
 80039ea:	f009 f93f 	bl	800cc6c <memset>
  if(huart->Instance==UART7)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a79      	ldr	r2, [pc, #484]	; (8003bd8 <HAL_UART_MspInit+0x210>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d13d      	bne.n	8003a74 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80039f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039fc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f003 ff83 	bl	8007914 <HAL_RCCEx_PeriphCLKConfig>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003a14:	f7fe fa2a 	bl	8001e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003a18:	4b70      	ldr	r3, [pc, #448]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	4a6f      	ldr	r2, [pc, #444]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003a1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a22:	6413      	str	r3, [r2, #64]	; 0x40
 8003a24:	4b6d      	ldr	r3, [pc, #436]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a30:	4b6a      	ldr	r3, [pc, #424]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	4a69      	ldr	r2, [pc, #420]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003a36:	f043 0320 	orr.w	r3, r3, #32
 8003a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3c:	4b67      	ldr	r3, [pc, #412]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	623b      	str	r3, [r7, #32]
 8003a46:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003a48:	23c0      	movs	r3, #192	; 0xc0
 8003a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003a60:	2308      	movs	r3, #8
 8003a62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	485c      	ldr	r0, [pc, #368]	; (8003be0 <HAL_UART_MspInit+0x218>)
 8003a6e:	f001 fda9 	bl	80055c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003a72:	e0ac      	b.n	8003bce <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a5a      	ldr	r2, [pc, #360]	; (8003be4 <HAL_UART_MspInit+0x21c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d165      	bne.n	8003b4a <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a7e:	2340      	movs	r3, #64	; 0x40
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a82:	2300      	movs	r3, #0
 8003a84:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f003 ff42 	bl	8007914 <HAL_RCCEx_PeriphCLKConfig>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8003a96:	f7fe f9e9 	bl	8001e6c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a9a:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	4a4f      	ldr	r2, [pc, #316]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003aa0:	f043 0310 	orr.w	r3, r3, #16
 8003aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa6:	4b4d      	ldr	r3, [pc, #308]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab2:	4b4a      	ldr	r3, [pc, #296]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	4a49      	ldr	r2, [pc, #292]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003ab8:	f043 0302 	orr.w	r3, r3, #2
 8003abc:	6313      	str	r3, [r2, #48]	; 0x30
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aca:	4b44      	ldr	r3, [pc, #272]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4a43      	ldr	r2, [pc, #268]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad6:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003ae2:	2380      	movs	r3, #128	; 0x80
 8003ae4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	2300      	movs	r3, #0
 8003af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af4:	2300      	movs	r3, #0
 8003af6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003afa:	2307      	movs	r3, #7
 8003afc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003b00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b04:	4619      	mov	r1, r3
 8003b06:	4838      	ldr	r0, [pc, #224]	; (8003be8 <HAL_UART_MspInit+0x220>)
 8003b08:	f001 fd5c 	bl	80055c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b14:	2302      	movs	r3, #2
 8003b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b26:	2307      	movs	r3, #7
 8003b28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003b2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b30:	4619      	mov	r1, r3
 8003b32:	482e      	ldr	r0, [pc, #184]	; (8003bec <HAL_UART_MspInit+0x224>)
 8003b34:	f001 fd46 	bl	80055c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2107      	movs	r1, #7
 8003b3c:	2025      	movs	r0, #37	; 0x25
 8003b3e:	f000 fe4b 	bl	80047d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b42:	2025      	movs	r0, #37	; 0x25
 8003b44:	f000 fe64 	bl	8004810 <HAL_NVIC_EnableIRQ>
}
 8003b48:	e041      	b.n	8003bce <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a28      	ldr	r2, [pc, #160]	; (8003bf0 <HAL_UART_MspInit+0x228>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d13c      	bne.n	8003bce <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003b54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b64:	4618      	mov	r0, r3
 8003b66:	f003 fed5 	bl	8007914 <HAL_RCCEx_PeriphCLKConfig>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8003b70:	f7fe f97c 	bl	8001e6c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003b74:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b78:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003b7a:	f043 0320 	orr.w	r3, r3, #32
 8003b7e:	6453      	str	r3, [r2, #68]	; 0x44
 8003b80:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003b92:	f043 0304 	orr.w	r3, r3, #4
 8003b96:	6313      	str	r3, [r2, #48]	; 0x30
 8003b98:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <HAL_UART_MspInit+0x214>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003ba4:	23c0      	movs	r3, #192	; 0xc0
 8003ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003baa:	2302      	movs	r3, #2
 8003bac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	480a      	ldr	r0, [pc, #40]	; (8003bf4 <HAL_UART_MspInit+0x22c>)
 8003bca:	f001 fcfb 	bl	80055c4 <HAL_GPIO_Init>
}
 8003bce:	bf00      	nop
 8003bd0:	37c0      	adds	r7, #192	; 0xc0
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40007800 	.word	0x40007800
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40021400 	.word	0x40021400
 8003be4:	40011000 	.word	0x40011000
 8003be8:	40020400 	.word	0x40020400
 8003bec:	40020000 	.word	0x40020000
 8003bf0:	40011400 	.word	0x40011400
 8003bf4:	40020800 	.word	0x40020800

08003bf8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003bfe:	1d3b      	adds	r3, r7, #4
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003c0c:	4b3a      	ldr	r3, [pc, #232]	; (8003cf8 <HAL_FMC_MspInit+0x100>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d16d      	bne.n	8003cf0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003c14:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <HAL_FMC_MspInit+0x100>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003c1a:	4b38      	ldr	r3, [pc, #224]	; (8003cfc <HAL_FMC_MspInit+0x104>)
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	4a37      	ldr	r2, [pc, #220]	; (8003cfc <HAL_FMC_MspInit+0x104>)
 8003c20:	f043 0301 	orr.w	r3, r3, #1
 8003c24:	6393      	str	r3, [r2, #56]	; 0x38
 8003c26:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <HAL_FMC_MspInit+0x104>)
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	603b      	str	r3, [r7, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003c32:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003c36:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c40:	2303      	movs	r3, #3
 8003c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c44:	230c      	movs	r3, #12
 8003c46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c48:	1d3b      	adds	r3, r7, #4
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	482c      	ldr	r0, [pc, #176]	; (8003d00 <HAL_FMC_MspInit+0x108>)
 8003c4e:	f001 fcb9 	bl	80055c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003c52:	f248 1333 	movw	r3, #33075	; 0x8133
 8003c56:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c60:	2303      	movs	r3, #3
 8003c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c64:	230c      	movs	r3, #12
 8003c66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c68:	1d3b      	adds	r3, r7, #4
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4825      	ldr	r0, [pc, #148]	; (8003d04 <HAL_FMC_MspInit+0x10c>)
 8003c6e:	f001 fca9 	bl	80055c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003c72:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003c76:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c80:	2303      	movs	r3, #3
 8003c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c84:	230c      	movs	r3, #12
 8003c86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c88:	1d3b      	adds	r3, r7, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	481e      	ldr	r0, [pc, #120]	; (8003d08 <HAL_FMC_MspInit+0x110>)
 8003c8e:	f001 fc99 	bl	80055c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003c92:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003c96:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ca4:	230c      	movs	r3, #12
 8003ca6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ca8:	1d3b      	adds	r3, r7, #4
 8003caa:	4619      	mov	r1, r3
 8003cac:	4817      	ldr	r0, [pc, #92]	; (8003d0c <HAL_FMC_MspInit+0x114>)
 8003cae:	f001 fc89 	bl	80055c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003cb2:	2328      	movs	r3, #40	; 0x28
 8003cb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003cc2:	230c      	movs	r3, #12
 8003cc4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003cc6:	1d3b      	adds	r3, r7, #4
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4811      	ldr	r0, [pc, #68]	; (8003d10 <HAL_FMC_MspInit+0x118>)
 8003ccc:	f001 fc7a 	bl	80055c4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ce0:	230c      	movs	r3, #12
 8003ce2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003ce4:	1d3b      	adds	r3, r7, #4
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	480a      	ldr	r0, [pc, #40]	; (8003d14 <HAL_FMC_MspInit+0x11c>)
 8003cea:	f001 fc6b 	bl	80055c4 <HAL_GPIO_Init>
 8003cee:	e000      	b.n	8003cf2 <HAL_FMC_MspInit+0xfa>
    return;
 8003cf0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	2000054c 	.word	0x2000054c
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40021800 	.word	0x40021800
 8003d08:	40020c00 	.word	0x40020c00
 8003d0c:	40021400 	.word	0x40021400
 8003d10:	40021c00 	.word	0x40021c00
 8003d14:	40020800 	.word	0x40020800

08003d18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003d20:	f7ff ff6a 	bl	8003bf8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08c      	sub	sp, #48	; 0x30
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	2036      	movs	r0, #54	; 0x36
 8003d42:	f000 fd49 	bl	80047d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d46:	2036      	movs	r0, #54	; 0x36
 8003d48:	f000 fd62 	bl	8004810 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d4c:	4b1f      	ldr	r3, [pc, #124]	; (8003dcc <HAL_InitTick+0xa0>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <HAL_InitTick+0xa0>)
 8003d52:	f043 0310 	orr.w	r3, r3, #16
 8003d56:	6413      	str	r3, [r2, #64]	; 0x40
 8003d58:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <HAL_InitTick+0xa0>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d64:	f107 0210 	add.w	r2, r7, #16
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f003 fd9e 	bl	80078b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003d74:	f003 fd74 	bl	8007860 <HAL_RCC_GetPCLK1Freq>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <HAL_InitTick+0xa4>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	0c9b      	lsrs	r3, r3, #18
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <HAL_InitTick+0xa8>)
 8003d8e:	4a12      	ldr	r2, [pc, #72]	; (8003dd8 <HAL_InitTick+0xac>)
 8003d90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <HAL_InitTick+0xa8>)
 8003d94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d98:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003d9a:	4a0e      	ldr	r2, [pc, #56]	; (8003dd4 <HAL_InitTick+0xa8>)
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003da0:	4b0c      	ldr	r3, [pc, #48]	; (8003dd4 <HAL_InitTick+0xa8>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_InitTick+0xa8>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003dac:	4809      	ldr	r0, [pc, #36]	; (8003dd4 <HAL_InitTick+0xa8>)
 8003dae:	f004 feb5 	bl	8008b1c <HAL_TIM_Base_Init>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d104      	bne.n	8003dc2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003db8:	4806      	ldr	r0, [pc, #24]	; (8003dd4 <HAL_InitTick+0xa8>)
 8003dba:	f004 ff07 	bl	8008bcc <HAL_TIM_Base_Start_IT>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	e000      	b.n	8003dc4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3730      	adds	r7, #48	; 0x30
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	431bde83 	.word	0x431bde83
 8003dd4:	200085cc 	.word	0x200085cc
 8003dd8:	40001000 	.word	0x40001000

08003ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003de0:	e7fe      	b.n	8003de0 <NMI_Handler+0x4>

08003de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003de6:	e7fe      	b.n	8003de6 <HardFault_Handler+0x4>

08003de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dec:	e7fe      	b.n	8003dec <MemManage_Handler+0x4>

08003dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dee:	b480      	push	{r7}
 8003df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003df2:	e7fe      	b.n	8003df2 <BusFault_Handler+0x4>

08003df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003df8:	e7fe      	b.n	8003df8 <UsageFault_Handler+0x4>

08003dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NC1_Pin);
 8003e0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003e10:	f001 feaa 	bl	8005b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e1c:	4802      	ldr	r0, [pc, #8]	; (8003e28 <USART1_IRQHandler+0x10>)
 8003e1e:	f005 fb93 	bl	8009548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20008274 	.word	0x20008274

08003e2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BP2_Pin);
 8003e30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003e34:	f001 fe98 	bl	8005b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e38:	bf00      	nop
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <TIM6_DAC_IRQHandler+0x20>)
 8003e42:	791b      	ldrb	r3, [r3, #4]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8003e4a:	4804      	ldr	r0, [pc, #16]	; (8003e5c <TIM6_DAC_IRQHandler+0x20>)
 8003e4c:	f000 fd10 	bl	8004870 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003e50:	4803      	ldr	r0, [pc, #12]	; (8003e60 <TIM6_DAC_IRQHandler+0x24>)
 8003e52:	f004 ff33 	bl	8008cbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200082fc 	.word	0x200082fc
 8003e60:	200085cc 	.word	0x200085cc

08003e64 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003e68:	4802      	ldr	r0, [pc, #8]	; (8003e74 <LTDC_IRQHandler+0x10>)
 8003e6a:	f002 fd9f 	bl	80069ac <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20008138 	.word	0x20008138

08003e78 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003e7c:	4802      	ldr	r0, [pc, #8]	; (8003e88 <DMA2D_IRQHandler+0x10>)
 8003e7e:	f001 f963 	bl	8005148 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20008400 	.word	0x20008400

08003e8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <SystemInit+0x20>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	4a05      	ldr	r2, [pc, #20]	; (8003eac <SystemInit+0x20>)
 8003e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ee8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003eb4:	480d      	ldr	r0, [pc, #52]	; (8003eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003eb6:	490e      	ldr	r1, [pc, #56]	; (8003ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	; (8003ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ebc:	e002      	b.n	8003ec4 <LoopCopyDataInit>

08003ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ec2:	3304      	adds	r3, #4

08003ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ec8:	d3f9      	bcc.n	8003ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eca:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ecc:	4c0b      	ldr	r4, [pc, #44]	; (8003efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ed0:	e001      	b.n	8003ed6 <LoopFillZerobss>

08003ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ed4:	3204      	adds	r2, #4

08003ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ed8:	d3fb      	bcc.n	8003ed2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003eda:	f7ff ffd7 	bl	8003e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ede:	f008 fe91 	bl	800cc04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ee2:	f7fc fd07 	bl	80008f4 <main>
  bx  lr    
 8003ee6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ee8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ef0:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8003ef4:	0803307c 	.word	0x0803307c
  ldr r2, =_sbss
 8003ef8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8003efc:	20008628 	.word	0x20008628

08003f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f00:	e7fe      	b.n	8003f00 <ADC_IRQHandler>

08003f02 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f06:	2003      	movs	r0, #3
 8003f08:	f000 fc5b 	bl	80047c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f0c:	200f      	movs	r0, #15
 8003f0e:	f7ff ff0d 	bl	8003d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f12:	f7ff f94d 	bl	80031b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_IncTick+0x20>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_IncTick+0x24>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <HAL_IncTick+0x24>)
 8003f2e:	6013      	str	r3, [r2, #0]
}
 8003f30:	bf00      	nop
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000044 	.word	0x20000044
 8003f40:	20008618 	.word	0x20008618

08003f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return uwTick;
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_GetTick+0x14>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20008618 	.word	0x20008618

08003f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f64:	f7ff ffee 	bl	8003f44 <HAL_GetTick>
 8003f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d005      	beq.n	8003f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f76:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_Delay+0x44>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f82:	bf00      	nop
 8003f84:	f7ff ffde 	bl	8003f44 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d8f7      	bhi.n	8003f84 <HAL_Delay+0x28>
  {
  }
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20000044 	.word	0x20000044

08003fa4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e031      	b.n	800401e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff f91c 	bl	8003200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d116      	bne.n	8004010 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <HAL_ADC_Init+0x84>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	f043 0202 	orr.w	r2, r3, #2
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fa3e 	bl	8004474 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
 800400e:	e001      	b.n	8004014 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	ffffeefd 	.word	0xffffeefd

0800402c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_ADC_Start+0x1a>
 8004042:	2302      	movs	r3, #2
 8004044:	e0ad      	b.n	80041a2 <HAL_ADC_Start+0x176>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b01      	cmp	r3, #1
 800405a:	d018      	beq.n	800408e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800406c:	4b50      	ldr	r3, [pc, #320]	; (80041b0 <HAL_ADC_Start+0x184>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a50      	ldr	r2, [pc, #320]	; (80041b4 <HAL_ADC_Start+0x188>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	0c9a      	lsrs	r2, r3, #18
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004080:	e002      	b.n	8004088 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3b01      	subs	r3, #1
 8004086:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f9      	bne.n	8004082 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d175      	bne.n	8004188 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a0:	4b45      	ldr	r3, [pc, #276]	; (80041b8 <HAL_ADC_Start+0x18c>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d007      	beq.n	80040ca <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d6:	d106      	bne.n	80040e6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	f023 0206 	bic.w	r2, r3, #6
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	645a      	str	r2, [r3, #68]	; 0x44
 80040e4:	e002      	b.n	80040ec <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80040fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80040fe:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <HAL_ADC_Start+0x190>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d143      	bne.n	80041a0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004126:	609a      	str	r2, [r3, #8]
 8004128:	e03a      	b.n	80041a0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a24      	ldr	r2, [pc, #144]	; (80041c0 <HAL_ADC_Start+0x194>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d10e      	bne.n	8004152 <HAL_ADC_Start+0x126>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d107      	bne.n	8004152 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004150:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004152:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <HAL_ADC_Start+0x190>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	2b00      	cmp	r3, #0
 800415c:	d120      	bne.n	80041a0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a18      	ldr	r2, [pc, #96]	; (80041c4 <HAL_ADC_Start+0x198>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d11b      	bne.n	80041a0 <HAL_ADC_Start+0x174>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d114      	bne.n	80041a0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004184:	609a      	str	r2, [r3, #8]
 8004186:	e00b      	b.n	80041a0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418c:	f043 0210 	orr.w	r2, r3, #16
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004198:	f043 0201 	orr.w	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	2000003c 	.word	0x2000003c
 80041b4:	431bde83 	.word	0x431bde83
 80041b8:	fffff8fe 	.word	0xfffff8fe
 80041bc:	40012300 	.word	0x40012300
 80041c0:	40012000 	.word	0x40012000
 80041c4:	40012200 	.word	0x40012200

080041c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x1c>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e136      	b.n	8004452 <HAL_ADC_ConfigChannel+0x28a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b09      	cmp	r3, #9
 80041f2:	d93a      	bls.n	800426a <HAL_ADC_ConfigChannel+0xa2>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041fc:	d035      	beq.n	800426a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68d9      	ldr	r1, [r3, #12]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	4613      	mov	r3, r2
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4413      	add	r3, r2
 8004212:	3b1e      	subs	r3, #30
 8004214:	2207      	movs	r2, #7
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43da      	mvns	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	400a      	ands	r2, r1
 8004222:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a8d      	ldr	r2, [pc, #564]	; (8004460 <HAL_ADC_ConfigChannel+0x298>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d10a      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68d9      	ldr	r1, [r3, #12]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	061a      	lsls	r2, r3, #24
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004242:	e035      	b.n	80042b0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68d9      	ldr	r1, [r3, #12]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	b29b      	uxth	r3, r3
 8004254:	4618      	mov	r0, r3
 8004256:	4603      	mov	r3, r0
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4403      	add	r3, r0
 800425c:	3b1e      	subs	r3, #30
 800425e:	409a      	lsls	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004268:	e022      	b.n	80042b0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6919      	ldr	r1, [r3, #16]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	b29b      	uxth	r3, r3
 8004276:	461a      	mov	r2, r3
 8004278:	4613      	mov	r3, r2
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4413      	add	r3, r2
 800427e:	2207      	movs	r2, #7
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43da      	mvns	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	400a      	ands	r2, r1
 800428c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6919      	ldr	r1, [r3, #16]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	b29b      	uxth	r3, r3
 800429e:	4618      	mov	r0, r3
 80042a0:	4603      	mov	r3, r0
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4403      	add	r3, r0
 80042a6:	409a      	lsls	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b06      	cmp	r3, #6
 80042b6:	d824      	bhi.n	8004302 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	3b05      	subs	r3, #5
 80042ca:	221f      	movs	r2, #31
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	43da      	mvns	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	400a      	ands	r2, r1
 80042d8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	4618      	mov	r0, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	3b05      	subs	r3, #5
 80042f4:	fa00 f203 	lsl.w	r2, r0, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	635a      	str	r2, [r3, #52]	; 0x34
 8004300:	e04c      	b.n	800439c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b0c      	cmp	r3, #12
 8004308:	d824      	bhi.n	8004354 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	3b23      	subs	r3, #35	; 0x23
 800431c:	221f      	movs	r2, #31
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43da      	mvns	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	400a      	ands	r2, r1
 800432a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	4618      	mov	r0, r3
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	3b23      	subs	r3, #35	; 0x23
 8004346:	fa00 f203 	lsl.w	r2, r0, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
 8004352:	e023      	b.n	800439c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	3b41      	subs	r3, #65	; 0x41
 8004366:	221f      	movs	r2, #31
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43da      	mvns	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	400a      	ands	r2, r1
 8004374:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	4618      	mov	r0, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	3b41      	subs	r3, #65	; 0x41
 8004390:	fa00 f203 	lsl.w	r2, r0, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a30      	ldr	r2, [pc, #192]	; (8004464 <HAL_ADC_ConfigChannel+0x29c>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d10a      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x1f4>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ae:	d105      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80043b0:	4b2d      	ldr	r3, [pc, #180]	; (8004468 <HAL_ADC_ConfigChannel+0x2a0>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4a2c      	ldr	r2, [pc, #176]	; (8004468 <HAL_ADC_ConfigChannel+0x2a0>)
 80043b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80043ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a28      	ldr	r2, [pc, #160]	; (8004464 <HAL_ADC_ConfigChannel+0x29c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10f      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x21e>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b12      	cmp	r3, #18
 80043cc:	d10b      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80043ce:	4b26      	ldr	r3, [pc, #152]	; (8004468 <HAL_ADC_ConfigChannel+0x2a0>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4a25      	ldr	r2, [pc, #148]	; (8004468 <HAL_ADC_ConfigChannel+0x2a0>)
 80043d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043d8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <HAL_ADC_ConfigChannel+0x2a0>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4a22      	ldr	r2, [pc, #136]	; (8004468 <HAL_ADC_ConfigChannel+0x2a0>)
 80043e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043e4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1e      	ldr	r2, [pc, #120]	; (8004464 <HAL_ADC_ConfigChannel+0x29c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d12b      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x280>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <HAL_ADC_ConfigChannel+0x298>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <HAL_ADC_ConfigChannel+0x23a>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b11      	cmp	r3, #17
 8004400:	d122      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004402:	4b19      	ldr	r3, [pc, #100]	; (8004468 <HAL_ADC_ConfigChannel+0x2a0>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4a18      	ldr	r2, [pc, #96]	; (8004468 <HAL_ADC_ConfigChannel+0x2a0>)
 8004408:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800440c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800440e:	4b16      	ldr	r3, [pc, #88]	; (8004468 <HAL_ADC_ConfigChannel+0x2a0>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4a15      	ldr	r2, [pc, #84]	; (8004468 <HAL_ADC_ConfigChannel+0x2a0>)
 8004414:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004418:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a10      	ldr	r2, [pc, #64]	; (8004460 <HAL_ADC_ConfigChannel+0x298>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d111      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004424:	4b11      	ldr	r3, [pc, #68]	; (800446c <HAL_ADC_ConfigChannel+0x2a4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a11      	ldr	r2, [pc, #68]	; (8004470 <HAL_ADC_ConfigChannel+0x2a8>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	0c9a      	lsrs	r2, r3, #18
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800443a:	e002      	b.n	8004442 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3b01      	subs	r3, #1
 8004440:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f9      	bne.n	800443c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	10000012 	.word	0x10000012
 8004464:	40012000 	.word	0x40012000
 8004468:	40012300 	.word	0x40012300
 800446c:	2000003c 	.word	0x2000003c
 8004470:	431bde83 	.word	0x431bde83

08004474 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800447c:	4b78      	ldr	r3, [pc, #480]	; (8004660 <ADC_Init+0x1ec>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	4a77      	ldr	r2, [pc, #476]	; (8004660 <ADC_Init+0x1ec>)
 8004482:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004486:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004488:	4b75      	ldr	r3, [pc, #468]	; (8004660 <ADC_Init+0x1ec>)
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	4973      	ldr	r1, [pc, #460]	; (8004660 <ADC_Init+0x1ec>)
 8004492:	4313      	orrs	r3, r2
 8004494:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	021a      	lsls	r2, r3, #8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6859      	ldr	r1, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6899      	ldr	r1, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68da      	ldr	r2, [r3, #12]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	4a58      	ldr	r2, [pc, #352]	; (8004664 <ADC_Init+0x1f0>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d022      	beq.n	800454e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004516:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6899      	ldr	r1, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6899      	ldr	r1, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	e00f      	b.n	800456e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800455c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800456c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0202 	bic.w	r2, r2, #2
 800457c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6899      	ldr	r1, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	005a      	lsls	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01b      	beq.n	80045d4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80045ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6859      	ldr	r1, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	3b01      	subs	r3, #1
 80045c8:	035a      	lsls	r2, r3, #13
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	e007      	b.n	80045e4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	3b01      	subs	r3, #1
 8004600:	051a      	lsls	r2, r3, #20
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004618:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6899      	ldr	r1, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004626:	025a      	lsls	r2, r3, #9
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6899      	ldr	r1, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	029a      	lsls	r2, r3, #10
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	609a      	str	r2, [r3, #8]
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40012300 	.word	0x40012300
 8004664:	0f000001 	.word	0x0f000001

08004668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <__NVIC_SetPriorityGrouping+0x40>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004684:	4013      	ands	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <__NVIC_SetPriorityGrouping+0x44>)
 8004692:	4313      	orrs	r3, r2
 8004694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004696:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <__NVIC_SetPriorityGrouping+0x40>)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	60d3      	str	r3, [r2, #12]
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	e000ed00 	.word	0xe000ed00
 80046ac:	05fa0000 	.word	0x05fa0000

080046b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <__NVIC_GetPriorityGrouping+0x18>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	0a1b      	lsrs	r3, r3, #8
 80046ba:	f003 0307 	and.w	r3, r3, #7
}
 80046be:	4618      	mov	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	e000ed00 	.word	0xe000ed00

080046cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	db0b      	blt.n	80046f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	f003 021f 	and.w	r2, r3, #31
 80046e4:	4907      	ldr	r1, [pc, #28]	; (8004704 <__NVIC_EnableIRQ+0x38>)
 80046e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2001      	movs	r0, #1
 80046ee:	fa00 f202 	lsl.w	r2, r0, r2
 80046f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	e000e100 	.word	0xe000e100

08004708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	6039      	str	r1, [r7, #0]
 8004712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004718:	2b00      	cmp	r3, #0
 800471a:	db0a      	blt.n	8004732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	490c      	ldr	r1, [pc, #48]	; (8004754 <__NVIC_SetPriority+0x4c>)
 8004722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004726:	0112      	lsls	r2, r2, #4
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	440b      	add	r3, r1
 800472c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004730:	e00a      	b.n	8004748 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	4908      	ldr	r1, [pc, #32]	; (8004758 <__NVIC_SetPriority+0x50>)
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	3b04      	subs	r3, #4
 8004740:	0112      	lsls	r2, r2, #4
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	440b      	add	r3, r1
 8004746:	761a      	strb	r2, [r3, #24]
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	e000e100 	.word	0xe000e100
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f1c3 0307 	rsb	r3, r3, #7
 8004776:	2b04      	cmp	r3, #4
 8004778:	bf28      	it	cs
 800477a:	2304      	movcs	r3, #4
 800477c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3304      	adds	r3, #4
 8004782:	2b06      	cmp	r3, #6
 8004784:	d902      	bls.n	800478c <NVIC_EncodePriority+0x30>
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3b03      	subs	r3, #3
 800478a:	e000      	b.n	800478e <NVIC_EncodePriority+0x32>
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004790:	f04f 32ff 	mov.w	r2, #4294967295
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43da      	mvns	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	401a      	ands	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047a4:	f04f 31ff 	mov.w	r1, #4294967295
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	43d9      	mvns	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b4:	4313      	orrs	r3, r2
         );
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3724      	adds	r7, #36	; 0x24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff ff4c 	bl	8004668 <__NVIC_SetPriorityGrouping>
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047ea:	f7ff ff61 	bl	80046b0 <__NVIC_GetPriorityGrouping>
 80047ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	6978      	ldr	r0, [r7, #20]
 80047f6:	f7ff ffb1 	bl	800475c <NVIC_EncodePriority>
 80047fa:	4602      	mov	r2, r0
 80047fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff ff80 	bl	8004708 <__NVIC_SetPriority>
}
 8004808:	bf00      	nop
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800481a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff54 	bl	80046cc <__NVIC_EnableIRQ>
}
 8004824:	bf00      	nop
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e014      	b.n	8004868 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	791b      	ldrb	r3, [r3, #4]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d105      	bne.n	8004854 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fe fd44 	bl	80032dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004886:	d120      	bne.n	80048ca <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004896:	d118      	bne.n	80048ca <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2204      	movs	r2, #4
 800489c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f043 0201 	orr.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048c2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f82d 	bl	8004924 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048d8:	d120      	bne.n	800491c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e8:	d118      	bne.n	800491c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2204      	movs	r2, #4
 80048ee:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f043 0202 	orr.w	r2, r3, #2
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004904:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004914:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f85d 	bl	80049d6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800491c:	bf00      	nop
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	795b      	ldrb	r3, [r3, #5]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_DAC_ConfigChannel+0x18>
 800494c:	2302      	movs	r3, #2
 800494e:	e03c      	b.n	80049ca <HAL_DAC_ConfigChannel+0x92>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2202      	movs	r2, #2
 800495a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4013      	ands	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f003 0310 	and.w	r3, r3, #16
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6819      	ldr	r1, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	22c0      	movs	r2, #192	; 0xc0
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43da      	mvns	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	400a      	ands	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2201      	movs	r2, #1
 80049c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049f8:	f7ff faa4 	bl	8003f44 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e099      	b.n	8004b3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0201 	bic.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a28:	e00f      	b.n	8004a4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a2a:	f7ff fa8b 	bl	8003f44 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b05      	cmp	r3, #5
 8004a36:	d908      	bls.n	8004a4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2203      	movs	r2, #3
 8004a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e078      	b.n	8004b3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e8      	bne.n	8004a2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4b38      	ldr	r3, [pc, #224]	; (8004b44 <HAL_DMA_Init+0x158>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d107      	bne.n	8004ab4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	4313      	orrs	r3, r2
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0307 	bic.w	r3, r3, #7
 8004aca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d117      	bne.n	8004b0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00e      	beq.n	8004b0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f94f 	bl	8004d94 <DMA_CheckFifoParam>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2240      	movs	r2, #64	; 0x40
 8004b00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e016      	b.n	8004b3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f906 	bl	8004d28 <DMA_CalcBaseAndBitshift>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	223f      	movs	r2, #63	; 0x3f
 8004b26:	409a      	lsls	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	f010803f 	.word	0xf010803f

08004b48 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e050      	b.n	8004bfc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d101      	bne.n	8004b6a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004b66:	2302      	movs	r3, #2
 8004b68:	e048      	b.n	8004bfc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0201 	bic.w	r2, r2, #1
 8004b78:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2200      	movs	r2, #0
 8004b98:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2221      	movs	r2, #33	; 0x21
 8004ba8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f8bc 	bl	8004d28 <DMA_CalcBaseAndBitshift>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb8:	223f      	movs	r2, #63	; 0x3f
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c12:	f7ff f997 	bl	8003f44 <HAL_GetTick>
 8004c16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d008      	beq.n	8004c36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2280      	movs	r2, #128	; 0x80
 8004c28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e052      	b.n	8004cdc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0216 	bic.w	r2, r2, #22
 8004c44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695a      	ldr	r2, [r3, #20]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <HAL_DMA_Abort+0x62>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d007      	beq.n	8004c76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0208 	bic.w	r2, r2, #8
 8004c74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c86:	e013      	b.n	8004cb0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c88:	f7ff f95c 	bl	8003f44 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b05      	cmp	r3, #5
 8004c94:	d90c      	bls.n	8004cb0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e015      	b.n	8004cdc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e4      	bne.n	8004c88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc2:	223f      	movs	r2, #63	; 0x3f
 8004cc4:	409a      	lsls	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d004      	beq.n	8004d02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2280      	movs	r2, #128	; 0x80
 8004cfc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e00c      	b.n	8004d1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2205      	movs	r2, #5
 8004d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	3b10      	subs	r3, #16
 8004d38:	4a13      	ldr	r2, [pc, #76]	; (8004d88 <DMA_CalcBaseAndBitshift+0x60>)
 8004d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d42:	4a12      	ldr	r2, [pc, #72]	; (8004d8c <DMA_CalcBaseAndBitshift+0x64>)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d908      	bls.n	8004d68 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <DMA_CalcBaseAndBitshift+0x68>)
 8004d5e:	4013      	ands	r3, r2
 8004d60:	1d1a      	adds	r2, r3, #4
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	659a      	str	r2, [r3, #88]	; 0x58
 8004d66:	e006      	b.n	8004d76 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4b08      	ldr	r3, [pc, #32]	; (8004d90 <DMA_CalcBaseAndBitshift+0x68>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	aaaaaaab 	.word	0xaaaaaaab
 8004d8c:	08033004 	.word	0x08033004
 8004d90:	fffffc00 	.word	0xfffffc00

08004d94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d11f      	bne.n	8004dee <DMA_CheckFifoParam+0x5a>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d856      	bhi.n	8004e62 <DMA_CheckFifoParam+0xce>
 8004db4:	a201      	add	r2, pc, #4	; (adr r2, 8004dbc <DMA_CheckFifoParam+0x28>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004dcd 	.word	0x08004dcd
 8004dc0:	08004ddf 	.word	0x08004ddf
 8004dc4:	08004dcd 	.word	0x08004dcd
 8004dc8:	08004e63 	.word	0x08004e63
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d046      	beq.n	8004e66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ddc:	e043      	b.n	8004e66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004de6:	d140      	bne.n	8004e6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dec:	e03d      	b.n	8004e6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004df6:	d121      	bne.n	8004e3c <DMA_CheckFifoParam+0xa8>
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d837      	bhi.n	8004e6e <DMA_CheckFifoParam+0xda>
 8004dfe:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <DMA_CheckFifoParam+0x70>)
 8004e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e04:	08004e15 	.word	0x08004e15
 8004e08:	08004e1b 	.word	0x08004e1b
 8004e0c:	08004e15 	.word	0x08004e15
 8004e10:	08004e2d 	.word	0x08004e2d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
      break;
 8004e18:	e030      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d025      	beq.n	8004e72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e2a:	e022      	b.n	8004e72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e34:	d11f      	bne.n	8004e76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e3a:	e01c      	b.n	8004e76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d903      	bls.n	8004e4a <DMA_CheckFifoParam+0xb6>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d003      	beq.n	8004e50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e48:	e018      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e4e:	e015      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00e      	beq.n	8004e7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e60:	e00b      	b.n	8004e7a <DMA_CheckFifoParam+0xe6>
      break;
 8004e62:	bf00      	nop
 8004e64:	e00a      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      break;
 8004e66:	bf00      	nop
 8004e68:	e008      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e006      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e004      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      break;
 8004e72:	bf00      	nop
 8004e74:	e002      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      break;   
 8004e76:	bf00      	nop
 8004e78:	e000      	b.n	8004e7c <DMA_CheckFifoParam+0xe8>
      break;
 8004e7a:	bf00      	nop
    }
  } 
  
  return status; 
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop

08004e8c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e039      	b.n	8004f12 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fe fa5a 	bl	800336c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004edc:	f023 0107 	bic.w	r1, r3, #7
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <HAL_DMA2D_Init+0x90>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68d1      	ldr	r1, [r2, #12]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	430b      	orrs	r3, r1
 8004f00:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	ffffc000 	.word	0xffffc000

08004f20 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_DMA2D_Start+0x1c>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e018      	b.n	8004f6e <HAL_DMA2D_Start+0x4e>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 fa98 	bl	800548c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d056      	beq.n	8005040 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f92:	f7fe ffd7 	bl	8003f44 <HAL_GetTick>
 8004f96:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004f98:	e04b      	b.n	8005032 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d023      	beq.n	8004ff4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 0320 	and.w	r3, r3, #32
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fba:	f043 0202 	orr.w	r2, r3, #2
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd0:	f043 0201 	orr.w	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2221      	movs	r2, #33	; 0x21
 8004fde:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e0a5      	b.n	8005140 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	d01a      	beq.n	8005032 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ffc:	f7fe ffa2 	bl	8003f44 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d302      	bcc.n	8005012 <HAL_DMA2D_PollForTransfer+0x9c>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10f      	bne.n	8005032 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005016:	f043 0220 	orr.w	r2, r3, #32
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2203      	movs	r2, #3
 8005022:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e086      	b.n	8005140 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ac      	beq.n	8004f9a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d061      	beq.n	8005126 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005062:	f7fe ff6f 	bl	8003f44 <HAL_GetTick>
 8005066:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005068:	e056      	b.n	8005118 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005078:	2b00      	cmp	r3, #0
 800507a:	d02e      	beq.n	80050da <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508a:	f043 0204 	orr.w	r2, r3, #4
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	f043 0202 	orr.w	r2, r3, #2
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b6:	f043 0201 	orr.w	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2229      	movs	r2, #41	; 0x29
 80050c4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2204      	movs	r2, #4
 80050ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e032      	b.n	8005140 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e0:	d01a      	beq.n	8005118 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050e2:	f7fe ff2f 	bl	8003f44 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d302      	bcc.n	80050f8 <HAL_DMA2D_PollForTransfer+0x182>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10f      	bne.n	8005118 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fc:	f043 0220 	orr.w	r2, r3, #32
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2203      	movs	r2, #3
 8005108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e013      	b.n	8005140 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0a1      	beq.n	800506a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2212      	movs	r2, #18
 800512c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d026      	beq.n	80051b8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d021      	beq.n	80051b8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005182:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005188:	f043 0201 	orr.w	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2201      	movs	r2, #1
 8005196:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2204      	movs	r2, #4
 800519c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d026      	beq.n	8005210 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d021      	beq.n	8005210 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051da:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2220      	movs	r2, #32
 80051e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	f043 0202 	orr.w	r2, r3, #2
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2204      	movs	r2, #4
 80051f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d026      	beq.n	8005268 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005220:	2b00      	cmp	r3, #0
 8005222:	d021      	beq.n	8005268 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005232:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2208      	movs	r2, #8
 800523a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005240:	f043 0204 	orr.w	r2, r3, #4
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2204      	movs	r2, #4
 800524c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	d013      	beq.n	800529a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00e      	beq.n	800529a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2204      	movs	r2, #4
 8005292:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f853 	bl	8005340 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d024      	beq.n	80052ee <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01f      	beq.n	80052ee <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052bc:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2202      	movs	r2, #2
 80052c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d003      	beq.n	80052ee <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01f      	beq.n	8005338 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d01a      	beq.n	8005338 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005310:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2210      	movs	r2, #16
 8005318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f80e 	bl	8005354 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005338:	bf00      	nop
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_DMA2D_ConfigLayer+0x20>
 8005384:	2302      	movs	r3, #2
 8005386:	e079      	b.n	800547c <HAL_DMA2D_ConfigLayer+0x114>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	3318      	adds	r3, #24
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	4413      	add	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	041b      	lsls	r3, r3, #16
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80053b2:	4b35      	ldr	r3, [pc, #212]	; (8005488 <HAL_DMA2D_ConfigLayer+0x120>)
 80053b4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b0a      	cmp	r3, #10
 80053bc:	d003      	beq.n	80053c6 <HAL_DMA2D_ConfigLayer+0x5e>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b09      	cmp	r3, #9
 80053c4:	d107      	bne.n	80053d6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e005      	b.n	80053e2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	061b      	lsls	r3, r3, #24
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d120      	bne.n	800542a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	ea02 0103 	and.w	r1, r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b0a      	cmp	r3, #10
 8005410:	d003      	beq.n	800541a <HAL_DMA2D_ConfigLayer+0xb2>
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b09      	cmp	r3, #9
 8005418:	d127      	bne.n	800546a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005426:	629a      	str	r2, [r3, #40]	; 0x28
 8005428:	e01f      	b.n	800546a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	43db      	mvns	r3, r3
 8005434:	ea02 0103 	and.w	r1, r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	430a      	orrs	r2, r1
 8005440:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	2b0a      	cmp	r3, #10
 8005452:	d003      	beq.n	800545c <HAL_DMA2D_ConfigLayer+0xf4>
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b09      	cmp	r3, #9
 800545a:	d106      	bne.n	800546a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005468:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	371c      	adds	r7, #28
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	ff03000f 	.word	0xff03000f

0800548c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800548c:	b480      	push	{r7}
 800548e:	b08b      	sub	sp, #44	; 0x2c
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	041a      	lsls	r2, r3, #16
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	431a      	orrs	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054c4:	d174      	bne.n	80055b0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054cc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054d4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80054dc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d108      	bne.n	80054fe <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
 80054fc:	e053      	b.n	80055a6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d106      	bne.n	8005514 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4313      	orrs	r3, r2
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
 8005512:	e048      	b.n	80055a6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d111      	bne.n	8005540 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	0cdb      	lsrs	r3, r3, #19
 8005520:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	0a9b      	lsrs	r3, r3, #10
 8005526:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	08db      	lsrs	r3, r3, #3
 800552c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	02db      	lsls	r3, r3, #11
 8005536:	4313      	orrs	r3, r2
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
 800553e:	e032      	b.n	80055a6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b03      	cmp	r3, #3
 8005546:	d117      	bne.n	8005578 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	0fdb      	lsrs	r3, r3, #31
 800554c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	0cdb      	lsrs	r3, r3, #19
 8005552:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	0adb      	lsrs	r3, r3, #11
 8005558:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	08db      	lsrs	r3, r3, #3
 800555e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	029b      	lsls	r3, r3, #10
 8005568:	431a      	orrs	r2, r3
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	03db      	lsls	r3, r3, #15
 800556e:	4313      	orrs	r3, r2
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
 8005576:	e016      	b.n	80055a6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	0f1b      	lsrs	r3, r3, #28
 800557c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	0d1b      	lsrs	r3, r3, #20
 8005582:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	0b1b      	lsrs	r3, r3, #12
 8005588:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	011a      	lsls	r2, r3, #4
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	431a      	orrs	r2, r3
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	031b      	lsls	r3, r3, #12
 800559e:	4313      	orrs	r3, r2
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80055ae:	e003      	b.n	80055b8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	60da      	str	r2, [r3, #12]
}
 80055b8:	bf00      	nop
 80055ba:	372c      	adds	r7, #44	; 0x2c
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b089      	sub	sp, #36	; 0x24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80055ce:	2300      	movs	r3, #0
 80055d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80055d6:	2300      	movs	r3, #0
 80055d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80055da:	2300      	movs	r3, #0
 80055dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80055de:	2300      	movs	r3, #0
 80055e0:	61fb      	str	r3, [r7, #28]
 80055e2:	e175      	b.n	80058d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80055e4:	2201      	movs	r2, #1
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4013      	ands	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	f040 8164 	bne.w	80058ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	2b01      	cmp	r3, #1
 800560c:	d005      	beq.n	800561a <HAL_GPIO_Init+0x56>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d130      	bne.n	800567c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	2203      	movs	r2, #3
 8005626:	fa02 f303 	lsl.w	r3, r2, r3
 800562a:	43db      	mvns	r3, r3
 800562c:	69ba      	ldr	r2, [r7, #24]
 800562e:	4013      	ands	r3, r2
 8005630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	69ba      	ldr	r2, [r7, #24]
 8005640:	4313      	orrs	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005650:	2201      	movs	r2, #1
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4013      	ands	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	091b      	lsrs	r3, r3, #4
 8005666:	f003 0201 	and.w	r2, r3, #1
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	fa02 f303 	lsl.w	r3, r2, r3
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	4313      	orrs	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	2b03      	cmp	r3, #3
 8005686:	d017      	beq.n	80056b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	2203      	movs	r2, #3
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	43db      	mvns	r3, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4013      	ands	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d123      	bne.n	800570c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	08da      	lsrs	r2, r3, #3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3208      	adds	r2, #8
 80056cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	220f      	movs	r2, #15
 80056dc:	fa02 f303 	lsl.w	r3, r2, r3
 80056e0:	43db      	mvns	r3, r3
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	4013      	ands	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	fa02 f303 	lsl.w	r3, r2, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	08da      	lsrs	r2, r3, #3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3208      	adds	r2, #8
 8005706:	69b9      	ldr	r1, [r7, #24]
 8005708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	2203      	movs	r2, #3
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	43db      	mvns	r3, r3
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	4013      	ands	r3, r2
 8005722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 0203 	and.w	r2, r3, #3
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	4313      	orrs	r3, r2
 8005738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 80be 	beq.w	80058ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800574e:	4b66      	ldr	r3, [pc, #408]	; (80058e8 <HAL_GPIO_Init+0x324>)
 8005750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005752:	4a65      	ldr	r2, [pc, #404]	; (80058e8 <HAL_GPIO_Init+0x324>)
 8005754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005758:	6453      	str	r3, [r2, #68]	; 0x44
 800575a:	4b63      	ldr	r3, [pc, #396]	; (80058e8 <HAL_GPIO_Init+0x324>)
 800575c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005766:	4a61      	ldr	r2, [pc, #388]	; (80058ec <HAL_GPIO_Init+0x328>)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	089b      	lsrs	r3, r3, #2
 800576c:	3302      	adds	r3, #2
 800576e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005772:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	220f      	movs	r2, #15
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	43db      	mvns	r3, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4013      	ands	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a58      	ldr	r2, [pc, #352]	; (80058f0 <HAL_GPIO_Init+0x32c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d037      	beq.n	8005802 <HAL_GPIO_Init+0x23e>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a57      	ldr	r2, [pc, #348]	; (80058f4 <HAL_GPIO_Init+0x330>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d031      	beq.n	80057fe <HAL_GPIO_Init+0x23a>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a56      	ldr	r2, [pc, #344]	; (80058f8 <HAL_GPIO_Init+0x334>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d02b      	beq.n	80057fa <HAL_GPIO_Init+0x236>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a55      	ldr	r2, [pc, #340]	; (80058fc <HAL_GPIO_Init+0x338>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d025      	beq.n	80057f6 <HAL_GPIO_Init+0x232>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a54      	ldr	r2, [pc, #336]	; (8005900 <HAL_GPIO_Init+0x33c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d01f      	beq.n	80057f2 <HAL_GPIO_Init+0x22e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a53      	ldr	r2, [pc, #332]	; (8005904 <HAL_GPIO_Init+0x340>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d019      	beq.n	80057ee <HAL_GPIO_Init+0x22a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a52      	ldr	r2, [pc, #328]	; (8005908 <HAL_GPIO_Init+0x344>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d013      	beq.n	80057ea <HAL_GPIO_Init+0x226>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a51      	ldr	r2, [pc, #324]	; (800590c <HAL_GPIO_Init+0x348>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00d      	beq.n	80057e6 <HAL_GPIO_Init+0x222>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a50      	ldr	r2, [pc, #320]	; (8005910 <HAL_GPIO_Init+0x34c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d007      	beq.n	80057e2 <HAL_GPIO_Init+0x21e>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a4f      	ldr	r2, [pc, #316]	; (8005914 <HAL_GPIO_Init+0x350>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d101      	bne.n	80057de <HAL_GPIO_Init+0x21a>
 80057da:	2309      	movs	r3, #9
 80057dc:	e012      	b.n	8005804 <HAL_GPIO_Init+0x240>
 80057de:	230a      	movs	r3, #10
 80057e0:	e010      	b.n	8005804 <HAL_GPIO_Init+0x240>
 80057e2:	2308      	movs	r3, #8
 80057e4:	e00e      	b.n	8005804 <HAL_GPIO_Init+0x240>
 80057e6:	2307      	movs	r3, #7
 80057e8:	e00c      	b.n	8005804 <HAL_GPIO_Init+0x240>
 80057ea:	2306      	movs	r3, #6
 80057ec:	e00a      	b.n	8005804 <HAL_GPIO_Init+0x240>
 80057ee:	2305      	movs	r3, #5
 80057f0:	e008      	b.n	8005804 <HAL_GPIO_Init+0x240>
 80057f2:	2304      	movs	r3, #4
 80057f4:	e006      	b.n	8005804 <HAL_GPIO_Init+0x240>
 80057f6:	2303      	movs	r3, #3
 80057f8:	e004      	b.n	8005804 <HAL_GPIO_Init+0x240>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e002      	b.n	8005804 <HAL_GPIO_Init+0x240>
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <HAL_GPIO_Init+0x240>
 8005802:	2300      	movs	r3, #0
 8005804:	69fa      	ldr	r2, [r7, #28]
 8005806:	f002 0203 	and.w	r2, r2, #3
 800580a:	0092      	lsls	r2, r2, #2
 800580c:	4093      	lsls	r3, r2
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4313      	orrs	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005814:	4935      	ldr	r1, [pc, #212]	; (80058ec <HAL_GPIO_Init+0x328>)
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	089b      	lsrs	r3, r3, #2
 800581a:	3302      	adds	r3, #2
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005822:	4b3d      	ldr	r3, [pc, #244]	; (8005918 <HAL_GPIO_Init+0x354>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	43db      	mvns	r3, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4013      	ands	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005846:	4a34      	ldr	r2, [pc, #208]	; (8005918 <HAL_GPIO_Init+0x354>)
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800584c:	4b32      	ldr	r3, [pc, #200]	; (8005918 <HAL_GPIO_Init+0x354>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005870:	4a29      	ldr	r2, [pc, #164]	; (8005918 <HAL_GPIO_Init+0x354>)
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005876:	4b28      	ldr	r3, [pc, #160]	; (8005918 <HAL_GPIO_Init+0x354>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	43db      	mvns	r3, r3
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	4013      	ands	r3, r2
 8005884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d003      	beq.n	800589a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800589a:	4a1f      	ldr	r2, [pc, #124]	; (8005918 <HAL_GPIO_Init+0x354>)
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058a0:	4b1d      	ldr	r3, [pc, #116]	; (8005918 <HAL_GPIO_Init+0x354>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	43db      	mvns	r3, r3
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4013      	ands	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058c4:	4a14      	ldr	r2, [pc, #80]	; (8005918 <HAL_GPIO_Init+0x354>)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	3301      	adds	r3, #1
 80058ce:	61fb      	str	r3, [r7, #28]
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	2b0f      	cmp	r3, #15
 80058d4:	f67f ae86 	bls.w	80055e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	3724      	adds	r7, #36	; 0x24
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	40023800 	.word	0x40023800
 80058ec:	40013800 	.word	0x40013800
 80058f0:	40020000 	.word	0x40020000
 80058f4:	40020400 	.word	0x40020400
 80058f8:	40020800 	.word	0x40020800
 80058fc:	40020c00 	.word	0x40020c00
 8005900:	40021000 	.word	0x40021000
 8005904:	40021400 	.word	0x40021400
 8005908:	40021800 	.word	0x40021800
 800590c:	40021c00 	.word	0x40021c00
 8005910:	40022000 	.word	0x40022000
 8005914:	40022400 	.word	0x40022400
 8005918:	40013c00 	.word	0x40013c00

0800591c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005926:	2300      	movs	r3, #0
 8005928:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e0d9      	b.n	8005aec <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005938:	2201      	movs	r2, #1
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4013      	ands	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	429a      	cmp	r2, r3
 8005950:	f040 80c9 	bne.w	8005ae6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005954:	4a6b      	ldr	r2, [pc, #428]	; (8005b04 <HAL_GPIO_DeInit+0x1e8>)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	089b      	lsrs	r3, r3, #2
 800595a:	3302      	adds	r3, #2
 800595c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005960:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f003 0303 	and.w	r3, r3, #3
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	220f      	movs	r2, #15
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	4013      	ands	r3, r2
 8005974:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a63      	ldr	r2, [pc, #396]	; (8005b08 <HAL_GPIO_DeInit+0x1ec>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d037      	beq.n	80059ee <HAL_GPIO_DeInit+0xd2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a62      	ldr	r2, [pc, #392]	; (8005b0c <HAL_GPIO_DeInit+0x1f0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d031      	beq.n	80059ea <HAL_GPIO_DeInit+0xce>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a61      	ldr	r2, [pc, #388]	; (8005b10 <HAL_GPIO_DeInit+0x1f4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d02b      	beq.n	80059e6 <HAL_GPIO_DeInit+0xca>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a60      	ldr	r2, [pc, #384]	; (8005b14 <HAL_GPIO_DeInit+0x1f8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d025      	beq.n	80059e2 <HAL_GPIO_DeInit+0xc6>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a5f      	ldr	r2, [pc, #380]	; (8005b18 <HAL_GPIO_DeInit+0x1fc>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01f      	beq.n	80059de <HAL_GPIO_DeInit+0xc2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a5e      	ldr	r2, [pc, #376]	; (8005b1c <HAL_GPIO_DeInit+0x200>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d019      	beq.n	80059da <HAL_GPIO_DeInit+0xbe>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a5d      	ldr	r2, [pc, #372]	; (8005b20 <HAL_GPIO_DeInit+0x204>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <HAL_GPIO_DeInit+0xba>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a5c      	ldr	r2, [pc, #368]	; (8005b24 <HAL_GPIO_DeInit+0x208>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00d      	beq.n	80059d2 <HAL_GPIO_DeInit+0xb6>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a5b      	ldr	r2, [pc, #364]	; (8005b28 <HAL_GPIO_DeInit+0x20c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d007      	beq.n	80059ce <HAL_GPIO_DeInit+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a5a      	ldr	r2, [pc, #360]	; (8005b2c <HAL_GPIO_DeInit+0x210>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d101      	bne.n	80059ca <HAL_GPIO_DeInit+0xae>
 80059c6:	2309      	movs	r3, #9
 80059c8:	e012      	b.n	80059f0 <HAL_GPIO_DeInit+0xd4>
 80059ca:	230a      	movs	r3, #10
 80059cc:	e010      	b.n	80059f0 <HAL_GPIO_DeInit+0xd4>
 80059ce:	2308      	movs	r3, #8
 80059d0:	e00e      	b.n	80059f0 <HAL_GPIO_DeInit+0xd4>
 80059d2:	2307      	movs	r3, #7
 80059d4:	e00c      	b.n	80059f0 <HAL_GPIO_DeInit+0xd4>
 80059d6:	2306      	movs	r3, #6
 80059d8:	e00a      	b.n	80059f0 <HAL_GPIO_DeInit+0xd4>
 80059da:	2305      	movs	r3, #5
 80059dc:	e008      	b.n	80059f0 <HAL_GPIO_DeInit+0xd4>
 80059de:	2304      	movs	r3, #4
 80059e0:	e006      	b.n	80059f0 <HAL_GPIO_DeInit+0xd4>
 80059e2:	2303      	movs	r3, #3
 80059e4:	e004      	b.n	80059f0 <HAL_GPIO_DeInit+0xd4>
 80059e6:	2302      	movs	r3, #2
 80059e8:	e002      	b.n	80059f0 <HAL_GPIO_DeInit+0xd4>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <HAL_GPIO_DeInit+0xd4>
 80059ee:	2300      	movs	r3, #0
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	f002 0203 	and.w	r2, r2, #3
 80059f6:	0092      	lsls	r2, r2, #2
 80059f8:	4093      	lsls	r3, r2
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d132      	bne.n	8005a66 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005a00:	4b4b      	ldr	r3, [pc, #300]	; (8005b30 <HAL_GPIO_DeInit+0x214>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	43db      	mvns	r3, r3
 8005a08:	4949      	ldr	r1, [pc, #292]	; (8005b30 <HAL_GPIO_DeInit+0x214>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005a0e:	4b48      	ldr	r3, [pc, #288]	; (8005b30 <HAL_GPIO_DeInit+0x214>)
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	43db      	mvns	r3, r3
 8005a16:	4946      	ldr	r1, [pc, #280]	; (8005b30 <HAL_GPIO_DeInit+0x214>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005a1c:	4b44      	ldr	r3, [pc, #272]	; (8005b30 <HAL_GPIO_DeInit+0x214>)
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	43db      	mvns	r3, r3
 8005a24:	4942      	ldr	r1, [pc, #264]	; (8005b30 <HAL_GPIO_DeInit+0x214>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005a2a:	4b41      	ldr	r3, [pc, #260]	; (8005b30 <HAL_GPIO_DeInit+0x214>)
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	43db      	mvns	r3, r3
 8005a32:	493f      	ldr	r1, [pc, #252]	; (8005b30 <HAL_GPIO_DeInit+0x214>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	220f      	movs	r2, #15
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005a48:	4a2e      	ldr	r2, [pc, #184]	; (8005b04 <HAL_GPIO_DeInit+0x1e8>)
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	089b      	lsrs	r3, r3, #2
 8005a4e:	3302      	adds	r3, #2
 8005a50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	43da      	mvns	r2, r3
 8005a58:	482a      	ldr	r0, [pc, #168]	; (8005b04 <HAL_GPIO_DeInit+0x1e8>)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	089b      	lsrs	r3, r3, #2
 8005a5e:	400a      	ands	r2, r1
 8005a60:	3302      	adds	r3, #2
 8005a62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	2103      	movs	r1, #3
 8005a70:	fa01 f303 	lsl.w	r3, r1, r3
 8005a74:	43db      	mvns	r3, r3
 8005a76:	401a      	ands	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	08da      	lsrs	r2, r3, #3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3208      	adds	r2, #8
 8005a84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f003 0307 	and.w	r3, r3, #7
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	220f      	movs	r2, #15
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	43db      	mvns	r3, r3
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	08d2      	lsrs	r2, r2, #3
 8005a9c:	4019      	ands	r1, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3208      	adds	r2, #8
 8005aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	2103      	movs	r1, #3
 8005ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	401a      	ands	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	401a      	ands	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	2103      	movs	r1, #3
 8005ada:	fa01 f303 	lsl.w	r3, r1, r3
 8005ade:	43db      	mvns	r3, r3
 8005ae0:	401a      	ands	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2b0f      	cmp	r3, #15
 8005af0:	f67f af22 	bls.w	8005938 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40013800 	.word	0x40013800
 8005b08:	40020000 	.word	0x40020000
 8005b0c:	40020400 	.word	0x40020400
 8005b10:	40020800 	.word	0x40020800
 8005b14:	40020c00 	.word	0x40020c00
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	40021400 	.word	0x40021400
 8005b20:	40021800 	.word	0x40021800
 8005b24:	40021c00 	.word	0x40021c00
 8005b28:	40022000 	.word	0x40022000
 8005b2c:	40022400 	.word	0x40022400
 8005b30:	40013c00 	.word	0x40013c00

08005b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	807b      	strh	r3, [r7, #2]
 8005b40:	4613      	mov	r3, r2
 8005b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b44:	787b      	ldrb	r3, [r7, #1]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b4a:	887a      	ldrh	r2, [r7, #2]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005b50:	e003      	b.n	8005b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005b52:	887b      	ldrh	r3, [r7, #2]
 8005b54:	041a      	lsls	r2, r3, #16
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	619a      	str	r2, [r3, #24]
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b72:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	88fb      	ldrh	r3, [r7, #6]
 8005b78:	4013      	ands	r3, r2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d006      	beq.n	8005b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b7e:	4a05      	ldr	r2, [pc, #20]	; (8005b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b80:	88fb      	ldrh	r3, [r7, #6]
 8005b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fc f81c 	bl	8001bc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40013c00 	.word	0x40013c00

08005b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e07f      	b.n	8005caa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fd fbfa 	bl	80033b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2224      	movs	r2, #36	; 0x24
 8005bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0201 	bic.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005be8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bf8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d107      	bne.n	8005c12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c0e:	609a      	str	r2, [r3, #8]
 8005c10:	e006      	b.n	8005c20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689a      	ldr	r2, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005c1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d104      	bne.n	8005c32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6859      	ldr	r1, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4b1d      	ldr	r3, [pc, #116]	; (8005cb4 <HAL_I2C_Init+0x11c>)
 8005c3e:	430b      	orrs	r3, r1
 8005c40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691a      	ldr	r2, [r3, #16]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69d9      	ldr	r1, [r3, #28]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1a      	ldr	r2, [r3, #32]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
 8005cb2:	bf00      	nop
 8005cb4:	02008000 	.word	0x02008000

08005cb8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e021      	b.n	8005d0e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2224      	movs	r2, #36	; 0x24
 8005cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fd fc10 	bl	8003508 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b088      	sub	sp, #32
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	4608      	mov	r0, r1
 8005d22:	4611      	mov	r1, r2
 8005d24:	461a      	mov	r2, r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	817b      	strh	r3, [r7, #10]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	813b      	strh	r3, [r7, #8]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b20      	cmp	r3, #32
 8005d3c:	f040 80f9 	bne.w	8005f32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <HAL_I2C_Mem_Write+0x34>
 8005d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e0ed      	b.n	8005f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_I2C_Mem_Write+0x4e>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e0e6      	b.n	8005f34 <HAL_I2C_Mem_Write+0x21c>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d6e:	f7fe f8e9 	bl	8003f44 <HAL_GetTick>
 8005d72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	2319      	movs	r3, #25
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 fad1 	bl	8006328 <I2C_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0d1      	b.n	8005f34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2221      	movs	r2, #33	; 0x21
 8005d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2240      	movs	r2, #64	; 0x40
 8005d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a3a      	ldr	r2, [r7, #32]
 8005daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005db8:	88f8      	ldrh	r0, [r7, #6]
 8005dba:	893a      	ldrh	r2, [r7, #8]
 8005dbc:	8979      	ldrh	r1, [r7, #10]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f9e1 	bl	8006190 <I2C_RequestMemoryWrite>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e0a9      	b.n	8005f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	2bff      	cmp	r3, #255	; 0xff
 8005de8:	d90e      	bls.n	8005e08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	22ff      	movs	r2, #255	; 0xff
 8005dee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	8979      	ldrh	r1, [r7, #10]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fc39 	bl	8006678 <I2C_TransferConfig>
 8005e06:	e00f      	b.n	8005e28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	8979      	ldrh	r1, [r7, #10]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 fc28 	bl	8006678 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 fabb 	bl	80063a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e07b      	b.n	8005f34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	781a      	ldrb	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b29a      	uxth	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d034      	beq.n	8005ee0 <HAL_I2C_Mem_Write+0x1c8>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d130      	bne.n	8005ee0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e84:	2200      	movs	r2, #0
 8005e86:	2180      	movs	r1, #128	; 0x80
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fa4d 	bl	8006328 <I2C_WaitOnFlagUntilTimeout>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e04d      	b.n	8005f34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2bff      	cmp	r3, #255	; 0xff
 8005ea0:	d90e      	bls.n	8005ec0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	22ff      	movs	r2, #255	; 0xff
 8005ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	8979      	ldrh	r1, [r7, #10]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 fbdd 	bl	8006678 <I2C_TransferConfig>
 8005ebe:	e00f      	b.n	8005ee0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	8979      	ldrh	r1, [r7, #10]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fbcc 	bl	8006678 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d19e      	bne.n	8005e28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fa9a 	bl	8006428 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e01a      	b.n	8005f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2220      	movs	r2, #32
 8005f04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	6859      	ldr	r1, [r3, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <HAL_I2C_Mem_Write+0x224>)
 8005f12:	400b      	ands	r3, r1
 8005f14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e000      	b.n	8005f34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005f32:	2302      	movs	r3, #2
  }
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	fe00e800 	.word	0xfe00e800

08005f40 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	4608      	mov	r0, r1
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4603      	mov	r3, r0
 8005f50:	817b      	strh	r3, [r7, #10]
 8005f52:	460b      	mov	r3, r1
 8005f54:	813b      	strh	r3, [r7, #8]
 8005f56:	4613      	mov	r3, r2
 8005f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b20      	cmp	r3, #32
 8005f64:	f040 80fd 	bne.w	8006162 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_I2C_Mem_Read+0x34>
 8005f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d105      	bne.n	8005f80 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0f1      	b.n	8006164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d101      	bne.n	8005f8e <HAL_I2C_Mem_Read+0x4e>
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e0ea      	b.n	8006164 <HAL_I2C_Mem_Read+0x224>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f96:	f7fd ffd5 	bl	8003f44 <HAL_GetTick>
 8005f9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	2319      	movs	r3, #25
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f9bd 	bl	8006328 <I2C_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e0d5      	b.n	8006164 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2222      	movs	r2, #34	; 0x22
 8005fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2240      	movs	r2, #64	; 0x40
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a3a      	ldr	r2, [r7, #32]
 8005fd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005fe0:	88f8      	ldrh	r0, [r7, #6]
 8005fe2:	893a      	ldrh	r2, [r7, #8]
 8005fe4:	8979      	ldrh	r1, [r7, #10]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	9301      	str	r3, [sp, #4]
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	4603      	mov	r3, r0
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f921 	bl	8006238 <I2C_RequestMemoryRead>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0ad      	b.n	8006164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800600c:	b29b      	uxth	r3, r3
 800600e:	2bff      	cmp	r3, #255	; 0xff
 8006010:	d90e      	bls.n	8006030 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	22ff      	movs	r2, #255	; 0xff
 8006016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601c:	b2da      	uxtb	r2, r3
 800601e:	8979      	ldrh	r1, [r7, #10]
 8006020:	4b52      	ldr	r3, [pc, #328]	; (800616c <HAL_I2C_Mem_Read+0x22c>)
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 fb25 	bl	8006678 <I2C_TransferConfig>
 800602e:	e00f      	b.n	8006050 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603e:	b2da      	uxtb	r2, r3
 8006040:	8979      	ldrh	r1, [r7, #10]
 8006042:	4b4a      	ldr	r3, [pc, #296]	; (800616c <HAL_I2C_Mem_Read+0x22c>)
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 fb14 	bl	8006678 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	2200      	movs	r2, #0
 8006058:	2104      	movs	r1, #4
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 f964 	bl	8006328 <I2C_WaitOnFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e07c      	b.n	8006164 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b01      	subs	r3, #1
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d034      	beq.n	8006110 <HAL_I2C_Mem_Read+0x1d0>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d130      	bne.n	8006110 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b4:	2200      	movs	r2, #0
 80060b6:	2180      	movs	r1, #128	; 0x80
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 f935 	bl	8006328 <I2C_WaitOnFlagUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e04d      	b.n	8006164 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2bff      	cmp	r3, #255	; 0xff
 80060d0:	d90e      	bls.n	80060f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	8979      	ldrh	r1, [r7, #10]
 80060e0:	2300      	movs	r3, #0
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 fac5 	bl	8006678 <I2C_TransferConfig>
 80060ee:	e00f      	b.n	8006110 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	8979      	ldrh	r1, [r7, #10]
 8006102:	2300      	movs	r3, #0
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 fab4 	bl	8006678 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d19a      	bne.n	8006050 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 f982 	bl	8006428 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e01a      	b.n	8006164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2220      	movs	r2, #32
 8006134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6859      	ldr	r1, [r3, #4]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <HAL_I2C_Mem_Read+0x230>)
 8006142:	400b      	ands	r3, r1
 8006144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	e000      	b.n	8006164 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006162:	2302      	movs	r3, #2
  }
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	80002400 	.word	0x80002400
 8006170:	fe00e800 	.word	0xfe00e800

08006174 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006182:	b2db      	uxtb	r3, r3
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af02      	add	r7, sp, #8
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	4608      	mov	r0, r1
 800619a:	4611      	mov	r1, r2
 800619c:	461a      	mov	r2, r3
 800619e:	4603      	mov	r3, r0
 80061a0:	817b      	strh	r3, [r7, #10]
 80061a2:	460b      	mov	r3, r1
 80061a4:	813b      	strh	r3, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80061aa:	88fb      	ldrh	r3, [r7, #6]
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	8979      	ldrh	r1, [r7, #10]
 80061b0:	4b20      	ldr	r3, [pc, #128]	; (8006234 <I2C_RequestMemoryWrite+0xa4>)
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fa5d 	bl	8006678 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061be:	69fa      	ldr	r2, [r7, #28]
 80061c0:	69b9      	ldr	r1, [r7, #24]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 f8f0 	bl	80063a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e02c      	b.n	800622c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061d2:	88fb      	ldrh	r3, [r7, #6]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d105      	bne.n	80061e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061d8:	893b      	ldrh	r3, [r7, #8]
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	629a      	str	r2, [r3, #40]	; 0x28
 80061e2:	e015      	b.n	8006210 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061e4:	893b      	ldrh	r3, [r7, #8]
 80061e6:	0a1b      	lsrs	r3, r3, #8
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	69b9      	ldr	r1, [r7, #24]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f8d6 	bl	80063a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e012      	b.n	800622c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006206:	893b      	ldrh	r3, [r7, #8]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	2200      	movs	r2, #0
 8006218:	2180      	movs	r1, #128	; 0x80
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 f884 	bl	8006328 <I2C_WaitOnFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	80002000 	.word	0x80002000

08006238 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	4608      	mov	r0, r1
 8006242:	4611      	mov	r1, r2
 8006244:	461a      	mov	r2, r3
 8006246:	4603      	mov	r3, r0
 8006248:	817b      	strh	r3, [r7, #10]
 800624a:	460b      	mov	r3, r1
 800624c:	813b      	strh	r3, [r7, #8]
 800624e:	4613      	mov	r3, r2
 8006250:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	b2da      	uxtb	r2, r3
 8006256:	8979      	ldrh	r1, [r7, #10]
 8006258:	4b20      	ldr	r3, [pc, #128]	; (80062dc <I2C_RequestMemoryRead+0xa4>)
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	2300      	movs	r3, #0
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 fa0a 	bl	8006678 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006264:	69fa      	ldr	r2, [r7, #28]
 8006266:	69b9      	ldr	r1, [r7, #24]
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f89d 	bl	80063a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e02c      	b.n	80062d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006278:	88fb      	ldrh	r3, [r7, #6]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d105      	bne.n	800628a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800627e:	893b      	ldrh	r3, [r7, #8]
 8006280:	b2da      	uxtb	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	629a      	str	r2, [r3, #40]	; 0x28
 8006288:	e015      	b.n	80062b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800628a:	893b      	ldrh	r3, [r7, #8]
 800628c:	0a1b      	lsrs	r3, r3, #8
 800628e:	b29b      	uxth	r3, r3
 8006290:	b2da      	uxtb	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	69b9      	ldr	r1, [r7, #24]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f883 	bl	80063a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d001      	beq.n	80062ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e012      	b.n	80062d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062ac:	893b      	ldrh	r3, [r7, #8]
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2200      	movs	r2, #0
 80062be:	2140      	movs	r1, #64	; 0x40
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f831 	bl	8006328 <I2C_WaitOnFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	80002000 	.word	0x80002000

080062e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d103      	bne.n	80062fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2200      	movs	r2, #0
 80062fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b01      	cmp	r3, #1
 800630a:	d007      	beq.n	800631c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699a      	ldr	r2, [r3, #24]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0201 	orr.w	r2, r2, #1
 800631a:	619a      	str	r2, [r3, #24]
  }
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	4613      	mov	r3, r2
 8006336:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006338:	e022      	b.n	8006380 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d01e      	beq.n	8006380 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7fd fdff 	bl	8003f44 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d113      	bne.n	8006380 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635c:	f043 0220 	orr.w	r2, r3, #32
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e00f      	b.n	80063a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699a      	ldr	r2, [r3, #24]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	4013      	ands	r3, r2
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	429a      	cmp	r2, r3
 800638e:	bf0c      	ite	eq
 8006390:	2301      	moveq	r3, #1
 8006392:	2300      	movne	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	461a      	mov	r2, r3
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	429a      	cmp	r2, r3
 800639c:	d0cd      	beq.n	800633a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063b4:	e02c      	b.n	8006410 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f870 	bl	80064a0 <I2C_IsErrorOccurred>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e02a      	b.n	8006420 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d0:	d01e      	beq.n	8006410 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d2:	f7fd fdb7 	bl	8003f44 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d302      	bcc.n	80063e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d113      	bne.n	8006410 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ec:	f043 0220 	orr.w	r2, r3, #32
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e007      	b.n	8006420 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b02      	cmp	r3, #2
 800641c:	d1cb      	bne.n	80063b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006434:	e028      	b.n	8006488 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 f830 	bl	80064a0 <I2C_IsErrorOccurred>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e026      	b.n	8006498 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644a:	f7fd fd7b 	bl	8003f44 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	429a      	cmp	r2, r3
 8006458:	d302      	bcc.n	8006460 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d113      	bne.n	8006488 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006464:	f043 0220 	orr.w	r2, r3, #32
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e007      	b.n	8006498 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	f003 0320 	and.w	r3, r3, #32
 8006492:	2b20      	cmp	r3, #32
 8006494:	d1cf      	bne.n	8006436 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	; 0x28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80064ba:	2300      	movs	r3, #0
 80064bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	f003 0310 	and.w	r3, r3, #16
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d075      	beq.n	80065b8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2210      	movs	r2, #16
 80064d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064d4:	e056      	b.n	8006584 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064dc:	d052      	beq.n	8006584 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064de:	f7fd fd31 	bl	8003f44 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d302      	bcc.n	80064f4 <I2C_IsErrorOccurred+0x54>
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d147      	bne.n	8006584 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006506:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006516:	d12e      	bne.n	8006576 <I2C_IsErrorOccurred+0xd6>
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800651e:	d02a      	beq.n	8006576 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006520:	7cfb      	ldrb	r3, [r7, #19]
 8006522:	2b20      	cmp	r3, #32
 8006524:	d027      	beq.n	8006576 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006534:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006536:	f7fd fd05 	bl	8003f44 <HAL_GetTick>
 800653a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800653c:	e01b      	b.n	8006576 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800653e:	f7fd fd01 	bl	8003f44 <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b19      	cmp	r3, #25
 800654a:	d914      	bls.n	8006576 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006550:	f043 0220 	orr.w	r2, r3, #32
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b20      	cmp	r3, #32
 8006582:	d1dc      	bne.n	800653e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b20      	cmp	r3, #32
 8006590:	d003      	beq.n	800659a <I2C_IsErrorOccurred+0xfa>
 8006592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006596:	2b00      	cmp	r3, #0
 8006598:	d09d      	beq.n	80064d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800659a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d103      	bne.n	80065aa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2220      	movs	r2, #32
 80065a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	f043 0304 	orr.w	r3, r3, #4
 80065b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00b      	beq.n	80065e2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	f043 0301 	orr.w	r3, r3, #1
 80065d0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00b      	beq.n	8006604 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	f043 0308 	orr.w	r3, r3, #8
 80065f2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00b      	beq.n	8006626 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	f043 0302 	orr.w	r3, r3, #2
 8006614:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800661e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800662a:	2b00      	cmp	r3, #0
 800662c:	d01c      	beq.n	8006668 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f7ff fe56 	bl	80062e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6859      	ldr	r1, [r3, #4]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	4b0d      	ldr	r3, [pc, #52]	; (8006674 <I2C_IsErrorOccurred+0x1d4>)
 8006640:	400b      	ands	r3, r1
 8006642:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	431a      	orrs	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2220      	movs	r2, #32
 8006654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800666c:	4618      	mov	r0, r3
 800666e:	3728      	adds	r7, #40	; 0x28
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	fe00e800 	.word	0xfe00e800

08006678 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	607b      	str	r3, [r7, #4]
 8006682:	460b      	mov	r3, r1
 8006684:	817b      	strh	r3, [r7, #10]
 8006686:	4613      	mov	r3, r2
 8006688:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800668a:	897b      	ldrh	r3, [r7, #10]
 800668c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006690:	7a7b      	ldrb	r3, [r7, #9]
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006698:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066a6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	0d5b      	lsrs	r3, r3, #21
 80066b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80066b6:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <I2C_TransferConfig+0x60>)
 80066b8:	430b      	orrs	r3, r1
 80066ba:	43db      	mvns	r3, r3
 80066bc:	ea02 0103 	and.w	r1, r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80066ca:	bf00      	nop
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	03ff63ff 	.word	0x03ff63ff

080066dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	d138      	bne.n	8006764 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e032      	b.n	8006766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2224      	movs	r2, #36	; 0x24
 800670c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0201 	bic.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800672e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6819      	ldr	r1, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f042 0201 	orr.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	e000      	b.n	8006766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006764:	2302      	movs	r3, #2
  }
}
 8006766:	4618      	mov	r0, r3
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006772:	b480      	push	{r7}
 8006774:	b085      	sub	sp, #20
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b20      	cmp	r3, #32
 8006786:	d139      	bne.n	80067fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006792:	2302      	movs	r3, #2
 8006794:	e033      	b.n	80067fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2224      	movs	r2, #36	; 0x24
 80067a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0201 	bic.w	r2, r2, #1
 80067b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80067c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0201 	orr.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	e000      	b.n	80067fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067fc:	2302      	movs	r3, #2
  }
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
	...

0800680c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e0bf      	b.n	800699e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7fc fea4 	bl	8003580 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800684e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6999      	ldr	r1, [r3, #24]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006864:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6899      	ldr	r1, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	4b4a      	ldr	r3, [pc, #296]	; (80069a8 <HAL_LTDC_Init+0x19c>)
 8006880:	400b      	ands	r3, r1
 8006882:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	041b      	lsls	r3, r3, #16
 800688a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6899      	ldr	r1, [r3, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	699a      	ldr	r2, [r3, #24]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68d9      	ldr	r1, [r3, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	4b3e      	ldr	r3, [pc, #248]	; (80069a8 <HAL_LTDC_Init+0x19c>)
 80068ae:	400b      	ands	r3, r1
 80068b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	041b      	lsls	r3, r3, #16
 80068b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68d9      	ldr	r1, [r3, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1a      	ldr	r2, [r3, #32]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6919      	ldr	r1, [r3, #16]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4b33      	ldr	r3, [pc, #204]	; (80069a8 <HAL_LTDC_Init+0x19c>)
 80068dc:	400b      	ands	r3, r1
 80068de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	041b      	lsls	r3, r3, #16
 80068e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6919      	ldr	r1, [r3, #16]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6959      	ldr	r1, [r3, #20]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	4b27      	ldr	r3, [pc, #156]	; (80069a8 <HAL_LTDC_Init+0x19c>)
 800690a:	400b      	ands	r3, r1
 800690c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	041b      	lsls	r3, r3, #16
 8006914:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6959      	ldr	r1, [r3, #20]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800693c:	041b      	lsls	r3, r3, #16
 800693e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800694e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0206 	orr.w	r2, r2, #6
 800697a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699a      	ldr	r2, [r3, #24]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	f000f800 	.word	0xf000f800

080069ac <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d023      	beq.n	8006a16 <HAL_LTDC_IRQHandler+0x6a>
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d01e      	beq.n	8006a16 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0204 	bic.w	r2, r2, #4
 80069e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2204      	movs	r2, #4
 80069ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80069f6:	f043 0201 	orr.w	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2204      	movs	r2, #4
 8006a04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f86f 	bl	8006af4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d023      	beq.n	8006a68 <HAL_LTDC_IRQHandler+0xbc>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d01e      	beq.n	8006a68 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0202 	bic.w	r2, r2, #2
 8006a38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006a48:	f043 0202 	orr.w	r2, r3, #2
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2204      	movs	r2, #4
 8006a56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f846 	bl	8006af4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01b      	beq.n	8006aaa <HAL_LTDC_IRQHandler+0xfe>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d016      	beq.n	8006aaa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0201 	bic.w	r2, r2, #1
 8006a8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2201      	movs	r2, #1
 8006a92:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f82f 	bl	8006b08 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01b      	beq.n	8006aec <HAL_LTDC_IRQHandler+0x140>
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d016      	beq.n	8006aec <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0208 	bic.w	r2, r2, #8
 8006acc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f818 	bl	8006b1c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b30:	b5b0      	push	{r4, r5, r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_LTDC_ConfigLayer+0x1a>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e02c      	b.n	8006ba4 <HAL_LTDC_ConfigLayer+0x74>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2202      	movs	r2, #2
 8006b56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2134      	movs	r1, #52	; 0x34
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	4413      	add	r3, r2
 8006b66:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	461d      	mov	r5, r3
 8006b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f81f 	bl	8006bc8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bdb0      	pop	{r4, r5, r7, pc}

08006bac <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006bba:	b2db      	uxtb	r3, r3
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b089      	sub	sp, #36	; 0x24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	0c1b      	lsrs	r3, r3, #16
 8006be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006be4:	4413      	add	r3, r2
 8006be6:	041b      	lsls	r3, r3, #16
 8006be8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	01db      	lsls	r3, r3, #7
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3384      	adds	r3, #132	; 0x84
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	4611      	mov	r1, r2
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	01d2      	lsls	r2, r2, #7
 8006c04:	440a      	add	r2, r1
 8006c06:	3284      	adds	r2, #132	; 0x84
 8006c08:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c0c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	0c1b      	lsrs	r3, r3, #16
 8006c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c1e:	4413      	add	r3, r2
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4619      	mov	r1, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	01db      	lsls	r3, r3, #7
 8006c2c:	440b      	add	r3, r1
 8006c2e:	3384      	adds	r3, #132	; 0x84
 8006c30:	4619      	mov	r1, r3
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c46:	4413      	add	r3, r2
 8006c48:	041b      	lsls	r3, r3, #16
 8006c4a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	01db      	lsls	r3, r3, #7
 8006c56:	4413      	add	r3, r2
 8006c58:	3384      	adds	r3, #132	; 0x84
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	6812      	ldr	r2, [r2, #0]
 8006c60:	4611      	mov	r1, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	01d2      	lsls	r2, r2, #7
 8006c66:	440a      	add	r2, r1
 8006c68:	3284      	adds	r2, #132	; 0x84
 8006c6a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c6e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c7e:	4413      	add	r3, r2
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4619      	mov	r1, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	01db      	lsls	r3, r3, #7
 8006c8c:	440b      	add	r3, r1
 8006c8e:	3384      	adds	r3, #132	; 0x84
 8006c90:	4619      	mov	r1, r3
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	01db      	lsls	r3, r3, #7
 8006ca2:	4413      	add	r3, r2
 8006ca4:	3384      	adds	r3, #132	; 0x84
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	6812      	ldr	r2, [r2, #0]
 8006cac:	4611      	mov	r1, r2
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	01d2      	lsls	r2, r2, #7
 8006cb2:	440a      	add	r2, r1
 8006cb4:	3284      	adds	r2, #132	; 0x84
 8006cb6:	f023 0307 	bic.w	r3, r3, #7
 8006cba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	01db      	lsls	r3, r3, #7
 8006cc6:	4413      	add	r3, r2
 8006cc8:	3384      	adds	r3, #132	; 0x84
 8006cca:	461a      	mov	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006cd8:	021b      	lsls	r3, r3, #8
 8006cda:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006ce2:	041b      	lsls	r3, r3, #16
 8006ce4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	061b      	lsls	r3, r3, #24
 8006cec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	01db      	lsls	r3, r3, #7
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3384      	adds	r3, #132	; 0x84
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	01db      	lsls	r3, r3, #7
 8006d08:	4413      	add	r3, r2
 8006d0a:	3384      	adds	r3, #132	; 0x84
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	2300      	movs	r3, #0
 8006d10:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d18:	461a      	mov	r2, r3
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	431a      	orrs	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4619      	mov	r1, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	01db      	lsls	r3, r3, #7
 8006d2c:	440b      	add	r3, r1
 8006d2e:	3384      	adds	r3, #132	; 0x84
 8006d30:	4619      	mov	r1, r3
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	01db      	lsls	r3, r3, #7
 8006d42:	4413      	add	r3, r2
 8006d44:	3384      	adds	r3, #132	; 0x84
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	6812      	ldr	r2, [r2, #0]
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	01d2      	lsls	r2, r2, #7
 8006d52:	440a      	add	r2, r1
 8006d54:	3284      	adds	r2, #132	; 0x84
 8006d56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d5a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	01db      	lsls	r3, r3, #7
 8006d66:	4413      	add	r3, r2
 8006d68:	3384      	adds	r3, #132	; 0x84
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	01db      	lsls	r3, r3, #7
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3384      	adds	r3, #132	; 0x84
 8006d80:	69da      	ldr	r2, [r3, #28]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4619      	mov	r1, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	01db      	lsls	r3, r3, #7
 8006d8c:	440b      	add	r3, r1
 8006d8e:	3384      	adds	r3, #132	; 0x84
 8006d90:	4619      	mov	r1, r3
 8006d92:	4b58      	ldr	r3, [pc, #352]	; (8006ef4 <LTDC_SetConfig+0x32c>)
 8006d94:	4013      	ands	r3, r2
 8006d96:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	68f9      	ldr	r1, [r7, #12]
 8006da2:	6809      	ldr	r1, [r1, #0]
 8006da4:	4608      	mov	r0, r1
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	01c9      	lsls	r1, r1, #7
 8006daa:	4401      	add	r1, r0
 8006dac:	3184      	adds	r1, #132	; 0x84
 8006dae:	4313      	orrs	r3, r2
 8006db0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	01db      	lsls	r3, r3, #7
 8006dbc:	4413      	add	r3, r2
 8006dbe:	3384      	adds	r3, #132	; 0x84
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	01db      	lsls	r3, r3, #7
 8006dcc:	4413      	add	r3, r2
 8006dce:	3384      	adds	r3, #132	; 0x84
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	01db      	lsls	r3, r3, #7
 8006de0:	4413      	add	r3, r2
 8006de2:	3384      	adds	r3, #132	; 0x84
 8006de4:	461a      	mov	r2, r3
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d102      	bne.n	8006dfa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006df4:	2304      	movs	r3, #4
 8006df6:	61fb      	str	r3, [r7, #28]
 8006df8:	e01b      	b.n	8006e32 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d102      	bne.n	8006e08 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006e02:	2303      	movs	r3, #3
 8006e04:	61fb      	str	r3, [r7, #28]
 8006e06:	e014      	b.n	8006e32 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	d00b      	beq.n	8006e28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d007      	beq.n	8006e28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d003      	beq.n	8006e28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e24:	2b07      	cmp	r3, #7
 8006e26:	d102      	bne.n	8006e2e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006e28:	2302      	movs	r3, #2
 8006e2a:	61fb      	str	r3, [r7, #28]
 8006e2c:	e001      	b.n	8006e32 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	01db      	lsls	r3, r3, #7
 8006e3c:	4413      	add	r3, r2
 8006e3e:	3384      	adds	r3, #132	; 0x84
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	6812      	ldr	r2, [r2, #0]
 8006e46:	4611      	mov	r1, r2
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	01d2      	lsls	r2, r2, #7
 8006e4c:	440a      	add	r2, r1
 8006e4e:	3284      	adds	r2, #132	; 0x84
 8006e50:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006e54:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	fb02 f303 	mul.w	r3, r2, r3
 8006e60:	041a      	lsls	r2, r3, #16
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6859      	ldr	r1, [r3, #4]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	1acb      	subs	r3, r1, r3
 8006e6c:	69f9      	ldr	r1, [r7, #28]
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	3303      	adds	r3, #3
 8006e74:	68f9      	ldr	r1, [r7, #12]
 8006e76:	6809      	ldr	r1, [r1, #0]
 8006e78:	4608      	mov	r0, r1
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	01c9      	lsls	r1, r1, #7
 8006e7e:	4401      	add	r1, r0
 8006e80:	3184      	adds	r1, #132	; 0x84
 8006e82:	4313      	orrs	r3, r2
 8006e84:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	01db      	lsls	r3, r3, #7
 8006e90:	4413      	add	r3, r2
 8006e92:	3384      	adds	r3, #132	; 0x84
 8006e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	01db      	lsls	r3, r3, #7
 8006ea0:	440b      	add	r3, r1
 8006ea2:	3384      	adds	r3, #132	; 0x84
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	4b14      	ldr	r3, [pc, #80]	; (8006ef8 <LTDC_SetConfig+0x330>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	01db      	lsls	r3, r3, #7
 8006eb6:	4413      	add	r3, r2
 8006eb8:	3384      	adds	r3, #132	; 0x84
 8006eba:	461a      	mov	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	01db      	lsls	r3, r3, #7
 8006ecc:	4413      	add	r3, r2
 8006ece:	3384      	adds	r3, #132	; 0x84
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	6812      	ldr	r2, [r2, #0]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	01d2      	lsls	r2, r2, #7
 8006edc:	440a      	add	r2, r1
 8006ede:	3284      	adds	r2, #132	; 0x84
 8006ee0:	f043 0301 	orr.w	r3, r3, #1
 8006ee4:	6013      	str	r3, [r2, #0]
}
 8006ee6:	bf00      	nop
 8006ee8:	3724      	adds	r7, #36	; 0x24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	fffff8f8 	.word	0xfffff8f8
 8006ef8:	fffff800 	.word	0xfffff800

08006efc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f00:	4b05      	ldr	r3, [pc, #20]	; (8006f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a04      	ldr	r2, [pc, #16]	; (8006f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f0a:	6013      	str	r3, [r2, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40007000 	.word	0x40007000

08006f1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f26:	4b23      	ldr	r3, [pc, #140]	; (8006fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	4a22      	ldr	r2, [pc, #136]	; (8006fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f30:	6413      	str	r3, [r2, #64]	; 0x40
 8006f32:	4b20      	ldr	r3, [pc, #128]	; (8006fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006f3e:	4b1e      	ldr	r3, [pc, #120]	; (8006fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a1d      	ldr	r2, [pc, #116]	; (8006fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f4a:	f7fc fffb 	bl	8003f44 <HAL_GetTick>
 8006f4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f50:	e009      	b.n	8006f66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f52:	f7fc fff7 	bl	8003f44 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f60:	d901      	bls.n	8006f66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e022      	b.n	8006fac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f66:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f72:	d1ee      	bne.n	8006f52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006f74:	4b10      	ldr	r3, [pc, #64]	; (8006fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a0f      	ldr	r2, [pc, #60]	; (8006fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f80:	f7fc ffe0 	bl	8003f44 <HAL_GetTick>
 8006f84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f86:	e009      	b.n	8006f9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f88:	f7fc ffdc 	bl	8003f44 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f96:	d901      	bls.n	8006f9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e007      	b.n	8006fac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f9c:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fa8:	d1ee      	bne.n	8006f88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	40023800 	.word	0x40023800
 8006fb8:	40007000 	.word	0x40007000

08006fbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e291      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 8087 	beq.w	80070ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fe0:	4b96      	ldr	r3, [pc, #600]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f003 030c 	and.w	r3, r3, #12
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d00c      	beq.n	8007006 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fec:	4b93      	ldr	r3, [pc, #588]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f003 030c 	and.w	r3, r3, #12
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d112      	bne.n	800701e <HAL_RCC_OscConfig+0x62>
 8006ff8:	4b90      	ldr	r3, [pc, #576]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007004:	d10b      	bne.n	800701e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007006:	4b8d      	ldr	r3, [pc, #564]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d06c      	beq.n	80070ec <HAL_RCC_OscConfig+0x130>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d168      	bne.n	80070ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e26b      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007026:	d106      	bne.n	8007036 <HAL_RCC_OscConfig+0x7a>
 8007028:	4b84      	ldr	r3, [pc, #528]	; (800723c <HAL_RCC_OscConfig+0x280>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a83      	ldr	r2, [pc, #524]	; (800723c <HAL_RCC_OscConfig+0x280>)
 800702e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	e02e      	b.n	8007094 <HAL_RCC_OscConfig+0xd8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10c      	bne.n	8007058 <HAL_RCC_OscConfig+0x9c>
 800703e:	4b7f      	ldr	r3, [pc, #508]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a7e      	ldr	r2, [pc, #504]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	4b7c      	ldr	r3, [pc, #496]	; (800723c <HAL_RCC_OscConfig+0x280>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a7b      	ldr	r2, [pc, #492]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	e01d      	b.n	8007094 <HAL_RCC_OscConfig+0xd8>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007060:	d10c      	bne.n	800707c <HAL_RCC_OscConfig+0xc0>
 8007062:	4b76      	ldr	r3, [pc, #472]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a75      	ldr	r2, [pc, #468]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	4b73      	ldr	r3, [pc, #460]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a72      	ldr	r2, [pc, #456]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	e00b      	b.n	8007094 <HAL_RCC_OscConfig+0xd8>
 800707c:	4b6f      	ldr	r3, [pc, #444]	; (800723c <HAL_RCC_OscConfig+0x280>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a6e      	ldr	r2, [pc, #440]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	4b6c      	ldr	r3, [pc, #432]	; (800723c <HAL_RCC_OscConfig+0x280>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a6b      	ldr	r2, [pc, #428]	; (800723c <HAL_RCC_OscConfig+0x280>)
 800708e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d013      	beq.n	80070c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709c:	f7fc ff52 	bl	8003f44 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070a4:	f7fc ff4e 	bl	8003f44 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b64      	cmp	r3, #100	; 0x64
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e21f      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070b6:	4b61      	ldr	r3, [pc, #388]	; (800723c <HAL_RCC_OscConfig+0x280>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d0f0      	beq.n	80070a4 <HAL_RCC_OscConfig+0xe8>
 80070c2:	e014      	b.n	80070ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c4:	f7fc ff3e 	bl	8003f44 <HAL_GetTick>
 80070c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ca:	e008      	b.n	80070de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070cc:	f7fc ff3a 	bl	8003f44 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b64      	cmp	r3, #100	; 0x64
 80070d8:	d901      	bls.n	80070de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e20b      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070de:	4b57      	ldr	r3, [pc, #348]	; (800723c <HAL_RCC_OscConfig+0x280>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1f0      	bne.n	80070cc <HAL_RCC_OscConfig+0x110>
 80070ea:	e000      	b.n	80070ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d069      	beq.n	80071ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070fa:	4b50      	ldr	r3, [pc, #320]	; (800723c <HAL_RCC_OscConfig+0x280>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f003 030c 	and.w	r3, r3, #12
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00b      	beq.n	800711e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007106:	4b4d      	ldr	r3, [pc, #308]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 030c 	and.w	r3, r3, #12
 800710e:	2b08      	cmp	r3, #8
 8007110:	d11c      	bne.n	800714c <HAL_RCC_OscConfig+0x190>
 8007112:	4b4a      	ldr	r3, [pc, #296]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d116      	bne.n	800714c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800711e:	4b47      	ldr	r3, [pc, #284]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d005      	beq.n	8007136 <HAL_RCC_OscConfig+0x17a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d001      	beq.n	8007136 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e1df      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007136:	4b41      	ldr	r3, [pc, #260]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	493d      	ldr	r1, [pc, #244]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007146:	4313      	orrs	r3, r2
 8007148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800714a:	e040      	b.n	80071ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d023      	beq.n	800719c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007154:	4b39      	ldr	r3, [pc, #228]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a38      	ldr	r2, [pc, #224]	; (800723c <HAL_RCC_OscConfig+0x280>)
 800715a:	f043 0301 	orr.w	r3, r3, #1
 800715e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007160:	f7fc fef0 	bl	8003f44 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007168:	f7fc feec 	bl	8003f44 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e1bd      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800717a:	4b30      	ldr	r3, [pc, #192]	; (800723c <HAL_RCC_OscConfig+0x280>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0f0      	beq.n	8007168 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007186:	4b2d      	ldr	r3, [pc, #180]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	4929      	ldr	r1, [pc, #164]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007196:	4313      	orrs	r3, r2
 8007198:	600b      	str	r3, [r1, #0]
 800719a:	e018      	b.n	80071ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800719c:	4b27      	ldr	r3, [pc, #156]	; (800723c <HAL_RCC_OscConfig+0x280>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a26      	ldr	r2, [pc, #152]	; (800723c <HAL_RCC_OscConfig+0x280>)
 80071a2:	f023 0301 	bic.w	r3, r3, #1
 80071a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a8:	f7fc fecc 	bl	8003f44 <HAL_GetTick>
 80071ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b0:	f7fc fec8 	bl	8003f44 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e199      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071c2:	4b1e      	ldr	r3, [pc, #120]	; (800723c <HAL_RCC_OscConfig+0x280>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1f0      	bne.n	80071b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0308 	and.w	r3, r3, #8
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d038      	beq.n	800724c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d019      	beq.n	8007216 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071e2:	4b16      	ldr	r3, [pc, #88]	; (800723c <HAL_RCC_OscConfig+0x280>)
 80071e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e6:	4a15      	ldr	r2, [pc, #84]	; (800723c <HAL_RCC_OscConfig+0x280>)
 80071e8:	f043 0301 	orr.w	r3, r3, #1
 80071ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ee:	f7fc fea9 	bl	8003f44 <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071f4:	e008      	b.n	8007208 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071f6:	f7fc fea5 	bl	8003f44 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e176      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007208:	4b0c      	ldr	r3, [pc, #48]	; (800723c <HAL_RCC_OscConfig+0x280>)
 800720a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0f0      	beq.n	80071f6 <HAL_RCC_OscConfig+0x23a>
 8007214:	e01a      	b.n	800724c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007216:	4b09      	ldr	r3, [pc, #36]	; (800723c <HAL_RCC_OscConfig+0x280>)
 8007218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800721a:	4a08      	ldr	r2, [pc, #32]	; (800723c <HAL_RCC_OscConfig+0x280>)
 800721c:	f023 0301 	bic.w	r3, r3, #1
 8007220:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007222:	f7fc fe8f 	bl	8003f44 <HAL_GetTick>
 8007226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007228:	e00a      	b.n	8007240 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800722a:	f7fc fe8b 	bl	8003f44 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d903      	bls.n	8007240 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e15c      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
 800723c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007240:	4b91      	ldr	r3, [pc, #580]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1ee      	bne.n	800722a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 80a4 	beq.w	80073a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800725a:	4b8b      	ldr	r3, [pc, #556]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10d      	bne.n	8007282 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007266:	4b88      	ldr	r3, [pc, #544]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	4a87      	ldr	r2, [pc, #540]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 800726c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007270:	6413      	str	r3, [r2, #64]	; 0x40
 8007272:	4b85      	ldr	r3, [pc, #532]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800727a:	60bb      	str	r3, [r7, #8]
 800727c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800727e:	2301      	movs	r3, #1
 8007280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007282:	4b82      	ldr	r3, [pc, #520]	; (800748c <HAL_RCC_OscConfig+0x4d0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728a:	2b00      	cmp	r3, #0
 800728c:	d118      	bne.n	80072c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800728e:	4b7f      	ldr	r3, [pc, #508]	; (800748c <HAL_RCC_OscConfig+0x4d0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a7e      	ldr	r2, [pc, #504]	; (800748c <HAL_RCC_OscConfig+0x4d0>)
 8007294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800729a:	f7fc fe53 	bl	8003f44 <HAL_GetTick>
 800729e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072a0:	e008      	b.n	80072b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072a2:	f7fc fe4f 	bl	8003f44 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b64      	cmp	r3, #100	; 0x64
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e120      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072b4:	4b75      	ldr	r3, [pc, #468]	; (800748c <HAL_RCC_OscConfig+0x4d0>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0f0      	beq.n	80072a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d106      	bne.n	80072d6 <HAL_RCC_OscConfig+0x31a>
 80072c8:	4b6f      	ldr	r3, [pc, #444]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 80072ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072cc:	4a6e      	ldr	r2, [pc, #440]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 80072ce:	f043 0301 	orr.w	r3, r3, #1
 80072d2:	6713      	str	r3, [r2, #112]	; 0x70
 80072d4:	e02d      	b.n	8007332 <HAL_RCC_OscConfig+0x376>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10c      	bne.n	80072f8 <HAL_RCC_OscConfig+0x33c>
 80072de:	4b6a      	ldr	r3, [pc, #424]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 80072e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e2:	4a69      	ldr	r2, [pc, #420]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 80072e4:	f023 0301 	bic.w	r3, r3, #1
 80072e8:	6713      	str	r3, [r2, #112]	; 0x70
 80072ea:	4b67      	ldr	r3, [pc, #412]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 80072ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ee:	4a66      	ldr	r2, [pc, #408]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 80072f0:	f023 0304 	bic.w	r3, r3, #4
 80072f4:	6713      	str	r3, [r2, #112]	; 0x70
 80072f6:	e01c      	b.n	8007332 <HAL_RCC_OscConfig+0x376>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	2b05      	cmp	r3, #5
 80072fe:	d10c      	bne.n	800731a <HAL_RCC_OscConfig+0x35e>
 8007300:	4b61      	ldr	r3, [pc, #388]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007304:	4a60      	ldr	r2, [pc, #384]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007306:	f043 0304 	orr.w	r3, r3, #4
 800730a:	6713      	str	r3, [r2, #112]	; 0x70
 800730c:	4b5e      	ldr	r3, [pc, #376]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 800730e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007310:	4a5d      	ldr	r2, [pc, #372]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007312:	f043 0301 	orr.w	r3, r3, #1
 8007316:	6713      	str	r3, [r2, #112]	; 0x70
 8007318:	e00b      	b.n	8007332 <HAL_RCC_OscConfig+0x376>
 800731a:	4b5b      	ldr	r3, [pc, #364]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 800731c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731e:	4a5a      	ldr	r2, [pc, #360]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007320:	f023 0301 	bic.w	r3, r3, #1
 8007324:	6713      	str	r3, [r2, #112]	; 0x70
 8007326:	4b58      	ldr	r3, [pc, #352]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732a:	4a57      	ldr	r2, [pc, #348]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 800732c:	f023 0304 	bic.w	r3, r3, #4
 8007330:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d015      	beq.n	8007366 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800733a:	f7fc fe03 	bl	8003f44 <HAL_GetTick>
 800733e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007340:	e00a      	b.n	8007358 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007342:	f7fc fdff 	bl	8003f44 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007350:	4293      	cmp	r3, r2
 8007352:	d901      	bls.n	8007358 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e0ce      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007358:	4b4b      	ldr	r3, [pc, #300]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 800735a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0ee      	beq.n	8007342 <HAL_RCC_OscConfig+0x386>
 8007364:	e014      	b.n	8007390 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007366:	f7fc fded 	bl	8003f44 <HAL_GetTick>
 800736a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800736c:	e00a      	b.n	8007384 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800736e:	f7fc fde9 	bl	8003f44 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	f241 3288 	movw	r2, #5000	; 0x1388
 800737c:	4293      	cmp	r3, r2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e0b8      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007384:	4b40      	ldr	r3, [pc, #256]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1ee      	bne.n	800736e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007390:	7dfb      	ldrb	r3, [r7, #23]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d105      	bne.n	80073a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007396:	4b3c      	ldr	r3, [pc, #240]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	4a3b      	ldr	r2, [pc, #236]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 800739c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 80a4 	beq.w	80074f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073ac:	4b36      	ldr	r3, [pc, #216]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 030c 	and.w	r3, r3, #12
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d06b      	beq.n	8007490 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d149      	bne.n	8007454 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073c0:	4b31      	ldr	r3, [pc, #196]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a30      	ldr	r2, [pc, #192]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 80073c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073cc:	f7fc fdba 	bl	8003f44 <HAL_GetTick>
 80073d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073d2:	e008      	b.n	80073e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073d4:	f7fc fdb6 	bl	8003f44 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e087      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073e6:	4b28      	ldr	r3, [pc, #160]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d1f0      	bne.n	80073d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	69da      	ldr	r2, [r3, #28]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	019b      	lsls	r3, r3, #6
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007408:	085b      	lsrs	r3, r3, #1
 800740a:	3b01      	subs	r3, #1
 800740c:	041b      	lsls	r3, r3, #16
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	061b      	lsls	r3, r3, #24
 8007416:	4313      	orrs	r3, r2
 8007418:	4a1b      	ldr	r2, [pc, #108]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 800741a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800741e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007420:	4b19      	ldr	r3, [pc, #100]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a18      	ldr	r2, [pc, #96]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800742a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742c:	f7fc fd8a 	bl	8003f44 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007434:	f7fc fd86 	bl	8003f44 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e057      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007446:	4b10      	ldr	r3, [pc, #64]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d0f0      	beq.n	8007434 <HAL_RCC_OscConfig+0x478>
 8007452:	e04f      	b.n	80074f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a0b      	ldr	r2, [pc, #44]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 800745a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800745e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007460:	f7fc fd70 	bl	8003f44 <HAL_GetTick>
 8007464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007466:	e008      	b.n	800747a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007468:	f7fc fd6c 	bl	8003f44 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e03d      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800747a:	4b03      	ldr	r3, [pc, #12]	; (8007488 <HAL_RCC_OscConfig+0x4cc>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f0      	bne.n	8007468 <HAL_RCC_OscConfig+0x4ac>
 8007486:	e035      	b.n	80074f4 <HAL_RCC_OscConfig+0x538>
 8007488:	40023800 	.word	0x40023800
 800748c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007490:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <HAL_RCC_OscConfig+0x544>)
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	2b01      	cmp	r3, #1
 800749c:	d028      	beq.n	80074f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d121      	bne.n	80074f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d11a      	bne.n	80074f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80074c0:	4013      	ands	r3, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d111      	bne.n	80074f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	085b      	lsrs	r3, r3, #1
 80074d8:	3b01      	subs	r3, #1
 80074da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074dc:	429a      	cmp	r2, r3
 80074de:	d107      	bne.n	80074f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d001      	beq.n	80074f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e000      	b.n	80074f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	40023800 	.word	0x40023800

08007504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e0d0      	b.n	80076be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800751c:	4b6a      	ldr	r3, [pc, #424]	; (80076c8 <HAL_RCC_ClockConfig+0x1c4>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 030f 	and.w	r3, r3, #15
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d910      	bls.n	800754c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800752a:	4b67      	ldr	r3, [pc, #412]	; (80076c8 <HAL_RCC_ClockConfig+0x1c4>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f023 020f 	bic.w	r2, r3, #15
 8007532:	4965      	ldr	r1, [pc, #404]	; (80076c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	4313      	orrs	r3, r2
 8007538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800753a:	4b63      	ldr	r3, [pc, #396]	; (80076c8 <HAL_RCC_ClockConfig+0x1c4>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	429a      	cmp	r2, r3
 8007546:	d001      	beq.n	800754c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e0b8      	b.n	80076be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d020      	beq.n	800759a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d005      	beq.n	8007570 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007564:	4b59      	ldr	r3, [pc, #356]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	4a58      	ldr	r2, [pc, #352]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 800756a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800756e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0308 	and.w	r3, r3, #8
 8007578:	2b00      	cmp	r3, #0
 800757a:	d005      	beq.n	8007588 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800757c:	4b53      	ldr	r3, [pc, #332]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	4a52      	ldr	r2, [pc, #328]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 8007582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007586:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007588:	4b50      	ldr	r3, [pc, #320]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	494d      	ldr	r1, [pc, #308]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 8007596:	4313      	orrs	r3, r2
 8007598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d040      	beq.n	8007628 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d107      	bne.n	80075be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075ae:	4b47      	ldr	r3, [pc, #284]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d115      	bne.n	80075e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e07f      	b.n	80076be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d107      	bne.n	80075d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075c6:	4b41      	ldr	r3, [pc, #260]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e073      	b.n	80076be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075d6:	4b3d      	ldr	r3, [pc, #244]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d101      	bne.n	80075e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e06b      	b.n	80076be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075e6:	4b39      	ldr	r3, [pc, #228]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f023 0203 	bic.w	r2, r3, #3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	4936      	ldr	r1, [pc, #216]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075f8:	f7fc fca4 	bl	8003f44 <HAL_GetTick>
 80075fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075fe:	e00a      	b.n	8007616 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007600:	f7fc fca0 	bl	8003f44 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	f241 3288 	movw	r2, #5000	; 0x1388
 800760e:	4293      	cmp	r3, r2
 8007610:	d901      	bls.n	8007616 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e053      	b.n	80076be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007616:	4b2d      	ldr	r3, [pc, #180]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 020c 	and.w	r2, r3, #12
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	429a      	cmp	r2, r3
 8007626:	d1eb      	bne.n	8007600 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007628:	4b27      	ldr	r3, [pc, #156]	; (80076c8 <HAL_RCC_ClockConfig+0x1c4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 030f 	and.w	r3, r3, #15
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	429a      	cmp	r2, r3
 8007634:	d210      	bcs.n	8007658 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007636:	4b24      	ldr	r3, [pc, #144]	; (80076c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f023 020f 	bic.w	r2, r3, #15
 800763e:	4922      	ldr	r1, [pc, #136]	; (80076c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	4313      	orrs	r3, r2
 8007644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007646:	4b20      	ldr	r3, [pc, #128]	; (80076c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 030f 	and.w	r3, r3, #15
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	429a      	cmp	r2, r3
 8007652:	d001      	beq.n	8007658 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e032      	b.n	80076be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d008      	beq.n	8007676 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007664:	4b19      	ldr	r3, [pc, #100]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	4916      	ldr	r1, [pc, #88]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 8007672:	4313      	orrs	r3, r2
 8007674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0308 	and.w	r3, r3, #8
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007682:	4b12      	ldr	r3, [pc, #72]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	490e      	ldr	r1, [pc, #56]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 8007692:	4313      	orrs	r3, r2
 8007694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007696:	f000 f821 	bl	80076dc <HAL_RCC_GetSysClockFreq>
 800769a:	4602      	mov	r2, r0
 800769c:	4b0b      	ldr	r3, [pc, #44]	; (80076cc <HAL_RCC_ClockConfig+0x1c8>)
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	091b      	lsrs	r3, r3, #4
 80076a2:	f003 030f 	and.w	r3, r3, #15
 80076a6:	490a      	ldr	r1, [pc, #40]	; (80076d0 <HAL_RCC_ClockConfig+0x1cc>)
 80076a8:	5ccb      	ldrb	r3, [r1, r3]
 80076aa:	fa22 f303 	lsr.w	r3, r2, r3
 80076ae:	4a09      	ldr	r2, [pc, #36]	; (80076d4 <HAL_RCC_ClockConfig+0x1d0>)
 80076b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80076b2:	4b09      	ldr	r3, [pc, #36]	; (80076d8 <HAL_RCC_ClockConfig+0x1d4>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fc fb38 	bl	8003d2c <HAL_InitTick>

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	40023c00 	.word	0x40023c00
 80076cc:	40023800 	.word	0x40023800
 80076d0:	08032fec 	.word	0x08032fec
 80076d4:	2000003c 	.word	0x2000003c
 80076d8:	20000040 	.word	0x20000040

080076dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076dc:	b5b0      	push	{r4, r5, r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80076e2:	2100      	movs	r1, #0
 80076e4:	6079      	str	r1, [r7, #4]
 80076e6:	2100      	movs	r1, #0
 80076e8:	60f9      	str	r1, [r7, #12]
 80076ea:	2100      	movs	r1, #0
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80076ee:	2100      	movs	r1, #0
 80076f0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076f2:	4952      	ldr	r1, [pc, #328]	; (800783c <HAL_RCC_GetSysClockFreq+0x160>)
 80076f4:	6889      	ldr	r1, [r1, #8]
 80076f6:	f001 010c 	and.w	r1, r1, #12
 80076fa:	2908      	cmp	r1, #8
 80076fc:	d00d      	beq.n	800771a <HAL_RCC_GetSysClockFreq+0x3e>
 80076fe:	2908      	cmp	r1, #8
 8007700:	f200 8094 	bhi.w	800782c <HAL_RCC_GetSysClockFreq+0x150>
 8007704:	2900      	cmp	r1, #0
 8007706:	d002      	beq.n	800770e <HAL_RCC_GetSysClockFreq+0x32>
 8007708:	2904      	cmp	r1, #4
 800770a:	d003      	beq.n	8007714 <HAL_RCC_GetSysClockFreq+0x38>
 800770c:	e08e      	b.n	800782c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800770e:	4b4c      	ldr	r3, [pc, #304]	; (8007840 <HAL_RCC_GetSysClockFreq+0x164>)
 8007710:	60bb      	str	r3, [r7, #8]
      break;
 8007712:	e08e      	b.n	8007832 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007714:	4b4b      	ldr	r3, [pc, #300]	; (8007844 <HAL_RCC_GetSysClockFreq+0x168>)
 8007716:	60bb      	str	r3, [r7, #8]
      break;
 8007718:	e08b      	b.n	8007832 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800771a:	4948      	ldr	r1, [pc, #288]	; (800783c <HAL_RCC_GetSysClockFreq+0x160>)
 800771c:	6849      	ldr	r1, [r1, #4]
 800771e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007722:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007724:	4945      	ldr	r1, [pc, #276]	; (800783c <HAL_RCC_GetSysClockFreq+0x160>)
 8007726:	6849      	ldr	r1, [r1, #4]
 8007728:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800772c:	2900      	cmp	r1, #0
 800772e:	d024      	beq.n	800777a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007730:	4942      	ldr	r1, [pc, #264]	; (800783c <HAL_RCC_GetSysClockFreq+0x160>)
 8007732:	6849      	ldr	r1, [r1, #4]
 8007734:	0989      	lsrs	r1, r1, #6
 8007736:	4608      	mov	r0, r1
 8007738:	f04f 0100 	mov.w	r1, #0
 800773c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007740:	f04f 0500 	mov.w	r5, #0
 8007744:	ea00 0204 	and.w	r2, r0, r4
 8007748:	ea01 0305 	and.w	r3, r1, r5
 800774c:	493d      	ldr	r1, [pc, #244]	; (8007844 <HAL_RCC_GetSysClockFreq+0x168>)
 800774e:	fb01 f003 	mul.w	r0, r1, r3
 8007752:	2100      	movs	r1, #0
 8007754:	fb01 f102 	mul.w	r1, r1, r2
 8007758:	1844      	adds	r4, r0, r1
 800775a:	493a      	ldr	r1, [pc, #232]	; (8007844 <HAL_RCC_GetSysClockFreq+0x168>)
 800775c:	fba2 0101 	umull	r0, r1, r2, r1
 8007760:	1863      	adds	r3, r4, r1
 8007762:	4619      	mov	r1, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	461a      	mov	r2, r3
 8007768:	f04f 0300 	mov.w	r3, #0
 800776c:	f7f8 fd50 	bl	8000210 <__aeabi_uldivmod>
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4613      	mov	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	e04a      	b.n	8007810 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800777a:	4b30      	ldr	r3, [pc, #192]	; (800783c <HAL_RCC_GetSysClockFreq+0x160>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	099b      	lsrs	r3, r3, #6
 8007780:	461a      	mov	r2, r3
 8007782:	f04f 0300 	mov.w	r3, #0
 8007786:	f240 10ff 	movw	r0, #511	; 0x1ff
 800778a:	f04f 0100 	mov.w	r1, #0
 800778e:	ea02 0400 	and.w	r4, r2, r0
 8007792:	ea03 0501 	and.w	r5, r3, r1
 8007796:	4620      	mov	r0, r4
 8007798:	4629      	mov	r1, r5
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	f04f 0300 	mov.w	r3, #0
 80077a2:	014b      	lsls	r3, r1, #5
 80077a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80077a8:	0142      	lsls	r2, r0, #5
 80077aa:	4610      	mov	r0, r2
 80077ac:	4619      	mov	r1, r3
 80077ae:	1b00      	subs	r0, r0, r4
 80077b0:	eb61 0105 	sbc.w	r1, r1, r5
 80077b4:	f04f 0200 	mov.w	r2, #0
 80077b8:	f04f 0300 	mov.w	r3, #0
 80077bc:	018b      	lsls	r3, r1, #6
 80077be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80077c2:	0182      	lsls	r2, r0, #6
 80077c4:	1a12      	subs	r2, r2, r0
 80077c6:	eb63 0301 	sbc.w	r3, r3, r1
 80077ca:	f04f 0000 	mov.w	r0, #0
 80077ce:	f04f 0100 	mov.w	r1, #0
 80077d2:	00d9      	lsls	r1, r3, #3
 80077d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077d8:	00d0      	lsls	r0, r2, #3
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	1912      	adds	r2, r2, r4
 80077e0:	eb45 0303 	adc.w	r3, r5, r3
 80077e4:	f04f 0000 	mov.w	r0, #0
 80077e8:	f04f 0100 	mov.w	r1, #0
 80077ec:	0299      	lsls	r1, r3, #10
 80077ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80077f2:	0290      	lsls	r0, r2, #10
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4610      	mov	r0, r2
 80077fa:	4619      	mov	r1, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	461a      	mov	r2, r3
 8007800:	f04f 0300 	mov.w	r3, #0
 8007804:	f7f8 fd04 	bl	8000210 <__aeabi_uldivmod>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4613      	mov	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007810:	4b0a      	ldr	r3, [pc, #40]	; (800783c <HAL_RCC_GetSysClockFreq+0x160>)
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	0c1b      	lsrs	r3, r3, #16
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	3301      	adds	r3, #1
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	fbb2 f3f3 	udiv	r3, r2, r3
 8007828:	60bb      	str	r3, [r7, #8]
      break;
 800782a:	e002      	b.n	8007832 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800782c:	4b04      	ldr	r3, [pc, #16]	; (8007840 <HAL_RCC_GetSysClockFreq+0x164>)
 800782e:	60bb      	str	r3, [r7, #8]
      break;
 8007830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007832:	68bb      	ldr	r3, [r7, #8]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bdb0      	pop	{r4, r5, r7, pc}
 800783c:	40023800 	.word	0x40023800
 8007840:	00f42400 	.word	0x00f42400
 8007844:	017d7840 	.word	0x017d7840

08007848 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800784c:	4b03      	ldr	r3, [pc, #12]	; (800785c <HAL_RCC_GetHCLKFreq+0x14>)
 800784e:	681b      	ldr	r3, [r3, #0]
}
 8007850:	4618      	mov	r0, r3
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	2000003c 	.word	0x2000003c

08007860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007864:	f7ff fff0 	bl	8007848 <HAL_RCC_GetHCLKFreq>
 8007868:	4602      	mov	r2, r0
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	0a9b      	lsrs	r3, r3, #10
 8007870:	f003 0307 	and.w	r3, r3, #7
 8007874:	4903      	ldr	r1, [pc, #12]	; (8007884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007876:	5ccb      	ldrb	r3, [r1, r3]
 8007878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800787c:	4618      	mov	r0, r3
 800787e:	bd80      	pop	{r7, pc}
 8007880:	40023800 	.word	0x40023800
 8007884:	08032ffc 	.word	0x08032ffc

08007888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800788c:	f7ff ffdc 	bl	8007848 <HAL_RCC_GetHCLKFreq>
 8007890:	4602      	mov	r2, r0
 8007892:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	0b5b      	lsrs	r3, r3, #13
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	4903      	ldr	r1, [pc, #12]	; (80078ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800789e:	5ccb      	ldrb	r3, [r1, r3]
 80078a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	40023800 	.word	0x40023800
 80078ac:	08032ffc 	.word	0x08032ffc

080078b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	220f      	movs	r2, #15
 80078be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80078c0:	4b12      	ldr	r3, [pc, #72]	; (800790c <HAL_RCC_GetClockConfig+0x5c>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 0203 	and.w	r2, r3, #3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80078cc:	4b0f      	ldr	r3, [pc, #60]	; (800790c <HAL_RCC_GetClockConfig+0x5c>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80078d8:	4b0c      	ldr	r3, [pc, #48]	; (800790c <HAL_RCC_GetClockConfig+0x5c>)
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80078e4:	4b09      	ldr	r3, [pc, #36]	; (800790c <HAL_RCC_GetClockConfig+0x5c>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	08db      	lsrs	r3, r3, #3
 80078ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80078f2:	4b07      	ldr	r3, [pc, #28]	; (8007910 <HAL_RCC_GetClockConfig+0x60>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 020f 	and.w	r2, r3, #15
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	601a      	str	r2, [r3, #0]
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	40023800 	.word	0x40023800
 8007910:	40023c00 	.word	0x40023c00

08007914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b088      	sub	sp, #32
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800791c:	2300      	movs	r3, #0
 800791e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	2b00      	cmp	r3, #0
 800793a:	d012      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800793c:	4b69      	ldr	r3, [pc, #420]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	4a68      	ldr	r2, [pc, #416]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007942:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007946:	6093      	str	r3, [r2, #8]
 8007948:	4b66      	ldr	r3, [pc, #408]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007950:	4964      	ldr	r1, [pc, #400]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007952:	4313      	orrs	r3, r2
 8007954:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800795e:	2301      	movs	r3, #1
 8007960:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d017      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800796e:	4b5d      	ldr	r3, [pc, #372]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007974:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797c:	4959      	ldr	r1, [pc, #356]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800797e:	4313      	orrs	r3, r2
 8007980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007988:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800798c:	d101      	bne.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800798e:	2301      	movs	r3, #1
 8007990:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800799a:	2301      	movs	r3, #1
 800799c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d017      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80079aa:	4b4e      	ldr	r3, [pc, #312]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b8:	494a      	ldr	r1, [pc, #296]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079c8:	d101      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80079ca:	2301      	movs	r3, #1
 80079cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80079d6:	2301      	movs	r3, #1
 80079d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80079e6:	2301      	movs	r3, #1
 80079e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0320 	and.w	r3, r3, #32
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	f000 808b 	beq.w	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079f8:	4b3a      	ldr	r3, [pc, #232]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fc:	4a39      	ldr	r2, [pc, #228]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a02:	6413      	str	r3, [r2, #64]	; 0x40
 8007a04:	4b37      	ldr	r3, [pc, #220]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a0c:	60bb      	str	r3, [r7, #8]
 8007a0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a10:	4b35      	ldr	r3, [pc, #212]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a34      	ldr	r2, [pc, #208]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a1c:	f7fc fa92 	bl	8003f44 <HAL_GetTick>
 8007a20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a22:	e008      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a24:	f7fc fa8e 	bl	8003f44 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b64      	cmp	r3, #100	; 0x64
 8007a30:	d901      	bls.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e357      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007a36:	4b2c      	ldr	r3, [pc, #176]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0f0      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a42:	4b28      	ldr	r3, [pc, #160]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d035      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d02e      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a60:	4b20      	ldr	r3, [pc, #128]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a6a:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a76:	4b1b      	ldr	r3, [pc, #108]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007a82:	4a18      	ldr	r2, [pc, #96]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a88:	4b16      	ldr	r3, [pc, #88]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d114      	bne.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a94:	f7fc fa56 	bl	8003f44 <HAL_GetTick>
 8007a98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a9a:	e00a      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a9c:	f7fc fa52 	bl	8003f44 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d901      	bls.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e319      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ab2:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0ee      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aca:	d111      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007acc:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ad8:	4b04      	ldr	r3, [pc, #16]	; (8007aec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007ada:	400b      	ands	r3, r1
 8007adc:	4901      	ldr	r1, [pc, #4]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	608b      	str	r3, [r1, #8]
 8007ae2:	e00b      	b.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007ae4:	40023800 	.word	0x40023800
 8007ae8:	40007000 	.word	0x40007000
 8007aec:	0ffffcff 	.word	0x0ffffcff
 8007af0:	4bb1      	ldr	r3, [pc, #708]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	4ab0      	ldr	r2, [pc, #704]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007af6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007afa:	6093      	str	r3, [r2, #8]
 8007afc:	4bae      	ldr	r3, [pc, #696]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007afe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b08:	49ab      	ldr	r1, [pc, #684]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0310 	and.w	r3, r3, #16
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d010      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b1a:	4ba7      	ldr	r3, [pc, #668]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b20:	4aa5      	ldr	r2, [pc, #660]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007b2a:	4ba3      	ldr	r3, [pc, #652]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	49a0      	ldr	r1, [pc, #640]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007b48:	4b9b      	ldr	r3, [pc, #620]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b56:	4998      	ldr	r1, [pc, #608]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007b6a:	4b93      	ldr	r3, [pc, #588]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b78:	498f      	ldr	r1, [pc, #572]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b8c:	4b8a      	ldr	r3, [pc, #552]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b9a:	4987      	ldr	r1, [pc, #540]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bae:	4b82      	ldr	r3, [pc, #520]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bbc:	497e      	ldr	r1, [pc, #504]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00a      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007bd0:	4b79      	ldr	r3, [pc, #484]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd6:	f023 0203 	bic.w	r2, r3, #3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bde:	4976      	ldr	r1, [pc, #472]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d00a      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bf2:	4b71      	ldr	r3, [pc, #452]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf8:	f023 020c 	bic.w	r2, r3, #12
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c00:	496d      	ldr	r1, [pc, #436]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00a      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c14:	4b68      	ldr	r3, [pc, #416]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c22:	4965      	ldr	r1, [pc, #404]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00a      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c36:	4b60      	ldr	r3, [pc, #384]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c44:	495c      	ldr	r1, [pc, #368]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c46:	4313      	orrs	r3, r2
 8007c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c58:	4b57      	ldr	r3, [pc, #348]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c66:	4954      	ldr	r1, [pc, #336]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c7a:	4b4f      	ldr	r3, [pc, #316]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c88:	494b      	ldr	r1, [pc, #300]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c9c:	4b46      	ldr	r3, [pc, #280]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007caa:	4943      	ldr	r1, [pc, #268]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007cbe:	4b3e      	ldr	r3, [pc, #248]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ccc:	493a      	ldr	r1, [pc, #232]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00a      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ce0:	4b35      	ldr	r3, [pc, #212]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cee:	4932      	ldr	r1, [pc, #200]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d011      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d02:	4b2d      	ldr	r3, [pc, #180]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d10:	4929      	ldr	r1, [pc, #164]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d20:	d101      	bne.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007d22:	2301      	movs	r3, #1
 8007d24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0308 	and.w	r3, r3, #8
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007d32:	2301      	movs	r3, #1
 8007d34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d42:	4b1d      	ldr	r3, [pc, #116]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d50:	4919      	ldr	r1, [pc, #100]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d64:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d74:	4910      	ldr	r1, [pc, #64]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d76:	4313      	orrs	r3, r2
 8007d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d006      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 80d9 	beq.w	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d90:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a08      	ldr	r2, [pc, #32]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007d96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d9c:	f7fc f8d2 	bl	8003f44 <HAL_GetTick>
 8007da0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007da2:	e00b      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007da4:	f7fc f8ce 	bl	8003f44 <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b64      	cmp	r3, #100	; 0x64
 8007db0:	d904      	bls.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e197      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007db6:	bf00      	nop
 8007db8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007dbc:	4b6c      	ldr	r3, [pc, #432]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1ed      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d021      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d11d      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ddc:	4b64      	ldr	r3, [pc, #400]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007de2:	0c1b      	lsrs	r3, r3, #16
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007dea:	4b61      	ldr	r3, [pc, #388]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007df0:	0e1b      	lsrs	r3, r3, #24
 8007df2:	f003 030f 	and.w	r3, r3, #15
 8007df6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	019a      	lsls	r2, r3, #6
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	041b      	lsls	r3, r3, #16
 8007e02:	431a      	orrs	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	061b      	lsls	r3, r3, #24
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	071b      	lsls	r3, r3, #28
 8007e10:	4957      	ldr	r1, [pc, #348]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d004      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e2c:	d00a      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d02e      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e42:	d129      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e44:	4b4a      	ldr	r3, [pc, #296]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e4a:	0c1b      	lsrs	r3, r3, #16
 8007e4c:	f003 0303 	and.w	r3, r3, #3
 8007e50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e52:	4b47      	ldr	r3, [pc, #284]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e58:	0f1b      	lsrs	r3, r3, #28
 8007e5a:	f003 0307 	and.w	r3, r3, #7
 8007e5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	019a      	lsls	r2, r3, #6
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	041b      	lsls	r3, r3, #16
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	061b      	lsls	r3, r3, #24
 8007e72:	431a      	orrs	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	071b      	lsls	r3, r3, #28
 8007e78:	493d      	ldr	r1, [pc, #244]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007e80:	4b3b      	ldr	r3, [pc, #236]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e86:	f023 021f 	bic.w	r2, r3, #31
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	4937      	ldr	r1, [pc, #220]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e92:	4313      	orrs	r3, r2
 8007e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01d      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007ea4:	4b32      	ldr	r3, [pc, #200]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eaa:	0e1b      	lsrs	r3, r3, #24
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007eb2:	4b2f      	ldr	r3, [pc, #188]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb8:	0f1b      	lsrs	r3, r3, #28
 8007eba:	f003 0307 	and.w	r3, r3, #7
 8007ebe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	019a      	lsls	r2, r3, #6
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	041b      	lsls	r3, r3, #16
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	061b      	lsls	r3, r3, #24
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	071b      	lsls	r3, r3, #28
 8007ed8:	4925      	ldr	r1, [pc, #148]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d011      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	019a      	lsls	r2, r3, #6
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	041b      	lsls	r3, r3, #16
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	061b      	lsls	r3, r3, #24
 8007f00:	431a      	orrs	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	071b      	lsls	r3, r3, #28
 8007f08:	4919      	ldr	r1, [pc, #100]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f10:	4b17      	ldr	r3, [pc, #92]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a16      	ldr	r2, [pc, #88]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f1c:	f7fc f812 	bl	8003f44 <HAL_GetTick>
 8007f20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f22:	e008      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f24:	f7fc f80e 	bl	8003f44 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	2b64      	cmp	r3, #100	; 0x64
 8007f30:	d901      	bls.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e0d7      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f36:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0f0      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	f040 80cd 	bne.w	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a08      	ldr	r2, [pc, #32]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f56:	f7fb fff5 	bl	8003f44 <HAL_GetTick>
 8007f5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f5c:	e00a      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f5e:	f7fb fff1 	bl	8003f44 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	2b64      	cmp	r3, #100	; 0x64
 8007f6a:	d903      	bls.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e0ba      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007f70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f74:	4b5e      	ldr	r3, [pc, #376]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f80:	d0ed      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d009      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d02e      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d12a      	bne.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007faa:	4b51      	ldr	r3, [pc, #324]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb0:	0c1b      	lsrs	r3, r3, #16
 8007fb2:	f003 0303 	and.w	r3, r3, #3
 8007fb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007fb8:	4b4d      	ldr	r3, [pc, #308]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fbe:	0f1b      	lsrs	r3, r3, #28
 8007fc0:	f003 0307 	and.w	r3, r3, #7
 8007fc4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	019a      	lsls	r2, r3, #6
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	041b      	lsls	r3, r3, #16
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	061b      	lsls	r3, r3, #24
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	071b      	lsls	r3, r3, #28
 8007fde:	4944      	ldr	r1, [pc, #272]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007fe6:	4b42      	ldr	r3, [pc, #264]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	021b      	lsls	r3, r3, #8
 8007ff8:	493d      	ldr	r1, [pc, #244]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d022      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008014:	d11d      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008016:	4b36      	ldr	r3, [pc, #216]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800801c:	0e1b      	lsrs	r3, r3, #24
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008024:	4b32      	ldr	r3, [pc, #200]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800802a:	0f1b      	lsrs	r3, r3, #28
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	019a      	lsls	r2, r3, #6
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	041b      	lsls	r3, r3, #16
 800803e:	431a      	orrs	r2, r3
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	061b      	lsls	r3, r3, #24
 8008044:	431a      	orrs	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	071b      	lsls	r3, r3, #28
 800804a:	4929      	ldr	r1, [pc, #164]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800804c:	4313      	orrs	r3, r2
 800804e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0308 	and.w	r3, r3, #8
 800805a:	2b00      	cmp	r3, #0
 800805c:	d028      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800805e:	4b24      	ldr	r3, [pc, #144]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008064:	0e1b      	lsrs	r3, r3, #24
 8008066:	f003 030f 	and.w	r3, r3, #15
 800806a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800806c:	4b20      	ldr	r3, [pc, #128]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800806e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008072:	0c1b      	lsrs	r3, r3, #16
 8008074:	f003 0303 	and.w	r3, r3, #3
 8008078:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	019a      	lsls	r2, r3, #6
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	041b      	lsls	r3, r3, #16
 8008084:	431a      	orrs	r2, r3
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	061b      	lsls	r3, r3, #24
 800808a:	431a      	orrs	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	69db      	ldr	r3, [r3, #28]
 8008090:	071b      	lsls	r3, r3, #28
 8008092:	4917      	ldr	r1, [pc, #92]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008094:	4313      	orrs	r3, r2
 8008096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800809a:	4b15      	ldr	r3, [pc, #84]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800809c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	4911      	ldr	r1, [pc, #68]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80080b0:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a0e      	ldr	r2, [pc, #56]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080bc:	f7fb ff42 	bl	8003f44 <HAL_GetTick>
 80080c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080c2:	e008      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080c4:	f7fb ff3e 	bl	8003f44 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b64      	cmp	r3, #100	; 0x64
 80080d0:	d901      	bls.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e007      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080d6:	4b06      	ldr	r3, [pc, #24]	; (80080f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080e2:	d1ef      	bne.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3720      	adds	r7, #32
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	40023800 	.word	0x40023800

080080f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d101      	bne.n	8008106 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e081      	b.n	800820a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	7f5b      	ldrb	r3, [r3, #29]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d105      	bne.n	800811c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7fb fb34 	bl	8003784 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2202      	movs	r2, #2
 8008120:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	22ca      	movs	r2, #202	; 0xca
 8008128:	625a      	str	r2, [r3, #36]	; 0x24
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2253      	movs	r2, #83	; 0x53
 8008130:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fb16 	bl	8008764 <RTC_EnterInitMode>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d008      	beq.n	8008150 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	22ff      	movs	r2, #255	; 0xff
 8008144:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2204      	movs	r2, #4
 800814a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e05c      	b.n	800820a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6899      	ldr	r1, [r3, #8]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4b2e      	ldr	r3, [pc, #184]	; (8008214 <HAL_RTC_Init+0x120>)
 800815c:	400b      	ands	r3, r1
 800815e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6899      	ldr	r1, [r3, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	68d2      	ldr	r2, [r2, #12]
 8008186:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6919      	ldr	r1, [r3, #16]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	041a      	lsls	r2, r3, #16
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	430a      	orrs	r2, r1
 800819a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081aa:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f003 0320 	and.w	r3, r3, #32
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10e      	bne.n	80081d8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 faaa 	bl	8008714 <HAL_RTC_WaitForSynchro>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d008      	beq.n	80081d8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	22ff      	movs	r2, #255	; 0xff
 80081cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2204      	movs	r2, #4
 80081d2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e018      	b.n	800820a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 0208 	bic.w	r2, r2, #8
 80081e6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699a      	ldr	r2, [r3, #24]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	22ff      	movs	r2, #255	; 0xff
 8008200:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008208:	2300      	movs	r3, #0
  }
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	ff8fffbf 	.word	0xff8fffbf

08008218 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008218:	b590      	push	{r4, r7, lr}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	7f1b      	ldrb	r3, [r3, #28]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d101      	bne.n	8008234 <HAL_RTC_SetTime+0x1c>
 8008230:	2302      	movs	r3, #2
 8008232:	e0a8      	b.n	8008386 <HAL_RTC_SetTime+0x16e>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2201      	movs	r2, #1
 8008238:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2202      	movs	r2, #2
 800823e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d126      	bne.n	8008294 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2200      	movs	r2, #0
 8008258:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	4618      	mov	r0, r3
 8008260:	f000 faac 	bl	80087bc <RTC_ByteToBcd2>
 8008264:	4603      	mov	r3, r0
 8008266:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	785b      	ldrb	r3, [r3, #1]
 800826c:	4618      	mov	r0, r3
 800826e:	f000 faa5 	bl	80087bc <RTC_ByteToBcd2>
 8008272:	4603      	mov	r3, r0
 8008274:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008276:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	789b      	ldrb	r3, [r3, #2]
 800827c:	4618      	mov	r0, r3
 800827e:	f000 fa9d 	bl	80087bc <RTC_ByteToBcd2>
 8008282:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008284:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	7b1b      	ldrb	r3, [r3, #12]
 800828c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800828e:	4313      	orrs	r3, r2
 8008290:	617b      	str	r3, [r7, #20]
 8008292:	e018      	b.n	80082c6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d102      	bne.n	80082a8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2200      	movs	r2, #0
 80082a6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	785b      	ldrb	r3, [r3, #1]
 80082b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082b4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80082ba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	7b1b      	ldrb	r3, [r3, #12]
 80082c0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082c2:	4313      	orrs	r3, r2
 80082c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	22ca      	movs	r2, #202	; 0xca
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2253      	movs	r2, #83	; 0x53
 80082d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 fa44 	bl	8008764 <RTC_EnterInitMode>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00b      	beq.n	80082fa <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	22ff      	movs	r2, #255	; 0xff
 80082e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2204      	movs	r2, #4
 80082ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e045      	b.n	8008386 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	6979      	ldr	r1, [r7, #20]
 8008300:	4b23      	ldr	r3, [pc, #140]	; (8008390 <HAL_RTC_SetTime+0x178>)
 8008302:	400b      	ands	r3, r1
 8008304:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008314:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6899      	ldr	r1, [r3, #8]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	691a      	ldr	r2, [r3, #16]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	431a      	orrs	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68da      	ldr	r2, [r3, #12]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800833c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b00      	cmp	r3, #0
 800834a:	d111      	bne.n	8008370 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 f9e1 	bl	8008714 <HAL_RTC_WaitForSynchro>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00b      	beq.n	8008370 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	22ff      	movs	r2, #255	; 0xff
 800835e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2204      	movs	r2, #4
 8008364:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e00a      	b.n	8008386 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	22ff      	movs	r2, #255	; 0xff
 8008376:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2201      	movs	r2, #1
 800837c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2200      	movs	r2, #0
 8008382:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008384:	2300      	movs	r3, #0
  }
}
 8008386:	4618      	mov	r0, r3
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	bd90      	pop	{r4, r7, pc}
 800838e:	bf00      	nop
 8008390:	007f7f7f 	.word	0x007f7f7f

08008394 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008394:	b590      	push	{r4, r7, lr}
 8008396:	b087      	sub	sp, #28
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	7f1b      	ldrb	r3, [r3, #28]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_RTC_SetDate+0x1c>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e092      	b.n	80084d6 <HAL_RTC_SetDate+0x142>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2202      	movs	r2, #2
 80083ba:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10e      	bne.n	80083e0 <HAL_RTC_SetDate+0x4c>
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	785b      	ldrb	r3, [r3, #1]
 80083c6:	f003 0310 	and.w	r3, r3, #16
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d008      	beq.n	80083e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	785b      	ldrb	r3, [r3, #1]
 80083d2:	f023 0310 	bic.w	r3, r3, #16
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	330a      	adds	r3, #10
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d11c      	bne.n	8008420 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	78db      	ldrb	r3, [r3, #3]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f9e6 	bl	80087bc <RTC_ByteToBcd2>
 80083f0:	4603      	mov	r3, r0
 80083f2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	785b      	ldrb	r3, [r3, #1]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 f9df 	bl	80087bc <RTC_ByteToBcd2>
 80083fe:	4603      	mov	r3, r0
 8008400:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008402:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	789b      	ldrb	r3, [r3, #2]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 f9d7 	bl	80087bc <RTC_ByteToBcd2>
 800840e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008410:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800841a:	4313      	orrs	r3, r2
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	e00e      	b.n	800843e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	78db      	ldrb	r3, [r3, #3]
 8008424:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	785b      	ldrb	r3, [r3, #1]
 800842a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800842c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008432:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800843a:	4313      	orrs	r3, r2
 800843c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	22ca      	movs	r2, #202	; 0xca
 8008444:	625a      	str	r2, [r3, #36]	; 0x24
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2253      	movs	r2, #83	; 0x53
 800844c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f000 f988 	bl	8008764 <RTC_EnterInitMode>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00b      	beq.n	8008472 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	22ff      	movs	r2, #255	; 0xff
 8008460:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2204      	movs	r2, #4
 8008466:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e031      	b.n	80084d6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	6979      	ldr	r1, [r7, #20]
 8008478:	4b19      	ldr	r3, [pc, #100]	; (80084e0 <HAL_RTC_SetDate+0x14c>)
 800847a:	400b      	ands	r3, r1
 800847c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800848c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b00      	cmp	r3, #0
 800849a:	d111      	bne.n	80084c0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 f939 	bl	8008714 <HAL_RTC_WaitForSynchro>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	22ff      	movs	r2, #255	; 0xff
 80084ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2204      	movs	r2, #4
 80084b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e00a      	b.n	80084d6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	22ff      	movs	r2, #255	; 0xff
 80084c6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2201      	movs	r2, #1
 80084cc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80084d4:	2300      	movs	r3, #0
  }
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd90      	pop	{r4, r7, pc}
 80084de:	bf00      	nop
 80084e0:	00ffff3f 	.word	0x00ffff3f

080084e4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80084e4:	b590      	push	{r4, r7, lr}
 80084e6:	b089      	sub	sp, #36	; 0x24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80084f0:	2300      	movs	r3, #0
 80084f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	61fb      	str	r3, [r7, #28]
 80084f8:	2300      	movs	r3, #0
 80084fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	7f1b      	ldrb	r3, [r3, #28]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d101      	bne.n	8008508 <HAL_RTC_SetAlarm+0x24>
 8008504:	2302      	movs	r3, #2
 8008506:	e101      	b.n	800870c <HAL_RTC_SetAlarm+0x228>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2201      	movs	r2, #1
 800850c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2202      	movs	r2, #2
 8008512:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d137      	bne.n	800858a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2200      	movs	r2, #0
 800852c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	4618      	mov	r0, r3
 8008534:	f000 f942 	bl	80087bc <RTC_ByteToBcd2>
 8008538:	4603      	mov	r3, r0
 800853a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	785b      	ldrb	r3, [r3, #1]
 8008540:	4618      	mov	r0, r3
 8008542:	f000 f93b 	bl	80087bc <RTC_ByteToBcd2>
 8008546:	4603      	mov	r3, r0
 8008548:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800854a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	789b      	ldrb	r3, [r3, #2]
 8008550:	4618      	mov	r0, r3
 8008552:	f000 f933 	bl	80087bc <RTC_ByteToBcd2>
 8008556:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008558:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	7b1b      	ldrb	r3, [r3, #12]
 8008560:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008562:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800856c:	4618      	mov	r0, r3
 800856e:	f000 f925 	bl	80087bc <RTC_ByteToBcd2>
 8008572:	4603      	mov	r3, r0
 8008574:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008576:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800857e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008584:	4313      	orrs	r3, r2
 8008586:	61fb      	str	r3, [r7, #28]
 8008588:	e023      	b.n	80085d2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	2200      	movs	r2, #0
 800859c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	785b      	ldrb	r3, [r3, #1]
 80085a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80085aa:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80085ac:	68ba      	ldr	r2, [r7, #8]
 80085ae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80085b0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	7b1b      	ldrb	r3, [r3, #12]
 80085b6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80085b8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085c0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80085c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80085c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80085ce:	4313      	orrs	r3, r2
 80085d0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	69db      	ldr	r3, [r3, #28]
 80085da:	4313      	orrs	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	22ca      	movs	r2, #202	; 0xca
 80085e4:	625a      	str	r2, [r3, #36]	; 0x24
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2253      	movs	r2, #83	; 0x53
 80085ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085f6:	d13f      	bne.n	8008678 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	689a      	ldr	r2, [r3, #8]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008606:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689a      	ldr	r2, [r3, #8]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008616:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008618:	f7fb fc94 	bl	8003f44 <HAL_GetTick>
 800861c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800861e:	e013      	b.n	8008648 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008620:	f7fb fc90 	bl	8003f44 <HAL_GetTick>
 8008624:	4602      	mov	r2, r0
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800862e:	d90b      	bls.n	8008648 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	22ff      	movs	r2, #255	; 0xff
 8008636:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2203      	movs	r2, #3
 800863c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e061      	b.n	800870c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0e4      	beq.n	8008620 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689a      	ldr	r2, [r3, #8]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008674:	609a      	str	r2, [r3, #8]
 8008676:	e03e      	b.n	80086f6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689a      	ldr	r2, [r3, #8]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008686:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689a      	ldr	r2, [r3, #8]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008696:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008698:	f7fb fc54 	bl	8003f44 <HAL_GetTick>
 800869c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800869e:	e013      	b.n	80086c8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80086a0:	f7fb fc50 	bl	8003f44 <HAL_GetTick>
 80086a4:	4602      	mov	r2, r0
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086ae:	d90b      	bls.n	80086c8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	22ff      	movs	r2, #255	; 0xff
 80086b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2203      	movs	r2, #3
 80086bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2200      	movs	r2, #0
 80086c2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e021      	b.n	800870c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0e4      	beq.n	80086a0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	69fa      	ldr	r2, [r7, #28]
 80086dc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	22ff      	movs	r2, #255	; 0xff
 80086fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2201      	movs	r2, #1
 8008702:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3724      	adds	r7, #36	; 0x24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd90      	pop	{r4, r7, pc}

08008714 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800871c:	2300      	movs	r3, #0
 800871e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800872e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008730:	f7fb fc08 	bl	8003f44 <HAL_GetTick>
 8008734:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008736:	e009      	b.n	800874c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008738:	f7fb fc04 	bl	8003f44 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008746:	d901      	bls.n	800874c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e007      	b.n	800875c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	f003 0320 	and.w	r3, r3, #32
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0ee      	beq.n	8008738 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877a:	2b00      	cmp	r3, #0
 800877c:	d119      	bne.n	80087b2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f04f 32ff 	mov.w	r2, #4294967295
 8008786:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008788:	f7fb fbdc 	bl	8003f44 <HAL_GetTick>
 800878c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800878e:	e009      	b.n	80087a4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008790:	f7fb fbd8 	bl	8003f44 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800879e:	d901      	bls.n	80087a4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e007      	b.n	80087b4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0ee      	beq.n	8008790 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80087c6:	2300      	movs	r3, #0
 80087c8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80087ca:	e005      	b.n	80087d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3301      	adds	r3, #1
 80087d0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	3b0a      	subs	r3, #10
 80087d6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80087d8:	79fb      	ldrb	r3, [r7, #7]
 80087da:	2b09      	cmp	r3, #9
 80087dc:	d8f6      	bhi.n	80087cc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	011b      	lsls	r3, r3, #4
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	79fb      	ldrb	r3, [r7, #7]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	b2db      	uxtb	r3, r3
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	7f1b      	ldrb	r3, [r3, #28]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d101      	bne.n	8008814 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008810:	2302      	movs	r3, #2
 8008812:	e03e      	b.n	8008892 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2201      	movs	r2, #1
 8008818:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2202      	movs	r2, #2
 800881e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689a      	ldr	r2, [r3, #8]
 8008826:	4b1e      	ldr	r3, [pc, #120]	; (80088a0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008828:	4013      	ands	r3, r2
 800882a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	4313      	orrs	r3, r2
 8008832:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	22ca      	movs	r2, #202	; 0xca
 800883a:	625a      	str	r2, [r3, #36]	; 0x24
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2253      	movs	r2, #83	; 0x53
 8008842:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0206 	bic.w	r2, r2, #6
 8008852:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	430a      	orrs	r2, r1
 8008862:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	697a      	ldr	r2, [r7, #20]
 800886a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689a      	ldr	r2, [r3, #8]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800887a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	22ff      	movs	r2, #255	; 0xff
 8008882:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	371c      	adds	r7, #28
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	fffff7f7 	.word	0xfffff7f7

080088a4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e025      	b.n	8008904 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d106      	bne.n	80088d2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7fb fa23 	bl	8003d18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2202      	movs	r2, #2
 80088d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f001 fdb7 	bl	800a458 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	461a      	mov	r2, r3
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	f001 fe0b 	bl	800a510 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800891e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008920:	7dfb      	ldrb	r3, [r7, #23]
 8008922:	2b02      	cmp	r3, #2
 8008924:	d101      	bne.n	800892a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008926:	2302      	movs	r3, #2
 8008928:	e021      	b.n	800896e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800892a:	7dfb      	ldrb	r3, [r7, #23]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d002      	beq.n	8008936 <HAL_SDRAM_SendCommand+0x2a>
 8008930:	7dfb      	ldrb	r3, [r7, #23]
 8008932:	2b05      	cmp	r3, #5
 8008934:	d118      	bne.n	8008968 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2202      	movs	r2, #2
 800893a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	68b9      	ldr	r1, [r7, #8]
 8008946:	4618      	mov	r0, r3
 8008948:	f001 fe4c 	bl	800a5e4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d104      	bne.n	800895e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2205      	movs	r2, #5
 8008958:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800895c:	e006      	b.n	800896c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008966:	e001      	b.n	800896c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e000      	b.n	800896e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b082      	sub	sp, #8
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b02      	cmp	r3, #2
 800898a:	d101      	bne.n	8008990 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800898c:	2302      	movs	r3, #2
 800898e:	e016      	b.n	80089be <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b01      	cmp	r3, #1
 800899a:	d10f      	bne.n	80089bc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6839      	ldr	r1, [r7, #0]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f001 fe3e 	bl	800a62c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	e000      	b.n	80089be <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e09d      	b.n	8008b14 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d108      	bne.n	80089f2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089e8:	d009      	beq.n	80089fe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	61da      	str	r2, [r3, #28]
 80089f0:	e005      	b.n	80089fe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d106      	bne.n	8008a1e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7fa fee1 	bl	80037e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2202      	movs	r2, #2
 8008a22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a34:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a3e:	d902      	bls.n	8008a46 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a40:	2300      	movs	r3, #0
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	e002      	b.n	8008a4c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a4a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008a54:	d007      	beq.n	8008a66 <HAL_SPI_Init+0xa0>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a5e:	d002      	beq.n	8008a66 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a76:	431a      	orrs	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	f003 0302 	and.w	r3, r3, #2
 8008a80:	431a      	orrs	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a94:	431a      	orrs	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	69db      	ldr	r3, [r3, #28]
 8008a9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a1b      	ldr	r3, [r3, #32]
 8008aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa8:	ea42 0103 	orr.w	r1, r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	699b      	ldr	r3, [r3, #24]
 8008ac0:	0c1b      	lsrs	r3, r3, #16
 8008ac2:	f003 0204 	and.w	r2, r3, #4
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aca:	f003 0310 	and.w	r3, r3, #16
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad4:	f003 0308 	and.w	r3, r3, #8
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ae2:	ea42 0103 	orr.w	r1, r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	430a      	orrs	r2, r1
 8008af2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	69da      	ldr	r2, [r3, #28]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e049      	b.n	8008bc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d106      	bne.n	8008b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f7fa feae 	bl	80038a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4619      	mov	r1, r3
 8008b5a:	4610      	mov	r0, r2
 8008b5c:	f000 fac0 	bl	80090e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d001      	beq.n	8008be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e054      	b.n	8008c8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68da      	ldr	r2, [r3, #12]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f042 0201 	orr.w	r2, r2, #1
 8008bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a26      	ldr	r2, [pc, #152]	; (8008c9c <HAL_TIM_Base_Start_IT+0xd0>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d022      	beq.n	8008c4c <HAL_TIM_Base_Start_IT+0x80>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c0e:	d01d      	beq.n	8008c4c <HAL_TIM_Base_Start_IT+0x80>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a22      	ldr	r2, [pc, #136]	; (8008ca0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d018      	beq.n	8008c4c <HAL_TIM_Base_Start_IT+0x80>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a21      	ldr	r2, [pc, #132]	; (8008ca4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d013      	beq.n	8008c4c <HAL_TIM_Base_Start_IT+0x80>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a1f      	ldr	r2, [pc, #124]	; (8008ca8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d00e      	beq.n	8008c4c <HAL_TIM_Base_Start_IT+0x80>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a1e      	ldr	r2, [pc, #120]	; (8008cac <HAL_TIM_Base_Start_IT+0xe0>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d009      	beq.n	8008c4c <HAL_TIM_Base_Start_IT+0x80>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a1c      	ldr	r2, [pc, #112]	; (8008cb0 <HAL_TIM_Base_Start_IT+0xe4>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d004      	beq.n	8008c4c <HAL_TIM_Base_Start_IT+0x80>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a1b      	ldr	r2, [pc, #108]	; (8008cb4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d115      	bne.n	8008c78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689a      	ldr	r2, [r3, #8]
 8008c52:	4b19      	ldr	r3, [pc, #100]	; (8008cb8 <HAL_TIM_Base_Start_IT+0xec>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2b06      	cmp	r3, #6
 8008c5c:	d015      	beq.n	8008c8a <HAL_TIM_Base_Start_IT+0xbe>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c64:	d011      	beq.n	8008c8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f042 0201 	orr.w	r2, r2, #1
 8008c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c76:	e008      	b.n	8008c8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0201 	orr.w	r2, r2, #1
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	e000      	b.n	8008c8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	40010000 	.word	0x40010000
 8008ca0:	40000400 	.word	0x40000400
 8008ca4:	40000800 	.word	0x40000800
 8008ca8:	40000c00 	.word	0x40000c00
 8008cac:	40010400 	.word	0x40010400
 8008cb0:	40014000 	.word	0x40014000
 8008cb4:	40001800 	.word	0x40001800
 8008cb8:	00010007 	.word	0x00010007

08008cbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d122      	bne.n	8008d18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	f003 0302 	and.w	r3, r3, #2
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d11b      	bne.n	8008d18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f06f 0202 	mvn.w	r2, #2
 8008ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d003      	beq.n	8008d06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f9d0 	bl	80090a4 <HAL_TIM_IC_CaptureCallback>
 8008d04:	e005      	b.n	8008d12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f9c2 	bl	8009090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 f9d3 	bl	80090b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	f003 0304 	and.w	r3, r3, #4
 8008d22:	2b04      	cmp	r3, #4
 8008d24:	d122      	bne.n	8008d6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f003 0304 	and.w	r3, r3, #4
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	d11b      	bne.n	8008d6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f06f 0204 	mvn.w	r2, #4
 8008d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2202      	movs	r2, #2
 8008d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d003      	beq.n	8008d5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f9a6 	bl	80090a4 <HAL_TIM_IC_CaptureCallback>
 8008d58:	e005      	b.n	8008d66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f998 	bl	8009090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f9a9 	bl	80090b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	f003 0308 	and.w	r3, r3, #8
 8008d76:	2b08      	cmp	r3, #8
 8008d78:	d122      	bne.n	8008dc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	f003 0308 	and.w	r3, r3, #8
 8008d84:	2b08      	cmp	r3, #8
 8008d86:	d11b      	bne.n	8008dc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f06f 0208 	mvn.w	r2, #8
 8008d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2204      	movs	r2, #4
 8008d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	f003 0303 	and.w	r3, r3, #3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d003      	beq.n	8008dae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f97c 	bl	80090a4 <HAL_TIM_IC_CaptureCallback>
 8008dac:	e005      	b.n	8008dba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f96e 	bl	8009090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f97f 	bl	80090b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	f003 0310 	and.w	r3, r3, #16
 8008dca:	2b10      	cmp	r3, #16
 8008dcc:	d122      	bne.n	8008e14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f003 0310 	and.w	r3, r3, #16
 8008dd8:	2b10      	cmp	r3, #16
 8008dda:	d11b      	bne.n	8008e14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f06f 0210 	mvn.w	r2, #16
 8008de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2208      	movs	r2, #8
 8008dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f952 	bl	80090a4 <HAL_TIM_IC_CaptureCallback>
 8008e00:	e005      	b.n	8008e0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f944 	bl	8009090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f955 	bl	80090b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d10e      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d107      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f06f 0201 	mvn.w	r2, #1
 8008e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7f9 f804 	bl	8001e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e4a:	2b80      	cmp	r3, #128	; 0x80
 8008e4c:	d10e      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e58:	2b80      	cmp	r3, #128	; 0x80
 8008e5a:	d107      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fb0c 	bl	8009484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e7a:	d10e      	bne.n	8008e9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e86:	2b80      	cmp	r3, #128	; 0x80
 8008e88:	d107      	bne.n	8008e9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 faff 	bl	8009498 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea4:	2b40      	cmp	r3, #64	; 0x40
 8008ea6:	d10e      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb2:	2b40      	cmp	r3, #64	; 0x40
 8008eb4:	d107      	bne.n	8008ec6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f903 	bl	80090cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f003 0320 	and.w	r3, r3, #32
 8008ed0:	2b20      	cmp	r3, #32
 8008ed2:	d10e      	bne.n	8008ef2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f003 0320 	and.w	r3, r3, #32
 8008ede:	2b20      	cmp	r3, #32
 8008ee0:	d107      	bne.n	8008ef2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f06f 0220 	mvn.w	r2, #32
 8008eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 fabf 	bl	8009470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ef2:	bf00      	nop
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d101      	bne.n	8008f18 <HAL_TIM_ConfigClockSource+0x1c>
 8008f14:	2302      	movs	r3, #2
 8008f16:	e0b4      	b.n	8009082 <HAL_TIM_ConfigClockSource+0x186>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	4b56      	ldr	r3, [pc, #344]	; (800908c <HAL_TIM_ConfigClockSource+0x190>)
 8008f34:	4013      	ands	r3, r2
 8008f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f50:	d03e      	beq.n	8008fd0 <HAL_TIM_ConfigClockSource+0xd4>
 8008f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f56:	f200 8087 	bhi.w	8009068 <HAL_TIM_ConfigClockSource+0x16c>
 8008f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f5e:	f000 8086 	beq.w	800906e <HAL_TIM_ConfigClockSource+0x172>
 8008f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f66:	d87f      	bhi.n	8009068 <HAL_TIM_ConfigClockSource+0x16c>
 8008f68:	2b70      	cmp	r3, #112	; 0x70
 8008f6a:	d01a      	beq.n	8008fa2 <HAL_TIM_ConfigClockSource+0xa6>
 8008f6c:	2b70      	cmp	r3, #112	; 0x70
 8008f6e:	d87b      	bhi.n	8009068 <HAL_TIM_ConfigClockSource+0x16c>
 8008f70:	2b60      	cmp	r3, #96	; 0x60
 8008f72:	d050      	beq.n	8009016 <HAL_TIM_ConfigClockSource+0x11a>
 8008f74:	2b60      	cmp	r3, #96	; 0x60
 8008f76:	d877      	bhi.n	8009068 <HAL_TIM_ConfigClockSource+0x16c>
 8008f78:	2b50      	cmp	r3, #80	; 0x50
 8008f7a:	d03c      	beq.n	8008ff6 <HAL_TIM_ConfigClockSource+0xfa>
 8008f7c:	2b50      	cmp	r3, #80	; 0x50
 8008f7e:	d873      	bhi.n	8009068 <HAL_TIM_ConfigClockSource+0x16c>
 8008f80:	2b40      	cmp	r3, #64	; 0x40
 8008f82:	d058      	beq.n	8009036 <HAL_TIM_ConfigClockSource+0x13a>
 8008f84:	2b40      	cmp	r3, #64	; 0x40
 8008f86:	d86f      	bhi.n	8009068 <HAL_TIM_ConfigClockSource+0x16c>
 8008f88:	2b30      	cmp	r3, #48	; 0x30
 8008f8a:	d064      	beq.n	8009056 <HAL_TIM_ConfigClockSource+0x15a>
 8008f8c:	2b30      	cmp	r3, #48	; 0x30
 8008f8e:	d86b      	bhi.n	8009068 <HAL_TIM_ConfigClockSource+0x16c>
 8008f90:	2b20      	cmp	r3, #32
 8008f92:	d060      	beq.n	8009056 <HAL_TIM_ConfigClockSource+0x15a>
 8008f94:	2b20      	cmp	r3, #32
 8008f96:	d867      	bhi.n	8009068 <HAL_TIM_ConfigClockSource+0x16c>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d05c      	beq.n	8009056 <HAL_TIM_ConfigClockSource+0x15a>
 8008f9c:	2b10      	cmp	r3, #16
 8008f9e:	d05a      	beq.n	8009056 <HAL_TIM_ConfigClockSource+0x15a>
 8008fa0:	e062      	b.n	8009068 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6818      	ldr	r0, [r3, #0]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	6899      	ldr	r1, [r3, #8]
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	f000 f9af 	bl	8009314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008fc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	609a      	str	r2, [r3, #8]
      break;
 8008fce:	e04f      	b.n	8009070 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	6899      	ldr	r1, [r3, #8]
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f000 f998 	bl	8009314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ff2:	609a      	str	r2, [r3, #8]
      break;
 8008ff4:	e03c      	b.n	8009070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	6859      	ldr	r1, [r3, #4]
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	461a      	mov	r2, r3
 8009004:	f000 f90c 	bl	8009220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2150      	movs	r1, #80	; 0x50
 800900e:	4618      	mov	r0, r3
 8009010:	f000 f965 	bl	80092de <TIM_ITRx_SetConfig>
      break;
 8009014:	e02c      	b.n	8009070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6818      	ldr	r0, [r3, #0]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	6859      	ldr	r1, [r3, #4]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	461a      	mov	r2, r3
 8009024:	f000 f92b 	bl	800927e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2160      	movs	r1, #96	; 0x60
 800902e:	4618      	mov	r0, r3
 8009030:	f000 f955 	bl	80092de <TIM_ITRx_SetConfig>
      break;
 8009034:	e01c      	b.n	8009070 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6818      	ldr	r0, [r3, #0]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	6859      	ldr	r1, [r3, #4]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	461a      	mov	r2, r3
 8009044:	f000 f8ec 	bl	8009220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2140      	movs	r1, #64	; 0x40
 800904e:	4618      	mov	r0, r3
 8009050:	f000 f945 	bl	80092de <TIM_ITRx_SetConfig>
      break;
 8009054:	e00c      	b.n	8009070 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4619      	mov	r1, r3
 8009060:	4610      	mov	r0, r2
 8009062:	f000 f93c 	bl	80092de <TIM_ITRx_SetConfig>
      break;
 8009066:	e003      	b.n	8009070 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	73fb      	strb	r3, [r7, #15]
      break;
 800906c:	e000      	b.n	8009070 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800906e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2201      	movs	r2, #1
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009080:	7bfb      	ldrb	r3, [r7, #15]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	fffeff88 	.word	0xfffeff88

08009090 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a40      	ldr	r2, [pc, #256]	; (80091f4 <TIM_Base_SetConfig+0x114>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d013      	beq.n	8009120 <TIM_Base_SetConfig+0x40>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090fe:	d00f      	beq.n	8009120 <TIM_Base_SetConfig+0x40>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a3d      	ldr	r2, [pc, #244]	; (80091f8 <TIM_Base_SetConfig+0x118>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00b      	beq.n	8009120 <TIM_Base_SetConfig+0x40>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a3c      	ldr	r2, [pc, #240]	; (80091fc <TIM_Base_SetConfig+0x11c>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d007      	beq.n	8009120 <TIM_Base_SetConfig+0x40>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a3b      	ldr	r2, [pc, #236]	; (8009200 <TIM_Base_SetConfig+0x120>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d003      	beq.n	8009120 <TIM_Base_SetConfig+0x40>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a3a      	ldr	r2, [pc, #232]	; (8009204 <TIM_Base_SetConfig+0x124>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d108      	bne.n	8009132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	4313      	orrs	r3, r2
 8009130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a2f      	ldr	r2, [pc, #188]	; (80091f4 <TIM_Base_SetConfig+0x114>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d02b      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009140:	d027      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a2c      	ldr	r2, [pc, #176]	; (80091f8 <TIM_Base_SetConfig+0x118>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d023      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a2b      	ldr	r2, [pc, #172]	; (80091fc <TIM_Base_SetConfig+0x11c>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d01f      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a2a      	ldr	r2, [pc, #168]	; (8009200 <TIM_Base_SetConfig+0x120>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d01b      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a29      	ldr	r2, [pc, #164]	; (8009204 <TIM_Base_SetConfig+0x124>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d017      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a28      	ldr	r2, [pc, #160]	; (8009208 <TIM_Base_SetConfig+0x128>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d013      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a27      	ldr	r2, [pc, #156]	; (800920c <TIM_Base_SetConfig+0x12c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d00f      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a26      	ldr	r2, [pc, #152]	; (8009210 <TIM_Base_SetConfig+0x130>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d00b      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a25      	ldr	r2, [pc, #148]	; (8009214 <TIM_Base_SetConfig+0x134>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d007      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a24      	ldr	r2, [pc, #144]	; (8009218 <TIM_Base_SetConfig+0x138>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d003      	beq.n	8009192 <TIM_Base_SetConfig+0xb2>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a23      	ldr	r2, [pc, #140]	; (800921c <TIM_Base_SetConfig+0x13c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d108      	bne.n	80091a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	689a      	ldr	r2, [r3, #8]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	4a0a      	ldr	r2, [pc, #40]	; (80091f4 <TIM_Base_SetConfig+0x114>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d003      	beq.n	80091d8 <TIM_Base_SetConfig+0xf8>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a0c      	ldr	r2, [pc, #48]	; (8009204 <TIM_Base_SetConfig+0x124>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d103      	bne.n	80091e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	691a      	ldr	r2, [r3, #16]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	615a      	str	r2, [r3, #20]
}
 80091e6:	bf00      	nop
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	40010000 	.word	0x40010000
 80091f8:	40000400 	.word	0x40000400
 80091fc:	40000800 	.word	0x40000800
 8009200:	40000c00 	.word	0x40000c00
 8009204:	40010400 	.word	0x40010400
 8009208:	40014000 	.word	0x40014000
 800920c:	40014400 	.word	0x40014400
 8009210:	40014800 	.word	0x40014800
 8009214:	40001800 	.word	0x40001800
 8009218:	40001c00 	.word	0x40001c00
 800921c:	40002000 	.word	0x40002000

08009220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	f023 0201 	bic.w	r2, r3, #1
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	699b      	ldr	r3, [r3, #24]
 8009242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800924a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	4313      	orrs	r3, r2
 8009254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	f023 030a 	bic.w	r3, r3, #10
 800925c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	621a      	str	r2, [r3, #32]
}
 8009272:	bf00      	nop
 8009274:	371c      	adds	r7, #28
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800927e:	b480      	push	{r7}
 8009280:	b087      	sub	sp, #28
 8009282:	af00      	add	r7, sp, #0
 8009284:	60f8      	str	r0, [r7, #12]
 8009286:	60b9      	str	r1, [r7, #8]
 8009288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	f023 0210 	bic.w	r2, r3, #16
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6a1b      	ldr	r3, [r3, #32]
 80092a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	031b      	lsls	r3, r3, #12
 80092ae:	697a      	ldr	r2, [r7, #20]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	621a      	str	r2, [r3, #32]
}
 80092d2:	bf00      	nop
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092de:	b480      	push	{r7}
 80092e0:	b085      	sub	sp, #20
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	f043 0307 	orr.w	r3, r3, #7
 8009300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	609a      	str	r2, [r3, #8]
}
 8009308:	bf00      	nop
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009314:	b480      	push	{r7}
 8009316:	b087      	sub	sp, #28
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
 8009320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800932e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	021a      	lsls	r2, r3, #8
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	431a      	orrs	r2, r3
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	4313      	orrs	r3, r2
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	4313      	orrs	r3, r2
 8009340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	609a      	str	r2, [r3, #8]
}
 8009348:	bf00      	nop
 800934a:	371c      	adds	r7, #28
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009364:	2b01      	cmp	r3, #1
 8009366:	d101      	bne.n	800936c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009368:	2302      	movs	r3, #2
 800936a:	e06d      	b.n	8009448 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2202      	movs	r2, #2
 8009378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a30      	ldr	r2, [pc, #192]	; (8009454 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d004      	beq.n	80093a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a2f      	ldr	r2, [pc, #188]	; (8009458 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d108      	bne.n	80093b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a20      	ldr	r2, [pc, #128]	; (8009454 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d022      	beq.n	800941c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093de:	d01d      	beq.n	800941c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a1d      	ldr	r2, [pc, #116]	; (800945c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d018      	beq.n	800941c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a1c      	ldr	r2, [pc, #112]	; (8009460 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d013      	beq.n	800941c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a1a      	ldr	r2, [pc, #104]	; (8009464 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d00e      	beq.n	800941c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a15      	ldr	r2, [pc, #84]	; (8009458 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d009      	beq.n	800941c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a16      	ldr	r2, [pc, #88]	; (8009468 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d004      	beq.n	800941c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a15      	ldr	r2, [pc, #84]	; (800946c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d10c      	bne.n	8009436 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009422:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	68ba      	ldr	r2, [r7, #8]
 800942a:	4313      	orrs	r3, r2
 800942c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr
 8009454:	40010000 	.word	0x40010000
 8009458:	40010400 	.word	0x40010400
 800945c:	40000400 	.word	0x40000400
 8009460:	40000800 	.word	0x40000800
 8009464:	40000c00 	.word	0x40000c00
 8009468:	40014000 	.word	0x40014000
 800946c:	40001800 	.word	0x40001800

08009470 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d101      	bne.n	80094be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e040      	b.n	8009540 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d106      	bne.n	80094d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7fa fa7a 	bl	80039c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2224      	movs	r2, #36	; 0x24
 80094d8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 0201 	bic.w	r2, r2, #1
 80094e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fb16 	bl	8009b1c <UART_SetConfig>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d101      	bne.n	80094fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e022      	b.n	8009540 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d002      	beq.n	8009508 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 fd6c 	bl	8009fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009516:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689a      	ldr	r2, [r3, #8]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009526:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f042 0201 	orr.w	r2, r2, #1
 8009536:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fdf3 	bl	800a124 <UART_CheckIdleState>
 800953e:	4603      	mov	r3, r0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b0ba      	sub	sp, #232	; 0xe8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800956e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009572:	f640 030f 	movw	r3, #2063	; 0x80f
 8009576:	4013      	ands	r3, r2
 8009578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800957c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009580:	2b00      	cmp	r3, #0
 8009582:	d115      	bne.n	80095b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009588:	f003 0320 	and.w	r3, r3, #32
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00f      	beq.n	80095b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009594:	f003 0320 	and.w	r3, r3, #32
 8009598:	2b00      	cmp	r3, #0
 800959a:	d009      	beq.n	80095b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 828f 	beq.w	8009ac4 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	4798      	blx	r3
      }
      return;
 80095ae:	e289      	b.n	8009ac4 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80095b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 8117 	beq.w	80097e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80095ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d106      	bne.n	80095d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80095c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80095ca:	4b85      	ldr	r3, [pc, #532]	; (80097e0 <HAL_UART_IRQHandler+0x298>)
 80095cc:	4013      	ands	r3, r2
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 810a 	beq.w	80097e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d011      	beq.n	8009604 <HAL_UART_IRQHandler+0xbc>
 80095e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00b      	beq.n	8009604 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2201      	movs	r2, #1
 80095f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095fa:	f043 0201 	orr.w	r2, r3, #1
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009608:	f003 0302 	and.w	r3, r3, #2
 800960c:	2b00      	cmp	r3, #0
 800960e:	d011      	beq.n	8009634 <HAL_UART_IRQHandler+0xec>
 8009610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009614:	f003 0301 	and.w	r3, r3, #1
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00b      	beq.n	8009634 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2202      	movs	r2, #2
 8009622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800962a:	f043 0204 	orr.w	r2, r3, #4
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009638:	f003 0304 	and.w	r3, r3, #4
 800963c:	2b00      	cmp	r3, #0
 800963e:	d011      	beq.n	8009664 <HAL_UART_IRQHandler+0x11c>
 8009640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00b      	beq.n	8009664 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2204      	movs	r2, #4
 8009652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800965a:	f043 0202 	orr.w	r2, r3, #2
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009668:	f003 0308 	and.w	r3, r3, #8
 800966c:	2b00      	cmp	r3, #0
 800966e:	d017      	beq.n	80096a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009674:	f003 0320 	and.w	r3, r3, #32
 8009678:	2b00      	cmp	r3, #0
 800967a:	d105      	bne.n	8009688 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800967c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009680:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00b      	beq.n	80096a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2208      	movs	r2, #8
 800968e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009696:	f043 0208 	orr.w	r2, r3, #8
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80096a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d012      	beq.n	80096d2 <HAL_UART_IRQHandler+0x18a>
 80096ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00c      	beq.n	80096d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096c8:	f043 0220 	orr.w	r2, r3, #32
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 81f5 	beq.w	8009ac8 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80096de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096e2:	f003 0320 	and.w	r3, r3, #32
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00d      	beq.n	8009706 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80096ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096ee:	f003 0320 	and.w	r3, r3, #32
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d007      	beq.n	8009706 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800970c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971a:	2b40      	cmp	r3, #64	; 0x40
 800971c:	d005      	beq.n	800972a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800971e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009722:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009726:	2b00      	cmp	r3, #0
 8009728:	d04f      	beq.n	80097ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 fdf1 	bl	800a312 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973a:	2b40      	cmp	r3, #64	; 0x40
 800973c:	d141      	bne.n	80097c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	3308      	adds	r3, #8
 8009744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009748:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800974c:	e853 3f00 	ldrex	r3, [r3]
 8009750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800975c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	3308      	adds	r3, #8
 8009766:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800976a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800976e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009772:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009776:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009782:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1d9      	bne.n	800973e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978e:	2b00      	cmp	r3, #0
 8009790:	d013      	beq.n	80097ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009796:	4a13      	ldr	r2, [pc, #76]	; (80097e4 <HAL_UART_IRQHandler+0x29c>)
 8009798:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fb faa0 	bl	8004ce4 <HAL_DMA_Abort_IT>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d017      	beq.n	80097da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80097b4:	4610      	mov	r0, r2
 80097b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b8:	e00f      	b.n	80097da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 f998 	bl	8009af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c0:	e00b      	b.n	80097da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f994 	bl	8009af0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c8:	e007      	b.n	80097da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f990 	bl	8009af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80097d8:	e176      	b.n	8009ac8 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097da:	bf00      	nop
    return;
 80097dc:	e174      	b.n	8009ac8 <HAL_UART_IRQHandler+0x580>
 80097de:	bf00      	nop
 80097e0:	04000120 	.word	0x04000120
 80097e4:	0800a3d9 	.word	0x0800a3d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	f040 8144 	bne.w	8009a7a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f6:	f003 0310 	and.w	r3, r3, #16
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 813d 	beq.w	8009a7a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009804:	f003 0310 	and.w	r3, r3, #16
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 8136 	beq.w	8009a7a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2210      	movs	r2, #16
 8009814:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009820:	2b40      	cmp	r3, #64	; 0x40
 8009822:	f040 80b2 	bne.w	800998a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009832:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009836:	2b00      	cmp	r3, #0
 8009838:	f000 8148 	beq.w	8009acc <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009846:	429a      	cmp	r2, r3
 8009848:	f080 8140 	bcs.w	8009acc <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009852:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009860:	f000 8085 	beq.w	800996e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009870:	e853 3f00 	ldrex	r3, [r3]
 8009874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009878:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800987c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009880:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	461a      	mov	r2, r3
 800988a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800988e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009892:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009896:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800989a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800989e:	e841 2300 	strex	r3, r2, [r1]
 80098a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80098a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1da      	bne.n	8009864 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	3308      	adds	r3, #8
 80098b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098b8:	e853 3f00 	ldrex	r3, [r3]
 80098bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098c0:	f023 0301 	bic.w	r3, r3, #1
 80098c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	3308      	adds	r3, #8
 80098ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1e1      	bne.n	80098ae <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3308      	adds	r3, #8
 80098f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80098fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3308      	adds	r3, #8
 800990a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800990e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009910:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009912:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009914:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009916:	e841 2300 	strex	r3, r2, [r1]
 800991a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800991c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1e3      	bne.n	80098ea <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2220      	movs	r2, #32
 8009926:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009936:	e853 3f00 	ldrex	r3, [r3]
 800993a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800993c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800993e:	f023 0310 	bic.w	r3, r3, #16
 8009942:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	461a      	mov	r2, r3
 800994c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009950:	65bb      	str	r3, [r7, #88]	; 0x58
 8009952:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009954:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009956:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009958:	e841 2300 	strex	r3, r2, [r1]
 800995c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800995e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1e4      	bne.n	800992e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009968:	4618      	mov	r0, r3
 800996a:	f7fb f94b 	bl	8004c04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800997a:	b29b      	uxth	r3, r3
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	b29b      	uxth	r3, r3
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f8be 	bl	8009b04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009988:	e0a0      	b.n	8009acc <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009996:	b29b      	uxth	r3, r3
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f000 8092 	beq.w	8009ad0 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80099ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 808d 	beq.w	8009ad0 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	461a      	mov	r2, r3
 80099d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80099d8:	647b      	str	r3, [r7, #68]	; 0x44
 80099da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099e0:	e841 2300 	strex	r3, r2, [r1]
 80099e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1e4      	bne.n	80099b6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3308      	adds	r3, #8
 80099f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	623b      	str	r3, [r7, #32]
   return(result);
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	f023 0301 	bic.w	r3, r3, #1
 8009a02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	3308      	adds	r3, #8
 8009a0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a10:	633a      	str	r2, [r7, #48]	; 0x30
 8009a12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a18:	e841 2300 	strex	r3, r2, [r1]
 8009a1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e3      	bne.n	80099ec <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2220      	movs	r2, #32
 8009a28:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	e853 3f00 	ldrex	r3, [r3]
 8009a42:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f023 0310 	bic.w	r3, r3, #16
 8009a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a58:	61fb      	str	r3, [r7, #28]
 8009a5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	69b9      	ldr	r1, [r7, #24]
 8009a5e:	69fa      	ldr	r2, [r7, #28]
 8009a60:	e841 2300 	strex	r3, r2, [r1]
 8009a64:	617b      	str	r3, [r7, #20]
   return(result);
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1e4      	bne.n	8009a36 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f846 	bl	8009b04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a78:	e02a      	b.n	8009ad0 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00e      	beq.n	8009aa4 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d008      	beq.n	8009aa4 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d01c      	beq.n	8009ad4 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	4798      	blx	r3
    }
    return;
 8009aa2:	e017      	b.n	8009ad4 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d012      	beq.n	8009ad6 <HAL_UART_IRQHandler+0x58e>
 8009ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00c      	beq.n	8009ad6 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fca1 	bl	800a404 <UART_EndTransmit_IT>
    return;
 8009ac2:	e008      	b.n	8009ad6 <HAL_UART_IRQHandler+0x58e>
      return;
 8009ac4:	bf00      	nop
 8009ac6:	e006      	b.n	8009ad6 <HAL_UART_IRQHandler+0x58e>
    return;
 8009ac8:	bf00      	nop
 8009aca:	e004      	b.n	8009ad6 <HAL_UART_IRQHandler+0x58e>
      return;
 8009acc:	bf00      	nop
 8009ace:	e002      	b.n	8009ad6 <HAL_UART_IRQHandler+0x58e>
      return;
 8009ad0:	bf00      	nop
 8009ad2:	e000      	b.n	8009ad6 <HAL_UART_IRQHandler+0x58e>
    return;
 8009ad4:	bf00      	nop
  }

}
 8009ad6:	37e8      	adds	r7, #232	; 0xe8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b24:	2300      	movs	r3, #0
 8009b26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689a      	ldr	r2, [r3, #8]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	431a      	orrs	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	431a      	orrs	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	69db      	ldr	r3, [r3, #28]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	4ba7      	ldr	r3, [pc, #668]	; (8009de4 <UART_SetConfig+0x2c8>)
 8009b48:	4013      	ands	r3, r2
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	6812      	ldr	r2, [r2, #0]
 8009b4e:	6979      	ldr	r1, [r7, #20]
 8009b50:	430b      	orrs	r3, r1
 8009b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	68da      	ldr	r2, [r3, #12]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	697a      	ldr	r2, [r7, #20]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	697a      	ldr	r2, [r7, #20]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a95      	ldr	r2, [pc, #596]	; (8009de8 <UART_SetConfig+0x2cc>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d120      	bne.n	8009bda <UART_SetConfig+0xbe>
 8009b98:	4b94      	ldr	r3, [pc, #592]	; (8009dec <UART_SetConfig+0x2d0>)
 8009b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b9e:	f003 0303 	and.w	r3, r3, #3
 8009ba2:	2b03      	cmp	r3, #3
 8009ba4:	d816      	bhi.n	8009bd4 <UART_SetConfig+0xb8>
 8009ba6:	a201      	add	r2, pc, #4	; (adr r2, 8009bac <UART_SetConfig+0x90>)
 8009ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bac:	08009bbd 	.word	0x08009bbd
 8009bb0:	08009bc9 	.word	0x08009bc9
 8009bb4:	08009bc3 	.word	0x08009bc3
 8009bb8:	08009bcf 	.word	0x08009bcf
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	77fb      	strb	r3, [r7, #31]
 8009bc0:	e14f      	b.n	8009e62 <UART_SetConfig+0x346>
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	77fb      	strb	r3, [r7, #31]
 8009bc6:	e14c      	b.n	8009e62 <UART_SetConfig+0x346>
 8009bc8:	2304      	movs	r3, #4
 8009bca:	77fb      	strb	r3, [r7, #31]
 8009bcc:	e149      	b.n	8009e62 <UART_SetConfig+0x346>
 8009bce:	2308      	movs	r3, #8
 8009bd0:	77fb      	strb	r3, [r7, #31]
 8009bd2:	e146      	b.n	8009e62 <UART_SetConfig+0x346>
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	77fb      	strb	r3, [r7, #31]
 8009bd8:	e143      	b.n	8009e62 <UART_SetConfig+0x346>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a84      	ldr	r2, [pc, #528]	; (8009df0 <UART_SetConfig+0x2d4>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d132      	bne.n	8009c4a <UART_SetConfig+0x12e>
 8009be4:	4b81      	ldr	r3, [pc, #516]	; (8009dec <UART_SetConfig+0x2d0>)
 8009be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bea:	f003 030c 	and.w	r3, r3, #12
 8009bee:	2b0c      	cmp	r3, #12
 8009bf0:	d828      	bhi.n	8009c44 <UART_SetConfig+0x128>
 8009bf2:	a201      	add	r2, pc, #4	; (adr r2, 8009bf8 <UART_SetConfig+0xdc>)
 8009bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf8:	08009c2d 	.word	0x08009c2d
 8009bfc:	08009c45 	.word	0x08009c45
 8009c00:	08009c45 	.word	0x08009c45
 8009c04:	08009c45 	.word	0x08009c45
 8009c08:	08009c39 	.word	0x08009c39
 8009c0c:	08009c45 	.word	0x08009c45
 8009c10:	08009c45 	.word	0x08009c45
 8009c14:	08009c45 	.word	0x08009c45
 8009c18:	08009c33 	.word	0x08009c33
 8009c1c:	08009c45 	.word	0x08009c45
 8009c20:	08009c45 	.word	0x08009c45
 8009c24:	08009c45 	.word	0x08009c45
 8009c28:	08009c3f 	.word	0x08009c3f
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	77fb      	strb	r3, [r7, #31]
 8009c30:	e117      	b.n	8009e62 <UART_SetConfig+0x346>
 8009c32:	2302      	movs	r3, #2
 8009c34:	77fb      	strb	r3, [r7, #31]
 8009c36:	e114      	b.n	8009e62 <UART_SetConfig+0x346>
 8009c38:	2304      	movs	r3, #4
 8009c3a:	77fb      	strb	r3, [r7, #31]
 8009c3c:	e111      	b.n	8009e62 <UART_SetConfig+0x346>
 8009c3e:	2308      	movs	r3, #8
 8009c40:	77fb      	strb	r3, [r7, #31]
 8009c42:	e10e      	b.n	8009e62 <UART_SetConfig+0x346>
 8009c44:	2310      	movs	r3, #16
 8009c46:	77fb      	strb	r3, [r7, #31]
 8009c48:	e10b      	b.n	8009e62 <UART_SetConfig+0x346>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a69      	ldr	r2, [pc, #420]	; (8009df4 <UART_SetConfig+0x2d8>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d120      	bne.n	8009c96 <UART_SetConfig+0x17a>
 8009c54:	4b65      	ldr	r3, [pc, #404]	; (8009dec <UART_SetConfig+0x2d0>)
 8009c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009c5e:	2b30      	cmp	r3, #48	; 0x30
 8009c60:	d013      	beq.n	8009c8a <UART_SetConfig+0x16e>
 8009c62:	2b30      	cmp	r3, #48	; 0x30
 8009c64:	d814      	bhi.n	8009c90 <UART_SetConfig+0x174>
 8009c66:	2b20      	cmp	r3, #32
 8009c68:	d009      	beq.n	8009c7e <UART_SetConfig+0x162>
 8009c6a:	2b20      	cmp	r3, #32
 8009c6c:	d810      	bhi.n	8009c90 <UART_SetConfig+0x174>
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <UART_SetConfig+0x15c>
 8009c72:	2b10      	cmp	r3, #16
 8009c74:	d006      	beq.n	8009c84 <UART_SetConfig+0x168>
 8009c76:	e00b      	b.n	8009c90 <UART_SetConfig+0x174>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	77fb      	strb	r3, [r7, #31]
 8009c7c:	e0f1      	b.n	8009e62 <UART_SetConfig+0x346>
 8009c7e:	2302      	movs	r3, #2
 8009c80:	77fb      	strb	r3, [r7, #31]
 8009c82:	e0ee      	b.n	8009e62 <UART_SetConfig+0x346>
 8009c84:	2304      	movs	r3, #4
 8009c86:	77fb      	strb	r3, [r7, #31]
 8009c88:	e0eb      	b.n	8009e62 <UART_SetConfig+0x346>
 8009c8a:	2308      	movs	r3, #8
 8009c8c:	77fb      	strb	r3, [r7, #31]
 8009c8e:	e0e8      	b.n	8009e62 <UART_SetConfig+0x346>
 8009c90:	2310      	movs	r3, #16
 8009c92:	77fb      	strb	r3, [r7, #31]
 8009c94:	e0e5      	b.n	8009e62 <UART_SetConfig+0x346>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4a57      	ldr	r2, [pc, #348]	; (8009df8 <UART_SetConfig+0x2dc>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d120      	bne.n	8009ce2 <UART_SetConfig+0x1c6>
 8009ca0:	4b52      	ldr	r3, [pc, #328]	; (8009dec <UART_SetConfig+0x2d0>)
 8009ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009caa:	2bc0      	cmp	r3, #192	; 0xc0
 8009cac:	d013      	beq.n	8009cd6 <UART_SetConfig+0x1ba>
 8009cae:	2bc0      	cmp	r3, #192	; 0xc0
 8009cb0:	d814      	bhi.n	8009cdc <UART_SetConfig+0x1c0>
 8009cb2:	2b80      	cmp	r3, #128	; 0x80
 8009cb4:	d009      	beq.n	8009cca <UART_SetConfig+0x1ae>
 8009cb6:	2b80      	cmp	r3, #128	; 0x80
 8009cb8:	d810      	bhi.n	8009cdc <UART_SetConfig+0x1c0>
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <UART_SetConfig+0x1a8>
 8009cbe:	2b40      	cmp	r3, #64	; 0x40
 8009cc0:	d006      	beq.n	8009cd0 <UART_SetConfig+0x1b4>
 8009cc2:	e00b      	b.n	8009cdc <UART_SetConfig+0x1c0>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	77fb      	strb	r3, [r7, #31]
 8009cc8:	e0cb      	b.n	8009e62 <UART_SetConfig+0x346>
 8009cca:	2302      	movs	r3, #2
 8009ccc:	77fb      	strb	r3, [r7, #31]
 8009cce:	e0c8      	b.n	8009e62 <UART_SetConfig+0x346>
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	77fb      	strb	r3, [r7, #31]
 8009cd4:	e0c5      	b.n	8009e62 <UART_SetConfig+0x346>
 8009cd6:	2308      	movs	r3, #8
 8009cd8:	77fb      	strb	r3, [r7, #31]
 8009cda:	e0c2      	b.n	8009e62 <UART_SetConfig+0x346>
 8009cdc:	2310      	movs	r3, #16
 8009cde:	77fb      	strb	r3, [r7, #31]
 8009ce0:	e0bf      	b.n	8009e62 <UART_SetConfig+0x346>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a45      	ldr	r2, [pc, #276]	; (8009dfc <UART_SetConfig+0x2e0>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d125      	bne.n	8009d38 <UART_SetConfig+0x21c>
 8009cec:	4b3f      	ldr	r3, [pc, #252]	; (8009dec <UART_SetConfig+0x2d0>)
 8009cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cfa:	d017      	beq.n	8009d2c <UART_SetConfig+0x210>
 8009cfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d00:	d817      	bhi.n	8009d32 <UART_SetConfig+0x216>
 8009d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d06:	d00b      	beq.n	8009d20 <UART_SetConfig+0x204>
 8009d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d0c:	d811      	bhi.n	8009d32 <UART_SetConfig+0x216>
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <UART_SetConfig+0x1fe>
 8009d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d16:	d006      	beq.n	8009d26 <UART_SetConfig+0x20a>
 8009d18:	e00b      	b.n	8009d32 <UART_SetConfig+0x216>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	77fb      	strb	r3, [r7, #31]
 8009d1e:	e0a0      	b.n	8009e62 <UART_SetConfig+0x346>
 8009d20:	2302      	movs	r3, #2
 8009d22:	77fb      	strb	r3, [r7, #31]
 8009d24:	e09d      	b.n	8009e62 <UART_SetConfig+0x346>
 8009d26:	2304      	movs	r3, #4
 8009d28:	77fb      	strb	r3, [r7, #31]
 8009d2a:	e09a      	b.n	8009e62 <UART_SetConfig+0x346>
 8009d2c:	2308      	movs	r3, #8
 8009d2e:	77fb      	strb	r3, [r7, #31]
 8009d30:	e097      	b.n	8009e62 <UART_SetConfig+0x346>
 8009d32:	2310      	movs	r3, #16
 8009d34:	77fb      	strb	r3, [r7, #31]
 8009d36:	e094      	b.n	8009e62 <UART_SetConfig+0x346>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a30      	ldr	r2, [pc, #192]	; (8009e00 <UART_SetConfig+0x2e4>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d125      	bne.n	8009d8e <UART_SetConfig+0x272>
 8009d42:	4b2a      	ldr	r3, [pc, #168]	; (8009dec <UART_SetConfig+0x2d0>)
 8009d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d50:	d017      	beq.n	8009d82 <UART_SetConfig+0x266>
 8009d52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d56:	d817      	bhi.n	8009d88 <UART_SetConfig+0x26c>
 8009d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d5c:	d00b      	beq.n	8009d76 <UART_SetConfig+0x25a>
 8009d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d62:	d811      	bhi.n	8009d88 <UART_SetConfig+0x26c>
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d003      	beq.n	8009d70 <UART_SetConfig+0x254>
 8009d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d6c:	d006      	beq.n	8009d7c <UART_SetConfig+0x260>
 8009d6e:	e00b      	b.n	8009d88 <UART_SetConfig+0x26c>
 8009d70:	2301      	movs	r3, #1
 8009d72:	77fb      	strb	r3, [r7, #31]
 8009d74:	e075      	b.n	8009e62 <UART_SetConfig+0x346>
 8009d76:	2302      	movs	r3, #2
 8009d78:	77fb      	strb	r3, [r7, #31]
 8009d7a:	e072      	b.n	8009e62 <UART_SetConfig+0x346>
 8009d7c:	2304      	movs	r3, #4
 8009d7e:	77fb      	strb	r3, [r7, #31]
 8009d80:	e06f      	b.n	8009e62 <UART_SetConfig+0x346>
 8009d82:	2308      	movs	r3, #8
 8009d84:	77fb      	strb	r3, [r7, #31]
 8009d86:	e06c      	b.n	8009e62 <UART_SetConfig+0x346>
 8009d88:	2310      	movs	r3, #16
 8009d8a:	77fb      	strb	r3, [r7, #31]
 8009d8c:	e069      	b.n	8009e62 <UART_SetConfig+0x346>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a1c      	ldr	r2, [pc, #112]	; (8009e04 <UART_SetConfig+0x2e8>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d137      	bne.n	8009e08 <UART_SetConfig+0x2ec>
 8009d98:	4b14      	ldr	r3, [pc, #80]	; (8009dec <UART_SetConfig+0x2d0>)
 8009d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009da2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009da6:	d017      	beq.n	8009dd8 <UART_SetConfig+0x2bc>
 8009da8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009dac:	d817      	bhi.n	8009dde <UART_SetConfig+0x2c2>
 8009dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009db2:	d00b      	beq.n	8009dcc <UART_SetConfig+0x2b0>
 8009db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009db8:	d811      	bhi.n	8009dde <UART_SetConfig+0x2c2>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <UART_SetConfig+0x2aa>
 8009dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dc2:	d006      	beq.n	8009dd2 <UART_SetConfig+0x2b6>
 8009dc4:	e00b      	b.n	8009dde <UART_SetConfig+0x2c2>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	77fb      	strb	r3, [r7, #31]
 8009dca:	e04a      	b.n	8009e62 <UART_SetConfig+0x346>
 8009dcc:	2302      	movs	r3, #2
 8009dce:	77fb      	strb	r3, [r7, #31]
 8009dd0:	e047      	b.n	8009e62 <UART_SetConfig+0x346>
 8009dd2:	2304      	movs	r3, #4
 8009dd4:	77fb      	strb	r3, [r7, #31]
 8009dd6:	e044      	b.n	8009e62 <UART_SetConfig+0x346>
 8009dd8:	2308      	movs	r3, #8
 8009dda:	77fb      	strb	r3, [r7, #31]
 8009ddc:	e041      	b.n	8009e62 <UART_SetConfig+0x346>
 8009dde:	2310      	movs	r3, #16
 8009de0:	77fb      	strb	r3, [r7, #31]
 8009de2:	e03e      	b.n	8009e62 <UART_SetConfig+0x346>
 8009de4:	efff69f3 	.word	0xefff69f3
 8009de8:	40011000 	.word	0x40011000
 8009dec:	40023800 	.word	0x40023800
 8009df0:	40004400 	.word	0x40004400
 8009df4:	40004800 	.word	0x40004800
 8009df8:	40004c00 	.word	0x40004c00
 8009dfc:	40005000 	.word	0x40005000
 8009e00:	40011400 	.word	0x40011400
 8009e04:	40007800 	.word	0x40007800
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a71      	ldr	r2, [pc, #452]	; (8009fd4 <UART_SetConfig+0x4b8>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d125      	bne.n	8009e5e <UART_SetConfig+0x342>
 8009e12:	4b71      	ldr	r3, [pc, #452]	; (8009fd8 <UART_SetConfig+0x4bc>)
 8009e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009e1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009e20:	d017      	beq.n	8009e52 <UART_SetConfig+0x336>
 8009e22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009e26:	d817      	bhi.n	8009e58 <UART_SetConfig+0x33c>
 8009e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e2c:	d00b      	beq.n	8009e46 <UART_SetConfig+0x32a>
 8009e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e32:	d811      	bhi.n	8009e58 <UART_SetConfig+0x33c>
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d003      	beq.n	8009e40 <UART_SetConfig+0x324>
 8009e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e3c:	d006      	beq.n	8009e4c <UART_SetConfig+0x330>
 8009e3e:	e00b      	b.n	8009e58 <UART_SetConfig+0x33c>
 8009e40:	2300      	movs	r3, #0
 8009e42:	77fb      	strb	r3, [r7, #31]
 8009e44:	e00d      	b.n	8009e62 <UART_SetConfig+0x346>
 8009e46:	2302      	movs	r3, #2
 8009e48:	77fb      	strb	r3, [r7, #31]
 8009e4a:	e00a      	b.n	8009e62 <UART_SetConfig+0x346>
 8009e4c:	2304      	movs	r3, #4
 8009e4e:	77fb      	strb	r3, [r7, #31]
 8009e50:	e007      	b.n	8009e62 <UART_SetConfig+0x346>
 8009e52:	2308      	movs	r3, #8
 8009e54:	77fb      	strb	r3, [r7, #31]
 8009e56:	e004      	b.n	8009e62 <UART_SetConfig+0x346>
 8009e58:	2310      	movs	r3, #16
 8009e5a:	77fb      	strb	r3, [r7, #31]
 8009e5c:	e001      	b.n	8009e62 <UART_SetConfig+0x346>
 8009e5e:	2310      	movs	r3, #16
 8009e60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	69db      	ldr	r3, [r3, #28]
 8009e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e6a:	d15a      	bne.n	8009f22 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8009e6c:	7ffb      	ldrb	r3, [r7, #31]
 8009e6e:	2b08      	cmp	r3, #8
 8009e70:	d827      	bhi.n	8009ec2 <UART_SetConfig+0x3a6>
 8009e72:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <UART_SetConfig+0x35c>)
 8009e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e78:	08009e9d 	.word	0x08009e9d
 8009e7c:	08009ea5 	.word	0x08009ea5
 8009e80:	08009ead 	.word	0x08009ead
 8009e84:	08009ec3 	.word	0x08009ec3
 8009e88:	08009eb3 	.word	0x08009eb3
 8009e8c:	08009ec3 	.word	0x08009ec3
 8009e90:	08009ec3 	.word	0x08009ec3
 8009e94:	08009ec3 	.word	0x08009ec3
 8009e98:	08009ebb 	.word	0x08009ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e9c:	f7fd fce0 	bl	8007860 <HAL_RCC_GetPCLK1Freq>
 8009ea0:	61b8      	str	r0, [r7, #24]
        break;
 8009ea2:	e013      	b.n	8009ecc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ea4:	f7fd fcf0 	bl	8007888 <HAL_RCC_GetPCLK2Freq>
 8009ea8:	61b8      	str	r0, [r7, #24]
        break;
 8009eaa:	e00f      	b.n	8009ecc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009eac:	4b4b      	ldr	r3, [pc, #300]	; (8009fdc <UART_SetConfig+0x4c0>)
 8009eae:	61bb      	str	r3, [r7, #24]
        break;
 8009eb0:	e00c      	b.n	8009ecc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009eb2:	f7fd fc13 	bl	80076dc <HAL_RCC_GetSysClockFreq>
 8009eb6:	61b8      	str	r0, [r7, #24]
        break;
 8009eb8:	e008      	b.n	8009ecc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ebe:	61bb      	str	r3, [r7, #24]
        break;
 8009ec0:	e004      	b.n	8009ecc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	77bb      	strb	r3, [r7, #30]
        break;
 8009eca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d074      	beq.n	8009fbc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	005a      	lsls	r2, r3, #1
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	085b      	lsrs	r3, r3, #1
 8009edc:	441a      	add	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ee6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	2b0f      	cmp	r3, #15
 8009eec:	d916      	bls.n	8009f1c <UART_SetConfig+0x400>
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ef4:	d212      	bcs.n	8009f1c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	f023 030f 	bic.w	r3, r3, #15
 8009efe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	085b      	lsrs	r3, r3, #1
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	f003 0307 	and.w	r3, r3, #7
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	89fb      	ldrh	r3, [r7, #14]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	89fa      	ldrh	r2, [r7, #14]
 8009f18:	60da      	str	r2, [r3, #12]
 8009f1a:	e04f      	b.n	8009fbc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	77bb      	strb	r3, [r7, #30]
 8009f20:	e04c      	b.n	8009fbc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f22:	7ffb      	ldrb	r3, [r7, #31]
 8009f24:	2b08      	cmp	r3, #8
 8009f26:	d828      	bhi.n	8009f7a <UART_SetConfig+0x45e>
 8009f28:	a201      	add	r2, pc, #4	; (adr r2, 8009f30 <UART_SetConfig+0x414>)
 8009f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f2e:	bf00      	nop
 8009f30:	08009f55 	.word	0x08009f55
 8009f34:	08009f5d 	.word	0x08009f5d
 8009f38:	08009f65 	.word	0x08009f65
 8009f3c:	08009f7b 	.word	0x08009f7b
 8009f40:	08009f6b 	.word	0x08009f6b
 8009f44:	08009f7b 	.word	0x08009f7b
 8009f48:	08009f7b 	.word	0x08009f7b
 8009f4c:	08009f7b 	.word	0x08009f7b
 8009f50:	08009f73 	.word	0x08009f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f54:	f7fd fc84 	bl	8007860 <HAL_RCC_GetPCLK1Freq>
 8009f58:	61b8      	str	r0, [r7, #24]
        break;
 8009f5a:	e013      	b.n	8009f84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f5c:	f7fd fc94 	bl	8007888 <HAL_RCC_GetPCLK2Freq>
 8009f60:	61b8      	str	r0, [r7, #24]
        break;
 8009f62:	e00f      	b.n	8009f84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f64:	4b1d      	ldr	r3, [pc, #116]	; (8009fdc <UART_SetConfig+0x4c0>)
 8009f66:	61bb      	str	r3, [r7, #24]
        break;
 8009f68:	e00c      	b.n	8009f84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f6a:	f7fd fbb7 	bl	80076dc <HAL_RCC_GetSysClockFreq>
 8009f6e:	61b8      	str	r0, [r7, #24]
        break;
 8009f70:	e008      	b.n	8009f84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f76:	61bb      	str	r3, [r7, #24]
        break;
 8009f78:	e004      	b.n	8009f84 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	77bb      	strb	r3, [r7, #30]
        break;
 8009f82:	bf00      	nop
    }

    if (pclk != 0U)
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d018      	beq.n	8009fbc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	085a      	lsrs	r2, r3, #1
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	441a      	add	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2b0f      	cmp	r3, #15
 8009fa2:	d909      	bls.n	8009fb8 <UART_SetConfig+0x49c>
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009faa:	d205      	bcs.n	8009fb8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	60da      	str	r2, [r3, #12]
 8009fb6:	e001      	b.n	8009fbc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009fc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3720      	adds	r7, #32
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	40007c00 	.word	0x40007c00
 8009fd8:	40023800 	.word	0x40023800
 8009fdc:	00f42400 	.word	0x00f42400

08009fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fec:	f003 0301 	and.w	r3, r3, #1
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00a      	beq.n	800a00a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	430a      	orrs	r2, r1
 800a008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	f003 0302 	and.w	r3, r3, #2
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00a      	beq.n	800a02c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	430a      	orrs	r2, r1
 800a02a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	f003 0304 	and.w	r3, r3, #4
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00a      	beq.n	800a04e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	430a      	orrs	r2, r1
 800a04c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a052:	f003 0308 	and.w	r3, r3, #8
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	430a      	orrs	r2, r1
 800a06e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	f003 0310 	and.w	r3, r3, #16
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00a      	beq.n	800a092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	f003 0320 	and.w	r3, r3, #32
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00a      	beq.n	800a0b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d01a      	beq.n	800a0f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0de:	d10a      	bne.n	800a0f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00a      	beq.n	800a118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	430a      	orrs	r2, r1
 800a116:	605a      	str	r2, [r3, #4]
  }
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b086      	sub	sp, #24
 800a128:	af02      	add	r7, sp, #8
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a134:	f7f9 ff06 	bl	8003f44 <HAL_GetTick>
 800a138:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f003 0308 	and.w	r3, r3, #8
 800a144:	2b08      	cmp	r3, #8
 800a146:	d10e      	bne.n	800a166 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f817 	bl	800a18a <UART_WaitOnFlagUntilTimeout>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d001      	beq.n	800a166 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e00d      	b.n	800a182 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2220      	movs	r2, #32
 800a16a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2220      	movs	r2, #32
 800a170:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b09c      	sub	sp, #112	; 0x70
 800a18e:	af00      	add	r7, sp, #0
 800a190:	60f8      	str	r0, [r7, #12]
 800a192:	60b9      	str	r1, [r7, #8]
 800a194:	603b      	str	r3, [r7, #0]
 800a196:	4613      	mov	r3, r2
 800a198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a19a:	e0a5      	b.n	800a2e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a19c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a2:	f000 80a1 	beq.w	800a2e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1a6:	f7f9 fecd 	bl	8003f44 <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d302      	bcc.n	800a1bc <UART_WaitOnFlagUntilTimeout+0x32>
 800a1b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d13e      	bne.n	800a23a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1c4:	e853 3f00 	ldrex	r3, [r3]
 800a1c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a1ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a1d0:	667b      	str	r3, [r7, #100]	; 0x64
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a1dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a1e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a1e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e6      	bne.n	800a1bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3308      	adds	r3, #8
 800a1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f8:	e853 3f00 	ldrex	r3, [r3]
 800a1fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a200:	f023 0301 	bic.w	r3, r3, #1
 800a204:	663b      	str	r3, [r7, #96]	; 0x60
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3308      	adds	r3, #8
 800a20c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a20e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a216:	e841 2300 	strex	r3, r2, [r1]
 800a21a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a21c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1e5      	bne.n	800a1ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2220      	movs	r2, #32
 800a226:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2220      	movs	r2, #32
 800a22c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a236:	2303      	movs	r3, #3
 800a238:	e067      	b.n	800a30a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 0304 	and.w	r3, r3, #4
 800a244:	2b00      	cmp	r3, #0
 800a246:	d04f      	beq.n	800a2e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	69db      	ldr	r3, [r3, #28]
 800a24e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a256:	d147      	bne.n	800a2e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a260:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26a:	e853 3f00 	ldrex	r3, [r3]
 800a26e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a272:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a276:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	461a      	mov	r2, r3
 800a27e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a280:	637b      	str	r3, [r7, #52]	; 0x34
 800a282:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a288:	e841 2300 	strex	r3, r2, [r1]
 800a28c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a290:	2b00      	cmp	r3, #0
 800a292:	d1e6      	bne.n	800a262 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	3308      	adds	r3, #8
 800a29a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	e853 3f00 	ldrex	r3, [r3]
 800a2a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	f023 0301 	bic.w	r3, r3, #1
 800a2aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3308      	adds	r3, #8
 800a2b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a2b4:	623a      	str	r2, [r7, #32]
 800a2b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b8:	69f9      	ldr	r1, [r7, #28]
 800a2ba:	6a3a      	ldr	r2, [r7, #32]
 800a2bc:	e841 2300 	strex	r3, r2, [r1]
 800a2c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1e5      	bne.n	800a294 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2220      	movs	r2, #32
 800a2d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2220      	movs	r2, #32
 800a2d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a2e4:	2303      	movs	r3, #3
 800a2e6:	e010      	b.n	800a30a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	69da      	ldr	r2, [r3, #28]
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	bf0c      	ite	eq
 800a2f8:	2301      	moveq	r3, #1
 800a2fa:	2300      	movne	r3, #0
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	461a      	mov	r2, r3
 800a300:	79fb      	ldrb	r3, [r7, #7]
 800a302:	429a      	cmp	r2, r3
 800a304:	f43f af4a 	beq.w	800a19c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3770      	adds	r7, #112	; 0x70
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a312:	b480      	push	{r7}
 800a314:	b095      	sub	sp, #84	; 0x54
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a322:	e853 3f00 	ldrex	r3, [r3]
 800a326:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a32e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	461a      	mov	r2, r3
 800a336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a338:	643b      	str	r3, [r7, #64]	; 0x40
 800a33a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a33e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a340:	e841 2300 	strex	r3, r2, [r1]
 800a344:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1e6      	bne.n	800a31a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3308      	adds	r3, #8
 800a352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	e853 3f00 	ldrex	r3, [r3]
 800a35a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	f023 0301 	bic.w	r3, r3, #1
 800a362:	64bb      	str	r3, [r7, #72]	; 0x48
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	3308      	adds	r3, #8
 800a36a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a36c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a36e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a374:	e841 2300 	strex	r3, r2, [r1]
 800a378:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d1e5      	bne.n	800a34c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a384:	2b01      	cmp	r3, #1
 800a386:	d118      	bne.n	800a3ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	e853 3f00 	ldrex	r3, [r3]
 800a394:	60bb      	str	r3, [r7, #8]
   return(result);
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	f023 0310 	bic.w	r3, r3, #16
 800a39c:	647b      	str	r3, [r7, #68]	; 0x44
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3a6:	61bb      	str	r3, [r7, #24]
 800a3a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3aa:	6979      	ldr	r1, [r7, #20]
 800a3ac:	69ba      	ldr	r2, [r7, #24]
 800a3ae:	e841 2300 	strex	r3, r2, [r1]
 800a3b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1e6      	bne.n	800a388 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2220      	movs	r2, #32
 800a3be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a3cc:	bf00      	nop
 800a3ce:	3754      	adds	r7, #84	; 0x54
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3f6:	68f8      	ldr	r0, [r7, #12]
 800a3f8:	f7ff fb7a 	bl	8009af0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3fc:	bf00      	nop
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b088      	sub	sp, #32
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	e853 3f00 	ldrex	r3, [r3]
 800a418:	60bb      	str	r3, [r7, #8]
   return(result);
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a420:	61fb      	str	r3, [r7, #28]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	461a      	mov	r2, r3
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	61bb      	str	r3, [r7, #24]
 800a42c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42e:	6979      	ldr	r1, [r7, #20]
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	e841 2300 	strex	r3, r2, [r1]
 800a436:	613b      	str	r3, [r7, #16]
   return(result);
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1e6      	bne.n	800a40c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2220      	movs	r2, #32
 800a442:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff fb46 	bl	8009adc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a450:	bf00      	nop
 800a452:	3720      	adds	r7, #32
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d121      	bne.n	800a4ae <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	4b27      	ldr	r3, [pc, #156]	; (800a50c <FMC_SDRAM_Init+0xb4>)
 800a470:	4013      	ands	r3, r2
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	6851      	ldr	r1, [r2, #4]
 800a476:	683a      	ldr	r2, [r7, #0]
 800a478:	6892      	ldr	r2, [r2, #8]
 800a47a:	4311      	orrs	r1, r2
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	68d2      	ldr	r2, [r2, #12]
 800a480:	4311      	orrs	r1, r2
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	6912      	ldr	r2, [r2, #16]
 800a486:	4311      	orrs	r1, r2
 800a488:	683a      	ldr	r2, [r7, #0]
 800a48a:	6952      	ldr	r2, [r2, #20]
 800a48c:	4311      	orrs	r1, r2
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	6992      	ldr	r2, [r2, #24]
 800a492:	4311      	orrs	r1, r2
 800a494:	683a      	ldr	r2, [r7, #0]
 800a496:	69d2      	ldr	r2, [r2, #28]
 800a498:	4311      	orrs	r1, r2
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	6a12      	ldr	r2, [r2, #32]
 800a49e:	4311      	orrs	r1, r2
 800a4a0:	683a      	ldr	r2, [r7, #0]
 800a4a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a4a4:	430a      	orrs	r2, r1
 800a4a6:	431a      	orrs	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	601a      	str	r2, [r3, #0]
 800a4ac:	e026      	b.n	800a4fc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	69d9      	ldr	r1, [r3, #28]
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	4319      	orrs	r1, r3
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c4:	430b      	orrs	r3, r1
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	685a      	ldr	r2, [r3, #4]
 800a4d0:	4b0e      	ldr	r3, [pc, #56]	; (800a50c <FMC_SDRAM_Init+0xb4>)
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	6851      	ldr	r1, [r2, #4]
 800a4d8:	683a      	ldr	r2, [r7, #0]
 800a4da:	6892      	ldr	r2, [r2, #8]
 800a4dc:	4311      	orrs	r1, r2
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	68d2      	ldr	r2, [r2, #12]
 800a4e2:	4311      	orrs	r1, r2
 800a4e4:	683a      	ldr	r2, [r7, #0]
 800a4e6:	6912      	ldr	r2, [r2, #16]
 800a4e8:	4311      	orrs	r1, r2
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	6952      	ldr	r2, [r2, #20]
 800a4ee:	4311      	orrs	r1, r2
 800a4f0:	683a      	ldr	r2, [r7, #0]
 800a4f2:	6992      	ldr	r2, [r2, #24]
 800a4f4:	430a      	orrs	r2, r1
 800a4f6:	431a      	orrs	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	370c      	adds	r7, #12
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	ffff8000 	.word	0xffff8000

0800a510 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d128      	bne.n	800a574 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	1e59      	subs	r1, r3, #1
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	3b01      	subs	r3, #1
 800a536:	011b      	lsls	r3, r3, #4
 800a538:	4319      	orrs	r1, r3
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	3b01      	subs	r3, #1
 800a540:	021b      	lsls	r3, r3, #8
 800a542:	4319      	orrs	r1, r3
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	3b01      	subs	r3, #1
 800a54a:	031b      	lsls	r3, r3, #12
 800a54c:	4319      	orrs	r1, r3
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	691b      	ldr	r3, [r3, #16]
 800a552:	3b01      	subs	r3, #1
 800a554:	041b      	lsls	r3, r3, #16
 800a556:	4319      	orrs	r1, r3
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	695b      	ldr	r3, [r3, #20]
 800a55c:	3b01      	subs	r3, #1
 800a55e:	051b      	lsls	r3, r3, #20
 800a560:	4319      	orrs	r1, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	3b01      	subs	r3, #1
 800a568:	061b      	lsls	r3, r3, #24
 800a56a:	430b      	orrs	r3, r1
 800a56c:	431a      	orrs	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	609a      	str	r2, [r3, #8]
 800a572:	e02d      	b.n	800a5d0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	689a      	ldr	r2, [r3, #8]
 800a578:	4b19      	ldr	r3, [pc, #100]	; (800a5e0 <FMC_SDRAM_Timing_Init+0xd0>)
 800a57a:	4013      	ands	r3, r2
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	68d2      	ldr	r2, [r2, #12]
 800a580:	3a01      	subs	r2, #1
 800a582:	0311      	lsls	r1, r2, #12
 800a584:	68ba      	ldr	r2, [r7, #8]
 800a586:	6952      	ldr	r2, [r2, #20]
 800a588:	3a01      	subs	r2, #1
 800a58a:	0512      	lsls	r2, r2, #20
 800a58c:	430a      	orrs	r2, r1
 800a58e:	431a      	orrs	r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	1e59      	subs	r1, r3, #1
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	011b      	lsls	r3, r3, #4
 800a5aa:	4319      	orrs	r1, r3
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	021b      	lsls	r3, r3, #8
 800a5b4:	4319      	orrs	r1, r3
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	691b      	ldr	r3, [r3, #16]
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	041b      	lsls	r3, r3, #16
 800a5be:	4319      	orrs	r1, r3
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	061b      	lsls	r3, r3, #24
 800a5c8:	430b      	orrs	r3, r1
 800a5ca:	431a      	orrs	r2, r3
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3714      	adds	r7, #20
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	ff0f0fff 	.word	0xff0f0fff

0800a5e4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	691a      	ldr	r2, [r3, #16]
 800a5f4:	4b0c      	ldr	r3, [pc, #48]	; (800a628 <FMC_SDRAM_SendCommand+0x44>)
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	6811      	ldr	r1, [r2, #0]
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	6852      	ldr	r2, [r2, #4]
 800a600:	4311      	orrs	r1, r2
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	6892      	ldr	r2, [r2, #8]
 800a606:	3a01      	subs	r2, #1
 800a608:	0152      	lsls	r2, r2, #5
 800a60a:	4311      	orrs	r1, r2
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	68d2      	ldr	r2, [r2, #12]
 800a610:	0252      	lsls	r2, r2, #9
 800a612:	430a      	orrs	r2, r1
 800a614:	431a      	orrs	r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	ffc00000 	.word	0xffc00000

0800a62c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	695a      	ldr	r2, [r3, #20]
 800a63a:	4b07      	ldr	r3, [pc, #28]	; (800a658 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a63c:	4013      	ands	r3, r2
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	0052      	lsls	r2, r2, #1
 800a642:	431a      	orrs	r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	370c      	adds	r7, #12
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	ffffc001 	.word	0xffffc001

0800a65c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	4603      	mov	r3, r0
 800a664:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a666:	2300      	movs	r3, #0
 800a668:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a66a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a66e:	2b84      	cmp	r3, #132	; 0x84
 800a670:	d005      	beq.n	800a67e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a672:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	4413      	add	r3, r2
 800a67a:	3303      	adds	r3, #3
 800a67c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a67e:	68fb      	ldr	r3, [r7, #12]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a690:	f001 f87a 	bl	800b788 <vTaskStartScheduler>
  
  return osOK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	bd80      	pop	{r7, pc}

0800a69a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a69a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a69c:	b089      	sub	sp, #36	; 0x24
 800a69e:	af04      	add	r7, sp, #16
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	695b      	ldr	r3, [r3, #20]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d020      	beq.n	800a6ee <osThreadCreate+0x54>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d01c      	beq.n	800a6ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685c      	ldr	r4, [r3, #4]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681d      	ldr	r5, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	691e      	ldr	r6, [r3, #16]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7ff ffc8 	bl	800a65c <makeFreeRtosPriority>
 800a6cc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	695b      	ldr	r3, [r3, #20]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6d6:	9202      	str	r2, [sp, #8]
 800a6d8:	9301      	str	r3, [sp, #4]
 800a6da:	9100      	str	r1, [sp, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	4632      	mov	r2, r6
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f000 fcf4 	bl	800b0d0 <xTaskCreateStatic>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	60fb      	str	r3, [r7, #12]
 800a6ec:	e01c      	b.n	800a728 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685c      	ldr	r4, [r3, #4]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a6fa:	b29e      	uxth	r6, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff ffaa 	bl	800a65c <makeFreeRtosPriority>
 800a708:	4602      	mov	r2, r0
 800a70a:	f107 030c 	add.w	r3, r7, #12
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	9200      	str	r2, [sp, #0]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	4632      	mov	r2, r6
 800a716:	4629      	mov	r1, r5
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 fd3c 	bl	800b196 <xTaskCreate>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b01      	cmp	r3, #1
 800a722:	d001      	beq.n	800a728 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a724:	2300      	movs	r3, #0
 800a726:	e000      	b.n	800a72a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a728:	68fb      	ldr	r3, [r7, #12]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a732 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a732:	b480      	push	{r7}
 800a734:	b083      	sub	sp, #12
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f103 0208 	add.w	r2, r3, #8
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f04f 32ff 	mov.w	r2, #4294967295
 800a74a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f103 0208 	add.w	r2, r3, #8
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f103 0208 	add.w	r2, r3, #8
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a766:	bf00      	nop
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr

0800a772 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a772:	b480      	push	{r7}
 800a774:	b083      	sub	sp, #12
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	689a      	ldr	r2, [r3, #8]
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	683a      	ldr	r2, [r7, #0]
 800a7b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	601a      	str	r2, [r3, #0]
}
 800a7c8:	bf00      	nop
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ea:	d103      	bne.n	800a7f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	60fb      	str	r3, [r7, #12]
 800a7f2:	e00c      	b.n	800a80e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	3308      	adds	r3, #8
 800a7f8:	60fb      	str	r3, [r7, #12]
 800a7fa:	e002      	b.n	800a802 <vListInsert+0x2e>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	60fb      	str	r3, [r7, #12]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d2f6      	bcs.n	800a7fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	685a      	ldr	r2, [r3, #4]
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	683a      	ldr	r2, [r7, #0]
 800a81c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	1c5a      	adds	r2, r3, #1
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	601a      	str	r2, [r3, #0]
}
 800a83a:	bf00      	nop
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a846:	b480      	push	{r7}
 800a848:	b085      	sub	sp, #20
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	6892      	ldr	r2, [r2, #8]
 800a85c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6852      	ldr	r2, [r2, #4]
 800a866:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d103      	bne.n	800a87a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	689a      	ldr	r2, [r3, #8]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	1e5a      	subs	r2, r3, #1
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
	...

0800a89c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10c      	bne.n	800a8ca <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	b672      	cpsid	i
 800a8b6:	f383 8811 	msr	BASEPRI, r3
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	f3bf 8f4f 	dsb	sy
 800a8c2:	b662      	cpsie	i
 800a8c4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a8c6:	bf00      	nop
 800a8c8:	e7fe      	b.n	800a8c8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a8ca:	f001 fecf 	bl	800c66c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8d6:	68f9      	ldr	r1, [r7, #12]
 800a8d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a8da:	fb01 f303 	mul.w	r3, r1, r3
 800a8de:	441a      	add	r2, r3
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681a      	ldr	r2, [r3, #0]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	68f9      	ldr	r1, [r7, #12]
 800a8fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a900:	fb01 f303 	mul.w	r3, r1, r3
 800a904:	441a      	add	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	22ff      	movs	r2, #255	; 0xff
 800a90e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	22ff      	movs	r2, #255	; 0xff
 800a916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d114      	bne.n	800a94a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d01a      	beq.n	800a95e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	3310      	adds	r3, #16
 800a92c:	4618      	mov	r0, r3
 800a92e:	f001 f989 	bl	800bc44 <xTaskRemoveFromEventList>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d012      	beq.n	800a95e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a938:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <xQueueGenericReset+0xd0>)
 800a93a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	e009      	b.n	800a95e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	3310      	adds	r3, #16
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff feef 	bl	800a732 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3324      	adds	r3, #36	; 0x24
 800a958:	4618      	mov	r0, r3
 800a95a:	f7ff feea 	bl	800a732 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a95e:	f001 feb9 	bl	800c6d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a962:	2301      	movs	r3, #1
}
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	e000ed04 	.word	0xe000ed04

0800a970 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08a      	sub	sp, #40	; 0x28
 800a974:	af02      	add	r7, sp, #8
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	4613      	mov	r3, r2
 800a97c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10c      	bne.n	800a99e <xQueueGenericCreate+0x2e>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a988:	b672      	cpsid	i
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	b662      	cpsie	i
 800a998:	613b      	str	r3, [r7, #16]
}
 800a99a:	bf00      	nop
 800a99c:	e7fe      	b.n	800a99c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d102      	bne.n	800a9aa <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	61fb      	str	r3, [r7, #28]
 800a9a8:	e004      	b.n	800a9b4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	fb02 f303 	mul.w	r3, r2, r3
 800a9b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	3348      	adds	r3, #72	; 0x48
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f001 ff3f 	bl	800c83c <pvPortMalloc>
 800a9be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d011      	beq.n	800a9ea <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	3348      	adds	r3, #72	; 0x48
 800a9ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9d8:	79fa      	ldrb	r2, [r7, #7]
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	68b9      	ldr	r1, [r7, #8]
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f000 f805 	bl	800a9f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9ea:	69bb      	ldr	r3, [r7, #24]
	}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3720      	adds	r7, #32
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d103      	bne.n	800aa10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	601a      	str	r2, [r3, #0]
 800aa0e:	e002      	b.n	800aa16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	68ba      	ldr	r2, [r7, #8]
 800aa20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa22:	2101      	movs	r1, #1
 800aa24:	69b8      	ldr	r0, [r7, #24]
 800aa26:	f7ff ff39 	bl	800a89c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa2a:	bf00      	nop
 800aa2c:	3710      	adds	r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800aa32:	b580      	push	{r7, lr}
 800aa34:	b082      	sub	sp, #8
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00e      	beq.n	800aa5e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800aa52:	2300      	movs	r3, #0
 800aa54:	2200      	movs	r2, #0
 800aa56:	2100      	movs	r1, #0
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 f81d 	bl	800aa98 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800aa5e:	bf00      	nop
 800aa60:	3708      	adds	r7, #8
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b086      	sub	sp, #24
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aa70:	2301      	movs	r3, #1
 800aa72:	617b      	str	r3, [r7, #20]
 800aa74:	2300      	movs	r3, #0
 800aa76:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800aa78:	79fb      	ldrb	r3, [r7, #7]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	6939      	ldr	r1, [r7, #16]
 800aa7e:	6978      	ldr	r0, [r7, #20]
 800aa80:	f7ff ff76 	bl	800a970 <xQueueGenericCreate>
 800aa84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f7ff ffd3 	bl	800aa32 <prvInitialiseMutex>

		return xNewQueue;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
	}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3718      	adds	r7, #24
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
	...

0800aa98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08e      	sub	sp, #56	; 0x38
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
 800aaa4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d10c      	bne.n	800aace <xQueueGenericSend+0x36>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	b672      	cpsid	i
 800aaba:	f383 8811 	msr	BASEPRI, r3
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	f3bf 8f4f 	dsb	sy
 800aac6:	b662      	cpsie	i
 800aac8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aaca:	bf00      	nop
 800aacc:	e7fe      	b.n	800aacc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d103      	bne.n	800aadc <xQueueGenericSend+0x44>
 800aad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <xQueueGenericSend+0x48>
 800aadc:	2301      	movs	r3, #1
 800aade:	e000      	b.n	800aae2 <xQueueGenericSend+0x4a>
 800aae0:	2300      	movs	r3, #0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10c      	bne.n	800ab00 <xQueueGenericSend+0x68>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaea:	b672      	cpsid	i
 800aaec:	f383 8811 	msr	BASEPRI, r3
 800aaf0:	f3bf 8f6f 	isb	sy
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	b662      	cpsie	i
 800aafa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aafc:	bf00      	nop
 800aafe:	e7fe      	b.n	800aafe <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d103      	bne.n	800ab0e <xQueueGenericSend+0x76>
 800ab06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d101      	bne.n	800ab12 <xQueueGenericSend+0x7a>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e000      	b.n	800ab14 <xQueueGenericSend+0x7c>
 800ab12:	2300      	movs	r3, #0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10c      	bne.n	800ab32 <xQueueGenericSend+0x9a>
	__asm volatile
 800ab18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1c:	b672      	cpsid	i
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	b662      	cpsie	i
 800ab2c:	623b      	str	r3, [r7, #32]
}
 800ab2e:	bf00      	nop
 800ab30:	e7fe      	b.n	800ab30 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab32:	f001 fa4f 	bl	800bfd4 <xTaskGetSchedulerState>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d102      	bne.n	800ab42 <xQueueGenericSend+0xaa>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d101      	bne.n	800ab46 <xQueueGenericSend+0xae>
 800ab42:	2301      	movs	r3, #1
 800ab44:	e000      	b.n	800ab48 <xQueueGenericSend+0xb0>
 800ab46:	2300      	movs	r3, #0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10c      	bne.n	800ab66 <xQueueGenericSend+0xce>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	b672      	cpsid	i
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	b662      	cpsie	i
 800ab60:	61fb      	str	r3, [r7, #28]
}
 800ab62:	bf00      	nop
 800ab64:	e7fe      	b.n	800ab64 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab66:	f001 fd81 	bl	800c66c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d302      	bcc.n	800ab7c <xQueueGenericSend+0xe4>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b02      	cmp	r3, #2
 800ab7a:	d129      	bne.n	800abd0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	68b9      	ldr	r1, [r7, #8]
 800ab80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab82:	f000 f9bb 	bl	800aefc <prvCopyDataToQueue>
 800ab86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d010      	beq.n	800abb2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	3324      	adds	r3, #36	; 0x24
 800ab94:	4618      	mov	r0, r3
 800ab96:	f001 f855 	bl	800bc44 <xTaskRemoveFromEventList>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d013      	beq.n	800abc8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aba0:	4b3f      	ldr	r3, [pc, #252]	; (800aca0 <xQueueGenericSend+0x208>)
 800aba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	e00a      	b.n	800abc8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800abb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d007      	beq.n	800abc8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800abb8:	4b39      	ldr	r3, [pc, #228]	; (800aca0 <xQueueGenericSend+0x208>)
 800abba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abbe:	601a      	str	r2, [r3, #0]
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800abc8:	f001 fd84 	bl	800c6d4 <vPortExitCritical>
				return pdPASS;
 800abcc:	2301      	movs	r3, #1
 800abce:	e063      	b.n	800ac98 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d103      	bne.n	800abde <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abd6:	f001 fd7d 	bl	800c6d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	e05c      	b.n	800ac98 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d106      	bne.n	800abf2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abe4:	f107 0314 	add.w	r3, r7, #20
 800abe8:	4618      	mov	r0, r3
 800abea:	f001 f88f 	bl	800bd0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abee:	2301      	movs	r3, #1
 800abf0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abf2:	f001 fd6f 	bl	800c6d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abf6:	f000 fe35 	bl	800b864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abfa:	f001 fd37 	bl	800c66c <vPortEnterCritical>
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac04:	b25b      	sxtb	r3, r3
 800ac06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0a:	d103      	bne.n	800ac14 <xQueueGenericSend+0x17c>
 800ac0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac1a:	b25b      	sxtb	r3, r3
 800ac1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac20:	d103      	bne.n	800ac2a <xQueueGenericSend+0x192>
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac2a:	f001 fd53 	bl	800c6d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac2e:	1d3a      	adds	r2, r7, #4
 800ac30:	f107 0314 	add.w	r3, r7, #20
 800ac34:	4611      	mov	r1, r2
 800ac36:	4618      	mov	r0, r3
 800ac38:	f001 f87e 	bl	800bd38 <xTaskCheckForTimeOut>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d124      	bne.n	800ac8c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac44:	f000 fa2c 	bl	800b0a0 <prvIsQueueFull>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d018      	beq.n	800ac80 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac50:	3310      	adds	r3, #16
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	4611      	mov	r1, r2
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 ffce 	bl	800bbf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac5e:	f000 f9b7 	bl	800afd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac62:	f000 fe0d 	bl	800b880 <xTaskResumeAll>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f47f af7c 	bne.w	800ab66 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800ac6e:	4b0c      	ldr	r3, [pc, #48]	; (800aca0 <xQueueGenericSend+0x208>)
 800ac70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac74:	601a      	str	r2, [r3, #0]
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	e772      	b.n	800ab66 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac82:	f000 f9a5 	bl	800afd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac86:	f000 fdfb 	bl	800b880 <xTaskResumeAll>
 800ac8a:	e76c      	b.n	800ab66 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac8e:	f000 f99f 	bl	800afd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac92:	f000 fdf5 	bl	800b880 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3738      	adds	r7, #56	; 0x38
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	e000ed04 	.word	0xe000ed04

0800aca4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08e      	sub	sp, #56	; 0x38
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800acae:	2300      	movs	r3, #0
 800acb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800acb6:	2300      	movs	r3, #0
 800acb8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800acba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10c      	bne.n	800acda <xQueueSemaphoreTake+0x36>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	b672      	cpsid	i
 800acc6:	f383 8811 	msr	BASEPRI, r3
 800acca:	f3bf 8f6f 	isb	sy
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	b662      	cpsie	i
 800acd4:	623b      	str	r3, [r7, #32]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800acda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00c      	beq.n	800acfc <xQueueSemaphoreTake+0x58>
	__asm volatile
 800ace2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace6:	b672      	cpsid	i
 800ace8:	f383 8811 	msr	BASEPRI, r3
 800acec:	f3bf 8f6f 	isb	sy
 800acf0:	f3bf 8f4f 	dsb	sy
 800acf4:	b662      	cpsie	i
 800acf6:	61fb      	str	r3, [r7, #28]
}
 800acf8:	bf00      	nop
 800acfa:	e7fe      	b.n	800acfa <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acfc:	f001 f96a 	bl	800bfd4 <xTaskGetSchedulerState>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d102      	bne.n	800ad0c <xQueueSemaphoreTake+0x68>
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d101      	bne.n	800ad10 <xQueueSemaphoreTake+0x6c>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e000      	b.n	800ad12 <xQueueSemaphoreTake+0x6e>
 800ad10:	2300      	movs	r3, #0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10c      	bne.n	800ad30 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	b672      	cpsid	i
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	b662      	cpsie	i
 800ad2a:	61bb      	str	r3, [r7, #24]
}
 800ad2c:	bf00      	nop
 800ad2e:	e7fe      	b.n	800ad2e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad30:	f001 fc9c 	bl	800c66c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ad34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad38:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ad3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d024      	beq.n	800ad8a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ad40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad42:	1e5a      	subs	r2, r3, #1
 800ad44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad46:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d104      	bne.n	800ad5a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ad50:	f001 fb06 	bl	800c360 <pvTaskIncrementMutexHeldCount>
 800ad54:	4602      	mov	r2, r0
 800ad56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad58:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00f      	beq.n	800ad82 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad64:	3310      	adds	r3, #16
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 ff6c 	bl	800bc44 <xTaskRemoveFromEventList>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d007      	beq.n	800ad82 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad72:	4b55      	ldr	r3, [pc, #340]	; (800aec8 <xQueueSemaphoreTake+0x224>)
 800ad74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad78:	601a      	str	r2, [r3, #0]
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ad82:	f001 fca7 	bl	800c6d4 <vPortExitCritical>
				return pdPASS;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e099      	b.n	800aebe <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d113      	bne.n	800adb8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00c      	beq.n	800adb0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	b672      	cpsid	i
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	b662      	cpsie	i
 800adaa:	617b      	str	r3, [r7, #20]
}
 800adac:	bf00      	nop
 800adae:	e7fe      	b.n	800adae <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800adb0:	f001 fc90 	bl	800c6d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800adb4:	2300      	movs	r3, #0
 800adb6:	e082      	b.n	800aebe <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d106      	bne.n	800adcc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800adbe:	f107 030c 	add.w	r3, r7, #12
 800adc2:	4618      	mov	r0, r3
 800adc4:	f000 ffa2 	bl	800bd0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800adc8:	2301      	movs	r3, #1
 800adca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800adcc:	f001 fc82 	bl	800c6d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800add0:	f000 fd48 	bl	800b864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800add4:	f001 fc4a 	bl	800c66c <vPortEnterCritical>
 800add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800adde:	b25b      	sxtb	r3, r3
 800ade0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade4:	d103      	bne.n	800adee <xQueueSemaphoreTake+0x14a>
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800adf4:	b25b      	sxtb	r3, r3
 800adf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfa:	d103      	bne.n	800ae04 <xQueueSemaphoreTake+0x160>
 800adfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae04:	f001 fc66 	bl	800c6d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae08:	463a      	mov	r2, r7
 800ae0a:	f107 030c 	add.w	r3, r7, #12
 800ae0e:	4611      	mov	r1, r2
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 ff91 	bl	800bd38 <xTaskCheckForTimeOut>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d132      	bne.n	800ae82 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae1e:	f000 f929 	bl	800b074 <prvIsQueueEmpty>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d026      	beq.n	800ae76 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d109      	bne.n	800ae44 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800ae30:	f001 fc1c 	bl	800c66c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f001 f8e9 	bl	800c010 <xTaskPriorityInherit>
 800ae3e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ae40:	f001 fc48 	bl	800c6d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae46:	3324      	adds	r3, #36	; 0x24
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	4611      	mov	r1, r2
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 fed3 	bl	800bbf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae54:	f000 f8bc 	bl	800afd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae58:	f000 fd12 	bl	800b880 <xTaskResumeAll>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f47f af66 	bne.w	800ad30 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800ae64:	4b18      	ldr	r3, [pc, #96]	; (800aec8 <xQueueSemaphoreTake+0x224>)
 800ae66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae6a:	601a      	str	r2, [r3, #0]
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	f3bf 8f6f 	isb	sy
 800ae74:	e75c      	b.n	800ad30 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ae76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae78:	f000 f8aa 	bl	800afd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae7c:	f000 fd00 	bl	800b880 <xTaskResumeAll>
 800ae80:	e756      	b.n	800ad30 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ae82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae84:	f000 f8a4 	bl	800afd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae88:	f000 fcfa 	bl	800b880 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae8e:	f000 f8f1 	bl	800b074 <prvIsQueueEmpty>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f43f af4b 	beq.w	800ad30 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00d      	beq.n	800aebc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800aea0:	f001 fbe4 	bl	800c66c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aea4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aea6:	f000 f811 	bl	800aecc <prvGetDisinheritPriorityAfterTimeout>
 800aeaa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aeac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f001 f9b6 	bl	800c224 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aeb8:	f001 fc0c 	bl	800c6d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aebc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3738      	adds	r7, #56	; 0x38
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	e000ed04 	.word	0xe000ed04

0800aecc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aecc:	b480      	push	{r7}
 800aece:	b085      	sub	sp, #20
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d006      	beq.n	800aeea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f1c3 0307 	rsb	r3, r3, #7
 800aee6:	60fb      	str	r3, [r7, #12]
 800aee8:	e001      	b.n	800aeee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aeea:	2300      	movs	r3, #0
 800aeec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aeee:	68fb      	ldr	r3, [r7, #12]
	}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3714      	adds	r7, #20
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af08:	2300      	movs	r3, #0
 800af0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10d      	bne.n	800af36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d14d      	bne.n	800afbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	4618      	mov	r0, r3
 800af28:	f001 f8f2 	bl	800c110 <xTaskPriorityDisinherit>
 800af2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2200      	movs	r2, #0
 800af32:	609a      	str	r2, [r3, #8]
 800af34:	e043      	b.n	800afbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d119      	bne.n	800af70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6858      	ldr	r0, [r3, #4]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af44:	461a      	mov	r2, r3
 800af46:	68b9      	ldr	r1, [r7, #8]
 800af48:	f001 fe82 	bl	800cc50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	685a      	ldr	r2, [r3, #4]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af54:	441a      	add	r2, r3
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	685a      	ldr	r2, [r3, #4]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	429a      	cmp	r2, r3
 800af64:	d32b      	bcc.n	800afbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	605a      	str	r2, [r3, #4]
 800af6e:	e026      	b.n	800afbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	68d8      	ldr	r0, [r3, #12]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af78:	461a      	mov	r2, r3
 800af7a:	68b9      	ldr	r1, [r7, #8]
 800af7c:	f001 fe68 	bl	800cc50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	68da      	ldr	r2, [r3, #12]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af88:	425b      	negs	r3, r3
 800af8a:	441a      	add	r2, r3
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	68da      	ldr	r2, [r3, #12]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d207      	bcs.n	800afac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	689a      	ldr	r2, [r3, #8]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa4:	425b      	negs	r3, r3
 800afa6:	441a      	add	r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d105      	bne.n	800afbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d002      	beq.n	800afbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	3b01      	subs	r3, #1
 800afbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	1c5a      	adds	r2, r3, #1
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800afc6:	697b      	ldr	r3, [r7, #20]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3718      	adds	r7, #24
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800afd8:	f001 fb48 	bl	800c66c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afe2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afe4:	e011      	b.n	800b00a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afea:	2b00      	cmp	r3, #0
 800afec:	d012      	beq.n	800b014 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3324      	adds	r3, #36	; 0x24
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 fe26 	bl	800bc44 <xTaskRemoveFromEventList>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b00      	cmp	r3, #0
 800affc:	d001      	beq.n	800b002 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800affe:	f000 ff01 	bl	800be04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b002:	7bfb      	ldrb	r3, [r7, #15]
 800b004:	3b01      	subs	r3, #1
 800b006:	b2db      	uxtb	r3, r3
 800b008:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b00a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	dce9      	bgt.n	800afe6 <prvUnlockQueue+0x16>
 800b012:	e000      	b.n	800b016 <prvUnlockQueue+0x46>
					break;
 800b014:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	22ff      	movs	r2, #255	; 0xff
 800b01a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b01e:	f001 fb59 	bl	800c6d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b022:	f001 fb23 	bl	800c66c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b02c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b02e:	e011      	b.n	800b054 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d012      	beq.n	800b05e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	3310      	adds	r3, #16
 800b03c:	4618      	mov	r0, r3
 800b03e:	f000 fe01 	bl	800bc44 <xTaskRemoveFromEventList>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b048:	f000 fedc 	bl	800be04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b04c:	7bbb      	ldrb	r3, [r7, #14]
 800b04e:	3b01      	subs	r3, #1
 800b050:	b2db      	uxtb	r3, r3
 800b052:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	dce9      	bgt.n	800b030 <prvUnlockQueue+0x60>
 800b05c:	e000      	b.n	800b060 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b05e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	22ff      	movs	r2, #255	; 0xff
 800b064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b068:	f001 fb34 	bl	800c6d4 <vPortExitCritical>
}
 800b06c:	bf00      	nop
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b07c:	f001 faf6 	bl	800c66c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b084:	2b00      	cmp	r3, #0
 800b086:	d102      	bne.n	800b08e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b088:	2301      	movs	r3, #1
 800b08a:	60fb      	str	r3, [r7, #12]
 800b08c:	e001      	b.n	800b092 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b08e:	2300      	movs	r3, #0
 800b090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b092:	f001 fb1f 	bl	800c6d4 <vPortExitCritical>

	return xReturn;
 800b096:	68fb      	ldr	r3, [r7, #12]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3710      	adds	r7, #16
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0a8:	f001 fae0 	bl	800c66c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d102      	bne.n	800b0be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	60fb      	str	r3, [r7, #12]
 800b0bc:	e001      	b.n	800b0c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0c2:	f001 fb07 	bl	800c6d4 <vPortExitCritical>

	return xReturn;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b08e      	sub	sp, #56	; 0x38
 800b0d4:	af04      	add	r7, sp, #16
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
 800b0dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10c      	bne.n	800b0fe <xTaskCreateStatic+0x2e>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e8:	b672      	cpsid	i
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	b662      	cpsie	i
 800b0f8:	623b      	str	r3, [r7, #32]
}
 800b0fa:	bf00      	nop
 800b0fc:	e7fe      	b.n	800b0fc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10c      	bne.n	800b11e <xTaskCreateStatic+0x4e>
	__asm volatile
 800b104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b108:	b672      	cpsid	i
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	b662      	cpsie	i
 800b118:	61fb      	str	r3, [r7, #28]
}
 800b11a:	bf00      	nop
 800b11c:	e7fe      	b.n	800b11c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b11e:	23b4      	movs	r3, #180	; 0xb4
 800b120:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	2bb4      	cmp	r3, #180	; 0xb4
 800b126:	d00c      	beq.n	800b142 <xTaskCreateStatic+0x72>
	__asm volatile
 800b128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b12c:	b672      	cpsid	i
 800b12e:	f383 8811 	msr	BASEPRI, r3
 800b132:	f3bf 8f6f 	isb	sy
 800b136:	f3bf 8f4f 	dsb	sy
 800b13a:	b662      	cpsie	i
 800b13c:	61bb      	str	r3, [r7, #24]
}
 800b13e:	bf00      	nop
 800b140:	e7fe      	b.n	800b140 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b142:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b146:	2b00      	cmp	r3, #0
 800b148:	d01e      	beq.n	800b188 <xTaskCreateStatic+0xb8>
 800b14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d01b      	beq.n	800b188 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b152:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b158:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15c:	2202      	movs	r2, #2
 800b15e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b162:	2300      	movs	r3, #0
 800b164:	9303      	str	r3, [sp, #12]
 800b166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b168:	9302      	str	r3, [sp, #8]
 800b16a:	f107 0314 	add.w	r3, r7, #20
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	68b9      	ldr	r1, [r7, #8]
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f000 f850 	bl	800b220 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b182:	f000 f8ed 	bl	800b360 <prvAddNewTaskToReadyList>
 800b186:	e001      	b.n	800b18c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b188:	2300      	movs	r3, #0
 800b18a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b18c:	697b      	ldr	r3, [r7, #20]
	}
 800b18e:	4618      	mov	r0, r3
 800b190:	3728      	adds	r7, #40	; 0x28
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b196:	b580      	push	{r7, lr}
 800b198:	b08c      	sub	sp, #48	; 0x30
 800b19a:	af04      	add	r7, sp, #16
 800b19c:	60f8      	str	r0, [r7, #12]
 800b19e:	60b9      	str	r1, [r7, #8]
 800b1a0:	603b      	str	r3, [r7, #0]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1a6:	88fb      	ldrh	r3, [r7, #6]
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f001 fb46 	bl	800c83c <pvPortMalloc>
 800b1b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d00e      	beq.n	800b1d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1b8:	20b4      	movs	r0, #180	; 0xb4
 800b1ba:	f001 fb3f 	bl	800c83c <pvPortMalloc>
 800b1be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d003      	beq.n	800b1ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	631a      	str	r2, [r3, #48]	; 0x30
 800b1cc:	e005      	b.n	800b1da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b1ce:	6978      	ldr	r0, [r7, #20]
 800b1d0:	f001 fbfe 	bl	800c9d0 <vPortFree>
 800b1d4:	e001      	b.n	800b1da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d017      	beq.n	800b210 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b1e8:	88fa      	ldrh	r2, [r7, #6]
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	9303      	str	r3, [sp, #12]
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	9302      	str	r3, [sp, #8]
 800b1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f4:	9301      	str	r3, [sp, #4]
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68b9      	ldr	r1, [r7, #8]
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f000 f80e 	bl	800b220 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b204:	69f8      	ldr	r0, [r7, #28]
 800b206:	f000 f8ab 	bl	800b360 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b20a:	2301      	movs	r3, #1
 800b20c:	61bb      	str	r3, [r7, #24]
 800b20e:	e002      	b.n	800b216 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b210:	f04f 33ff 	mov.w	r3, #4294967295
 800b214:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b216:	69bb      	ldr	r3, [r7, #24]
	}
 800b218:	4618      	mov	r0, r3
 800b21a:	3720      	adds	r7, #32
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b088      	sub	sp, #32
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
 800b22c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b238:	440b      	add	r3, r1
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	4413      	add	r3, r2
 800b23e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	f023 0307 	bic.w	r3, r3, #7
 800b246:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	f003 0307 	and.w	r3, r3, #7
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00c      	beq.n	800b26c <prvInitialiseNewTask+0x4c>
	__asm volatile
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	b672      	cpsid	i
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	b662      	cpsie	i
 800b266:	617b      	str	r3, [r7, #20]
}
 800b268:	bf00      	nop
 800b26a:	e7fe      	b.n	800b26a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d01f      	beq.n	800b2b2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b272:	2300      	movs	r3, #0
 800b274:	61fb      	str	r3, [r7, #28]
 800b276:	e012      	b.n	800b29e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b278:	68ba      	ldr	r2, [r7, #8]
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	4413      	add	r3, r2
 800b27e:	7819      	ldrb	r1, [r3, #0]
 800b280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	4413      	add	r3, r2
 800b286:	3334      	adds	r3, #52	; 0x34
 800b288:	460a      	mov	r2, r1
 800b28a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	4413      	add	r3, r2
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d006      	beq.n	800b2a6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	3301      	adds	r3, #1
 800b29c:	61fb      	str	r3, [r7, #28]
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	2b0f      	cmp	r3, #15
 800b2a2:	d9e9      	bls.n	800b278 <prvInitialiseNewTask+0x58>
 800b2a4:	e000      	b.n	800b2a8 <prvInitialiseNewTask+0x88>
			{
				break;
 800b2a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2b0:	e003      	b.n	800b2ba <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2bc:	2b06      	cmp	r3, #6
 800b2be:	d901      	bls.n	800b2c4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b2c0:	2306      	movs	r3, #6
 800b2c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	3304      	adds	r3, #4
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7ff fa49 	bl	800a772 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e2:	3318      	adds	r3, #24
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7ff fa44 	bl	800a772 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f2:	f1c3 0207 	rsb	r2, r3, #7
 800b2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b302:	2200      	movs	r2, #0
 800b304:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b312:	334c      	adds	r3, #76	; 0x4c
 800b314:	2260      	movs	r2, #96	; 0x60
 800b316:	2100      	movs	r1, #0
 800b318:	4618      	mov	r0, r3
 800b31a:	f001 fca7 	bl	800cc6c <memset>
 800b31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b320:	4a0c      	ldr	r2, [pc, #48]	; (800b354 <prvInitialiseNewTask+0x134>)
 800b322:	651a      	str	r2, [r3, #80]	; 0x50
 800b324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b326:	4a0c      	ldr	r2, [pc, #48]	; (800b358 <prvInitialiseNewTask+0x138>)
 800b328:	655a      	str	r2, [r3, #84]	; 0x54
 800b32a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32c:	4a0b      	ldr	r2, [pc, #44]	; (800b35c <prvInitialiseNewTask+0x13c>)
 800b32e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b330:	683a      	ldr	r2, [r7, #0]
 800b332:	68f9      	ldr	r1, [r7, #12]
 800b334:	69b8      	ldr	r0, [r7, #24]
 800b336:	f001 f88d 	bl	800c454 <pxPortInitialiseStack>
 800b33a:	4602      	mov	r2, r0
 800b33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	2b00      	cmp	r3, #0
 800b344:	d002      	beq.n	800b34c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b34a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b34c:	bf00      	nop
 800b34e:	3720      	adds	r7, #32
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	0803302c 	.word	0x0803302c
 800b358:	0803304c 	.word	0x0803304c
 800b35c:	0803300c 	.word	0x0803300c

0800b360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b368:	f001 f980 	bl	800c66c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b36c:	4b2a      	ldr	r3, [pc, #168]	; (800b418 <prvAddNewTaskToReadyList+0xb8>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	3301      	adds	r3, #1
 800b372:	4a29      	ldr	r2, [pc, #164]	; (800b418 <prvAddNewTaskToReadyList+0xb8>)
 800b374:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b376:	4b29      	ldr	r3, [pc, #164]	; (800b41c <prvAddNewTaskToReadyList+0xbc>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d109      	bne.n	800b392 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b37e:	4a27      	ldr	r2, [pc, #156]	; (800b41c <prvAddNewTaskToReadyList+0xbc>)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b384:	4b24      	ldr	r3, [pc, #144]	; (800b418 <prvAddNewTaskToReadyList+0xb8>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d110      	bne.n	800b3ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b38c:	f000 fd5e 	bl	800be4c <prvInitialiseTaskLists>
 800b390:	e00d      	b.n	800b3ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b392:	4b23      	ldr	r3, [pc, #140]	; (800b420 <prvAddNewTaskToReadyList+0xc0>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d109      	bne.n	800b3ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b39a:	4b20      	ldr	r3, [pc, #128]	; (800b41c <prvAddNewTaskToReadyList+0xbc>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d802      	bhi.n	800b3ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3a8:	4a1c      	ldr	r2, [pc, #112]	; (800b41c <prvAddNewTaskToReadyList+0xbc>)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3ae:	4b1d      	ldr	r3, [pc, #116]	; (800b424 <prvAddNewTaskToReadyList+0xc4>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	4a1b      	ldr	r2, [pc, #108]	; (800b424 <prvAddNewTaskToReadyList+0xc4>)
 800b3b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3bc:	2201      	movs	r2, #1
 800b3be:	409a      	lsls	r2, r3
 800b3c0:	4b19      	ldr	r3, [pc, #100]	; (800b428 <prvAddNewTaskToReadyList+0xc8>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	4a18      	ldr	r2, [pc, #96]	; (800b428 <prvAddNewTaskToReadyList+0xc8>)
 800b3c8:	6013      	str	r3, [r2, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	4413      	add	r3, r2
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4a15      	ldr	r2, [pc, #84]	; (800b42c <prvAddNewTaskToReadyList+0xcc>)
 800b3d8:	441a      	add	r2, r3
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	3304      	adds	r3, #4
 800b3de:	4619      	mov	r1, r3
 800b3e0:	4610      	mov	r0, r2
 800b3e2:	f7ff f9d3 	bl	800a78c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b3e6:	f001 f975 	bl	800c6d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b3ea:	4b0d      	ldr	r3, [pc, #52]	; (800b420 <prvAddNewTaskToReadyList+0xc0>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00e      	beq.n	800b410 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b3f2:	4b0a      	ldr	r3, [pc, #40]	; (800b41c <prvAddNewTaskToReadyList+0xbc>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d207      	bcs.n	800b410 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b400:	4b0b      	ldr	r3, [pc, #44]	; (800b430 <prvAddNewTaskToReadyList+0xd0>)
 800b402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b406:	601a      	str	r2, [r3, #0]
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b410:	bf00      	nop
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	20000650 	.word	0x20000650
 800b41c:	20000550 	.word	0x20000550
 800b420:	2000065c 	.word	0x2000065c
 800b424:	2000066c 	.word	0x2000066c
 800b428:	20000658 	.word	0x20000658
 800b42c:	20000554 	.word	0x20000554
 800b430:	e000ed04 	.word	0xe000ed04

0800b434 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b43c:	f001 f916 	bl	800c66c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d102      	bne.n	800b44c <vTaskDelete+0x18>
 800b446:	4b3a      	ldr	r3, [pc, #232]	; (800b530 <vTaskDelete+0xfc>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	e000      	b.n	800b44e <vTaskDelete+0x1a>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	3304      	adds	r3, #4
 800b454:	4618      	mov	r0, r3
 800b456:	f7ff f9f6 	bl	800a846 <uxListRemove>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d115      	bne.n	800b48c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b464:	4933      	ldr	r1, [pc, #204]	; (800b534 <vTaskDelete+0x100>)
 800b466:	4613      	mov	r3, r2
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	440b      	add	r3, r1
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10a      	bne.n	800b48c <vTaskDelete+0x58>
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47a:	2201      	movs	r2, #1
 800b47c:	fa02 f303 	lsl.w	r3, r2, r3
 800b480:	43da      	mvns	r2, r3
 800b482:	4b2d      	ldr	r3, [pc, #180]	; (800b538 <vTaskDelete+0x104>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4013      	ands	r3, r2
 800b488:	4a2b      	ldr	r2, [pc, #172]	; (800b538 <vTaskDelete+0x104>)
 800b48a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b490:	2b00      	cmp	r3, #0
 800b492:	d004      	beq.n	800b49e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	3318      	adds	r3, #24
 800b498:	4618      	mov	r0, r3
 800b49a:	f7ff f9d4 	bl	800a846 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b49e:	4b27      	ldr	r3, [pc, #156]	; (800b53c <vTaskDelete+0x108>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	4a25      	ldr	r2, [pc, #148]	; (800b53c <vTaskDelete+0x108>)
 800b4a6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b4a8:	4b21      	ldr	r3, [pc, #132]	; (800b530 <vTaskDelete+0xfc>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d10b      	bne.n	800b4ca <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	4821      	ldr	r0, [pc, #132]	; (800b540 <vTaskDelete+0x10c>)
 800b4ba:	f7ff f967 	bl	800a78c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b4be:	4b21      	ldr	r3, [pc, #132]	; (800b544 <vTaskDelete+0x110>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	4a1f      	ldr	r2, [pc, #124]	; (800b544 <vTaskDelete+0x110>)
 800b4c6:	6013      	str	r3, [r2, #0]
 800b4c8:	e009      	b.n	800b4de <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b4ca:	4b1f      	ldr	r3, [pc, #124]	; (800b548 <vTaskDelete+0x114>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	4a1d      	ldr	r2, [pc, #116]	; (800b548 <vTaskDelete+0x114>)
 800b4d2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f000 fd27 	bl	800bf28 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b4da:	f000 fd5b 	bl	800bf94 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800b4de:	f001 f8f9 	bl	800c6d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b4e2:	4b1a      	ldr	r3, [pc, #104]	; (800b54c <vTaskDelete+0x118>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d01d      	beq.n	800b526 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800b4ea:	4b11      	ldr	r3, [pc, #68]	; (800b530 <vTaskDelete+0xfc>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68fa      	ldr	r2, [r7, #12]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d118      	bne.n	800b526 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b4f4:	4b16      	ldr	r3, [pc, #88]	; (800b550 <vTaskDelete+0x11c>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00c      	beq.n	800b516 <vTaskDelete+0xe2>
	__asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b500:	b672      	cpsid	i
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	b662      	cpsie	i
 800b510:	60bb      	str	r3, [r7, #8]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800b516:	4b0f      	ldr	r3, [pc, #60]	; (800b554 <vTaskDelete+0x120>)
 800b518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b51c:	601a      	str	r2, [r3, #0]
 800b51e:	f3bf 8f4f 	dsb	sy
 800b522:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b526:	bf00      	nop
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	20000550 	.word	0x20000550
 800b534:	20000554 	.word	0x20000554
 800b538:	20000658 	.word	0x20000658
 800b53c:	2000066c 	.word	0x2000066c
 800b540:	20000624 	.word	0x20000624
 800b544:	20000638 	.word	0x20000638
 800b548:	20000650 	.word	0x20000650
 800b54c:	2000065c 	.word	0x2000065c
 800b550:	20000678 	.word	0x20000678
 800b554:	e000ed04 	.word	0xe000ed04

0800b558 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b08a      	sub	sp, #40	; 0x28
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b562:	2300      	movs	r3, #0
 800b564:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10c      	bne.n	800b586 <vTaskDelayUntil+0x2e>
	__asm volatile
 800b56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b570:	b672      	cpsid	i
 800b572:	f383 8811 	msr	BASEPRI, r3
 800b576:	f3bf 8f6f 	isb	sy
 800b57a:	f3bf 8f4f 	dsb	sy
 800b57e:	b662      	cpsie	i
 800b580:	617b      	str	r3, [r7, #20]
}
 800b582:	bf00      	nop
 800b584:	e7fe      	b.n	800b584 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10c      	bne.n	800b5a6 <vTaskDelayUntil+0x4e>
	__asm volatile
 800b58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b590:	b672      	cpsid	i
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	b662      	cpsie	i
 800b5a0:	613b      	str	r3, [r7, #16]
}
 800b5a2:	bf00      	nop
 800b5a4:	e7fe      	b.n	800b5a4 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800b5a6:	4b2b      	ldr	r3, [pc, #172]	; (800b654 <vTaskDelayUntil+0xfc>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00c      	beq.n	800b5c8 <vTaskDelayUntil+0x70>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	b672      	cpsid	i
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	b662      	cpsie	i
 800b5c2:	60fb      	str	r3, [r7, #12]
}
 800b5c4:	bf00      	nop
 800b5c6:	e7fe      	b.n	800b5c6 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800b5c8:	f000 f94c 	bl	800b864 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b5cc:	4b22      	ldr	r3, [pc, #136]	; (800b658 <vTaskDelayUntil+0x100>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	4413      	add	r3, r2
 800b5da:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	6a3a      	ldr	r2, [r7, #32]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d20b      	bcs.n	800b5fe <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	69fa      	ldr	r2, [r7, #28]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d211      	bcs.n	800b614 <vTaskDelayUntil+0xbc>
 800b5f0:	69fa      	ldr	r2, [r7, #28]
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d90d      	bls.n	800b614 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	627b      	str	r3, [r7, #36]	; 0x24
 800b5fc:	e00a      	b.n	800b614 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	69fa      	ldr	r2, [r7, #28]
 800b604:	429a      	cmp	r2, r3
 800b606:	d303      	bcc.n	800b610 <vTaskDelayUntil+0xb8>
 800b608:	69fa      	ldr	r2, [r7, #28]
 800b60a:	6a3b      	ldr	r3, [r7, #32]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d901      	bls.n	800b614 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800b610:	2301      	movs	r3, #1
 800b612:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	69fa      	ldr	r2, [r7, #28]
 800b618:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d006      	beq.n	800b62e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b620:	69fa      	ldr	r2, [r7, #28]
 800b622:	6a3b      	ldr	r3, [r7, #32]
 800b624:	1ad3      	subs	r3, r2, r3
 800b626:	2100      	movs	r1, #0
 800b628:	4618      	mov	r0, r3
 800b62a:	f000 fead 	bl	800c388 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b62e:	f000 f927 	bl	800b880 <xTaskResumeAll>
 800b632:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d107      	bne.n	800b64a <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800b63a:	4b08      	ldr	r3, [pc, #32]	; (800b65c <vTaskDelayUntil+0x104>)
 800b63c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b64a:	bf00      	nop
 800b64c:	3728      	adds	r7, #40	; 0x28
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20000678 	.word	0x20000678
 800b658:	20000654 	.word	0x20000654
 800b65c:	e000ed04 	.word	0xe000ed04

0800b660 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b668:	f001 f800 	bl	800c66c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d102      	bne.n	800b678 <vTaskSuspend+0x18>
 800b672:	4b3d      	ldr	r3, [pc, #244]	; (800b768 <vTaskSuspend+0x108>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	e000      	b.n	800b67a <vTaskSuspend+0x1a>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3304      	adds	r3, #4
 800b680:	4618      	mov	r0, r3
 800b682:	f7ff f8e0 	bl	800a846 <uxListRemove>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d115      	bne.n	800b6b8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b690:	4936      	ldr	r1, [pc, #216]	; (800b76c <vTaskSuspend+0x10c>)
 800b692:	4613      	mov	r3, r2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4413      	add	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	440b      	add	r3, r1
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10a      	bne.n	800b6b8 <vTaskSuspend+0x58>
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ac:	43da      	mvns	r2, r3
 800b6ae:	4b30      	ldr	r3, [pc, #192]	; (800b770 <vTaskSuspend+0x110>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	4a2e      	ldr	r2, [pc, #184]	; (800b770 <vTaskSuspend+0x110>)
 800b6b6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d004      	beq.n	800b6ca <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	3318      	adds	r3, #24
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff f8be 	bl	800a846 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4828      	ldr	r0, [pc, #160]	; (800b774 <vTaskSuspend+0x114>)
 800b6d2:	f7ff f85b 	bl	800a78c <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d103      	bne.n	800b6ea <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b6ea:	f000 fff3 	bl	800c6d4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b6ee:	4b22      	ldr	r3, [pc, #136]	; (800b778 <vTaskSuspend+0x118>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d005      	beq.n	800b702 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b6f6:	f000 ffb9 	bl	800c66c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b6fa:	f000 fc4b 	bl	800bf94 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b6fe:	f000 ffe9 	bl	800c6d4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b702:	4b19      	ldr	r3, [pc, #100]	; (800b768 <vTaskSuspend+0x108>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d129      	bne.n	800b760 <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 800b70c:	4b1a      	ldr	r3, [pc, #104]	; (800b778 <vTaskSuspend+0x118>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d019      	beq.n	800b748 <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b714:	4b19      	ldr	r3, [pc, #100]	; (800b77c <vTaskSuspend+0x11c>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00c      	beq.n	800b736 <vTaskSuspend+0xd6>
	__asm volatile
 800b71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b720:	b672      	cpsid	i
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	b662      	cpsie	i
 800b730:	60bb      	str	r3, [r7, #8]
}
 800b732:	bf00      	nop
 800b734:	e7fe      	b.n	800b734 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 800b736:	4b12      	ldr	r3, [pc, #72]	; (800b780 <vTaskSuspend+0x120>)
 800b738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b746:	e00b      	b.n	800b760 <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b748:	4b0a      	ldr	r3, [pc, #40]	; (800b774 <vTaskSuspend+0x114>)
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	4b0d      	ldr	r3, [pc, #52]	; (800b784 <vTaskSuspend+0x124>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	429a      	cmp	r2, r3
 800b752:	d103      	bne.n	800b75c <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 800b754:	4b04      	ldr	r3, [pc, #16]	; (800b768 <vTaskSuspend+0x108>)
 800b756:	2200      	movs	r2, #0
 800b758:	601a      	str	r2, [r3, #0]
	}
 800b75a:	e001      	b.n	800b760 <vTaskSuspend+0x100>
					vTaskSwitchContext();
 800b75c:	f000 f9e8 	bl	800bb30 <vTaskSwitchContext>
	}
 800b760:	bf00      	nop
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	20000550 	.word	0x20000550
 800b76c:	20000554 	.word	0x20000554
 800b770:	20000658 	.word	0x20000658
 800b774:	2000063c 	.word	0x2000063c
 800b778:	2000065c 	.word	0x2000065c
 800b77c:	20000678 	.word	0x20000678
 800b780:	e000ed04 	.word	0xe000ed04
 800b784:	20000650 	.word	0x20000650

0800b788 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b08a      	sub	sp, #40	; 0x28
 800b78c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b792:	2300      	movs	r3, #0
 800b794:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b796:	463a      	mov	r2, r7
 800b798:	1d39      	adds	r1, r7, #4
 800b79a:	f107 0308 	add.w	r3, r7, #8
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7f4 feb2 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b7a4:	6839      	ldr	r1, [r7, #0]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	9202      	str	r2, [sp, #8]
 800b7ac:	9301      	str	r3, [sp, #4]
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	460a      	mov	r2, r1
 800b7b6:	4923      	ldr	r1, [pc, #140]	; (800b844 <vTaskStartScheduler+0xbc>)
 800b7b8:	4823      	ldr	r0, [pc, #140]	; (800b848 <vTaskStartScheduler+0xc0>)
 800b7ba:	f7ff fc89 	bl	800b0d0 <xTaskCreateStatic>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	4a22      	ldr	r2, [pc, #136]	; (800b84c <vTaskStartScheduler+0xc4>)
 800b7c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7c4:	4b21      	ldr	r3, [pc, #132]	; (800b84c <vTaskStartScheduler+0xc4>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	617b      	str	r3, [r7, #20]
 800b7d0:	e001      	b.n	800b7d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d11d      	bne.n	800b818 <vTaskStartScheduler+0x90>
	__asm volatile
 800b7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e0:	b672      	cpsid	i
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	b662      	cpsie	i
 800b7f0:	613b      	str	r3, [r7, #16]
}
 800b7f2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b7f4:	4b16      	ldr	r3, [pc, #88]	; (800b850 <vTaskStartScheduler+0xc8>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	334c      	adds	r3, #76	; 0x4c
 800b7fa:	4a16      	ldr	r2, [pc, #88]	; (800b854 <vTaskStartScheduler+0xcc>)
 800b7fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b7fe:	4b16      	ldr	r3, [pc, #88]	; (800b858 <vTaskStartScheduler+0xd0>)
 800b800:	f04f 32ff 	mov.w	r2, #4294967295
 800b804:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b806:	4b15      	ldr	r3, [pc, #84]	; (800b85c <vTaskStartScheduler+0xd4>)
 800b808:	2201      	movs	r2, #1
 800b80a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b80c:	4b14      	ldr	r3, [pc, #80]	; (800b860 <vTaskStartScheduler+0xd8>)
 800b80e:	2200      	movs	r2, #0
 800b810:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b812:	f000 fead 	bl	800c570 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b816:	e010      	b.n	800b83a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81e:	d10c      	bne.n	800b83a <vTaskStartScheduler+0xb2>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b824:	b672      	cpsid	i
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	b662      	cpsie	i
 800b834:	60fb      	str	r3, [r7, #12]
}
 800b836:	bf00      	nop
 800b838:	e7fe      	b.n	800b838 <vTaskStartScheduler+0xb0>
}
 800b83a:	bf00      	nop
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	0800ce70 	.word	0x0800ce70
 800b848:	0800be1d 	.word	0x0800be1d
 800b84c:	20000674 	.word	0x20000674
 800b850:	20000550 	.word	0x20000550
 800b854:	2000004c 	.word	0x2000004c
 800b858:	20000670 	.word	0x20000670
 800b85c:	2000065c 	.word	0x2000065c
 800b860:	20000654 	.word	0x20000654

0800b864 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b864:	b480      	push	{r7}
 800b866:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b868:	4b04      	ldr	r3, [pc, #16]	; (800b87c <vTaskSuspendAll+0x18>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	3301      	adds	r3, #1
 800b86e:	4a03      	ldr	r2, [pc, #12]	; (800b87c <vTaskSuspendAll+0x18>)
 800b870:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b872:	bf00      	nop
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	20000678 	.word	0x20000678

0800b880 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b886:	2300      	movs	r3, #0
 800b888:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b88a:	2300      	movs	r3, #0
 800b88c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b88e:	4b42      	ldr	r3, [pc, #264]	; (800b998 <xTaskResumeAll+0x118>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10c      	bne.n	800b8b0 <xTaskResumeAll+0x30>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	b672      	cpsid	i
 800b89c:	f383 8811 	msr	BASEPRI, r3
 800b8a0:	f3bf 8f6f 	isb	sy
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	b662      	cpsie	i
 800b8aa:	603b      	str	r3, [r7, #0]
}
 800b8ac:	bf00      	nop
 800b8ae:	e7fe      	b.n	800b8ae <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8b0:	f000 fedc 	bl	800c66c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8b4:	4b38      	ldr	r3, [pc, #224]	; (800b998 <xTaskResumeAll+0x118>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	4a37      	ldr	r2, [pc, #220]	; (800b998 <xTaskResumeAll+0x118>)
 800b8bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8be:	4b36      	ldr	r3, [pc, #216]	; (800b998 <xTaskResumeAll+0x118>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d161      	bne.n	800b98a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8c6:	4b35      	ldr	r3, [pc, #212]	; (800b99c <xTaskResumeAll+0x11c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d05d      	beq.n	800b98a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8ce:	e02e      	b.n	800b92e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8d0:	4b33      	ldr	r3, [pc, #204]	; (800b9a0 <xTaskResumeAll+0x120>)
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	3318      	adds	r3, #24
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fe ffb2 	bl	800a846 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fe ffad 	bl	800a846 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	409a      	lsls	r2, r3
 800b8f4:	4b2b      	ldr	r3, [pc, #172]	; (800b9a4 <xTaskResumeAll+0x124>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	4a2a      	ldr	r2, [pc, #168]	; (800b9a4 <xTaskResumeAll+0x124>)
 800b8fc:	6013      	str	r3, [r2, #0]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4a27      	ldr	r2, [pc, #156]	; (800b9a8 <xTaskResumeAll+0x128>)
 800b90c:	441a      	add	r2, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	3304      	adds	r3, #4
 800b912:	4619      	mov	r1, r3
 800b914:	4610      	mov	r0, r2
 800b916:	f7fe ff39 	bl	800a78c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b91e:	4b23      	ldr	r3, [pc, #140]	; (800b9ac <xTaskResumeAll+0x12c>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b924:	429a      	cmp	r2, r3
 800b926:	d302      	bcc.n	800b92e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b928:	4b21      	ldr	r3, [pc, #132]	; (800b9b0 <xTaskResumeAll+0x130>)
 800b92a:	2201      	movs	r2, #1
 800b92c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b92e:	4b1c      	ldr	r3, [pc, #112]	; (800b9a0 <xTaskResumeAll+0x120>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d1cc      	bne.n	800b8d0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d001      	beq.n	800b940 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b93c:	f000 fb2a 	bl	800bf94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b940:	4b1c      	ldr	r3, [pc, #112]	; (800b9b4 <xTaskResumeAll+0x134>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d010      	beq.n	800b96e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b94c:	f000 f836 	bl	800b9bc <xTaskIncrementTick>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d002      	beq.n	800b95c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b956:	4b16      	ldr	r3, [pc, #88]	; (800b9b0 <xTaskResumeAll+0x130>)
 800b958:	2201      	movs	r2, #1
 800b95a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3b01      	subs	r3, #1
 800b960:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1f1      	bne.n	800b94c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800b968:	4b12      	ldr	r3, [pc, #72]	; (800b9b4 <xTaskResumeAll+0x134>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b96e:	4b10      	ldr	r3, [pc, #64]	; (800b9b0 <xTaskResumeAll+0x130>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d009      	beq.n	800b98a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b976:	2301      	movs	r3, #1
 800b978:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b97a:	4b0f      	ldr	r3, [pc, #60]	; (800b9b8 <xTaskResumeAll+0x138>)
 800b97c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b980:	601a      	str	r2, [r3, #0]
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b98a:	f000 fea3 	bl	800c6d4 <vPortExitCritical>

	return xAlreadyYielded;
 800b98e:	68bb      	ldr	r3, [r7, #8]
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	20000678 	.word	0x20000678
 800b99c:	20000650 	.word	0x20000650
 800b9a0:	20000610 	.word	0x20000610
 800b9a4:	20000658 	.word	0x20000658
 800b9a8:	20000554 	.word	0x20000554
 800b9ac:	20000550 	.word	0x20000550
 800b9b0:	20000664 	.word	0x20000664
 800b9b4:	20000660 	.word	0x20000660
 800b9b8:	e000ed04 	.word	0xe000ed04

0800b9bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9c6:	4b4f      	ldr	r3, [pc, #316]	; (800bb04 <xTaskIncrementTick+0x148>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f040 808a 	bne.w	800bae4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9d0:	4b4d      	ldr	r3, [pc, #308]	; (800bb08 <xTaskIncrementTick+0x14c>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9d8:	4a4b      	ldr	r2, [pc, #300]	; (800bb08 <xTaskIncrementTick+0x14c>)
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d122      	bne.n	800ba2a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b9e4:	4b49      	ldr	r3, [pc, #292]	; (800bb0c <xTaskIncrementTick+0x150>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d00c      	beq.n	800ba08 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	b672      	cpsid	i
 800b9f4:	f383 8811 	msr	BASEPRI, r3
 800b9f8:	f3bf 8f6f 	isb	sy
 800b9fc:	f3bf 8f4f 	dsb	sy
 800ba00:	b662      	cpsie	i
 800ba02:	603b      	str	r3, [r7, #0]
}
 800ba04:	bf00      	nop
 800ba06:	e7fe      	b.n	800ba06 <xTaskIncrementTick+0x4a>
 800ba08:	4b40      	ldr	r3, [pc, #256]	; (800bb0c <xTaskIncrementTick+0x150>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	60fb      	str	r3, [r7, #12]
 800ba0e:	4b40      	ldr	r3, [pc, #256]	; (800bb10 <xTaskIncrementTick+0x154>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a3e      	ldr	r2, [pc, #248]	; (800bb0c <xTaskIncrementTick+0x150>)
 800ba14:	6013      	str	r3, [r2, #0]
 800ba16:	4a3e      	ldr	r2, [pc, #248]	; (800bb10 <xTaskIncrementTick+0x154>)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6013      	str	r3, [r2, #0]
 800ba1c:	4b3d      	ldr	r3, [pc, #244]	; (800bb14 <xTaskIncrementTick+0x158>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	3301      	adds	r3, #1
 800ba22:	4a3c      	ldr	r2, [pc, #240]	; (800bb14 <xTaskIncrementTick+0x158>)
 800ba24:	6013      	str	r3, [r2, #0]
 800ba26:	f000 fab5 	bl	800bf94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba2a:	4b3b      	ldr	r3, [pc, #236]	; (800bb18 <xTaskIncrementTick+0x15c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	693a      	ldr	r2, [r7, #16]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d348      	bcc.n	800bac6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba34:	4b35      	ldr	r3, [pc, #212]	; (800bb0c <xTaskIncrementTick+0x150>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d104      	bne.n	800ba48 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba3e:	4b36      	ldr	r3, [pc, #216]	; (800bb18 <xTaskIncrementTick+0x15c>)
 800ba40:	f04f 32ff 	mov.w	r2, #4294967295
 800ba44:	601a      	str	r2, [r3, #0]
					break;
 800ba46:	e03e      	b.n	800bac6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba48:	4b30      	ldr	r3, [pc, #192]	; (800bb0c <xTaskIncrementTick+0x150>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba58:	693a      	ldr	r2, [r7, #16]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d203      	bcs.n	800ba68 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba60:	4a2d      	ldr	r2, [pc, #180]	; (800bb18 <xTaskIncrementTick+0x15c>)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba66:	e02e      	b.n	800bac6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fe feea 	bl	800a846 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d004      	beq.n	800ba84 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	3318      	adds	r3, #24
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7fe fee1 	bl	800a846 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba88:	2201      	movs	r2, #1
 800ba8a:	409a      	lsls	r2, r3
 800ba8c:	4b23      	ldr	r3, [pc, #140]	; (800bb1c <xTaskIncrementTick+0x160>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4313      	orrs	r3, r2
 800ba92:	4a22      	ldr	r2, [pc, #136]	; (800bb1c <xTaskIncrementTick+0x160>)
 800ba94:	6013      	str	r3, [r2, #0]
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4413      	add	r3, r2
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	4a1f      	ldr	r2, [pc, #124]	; (800bb20 <xTaskIncrementTick+0x164>)
 800baa4:	441a      	add	r2, r3
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	3304      	adds	r3, #4
 800baaa:	4619      	mov	r1, r3
 800baac:	4610      	mov	r0, r2
 800baae:	f7fe fe6d 	bl	800a78c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab6:	4b1b      	ldr	r3, [pc, #108]	; (800bb24 <xTaskIncrementTick+0x168>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babc:	429a      	cmp	r2, r3
 800babe:	d3b9      	bcc.n	800ba34 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800bac0:	2301      	movs	r3, #1
 800bac2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bac4:	e7b6      	b.n	800ba34 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bac6:	4b17      	ldr	r3, [pc, #92]	; (800bb24 <xTaskIncrementTick+0x168>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bacc:	4914      	ldr	r1, [pc, #80]	; (800bb20 <xTaskIncrementTick+0x164>)
 800bace:	4613      	mov	r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	4413      	add	r3, r2
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	440b      	add	r3, r1
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d907      	bls.n	800baee <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800bade:	2301      	movs	r3, #1
 800bae0:	617b      	str	r3, [r7, #20]
 800bae2:	e004      	b.n	800baee <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bae4:	4b10      	ldr	r3, [pc, #64]	; (800bb28 <xTaskIncrementTick+0x16c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	3301      	adds	r3, #1
 800baea:	4a0f      	ldr	r2, [pc, #60]	; (800bb28 <xTaskIncrementTick+0x16c>)
 800baec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800baee:	4b0f      	ldr	r3, [pc, #60]	; (800bb2c <xTaskIncrementTick+0x170>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d001      	beq.n	800bafa <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800baf6:	2301      	movs	r3, #1
 800baf8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bafa:	697b      	ldr	r3, [r7, #20]
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3718      	adds	r7, #24
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	20000678 	.word	0x20000678
 800bb08:	20000654 	.word	0x20000654
 800bb0c:	20000608 	.word	0x20000608
 800bb10:	2000060c 	.word	0x2000060c
 800bb14:	20000668 	.word	0x20000668
 800bb18:	20000670 	.word	0x20000670
 800bb1c:	20000658 	.word	0x20000658
 800bb20:	20000554 	.word	0x20000554
 800bb24:	20000550 	.word	0x20000550
 800bb28:	20000660 	.word	0x20000660
 800bb2c:	20000664 	.word	0x20000664

0800bb30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb30:	b480      	push	{r7}
 800bb32:	b087      	sub	sp, #28
 800bb34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb36:	4b2a      	ldr	r3, [pc, #168]	; (800bbe0 <vTaskSwitchContext+0xb0>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d003      	beq.n	800bb46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb3e:	4b29      	ldr	r3, [pc, #164]	; (800bbe4 <vTaskSwitchContext+0xb4>)
 800bb40:	2201      	movs	r2, #1
 800bb42:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb44:	e046      	b.n	800bbd4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bb46:	4b27      	ldr	r3, [pc, #156]	; (800bbe4 <vTaskSwitchContext+0xb4>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb4c:	4b26      	ldr	r3, [pc, #152]	; (800bbe8 <vTaskSwitchContext+0xb8>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	fab3 f383 	clz	r3, r3
 800bb58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bb5a:	7afb      	ldrb	r3, [r7, #11]
 800bb5c:	f1c3 031f 	rsb	r3, r3, #31
 800bb60:	617b      	str	r3, [r7, #20]
 800bb62:	4922      	ldr	r1, [pc, #136]	; (800bbec <vTaskSwitchContext+0xbc>)
 800bb64:	697a      	ldr	r2, [r7, #20]
 800bb66:	4613      	mov	r3, r2
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	4413      	add	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	440b      	add	r3, r1
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10c      	bne.n	800bb90 <vTaskSwitchContext+0x60>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	b672      	cpsid	i
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	b662      	cpsie	i
 800bb8a:	607b      	str	r3, [r7, #4]
}
 800bb8c:	bf00      	nop
 800bb8e:	e7fe      	b.n	800bb8e <vTaskSwitchContext+0x5e>
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	4613      	mov	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4413      	add	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	4a14      	ldr	r2, [pc, #80]	; (800bbec <vTaskSwitchContext+0xbc>)
 800bb9c:	4413      	add	r3, r2
 800bb9e:	613b      	str	r3, [r7, #16]
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	605a      	str	r2, [r3, #4]
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	3308      	adds	r3, #8
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d104      	bne.n	800bbc0 <vTaskSwitchContext+0x90>
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	605a      	str	r2, [r3, #4]
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	4a0a      	ldr	r2, [pc, #40]	; (800bbf0 <vTaskSwitchContext+0xc0>)
 800bbc8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbca:	4b09      	ldr	r3, [pc, #36]	; (800bbf0 <vTaskSwitchContext+0xc0>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	334c      	adds	r3, #76	; 0x4c
 800bbd0:	4a08      	ldr	r2, [pc, #32]	; (800bbf4 <vTaskSwitchContext+0xc4>)
 800bbd2:	6013      	str	r3, [r2, #0]
}
 800bbd4:	bf00      	nop
 800bbd6:	371c      	adds	r7, #28
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr
 800bbe0:	20000678 	.word	0x20000678
 800bbe4:	20000664 	.word	0x20000664
 800bbe8:	20000658 	.word	0x20000658
 800bbec:	20000554 	.word	0x20000554
 800bbf0:	20000550 	.word	0x20000550
 800bbf4:	2000004c 	.word	0x2000004c

0800bbf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10c      	bne.n	800bc22 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800bc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0c:	b672      	cpsid	i
 800bc0e:	f383 8811 	msr	BASEPRI, r3
 800bc12:	f3bf 8f6f 	isb	sy
 800bc16:	f3bf 8f4f 	dsb	sy
 800bc1a:	b662      	cpsie	i
 800bc1c:	60fb      	str	r3, [r7, #12]
}
 800bc1e:	bf00      	nop
 800bc20:	e7fe      	b.n	800bc20 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc22:	4b07      	ldr	r3, [pc, #28]	; (800bc40 <vTaskPlaceOnEventList+0x48>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	3318      	adds	r3, #24
 800bc28:	4619      	mov	r1, r3
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f7fe fdd2 	bl	800a7d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc30:	2101      	movs	r1, #1
 800bc32:	6838      	ldr	r0, [r7, #0]
 800bc34:	f000 fba8 	bl	800c388 <prvAddCurrentTaskToDelayedList>
}
 800bc38:	bf00      	nop
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	20000550 	.word	0x20000550

0800bc44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b086      	sub	sp, #24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10c      	bne.n	800bc74 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800bc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5e:	b672      	cpsid	i
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	b662      	cpsie	i
 800bc6e:	60fb      	str	r3, [r7, #12]
}
 800bc70:	bf00      	nop
 800bc72:	e7fe      	b.n	800bc72 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	3318      	adds	r3, #24
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7fe fde4 	bl	800a846 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc7e:	4b1d      	ldr	r3, [pc, #116]	; (800bcf4 <xTaskRemoveFromEventList+0xb0>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d11c      	bne.n	800bcc0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	3304      	adds	r3, #4
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7fe fddb 	bl	800a846 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc94:	2201      	movs	r2, #1
 800bc96:	409a      	lsls	r2, r3
 800bc98:	4b17      	ldr	r3, [pc, #92]	; (800bcf8 <xTaskRemoveFromEventList+0xb4>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	4a16      	ldr	r2, [pc, #88]	; (800bcf8 <xTaskRemoveFromEventList+0xb4>)
 800bca0:	6013      	str	r3, [r2, #0]
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bca6:	4613      	mov	r3, r2
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	4413      	add	r3, r2
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	4a13      	ldr	r2, [pc, #76]	; (800bcfc <xTaskRemoveFromEventList+0xb8>)
 800bcb0:	441a      	add	r2, r3
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	3304      	adds	r3, #4
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	4610      	mov	r0, r2
 800bcba:	f7fe fd67 	bl	800a78c <vListInsertEnd>
 800bcbe:	e005      	b.n	800bccc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	3318      	adds	r3, #24
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	480e      	ldr	r0, [pc, #56]	; (800bd00 <xTaskRemoveFromEventList+0xbc>)
 800bcc8:	f7fe fd60 	bl	800a78c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd0:	4b0c      	ldr	r3, [pc, #48]	; (800bd04 <xTaskRemoveFromEventList+0xc0>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d905      	bls.n	800bce6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bcde:	4b0a      	ldr	r3, [pc, #40]	; (800bd08 <xTaskRemoveFromEventList+0xc4>)
 800bce0:	2201      	movs	r2, #1
 800bce2:	601a      	str	r2, [r3, #0]
 800bce4:	e001      	b.n	800bcea <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bce6:	2300      	movs	r3, #0
 800bce8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bcea:	697b      	ldr	r3, [r7, #20]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3718      	adds	r7, #24
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	20000678 	.word	0x20000678
 800bcf8:	20000658 	.word	0x20000658
 800bcfc:	20000554 	.word	0x20000554
 800bd00:	20000610 	.word	0x20000610
 800bd04:	20000550 	.word	0x20000550
 800bd08:	20000664 	.word	0x20000664

0800bd0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd14:	4b06      	ldr	r3, [pc, #24]	; (800bd30 <vTaskInternalSetTimeOutState+0x24>)
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd1c:	4b05      	ldr	r3, [pc, #20]	; (800bd34 <vTaskInternalSetTimeOutState+0x28>)
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	605a      	str	r2, [r3, #4]
}
 800bd24:	bf00      	nop
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	20000668 	.word	0x20000668
 800bd34:	20000654 	.word	0x20000654

0800bd38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b088      	sub	sp, #32
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d10c      	bne.n	800bd62 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800bd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd4c:	b672      	cpsid	i
 800bd4e:	f383 8811 	msr	BASEPRI, r3
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	f3bf 8f4f 	dsb	sy
 800bd5a:	b662      	cpsie	i
 800bd5c:	613b      	str	r3, [r7, #16]
}
 800bd5e:	bf00      	nop
 800bd60:	e7fe      	b.n	800bd60 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10c      	bne.n	800bd82 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800bd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6c:	b672      	cpsid	i
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	b662      	cpsie	i
 800bd7c:	60fb      	str	r3, [r7, #12]
}
 800bd7e:	bf00      	nop
 800bd80:	e7fe      	b.n	800bd80 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bd82:	f000 fc73 	bl	800c66c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd86:	4b1d      	ldr	r3, [pc, #116]	; (800bdfc <xTaskCheckForTimeOut+0xc4>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	69ba      	ldr	r2, [r7, #24]
 800bd92:	1ad3      	subs	r3, r2, r3
 800bd94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd9e:	d102      	bne.n	800bda6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bda0:	2300      	movs	r3, #0
 800bda2:	61fb      	str	r3, [r7, #28]
 800bda4:	e023      	b.n	800bdee <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	4b15      	ldr	r3, [pc, #84]	; (800be00 <xTaskCheckForTimeOut+0xc8>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d007      	beq.n	800bdc2 <xTaskCheckForTimeOut+0x8a>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	69ba      	ldr	r2, [r7, #24]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d302      	bcc.n	800bdc2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	61fb      	str	r3, [r7, #28]
 800bdc0:	e015      	b.n	800bdee <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d20b      	bcs.n	800bde4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	1ad2      	subs	r2, r2, r3
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f7ff ff97 	bl	800bd0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bdde:	2300      	movs	r3, #0
 800bde0:	61fb      	str	r3, [r7, #28]
 800bde2:	e004      	b.n	800bdee <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	2200      	movs	r2, #0
 800bde8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bdea:	2301      	movs	r3, #1
 800bdec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bdee:	f000 fc71 	bl	800c6d4 <vPortExitCritical>

	return xReturn;
 800bdf2:	69fb      	ldr	r3, [r7, #28]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3720      	adds	r7, #32
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	20000654 	.word	0x20000654
 800be00:	20000668 	.word	0x20000668

0800be04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be04:	b480      	push	{r7}
 800be06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be08:	4b03      	ldr	r3, [pc, #12]	; (800be18 <vTaskMissedYield+0x14>)
 800be0a:	2201      	movs	r2, #1
 800be0c:	601a      	str	r2, [r3, #0]
}
 800be0e:	bf00      	nop
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr
 800be18:	20000664 	.word	0x20000664

0800be1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be24:	f000 f852 	bl	800becc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be28:	4b06      	ldr	r3, [pc, #24]	; (800be44 <prvIdleTask+0x28>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d9f9      	bls.n	800be24 <prvIdleTask+0x8>
			{
				taskYIELD();
 800be30:	4b05      	ldr	r3, [pc, #20]	; (800be48 <prvIdleTask+0x2c>)
 800be32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be36:	601a      	str	r2, [r3, #0]
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be40:	e7f0      	b.n	800be24 <prvIdleTask+0x8>
 800be42:	bf00      	nop
 800be44:	20000554 	.word	0x20000554
 800be48:	e000ed04 	.word	0xe000ed04

0800be4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be52:	2300      	movs	r3, #0
 800be54:	607b      	str	r3, [r7, #4]
 800be56:	e00c      	b.n	800be72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	4613      	mov	r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	4413      	add	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	4a12      	ldr	r2, [pc, #72]	; (800beac <prvInitialiseTaskLists+0x60>)
 800be64:	4413      	add	r3, r2
 800be66:	4618      	mov	r0, r3
 800be68:	f7fe fc63 	bl	800a732 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	3301      	adds	r3, #1
 800be70:	607b      	str	r3, [r7, #4]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b06      	cmp	r3, #6
 800be76:	d9ef      	bls.n	800be58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be78:	480d      	ldr	r0, [pc, #52]	; (800beb0 <prvInitialiseTaskLists+0x64>)
 800be7a:	f7fe fc5a 	bl	800a732 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be7e:	480d      	ldr	r0, [pc, #52]	; (800beb4 <prvInitialiseTaskLists+0x68>)
 800be80:	f7fe fc57 	bl	800a732 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be84:	480c      	ldr	r0, [pc, #48]	; (800beb8 <prvInitialiseTaskLists+0x6c>)
 800be86:	f7fe fc54 	bl	800a732 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be8a:	480c      	ldr	r0, [pc, #48]	; (800bebc <prvInitialiseTaskLists+0x70>)
 800be8c:	f7fe fc51 	bl	800a732 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be90:	480b      	ldr	r0, [pc, #44]	; (800bec0 <prvInitialiseTaskLists+0x74>)
 800be92:	f7fe fc4e 	bl	800a732 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800be96:	4b0b      	ldr	r3, [pc, #44]	; (800bec4 <prvInitialiseTaskLists+0x78>)
 800be98:	4a05      	ldr	r2, [pc, #20]	; (800beb0 <prvInitialiseTaskLists+0x64>)
 800be9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800be9c:	4b0a      	ldr	r3, [pc, #40]	; (800bec8 <prvInitialiseTaskLists+0x7c>)
 800be9e:	4a05      	ldr	r2, [pc, #20]	; (800beb4 <prvInitialiseTaskLists+0x68>)
 800bea0:	601a      	str	r2, [r3, #0]
}
 800bea2:	bf00      	nop
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	20000554 	.word	0x20000554
 800beb0:	200005e0 	.word	0x200005e0
 800beb4:	200005f4 	.word	0x200005f4
 800beb8:	20000610 	.word	0x20000610
 800bebc:	20000624 	.word	0x20000624
 800bec0:	2000063c 	.word	0x2000063c
 800bec4:	20000608 	.word	0x20000608
 800bec8:	2000060c 	.word	0x2000060c

0800becc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bed2:	e019      	b.n	800bf08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bed4:	f000 fbca 	bl	800c66c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bed8:	4b10      	ldr	r3, [pc, #64]	; (800bf1c <prvCheckTasksWaitingTermination+0x50>)
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	3304      	adds	r3, #4
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7fe fcae 	bl	800a846 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800beea:	4b0d      	ldr	r3, [pc, #52]	; (800bf20 <prvCheckTasksWaitingTermination+0x54>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	3b01      	subs	r3, #1
 800bef0:	4a0b      	ldr	r2, [pc, #44]	; (800bf20 <prvCheckTasksWaitingTermination+0x54>)
 800bef2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bef4:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <prvCheckTasksWaitingTermination+0x58>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3b01      	subs	r3, #1
 800befa:	4a0a      	ldr	r2, [pc, #40]	; (800bf24 <prvCheckTasksWaitingTermination+0x58>)
 800befc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800befe:	f000 fbe9 	bl	800c6d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 f810 	bl	800bf28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf08:	4b06      	ldr	r3, [pc, #24]	; (800bf24 <prvCheckTasksWaitingTermination+0x58>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d1e1      	bne.n	800bed4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf10:	bf00      	nop
 800bf12:	bf00      	nop
 800bf14:	3708      	adds	r7, #8
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	20000624 	.word	0x20000624
 800bf20:	20000650 	.word	0x20000650
 800bf24:	20000638 	.word	0x20000638

0800bf28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	334c      	adds	r3, #76	; 0x4c
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 feaf 	bl	800cc98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d108      	bne.n	800bf56 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f000 fd41 	bl	800c9d0 <vPortFree>
				vPortFree( pxTCB );
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fd3e 	bl	800c9d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf54:	e01a      	b.n	800bf8c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d103      	bne.n	800bf68 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 fd35 	bl	800c9d0 <vPortFree>
	}
 800bf66:	e011      	b.n	800bf8c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800bf6e:	2b02      	cmp	r3, #2
 800bf70:	d00c      	beq.n	800bf8c <prvDeleteTCB+0x64>
	__asm volatile
 800bf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf76:	b672      	cpsid	i
 800bf78:	f383 8811 	msr	BASEPRI, r3
 800bf7c:	f3bf 8f6f 	isb	sy
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	b662      	cpsie	i
 800bf86:	60fb      	str	r3, [r7, #12]
}
 800bf88:	bf00      	nop
 800bf8a:	e7fe      	b.n	800bf8a <prvDeleteTCB+0x62>
	}
 800bf8c:	bf00      	nop
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf9a:	4b0c      	ldr	r3, [pc, #48]	; (800bfcc <prvResetNextTaskUnblockTime+0x38>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d104      	bne.n	800bfae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bfa4:	4b0a      	ldr	r3, [pc, #40]	; (800bfd0 <prvResetNextTaskUnblockTime+0x3c>)
 800bfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bfac:	e008      	b.n	800bfc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfae:	4b07      	ldr	r3, [pc, #28]	; (800bfcc <prvResetNextTaskUnblockTime+0x38>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	4a04      	ldr	r2, [pc, #16]	; (800bfd0 <prvResetNextTaskUnblockTime+0x3c>)
 800bfbe:	6013      	str	r3, [r2, #0]
}
 800bfc0:	bf00      	nop
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr
 800bfcc:	20000608 	.word	0x20000608
 800bfd0:	20000670 	.word	0x20000670

0800bfd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bfda:	4b0b      	ldr	r3, [pc, #44]	; (800c008 <xTaskGetSchedulerState+0x34>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d102      	bne.n	800bfe8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	607b      	str	r3, [r7, #4]
 800bfe6:	e008      	b.n	800bffa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfe8:	4b08      	ldr	r3, [pc, #32]	; (800c00c <xTaskGetSchedulerState+0x38>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d102      	bne.n	800bff6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bff0:	2302      	movs	r3, #2
 800bff2:	607b      	str	r3, [r7, #4]
 800bff4:	e001      	b.n	800bffa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bff6:	2300      	movs	r3, #0
 800bff8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bffa:	687b      	ldr	r3, [r7, #4]
	}
 800bffc:	4618      	mov	r0, r3
 800bffe:	370c      	adds	r7, #12
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr
 800c008:	2000065c 	.word	0x2000065c
 800c00c:	20000678 	.word	0x20000678

0800c010 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c01c:	2300      	movs	r3, #0
 800c01e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d069      	beq.n	800c0fa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c02a:	4b36      	ldr	r3, [pc, #216]	; (800c104 <xTaskPriorityInherit+0xf4>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	429a      	cmp	r2, r3
 800c032:	d259      	bcs.n	800c0e8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	699b      	ldr	r3, [r3, #24]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	db06      	blt.n	800c04a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c03c:	4b31      	ldr	r3, [pc, #196]	; (800c104 <xTaskPriorityInherit+0xf4>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c042:	f1c3 0207 	rsb	r2, r3, #7
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	6959      	ldr	r1, [r3, #20]
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c052:	4613      	mov	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	4413      	add	r3, r2
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	4a2b      	ldr	r2, [pc, #172]	; (800c108 <xTaskPriorityInherit+0xf8>)
 800c05c:	4413      	add	r3, r2
 800c05e:	4299      	cmp	r1, r3
 800c060:	d13a      	bne.n	800c0d8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	3304      	adds	r3, #4
 800c066:	4618      	mov	r0, r3
 800c068:	f7fe fbed 	bl	800a846 <uxListRemove>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d115      	bne.n	800c09e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c076:	4924      	ldr	r1, [pc, #144]	; (800c108 <xTaskPriorityInherit+0xf8>)
 800c078:	4613      	mov	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	440b      	add	r3, r1
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d10a      	bne.n	800c09e <xTaskPriorityInherit+0x8e>
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c08c:	2201      	movs	r2, #1
 800c08e:	fa02 f303 	lsl.w	r3, r2, r3
 800c092:	43da      	mvns	r2, r3
 800c094:	4b1d      	ldr	r3, [pc, #116]	; (800c10c <xTaskPriorityInherit+0xfc>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4013      	ands	r3, r2
 800c09a:	4a1c      	ldr	r2, [pc, #112]	; (800c10c <xTaskPriorityInherit+0xfc>)
 800c09c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c09e:	4b19      	ldr	r3, [pc, #100]	; (800c104 <xTaskPriorityInherit+0xf4>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	409a      	lsls	r2, r3
 800c0b0:	4b16      	ldr	r3, [pc, #88]	; (800c10c <xTaskPriorityInherit+0xfc>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	4a15      	ldr	r2, [pc, #84]	; (800c10c <xTaskPriorityInherit+0xfc>)
 800c0b8:	6013      	str	r3, [r2, #0]
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0be:	4613      	mov	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	4413      	add	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	4a10      	ldr	r2, [pc, #64]	; (800c108 <xTaskPriorityInherit+0xf8>)
 800c0c8:	441a      	add	r2, r3
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4610      	mov	r0, r2
 800c0d2:	f7fe fb5b 	bl	800a78c <vListInsertEnd>
 800c0d6:	e004      	b.n	800c0e2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c0d8:	4b0a      	ldr	r3, [pc, #40]	; (800c104 <xTaskPriorityInherit+0xf4>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	60fb      	str	r3, [r7, #12]
 800c0e6:	e008      	b.n	800c0fa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0ec:	4b05      	ldr	r3, [pc, #20]	; (800c104 <xTaskPriorityInherit+0xf4>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d201      	bcs.n	800c0fa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
	}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	20000550 	.word	0x20000550
 800c108:	20000554 	.word	0x20000554
 800c10c:	20000658 	.word	0x20000658

0800c110 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c11c:	2300      	movs	r3, #0
 800c11e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d072      	beq.n	800c20c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c126:	4b3c      	ldr	r3, [pc, #240]	; (800c218 <xTaskPriorityDisinherit+0x108>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	693a      	ldr	r2, [r7, #16]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d00c      	beq.n	800c14a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c134:	b672      	cpsid	i
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	b662      	cpsie	i
 800c144:	60fb      	str	r3, [r7, #12]
}
 800c146:	bf00      	nop
 800c148:	e7fe      	b.n	800c148 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10c      	bne.n	800c16c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	b672      	cpsid	i
 800c158:	f383 8811 	msr	BASEPRI, r3
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	b662      	cpsie	i
 800c166:	60bb      	str	r3, [r7, #8]
}
 800c168:	bf00      	nop
 800c16a:	e7fe      	b.n	800c16a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c170:	1e5a      	subs	r2, r3, #1
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c17e:	429a      	cmp	r2, r3
 800c180:	d044      	beq.n	800c20c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c186:	2b00      	cmp	r3, #0
 800c188:	d140      	bne.n	800c20c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	3304      	adds	r3, #4
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fe fb59 	bl	800a846 <uxListRemove>
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d115      	bne.n	800c1c6 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c19e:	491f      	ldr	r1, [pc, #124]	; (800c21c <xTaskPriorityDisinherit+0x10c>)
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4413      	add	r3, r2
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	440b      	add	r3, r1
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d10a      	bne.n	800c1c6 <xTaskPriorityDisinherit+0xb6>
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ba:	43da      	mvns	r2, r3
 800c1bc:	4b18      	ldr	r3, [pc, #96]	; (800c220 <xTaskPriorityDisinherit+0x110>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	4013      	ands	r3, r2
 800c1c2:	4a17      	ldr	r2, [pc, #92]	; (800c220 <xTaskPriorityDisinherit+0x110>)
 800c1c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d2:	f1c3 0207 	rsb	r2, r3, #7
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1de:	2201      	movs	r2, #1
 800c1e0:	409a      	lsls	r2, r3
 800c1e2:	4b0f      	ldr	r3, [pc, #60]	; (800c220 <xTaskPriorityDisinherit+0x110>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	4a0d      	ldr	r2, [pc, #52]	; (800c220 <xTaskPriorityDisinherit+0x110>)
 800c1ea:	6013      	str	r3, [r2, #0]
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4a08      	ldr	r2, [pc, #32]	; (800c21c <xTaskPriorityDisinherit+0x10c>)
 800c1fa:	441a      	add	r2, r3
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	3304      	adds	r3, #4
 800c200:	4619      	mov	r1, r3
 800c202:	4610      	mov	r0, r2
 800c204:	f7fe fac2 	bl	800a78c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c208:	2301      	movs	r3, #1
 800c20a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c20c:	697b      	ldr	r3, [r7, #20]
	}
 800c20e:	4618      	mov	r0, r3
 800c210:	3718      	adds	r7, #24
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	20000550 	.word	0x20000550
 800c21c:	20000554 	.word	0x20000554
 800c220:	20000658 	.word	0x20000658

0800c224 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c224:	b580      	push	{r7, lr}
 800c226:	b088      	sub	sp, #32
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c232:	2301      	movs	r3, #1
 800c234:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	f000 8087 	beq.w	800c34c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10c      	bne.n	800c260 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800c246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c24a:	b672      	cpsid	i
 800c24c:	f383 8811 	msr	BASEPRI, r3
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	b662      	cpsie	i
 800c25a:	60fb      	str	r3, [r7, #12]
}
 800c25c:	bf00      	nop
 800c25e:	e7fe      	b.n	800c25e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c260:	69bb      	ldr	r3, [r7, #24]
 800c262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c264:	683a      	ldr	r2, [r7, #0]
 800c266:	429a      	cmp	r2, r3
 800c268:	d902      	bls.n	800c270 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	61fb      	str	r3, [r7, #28]
 800c26e:	e002      	b.n	800c276 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c274:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27a:	69fa      	ldr	r2, [r7, #28]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d065      	beq.n	800c34c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c284:	697a      	ldr	r2, [r7, #20]
 800c286:	429a      	cmp	r2, r3
 800c288:	d160      	bne.n	800c34c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c28a:	4b32      	ldr	r3, [pc, #200]	; (800c354 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	69ba      	ldr	r2, [r7, #24]
 800c290:	429a      	cmp	r2, r3
 800c292:	d10c      	bne.n	800c2ae <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800c294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c298:	b672      	cpsid	i
 800c29a:	f383 8811 	msr	BASEPRI, r3
 800c29e:	f3bf 8f6f 	isb	sy
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	b662      	cpsie	i
 800c2a8:	60bb      	str	r3, [r7, #8]
}
 800c2aa:	bf00      	nop
 800c2ac:	e7fe      	b.n	800c2ac <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c2ae:	69bb      	ldr	r3, [r7, #24]
 800c2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	69fa      	ldr	r2, [r7, #28]
 800c2b8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	db04      	blt.n	800c2cc <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	f1c3 0207 	rsb	r2, r3, #7
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	6959      	ldr	r1, [r3, #20]
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	4413      	add	r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4a1f      	ldr	r2, [pc, #124]	; (800c358 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c2dc:	4413      	add	r3, r2
 800c2de:	4299      	cmp	r1, r3
 800c2e0:	d134      	bne.n	800c34c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7fe faad 	bl	800a846 <uxListRemove>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d115      	bne.n	800c31e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f6:	4918      	ldr	r1, [pc, #96]	; (800c358 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	4413      	add	r3, r2
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	440b      	add	r3, r1
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10a      	bne.n	800c31e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c30c:	2201      	movs	r2, #1
 800c30e:	fa02 f303 	lsl.w	r3, r2, r3
 800c312:	43da      	mvns	r2, r3
 800c314:	4b11      	ldr	r3, [pc, #68]	; (800c35c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4013      	ands	r3, r2
 800c31a:	4a10      	ldr	r2, [pc, #64]	; (800c35c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c31c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c322:	2201      	movs	r2, #1
 800c324:	409a      	lsls	r2, r3
 800c326:	4b0d      	ldr	r3, [pc, #52]	; (800c35c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4313      	orrs	r3, r2
 800c32c:	4a0b      	ldr	r2, [pc, #44]	; (800c35c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800c32e:	6013      	str	r3, [r2, #0]
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c334:	4613      	mov	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4a06      	ldr	r2, [pc, #24]	; (800c358 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800c33e:	441a      	add	r2, r3
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	3304      	adds	r3, #4
 800c344:	4619      	mov	r1, r3
 800c346:	4610      	mov	r0, r2
 800c348:	f7fe fa20 	bl	800a78c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c34c:	bf00      	nop
 800c34e:	3720      	adds	r7, #32
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	20000550 	.word	0x20000550
 800c358:	20000554 	.word	0x20000554
 800c35c:	20000658 	.word	0x20000658

0800c360 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c360:	b480      	push	{r7}
 800c362:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c364:	4b07      	ldr	r3, [pc, #28]	; (800c384 <pvTaskIncrementMutexHeldCount+0x24>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d004      	beq.n	800c376 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c36c:	4b05      	ldr	r3, [pc, #20]	; (800c384 <pvTaskIncrementMutexHeldCount+0x24>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c372:	3201      	adds	r2, #1
 800c374:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c376:	4b03      	ldr	r3, [pc, #12]	; (800c384 <pvTaskIncrementMutexHeldCount+0x24>)
 800c378:	681b      	ldr	r3, [r3, #0]
	}
 800c37a:	4618      	mov	r0, r3
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr
 800c384:	20000550 	.word	0x20000550

0800c388 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c392:	4b29      	ldr	r3, [pc, #164]	; (800c438 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c398:	4b28      	ldr	r3, [pc, #160]	; (800c43c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	3304      	adds	r3, #4
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7fe fa51 	bl	800a846 <uxListRemove>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d10b      	bne.n	800c3c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c3aa:	4b24      	ldr	r3, [pc, #144]	; (800c43c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3b6:	43da      	mvns	r2, r3
 800c3b8:	4b21      	ldr	r3, [pc, #132]	; (800c440 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4013      	ands	r3, r2
 800c3be:	4a20      	ldr	r2, [pc, #128]	; (800c440 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c3c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c8:	d10a      	bne.n	800c3e0 <prvAddCurrentTaskToDelayedList+0x58>
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d007      	beq.n	800c3e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3d0:	4b1a      	ldr	r3, [pc, #104]	; (800c43c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	3304      	adds	r3, #4
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	481a      	ldr	r0, [pc, #104]	; (800c444 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c3da:	f7fe f9d7 	bl	800a78c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3de:	e026      	b.n	800c42e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3e8:	4b14      	ldr	r3, [pc, #80]	; (800c43c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d209      	bcs.n	800c40c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3f8:	4b13      	ldr	r3, [pc, #76]	; (800c448 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	4b0f      	ldr	r3, [pc, #60]	; (800c43c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	3304      	adds	r3, #4
 800c402:	4619      	mov	r1, r3
 800c404:	4610      	mov	r0, r2
 800c406:	f7fe f9e5 	bl	800a7d4 <vListInsert>
}
 800c40a:	e010      	b.n	800c42e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c40c:	4b0f      	ldr	r3, [pc, #60]	; (800c44c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3304      	adds	r3, #4
 800c416:	4619      	mov	r1, r3
 800c418:	4610      	mov	r0, r2
 800c41a:	f7fe f9db 	bl	800a7d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c41e:	4b0c      	ldr	r3, [pc, #48]	; (800c450 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	429a      	cmp	r2, r3
 800c426:	d202      	bcs.n	800c42e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c428:	4a09      	ldr	r2, [pc, #36]	; (800c450 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	6013      	str	r3, [r2, #0]
}
 800c42e:	bf00      	nop
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	20000654 	.word	0x20000654
 800c43c:	20000550 	.word	0x20000550
 800c440:	20000658 	.word	0x20000658
 800c444:	2000063c 	.word	0x2000063c
 800c448:	2000060c 	.word	0x2000060c
 800c44c:	20000608 	.word	0x20000608
 800c450:	20000670 	.word	0x20000670

0800c454 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	3b04      	subs	r3, #4
 800c464:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c46c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	3b04      	subs	r3, #4
 800c472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	f023 0201 	bic.w	r2, r3, #1
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3b04      	subs	r3, #4
 800c482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c484:	4a0c      	ldr	r2, [pc, #48]	; (800c4b8 <pxPortInitialiseStack+0x64>)
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	3b14      	subs	r3, #20
 800c48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	3b04      	subs	r3, #4
 800c49a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f06f 0202 	mvn.w	r2, #2
 800c4a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	3b20      	subs	r3, #32
 800c4a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	0800c4bd 	.word	0x0800c4bd

0800c4bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c4c6:	4b14      	ldr	r3, [pc, #80]	; (800c518 <prvTaskExitError+0x5c>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ce:	d00c      	beq.n	800c4ea <prvTaskExitError+0x2e>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d4:	b672      	cpsid	i
 800c4d6:	f383 8811 	msr	BASEPRI, r3
 800c4da:	f3bf 8f6f 	isb	sy
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	b662      	cpsie	i
 800c4e4:	60fb      	str	r3, [r7, #12]
}
 800c4e6:	bf00      	nop
 800c4e8:	e7fe      	b.n	800c4e8 <prvTaskExitError+0x2c>
	__asm volatile
 800c4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ee:	b672      	cpsid	i
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	b662      	cpsie	i
 800c4fe:	60bb      	str	r3, [r7, #8]
}
 800c500:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c502:	bf00      	nop
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d0fc      	beq.n	800c504 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c50a:	bf00      	nop
 800c50c:	bf00      	nop
 800c50e:	3714      	adds	r7, #20
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr
 800c518:	20000048 	.word	0x20000048
 800c51c:	00000000 	.word	0x00000000

0800c520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c520:	4b07      	ldr	r3, [pc, #28]	; (800c540 <pxCurrentTCBConst2>)
 800c522:	6819      	ldr	r1, [r3, #0]
 800c524:	6808      	ldr	r0, [r1, #0]
 800c526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c52a:	f380 8809 	msr	PSP, r0
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f04f 0000 	mov.w	r0, #0
 800c536:	f380 8811 	msr	BASEPRI, r0
 800c53a:	4770      	bx	lr
 800c53c:	f3af 8000 	nop.w

0800c540 <pxCurrentTCBConst2>:
 800c540:	20000550 	.word	0x20000550
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c544:	bf00      	nop
 800c546:	bf00      	nop

0800c548 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c548:	4808      	ldr	r0, [pc, #32]	; (800c56c <prvPortStartFirstTask+0x24>)
 800c54a:	6800      	ldr	r0, [r0, #0]
 800c54c:	6800      	ldr	r0, [r0, #0]
 800c54e:	f380 8808 	msr	MSP, r0
 800c552:	f04f 0000 	mov.w	r0, #0
 800c556:	f380 8814 	msr	CONTROL, r0
 800c55a:	b662      	cpsie	i
 800c55c:	b661      	cpsie	f
 800c55e:	f3bf 8f4f 	dsb	sy
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	df00      	svc	0
 800c568:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c56a:	bf00      	nop
 800c56c:	e000ed08 	.word	0xe000ed08

0800c570 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c576:	4b37      	ldr	r3, [pc, #220]	; (800c654 <xPortStartScheduler+0xe4>)
 800c578:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	22ff      	movs	r2, #255	; 0xff
 800c586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c590:	78fb      	ldrb	r3, [r7, #3]
 800c592:	b2db      	uxtb	r3, r3
 800c594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c598:	b2da      	uxtb	r2, r3
 800c59a:	4b2f      	ldr	r3, [pc, #188]	; (800c658 <xPortStartScheduler+0xe8>)
 800c59c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c59e:	4b2f      	ldr	r3, [pc, #188]	; (800c65c <xPortStartScheduler+0xec>)
 800c5a0:	2207      	movs	r2, #7
 800c5a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5a4:	e009      	b.n	800c5ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c5a6:	4b2d      	ldr	r3, [pc, #180]	; (800c65c <xPortStartScheduler+0xec>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	4a2b      	ldr	r2, [pc, #172]	; (800c65c <xPortStartScheduler+0xec>)
 800c5ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5b0:	78fb      	ldrb	r3, [r7, #3]
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	005b      	lsls	r3, r3, #1
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5ba:	78fb      	ldrb	r3, [r7, #3]
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5c2:	2b80      	cmp	r3, #128	; 0x80
 800c5c4:	d0ef      	beq.n	800c5a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c5c6:	4b25      	ldr	r3, [pc, #148]	; (800c65c <xPortStartScheduler+0xec>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f1c3 0307 	rsb	r3, r3, #7
 800c5ce:	2b04      	cmp	r3, #4
 800c5d0:	d00c      	beq.n	800c5ec <xPortStartScheduler+0x7c>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d6:	b672      	cpsid	i
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	b662      	cpsie	i
 800c5e6:	60bb      	str	r3, [r7, #8]
}
 800c5e8:	bf00      	nop
 800c5ea:	e7fe      	b.n	800c5ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c5ec:	4b1b      	ldr	r3, [pc, #108]	; (800c65c <xPortStartScheduler+0xec>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	021b      	lsls	r3, r3, #8
 800c5f2:	4a1a      	ldr	r2, [pc, #104]	; (800c65c <xPortStartScheduler+0xec>)
 800c5f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5f6:	4b19      	ldr	r3, [pc, #100]	; (800c65c <xPortStartScheduler+0xec>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c5fe:	4a17      	ldr	r2, [pc, #92]	; (800c65c <xPortStartScheduler+0xec>)
 800c600:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	b2da      	uxtb	r2, r3
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c60a:	4b15      	ldr	r3, [pc, #84]	; (800c660 <xPortStartScheduler+0xf0>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a14      	ldr	r2, [pc, #80]	; (800c660 <xPortStartScheduler+0xf0>)
 800c610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c614:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c616:	4b12      	ldr	r3, [pc, #72]	; (800c660 <xPortStartScheduler+0xf0>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4a11      	ldr	r2, [pc, #68]	; (800c660 <xPortStartScheduler+0xf0>)
 800c61c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c620:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c622:	f000 f8dd 	bl	800c7e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c626:	4b0f      	ldr	r3, [pc, #60]	; (800c664 <xPortStartScheduler+0xf4>)
 800c628:	2200      	movs	r2, #0
 800c62a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c62c:	f000 f8fc 	bl	800c828 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c630:	4b0d      	ldr	r3, [pc, #52]	; (800c668 <xPortStartScheduler+0xf8>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a0c      	ldr	r2, [pc, #48]	; (800c668 <xPortStartScheduler+0xf8>)
 800c636:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c63a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c63c:	f7ff ff84 	bl	800c548 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c640:	f7ff fa76 	bl	800bb30 <vTaskSwitchContext>
	prvTaskExitError();
 800c644:	f7ff ff3a 	bl	800c4bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	e000e400 	.word	0xe000e400
 800c658:	2000067c 	.word	0x2000067c
 800c65c:	20000680 	.word	0x20000680
 800c660:	e000ed20 	.word	0xe000ed20
 800c664:	20000048 	.word	0x20000048
 800c668:	e000ef34 	.word	0xe000ef34

0800c66c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
	__asm volatile
 800c672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c676:	b672      	cpsid	i
 800c678:	f383 8811 	msr	BASEPRI, r3
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	b662      	cpsie	i
 800c686:	607b      	str	r3, [r7, #4]
}
 800c688:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c68a:	4b10      	ldr	r3, [pc, #64]	; (800c6cc <vPortEnterCritical+0x60>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	3301      	adds	r3, #1
 800c690:	4a0e      	ldr	r2, [pc, #56]	; (800c6cc <vPortEnterCritical+0x60>)
 800c692:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c694:	4b0d      	ldr	r3, [pc, #52]	; (800c6cc <vPortEnterCritical+0x60>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d111      	bne.n	800c6c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c69c:	4b0c      	ldr	r3, [pc, #48]	; (800c6d0 <vPortEnterCritical+0x64>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00c      	beq.n	800c6c0 <vPortEnterCritical+0x54>
	__asm volatile
 800c6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6aa:	b672      	cpsid	i
 800c6ac:	f383 8811 	msr	BASEPRI, r3
 800c6b0:	f3bf 8f6f 	isb	sy
 800c6b4:	f3bf 8f4f 	dsb	sy
 800c6b8:	b662      	cpsie	i
 800c6ba:	603b      	str	r3, [r7, #0]
}
 800c6bc:	bf00      	nop
 800c6be:	e7fe      	b.n	800c6be <vPortEnterCritical+0x52>
	}
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr
 800c6cc:	20000048 	.word	0x20000048
 800c6d0:	e000ed04 	.word	0xe000ed04

0800c6d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c6da:	4b13      	ldr	r3, [pc, #76]	; (800c728 <vPortExitCritical+0x54>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d10c      	bne.n	800c6fc <vPortExitCritical+0x28>
	__asm volatile
 800c6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e6:	b672      	cpsid	i
 800c6e8:	f383 8811 	msr	BASEPRI, r3
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	f3bf 8f4f 	dsb	sy
 800c6f4:	b662      	cpsie	i
 800c6f6:	607b      	str	r3, [r7, #4]
}
 800c6f8:	bf00      	nop
 800c6fa:	e7fe      	b.n	800c6fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c6fc:	4b0a      	ldr	r3, [pc, #40]	; (800c728 <vPortExitCritical+0x54>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	3b01      	subs	r3, #1
 800c702:	4a09      	ldr	r2, [pc, #36]	; (800c728 <vPortExitCritical+0x54>)
 800c704:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c706:	4b08      	ldr	r3, [pc, #32]	; (800c728 <vPortExitCritical+0x54>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d105      	bne.n	800c71a <vPortExitCritical+0x46>
 800c70e:	2300      	movs	r3, #0
 800c710:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c718:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c71a:	bf00      	nop
 800c71c:	370c      	adds	r7, #12
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	20000048 	.word	0x20000048
 800c72c:	00000000 	.word	0x00000000

0800c730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c730:	f3ef 8009 	mrs	r0, PSP
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	4b15      	ldr	r3, [pc, #84]	; (800c790 <pxCurrentTCBConst>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	f01e 0f10 	tst.w	lr, #16
 800c740:	bf08      	it	eq
 800c742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74a:	6010      	str	r0, [r2, #0]
 800c74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c750:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c754:	b672      	cpsid	i
 800c756:	f380 8811 	msr	BASEPRI, r0
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	b662      	cpsie	i
 800c764:	f7ff f9e4 	bl	800bb30 <vTaskSwitchContext>
 800c768:	f04f 0000 	mov.w	r0, #0
 800c76c:	f380 8811 	msr	BASEPRI, r0
 800c770:	bc09      	pop	{r0, r3}
 800c772:	6819      	ldr	r1, [r3, #0]
 800c774:	6808      	ldr	r0, [r1, #0]
 800c776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77a:	f01e 0f10 	tst.w	lr, #16
 800c77e:	bf08      	it	eq
 800c780:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c784:	f380 8809 	msr	PSP, r0
 800c788:	f3bf 8f6f 	isb	sy
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop

0800c790 <pxCurrentTCBConst>:
 800c790:	20000550 	.word	0x20000550
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop

0800c798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a2:	b672      	cpsid	i
 800c7a4:	f383 8811 	msr	BASEPRI, r3
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	f3bf 8f4f 	dsb	sy
 800c7b0:	b662      	cpsie	i
 800c7b2:	607b      	str	r3, [r7, #4]
}
 800c7b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7b6:	f7ff f901 	bl	800b9bc <xTaskIncrementTick>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d003      	beq.n	800c7c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7c0:	4b06      	ldr	r3, [pc, #24]	; (800c7dc <SysTick_Handler+0x44>)
 800c7c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7c6:	601a      	str	r2, [r3, #0]
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	f383 8811 	msr	BASEPRI, r3
}
 800c7d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c7d4:	bf00      	nop
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	e000ed04 	.word	0xe000ed04

0800c7e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c7e4:	4b0b      	ldr	r3, [pc, #44]	; (800c814 <vPortSetupTimerInterrupt+0x34>)
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7ea:	4b0b      	ldr	r3, [pc, #44]	; (800c818 <vPortSetupTimerInterrupt+0x38>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7f0:	4b0a      	ldr	r3, [pc, #40]	; (800c81c <vPortSetupTimerInterrupt+0x3c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4a0a      	ldr	r2, [pc, #40]	; (800c820 <vPortSetupTimerInterrupt+0x40>)
 800c7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7fa:	099b      	lsrs	r3, r3, #6
 800c7fc:	4a09      	ldr	r2, [pc, #36]	; (800c824 <vPortSetupTimerInterrupt+0x44>)
 800c7fe:	3b01      	subs	r3, #1
 800c800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c802:	4b04      	ldr	r3, [pc, #16]	; (800c814 <vPortSetupTimerInterrupt+0x34>)
 800c804:	2207      	movs	r2, #7
 800c806:	601a      	str	r2, [r3, #0]
}
 800c808:	bf00      	nop
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	e000e010 	.word	0xe000e010
 800c818:	e000e018 	.word	0xe000e018
 800c81c:	2000003c 	.word	0x2000003c
 800c820:	10624dd3 	.word	0x10624dd3
 800c824:	e000e014 	.word	0xe000e014

0800c828 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c828:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c838 <vPortEnableVFP+0x10>
 800c82c:	6801      	ldr	r1, [r0, #0]
 800c82e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c832:	6001      	str	r1, [r0, #0]
 800c834:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c836:	bf00      	nop
 800c838:	e000ed88 	.word	0xe000ed88

0800c83c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08a      	sub	sp, #40	; 0x28
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c844:	2300      	movs	r3, #0
 800c846:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c848:	f7ff f80c 	bl	800b864 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c84c:	4b5b      	ldr	r3, [pc, #364]	; (800c9bc <pvPortMalloc+0x180>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d101      	bne.n	800c858 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c854:	f000 f91a 	bl	800ca8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c858:	4b59      	ldr	r3, [pc, #356]	; (800c9c0 <pvPortMalloc+0x184>)
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4013      	ands	r3, r2
 800c860:	2b00      	cmp	r3, #0
 800c862:	f040 8092 	bne.w	800c98a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d01f      	beq.n	800c8ac <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c86c:	2208      	movs	r2, #8
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4413      	add	r3, r2
 800c872:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f003 0307 	and.w	r3, r3, #7
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d016      	beq.n	800c8ac <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f023 0307 	bic.w	r3, r3, #7
 800c884:	3308      	adds	r3, #8
 800c886:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f003 0307 	and.w	r3, r3, #7
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00c      	beq.n	800c8ac <pvPortMalloc+0x70>
	__asm volatile
 800c892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c896:	b672      	cpsid	i
 800c898:	f383 8811 	msr	BASEPRI, r3
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	b662      	cpsie	i
 800c8a6:	617b      	str	r3, [r7, #20]
}
 800c8a8:	bf00      	nop
 800c8aa:	e7fe      	b.n	800c8aa <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d06b      	beq.n	800c98a <pvPortMalloc+0x14e>
 800c8b2:	4b44      	ldr	r3, [pc, #272]	; (800c9c4 <pvPortMalloc+0x188>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d866      	bhi.n	800c98a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8bc:	4b42      	ldr	r3, [pc, #264]	; (800c9c8 <pvPortMalloc+0x18c>)
 800c8be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8c0:	4b41      	ldr	r3, [pc, #260]	; (800c9c8 <pvPortMalloc+0x18c>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8c6:	e004      	b.n	800c8d2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d903      	bls.n	800c8e4 <pvPortMalloc+0xa8>
 800c8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1f1      	bne.n	800c8c8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8e4:	4b35      	ldr	r3, [pc, #212]	; (800c9bc <pvPortMalloc+0x180>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d04d      	beq.n	800c98a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8ee:	6a3b      	ldr	r3, [r7, #32]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2208      	movs	r2, #8
 800c8f4:	4413      	add	r3, r2
 800c8f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	6a3b      	ldr	r3, [r7, #32]
 800c8fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c902:	685a      	ldr	r2, [r3, #4]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	1ad2      	subs	r2, r2, r3
 800c908:	2308      	movs	r3, #8
 800c90a:	005b      	lsls	r3, r3, #1
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d921      	bls.n	800c954 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	4413      	add	r3, r2
 800c916:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c918:	69bb      	ldr	r3, [r7, #24]
 800c91a:	f003 0307 	and.w	r3, r3, #7
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00c      	beq.n	800c93c <pvPortMalloc+0x100>
	__asm volatile
 800c922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c926:	b672      	cpsid	i
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	b662      	cpsie	i
 800c936:	613b      	str	r3, [r7, #16]
}
 800c938:	bf00      	nop
 800c93a:	e7fe      	b.n	800c93a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	685a      	ldr	r2, [r3, #4]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	1ad2      	subs	r2, r2, r3
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c94e:	69b8      	ldr	r0, [r7, #24]
 800c950:	f000 f8fe 	bl	800cb50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c954:	4b1b      	ldr	r3, [pc, #108]	; (800c9c4 <pvPortMalloc+0x188>)
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	4a19      	ldr	r2, [pc, #100]	; (800c9c4 <pvPortMalloc+0x188>)
 800c960:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c962:	4b18      	ldr	r3, [pc, #96]	; (800c9c4 <pvPortMalloc+0x188>)
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	4b19      	ldr	r3, [pc, #100]	; (800c9cc <pvPortMalloc+0x190>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d203      	bcs.n	800c976 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c96e:	4b15      	ldr	r3, [pc, #84]	; (800c9c4 <pvPortMalloc+0x188>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a16      	ldr	r2, [pc, #88]	; (800c9cc <pvPortMalloc+0x190>)
 800c974:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	685a      	ldr	r2, [r3, #4]
 800c97a:	4b11      	ldr	r3, [pc, #68]	; (800c9c0 <pvPortMalloc+0x184>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	431a      	orrs	r2, r3
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c982:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	2200      	movs	r2, #0
 800c988:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c98a:	f7fe ff79 	bl	800b880 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	f003 0307 	and.w	r3, r3, #7
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00c      	beq.n	800c9b2 <pvPortMalloc+0x176>
	__asm volatile
 800c998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99c:	b672      	cpsid	i
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	b662      	cpsie	i
 800c9ac:	60fb      	str	r3, [r7, #12]
}
 800c9ae:	bf00      	nop
 800c9b0:	e7fe      	b.n	800c9b0 <pvPortMalloc+0x174>
	return pvReturn;
 800c9b2:	69fb      	ldr	r3, [r7, #28]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3728      	adds	r7, #40	; 0x28
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	20007e8c 	.word	0x20007e8c
 800c9c0:	20007e98 	.word	0x20007e98
 800c9c4:	20007e90 	.word	0x20007e90
 800c9c8:	20007e84 	.word	0x20007e84
 800c9cc:	20007e94 	.word	0x20007e94

0800c9d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b086      	sub	sp, #24
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d04c      	beq.n	800ca7c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9e2:	2308      	movs	r3, #8
 800c9e4:	425b      	negs	r3, r3
 800c9e6:	697a      	ldr	r2, [r7, #20]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	4b23      	ldr	r3, [pc, #140]	; (800ca84 <vPortFree+0xb4>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4013      	ands	r3, r2
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10c      	bne.n	800ca18 <vPortFree+0x48>
	__asm volatile
 800c9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca02:	b672      	cpsid	i
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	b662      	cpsie	i
 800ca12:	60fb      	str	r3, [r7, #12]
}
 800ca14:	bf00      	nop
 800ca16:	e7fe      	b.n	800ca16 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00c      	beq.n	800ca3a <vPortFree+0x6a>
	__asm volatile
 800ca20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca24:	b672      	cpsid	i
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	b662      	cpsie	i
 800ca34:	60bb      	str	r3, [r7, #8]
}
 800ca36:	bf00      	nop
 800ca38:	e7fe      	b.n	800ca38 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	685a      	ldr	r2, [r3, #4]
 800ca3e:	4b11      	ldr	r3, [pc, #68]	; (800ca84 <vPortFree+0xb4>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4013      	ands	r3, r2
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d019      	beq.n	800ca7c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d115      	bne.n	800ca7c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	685a      	ldr	r2, [r3, #4]
 800ca54:	4b0b      	ldr	r3, [pc, #44]	; (800ca84 <vPortFree+0xb4>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	43db      	mvns	r3, r3
 800ca5a:	401a      	ands	r2, r3
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca60:	f7fe ff00 	bl	800b864 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	685a      	ldr	r2, [r3, #4]
 800ca68:	4b07      	ldr	r3, [pc, #28]	; (800ca88 <vPortFree+0xb8>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	4a06      	ldr	r2, [pc, #24]	; (800ca88 <vPortFree+0xb8>)
 800ca70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca72:	6938      	ldr	r0, [r7, #16]
 800ca74:	f000 f86c 	bl	800cb50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ca78:	f7fe ff02 	bl	800b880 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca7c:	bf00      	nop
 800ca7e:	3718      	adds	r7, #24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	20007e98 	.word	0x20007e98
 800ca88:	20007e90 	.word	0x20007e90

0800ca8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca92:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800ca96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca98:	4b27      	ldr	r3, [pc, #156]	; (800cb38 <prvHeapInit+0xac>)
 800ca9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	f003 0307 	and.w	r3, r3, #7
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00c      	beq.n	800cac0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	3307      	adds	r3, #7
 800caaa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f023 0307 	bic.w	r3, r3, #7
 800cab2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	4a1f      	ldr	r2, [pc, #124]	; (800cb38 <prvHeapInit+0xac>)
 800cabc:	4413      	add	r3, r2
 800cabe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cac4:	4a1d      	ldr	r2, [pc, #116]	; (800cb3c <prvHeapInit+0xb0>)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800caca:	4b1c      	ldr	r3, [pc, #112]	; (800cb3c <prvHeapInit+0xb0>)
 800cacc:	2200      	movs	r2, #0
 800cace:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	4413      	add	r3, r2
 800cad6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cad8:	2208      	movs	r2, #8
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	1a9b      	subs	r3, r3, r2
 800cade:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f023 0307 	bic.w	r3, r3, #7
 800cae6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	4a15      	ldr	r2, [pc, #84]	; (800cb40 <prvHeapInit+0xb4>)
 800caec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800caee:	4b14      	ldr	r3, [pc, #80]	; (800cb40 <prvHeapInit+0xb4>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2200      	movs	r2, #0
 800caf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800caf6:	4b12      	ldr	r3, [pc, #72]	; (800cb40 <prvHeapInit+0xb4>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	2200      	movs	r2, #0
 800cafc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	1ad2      	subs	r2, r2, r3
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb0c:	4b0c      	ldr	r3, [pc, #48]	; (800cb40 <prvHeapInit+0xb4>)
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	4a0a      	ldr	r2, [pc, #40]	; (800cb44 <prvHeapInit+0xb8>)
 800cb1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	4a09      	ldr	r2, [pc, #36]	; (800cb48 <prvHeapInit+0xbc>)
 800cb22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb24:	4b09      	ldr	r3, [pc, #36]	; (800cb4c <prvHeapInit+0xc0>)
 800cb26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb2a:	601a      	str	r2, [r3, #0]
}
 800cb2c:	bf00      	nop
 800cb2e:	3714      	adds	r7, #20
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr
 800cb38:	20000684 	.word	0x20000684
 800cb3c:	20007e84 	.word	0x20007e84
 800cb40:	20007e8c 	.word	0x20007e8c
 800cb44:	20007e94 	.word	0x20007e94
 800cb48:	20007e90 	.word	0x20007e90
 800cb4c:	20007e98 	.word	0x20007e98

0800cb50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb58:	4b28      	ldr	r3, [pc, #160]	; (800cbfc <prvInsertBlockIntoFreeList+0xac>)
 800cb5a:	60fb      	str	r3, [r7, #12]
 800cb5c:	e002      	b.n	800cb64 <prvInsertBlockIntoFreeList+0x14>
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d8f7      	bhi.n	800cb5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	4413      	add	r3, r2
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d108      	bne.n	800cb92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	685a      	ldr	r2, [r3, #4]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	441a      	add	r2, r3
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	441a      	add	r2, r3
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d118      	bne.n	800cbd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	4b15      	ldr	r3, [pc, #84]	; (800cc00 <prvInsertBlockIntoFreeList+0xb0>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d00d      	beq.n	800cbce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	685a      	ldr	r2, [r3, #4]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	441a      	add	r2, r3
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	601a      	str	r2, [r3, #0]
 800cbcc:	e008      	b.n	800cbe0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbce:	4b0c      	ldr	r3, [pc, #48]	; (800cc00 <prvInsertBlockIntoFreeList+0xb0>)
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	601a      	str	r2, [r3, #0]
 800cbd6:	e003      	b.n	800cbe0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d002      	beq.n	800cbee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbee:	bf00      	nop
 800cbf0:	3714      	adds	r7, #20
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	20007e84 	.word	0x20007e84
 800cc00:	20007e8c 	.word	0x20007e8c

0800cc04 <__libc_init_array>:
 800cc04:	b570      	push	{r4, r5, r6, lr}
 800cc06:	4d0d      	ldr	r5, [pc, #52]	; (800cc3c <__libc_init_array+0x38>)
 800cc08:	4c0d      	ldr	r4, [pc, #52]	; (800cc40 <__libc_init_array+0x3c>)
 800cc0a:	1b64      	subs	r4, r4, r5
 800cc0c:	10a4      	asrs	r4, r4, #2
 800cc0e:	2600      	movs	r6, #0
 800cc10:	42a6      	cmp	r6, r4
 800cc12:	d109      	bne.n	800cc28 <__libc_init_array+0x24>
 800cc14:	4d0b      	ldr	r5, [pc, #44]	; (800cc44 <__libc_init_array+0x40>)
 800cc16:	4c0c      	ldr	r4, [pc, #48]	; (800cc48 <__libc_init_array+0x44>)
 800cc18:	f000 f8f6 	bl	800ce08 <_init>
 800cc1c:	1b64      	subs	r4, r4, r5
 800cc1e:	10a4      	asrs	r4, r4, #2
 800cc20:	2600      	movs	r6, #0
 800cc22:	42a6      	cmp	r6, r4
 800cc24:	d105      	bne.n	800cc32 <__libc_init_array+0x2e>
 800cc26:	bd70      	pop	{r4, r5, r6, pc}
 800cc28:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc2c:	4798      	blx	r3
 800cc2e:	3601      	adds	r6, #1
 800cc30:	e7ee      	b.n	800cc10 <__libc_init_array+0xc>
 800cc32:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc36:	4798      	blx	r3
 800cc38:	3601      	adds	r6, #1
 800cc3a:	e7f2      	b.n	800cc22 <__libc_init_array+0x1e>
 800cc3c:	08033074 	.word	0x08033074
 800cc40:	08033074 	.word	0x08033074
 800cc44:	08033074 	.word	0x08033074
 800cc48:	08033078 	.word	0x08033078

0800cc4c <__retarget_lock_acquire_recursive>:
 800cc4c:	4770      	bx	lr

0800cc4e <__retarget_lock_release_recursive>:
 800cc4e:	4770      	bx	lr

0800cc50 <memcpy>:
 800cc50:	440a      	add	r2, r1
 800cc52:	4291      	cmp	r1, r2
 800cc54:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc58:	d100      	bne.n	800cc5c <memcpy+0xc>
 800cc5a:	4770      	bx	lr
 800cc5c:	b510      	push	{r4, lr}
 800cc5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc66:	4291      	cmp	r1, r2
 800cc68:	d1f9      	bne.n	800cc5e <memcpy+0xe>
 800cc6a:	bd10      	pop	{r4, pc}

0800cc6c <memset>:
 800cc6c:	4402      	add	r2, r0
 800cc6e:	4603      	mov	r3, r0
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d100      	bne.n	800cc76 <memset+0xa>
 800cc74:	4770      	bx	lr
 800cc76:	f803 1b01 	strb.w	r1, [r3], #1
 800cc7a:	e7f9      	b.n	800cc70 <memset+0x4>

0800cc7c <cleanup_glue>:
 800cc7c:	b538      	push	{r3, r4, r5, lr}
 800cc7e:	460c      	mov	r4, r1
 800cc80:	6809      	ldr	r1, [r1, #0]
 800cc82:	4605      	mov	r5, r0
 800cc84:	b109      	cbz	r1, 800cc8a <cleanup_glue+0xe>
 800cc86:	f7ff fff9 	bl	800cc7c <cleanup_glue>
 800cc8a:	4621      	mov	r1, r4
 800cc8c:	4628      	mov	r0, r5
 800cc8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc92:	f000 b869 	b.w	800cd68 <_free_r>
	...

0800cc98 <_reclaim_reent>:
 800cc98:	4b2c      	ldr	r3, [pc, #176]	; (800cd4c <_reclaim_reent+0xb4>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4283      	cmp	r3, r0
 800cc9e:	b570      	push	{r4, r5, r6, lr}
 800cca0:	4604      	mov	r4, r0
 800cca2:	d051      	beq.n	800cd48 <_reclaim_reent+0xb0>
 800cca4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cca6:	b143      	cbz	r3, 800ccba <_reclaim_reent+0x22>
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d14a      	bne.n	800cd44 <_reclaim_reent+0xac>
 800ccae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccb0:	6819      	ldr	r1, [r3, #0]
 800ccb2:	b111      	cbz	r1, 800ccba <_reclaim_reent+0x22>
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f000 f857 	bl	800cd68 <_free_r>
 800ccba:	6961      	ldr	r1, [r4, #20]
 800ccbc:	b111      	cbz	r1, 800ccc4 <_reclaim_reent+0x2c>
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	f000 f852 	bl	800cd68 <_free_r>
 800ccc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ccc6:	b111      	cbz	r1, 800ccce <_reclaim_reent+0x36>
 800ccc8:	4620      	mov	r0, r4
 800ccca:	f000 f84d 	bl	800cd68 <_free_r>
 800ccce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ccd0:	b111      	cbz	r1, 800ccd8 <_reclaim_reent+0x40>
 800ccd2:	4620      	mov	r0, r4
 800ccd4:	f000 f848 	bl	800cd68 <_free_r>
 800ccd8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ccda:	b111      	cbz	r1, 800cce2 <_reclaim_reent+0x4a>
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f000 f843 	bl	800cd68 <_free_r>
 800cce2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cce4:	b111      	cbz	r1, 800ccec <_reclaim_reent+0x54>
 800cce6:	4620      	mov	r0, r4
 800cce8:	f000 f83e 	bl	800cd68 <_free_r>
 800ccec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ccee:	b111      	cbz	r1, 800ccf6 <_reclaim_reent+0x5e>
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f000 f839 	bl	800cd68 <_free_r>
 800ccf6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ccf8:	b111      	cbz	r1, 800cd00 <_reclaim_reent+0x68>
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	f000 f834 	bl	800cd68 <_free_r>
 800cd00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd02:	b111      	cbz	r1, 800cd0a <_reclaim_reent+0x72>
 800cd04:	4620      	mov	r0, r4
 800cd06:	f000 f82f 	bl	800cd68 <_free_r>
 800cd0a:	69a3      	ldr	r3, [r4, #24]
 800cd0c:	b1e3      	cbz	r3, 800cd48 <_reclaim_reent+0xb0>
 800cd0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd10:	4620      	mov	r0, r4
 800cd12:	4798      	blx	r3
 800cd14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cd16:	b1b9      	cbz	r1, 800cd48 <_reclaim_reent+0xb0>
 800cd18:	4620      	mov	r0, r4
 800cd1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd1e:	f7ff bfad 	b.w	800cc7c <cleanup_glue>
 800cd22:	5949      	ldr	r1, [r1, r5]
 800cd24:	b941      	cbnz	r1, 800cd38 <_reclaim_reent+0xa0>
 800cd26:	3504      	adds	r5, #4
 800cd28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd2a:	2d80      	cmp	r5, #128	; 0x80
 800cd2c:	68d9      	ldr	r1, [r3, #12]
 800cd2e:	d1f8      	bne.n	800cd22 <_reclaim_reent+0x8a>
 800cd30:	4620      	mov	r0, r4
 800cd32:	f000 f819 	bl	800cd68 <_free_r>
 800cd36:	e7ba      	b.n	800ccae <_reclaim_reent+0x16>
 800cd38:	680e      	ldr	r6, [r1, #0]
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f000 f814 	bl	800cd68 <_free_r>
 800cd40:	4631      	mov	r1, r6
 800cd42:	e7ef      	b.n	800cd24 <_reclaim_reent+0x8c>
 800cd44:	2500      	movs	r5, #0
 800cd46:	e7ef      	b.n	800cd28 <_reclaim_reent+0x90>
 800cd48:	bd70      	pop	{r4, r5, r6, pc}
 800cd4a:	bf00      	nop
 800cd4c:	2000004c 	.word	0x2000004c

0800cd50 <__malloc_lock>:
 800cd50:	4801      	ldr	r0, [pc, #4]	; (800cd58 <__malloc_lock+0x8>)
 800cd52:	f7ff bf7b 	b.w	800cc4c <__retarget_lock_acquire_recursive>
 800cd56:	bf00      	nop
 800cd58:	20008620 	.word	0x20008620

0800cd5c <__malloc_unlock>:
 800cd5c:	4801      	ldr	r0, [pc, #4]	; (800cd64 <__malloc_unlock+0x8>)
 800cd5e:	f7ff bf76 	b.w	800cc4e <__retarget_lock_release_recursive>
 800cd62:	bf00      	nop
 800cd64:	20008620 	.word	0x20008620

0800cd68 <_free_r>:
 800cd68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd6a:	2900      	cmp	r1, #0
 800cd6c:	d048      	beq.n	800ce00 <_free_r+0x98>
 800cd6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd72:	9001      	str	r0, [sp, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f1a1 0404 	sub.w	r4, r1, #4
 800cd7a:	bfb8      	it	lt
 800cd7c:	18e4      	addlt	r4, r4, r3
 800cd7e:	f7ff ffe7 	bl	800cd50 <__malloc_lock>
 800cd82:	4a20      	ldr	r2, [pc, #128]	; (800ce04 <_free_r+0x9c>)
 800cd84:	9801      	ldr	r0, [sp, #4]
 800cd86:	6813      	ldr	r3, [r2, #0]
 800cd88:	4615      	mov	r5, r2
 800cd8a:	b933      	cbnz	r3, 800cd9a <_free_r+0x32>
 800cd8c:	6063      	str	r3, [r4, #4]
 800cd8e:	6014      	str	r4, [r2, #0]
 800cd90:	b003      	add	sp, #12
 800cd92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd96:	f7ff bfe1 	b.w	800cd5c <__malloc_unlock>
 800cd9a:	42a3      	cmp	r3, r4
 800cd9c:	d90b      	bls.n	800cdb6 <_free_r+0x4e>
 800cd9e:	6821      	ldr	r1, [r4, #0]
 800cda0:	1862      	adds	r2, r4, r1
 800cda2:	4293      	cmp	r3, r2
 800cda4:	bf04      	itt	eq
 800cda6:	681a      	ldreq	r2, [r3, #0]
 800cda8:	685b      	ldreq	r3, [r3, #4]
 800cdaa:	6063      	str	r3, [r4, #4]
 800cdac:	bf04      	itt	eq
 800cdae:	1852      	addeq	r2, r2, r1
 800cdb0:	6022      	streq	r2, [r4, #0]
 800cdb2:	602c      	str	r4, [r5, #0]
 800cdb4:	e7ec      	b.n	800cd90 <_free_r+0x28>
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	b10b      	cbz	r3, 800cdc0 <_free_r+0x58>
 800cdbc:	42a3      	cmp	r3, r4
 800cdbe:	d9fa      	bls.n	800cdb6 <_free_r+0x4e>
 800cdc0:	6811      	ldr	r1, [r2, #0]
 800cdc2:	1855      	adds	r5, r2, r1
 800cdc4:	42a5      	cmp	r5, r4
 800cdc6:	d10b      	bne.n	800cde0 <_free_r+0x78>
 800cdc8:	6824      	ldr	r4, [r4, #0]
 800cdca:	4421      	add	r1, r4
 800cdcc:	1854      	adds	r4, r2, r1
 800cdce:	42a3      	cmp	r3, r4
 800cdd0:	6011      	str	r1, [r2, #0]
 800cdd2:	d1dd      	bne.n	800cd90 <_free_r+0x28>
 800cdd4:	681c      	ldr	r4, [r3, #0]
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	6053      	str	r3, [r2, #4]
 800cdda:	4421      	add	r1, r4
 800cddc:	6011      	str	r1, [r2, #0]
 800cdde:	e7d7      	b.n	800cd90 <_free_r+0x28>
 800cde0:	d902      	bls.n	800cde8 <_free_r+0x80>
 800cde2:	230c      	movs	r3, #12
 800cde4:	6003      	str	r3, [r0, #0]
 800cde6:	e7d3      	b.n	800cd90 <_free_r+0x28>
 800cde8:	6825      	ldr	r5, [r4, #0]
 800cdea:	1961      	adds	r1, r4, r5
 800cdec:	428b      	cmp	r3, r1
 800cdee:	bf04      	itt	eq
 800cdf0:	6819      	ldreq	r1, [r3, #0]
 800cdf2:	685b      	ldreq	r3, [r3, #4]
 800cdf4:	6063      	str	r3, [r4, #4]
 800cdf6:	bf04      	itt	eq
 800cdf8:	1949      	addeq	r1, r1, r5
 800cdfa:	6021      	streq	r1, [r4, #0]
 800cdfc:	6054      	str	r4, [r2, #4]
 800cdfe:	e7c7      	b.n	800cd90 <_free_r+0x28>
 800ce00:	b003      	add	sp, #12
 800ce02:	bd30      	pop	{r4, r5, pc}
 800ce04:	20007e9c 	.word	0x20007e9c

0800ce08 <_init>:
 800ce08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0a:	bf00      	nop
 800ce0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce0e:	bc08      	pop	{r3}
 800ce10:	469e      	mov	lr, r3
 800ce12:	4770      	bx	lr

0800ce14 <_fini>:
 800ce14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce16:	bf00      	nop
 800ce18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce1a:	bc08      	pop	{r3}
 800ce1c:	469e      	mov	lr, r3
 800ce1e:	4770      	bx	lr
