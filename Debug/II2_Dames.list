
II2_Dames.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e210  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000262b0  0800e3e0  0800e3e0  0001e3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08034690  08034690  000500b4  2**0
                  CONTENTS
  4 .ARM          00000008  08034690  08034690  00044690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08034698  08034698  000500b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08034698  08034698  00044698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803469c  0803469c  0004469c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080346a0  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d78  200000b4  08034754  000500b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008e2c  08034754  00058e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000335d7  00000000  00000000  000500e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005da2  00000000  00000000  000836bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002668  00000000  00000000  00089460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002410  00000000  00000000  0008bac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e830  00000000  00000000  0008ded8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fb3f  00000000  00000000  000bc708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117978  00000000  00000000  000ec247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00203bbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a638  00000000  00000000  00203c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e3c8 	.word	0x0800e3c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800e3c8 	.word	0x0800e3c8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000d0 	.word	0x200000d0
 8000538:	20000184 	.word	0x20000184

0800053c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000546:	20c8      	movs	r0, #200	; 0xc8
 8000548:	f002 fd00 	bl	8002f4c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800054c:	f000 fa7a 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000580:	2300      	movs	r3, #0
 8000582:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000584:	f000 fa5e 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e010      	b.n	80005b0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	21a8      	movs	r1, #168	; 0xa8
 8000594:	4618      	mov	r0, r3
 8000596:	f002 fcbb 	bl	8002f10 <TS_IO_Read>
 800059a:	4603      	mov	r3, r0
 800059c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b51      	cmp	r3, #81	; 0x51
 80005a4:	d101      	bne.n	80005aa <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d802      	bhi.n	80005bc <ft5336_ReadID+0x4e>
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e8      	beq.n	800058e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fa44 	bl	8000a64 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f932 	bl	8000848 <ft5336_TS_DisableIT>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fc85 	bl	8002f10 <TS_IO_Read>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b05      	cmp	r3, #5
 800061c:	d901      	bls.n	8000622 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 8000628:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	b2db      	uxtb	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000384 	.word	0x20000384

08000640 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000664:	789a      	ldrb	r2, [r3, #2]
 8000666:	4b6c      	ldr	r3, [pc, #432]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	429a      	cmp	r2, r3
 800066c:	f080 80cf 	bcs.w	800080e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000670:	4b69      	ldr	r3, [pc, #420]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d871      	bhi.n	800075c <ft5336_TS_GetXY+0x11c>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <ft5336_TS_GetXY+0x40>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	080006a9 	.word	0x080006a9
 8000684:	080006bb 	.word	0x080006bb
 8000688:	080006cd 	.word	0x080006cd
 800068c:	080006df 	.word	0x080006df
 8000690:	080006f1 	.word	0x080006f1
 8000694:	08000703 	.word	0x08000703
 8000698:	08000715 	.word	0x08000715
 800069c:	08000727 	.word	0x08000727
 80006a0:	08000739 	.word	0x08000739
 80006a4:	0800074b 	.word	0x0800074b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006a8:	2304      	movs	r3, #4
 80006aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006ac:	2303      	movs	r3, #3
 80006ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b0:	2306      	movs	r3, #6
 80006b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006b4:	2305      	movs	r3, #5
 80006b6:	753b      	strb	r3, [r7, #20]
      break;
 80006b8:	e051      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ba:	230a      	movs	r3, #10
 80006bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006be:	2309      	movs	r3, #9
 80006c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006c2:	230c      	movs	r3, #12
 80006c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006c6:	230b      	movs	r3, #11
 80006c8:	753b      	strb	r3, [r7, #20]
      break;
 80006ca:	e048      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006cc:	2310      	movs	r3, #16
 80006ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d0:	230f      	movs	r3, #15
 80006d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006d4:	2312      	movs	r3, #18
 80006d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006d8:	2311      	movs	r3, #17
 80006da:	753b      	strb	r3, [r7, #20]
      break;
 80006dc:	e03f      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006de:	2316      	movs	r3, #22
 80006e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006e2:	2315      	movs	r3, #21
 80006e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006e6:	2318      	movs	r3, #24
 80006e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006ea:	2317      	movs	r3, #23
 80006ec:	753b      	strb	r3, [r7, #20]
      break;
 80006ee:	e036      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f0:	231c      	movs	r3, #28
 80006f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006f4:	231b      	movs	r3, #27
 80006f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006f8:	231e      	movs	r3, #30
 80006fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006fc:	231d      	movs	r3, #29
 80006fe:	753b      	strb	r3, [r7, #20]
      break;
 8000700:	e02d      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000702:	2322      	movs	r3, #34	; 0x22
 8000704:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000706:	2321      	movs	r3, #33	; 0x21
 8000708:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800070a:	2324      	movs	r3, #36	; 0x24
 800070c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800070e:	2323      	movs	r3, #35	; 0x23
 8000710:	753b      	strb	r3, [r7, #20]
      break;
 8000712:	e024      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000714:	2328      	movs	r3, #40	; 0x28
 8000716:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000718:	2327      	movs	r3, #39	; 0x27
 800071a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800071c:	232a      	movs	r3, #42	; 0x2a
 800071e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000720:	2329      	movs	r3, #41	; 0x29
 8000722:	753b      	strb	r3, [r7, #20]
      break;
 8000724:	e01b      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000726:	232e      	movs	r3, #46	; 0x2e
 8000728:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800072a:	232d      	movs	r3, #45	; 0x2d
 800072c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800072e:	2330      	movs	r3, #48	; 0x30
 8000730:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000732:	232f      	movs	r3, #47	; 0x2f
 8000734:	753b      	strb	r3, [r7, #20]
      break;
 8000736:	e012      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000738:	2334      	movs	r3, #52	; 0x34
 800073a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800073c:	2333      	movs	r3, #51	; 0x33
 800073e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000740:	2336      	movs	r3, #54	; 0x36
 8000742:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000744:	2335      	movs	r3, #53	; 0x35
 8000746:	753b      	strb	r3, [r7, #20]
      break;
 8000748:	e009      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800074a:	233a      	movs	r3, #58	; 0x3a
 800074c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800074e:	2339      	movs	r3, #57	; 0x39
 8000750:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000752:	233c      	movs	r3, #60	; 0x3c
 8000754:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000756:	233b      	movs	r3, #59	; 0x3b
 8000758:	753b      	strb	r3, [r7, #20]
      break;
 800075a:	e000      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800075c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	7dfa      	ldrb	r2, [r7, #23]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fbd2 	bl	8002f10 <TS_IO_Read>
 800076c:	4603      	mov	r3, r0
 800076e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 8000778:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	7dba      	ldrb	r2, [r7, #22]
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fbc4 	bl	8002f10 <TS_IO_Read>
 8000788:	4603      	mov	r3, r0
 800078a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007a6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	7d7a      	ldrb	r2, [r7, #21]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 fba9 	bl	8002f10 <TS_IO_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007c2:	7cfb      	ldrb	r3, [r7, #19]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ca:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	7d3a      	ldrb	r2, [r7, #20]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fb9b 	bl	8002f10 <TS_IO_Read>
 80007da:	4603      	mov	r3, r0
 80007dc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007de:	7cfb      	ldrb	r3, [r7, #19]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007f8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007fc:	881a      	ldrh	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	3301      	adds	r3, #1
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 800080c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000384 	.word	0x20000384
 800081c:	20000388 	.word	0x20000388

08000820 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	21a4      	movs	r1, #164	; 0xa4
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fb4e 	bl	8002edc <TS_IO_Write>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	21a4      	movs	r1, #164	; 0xa4
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fb3a 	bl	8002edc <TS_IO_Write>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	6039      	str	r1, [r7, #0]
 80008a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2101      	movs	r1, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 fb2b 	bl	8002f10 <TS_IO_Read>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	4603      	mov	r3, r0
 80008de:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80008f0:	4b4d      	ldr	r3, [pc, #308]	; (8000a28 <ft5336_TS_GetTouchInfo+0x158>)
 80008f2:	785b      	ldrb	r3, [r3, #1]
 80008f4:	461a      	mov	r2, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4293      	cmp	r3, r2
 80008fa:	f080 8090 	bcs.w	8000a1e <ft5336_TS_GetTouchInfo+0x14e>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b09      	cmp	r3, #9
 8000902:	d85d      	bhi.n	80009c0 <ft5336_TS_GetTouchInfo+0xf0>
 8000904:	a201      	add	r2, pc, #4	; (adr r2, 800090c <ft5336_TS_GetTouchInfo+0x3c>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	08000935 	.word	0x08000935
 8000910:	08000943 	.word	0x08000943
 8000914:	08000951 	.word	0x08000951
 8000918:	0800095f 	.word	0x0800095f
 800091c:	0800096d 	.word	0x0800096d
 8000920:	0800097b 	.word	0x0800097b
 8000924:	08000989 	.word	0x08000989
 8000928:	08000997 	.word	0x08000997
 800092c:	080009a5 	.word	0x080009a5
 8000930:	080009b3 	.word	0x080009b3
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000934:	2303      	movs	r3, #3
 8000936:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000938:	2307      	movs	r3, #7
 800093a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800093c:	2308      	movs	r3, #8
 800093e:	757b      	strb	r3, [r7, #21]
      break;
 8000940:	e03f      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000942:	2309      	movs	r3, #9
 8000944:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000946:	230d      	movs	r3, #13
 8000948:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800094a:	230e      	movs	r3, #14
 800094c:	757b      	strb	r3, [r7, #21]
      break;
 800094e:	e038      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000950:	230f      	movs	r3, #15
 8000952:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000954:	2313      	movs	r3, #19
 8000956:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000958:	2314      	movs	r3, #20
 800095a:	757b      	strb	r3, [r7, #21]
      break;
 800095c:	e031      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800095e:	2315      	movs	r3, #21
 8000960:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000962:	2319      	movs	r3, #25
 8000964:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000966:	231a      	movs	r3, #26
 8000968:	757b      	strb	r3, [r7, #21]
      break;
 800096a:	e02a      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 800096c:	231b      	movs	r3, #27
 800096e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000970:	231f      	movs	r3, #31
 8000972:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000974:	2320      	movs	r3, #32
 8000976:	757b      	strb	r3, [r7, #21]
      break;
 8000978:	e023      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800097a:	2321      	movs	r3, #33	; 0x21
 800097c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800097e:	2325      	movs	r3, #37	; 0x25
 8000980:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000982:	2326      	movs	r3, #38	; 0x26
 8000984:	757b      	strb	r3, [r7, #21]
      break;
 8000986:	e01c      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000988:	2327      	movs	r3, #39	; 0x27
 800098a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 800098c:	232b      	movs	r3, #43	; 0x2b
 800098e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000990:	232c      	movs	r3, #44	; 0x2c
 8000992:	757b      	strb	r3, [r7, #21]
      break;
 8000994:	e015      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000996:	232d      	movs	r3, #45	; 0x2d
 8000998:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800099a:	2331      	movs	r3, #49	; 0x31
 800099c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800099e:	2332      	movs	r3, #50	; 0x32
 80009a0:	757b      	strb	r3, [r7, #21]
      break;
 80009a2:	e00e      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80009a4:	2333      	movs	r3, #51	; 0x33
 80009a6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80009a8:	2337      	movs	r3, #55	; 0x37
 80009aa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80009ac:	2338      	movs	r3, #56	; 0x38
 80009ae:	757b      	strb	r3, [r7, #21]
      break;
 80009b0:	e007      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80009b2:	2339      	movs	r3, #57	; 0x39
 80009b4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80009b6:	233d      	movs	r3, #61	; 0x3d
 80009b8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80009ba:	233e      	movs	r3, #62	; 0x3e
 80009bc:	757b      	strb	r3, [r7, #21]
      break;
 80009be:	e000      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80009c0:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80009c2:	89fb      	ldrh	r3, [r7, #14]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	7dfa      	ldrb	r2, [r7, #23]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 faa0 	bl	8002f10 <TS_IO_Read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80009d4:	7d3b      	ldrb	r3, [r7, #20]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	119b      	asrs	r3, r3, #6
 80009da:	f003 0203 	and.w	r2, r3, #3
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	7dba      	ldrb	r2, [r7, #22]
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fa90 	bl	8002f10 <TS_IO_Read>
 80009f0:	4603      	mov	r3, r0
 80009f2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80009f4:	7d3b      	ldrb	r3, [r7, #20]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	7d7a      	ldrb	r2, [r7, #21]
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 fa82 	bl	8002f10 <TS_IO_Read>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a10:	7d3b      	ldrb	r3, [r7, #20]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	111b      	asrs	r3, r3, #4
 8000a16:	f003 0204 	and.w	r2, r3, #4
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000384 	.word	0x20000384

08000a2c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000384 	.word	0x20000384

08000a44 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000a48:	f7ff fff0 	bl	8000a2c <ft5336_Get_I2C_InitializedStatus>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d104      	bne.n	8000a5c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000a52:	f002 fa39 	bl	8002ec8 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000a56:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000384 	.word	0x20000384

08000a64 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a8a:	f3bf 8f6f 	isb	sy
}
 8000a8e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a98:	f3bf 8f4f 	dsb	sy
}
 8000a9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a9e:	f3bf 8f6f 	isb	sy
}
 8000aa2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab0:	f3bf 8f4f 	dsb	sy
}
 8000ab4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab6:	f3bf 8f6f 	isb	sy
}
 8000aba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ada:	f3bf 8f4f 	dsb	sy
}
 8000ade:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ae6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	0b5b      	lsrs	r3, r3, #13
 8000aec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000af0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000afa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	015a      	lsls	r2, r3, #5
 8000b00:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b04:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b0a:	4911      	ldr	r1, [pc, #68]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1e5a      	subs	r2, r3, #1
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1ef      	bne.n	8000afc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	60fa      	str	r2, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1e5      	bne.n	8000af2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b26:	f3bf 8f4f 	dsb	sy
}
 8000b2a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b36:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b38:	f3bf 8f4f 	dsb	sy
}
 8000b3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b3e:	f3bf 8f6f 	isb	sy
}
 8000b42:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <calculPossibilitesRec>:
 * nb_eaten		: donne le nombre de pieces mangees jusqu'à cette possible case (init a 0)
 *
 * retour		: indice de la prochaine case vide du tableau
 */
uint8_t calculPossibilitesRec(uint16_t line, uint16_t col, uint8_t color, struct cell *possibilites, uint8_t index, uint8_t nb_eaten)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b08f      	sub	sp, #60	; 0x3c
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	81fb      	strh	r3, [r7, #14]
 8000b60:	460b      	mov	r3, r1
 8000b62:	81bb      	strh	r3, [r7, #12]
 8000b64:	4613      	mov	r3, r2
 8000b66:	72fb      	strb	r3, [r7, #11]
	int8_t pas   = (color == 0) ? 1 : -1; // en fonction couleur on regarde lignes croissantes ou decroissantes
 8000b68:	7afb      	ldrb	r3, [r7, #11]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <calculPossibilitesRec+0x1e>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e001      	b.n	8000b76 <calculPossibilitesRec+0x22>
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int8_t fin   = (color == 0) ? 7 : 0; // en fonction couleur pas meme arrivee
 8000b7a:	7afb      	ldrb	r3, [r7, #11]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <calculPossibilitesRec+0x30>
 8000b80:	2307      	movs	r3, #7
 8000b82:	e000      	b.n	8000b86 <calculPossibilitesRec+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int8_t debut = (color == 0) ? 0 : 7; // en fonction couleur pas meme arrivee
 8000b8a:	7afb      	ldrb	r3, [r7, #11]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <calculPossibilitesRec+0x40>
 8000b90:	2300      	movs	r3, #0
 8000b92:	e000      	b.n	8000b96 <calculPossibilitesRec+0x42>
 8000b94:	2307      	movs	r3, #7
 8000b96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// Controle de la colonne de droite en avant :
	if(col < 7 && line != fin)
 8000b9a:	89bb      	ldrh	r3, [r7, #12]
 8000b9c:	2b06      	cmp	r3, #6
 8000b9e:	f200 80c1 	bhi.w	8000d24 <calculPossibilitesRec+0x1d0>
 8000ba2:	89fa      	ldrh	r2, [r7, #14]
 8000ba4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	f000 80bb 	beq.w	8000d24 <calculPossibilitesRec+0x1d0>
	{
		// Controle colonne de droite en avant : piece presente
		if(chessboard[line + pas][col + 1].isFilled == 1)
 8000bae:	89fa      	ldrh	r2, [r7, #14]
 8000bb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000bb4:	441a      	add	r2, r3
 8000bb6:	89bb      	ldrh	r3, [r7, #12]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4949      	ldr	r1, [pc, #292]	; (8000ce0 <calculPossibilitesRec+0x18c>)
 8000bbc:	00d2      	lsls	r2, r2, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	440b      	add	r3, r1
 8000bc4:	795b      	ldrb	r3, [r3, #5]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	f040 808e 	bne.w	8000ce8 <calculPossibilitesRec+0x194>
		{
			if(chessboard[line + pas][col + 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000bcc:	89fa      	ldrh	r2, [r7, #14]
 8000bce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000bd2:	441a      	add	r2, r3
 8000bd4:	89bb      	ldrh	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4941      	ldr	r1, [pc, #260]	; (8000ce0 <calculPossibilitesRec+0x18c>)
 8000bda:	00d2      	lsls	r2, r2, #3
 8000bdc:	4413      	add	r3, r2
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	440b      	add	r3, r1
 8000be2:	799b      	ldrb	r3, [r3, #6]
 8000be4:	7afa      	ldrb	r2, [r7, #11]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	f000 809c 	beq.w	8000d24 <calculPossibilitesRec+0x1d0>
			else if((col <= 5) && (line + pas != fin)) // Assez de cases pour sauter
 8000bec:	89bb      	ldrh	r3, [r7, #12]
 8000bee:	2b05      	cmp	r3, #5
 8000bf0:	f200 8098 	bhi.w	8000d24 <calculPossibilitesRec+0x1d0>
 8000bf4:	89fa      	ldrh	r2, [r7, #14]
 8000bf6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000bfa:	441a      	add	r2, r3
 8000bfc:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000c00:	429a      	cmp	r2, r3
 8000c02:	f000 808f 	beq.w	8000d24 <calculPossibilitesRec+0x1d0>
			{
				if(chessboard[line + 2 * pas][col + 2].isFilled == 0) // Pas de piece apres le saut
 8000c06:	89fa      	ldrh	r2, [r7, #14]
 8000c08:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	441a      	add	r2, r3
 8000c10:	89bb      	ldrh	r3, [r7, #12]
 8000c12:	3302      	adds	r3, #2
 8000c14:	4932      	ldr	r1, [pc, #200]	; (8000ce0 <calculPossibilitesRec+0x18c>)
 8000c16:	00d2      	lsls	r2, r2, #3
 8000c18:	4413      	add	r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	440b      	add	r3, r1
 8000c1e:	795b      	ldrb	r3, [r3, #5]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d17f      	bne.n	8000d24 <calculPossibilitesRec+0x1d0>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line + 2 * pas, col + 2};
 8000c24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	89fb      	ldrh	r3, [r7, #14]
 8000c30:	4413      	add	r3, r2
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	853b      	strh	r3, [r7, #40]	; 0x28
 8000c36:	89bb      	ldrh	r3, [r7, #12]
 8000c38:	3302      	adds	r3, #2
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	857b      	strh	r3, [r7, #42]	; 0x2a
					possibilites[index] = possible;
 8000c3e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	461a      	mov	r2, r3
 8000c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4e:	6818      	ldr	r0, [r3, #0]
 8000c50:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line + pas;
 8000c52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c56:	b298      	uxth	r0, r3
 8000c58:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000c5c:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8000c60:	89fb      	ldrh	r3, [r7, #14]
 8000c62:	4403      	add	r3, r0
 8000c64:	b29c      	uxth	r4, r3
 8000c66:	481f      	ldr	r0, [pc, #124]	; (8000ce4 <calculPossibilitesRec+0x190>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	440b      	add	r3, r1
 8000c72:	4622      	mov	r2, r4
 8000c74:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col + 1;
 8000c78:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000c7c:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8000c80:	89bb      	ldrh	r3, [r7, #12]
 8000c82:	3301      	adds	r3, #1
 8000c84:	b29c      	uxth	r4, r3
 8000c86:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <calculPossibilitesRec+0x190>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	440b      	add	r3, r1
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4403      	add	r3, r0
 8000c96:	4622      	mov	r2, r4
 8000c98:	805a      	strh	r2, [r3, #2]
					index++;
 8000c9a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					nb_eaten++;
 8000ca4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000ca8:	3301      	adds	r3, #1
 8000caa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					index = calculPossibilitesRec(line + 2 * pas, col + 2, color, possibilites, index, nb_eaten);
 8000cae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	89fb      	ldrh	r3, [r7, #14]
 8000cba:	4413      	add	r3, r2
 8000cbc:	b298      	uxth	r0, r3
 8000cbe:	89bb      	ldrh	r3, [r7, #12]
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	b299      	uxth	r1, r3
 8000cc4:	7afa      	ldrb	r2, [r7, #11]
 8000cc6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f7ff ff3e 	bl	8000b54 <calculPossibilitesRec>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8000cde:	e021      	b.n	8000d24 <calculPossibilitesRec+0x1d0>
 8000ce0:	200080cc 	.word	0x200080cc
 8000ce4:	20008564 	.word	0x20008564
				}
			}
		}
		// Controle colonne de droite : pas de piece et pas en train de manger
		else if (nb_eaten == 0)
 8000ce8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d119      	bne.n	8000d24 <calculPossibilitesRec+0x1d0>
		{
			struct cell possible = {line + pas, col + 1};
 8000cf0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	89fb      	ldrh	r3, [r7, #14]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000cfe:	89bb      	ldrh	r3, [r7, #12]
 8000d00:	3301      	adds	r3, #1
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	84fb      	strh	r3, [r7, #38]	; 0x26
			possibilites[index] = possible;
 8000d06:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	4413      	add	r3, r2
 8000d10:	461a      	mov	r2, r3
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	6010      	str	r0, [r2, #0]
			index++;
 8000d1a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000d1e:	3301      	adds	r3, #1
 8000d20:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		}
	}
	// Controle colonne de droite en arriere : piece presente
	if(col < 7 && line != debut)
 8000d24:	89bb      	ldrh	r3, [r7, #12]
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	f200 809b 	bhi.w	8000e62 <calculPossibilitesRec+0x30e>
 8000d2c:	89fa      	ldrh	r2, [r7, #14]
 8000d2e:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000d32:	429a      	cmp	r2, r3
 8000d34:	f000 8095 	beq.w	8000e62 <calculPossibilitesRec+0x30e>
	{
		if(chessboard[line - pas][col + 1].isFilled == 1)
 8000d38:	89fa      	ldrh	r2, [r7, #14]
 8000d3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d3e:	1ad2      	subs	r2, r2, r3
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4998      	ldr	r1, [pc, #608]	; (8000fa8 <calculPossibilitesRec+0x454>)
 8000d46:	00d2      	lsls	r2, r2, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	440b      	add	r3, r1
 8000d4e:	795b      	ldrb	r3, [r3, #5]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	f040 8086 	bne.w	8000e62 <calculPossibilitesRec+0x30e>
		{
			if(chessboard[line - pas][col + 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000d56:	89fa      	ldrh	r2, [r7, #14]
 8000d58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d5c:	1ad2      	subs	r2, r2, r3
 8000d5e:	89bb      	ldrh	r3, [r7, #12]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4991      	ldr	r1, [pc, #580]	; (8000fa8 <calculPossibilitesRec+0x454>)
 8000d64:	00d2      	lsls	r2, r2, #3
 8000d66:	4413      	add	r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	440b      	add	r3, r1
 8000d6c:	799b      	ldrb	r3, [r3, #6]
 8000d6e:	7afa      	ldrb	r2, [r7, #11]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d076      	beq.n	8000e62 <calculPossibilitesRec+0x30e>
			else if((col <= 5) && (line - pas != debut)) // Assez de cases pour sauter
 8000d74:	89bb      	ldrh	r3, [r7, #12]
 8000d76:	2b05      	cmp	r3, #5
 8000d78:	d873      	bhi.n	8000e62 <calculPossibilitesRec+0x30e>
 8000d7a:	89fa      	ldrh	r2, [r7, #14]
 8000d7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d80:	1ad2      	subs	r2, r2, r3
 8000d82:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d06b      	beq.n	8000e62 <calculPossibilitesRec+0x30e>
			{
				if(chessboard[line - 2 * pas][col + 2].isFilled == 0) // Pas de piece apres le saut
 8000d8a:	89fa      	ldrh	r2, [r7, #14]
 8000d8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	1ad2      	subs	r2, r2, r3
 8000d94:	89bb      	ldrh	r3, [r7, #12]
 8000d96:	3302      	adds	r3, #2
 8000d98:	4983      	ldr	r1, [pc, #524]	; (8000fa8 <calculPossibilitesRec+0x454>)
 8000d9a:	00d2      	lsls	r2, r2, #3
 8000d9c:	4413      	add	r3, r2
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	440b      	add	r3, r1
 8000da2:	795b      	ldrb	r3, [r3, #5]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d15c      	bne.n	8000e62 <calculPossibilitesRec+0x30e>
				{
					//=> Piece de l'autre couleur, place pour manger
					struct cell possible = {line - 2 * pas, col + 2};
 8000da8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	89fa      	ldrh	r2, [r7, #14]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	843b      	strh	r3, [r7, #32]
 8000dba:	89bb      	ldrh	r3, [r7, #12]
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	847b      	strh	r3, [r7, #34]	; 0x22
					possibilites[index] = possible;
 8000dc2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	4413      	add	r3, r2
 8000dcc:	461a      	mov	r2, r3
 8000dce:	f107 0320 	add.w	r3, r7, #32
 8000dd2:	6818      	ldr	r0, [r3, #0]
 8000dd4:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line - pas;
 8000dd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000de0:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8000de4:	89f8      	ldrh	r0, [r7, #14]
 8000de6:	1ac3      	subs	r3, r0, r3
 8000de8:	b29c      	uxth	r4, r3
 8000dea:	4870      	ldr	r0, [pc, #448]	; (8000fac <calculPossibilitesRec+0x458>)
 8000dec:	4613      	mov	r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4413      	add	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	440b      	add	r3, r1
 8000df6:	4622      	mov	r2, r4
 8000df8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col + 1;
 8000dfc:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000e00:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8000e04:	89bb      	ldrh	r3, [r7, #12]
 8000e06:	3301      	adds	r3, #1
 8000e08:	b29c      	uxth	r4, r3
 8000e0a:	4868      	ldr	r0, [pc, #416]	; (8000fac <calculPossibilitesRec+0x458>)
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	440b      	add	r3, r1
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4403      	add	r3, r0
 8000e1a:	4622      	mov	r2, r4
 8000e1c:	805a      	strh	r2, [r3, #2]
					index++;
 8000e1e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e22:	3301      	adds	r3, #1
 8000e24:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					nb_eaten++;
 8000e28:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					index = calculPossibilitesRec(line - 2 * pas, col + 2, color, possibilites, index, nb_eaten);
 8000e32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	89fa      	ldrh	r2, [r7, #14]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	b298      	uxth	r0, r3
 8000e42:	89bb      	ldrh	r3, [r7, #12]
 8000e44:	3302      	adds	r3, #2
 8000e46:	b299      	uxth	r1, r3
 8000e48:	7afa      	ldrb	r2, [r7, #11]
 8000e4a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f7ff fe7c 	bl	8000b54 <calculPossibilitesRec>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				}
			}
		}
	}
	// Controle de la colonne de gauche en avant :
	if(col > 0 && line != fin)
 8000e62:	89bb      	ldrh	r3, [r7, #12]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 80c1 	beq.w	8000fec <calculPossibilitesRec+0x498>
 8000e6a:	89fa      	ldrh	r2, [r7, #14]
 8000e6c:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f000 80bb 	beq.w	8000fec <calculPossibilitesRec+0x498>
	{
		// Controle colonne de gauche : piece presente
		if(chessboard[line + pas][col - 1].isFilled == 1)
 8000e76:	89fa      	ldrh	r2, [r7, #14]
 8000e78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e7c:	441a      	add	r2, r3
 8000e7e:	89bb      	ldrh	r3, [r7, #12]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	4949      	ldr	r1, [pc, #292]	; (8000fa8 <calculPossibilitesRec+0x454>)
 8000e84:	00d2      	lsls	r2, r2, #3
 8000e86:	4413      	add	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	440b      	add	r3, r1
 8000e8c:	795b      	ldrb	r3, [r3, #5]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	f040 808e 	bne.w	8000fb0 <calculPossibilitesRec+0x45c>
		{
			if(chessboard[line + pas][col - 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000e94:	89fa      	ldrh	r2, [r7, #14]
 8000e96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e9a:	441a      	add	r2, r3
 8000e9c:	89bb      	ldrh	r3, [r7, #12]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	4941      	ldr	r1, [pc, #260]	; (8000fa8 <calculPossibilitesRec+0x454>)
 8000ea2:	00d2      	lsls	r2, r2, #3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	799b      	ldrb	r3, [r3, #6]
 8000eac:	7afa      	ldrb	r2, [r7, #11]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	f000 809c 	beq.w	8000fec <calculPossibilitesRec+0x498>
			else if((col >= 2) && (line + pas != fin)) // Assez de cases pour sauter
 8000eb4:	89bb      	ldrh	r3, [r7, #12]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	f240 8098 	bls.w	8000fec <calculPossibilitesRec+0x498>
 8000ebc:	89fa      	ldrh	r2, [r7, #14]
 8000ebe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ec2:	441a      	add	r2, r3
 8000ec4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f000 808f 	beq.w	8000fec <calculPossibilitesRec+0x498>
			{
				if(chessboard[line + 2 * pas][col - 2].isFilled == 0) // Pas de piece apres le saut
 8000ece:	89fa      	ldrh	r2, [r7, #14]
 8000ed0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	441a      	add	r2, r3
 8000ed8:	89bb      	ldrh	r3, [r7, #12]
 8000eda:	3b02      	subs	r3, #2
 8000edc:	4932      	ldr	r1, [pc, #200]	; (8000fa8 <calculPossibilitesRec+0x454>)
 8000ede:	00d2      	lsls	r2, r2, #3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	440b      	add	r3, r1
 8000ee6:	795b      	ldrb	r3, [r3, #5]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d17f      	bne.n	8000fec <calculPossibilitesRec+0x498>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line + 2 * pas, col - 2};
 8000eec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	4413      	add	r3, r2
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	83bb      	strh	r3, [r7, #28]
 8000efe:	89bb      	ldrh	r3, [r7, #12]
 8000f00:	3b02      	subs	r3, #2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	83fb      	strh	r3, [r7, #30]
					possibilites[index] = possible;
 8000f06:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	4413      	add	r3, r2
 8000f10:	461a      	mov	r2, r3
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line + pas;
 8000f1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f1e:	b298      	uxth	r0, r3
 8000f20:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000f24:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8000f28:	89fb      	ldrh	r3, [r7, #14]
 8000f2a:	4403      	add	r3, r0
 8000f2c:	b29c      	uxth	r4, r3
 8000f2e:	481f      	ldr	r0, [pc, #124]	; (8000fac <calculPossibilitesRec+0x458>)
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	4622      	mov	r2, r4
 8000f3c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col - 1;
 8000f40:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000f44:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 8000f48:	89bb      	ldrh	r3, [r7, #12]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	b29c      	uxth	r4, r3
 8000f4e:	4817      	ldr	r0, [pc, #92]	; (8000fac <calculPossibilitesRec+0x458>)
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4403      	add	r3, r0
 8000f5e:	4622      	mov	r2, r4
 8000f60:	805a      	strh	r2, [r3, #2]
					index++;
 8000f62:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000f66:	3301      	adds	r3, #1
 8000f68:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					nb_eaten++;
 8000f6c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000f70:	3301      	adds	r3, #1
 8000f72:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					index = calculPossibilitesRec(line + 2 * pas, col - 2, color, possibilites, index, nb_eaten);
 8000f76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	89fb      	ldrh	r3, [r7, #14]
 8000f82:	4413      	add	r3, r2
 8000f84:	b298      	uxth	r0, r3
 8000f86:	89bb      	ldrh	r3, [r7, #12]
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	7afa      	ldrb	r2, [r7, #11]
 8000f8e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f7ff fdda 	bl	8000b54 <calculPossibilitesRec>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
 8000fa6:	e021      	b.n	8000fec <calculPossibilitesRec+0x498>
 8000fa8:	200080cc 	.word	0x200080cc
 8000fac:	20008564 	.word	0x20008564
				}
			}
		}
		// Controle colonne de gauche : pas de piece et pas en train de manger
		else if (nb_eaten == 0)
 8000fb0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d119      	bne.n	8000fec <calculPossibilitesRec+0x498>
		{
			struct cell possible = {line + pas, col - 1};
 8000fb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	833b      	strh	r3, [r7, #24]
 8000fc6:	89bb      	ldrh	r3, [r7, #12]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	837b      	strh	r3, [r7, #26]
			possibilites[index] = possible;
 8000fce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	6010      	str	r0, [r2, #0]
			index++;
 8000fe2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		}
	}
	// Controle colonne de droite en arriere : piece presente
	if(col > 0 && line != debut)
 8000fec:	89bb      	ldrh	r3, [r7, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 809b 	beq.w	800112a <calculPossibilitesRec+0x5d6>
 8000ff4:	89fa      	ldrh	r2, [r7, #14]
 8000ff6:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	f000 8095 	beq.w	800112a <calculPossibilitesRec+0x5d6>
	{
		if(chessboard[line + pas][col - 1].isFilled == 1)
 8001000:	89fa      	ldrh	r2, [r7, #14]
 8001002:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001006:	441a      	add	r2, r3
 8001008:	89bb      	ldrh	r3, [r7, #12]
 800100a:	3b01      	subs	r3, #1
 800100c:	494a      	ldr	r1, [pc, #296]	; (8001138 <calculPossibilitesRec+0x5e4>)
 800100e:	00d2      	lsls	r2, r2, #3
 8001010:	4413      	add	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	440b      	add	r3, r1
 8001016:	795b      	ldrb	r3, [r3, #5]
 8001018:	2b01      	cmp	r3, #1
 800101a:	f040 8086 	bne.w	800112a <calculPossibilitesRec+0x5d6>
		{
			if(chessboard[line - pas][col - 1].piece_color == color) ;//Une piece de sa couleur bloque
 800101e:	89fa      	ldrh	r2, [r7, #14]
 8001020:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001024:	1ad2      	subs	r2, r2, r3
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	3b01      	subs	r3, #1
 800102a:	4943      	ldr	r1, [pc, #268]	; (8001138 <calculPossibilitesRec+0x5e4>)
 800102c:	00d2      	lsls	r2, r2, #3
 800102e:	4413      	add	r3, r2
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	440b      	add	r3, r1
 8001034:	799b      	ldrb	r3, [r3, #6]
 8001036:	7afa      	ldrb	r2, [r7, #11]
 8001038:	429a      	cmp	r2, r3
 800103a:	d076      	beq.n	800112a <calculPossibilitesRec+0x5d6>
			else if((col >= 2) && (line - pas != debut)) // Assez de cases pour sauter
 800103c:	89bb      	ldrh	r3, [r7, #12]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d973      	bls.n	800112a <calculPossibilitesRec+0x5d6>
 8001042:	89fa      	ldrh	r2, [r7, #14]
 8001044:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001048:	1ad2      	subs	r2, r2, r3
 800104a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800104e:	429a      	cmp	r2, r3
 8001050:	d06b      	beq.n	800112a <calculPossibilitesRec+0x5d6>
			{
				if(chessboard[line - 2 * pas][col - 2].isFilled == 0) // Pas de piece apres le saut
 8001052:	89fa      	ldrh	r2, [r7, #14]
 8001054:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	1ad2      	subs	r2, r2, r3
 800105c:	89bb      	ldrh	r3, [r7, #12]
 800105e:	3b02      	subs	r3, #2
 8001060:	4935      	ldr	r1, [pc, #212]	; (8001138 <calculPossibilitesRec+0x5e4>)
 8001062:	00d2      	lsls	r2, r2, #3
 8001064:	4413      	add	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	440b      	add	r3, r1
 800106a:	795b      	ldrb	r3, [r3, #5]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d15c      	bne.n	800112a <calculPossibilitesRec+0x5d6>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line - 2 * pas, col - 2};
 8001070:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001074:	b29b      	uxth	r3, r3
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	b29b      	uxth	r3, r3
 800107a:	89fa      	ldrh	r2, [r7, #14]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	82bb      	strh	r3, [r7, #20]
 8001082:	89bb      	ldrh	r3, [r7, #12]
 8001084:	3b02      	subs	r3, #2
 8001086:	b29b      	uxth	r3, r3
 8001088:	82fb      	strh	r3, [r7, #22]
					possibilites[index] = possible;
 800108a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	461a      	mov	r2, r3
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line - pas;
 800109e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80010a8:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80010ac:	89f8      	ldrh	r0, [r7, #14]
 80010ae:	1ac3      	subs	r3, r0, r3
 80010b0:	b29c      	uxth	r4, r3
 80010b2:	4822      	ldr	r0, [pc, #136]	; (800113c <calculPossibilitesRec+0x5e8>)
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	4622      	mov	r2, r4
 80010c0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col - 1;
 80010c4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80010c8:	f897 1044 	ldrb.w	r1, [r7, #68]	; 0x44
 80010cc:	89bb      	ldrh	r3, [r7, #12]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	b29c      	uxth	r4, r3
 80010d2:	481a      	ldr	r0, [pc, #104]	; (800113c <calculPossibilitesRec+0x5e8>)
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4403      	add	r3, r0
 80010e2:	4622      	mov	r2, r4
 80010e4:	805a      	strh	r2, [r3, #2]
					index++;
 80010e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80010ea:	3301      	adds	r3, #1
 80010ec:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					nb_eaten++;
 80010f0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80010f4:	3301      	adds	r3, #1
 80010f6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					index = calculPossibilitesRec(line - 2 * pas, col - 2, color, possibilites, index, nb_eaten);
 80010fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010fe:	b29b      	uxth	r3, r3
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	b29b      	uxth	r3, r3
 8001104:	89fa      	ldrh	r2, [r7, #14]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	b298      	uxth	r0, r3
 800110a:	89bb      	ldrh	r3, [r7, #12]
 800110c:	3b02      	subs	r3, #2
 800110e:	b299      	uxth	r1, r3
 8001110:	7afa      	ldrb	r2, [r7, #11]
 8001112:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f7ff fd18 	bl	8000b54 <calculPossibilitesRec>
 8001124:	4603      	mov	r3, r0
 8001126:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
				}
			}
		}
	}
	return index;
 800112a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40

}
 800112e:	4618      	mov	r0, r3
 8001130:	3734      	adds	r7, #52	; 0x34
 8001132:	46bd      	mov	sp, r7
 8001134:	bd90      	pop	{r4, r7, pc}
 8001136:	bf00      	nop
 8001138:	200080cc 	.word	0x200080cc
 800113c:	20008564 	.word	0x20008564

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b0a4      	sub	sp, #144	; 0x90
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8001146:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001154:	2301      	movs	r3, #1
 8001156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800115a:	2300      	movs	r3, #0
 800115c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001160:	f7ff fc8e 	bl	8000a80 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001164:	f7ff fcb2 	bl	8000acc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f004 f81c 	bl	80051a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f8f4 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f000 febc 	bl	8001eec <MX_GPIO_Init>
  MX_ADC3_Init();
 8001174:	f000 f9b4 	bl	80014e0 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8001178:	f000 fa2e 	bl	80015d8 <MX_DMA2D_Init>
  MX_FMC_Init();
 800117c:	f000 fe66 	bl	8001e4c <MX_FMC_Init>
  MX_I2C1_Init();
 8001180:	f000 fa5c 	bl	800163c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001184:	f000 fa9a 	bl	80016bc <MX_I2C3_Init>
  MX_LTDC_Init();
 8001188:	f000 fad8 	bl	800173c <MX_LTDC_Init>
  MX_RTC_Init();
 800118c:	f000 fb58 	bl	8001840 <MX_RTC_Init>
  MX_SPI2_Init();
 8001190:	f000 fbfc 	bl	800198c <MX_SPI2_Init>
  MX_TIM1_Init();
 8001194:	f000 fc38 	bl	8001a08 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001198:	f000 fc8a 	bl	8001ab0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800119c:	f000 fcd6 	bl	8001b4c <MX_TIM3_Init>
  MX_TIM5_Init();
 80011a0:	f000 fd22 	bl	8001be8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80011a4:	f000 fd6e 	bl	8001c84 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80011a8:	f000 fdf0 	bl	8001d8c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80011ac:	f000 fe1e 	bl	8001dec <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80011b0:	f000 f944 	bl	800143c <MX_ADC1_Init>
  MX_DAC_Init();
 80011b4:	f000 f9e6 	bl	8001584 <MX_DAC_Init>
  MX_UART7_Init();
 80011b8:	f000 fdb8 	bl	8001d2c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80011bc:	f001 fed2 	bl	8002f64 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80011c0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80011c4:	2000      	movs	r0, #0
 80011c6:	f001 ff65 	bl	8003094 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 80011ca:	f001 ff3b 	bl	8003044 <BSP_LCD_GetXSize>
 80011ce:	4604      	mov	r4, r0
 80011d0:	f001 ff4c 	bl	800306c <BSP_LCD_GetYSize>
 80011d4:	4603      	mov	r3, r0
 80011d6:	fb03 f304 	mul.w	r3, r3, r4
 80011da:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4619      	mov	r1, r3
 80011e2:	2001      	movs	r0, #1
 80011e4:	f001 ff56 	bl	8003094 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 80011e8:	f002 fb1a 	bl	8003820 <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f001 ffb1 	bl	8003154 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80011f2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80011f6:	f002 f809 	bl	800320c <BSP_LCD_Clear>
    //BSP_LCD_DrawBitmap(0,0,(uint8_t*)HorombeRGB565_bmp);
    BSP_LCD_DrawBitmap(0,0,(uint8_t*)damier_bmp);
 80011fa:	4a48      	ldr	r2, [pc, #288]	; (800131c <main+0x1dc>)
 80011fc:	2100      	movs	r1, #0
 80011fe:	2000      	movs	r0, #0
 8001200:	f002 f9bc 	bl	800357c <BSP_LCD_DrawBitmap>
    BSP_LCD_SelectLayer(1);
 8001204:	2001      	movs	r0, #1
 8001206:	f001 ffa5 	bl	8003154 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(0);
 800120a:	2000      	movs	r0, #0
 800120c:	f001 fffe 	bl	800320c <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font12);
 8001210:	4843      	ldr	r0, [pc, #268]	; (8001320 <main+0x1e0>)
 8001212:	f001 ffe1 	bl	80031d8 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001216:	f04f 30ff 	mov.w	r0, #4294967295
 800121a:	f001 ffab 	bl	8003174 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800121e:	4841      	ldr	r0, [pc, #260]	; (8001324 <main+0x1e4>)
 8001220:	f001 ffc0 	bl	80031a4 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001224:	f001 ff0e 	bl	8003044 <BSP_LCD_GetXSize>
 8001228:	4603      	mov	r3, r0
 800122a:	b29c      	uxth	r4, r3
 800122c:	f001 ff1e 	bl	800306c <BSP_LCD_GetYSize>
 8001230:	4603      	mov	r3, r0
 8001232:	b29b      	uxth	r3, r3
 8001234:	4619      	mov	r1, r3
 8001236:	4620      	mov	r0, r4
 8001238:	f002 fe4c 	bl	8003ed4 <BSP_TS_Init>
    BSP_TS_ITConfig();
 800123c:	f002 fe8a 	bl	8003f54 <BSP_TS_ITConfig>

	// Init potentiometre
	  sConfig.Channel = ADC_CHANNEL_6;
 8001240:	2306      	movs	r3, #6
 8001242:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001246:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800124a:	4619      	mov	r1, r3
 800124c:	4836      	ldr	r0, [pc, #216]	; (8001328 <main+0x1e8>)
 800124e:	f004 f915 	bl	800547c <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8001252:	4835      	ldr	r0, [pc, #212]	; (8001328 <main+0x1e8>)
 8001254:	f004 f844 	bl	80052e0 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
    mutexEcran = xSemaphoreCreateMutex();
 8001258:	2001      	movs	r0, #1
 800125a:	f00a fe36 	bl	800beca <xQueueCreateMutex>
 800125e:	4603      	mov	r3, r0
 8001260:	4a32      	ldr	r2, [pc, #200]	; (800132c <main+0x1ec>)
 8001262:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of queueSel */
  osMessageQDef(queueSel, 16, uint16_t);
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <main+0x1f0>)
 8001266:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800126a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800126c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queueSelHandle = osMessageCreate(osMessageQ(queueSel), NULL);
 8001270:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f00a fbe3 	bl	800ba42 <osMessageCreate>
 800127c:	4603      	mov	r3, r0
 800127e:	4a2d      	ldr	r2, [pc, #180]	; (8001334 <main+0x1f4>)
 8001280:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task_init */
  osThreadDef(task_init, fonction_init, osPriorityAboveNormal, 0, 1024);
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <main+0x1f8>)
 8001284:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001288:	461d      	mov	r5, r3
 800128a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001292:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_initHandle = osThreadCreate(osThread(task_init), NULL);
 8001296:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f00a fb70 	bl	800b982 <osThreadCreate>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4a25      	ldr	r2, [pc, #148]	; (800133c <main+0x1fc>)
 80012a6:	6013      	str	r3, [r2, #0]

  /* definition and creation of affichage */
  osThreadDef(affichage, fonction_affichage, osPriorityNormal, 0, 1024);
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <main+0x200>)
 80012aa:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80012ae:	461d      	mov	r5, r3
 80012b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  affichageHandle = osThreadCreate(osThread(affichage), NULL);
 80012bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00a fb5d 	bl	800b982 <osThreadCreate>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4a1e      	ldr	r2, [pc, #120]	; (8001344 <main+0x204>)
 80012cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_select */
  osThreadDef(task_select, fonction_select, osPriorityHigh, 0, 256);
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <main+0x208>)
 80012d0:	f107 041c 	add.w	r4, r7, #28
 80012d4:	461d      	mov	r5, r3
 80012d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_selectHandle = osThreadCreate(osThread(task_select), NULL);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f00a fb4a 	bl	800b982 <osThreadCreate>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a16      	ldr	r2, [pc, #88]	; (800134c <main+0x20c>)
 80012f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_calculPoss */
  osThreadDef(task_calculPoss, fonction_calculPossibilites, osPriorityBelowNormal, 0, 4096);
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <main+0x210>)
 80012f6:	463c      	mov	r4, r7
 80012f8:	461d      	mov	r5, r3
 80012fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001302:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_calculPossHandle = osThreadCreate(osThread(task_calculPoss), NULL);
 8001306:	463b      	mov	r3, r7
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f00a fb39 	bl	800b982 <osThreadCreate>
 8001310:	4603      	mov	r3, r0
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <main+0x214>)
 8001314:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001316:	f00a fb2d 	bl	800b974 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800131a:	e7fe      	b.n	800131a <main+0x1da>
 800131c:	0800e49c 	.word	0x0800e49c
 8001320:	20000034 	.word	0x20000034
 8001324:	ff0000ff 	.word	0xff0000ff
 8001328:	20008460 	.word	0x20008460
 800132c:	2000852c 	.word	0x2000852c
 8001330:	0800e414 	.word	0x0800e414
 8001334:	2000807c 	.word	0x2000807c
 8001338:	0800e424 	.word	0x0800e424
 800133c:	2000802c 	.word	0x2000802c
 8001340:	0800e440 	.word	0x0800e440
 8001344:	2000845c 	.word	0x2000845c
 8001348:	0800e45c 	.word	0x0800e45c
 800134c:	20008318 	.word	0x20008318
 8001350:	0800e478 	.word	0x0800e478
 8001354:	20008410 	.word	0x20008410

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b094      	sub	sp, #80	; 0x50
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	2230      	movs	r2, #48	; 0x30
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f00c ff60 	bl	800e22c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800137c:	f006 ff32 	bl	80081e4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <SystemClock_Config+0xdc>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	4a2b      	ldr	r2, [pc, #172]	; (8001434 <SystemClock_Config+0xdc>)
 8001386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138a:	6413      	str	r3, [r2, #64]	; 0x40
 800138c:	4b29      	ldr	r3, [pc, #164]	; (8001434 <SystemClock_Config+0xdc>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001398:	4b27      	ldr	r3, [pc, #156]	; (8001438 <SystemClock_Config+0xe0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a26      	ldr	r2, [pc, #152]	; (8001438 <SystemClock_Config+0xe0>)
 800139e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	4b24      	ldr	r3, [pc, #144]	; (8001438 <SystemClock_Config+0xe0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80013b0:	2309      	movs	r3, #9
 80013b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013ba:	2301      	movs	r3, #1
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013c8:	2319      	movs	r3, #25
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80013cc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80013d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80013d6:	2309      	movs	r3, #9
 80013d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	4618      	mov	r0, r3
 80013e0:	f006 ff60 	bl	80082a4 <HAL_RCC_OscConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013ea:	f001 fc11 	bl	8002c10 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013ee:	f006 ff09 	bl	8008204 <HAL_PWREx_EnableOverDrive>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80013f8:	f001 fc0a 	bl	8002c10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fc:	230f      	movs	r3, #15
 80013fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001400:	2302      	movs	r3, #2
 8001402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001408:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800140c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800140e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001412:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2106      	movs	r1, #6
 800141a:	4618      	mov	r0, r3
 800141c:	f007 f9e6 	bl	80087ec <HAL_RCC_ClockConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001426:	f001 fbf3 	bl	8002c10 <Error_Handler>
  }
}
 800142a:	bf00      	nop
 800142c:	3750      	adds	r7, #80	; 0x50
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40007000 	.word	0x40007000

0800143c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001442:	463b      	mov	r3, r7
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <MX_ADC1_Init+0x9c>)
 8001452:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001456:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800145a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_ADC1_Init+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001464:	2200      	movs	r2, #0
 8001466:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_ADC1_Init+0x98>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001478:	2200      	movs	r2, #0
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_ADC1_Init+0x98>)
 800147e:	4a17      	ldr	r2, [pc, #92]	; (80014dc <MX_ADC1_Init+0xa0>)
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_ADC1_Init+0x98>)
 800148a:	2201      	movs	r2, #1
 800148c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_ADC1_Init+0x98>)
 8001498:	2201      	movs	r2, #1
 800149a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_ADC1_Init+0x98>)
 800149e:	f003 fedb 	bl	8005258 <HAL_ADC_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014a8:	f001 fbb2 	bl	8002c10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b8:	463b      	mov	r3, r7
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_ADC1_Init+0x98>)
 80014be:	f003 ffdd 	bl	800547c <HAL_ADC_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014c8:	f001 fba2 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20008414 	.word	0x20008414
 80014d8:	40012000 	.word	0x40012000
 80014dc:	0f000001 	.word	0x0f000001

080014e0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <MX_ADC3_Init+0x98>)
 80014f4:	4a21      	ldr	r2, [pc, #132]	; (800157c <MX_ADC3_Init+0x9c>)
 80014f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_ADC3_Init+0x98>)
 80014fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014fe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <MX_ADC3_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <MX_ADC3_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_ADC3_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001512:	4b19      	ldr	r3, [pc, #100]	; (8001578 <MX_ADC3_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_ADC3_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_ADC3_Init+0x98>)
 8001522:	4a17      	ldr	r2, [pc, #92]	; (8001580 <MX_ADC3_Init+0xa0>)
 8001524:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_ADC3_Init+0x98>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_ADC3_Init+0x98>)
 800152e:	2201      	movs	r2, #1
 8001530:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_ADC3_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_ADC3_Init+0x98>)
 800153c:	2201      	movs	r2, #1
 800153e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001540:	480d      	ldr	r0, [pc, #52]	; (8001578 <MX_ADC3_Init+0x98>)
 8001542:	f003 fe89 	bl	8005258 <HAL_ADC_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800154c:	f001 fb60 	bl	8002c10 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001550:	2306      	movs	r3, #6
 8001552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001554:	2301      	movs	r3, #1
 8001556:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_ADC3_Init+0x98>)
 8001562:	f003 ff8b 	bl	800547c <HAL_ADC_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800156c:	f001 fb50 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20008460 	.word	0x20008460
 800157c:	40012200 	.word	0x40012200
 8001580:	0f000001 	.word	0x0f000001

08001584 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800158a:	463b      	mov	r3, r7
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_DAC_Init+0x4c>)
 8001594:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <MX_DAC_Init+0x50>)
 8001596:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_DAC_Init+0x4c>)
 800159a:	f004 faa1 	bl	8005ae0 <HAL_DAC_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015a4:	f001 fb34 	bl	8002c10 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015b0:	463b      	mov	r3, r7
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_DAC_Init+0x4c>)
 80015b8:	f004 fb18 	bl	8005bec <HAL_DAC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015c2:	f001 fb25 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20008530 	.word	0x20008530
 80015d4:	40007400 	.word	0x40007400

080015d8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_DMA2D_Init+0x5c>)
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <MX_DMA2D_Init+0x60>)
 80015e0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_DMA2D_Init+0x5c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_DMA2D_Init+0x5c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_DMA2D_Init+0x5c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_DMA2D_Init+0x5c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_DMA2D_Init+0x5c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_DMA2D_Init+0x5c>)
 8001602:	2200      	movs	r2, #0
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <MX_DMA2D_Init+0x5c>)
 8001608:	2200      	movs	r2, #0
 800160a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800160c:	4809      	ldr	r0, [pc, #36]	; (8001634 <MX_DMA2D_Init+0x5c>)
 800160e:	f004 fd97 	bl	8006140 <HAL_DMA2D_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001618:	f001 fafa 	bl	8002c10 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800161c:	2101      	movs	r1, #1
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_DMA2D_Init+0x5c>)
 8001620:	f004 fffc 	bl	800661c <HAL_DMA2D_ConfigLayer>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800162a:	f001 faf1 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20008c34 	.word	0x20008c34
 8001638:	4002b000 	.word	0x4002b000

0800163c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <MX_I2C1_Init+0x74>)
 8001642:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <MX_I2C1_Init+0x78>)
 8001644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <MX_I2C1_Init+0x74>)
 8001648:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <MX_I2C1_Init+0x7c>)
 800164a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MX_I2C1_Init+0x74>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <MX_I2C1_Init+0x74>)
 8001654:	2201      	movs	r2, #1
 8001656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <MX_I2C1_Init+0x74>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_I2C1_Init+0x74>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_I2C1_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_I2C1_Init+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_I2C1_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001676:	480e      	ldr	r0, [pc, #56]	; (80016b0 <MX_I2C1_Init+0x74>)
 8001678:	f005 fc02 	bl	8006e80 <HAL_I2C_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001682:	f001 fac5 	bl	8002c10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	4809      	ldr	r0, [pc, #36]	; (80016b0 <MX_I2C1_Init+0x74>)
 800168a:	f006 f99b 	bl	80079c4 <HAL_I2CEx_ConfigAnalogFilter>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001694:	f001 fabc 	bl	8002c10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001698:	2100      	movs	r1, #0
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_I2C1_Init+0x74>)
 800169c:	f006 f9dd 	bl	8007a5a <HAL_I2CEx_ConfigDigitalFilter>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016a6:	f001 fab3 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20008080 	.word	0x20008080
 80016b4:	40005400 	.word	0x40005400
 80016b8:	00c0eaff 	.word	0x00c0eaff

080016bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_I2C3_Init+0x74>)
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <MX_I2C3_Init+0x78>)
 80016c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_I2C3_Init+0x74>)
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <MX_I2C3_Init+0x7c>)
 80016ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_I2C3_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_I2C3_Init+0x74>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_I2C3_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_I2C3_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_I2C3_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_I2C3_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_I2C3_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016f6:	480e      	ldr	r0, [pc, #56]	; (8001730 <MX_I2C3_Init+0x74>)
 80016f8:	f005 fbc2 	bl	8006e80 <HAL_I2C_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001702:	f001 fa85 	bl	8002c10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001706:	2100      	movs	r1, #0
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <MX_I2C3_Init+0x74>)
 800170a:	f006 f95b 	bl	80079c4 <HAL_I2CEx_ConfigAnalogFilter>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001714:	f001 fa7c 	bl	8002c10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001718:	2100      	movs	r1, #0
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_I2C3_Init+0x74>)
 800171c:	f006 f99d 	bl	8007a5a <HAL_I2CEx_ConfigDigitalFilter>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001726:	f001 fa73 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20007ef8 	.word	0x20007ef8
 8001734:	40005c00 	.word	0x40005c00
 8001738:	00c0eaff 	.word	0x00c0eaff

0800173c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08e      	sub	sp, #56	; 0x38
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2234      	movs	r2, #52	; 0x34
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f00c fd6f 	bl	800e22c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <MX_LTDC_Init+0xfc>)
 8001750:	4a3a      	ldr	r2, [pc, #232]	; (800183c <MX_LTDC_Init+0x100>)
 8001752:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001754:	4b38      	ldr	r3, [pc, #224]	; (8001838 <MX_LTDC_Init+0xfc>)
 8001756:	2200      	movs	r2, #0
 8001758:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <MX_LTDC_Init+0xfc>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001760:	4b35      	ldr	r3, [pc, #212]	; (8001838 <MX_LTDC_Init+0xfc>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001766:	4b34      	ldr	r3, [pc, #208]	; (8001838 <MX_LTDC_Init+0xfc>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800176c:	4b32      	ldr	r3, [pc, #200]	; (8001838 <MX_LTDC_Init+0xfc>)
 800176e:	2228      	movs	r2, #40	; 0x28
 8001770:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001772:	4b31      	ldr	r3, [pc, #196]	; (8001838 <MX_LTDC_Init+0xfc>)
 8001774:	2209      	movs	r2, #9
 8001776:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001778:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <MX_LTDC_Init+0xfc>)
 800177a:	2235      	movs	r2, #53	; 0x35
 800177c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800177e:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <MX_LTDC_Init+0xfc>)
 8001780:	220b      	movs	r2, #11
 8001782:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001784:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <MX_LTDC_Init+0xfc>)
 8001786:	f240 2215 	movw	r2, #533	; 0x215
 800178a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <MX_LTDC_Init+0xfc>)
 800178e:	f240 121b 	movw	r2, #283	; 0x11b
 8001792:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001794:	4b28      	ldr	r3, [pc, #160]	; (8001838 <MX_LTDC_Init+0xfc>)
 8001796:	f240 2235 	movw	r2, #565	; 0x235
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800179c:	4b26      	ldr	r3, [pc, #152]	; (8001838 <MX_LTDC_Init+0xfc>)
 800179e:	f240 121d 	movw	r2, #285	; 0x11d
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <MX_LTDC_Init+0xfc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <MX_LTDC_Init+0xfc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <MX_LTDC_Init+0xfc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80017bc:	481e      	ldr	r0, [pc, #120]	; (8001838 <MX_LTDC_Init+0xfc>)
 80017be:	f006 f999 	bl	8007af4 <HAL_LTDC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80017c8:	f001 fa22 	bl	8002c10 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80017d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80017d4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80017da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80017de:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80017e0:	2302      	movs	r3, #2
 80017e2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80017e4:	23ff      	movs	r3, #255	; 0xff
 80017e6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80017ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017f0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80017f2:	2307      	movs	r3, #7
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80017f6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80017fc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001802:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2200      	movs	r2, #0
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_LTDC_Init+0xfc>)
 8001822:	f006 faf9 	bl	8007e18 <HAL_LTDC_ConfigLayer>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800182c:	f001 f9f0 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3738      	adds	r7, #56	; 0x38
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20008368 	.word	0x20008368
 800183c:	40016800 	.word	0x40016800

08001840 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b092      	sub	sp, #72	; 0x48
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	611a      	str	r2, [r3, #16]
 8001856:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001858:	2300      	movs	r3, #0
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800185c:	463b      	mov	r3, r7
 800185e:	222c      	movs	r2, #44	; 0x2c
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f00c fce2 	bl	800e22c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001868:	4b46      	ldr	r3, [pc, #280]	; (8001984 <MX_RTC_Init+0x144>)
 800186a:	4a47      	ldr	r2, [pc, #284]	; (8001988 <MX_RTC_Init+0x148>)
 800186c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800186e:	4b45      	ldr	r3, [pc, #276]	; (8001984 <MX_RTC_Init+0x144>)
 8001870:	2200      	movs	r2, #0
 8001872:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001874:	4b43      	ldr	r3, [pc, #268]	; (8001984 <MX_RTC_Init+0x144>)
 8001876:	227f      	movs	r2, #127	; 0x7f
 8001878:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800187a:	4b42      	ldr	r3, [pc, #264]	; (8001984 <MX_RTC_Init+0x144>)
 800187c:	22ff      	movs	r2, #255	; 0xff
 800187e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001880:	4b40      	ldr	r3, [pc, #256]	; (8001984 <MX_RTC_Init+0x144>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <MX_RTC_Init+0x144>)
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800188c:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <MX_RTC_Init+0x144>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001892:	483c      	ldr	r0, [pc, #240]	; (8001984 <MX_RTC_Init+0x144>)
 8001894:	f007 fda2 	bl	80093dc <HAL_RTC_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800189e:	f001 f9b7 	bl	8002c10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018c0:	2201      	movs	r2, #1
 80018c2:	4619      	mov	r1, r3
 80018c4:	482f      	ldr	r0, [pc, #188]	; (8001984 <MX_RTC_Init+0x144>)
 80018c6:	f007 fe1b 	bl	8009500 <HAL_RTC_SetTime>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80018d0:	f001 f99e 	bl	8002c10 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80018da:	2301      	movs	r3, #1
 80018dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80018e0:	2301      	movs	r3, #1
 80018e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80018ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f0:	2201      	movs	r2, #1
 80018f2:	4619      	mov	r1, r3
 80018f4:	4823      	ldr	r0, [pc, #140]	; (8001984 <MX_RTC_Init+0x144>)
 80018f6:	f007 fec1 	bl	800967c <HAL_RTC_SetDate>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001900:	f001 f986 	bl	8002c10 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001904:	2300      	movs	r3, #0
 8001906:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001908:	2300      	movs	r3, #0
 800190a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800190c:	2300      	movs	r3, #0
 800190e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001928:	2301      	movs	r3, #1
 800192a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800192e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001934:	463b      	mov	r3, r7
 8001936:	2201      	movs	r2, #1
 8001938:	4619      	mov	r1, r3
 800193a:	4812      	ldr	r0, [pc, #72]	; (8001984 <MX_RTC_Init+0x144>)
 800193c:	f007 ff46 	bl	80097cc <HAL_RTC_SetAlarm>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001946:	f001 f963 	bl	8002c10 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800194a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001950:	463b      	mov	r3, r7
 8001952:	2201      	movs	r2, #1
 8001954:	4619      	mov	r1, r3
 8001956:	480b      	ldr	r0, [pc, #44]	; (8001984 <MX_RTC_Init+0x144>)
 8001958:	f007 ff38 	bl	80097cc <HAL_RTC_SetAlarm>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001962:	f001 f955 	bl	8002c10 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001966:	2202      	movs	r2, #2
 8001968:	2100      	movs	r1, #0
 800196a:	4806      	ldr	r0, [pc, #24]	; (8001984 <MX_RTC_Init+0x144>)
 800196c:	f008 f8b8 	bl	8009ae0 <HAL_RTCEx_SetTimeStamp>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001976:	f001 f94b 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	3748      	adds	r7, #72	; 0x48
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20008544 	.word	0x20008544
 8001988:	40002800 	.word	0x40002800

0800198c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <MX_SPI2_Init+0x74>)
 8001992:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <MX_SPI2_Init+0x78>)
 8001994:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_SPI2_Init+0x74>)
 8001998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800199c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b2:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80019be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019da:	2207      	movs	r2, #7
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019e6:	2208      	movs	r2, #8
 80019e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_SPI2_Init+0x74>)
 80019ec:	f008 f95f 	bl	8009cae <HAL_SPI_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80019f6:	f001 f90b 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20007f44 	.word	0x20007f44
 8001a04:	40003800 	.word	0x40003800

08001a08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <MX_TIM1_Init+0xa0>)
 8001a28:	4a20      	ldr	r2, [pc, #128]	; (8001aac <MX_TIM1_Init+0xa4>)
 8001a2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <MX_TIM1_Init+0xa0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <MX_TIM1_Init+0xa0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <MX_TIM1_Init+0xa0>)
 8001a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <MX_TIM1_Init+0xa0>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <MX_TIM1_Init+0xa0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <MX_TIM1_Init+0xa0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a52:	4815      	ldr	r0, [pc, #84]	; (8001aa8 <MX_TIM1_Init+0xa0>)
 8001a54:	f008 f9d6 	bl	8009e04 <HAL_TIM_Base_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a5e:	f001 f8d7 	bl	8002c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480e      	ldr	r0, [pc, #56]	; (8001aa8 <MX_TIM1_Init+0xa0>)
 8001a70:	f008 fbb8 	bl	800a1e4 <HAL_TIM_ConfigClockSource>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a7a:	f001 f8c9 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <MX_TIM1_Init+0xa0>)
 8001a90:	f008 fdd4 	bl	800a63c <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a9a:	f001 f8b9 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20008b64 	.word	0x20008b64
 8001aac:	40010000 	.word	0x40010000

08001ab0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af6:	4814      	ldr	r0, [pc, #80]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001af8:	f008 f984 	bl	8009e04 <HAL_TIM_Base_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b02:	f001 f885 	bl	8002c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	4619      	mov	r1, r3
 8001b12:	480d      	ldr	r0, [pc, #52]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001b14:	f008 fb66 	bl	800a1e4 <HAL_TIM_ConfigClockSource>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b1e:	f001 f877 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001b30:	f008 fd84 	bl	800a63c <HAL_TIMEx_MasterConfigSynchronization>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b3a:	f001 f869 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20008c74 	.word	0x20008c74

08001b4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	f107 0310 	add.w	r3, r7, #16
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <MX_TIM3_Init+0x94>)
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <MX_TIM3_Init+0x98>)
 8001b6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <MX_TIM3_Init+0x94>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b76:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <MX_TIM3_Init+0x94>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <MX_TIM3_Init+0x94>)
 8001b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <MX_TIM3_Init+0x94>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <MX_TIM3_Init+0x94>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b90:	4813      	ldr	r0, [pc, #76]	; (8001be0 <MX_TIM3_Init+0x94>)
 8001b92:	f008 f937 	bl	8009e04 <HAL_TIM_Base_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001b9c:	f001 f838 	bl	8002c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	4619      	mov	r1, r3
 8001bac:	480c      	ldr	r0, [pc, #48]	; (8001be0 <MX_TIM3_Init+0x94>)
 8001bae:	f008 fb19 	bl	800a1e4 <HAL_TIM_ConfigClockSource>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001bb8:	f001 f82a 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_TIM3_Init+0x94>)
 8001bca:	f008 fd37 	bl	800a63c <HAL_TIMEx_MasterConfigSynchronization>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001bd4:	f001 f81c 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	2000831c 	.word	0x2000831c
 8001be4:	40000400 	.word	0x40000400

08001be8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bee:	f107 0310 	add.w	r3, r7, #16
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c06:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <MX_TIM5_Init+0x94>)
 8001c08:	4a1d      	ldr	r2, [pc, #116]	; (8001c80 <MX_TIM5_Init+0x98>)
 8001c0a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <MX_TIM5_Init+0x94>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <MX_TIM5_Init+0x94>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MX_TIM5_Init+0x94>)
 8001c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <MX_TIM5_Init+0x94>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_TIM5_Init+0x94>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001c2c:	4813      	ldr	r0, [pc, #76]	; (8001c7c <MX_TIM5_Init+0x94>)
 8001c2e:	f008 f8e9 	bl	8009e04 <HAL_TIM_Base_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001c38:	f000 ffea 	bl	8002c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	4619      	mov	r1, r3
 8001c48:	480c      	ldr	r0, [pc, #48]	; (8001c7c <MX_TIM5_Init+0x94>)
 8001c4a:	f008 facb 	bl	800a1e4 <HAL_TIM_ConfigClockSource>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001c54:	f000 ffdc 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_TIM5_Init+0x94>)
 8001c66:	f008 fce9 	bl	800a63c <HAL_TIMEx_MasterConfigSynchronization>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001c70:	f000 ffce 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	3720      	adds	r7, #32
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	200082cc 	.word	0x200082cc
 8001c80:	40000c00 	.word	0x40000c00

08001c84 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <MX_TIM8_Init+0xa0>)
 8001ca4:	4a20      	ldr	r2, [pc, #128]	; (8001d28 <MX_TIM8_Init+0xa4>)
 8001ca6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <MX_TIM8_Init+0xa0>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <MX_TIM8_Init+0xa0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001cb4:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <MX_TIM8_Init+0xa0>)
 8001cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <MX_TIM8_Init+0xa0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <MX_TIM8_Init+0xa0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <MX_TIM8_Init+0xa0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001cce:	4815      	ldr	r0, [pc, #84]	; (8001d24 <MX_TIM8_Init+0xa0>)
 8001cd0:	f008 f898 	bl	8009e04 <HAL_TIM_Base_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001cda:	f000 ff99 	bl	8002c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ce4:	f107 0310 	add.w	r3, r7, #16
 8001ce8:	4619      	mov	r1, r3
 8001cea:	480e      	ldr	r0, [pc, #56]	; (8001d24 <MX_TIM8_Init+0xa0>)
 8001cec:	f008 fa7a 	bl	800a1e4 <HAL_TIM_ConfigClockSource>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001cf6:	f000 ff8b 	bl	8002c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4806      	ldr	r0, [pc, #24]	; (8001d24 <MX_TIM8_Init+0xa0>)
 8001d0c:	f008 fc96 	bl	800a63c <HAL_TIMEx_MasterConfigSynchronization>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001d16:	f000 ff7b 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	3720      	adds	r7, #32
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20008030 	.word	0x20008030
 8001d28:	40010400 	.word	0x40010400

08001d2c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_UART7_Init+0x58>)
 8001d32:	4a15      	ldr	r2, [pc, #84]	; (8001d88 <MX_UART7_Init+0x5c>)
 8001d34:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <MX_UART7_Init+0x58>)
 8001d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d3c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_UART7_Init+0x58>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_UART7_Init+0x58>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_UART7_Init+0x58>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_UART7_Init+0x58>)
 8001d52:	220c      	movs	r2, #12
 8001d54:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <MX_UART7_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_UART7_Init+0x58>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <MX_UART7_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_UART7_Init+0x58>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_UART7_Init+0x58>)
 8001d70:	f008 fd10 	bl	800a794 <HAL_UART_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001d7a:	f000 ff49 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20007fa8 	.word	0x20007fa8
 8001d88:	40007800 	.word	0x40007800

08001d8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <MX_USART1_UART_Init+0x58>)
 8001d92:	4a15      	ldr	r2, [pc, #84]	; (8001de8 <MX_USART1_UART_Init+0x5c>)
 8001d94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <MX_USART1_UART_Init+0x58>)
 8001d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <MX_USART1_UART_Init+0x58>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <MX_USART1_UART_Init+0x58>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <MX_USART1_UART_Init+0x58>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db0:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <MX_USART1_UART_Init+0x58>)
 8001db2:	220c      	movs	r2, #12
 8001db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <MX_USART1_UART_Init+0x58>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <MX_USART1_UART_Init+0x58>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dc2:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <MX_USART1_UART_Init+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <MX_USART1_UART_Init+0x58>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dce:	4805      	ldr	r0, [pc, #20]	; (8001de4 <MX_USART1_UART_Init+0x58>)
 8001dd0:	f008 fce0 	bl	800a794 <HAL_UART_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001dda:	f000 ff19 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200084a8 	.word	0x200084a8
 8001de8:	40011000 	.word	0x40011000

08001dec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <MX_USART6_UART_Init+0x58>)
 8001df2:	4a15      	ldr	r2, [pc, #84]	; (8001e48 <MX_USART6_UART_Init+0x5c>)
 8001df4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <MX_USART6_UART_Init+0x58>)
 8001df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dfc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <MX_USART6_UART_Init+0x58>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MX_USART6_UART_Init+0x58>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <MX_USART6_UART_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <MX_USART6_UART_Init+0x58>)
 8001e12:	220c      	movs	r2, #12
 8001e14:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <MX_USART6_UART_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <MX_USART6_UART_Init+0x58>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <MX_USART6_UART_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <MX_USART6_UART_Init+0x58>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e2e:	4805      	ldr	r0, [pc, #20]	; (8001e44 <MX_USART6_UART_Init+0x58>)
 8001e30:	f008 fcb0 	bl	800a794 <HAL_UART_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001e3a:	f000 fee9 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20008bb0 	.word	0x20008bb0
 8001e48:	40011400 	.word	0x40011400

08001e4c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
 8001e60:	615a      	str	r2, [r3, #20]
 8001e62:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <MX_FMC_Init+0x98>)
 8001e66:	4a20      	ldr	r2, [pc, #128]	; (8001ee8 <MX_FMC_Init+0x9c>)
 8001e68:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <MX_FMC_Init+0x98>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <MX_FMC_Init+0x98>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <MX_FMC_Init+0x98>)
 8001e78:	2204      	movs	r2, #4
 8001e7a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <MX_FMC_Init+0x98>)
 8001e7e:	2210      	movs	r2, #16
 8001e80:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_FMC_Init+0x98>)
 8001e84:	2240      	movs	r2, #64	; 0x40
 8001e86:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <MX_FMC_Init+0x98>)
 8001e8a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001e8e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <MX_FMC_Init+0x98>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <MX_FMC_Init+0x98>)
 8001e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e9c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_FMC_Init+0x98>)
 8001ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MX_FMC_Init+0x98>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001eb8:	2307      	movs	r3, #7
 8001eba:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_FMC_Init+0x98>)
 8001ece:	f007 fe5d 	bl	8009b8c <HAL_SDRAM_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001ed8:	f000 fe9a 	bl	8002c10 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20008cc0 	.word	0x20008cc0
 8001ee8:	a0000140 	.word	0xa0000140

08001eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b090      	sub	sp, #64	; 0x40
 8001ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f02:	4baf      	ldr	r3, [pc, #700]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4aae      	ldr	r2, [pc, #696]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f08:	f043 0310 	orr.w	r3, r3, #16
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4bac      	ldr	r3, [pc, #688]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f1a:	4ba9      	ldr	r3, [pc, #676]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4aa8      	ldr	r2, [pc, #672]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4ba6      	ldr	r3, [pc, #664]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f32:	4ba3      	ldr	r3, [pc, #652]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4aa2      	ldr	r2, [pc, #648]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4ba0      	ldr	r3, [pc, #640]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	623b      	str	r3, [r7, #32]
 8001f48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4a:	4b9d      	ldr	r3, [pc, #628]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a9c      	ldr	r2, [pc, #624]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f50:	f043 0308 	orr.w	r3, r3, #8
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b9a      	ldr	r3, [pc, #616]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f62:	4b97      	ldr	r3, [pc, #604]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a96      	ldr	r2, [pc, #600]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b94      	ldr	r3, [pc, #592]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	4b91      	ldr	r3, [pc, #580]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a90      	ldr	r2, [pc, #576]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b8e      	ldr	r3, [pc, #568]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001f92:	4b8b      	ldr	r3, [pc, #556]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a8a      	ldr	r2, [pc, #552]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b88      	ldr	r3, [pc, #544]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001faa:	4b85      	ldr	r3, [pc, #532]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a84      	ldr	r2, [pc, #528]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b82      	ldr	r3, [pc, #520]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001fc2:	4b7f      	ldr	r3, [pc, #508]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a7e      	ldr	r2, [pc, #504]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001fc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b7c      	ldr	r3, [pc, #496]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fda:	4b79      	ldr	r3, [pc, #484]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a78      	ldr	r2, [pc, #480]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001fe0:	f043 0320 	orr.w	r3, r3, #32
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b76      	ldr	r3, [pc, #472]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff2:	4b73      	ldr	r3, [pc, #460]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a72      	ldr	r2, [pc, #456]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8001ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b70      	ldr	r3, [pc, #448]	; (80021c0 <MX_GPIO_Init+0x2d4>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002006:	603b      	str	r3, [r7, #0]
 8002008:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	2160      	movs	r1, #96	; 0x60
 800200e:	486d      	ldr	r0, [pc, #436]	; (80021c4 <MX_GPIO_Init+0x2d8>)
 8002010:	f004 feea 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002014:	2201      	movs	r2, #1
 8002016:	2120      	movs	r1, #32
 8002018:	486b      	ldr	r0, [pc, #428]	; (80021c8 <MX_GPIO_Init+0x2dc>)
 800201a:	f004 fee5 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	2108      	movs	r1, #8
 8002022:	4869      	ldr	r0, [pc, #420]	; (80021c8 <MX_GPIO_Init+0x2dc>)
 8002024:	f004 fee0 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002028:	2201      	movs	r2, #1
 800202a:	2108      	movs	r1, #8
 800202c:	4867      	ldr	r0, [pc, #412]	; (80021cc <MX_GPIO_Init+0x2e0>)
 800202e:	f004 fedb 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002032:	2201      	movs	r2, #1
 8002034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002038:	4865      	ldr	r0, [pc, #404]	; (80021d0 <MX_GPIO_Init+0x2e4>)
 800203a:	f004 fed5 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800203e:	2200      	movs	r2, #0
 8002040:	f645 6140 	movw	r1, #24128	; 0x5e40
 8002044:	4863      	ldr	r0, [pc, #396]	; (80021d4 <MX_GPIO_Init+0x2e8>)
 8002046:	f004 fecf 	bl	8006de8 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	21c8      	movs	r1, #200	; 0xc8
 800204e:	4862      	ldr	r0, [pc, #392]	; (80021d8 <MX_GPIO_Init+0x2ec>)
 8002050:	f004 feca 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002054:	2308      	movs	r3, #8
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002058:	2300      	movs	r3, #0
 800205a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002064:	4619      	mov	r1, r3
 8002066:	4857      	ldr	r0, [pc, #348]	; (80021c4 <MX_GPIO_Init+0x2d8>)
 8002068:	f004 fc06 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800206c:	2304      	movs	r3, #4
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800207c:	2309      	movs	r3, #9
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002080:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002084:	4619      	mov	r1, r3
 8002086:	484f      	ldr	r0, [pc, #316]	; (80021c4 <MX_GPIO_Init+0x2d8>)
 8002088:	f004 fbf6 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800208c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800209e:	230b      	movs	r3, #11
 80020a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a6:	4619      	mov	r1, r3
 80020a8:	484b      	ldr	r0, [pc, #300]	; (80021d8 <MX_GPIO_Init+0x2ec>)
 80020aa:	f004 fbe5 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80020ae:	f643 0323 	movw	r3, #14371	; 0x3823
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80020c0:	230a      	movs	r3, #10
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c8:	4619      	mov	r1, r3
 80020ca:	4844      	ldr	r0, [pc, #272]	; (80021dc <MX_GPIO_Init+0x2f0>)
 80020cc:	f004 fbd4 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80020e0:	2308      	movs	r3, #8
 80020e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e8:	4619      	mov	r1, r3
 80020ea:	4837      	ldr	r0, [pc, #220]	; (80021c8 <MX_GPIO_Init+0x2dc>)
 80020ec:	f004 fbc4 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80020f0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80020f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fe:	2303      	movs	r3, #3
 8002100:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002102:	230c      	movs	r3, #12
 8002104:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800210a:	4619      	mov	r1, r3
 800210c:	4834      	ldr	r0, [pc, #208]	; (80021e0 <MX_GPIO_Init+0x2f4>)
 800210e:	f004 fbb3 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_6;
 8002112:	f248 1340 	movw	r3, #33088	; 0x8140
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002118:	2300      	movs	r3, #0
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002124:	4619      	mov	r1, r3
 8002126:	482f      	ldr	r0, [pc, #188]	; (80021e4 <MX_GPIO_Init+0x2f8>)
 8002128:	f004 fba6 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 800212c:	2360      	movs	r3, #96	; 0x60
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002130:	2301      	movs	r3, #1
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800213c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002140:	4619      	mov	r1, r3
 8002142:	4820      	ldr	r0, [pc, #128]	; (80021c4 <MX_GPIO_Init+0x2d8>)
 8002144:	f004 fb98 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002148:	2340      	movs	r3, #64	; 0x40
 800214a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002154:	2303      	movs	r3, #3
 8002156:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002158:	230a      	movs	r3, #10
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800215c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002160:	4619      	mov	r1, r3
 8002162:	481e      	ldr	r0, [pc, #120]	; (80021dc <MX_GPIO_Init+0x2f0>)
 8002164:	f004 fb88 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800216e:	2300      	movs	r3, #0
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800217a:	4619      	mov	r1, r3
 800217c:	481a      	ldr	r0, [pc, #104]	; (80021e8 <MX_GPIO_Init+0x2fc>)
 800217e:	f004 fb7b 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002182:	2340      	movs	r3, #64	; 0x40
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002186:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002194:	4619      	mov	r1, r3
 8002196:	480c      	ldr	r0, [pc, #48]	; (80021c8 <MX_GPIO_Init+0x2dc>)
 8002198:	f004 fb6e 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 800219c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021ae:	230a      	movs	r3, #10
 80021b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b6:	4619      	mov	r1, r3
 80021b8:	480a      	ldr	r0, [pc, #40]	; (80021e4 <MX_GPIO_Init+0x2f8>)
 80021ba:	f004 fb5d 	bl	8006878 <HAL_GPIO_Init>
 80021be:	e015      	b.n	80021ec <MX_GPIO_Init+0x300>
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40020c00 	.word	0x40020c00
 80021cc:	40022800 	.word	0x40022800
 80021d0:	40022000 	.word	0x40022000
 80021d4:	40021c00 	.word	0x40021c00
 80021d8:	40021800 	.word	0x40021800
 80021dc:	40020400 	.word	0x40020400
 80021e0:	40020800 	.word	0x40020800
 80021e4:	40020000 	.word	0x40020000
 80021e8:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80021ec:	23f0      	movs	r3, #240	; 0xf0
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	2300      	movs	r3, #0
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80021fc:	230a      	movs	r3, #10
 80021fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002204:	4619      	mov	r1, r3
 8002206:	4895      	ldr	r0, [pc, #596]	; (800245c <MX_GPIO_Init+0x570>)
 8002208:	f004 fb36 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800220c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221a:	2300      	movs	r3, #0
 800221c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800221e:	230a      	movs	r3, #10
 8002220:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002226:	4619      	mov	r1, r3
 8002228:	488d      	ldr	r0, [pc, #564]	; (8002460 <MX_GPIO_Init+0x574>)
 800222a:	f004 fb25 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 800222e:	2328      	movs	r3, #40	; 0x28
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002232:	2301      	movs	r3, #1
 8002234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223a:	2300      	movs	r3, #0
 800223c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002242:	4619      	mov	r1, r3
 8002244:	4887      	ldr	r0, [pc, #540]	; (8002464 <MX_GPIO_Init+0x578>)
 8002246:	f004 fb17 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800224a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002250:	2300      	movs	r3, #0
 8002252:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800225c:	4619      	mov	r1, r3
 800225e:	4882      	ldr	r0, [pc, #520]	; (8002468 <MX_GPIO_Init+0x57c>)
 8002260:	f004 fb0a 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002264:	2308      	movs	r3, #8
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002268:	2301      	movs	r3, #1
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002278:	4619      	mov	r1, r3
 800227a:	487c      	ldr	r0, [pc, #496]	; (800246c <MX_GPIO_Init+0x580>)
 800227c:	f004 fafc 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002280:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002286:	2300      	movs	r3, #0
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800228e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002292:	4619      	mov	r1, r3
 8002294:	4872      	ldr	r0, [pc, #456]	; (8002460 <MX_GPIO_Init+0x574>)
 8002296:	f004 faef 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800229a:	2310      	movs	r3, #16
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229e:	2300      	movs	r3, #0
 80022a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022aa:	4619      	mov	r1, r3
 80022ac:	486d      	ldr	r0, [pc, #436]	; (8002464 <MX_GPIO_Init+0x578>)
 80022ae:	f004 fae3 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80022b2:	2304      	movs	r3, #4
 80022b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022be:	2303      	movs	r3, #3
 80022c0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80022c2:	230c      	movs	r3, #12
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80022c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ca:	4619      	mov	r1, r3
 80022cc:	4865      	ldr	r0, [pc, #404]	; (8002464 <MX_GPIO_Init+0x578>)
 80022ce:	f004 fad3 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 80022d2:	f24a 0304 	movw	r3, #40964	; 0xa004
 80022d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d8:	2300      	movs	r3, #0
 80022da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e4:	4619      	mov	r1, r3
 80022e6:	4862      	ldr	r0, [pc, #392]	; (8002470 <MX_GPIO_Init+0x584>)
 80022e8:	f004 fac6 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80022ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f2:	2301      	movs	r3, #1
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80022fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002302:	4619      	mov	r1, r3
 8002304:	4855      	ldr	r0, [pc, #340]	; (800245c <MX_GPIO_Init+0x570>)
 8002306:	f004 fab7 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800230a:	f645 6340 	movw	r3, #24128	; 0x5e40
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002310:	2301      	movs	r3, #1
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800231c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002320:	4619      	mov	r1, r3
 8002322:	4853      	ldr	r0, [pc, #332]	; (8002470 <MX_GPIO_Init+0x584>)
 8002324:	f004 faa8 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800232e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800233c:	4619      	mov	r1, r3
 800233e:	4847      	ldr	r0, [pc, #284]	; (800245c <MX_GPIO_Init+0x570>)
 8002340:	f004 fa9a 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002344:	2310      	movs	r3, #16
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002354:	230a      	movs	r3, #10
 8002356:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002358:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800235c:	4619      	mov	r1, r3
 800235e:	4844      	ldr	r0, [pc, #272]	; (8002470 <MX_GPIO_Init+0x584>)
 8002360:	f004 fa8a 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002364:	23c8      	movs	r3, #200	; 0xc8
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002378:	4619      	mov	r1, r3
 800237a:	4839      	ldr	r0, [pc, #228]	; (8002460 <MX_GPIO_Init+0x574>)
 800237c:	f004 fa7c 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002380:	2305      	movs	r3, #5
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238c:	2303      	movs	r3, #3
 800238e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002390:	230a      	movs	r3, #10
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002398:	4619      	mov	r1, r3
 800239a:	4833      	ldr	r0, [pc, #204]	; (8002468 <MX_GPIO_Init+0x57c>)
 800239c:	f004 fa6c 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80023a0:	2332      	movs	r3, #50	; 0x32
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80023b0:	230b      	movs	r3, #11
 80023b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b8:	4619      	mov	r1, r3
 80023ba:	482b      	ldr	r0, [pc, #172]	; (8002468 <MX_GPIO_Init+0x57c>)
 80023bc:	f004 fa5c 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023c0:	2304      	movs	r3, #4
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023cc:	2303      	movs	r3, #3
 80023ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80023d0:	2309      	movs	r3, #9
 80023d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d8:	4619      	mov	r1, r3
 80023da:	4826      	ldr	r0, [pc, #152]	; (8002474 <MX_GPIO_Init+0x588>)
 80023dc:	f004 fa4c 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80023e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80023f2:	2309      	movs	r3, #9
 80023f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023fa:	4619      	mov	r1, r3
 80023fc:	4819      	ldr	r0, [pc, #100]	; (8002464 <MX_GPIO_Init+0x578>)
 80023fe:	f004 fa3b 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002402:	2386      	movs	r3, #134	; 0x86
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240e:	2303      	movs	r3, #3
 8002410:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002412:	230b      	movs	r3, #11
 8002414:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800241a:	4619      	mov	r1, r3
 800241c:	4816      	ldr	r0, [pc, #88]	; (8002478 <MX_GPIO_Init+0x58c>)
 800241e:	f004 fa2b 	bl	8006878 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002422:	2328      	movs	r3, #40	; 0x28
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002426:	2302      	movs	r3, #2
 8002428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242a:	2300      	movs	r3, #0
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242e:	2303      	movs	r3, #3
 8002430:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002432:	230a      	movs	r3, #10
 8002434:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243a:	4619      	mov	r1, r3
 800243c:	480e      	ldr	r0, [pc, #56]	; (8002478 <MX_GPIO_Init+0x58c>)
 800243e:	f004 fa1b 	bl	8006878 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	2105      	movs	r1, #5
 8002446:	2028      	movs	r0, #40	; 0x28
 8002448:	f003 fb20 	bl	8005a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800244c:	2028      	movs	r0, #40	; 0x28
 800244e:	f003 fb39 	bl	8005ac4 <HAL_NVIC_EnableIRQ>

}
 8002452:	bf00      	nop
 8002454:	3740      	adds	r7, #64	; 0x40
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40022000 	.word	0x40022000
 8002460:	40021800 	.word	0x40021800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	40020800 	.word	0x40020800
 800246c:	40022800 	.word	0x40022800
 8002470:	40021c00 	.word	0x40021c00
 8002474:	40020400 	.word	0x40020400
 8002478:	40020000 	.word	0x40020000

0800247c <HAL_GPIO_EXTI_Callback>:
		HAL_UART_Receive_IT(&huart1,rxbuffer,1); // Rappel (callback) de l'interruption
		*/
	}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{	/**
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
 		flag = 1;
	}
	//xQueueSendFromISR(myQueueTempoHandle, &MessageTempo, 0);
	 *
	 */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <fonction_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fonction_init */
void fonction_init(void const * argument)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 20;
 800249c:	2314      	movs	r3, #20
 800249e:	613b      	str	r3, [r7, #16]
    uint8_t i, j, cpt_lignesw = 0, cpt_colonnesw = 1, cpt_lignesb, cpt_colonnesb;
 80024a0:	2300      	movs	r3, #0
 80024a2:	757b      	strb	r3, [r7, #21]
 80024a4:	2301      	movs	r3, #1
 80024a6:	753b      	strb	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {


	  for (i = 0; i < 3; i++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	75fb      	strb	r3, [r7, #23]
 80024ac:	e090      	b.n	80025d0 <fonction_init+0x13c>
	  {
		  for (j = 0; j < 4; j++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	75bb      	strb	r3, [r7, #22]
 80024b2:	e07a      	b.n	80025aa <fonction_init+0x116>
		  {
			  taskENTER_CRITICAL();
 80024b4:	f00b fbba 	bl	800dc2c <vPortEnterCritical>
			  	 // init white pieces
			  chessboard[cpt_lignesw][cpt_colonnesw].ligne = cpt_lignesw;
 80024b8:	7d7a      	ldrb	r2, [r7, #21]
 80024ba:	7d3b      	ldrb	r3, [r7, #20]
 80024bc:	7d79      	ldrb	r1, [r7, #21]
 80024be:	b288      	uxth	r0, r1
 80024c0:	4949      	ldr	r1, [pc, #292]	; (80025e8 <fonction_init+0x154>)
 80024c2:	00d2      	lsls	r2, r2, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	4602      	mov	r2, r0
 80024c8:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
			  chessboard[cpt_lignesw][cpt_colonnesw].colonne = cpt_colonnesw;
 80024cc:	7d7a      	ldrb	r2, [r7, #21]
 80024ce:	7d3b      	ldrb	r3, [r7, #20]
 80024d0:	7d39      	ldrb	r1, [r7, #20]
 80024d2:	b288      	uxth	r0, r1
 80024d4:	4944      	ldr	r1, [pc, #272]	; (80025e8 <fonction_init+0x154>)
 80024d6:	00d2      	lsls	r2, r2, #3
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	4602      	mov	r2, r0
 80024e0:	805a      	strh	r2, [r3, #2]
			  chessboard[cpt_lignesw][cpt_colonnesw].isFilled = 1;
 80024e2:	7d7a      	ldrb	r2, [r7, #21]
 80024e4:	7d3b      	ldrb	r3, [r7, #20]
 80024e6:	4940      	ldr	r1, [pc, #256]	; (80025e8 <fonction_init+0x154>)
 80024e8:	00d2      	lsls	r2, r2, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	2201      	movs	r2, #1
 80024f2:	715a      	strb	r2, [r3, #5]
			  chessboard[cpt_lignesw][cpt_colonnesw].rayon = 9;
 80024f4:	7d7a      	ldrb	r2, [r7, #21]
 80024f6:	7d3b      	ldrb	r3, [r7, #20]
 80024f8:	493b      	ldr	r1, [pc, #236]	; (80025e8 <fonction_init+0x154>)
 80024fa:	00d2      	lsls	r2, r2, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	440b      	add	r3, r1
 8002502:	2209      	movs	r2, #9
 8002504:	71da      	strb	r2, [r3, #7]
			  chessboard[cpt_lignesw][cpt_colonnesw].piece_color = 0;
 8002506:	7d7a      	ldrb	r2, [r7, #21]
 8002508:	7d3b      	ldrb	r3, [r7, #20]
 800250a:	4937      	ldr	r1, [pc, #220]	; (80025e8 <fonction_init+0x154>)
 800250c:	00d2      	lsls	r2, r2, #3
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	440b      	add	r3, r1
 8002514:	2200      	movs	r2, #0
 8002516:	719a      	strb	r2, [r3, #6]
			  // init black pieces
			  cpt_lignesb = cpt_lignesw + 5;
 8002518:	7d7b      	ldrb	r3, [r7, #21]
 800251a:	3305      	adds	r3, #5
 800251c:	73fb      	strb	r3, [r7, #15]
			  cpt_colonnesb = (cpt_colonnesw % 2 == 0) ? cpt_colonnesw + 1 : cpt_colonnesw - 1;
 800251e:	7d3b      	ldrb	r3, [r7, #20]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d103      	bne.n	8002532 <fonction_init+0x9e>
 800252a:	7d3b      	ldrb	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	e002      	b.n	8002538 <fonction_init+0xa4>
 8002532:	7d3b      	ldrb	r3, [r7, #20]
 8002534:	3b01      	subs	r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	73bb      	strb	r3, [r7, #14]
			  chessboard[cpt_lignesb][cpt_colonnesb].ligne = cpt_lignesb;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	7bbb      	ldrb	r3, [r7, #14]
 800253e:	7bf9      	ldrb	r1, [r7, #15]
 8002540:	b288      	uxth	r0, r1
 8002542:	4929      	ldr	r1, [pc, #164]	; (80025e8 <fonction_init+0x154>)
 8002544:	00d2      	lsls	r2, r2, #3
 8002546:	4413      	add	r3, r2
 8002548:	4602      	mov	r2, r0
 800254a:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
			  chessboard[cpt_lignesb][cpt_colonnesb].colonne = cpt_colonnesb;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	7bbb      	ldrb	r3, [r7, #14]
 8002552:	7bb9      	ldrb	r1, [r7, #14]
 8002554:	b288      	uxth	r0, r1
 8002556:	4924      	ldr	r1, [pc, #144]	; (80025e8 <fonction_init+0x154>)
 8002558:	00d2      	lsls	r2, r2, #3
 800255a:	4413      	add	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	440b      	add	r3, r1
 8002560:	4602      	mov	r2, r0
 8002562:	805a      	strh	r2, [r3, #2]
			  chessboard[cpt_lignesb][cpt_colonnesb].isFilled = 1;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	7bbb      	ldrb	r3, [r7, #14]
 8002568:	491f      	ldr	r1, [pc, #124]	; (80025e8 <fonction_init+0x154>)
 800256a:	00d2      	lsls	r2, r2, #3
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	2201      	movs	r2, #1
 8002574:	715a      	strb	r2, [r3, #5]
			  chessboard[cpt_lignesb][cpt_colonnesb].rayon = 9;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	7bbb      	ldrb	r3, [r7, #14]
 800257a:	491b      	ldr	r1, [pc, #108]	; (80025e8 <fonction_init+0x154>)
 800257c:	00d2      	lsls	r2, r2, #3
 800257e:	4413      	add	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	440b      	add	r3, r1
 8002584:	2209      	movs	r2, #9
 8002586:	71da      	strb	r2, [r3, #7]
			  chessboard[cpt_lignesb][cpt_colonnesb].piece_color = 1;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	7bbb      	ldrb	r3, [r7, #14]
 800258c:	4916      	ldr	r1, [pc, #88]	; (80025e8 <fonction_init+0x154>)
 800258e:	00d2      	lsls	r2, r2, #3
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	2201      	movs	r2, #1
 8002598:	719a      	strb	r2, [r3, #6]
			  taskEXIT_CRITICAL();
 800259a:	f00b fb7b 	bl	800dc94 <vPortExitCritical>
			  cpt_colonnesw += 2;
 800259e:	7d3b      	ldrb	r3, [r7, #20]
 80025a0:	3302      	adds	r3, #2
 80025a2:	753b      	strb	r3, [r7, #20]
		  for (j = 0; j < 4; j++)
 80025a4:	7dbb      	ldrb	r3, [r7, #22]
 80025a6:	3301      	adds	r3, #1
 80025a8:	75bb      	strb	r3, [r7, #22]
 80025aa:	7dbb      	ldrb	r3, [r7, #22]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d981      	bls.n	80024b4 <fonction_init+0x20>
		  }
		  cpt_colonnesw = (cpt_colonnesw % 2 == 0) ? 1 : 0;
 80025b0:	7d3b      	ldrb	r3, [r7, #20]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	753b      	strb	r3, [r7, #20]
		  cpt_lignesw++;
 80025c4:	7d7b      	ldrb	r3, [r7, #21]
 80025c6:	3301      	adds	r3, #1
 80025c8:	757b      	strb	r3, [r7, #21]
	  for (i = 0; i < 3; i++)
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
 80025cc:	3301      	adds	r3, #1
 80025ce:	75fb      	strb	r3, [r7, #23]
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	f67f af6b 	bls.w	80024ae <fonction_init+0x1a>
	  }

      vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80025d8:	f107 0308 	add.w	r3, r7, #8
 80025dc:	6939      	ldr	r1, [r7, #16]
 80025de:	4618      	mov	r0, r3
 80025e0:	f00a faf8 	bl	800cbd4 <vTaskDelayUntil>
	  for (i = 0; i < 3; i++)
 80025e4:	e760      	b.n	80024a8 <fonction_init+0x14>
 80025e6:	bf00      	nop
 80025e8:	200080cc 	.word	0x200080cc

080025ec <fonction_affichage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_affichage */
void fonction_affichage(void const * argument)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_affichage */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;
 80025f4:	2332      	movs	r3, #50	; 0x32
 80025f6:	61bb      	str	r3, [r7, #24]
	const uint8_t pas 			= 30;
 80025f8:	231e      	movs	r3, #30
 80025fa:	75fb      	strb	r3, [r7, #23]
	const uint8_t marge			= 15;
 80025fc:	230f      	movs	r3, #15
 80025fe:	75bb      	strb	r3, [r7, #22]
	uint16_t pointeurX 			= marge + pas / 2;
 8002600:	7dbb      	ldrb	r3, [r7, #22]
 8002602:	b29a      	uxth	r2, r3
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	b29b      	uxth	r3, r3
 800260c:	4413      	add	r3, r2
 800260e:	82bb      	strh	r3, [r7, #20]
	uint16_t pointeurY 			= marge + pas / 2;
 8002610:	7dbb      	ldrb	r3, [r7, #22]
 8002612:	b29a      	uxth	r2, r3
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	b29b      	uxth	r3, r3
 800261c:	4413      	add	r3, r2
 800261e:	827b      	strh	r3, [r7, #18]
	uint8_t color				= 2;
 8002620:	2302      	movs	r3, #2
 8002622:	747b      	strb	r3, [r7, #17]
	uint8_t i, j;
	uint8_t filled = 0, possible = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	743b      	strb	r3, [r7, #16]
 8002628:	2300      	movs	r3, #0
 800262a:	73fb      	strb	r3, [r7, #15]
	vTaskDelete(task_initHandle);
 800262c:	4b79      	ldr	r3, [pc, #484]	; (8002814 <fonction_affichage+0x228>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f00a fa3d 	bl	800cab0 <vTaskDelete>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 8002636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800263a:	4877      	ldr	r0, [pc, #476]	; (8002818 <fonction_affichage+0x22c>)
 800263c:	f004 fbed 	bl	8006e1a <HAL_GPIO_TogglePin>
	  // Clear que pour certains changements
	  taskENTER_CRITICAL();
 8002640:	f00b faf4 	bl	800dc2c <vPortEnterCritical>
	  if(change == 1)
 8002644:	4b75      	ldr	r3, [pc, #468]	; (800281c <fonction_affichage+0x230>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d102      	bne.n	8002652 <fonction_affichage+0x66>
	  {
		  BSP_LCD_Clear(0);
 800264c:	2000      	movs	r0, #0
 800264e:	f000 fddd 	bl	800320c <BSP_LCD_Clear>
	  }
	  taskEXIT_CRITICAL();
 8002652:	f00b fb1f 	bl	800dc94 <vPortExitCritical>

	  for (i = 0; i < 8; i++)
 8002656:	2300      	movs	r3, #0
 8002658:	77fb      	strb	r3, [r7, #31]
 800265a:	e0c9      	b.n	80027f0 <fonction_affichage+0x204>
	  {
		  for (j = 0; j < 8; j++)
 800265c:	2300      	movs	r3, #0
 800265e:	77bb      	strb	r3, [r7, #30]
 8002660:	e0bf      	b.n	80027e2 <fonction_affichage+0x1f6>
		  {
			  taskENTER_CRITICAL();
 8002662:	f00b fae3 	bl	800dc2c <vPortEnterCritical>
			  filled = chessboard[i][j].isFilled;
 8002666:	7ffa      	ldrb	r2, [r7, #31]
 8002668:	7fbb      	ldrb	r3, [r7, #30]
 800266a:	496d      	ldr	r1, [pc, #436]	; (8002820 <fonction_affichage+0x234>)
 800266c:	00d2      	lsls	r2, r2, #3
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	440b      	add	r3, r1
 8002674:	795b      	ldrb	r3, [r3, #5]
 8002676:	743b      	strb	r3, [r7, #16]
			  possible = chessboard[i][j].isPossible;
 8002678:	7ffa      	ldrb	r2, [r7, #31]
 800267a:	7fbb      	ldrb	r3, [r7, #30]
 800267c:	4968      	ldr	r1, [pc, #416]	; (8002820 <fonction_affichage+0x234>)
 800267e:	00d2      	lsls	r2, r2, #3
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	440b      	add	r3, r1
 8002686:	791b      	ldrb	r3, [r3, #4]
 8002688:	73fb      	strb	r3, [r7, #15]
			  taskEXIT_CRITICAL();
 800268a:	f00b fb03 	bl	800dc94 <vPortExitCritical>
			  // Case avec un pion
			  if ( filled != 0)
 800268e:	7c3b      	ldrb	r3, [r7, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d055      	beq.n	8002740 <fonction_affichage+0x154>
			  {
				  color = chessboard[i][j].piece_color;
 8002694:	7ffa      	ldrb	r2, [r7, #31]
 8002696:	7fbb      	ldrb	r3, [r7, #30]
 8002698:	4961      	ldr	r1, [pc, #388]	; (8002820 <fonction_affichage+0x234>)
 800269a:	00d2      	lsls	r2, r2, #3
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	440b      	add	r3, r1
 80026a2:	799b      	ldrb	r3, [r3, #6]
 80026a4:	747b      	strb	r3, [r7, #17]
				  xSemaphoreTake(mutexEcran, portMAX_DELAY);
 80026a6:	4b5f      	ldr	r3, [pc, #380]	; (8002824 <fonction_affichage+0x238>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f04f 31ff 	mov.w	r1, #4294967295
 80026ae:	4618      	mov	r0, r3
 80026b0:	f009 fe10 	bl	800c2d4 <xQueueSemaphoreTake>
				  if (color == 1) BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80026b4:	7c7b      	ldrb	r3, [r7, #17]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d103      	bne.n	80026c2 <fonction_affichage+0xd6>
 80026ba:	485b      	ldr	r0, [pc, #364]	; (8002828 <fonction_affichage+0x23c>)
 80026bc:	f000 fd5a 	bl	8003174 <BSP_LCD_SetTextColor>
 80026c0:	e006      	b.n	80026d0 <fonction_affichage+0xe4>
				  else if (color == 0) BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80026c2:	7c7b      	ldrb	r3, [r7, #17]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d103      	bne.n	80026d0 <fonction_affichage+0xe4>
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f000 fd52 	bl	8003174 <BSP_LCD_SetTextColor>
			      pointeurX = marge + pas / 2 + j * pas;
 80026d0:	7dbb      	ldrb	r3, [r7, #22]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	b29b      	uxth	r3, r3
 80026dc:	4413      	add	r3, r2
 80026de:	b29a      	uxth	r2, r3
 80026e0:	7fbb      	ldrb	r3, [r7, #30]
 80026e2:	b299      	uxth	r1, r3
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	fb11 f303 	smulbb	r3, r1, r3
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	82bb      	strh	r3, [r7, #20]
			      pointeurY = marge + pas / 2 + i * pas;
 80026f2:	7dbb      	ldrb	r3, [r7, #22]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	085b      	lsrs	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	4413      	add	r3, r2
 8002700:	b29a      	uxth	r2, r3
 8002702:	7ffb      	ldrb	r3, [r7, #31]
 8002704:	b299      	uxth	r1, r3
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	b29b      	uxth	r3, r3
 800270a:	fb11 f303 	smulbb	r3, r1, r3
 800270e:	b29b      	uxth	r3, r3
 8002710:	4413      	add	r3, r2
 8002712:	827b      	strh	r3, [r7, #18]
				  BSP_LCD_FillCircle(pointeurX, pointeurY, chessboard[i][j].rayon);
 8002714:	7ffa      	ldrb	r2, [r7, #31]
 8002716:	7fbb      	ldrb	r3, [r7, #30]
 8002718:	4941      	ldr	r1, [pc, #260]	; (8002820 <fonction_affichage+0x234>)
 800271a:	00d2      	lsls	r2, r2, #3
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	79db      	ldrb	r3, [r3, #7]
 8002724:	b29a      	uxth	r2, r3
 8002726:	8a79      	ldrh	r1, [r7, #18]
 8002728:	8abb      	ldrh	r3, [r7, #20]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 ffd8 	bl	80036e0 <BSP_LCD_FillCircle>
				  xSemaphoreGive(mutexEcran);
 8002730:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <fonction_affichage+0x238>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	2300      	movs	r3, #0
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	f009 fbdf 	bl	800befc <xQueueGenericSend>
 800273e:	e04d      	b.n	80027dc <fonction_affichage+0x1f0>
			  }
			  //Case possible
			  else if (possible != 0)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d04a      	beq.n	80027dc <fonction_affichage+0x1f0>
			  {
				  if (change == 1) // Il y a eu une deselection, reinitialisation des possibles et pas d'affichage
 8002746:	4b35      	ldr	r3, [pc, #212]	; (800281c <fonction_affichage+0x230>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d10d      	bne.n	800276a <fonction_affichage+0x17e>
				  {
					  taskENTER_CRITICAL();
 800274e:	f00b fa6d 	bl	800dc2c <vPortEnterCritical>
					  chessboard[i][j].isPossible = 0;
 8002752:	7ffa      	ldrb	r2, [r7, #31]
 8002754:	7fbb      	ldrb	r3, [r7, #30]
 8002756:	4932      	ldr	r1, [pc, #200]	; (8002820 <fonction_affichage+0x234>)
 8002758:	00d2      	lsls	r2, r2, #3
 800275a:	4413      	add	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	440b      	add	r3, r1
 8002760:	2200      	movs	r2, #0
 8002762:	711a      	strb	r2, [r3, #4]
					  taskEXIT_CRITICAL();
 8002764:	f00b fa96 	bl	800dc94 <vPortExitCritical>
 8002768:	e038      	b.n	80027dc <fonction_affichage+0x1f0>
				  }
				  else
				  {
					  xSemaphoreTake(mutexEcran, portMAX_DELAY);
 800276a:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <fonction_affichage+0x238>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f04f 31ff 	mov.w	r1, #4294967295
 8002772:	4618      	mov	r0, r3
 8002774:	f009 fdae 	bl	800c2d4 <xQueueSemaphoreTake>
					  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002778:	482c      	ldr	r0, [pc, #176]	; (800282c <fonction_affichage+0x240>)
 800277a:	f000 fcfb 	bl	8003174 <BSP_LCD_SetTextColor>
				      pointeurX = marge + pas / 2 + j * pas;
 800277e:	7dbb      	ldrb	r3, [r7, #22]
 8002780:	b29a      	uxth	r2, r3
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	b2db      	uxtb	r3, r3
 8002788:	b29b      	uxth	r3, r3
 800278a:	4413      	add	r3, r2
 800278c:	b29a      	uxth	r2, r3
 800278e:	7fbb      	ldrb	r3, [r7, #30]
 8002790:	b299      	uxth	r1, r3
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	b29b      	uxth	r3, r3
 8002796:	fb11 f303 	smulbb	r3, r1, r3
 800279a:	b29b      	uxth	r3, r3
 800279c:	4413      	add	r3, r2
 800279e:	82bb      	strh	r3, [r7, #20]
				      pointeurY = marge + pas / 2 + i * pas;
 80027a0:	7dbb      	ldrb	r3, [r7, #22]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4413      	add	r3, r2
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	7ffb      	ldrb	r3, [r7, #31]
 80027b2:	b299      	uxth	r1, r3
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	fb11 f303 	smulbb	r3, r1, r3
 80027bc:	b29b      	uxth	r3, r3
 80027be:	4413      	add	r3, r2
 80027c0:	827b      	strh	r3, [r7, #18]
					  BSP_LCD_FillCircle(pointeurX, pointeurY, 9);
 80027c2:	8a79      	ldrh	r1, [r7, #18]
 80027c4:	8abb      	ldrh	r3, [r7, #20]
 80027c6:	2209      	movs	r2, #9
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 ff89 	bl	80036e0 <BSP_LCD_FillCircle>
					  xSemaphoreGive(mutexEcran);
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <fonction_affichage+0x238>)
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	2200      	movs	r2, #0
 80027d6:	2100      	movs	r1, #0
 80027d8:	f009 fb90 	bl	800befc <xQueueGenericSend>
		  for (j = 0; j < 8; j++)
 80027dc:	7fbb      	ldrb	r3, [r7, #30]
 80027de:	3301      	adds	r3, #1
 80027e0:	77bb      	strb	r3, [r7, #30]
 80027e2:	7fbb      	ldrb	r3, [r7, #30]
 80027e4:	2b07      	cmp	r3, #7
 80027e6:	f67f af3c 	bls.w	8002662 <fonction_affichage+0x76>
	  for (i = 0; i < 8; i++)
 80027ea:	7ffb      	ldrb	r3, [r7, #31]
 80027ec:	3301      	adds	r3, #1
 80027ee:	77fb      	strb	r3, [r7, #31]
 80027f0:	7ffb      	ldrb	r3, [r7, #31]
 80027f2:	2b07      	cmp	r3, #7
 80027f4:	f67f af32 	bls.w	800265c <fonction_affichage+0x70>
				  }

			  }
		  }
	  }
	taskENTER_CRITICAL();
 80027f8:	f00b fa18 	bl	800dc2c <vPortEnterCritical>
	change = 0; // S'il y avait des changements, ils on ete pris en compte
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <fonction_affichage+0x230>)
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
	taskEXIT_CRITICAL();
 8002802:	f00b fa47 	bl	800dc94 <vPortExitCritical>

    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 8002806:	f107 0308 	add.w	r3, r7, #8
 800280a:	69b9      	ldr	r1, [r7, #24]
 800280c:	4618      	mov	r0, r3
 800280e:	f00a f9e1 	bl	800cbd4 <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 8002812:	e710      	b.n	8002636 <fonction_affichage+0x4a>
 8002814:	2000802c 	.word	0x2000802c
 8002818:	40021c00 	.word	0x40021c00
 800281c:	20000028 	.word	0x20000028
 8002820:	200080cc 	.word	0x200080cc
 8002824:	2000852c 	.word	0x2000852c
 8002828:	ff0000ff 	.word	0xff0000ff
 800282c:	ffff0000 	.word	0xffff0000

08002830 <fonction_select>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_select */
void fonction_select(void const * argument)
{
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b08b      	sub	sp, #44	; 0x2c
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_select */
	//uint16_t MessageTS[1];
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 8002838:	2364      	movs	r3, #100	; 0x64
 800283a:	623b      	str	r3, [r7, #32]
	static TS_StateTypeDef TS_State;
	//flag = 0;
	uint8_t posx = 0, posy = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	77fb      	strb	r3, [r7, #31]
 8002840:	2300      	movs	r3, #0
 8002842:	77bb      	strb	r3, [r7, #30]
	uint8_t line = 0, col = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	777b      	strb	r3, [r7, #29]
 8002848:	2300      	movs	r3, #0
 800284a:	773b      	strb	r3, [r7, #28]
	const uint8_t pas 			= 30;
 800284c:	231e      	movs	r3, #30
 800284e:	76fb      	strb	r3, [r7, #27]
	const uint8_t marge			= 15;
 8002850:	230f      	movs	r3, #15
 8002852:	76bb      	strb	r3, [r7, #26]
	uint8_t selected 			= 0;
 8002854:	2300      	movs	r3, #0
 8002856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t line_selected		= 8;
 800285a:	2308      	movs	r3, #8
 800285c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t col_selected		= 8;
 8002860:	2308      	movs	r3, #8
 8002862:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint16_t message[1];
  /* Infinite loop */
  for(;;)
  {

	  BSP_TS_GetState(&TS_State);
 8002866:	4886      	ldr	r0, [pc, #536]	; (8002a80 <fonction_select+0x250>)
 8002868:	f001 fba2 	bl	8003fb0 <BSP_TS_GetState>
	  if(TS_State.touchDetected)
 800286c:	4b84      	ldr	r3, [pc, #528]	; (8002a80 <fonction_select+0x250>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80fd 	beq.w	8002a70 <fonction_select+0x240>
	  {
		  posx = TS_State.touchX[0];
 8002876:	4b82      	ldr	r3, [pc, #520]	; (8002a80 <fonction_select+0x250>)
 8002878:	885b      	ldrh	r3, [r3, #2]
 800287a:	77fb      	strb	r3, [r7, #31]
		  posy = TS_State.touchY[0];
 800287c:	4b80      	ldr	r3, [pc, #512]	; (8002a80 <fonction_select+0x250>)
 800287e:	899b      	ldrh	r3, [r3, #12]
 8002880:	77bb      	strb	r3, [r7, #30]

		  col = (posx - marge) / pas;
 8002882:	7ffa      	ldrb	r2, [r7, #31]
 8002884:	7ebb      	ldrb	r3, [r7, #26]
 8002886:	1ad2      	subs	r2, r2, r3
 8002888:	7efb      	ldrb	r3, [r7, #27]
 800288a:	fb92 f3f3 	sdiv	r3, r2, r3
 800288e:	773b      	strb	r3, [r7, #28]
		  line = (posy - marge) / pas;
 8002890:	7fba      	ldrb	r2, [r7, #30]
 8002892:	7ebb      	ldrb	r3, [r7, #26]
 8002894:	1ad2      	subs	r2, r2, r3
 8002896:	7efb      	ldrb	r3, [r7, #27]
 8002898:	fb92 f3f3 	sdiv	r3, r2, r3
 800289c:	777b      	strb	r3, [r7, #29]
		  taskENTER_CRITICAL();
 800289e:	f00b f9c5 	bl	800dc2c <vPortEnterCritical>
		  // Selection d'un pion
		  if(chessboard[line][col].isFilled && (chessboard[line][col].piece_color == isTurn))
 80028a2:	7f7a      	ldrb	r2, [r7, #29]
 80028a4:	7f3b      	ldrb	r3, [r7, #28]
 80028a6:	4977      	ldr	r1, [pc, #476]	; (8002a84 <fonction_select+0x254>)
 80028a8:	00d2      	lsls	r2, r2, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	795b      	ldrb	r3, [r3, #5]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d056      	beq.n	8002964 <fonction_select+0x134>
 80028b6:	7f7a      	ldrb	r2, [r7, #29]
 80028b8:	7f3b      	ldrb	r3, [r7, #28]
 80028ba:	4972      	ldr	r1, [pc, #456]	; (8002a84 <fonction_select+0x254>)
 80028bc:	00d2      	lsls	r2, r2, #3
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	799a      	ldrb	r2, [r3, #6]
 80028c6:	4b70      	ldr	r3, [pc, #448]	; (8002a88 <fonction_select+0x258>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d14a      	bne.n	8002964 <fonction_select+0x134>
		  {
			  // Aucun pion n'etait selectionne
			  if(chessboard[line][col].rayon < 12 && selected == 0)
 80028ce:	7f7a      	ldrb	r2, [r7, #29]
 80028d0:	7f3b      	ldrb	r3, [r7, #28]
 80028d2:	496c      	ldr	r1, [pc, #432]	; (8002a84 <fonction_select+0x254>)
 80028d4:	00d2      	lsls	r2, r2, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	79db      	ldrb	r3, [r3, #7]
 80028de:	2b0b      	cmp	r3, #11
 80028e0:	d827      	bhi.n	8002932 <fonction_select+0x102>
 80028e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d123      	bne.n	8002932 <fonction_select+0x102>
			  {
				  chessboard[line][col].rayon = 12;
 80028ea:	7f7a      	ldrb	r2, [r7, #29]
 80028ec:	7f3b      	ldrb	r3, [r7, #28]
 80028ee:	4965      	ldr	r1, [pc, #404]	; (8002a84 <fonction_select+0x254>)
 80028f0:	00d2      	lsls	r2, r2, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	220c      	movs	r2, #12
 80028fa:	71da      	strb	r2, [r3, #7]
				  selected = 1;
 80028fc:	2301      	movs	r3, #1
 80028fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				  line_selected = line;
 8002902:	7f7b      	ldrb	r3, [r7, #29]
 8002904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				  col_selected = col;
 8002908:	7f3b      	ldrb	r3, [r7, #28]
 800290a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
				  message[0] = (line << 8) + col;
 800290e:	7f7b      	ldrb	r3, [r7, #29]
 8002910:	b29b      	uxth	r3, r3
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	b29a      	uxth	r2, r3
 8002916:	7f3b      	ldrb	r3, [r7, #28]
 8002918:	b29b      	uxth	r3, r3
 800291a:	4413      	add	r3, r2
 800291c:	b29b      	uxth	r3, r3
 800291e:	81bb      	strh	r3, [r7, #12]
				  xQueueSend(queueSelHandle, &message, 0);
 8002920:	4b5a      	ldr	r3, [pc, #360]	; (8002a8c <fonction_select+0x25c>)
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	f107 010c 	add.w	r1, r7, #12
 8002928:	2300      	movs	r3, #0
 800292a:	2200      	movs	r2, #0
 800292c:	f009 fae6 	bl	800befc <xQueueGenericSend>
 8002930:	e018      	b.n	8002964 <fonction_select+0x134>
			  }
			  /// Ce pion etait selectionne
			  else if (chessboard[line][col].rayon == 12)
 8002932:	7f7a      	ldrb	r2, [r7, #29]
 8002934:	7f3b      	ldrb	r3, [r7, #28]
 8002936:	4953      	ldr	r1, [pc, #332]	; (8002a84 <fonction_select+0x254>)
 8002938:	00d2      	lsls	r2, r2, #3
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	440b      	add	r3, r1
 8002940:	79db      	ldrb	r3, [r3, #7]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d10e      	bne.n	8002964 <fonction_select+0x134>
			  {
				  chessboard[line][col].rayon = 9;
 8002946:	7f7a      	ldrb	r2, [r7, #29]
 8002948:	7f3b      	ldrb	r3, [r7, #28]
 800294a:	494e      	ldr	r1, [pc, #312]	; (8002a84 <fonction_select+0x254>)
 800294c:	00d2      	lsls	r2, r2, #3
 800294e:	4413      	add	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	440b      	add	r3, r1
 8002954:	2209      	movs	r2, #9
 8002956:	71da      	strb	r2, [r3, #7]
				  change = 1;
 8002958:	4b4d      	ldr	r3, [pc, #308]	; (8002a90 <fonction_select+0x260>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
				  selected = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  }
		  }

		  // Case pour un deplacement
		  if(chessboard[line][col].isPossible > 0)
 8002964:	7f7a      	ldrb	r2, [r7, #29]
 8002966:	7f3b      	ldrb	r3, [r7, #28]
 8002968:	4946      	ldr	r1, [pc, #280]	; (8002a84 <fonction_select+0x254>)
 800296a:	00d2      	lsls	r2, r2, #3
 800296c:	4413      	add	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	440b      	add	r3, r1
 8002972:	791b      	ldrb	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d079      	beq.n	8002a6c <fonction_select+0x23c>
		  {
			  chessboard[line_selected][col_selected].isFilled = 0;
 8002978:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800297c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002980:	4940      	ldr	r1, [pc, #256]	; (8002a84 <fonction_select+0x254>)
 8002982:	00d2      	lsls	r2, r2, #3
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	2200      	movs	r2, #0
 800298c:	715a      	strb	r2, [r3, #5]

			  for (p = 0; p < 12; p++)
 800298e:	2300      	movs	r3, #0
 8002990:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8002994:	e028      	b.n	80029e8 <fonction_select+0x1b8>
			  {
				  eaten_piece = possible_eaten[chessboard[line][col].isPossible - 1][p];
 8002996:	7f7a      	ldrb	r2, [r7, #29]
 8002998:	7f3b      	ldrb	r3, [r7, #28]
 800299a:	493a      	ldr	r1, [pc, #232]	; (8002a84 <fonction_select+0x254>)
 800299c:	00d2      	lsls	r2, r2, #3
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	791b      	ldrb	r3, [r3, #4]
 80029a6:	1e5a      	subs	r2, r3, #1
 80029a8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80029ac:	4839      	ldr	r0, [pc, #228]	; (8002a94 <fonction_select+0x264>)
 80029ae:	4613      	mov	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	f107 0210 	add.w	r2, r7, #16
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4403      	add	r3, r0
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	6010      	str	r0, [r2, #0]
				  if(eaten_piece.ligne != 8){
 80029c4:	8a3b      	ldrh	r3, [r7, #16]
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d009      	beq.n	80029de <fonction_select+0x1ae>
					  chessboard[eaten_piece.ligne][eaten_piece.colonne].isFilled = 0;
 80029ca:	8a3b      	ldrh	r3, [r7, #16]
 80029cc:	8a7a      	ldrh	r2, [r7, #18]
 80029ce:	4611      	mov	r1, r2
 80029d0:	4a2c      	ldr	r2, [pc, #176]	; (8002a84 <fonction_select+0x254>)
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	2200      	movs	r2, #0
 80029dc:	715a      	strb	r2, [r3, #5]
			  for (p = 0; p < 12; p++)
 80029de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029e2:	3301      	adds	r3, #1
 80029e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80029e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80029ec:	2b0b      	cmp	r3, #11
 80029ee:	d9d2      	bls.n	8002996 <fonction_select+0x166>
				  }
			  }

			  chessboard[line][col].isFilled = 1;
 80029f0:	7f7a      	ldrb	r2, [r7, #29]
 80029f2:	7f3b      	ldrb	r3, [r7, #28]
 80029f4:	4923      	ldr	r1, [pc, #140]	; (8002a84 <fonction_select+0x254>)
 80029f6:	00d2      	lsls	r2, r2, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	440b      	add	r3, r1
 80029fe:	2201      	movs	r2, #1
 8002a00:	715a      	strb	r2, [r3, #5]
			  chessboard[line][col].isPossible = 0;
 8002a02:	7f7a      	ldrb	r2, [r7, #29]
 8002a04:	7f3b      	ldrb	r3, [r7, #28]
 8002a06:	491f      	ldr	r1, [pc, #124]	; (8002a84 <fonction_select+0x254>)
 8002a08:	00d2      	lsls	r2, r2, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	2200      	movs	r2, #0
 8002a12:	711a      	strb	r2, [r3, #4]
			  chessboard[line][col].piece_color = chessboard[line_selected][col_selected].piece_color;
 8002a14:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8002a18:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002a1c:	7f79      	ldrb	r1, [r7, #29]
 8002a1e:	7f3a      	ldrb	r2, [r7, #28]
 8002a20:	4c18      	ldr	r4, [pc, #96]	; (8002a84 <fonction_select+0x254>)
 8002a22:	00c0      	lsls	r0, r0, #3
 8002a24:	4403      	add	r3, r0
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4423      	add	r3, r4
 8002a2a:	799c      	ldrb	r4, [r3, #6]
 8002a2c:	4815      	ldr	r0, [pc, #84]	; (8002a84 <fonction_select+0x254>)
 8002a2e:	00cb      	lsls	r3, r1, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4403      	add	r3, r0
 8002a36:	4622      	mov	r2, r4
 8002a38:	719a      	strb	r2, [r3, #6]
			  chessboard[line][col].rayon = 9;
 8002a3a:	7f7a      	ldrb	r2, [r7, #29]
 8002a3c:	7f3b      	ldrb	r3, [r7, #28]
 8002a3e:	4911      	ldr	r1, [pc, #68]	; (8002a84 <fonction_select+0x254>)
 8002a40:	00d2      	lsls	r2, r2, #3
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	2209      	movs	r2, #9
 8002a4a:	71da      	strb	r2, [r3, #7]
			  selected = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  change = 1;
 8002a52:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <fonction_select+0x260>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	701a      	strb	r2, [r3, #0]

			  // Changement de tour
			  isTurn = (isTurn == 0) ? 1 : 0;
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <fonction_select+0x258>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <fonction_select+0x258>)
 8002a6a:	701a      	strb	r2, [r3, #0]
		  }
		  taskEXIT_CRITICAL();
 8002a6c:	f00b f912 	bl	800dc94 <vPortExitCritical>

	  }

    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	6a39      	ldr	r1, [r7, #32]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f00a f8ac 	bl	800cbd4 <vTaskDelayUntil>
	  BSP_TS_GetState(&TS_State);
 8002a7c:	e6f3      	b.n	8002866 <fonction_select+0x36>
 8002a7e:	bf00      	nop
 8002a80:	2000038c 	.word	0x2000038c
 8002a84:	200080cc 	.word	0x200080cc
 8002a88:	2000038a 	.word	0x2000038a
 8002a8c:	2000807c 	.word	0x2000807c
 8002a90:	20000028 	.word	0x20000028
 8002a94:	20008564 	.word	0x20008564

08002a98 <fonction_calculPossibilites>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_calculPossibilites */
void fonction_calculPossibilites(void const * argument)
{
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b0a9      	sub	sp, #164	; 0xa4
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  // Recuperation information selection
	  xQueueReceive(queueSelHandle, &message, portMAX_DELAY);
 8002aa0:	4b4f      	ldr	r3, [pc, #316]	; (8002be0 <fonction_calculPossibilites+0x148>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	4618      	mov	r0, r3
 8002aae:	f009 fb2b 	bl	800c108 <xQueueReceive>
	  line = (uint8_t) (message[0] >> 8);
 8002ab2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	  col  = (uint8_t)  message[0];
 8002abe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002ac2:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	  taskENTER_CRITICAL();
 8002ac6:	f00b f8b1 	bl	800dc2c <vPortEnterCritical>
	  color = chessboard[line][col].piece_color;
 8002aca:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8002ace:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002ad2:	4944      	ldr	r1, [pc, #272]	; (8002be4 <fonction_calculPossibilites+0x14c>)
 8002ad4:	00d2      	lsls	r2, r2, #3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	799b      	ldrb	r3, [r3, #6]
 8002ade:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	  taskEXIT_CRITICAL();
 8002ae2:	f00b f8d7 	bl	800dc94 <vPortExitCritical>

	  // Calcul des possibilites
	  	  // Reinitialisation des cases possibles
	  for(m = 0; m < 32; m++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002aec:	e02c      	b.n	8002b48 <fonction_calculPossibilites+0xb0>
	  {
		  for(n = 0; n < 12; n++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8002af4:	e01f      	b.n	8002b36 <fonction_calculPossibilites+0x9e>
		  {
			  possible_eaten[m][n].colonne = 8;
 8002af6:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8002afa:	f897 1095 	ldrb.w	r1, [r7, #149]	; 0x95
 8002afe:	483a      	ldr	r0, [pc, #232]	; (8002be8 <fonction_calculPossibilites+0x150>)
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4403      	add	r3, r0
 8002b0e:	2208      	movs	r2, #8
 8002b10:	805a      	strh	r2, [r3, #2]
			  possible_eaten[m][n].ligne   = 8;
 8002b12:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8002b16:	f897 1095 	ldrb.w	r1, [r7, #149]	; 0x95
 8002b1a:	4833      	ldr	r0, [pc, #204]	; (8002be8 <fonction_calculPossibilites+0x150>)
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	2208      	movs	r2, #8
 8002b28:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
		  for(n = 0; n < 12; n++)
 8002b2c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002b30:	3301      	adds	r3, #1
 8002b32:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8002b36:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002b3a:	2b0b      	cmp	r3, #11
 8002b3c:	d9db      	bls.n	8002af6 <fonction_calculPossibilites+0x5e>
	  for(m = 0; m < 32; m++)
 8002b3e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002b42:	3301      	adds	r3, #1
 8002b44:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002b48:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002b4c:	2b1f      	cmp	r3, #31
 8002b4e:	d9ce      	bls.n	8002aee <fonction_calculPossibilites+0x56>
		  }
	  }
	  length = calculPossibilitesRec(line, col, color, possibilites, 0, 0);
 8002b50:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8002b54:	b298      	uxth	r0, r3
 8002b56:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002b5a:	b299      	uxth	r1, r3
 8002b5c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	2400      	movs	r4, #0
 8002b68:	9401      	str	r4, [sp, #4]
 8002b6a:	2400      	movs	r4, #0
 8002b6c:	9400      	str	r4, [sp, #0]
 8002b6e:	f7fd fff1 	bl	8000b54 <calculPossibilitesRec>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	  // Modification de l'echiquier avec cases possibles
	  taskENTER_CRITICAL();
 8002b78:	f00b f858 	bl	800dc2c <vPortEnterCritical>
	  for(i = 0; i < length; i++)
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002b82:	e021      	b.n	8002bc8 <fonction_calculPossibilites+0x130>
	  {
		  chessboard[possibilites[i].ligne][possibilites[i].colonne].isPossible = i + 1;
 8002b84:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002b8e:	4413      	add	r3, r2
 8002b90:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8002b94:	461c      	mov	r4, r3
 8002b96:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f833 3c8a 	ldrh.w	r3, [r3, #-138]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002bac:	3301      	adds	r3, #1
 8002bae:	b2d9      	uxtb	r1, r3
 8002bb0:	4a0c      	ldr	r2, [pc, #48]	; (8002be4 <fonction_calculPossibilites+0x14c>)
 8002bb2:	00e3      	lsls	r3, r4, #3
 8002bb4:	4403      	add	r3, r0
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	460a      	mov	r2, r1
 8002bbc:	711a      	strb	r2, [r3, #4]
	  for(i = 0; i < length; i++)
 8002bbe:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002bc8:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8002bcc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3d7      	bcc.n	8002b84 <fonction_calculPossibilites+0xec>
	  }
	  taskEXIT_CRITICAL();
 8002bd4:	f00b f85e 	bl	800dc94 <vPortExitCritical>
      osDelay(1);
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f008 ff1e 	bl	800ba1a <osDelay>
	  xQueueReceive(queueSelHandle, &message, portMAX_DELAY);
 8002bde:	e75f      	b.n	8002aa0 <fonction_calculPossibilites+0x8>
 8002be0:	2000807c 	.word	0x2000807c
 8002be4:	200080cc 	.word	0x200080cc
 8002be8:	20008564 	.word	0x20008564

08002bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bfe:	f002 fae7 	bl	80051d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40001000 	.word	0x40001000

08002c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c14:	b672      	cpsid	i
}
 8002c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <Error_Handler+0x8>
	...

08002c1c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08c      	sub	sp, #48	; 0x30
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a51      	ldr	r2, [pc, #324]	; (8002d6c <I2Cx_MspInit+0x150>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d14d      	bne.n	8002cc8 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002c2c:	4b50      	ldr	r3, [pc, #320]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	4a4f      	ldr	r2, [pc, #316]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c36:	6313      	str	r3, [r2, #48]	; 0x30
 8002c38:	4b4d      	ldr	r3, [pc, #308]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002c48:	2312      	movs	r3, #18
 8002c4a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002c50:	2302      	movs	r3, #2
 8002c52:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002c54:	2304      	movs	r3, #4
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c58:	f107 031c 	add.w	r3, r7, #28
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4845      	ldr	r0, [pc, #276]	; (8002d74 <I2Cx_MspInit+0x158>)
 8002c60:	f003 fe0a 	bl	8006878 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002c6a:	f107 031c 	add.w	r3, r7, #28
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4840      	ldr	r0, [pc, #256]	; (8002d74 <I2Cx_MspInit+0x158>)
 8002c72:	f003 fe01 	bl	8006878 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002c76:	4b3e      	ldr	r3, [pc, #248]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	4a3d      	ldr	r2, [pc, #244]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002c7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c80:	6413      	str	r3, [r2, #64]	; 0x40
 8002c82:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002c8e:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4a37      	ldr	r2, [pc, #220]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002c94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c98:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002c9a:	4b35      	ldr	r3, [pc, #212]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4a34      	ldr	r2, [pc, #208]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002ca0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ca4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	210f      	movs	r1, #15
 8002caa:	2048      	movs	r0, #72	; 0x48
 8002cac:	f002 feee 	bl	8005a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002cb0:	2048      	movs	r0, #72	; 0x48
 8002cb2:	f002 ff07 	bl	8005ac4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	210f      	movs	r1, #15
 8002cba:	2049      	movs	r0, #73	; 0x49
 8002cbc:	f002 fee6 	bl	8005a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002cc0:	2049      	movs	r0, #73	; 0x49
 8002cc2:	f002 feff 	bl	8005ac4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002cc6:	e04d      	b.n	8002d64 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002cc8:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4a28      	ldr	r2, [pc, #160]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002cce:	f043 0302 	orr.w	r3, r3, #2
 8002cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd4:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002ce6:	2312      	movs	r3, #18
 8002ce8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002cf6:	f107 031c 	add.w	r3, r7, #28
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	481e      	ldr	r0, [pc, #120]	; (8002d78 <I2Cx_MspInit+0x15c>)
 8002cfe:	f003 fdbb 	bl	8006878 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002d08:	f107 031c 	add.w	r3, r7, #28
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	481a      	ldr	r0, [pc, #104]	; (8002d78 <I2Cx_MspInit+0x15c>)
 8002d10:	f003 fdb2 	bl	8006878 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002d14:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	4a15      	ldr	r2, [pc, #84]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002d1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002d2c:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	4a0f      	ldr	r2, [pc, #60]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d36:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002d38:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	4a0c      	ldr	r2, [pc, #48]	; (8002d70 <I2Cx_MspInit+0x154>)
 8002d3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d42:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002d44:	2200      	movs	r2, #0
 8002d46:	210f      	movs	r1, #15
 8002d48:	201f      	movs	r0, #31
 8002d4a:	f002 fe9f 	bl	8005a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002d4e:	201f      	movs	r0, #31
 8002d50:	f002 feb8 	bl	8005ac4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002d54:	2200      	movs	r2, #0
 8002d56:	210f      	movs	r1, #15
 8002d58:	2020      	movs	r0, #32
 8002d5a:	f002 fe97 	bl	8005a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002d5e:	2020      	movs	r0, #32
 8002d60:	f002 feb0 	bl	8005ac4 <HAL_NVIC_EnableIRQ>
}
 8002d64:	bf00      	nop
 8002d66:	3730      	adds	r7, #48	; 0x30
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	200003b8 	.word	0x200003b8
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40021c00 	.word	0x40021c00
 8002d78:	40020400 	.word	0x40020400

08002d7c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f004 fb69 	bl	800745c <HAL_I2C_GetState>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d125      	bne.n	8002ddc <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <I2Cx_Init+0x68>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d103      	bne.n	8002da0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <I2Cx_Init+0x6c>)
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e002      	b.n	8002da6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a12      	ldr	r2, [pc, #72]	; (8002dec <I2Cx_Init+0x70>)
 8002da4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a11      	ldr	r2, [pc, #68]	; (8002df0 <I2Cx_Init+0x74>)
 8002daa:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff23 	bl	8002c1c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f004 f852 	bl	8006e80 <HAL_I2C_Init>
  }
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	200003b8 	.word	0x200003b8
 8002de8:	40005c00 	.word	0x40005c00
 8002dec:	40005400 	.word	0x40005400
 8002df0:	40912732 	.word	0x40912732

08002df4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af04      	add	r7, sp, #16
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	4608      	mov	r0, r1
 8002dfe:	4611      	mov	r1, r2
 8002e00:	461a      	mov	r2, r3
 8002e02:	4603      	mov	r3, r0
 8002e04:	72fb      	strb	r3, [r7, #11]
 8002e06:	460b      	mov	r3, r1
 8002e08:	813b      	strh	r3, [r7, #8]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002e12:	7afb      	ldrb	r3, [r7, #11]
 8002e14:	b299      	uxth	r1, r3
 8002e16:	88f8      	ldrh	r0, [r7, #6]
 8002e18:	893a      	ldrh	r2, [r7, #8]
 8002e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e1e:	9302      	str	r3, [sp, #8]
 8002e20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	4603      	mov	r3, r0
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f004 f9fc 	bl	8007228 <HAL_I2C_Mem_Read>
 8002e30:	4603      	mov	r3, r0
 8002e32:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d004      	beq.n	8002e44 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002e3a:	7afb      	ldrb	r3, [r7, #11]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f832 	bl	8002ea8 <I2Cx_Error>
  }
  return status;    
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b08a      	sub	sp, #40	; 0x28
 8002e52:	af04      	add	r7, sp, #16
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	4608      	mov	r0, r1
 8002e58:	4611      	mov	r1, r2
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	72fb      	strb	r3, [r7, #11]
 8002e60:	460b      	mov	r3, r1
 8002e62:	813b      	strh	r3, [r7, #8]
 8002e64:	4613      	mov	r3, r2
 8002e66:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002e6c:	7afb      	ldrb	r3, [r7, #11]
 8002e6e:	b299      	uxth	r1, r3
 8002e70:	88f8      	ldrh	r0, [r7, #6]
 8002e72:	893a      	ldrh	r2, [r7, #8]
 8002e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e78:	9302      	str	r3, [sp, #8]
 8002e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	4603      	mov	r3, r0
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f004 f8bb 	bl	8007000 <HAL_I2C_Mem_Write>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d004      	beq.n	8002e9e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002e94:	7afb      	ldrb	r3, [r7, #11]
 8002e96:	4619      	mov	r1, r3
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 f805 	bl	8002ea8 <I2Cx_Error>
  }
  return status;
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f004 f873 	bl	8006fa0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ff5e 	bl	8002d7c <I2Cx_Init>
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002ecc:	4802      	ldr	r0, [pc, #8]	; (8002ed8 <TS_IO_Init+0x10>)
 8002ece:	f7ff ff55 	bl	8002d7c <I2Cx_Init>
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200003b8 	.word	0x200003b8

08002edc <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	71bb      	strb	r3, [r7, #6]
 8002eea:	4613      	mov	r3, r2
 8002eec:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002eee:	79bb      	ldrb	r3, [r7, #6]
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	79f9      	ldrb	r1, [r7, #7]
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	1d7b      	adds	r3, r7, #5
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2301      	movs	r3, #1
 8002efe:	4803      	ldr	r0, [pc, #12]	; (8002f0c <TS_IO_Write+0x30>)
 8002f00:	f7ff ffa5 	bl	8002e4e <I2Cx_WriteMultiple>
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	200003b8 	.word	0x200003b8

08002f10 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	4603      	mov	r3, r0
 8002f18:	460a      	mov	r2, r1
 8002f1a:	71fb      	strb	r3, [r7, #7]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002f24:	79bb      	ldrb	r3, [r7, #6]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	79f9      	ldrb	r1, [r7, #7]
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	f107 030f 	add.w	r3, r7, #15
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2301      	movs	r3, #1
 8002f36:	4804      	ldr	r0, [pc, #16]	; (8002f48 <TS_IO_Read+0x38>)
 8002f38:	f7ff ff5c 	bl	8002df4 <I2Cx_ReadMultiple>

  return read_value;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200003b8 	.word	0x200003b8

08002f4c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f002 f95b 	bl	8005210 <HAL_Delay>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002f68:	4b31      	ldr	r3, [pc, #196]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002f6a:	2228      	movs	r2, #40	; 0x28
 8002f6c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002f6e:	4b30      	ldr	r3, [pc, #192]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002f70:	2209      	movs	r2, #9
 8002f72:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002f74:	4b2e      	ldr	r3, [pc, #184]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002f76:	2235      	movs	r2, #53	; 0x35
 8002f78:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002f7a:	4b2d      	ldr	r3, [pc, #180]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002f7c:	220b      	movs	r2, #11
 8002f7e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002f80:	4b2b      	ldr	r3, [pc, #172]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002f82:	f240 121b 	movw	r2, #283	; 0x11b
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002f88:	4b29      	ldr	r3, [pc, #164]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002f8a:	f240 2215 	movw	r2, #533	; 0x215
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002f90:	4b27      	ldr	r3, [pc, #156]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002f92:	f240 121d 	movw	r2, #285	; 0x11d
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002f98:	4b25      	ldr	r3, [pc, #148]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002f9a:	f240 2235 	movw	r2, #565	; 0x235
 8002f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4823      	ldr	r0, [pc, #140]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002fa4:	f000 fd34 	bl	8003a10 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002fa8:	4b21      	ldr	r3, [pc, #132]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002faa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002fae:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002fb0:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002fb2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002fb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002fb8:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002fd0:	4b17      	ldr	r3, [pc, #92]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002fd6:	4b16      	ldr	r3, [pc, #88]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002fdc:	4b14      	ldr	r3, [pc, #80]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002fe8:	4b11      	ldr	r3, [pc, #68]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002fea:	4a12      	ldr	r2, [pc, #72]	; (8003034 <BSP_LCD_Init+0xd0>)
 8002fec:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002fee:	4810      	ldr	r0, [pc, #64]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002ff0:	f004 ff50 	bl	8007e94 <HAL_LTDC_GetState>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d103      	bne.n	8003002 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	480c      	ldr	r0, [pc, #48]	; (8003030 <BSP_LCD_Init+0xcc>)
 8002ffe:	f000 fc2d 	bl	800385c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003002:	480b      	ldr	r0, [pc, #44]	; (8003030 <BSP_LCD_Init+0xcc>)
 8003004:	f004 fd76 	bl	8007af4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003008:	2201      	movs	r2, #1
 800300a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800300e:	480a      	ldr	r0, [pc, #40]	; (8003038 <BSP_LCD_Init+0xd4>)
 8003010:	f003 feea 	bl	8006de8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003014:	2201      	movs	r2, #1
 8003016:	2108      	movs	r1, #8
 8003018:	4808      	ldr	r0, [pc, #32]	; (800303c <BSP_LCD_Init+0xd8>)
 800301a:	f003 fee5 	bl	8006de8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800301e:	f000 fda3 	bl	8003b68 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003022:	4807      	ldr	r0, [pc, #28]	; (8003040 <BSP_LCD_Init+0xdc>)
 8003024:	f000 f8d8 	bl	80031d8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20008cf4 	.word	0x20008cf4
 8003034:	40016800 	.word	0x40016800
 8003038:	40022000 	.word	0x40022000
 800303c:	40022800 	.word	0x40022800
 8003040:	2000002c 	.word	0x2000002c

08003044 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <BSP_LCD_GetXSize+0x20>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a06      	ldr	r2, [pc, #24]	; (8003068 <BSP_LCD_GetXSize+0x24>)
 800304e:	2134      	movs	r1, #52	; 0x34
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	4413      	add	r3, r2
 8003056:	3360      	adds	r3, #96	; 0x60
 8003058:	681b      	ldr	r3, [r3, #0]
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	20000444 	.word	0x20000444
 8003068:	20008cf4 	.word	0x20008cf4

0800306c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <BSP_LCD_GetYSize+0x20>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a06      	ldr	r2, [pc, #24]	; (8003090 <BSP_LCD_GetYSize+0x24>)
 8003076:	2134      	movs	r1, #52	; 0x34
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3364      	adds	r3, #100	; 0x64
 8003080:	681b      	ldr	r3, [r3, #0]
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	20000444 	.word	0x20000444
 8003090:	20008cf4 	.word	0x20008cf4

08003094 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003094:	b580      	push	{r7, lr}
 8003096:	b090      	sub	sp, #64	; 0x40
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80030a4:	f7ff ffce 	bl	8003044 <BSP_LCD_GetXSize>
 80030a8:	4603      	mov	r3, r0
 80030aa:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80030b0:	f7ff ffdc 	bl	800306c <BSP_LCD_GetYSize>
 80030b4:	4603      	mov	r3, r0
 80030b6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80030c0:	23ff      	movs	r3, #255	; 0xff
 80030c2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80030da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80030e0:	2307      	movs	r3, #7
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80030e4:	f7ff ffae 	bl	8003044 <BSP_LCD_GetXSize>
 80030e8:	4603      	mov	r3, r0
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80030ec:	f7ff ffbe 	bl	800306c <BSP_LCD_GetYSize>
 80030f0:	4603      	mov	r3, r0
 80030f2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	f107 030c 	add.w	r3, r7, #12
 80030fa:	4619      	mov	r1, r3
 80030fc:	4812      	ldr	r0, [pc, #72]	; (8003148 <BSP_LCD_LayerDefaultInit+0xb4>)
 80030fe:	f004 fe8b 	bl	8007e18 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003102:	88fa      	ldrh	r2, [r7, #6]
 8003104:	4911      	ldr	r1, [pc, #68]	; (800314c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	3304      	adds	r3, #4
 8003112:	f04f 32ff 	mov.w	r2, #4294967295
 8003116:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003118:	88fa      	ldrh	r2, [r7, #6]
 800311a:	490c      	ldr	r1, [pc, #48]	; (800314c <BSP_LCD_LayerDefaultInit+0xb8>)
 800311c:	4613      	mov	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	3308      	adds	r3, #8
 8003128:	4a09      	ldr	r2, [pc, #36]	; (8003150 <BSP_LCD_LayerDefaultInit+0xbc>)
 800312a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800312c:	88fa      	ldrh	r2, [r7, #6]
 800312e:	4907      	ldr	r1, [pc, #28]	; (800314c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800313e:	601a      	str	r2, [r3, #0]
}
 8003140:	bf00      	nop
 8003142:	3740      	adds	r7, #64	; 0x40
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20008cf4 	.word	0x20008cf4
 800314c:	20000448 	.word	0x20000448
 8003150:	2000002c 	.word	0x2000002c

08003154 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <BSP_LCD_SelectLayer+0x1c>)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6013      	str	r3, [r2, #0]
} 
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000444 	.word	0x20000444

08003174 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800317c:	4b07      	ldr	r3, [pc, #28]	; (800319c <BSP_LCD_SetTextColor+0x28>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4907      	ldr	r1, [pc, #28]	; (80031a0 <BSP_LCD_SetTextColor+0x2c>)
 8003182:	4613      	mov	r3, r2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	601a      	str	r2, [r3, #0]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	20000444 	.word	0x20000444
 80031a0:	20000448 	.word	0x20000448

080031a4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <BSP_LCD_SetBackColor+0x2c>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4908      	ldr	r1, [pc, #32]	; (80031d4 <BSP_LCD_SetBackColor+0x30>)
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	3304      	adds	r3, #4
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	601a      	str	r2, [r3, #0]
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000444 	.word	0x20000444
 80031d4:	20000448 	.word	0x20000448

080031d8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80031e0:	4b08      	ldr	r3, [pc, #32]	; (8003204 <BSP_LCD_SetFont+0x2c>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4908      	ldr	r1, [pc, #32]	; (8003208 <BSP_LCD_SetFont+0x30>)
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3308      	adds	r3, #8
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	601a      	str	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000444 	.word	0x20000444
 8003208:	20000448 	.word	0x20000448

0800320c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320e:	b085      	sub	sp, #20
 8003210:	af02      	add	r7, sp, #8
 8003212:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <BSP_LCD_Clear+0x48>)
 8003216:	681c      	ldr	r4, [r3, #0]
 8003218:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <BSP_LCD_Clear+0x48>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <BSP_LCD_Clear+0x4c>)
 800321e:	2134      	movs	r1, #52	; 0x34
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	335c      	adds	r3, #92	; 0x5c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	461e      	mov	r6, r3
 800322c:	f7ff ff0a 	bl	8003044 <BSP_LCD_GetXSize>
 8003230:	4605      	mov	r5, r0
 8003232:	f7ff ff1b 	bl	800306c <BSP_LCD_GetYSize>
 8003236:	4602      	mov	r2, r0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	9301      	str	r3, [sp, #4]
 800323c:	2300      	movs	r3, #0
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	462a      	mov	r2, r5
 8003244:	4631      	mov	r1, r6
 8003246:	4620      	mov	r0, r4
 8003248:	f000 fbfe 	bl	8003a48 <LL_FillBuffer>
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003254:	20000444 	.word	0x20000444
 8003258:	20008cf4 	.word	0x20008cf4

0800325c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800325c:	b5b0      	push	{r4, r5, r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	4603      	mov	r3, r0
 8003264:	80fb      	strh	r3, [r7, #6]
 8003266:	460b      	mov	r3, r1
 8003268:	80bb      	strh	r3, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003272:	4b26      	ldr	r3, [pc, #152]	; (800330c <BSP_LCD_DrawHLine+0xb0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a26      	ldr	r2, [pc, #152]	; (8003310 <BSP_LCD_DrawHLine+0xb4>)
 8003278:	2134      	movs	r1, #52	; 0x34
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	3348      	adds	r3, #72	; 0x48
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d114      	bne.n	80032b2 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <BSP_LCD_DrawHLine+0xb0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a20      	ldr	r2, [pc, #128]	; (8003310 <BSP_LCD_DrawHLine+0xb4>)
 800328e:	2134      	movs	r1, #52	; 0x34
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	4413      	add	r3, r2
 8003296:	335c      	adds	r3, #92	; 0x5c
 8003298:	681c      	ldr	r4, [r3, #0]
 800329a:	f7ff fed3 	bl	8003044 <BSP_LCD_GetXSize>
 800329e:	4602      	mov	r2, r0
 80032a0:	88bb      	ldrh	r3, [r7, #4]
 80032a2:	fb03 f202 	mul.w	r2, r3, r2
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	4413      	add	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4423      	add	r3, r4
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	e013      	b.n	80032da <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80032b2:	4b16      	ldr	r3, [pc, #88]	; (800330c <BSP_LCD_DrawHLine+0xb0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a16      	ldr	r2, [pc, #88]	; (8003310 <BSP_LCD_DrawHLine+0xb4>)
 80032b8:	2134      	movs	r1, #52	; 0x34
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	335c      	adds	r3, #92	; 0x5c
 80032c2:	681c      	ldr	r4, [r3, #0]
 80032c4:	f7ff febe 	bl	8003044 <BSP_LCD_GetXSize>
 80032c8:	4602      	mov	r2, r0
 80032ca:	88bb      	ldrh	r3, [r7, #4]
 80032cc:	fb03 f202 	mul.w	r2, r3, r2
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4423      	add	r3, r4
 80032d8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <BSP_LCD_DrawHLine+0xb0>)
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	68f9      	ldr	r1, [r7, #12]
 80032e0:	887c      	ldrh	r4, [r7, #2]
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <BSP_LCD_DrawHLine+0xb0>)
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4d0b      	ldr	r5, [pc, #44]	; (8003314 <BSP_LCD_DrawHLine+0xb8>)
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	442b      	add	r3, r5
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	2300      	movs	r3, #0
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	2301      	movs	r3, #1
 80032fc:	4622      	mov	r2, r4
 80032fe:	f000 fba3 	bl	8003a48 <LL_FillBuffer>
}
 8003302:	bf00      	nop
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bdb0      	pop	{r4, r5, r7, pc}
 800330a:	bf00      	nop
 800330c:	20000444 	.word	0x20000444
 8003310:	20008cf4 	.word	0x20008cf4
 8003314:	20000448 	.word	0x20000448

08003318 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	80fb      	strh	r3, [r7, #6]
 8003322:	460b      	mov	r3, r1
 8003324:	80bb      	strh	r3, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800332a:	887b      	ldrh	r3, [r7, #2]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	f1c3 0303 	rsb	r3, r3, #3
 8003332:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003338:	887b      	ldrh	r3, [r7, #2]
 800333a:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 800333c:	e0c7      	b.n	80034ce <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	b29a      	uxth	r2, r3
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	4413      	add	r3, r2
 8003346:	b298      	uxth	r0, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	b29b      	uxth	r3, r3
 800334c:	88ba      	ldrh	r2, [r7, #4]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	b299      	uxth	r1, r3
 8003352:	4b64      	ldr	r3, [pc, #400]	; (80034e4 <BSP_LCD_DrawCircle+0x1cc>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4c64      	ldr	r4, [pc, #400]	; (80034e8 <BSP_LCD_DrawCircle+0x1d0>)
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4423      	add	r3, r4
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	f000 f8c1 	bl	80034ec <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	b29b      	uxth	r3, r3
 800336e:	88fa      	ldrh	r2, [r7, #6]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	b298      	uxth	r0, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	b29b      	uxth	r3, r3
 8003378:	88ba      	ldrh	r2, [r7, #4]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	b299      	uxth	r1, r3
 800337e:	4b59      	ldr	r3, [pc, #356]	; (80034e4 <BSP_LCD_DrawCircle+0x1cc>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4c59      	ldr	r4, [pc, #356]	; (80034e8 <BSP_LCD_DrawCircle+0x1d0>)
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4423      	add	r3, r4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	f000 f8ab 	bl	80034ec <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	b29a      	uxth	r2, r3
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	4413      	add	r3, r2
 800339e:	b298      	uxth	r0, r3
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	88ba      	ldrh	r2, [r7, #4]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	b299      	uxth	r1, r3
 80033aa:	4b4e      	ldr	r3, [pc, #312]	; (80034e4 <BSP_LCD_DrawCircle+0x1cc>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4c4e      	ldr	r4, [pc, #312]	; (80034e8 <BSP_LCD_DrawCircle+0x1d0>)
 80033b0:	4613      	mov	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4423      	add	r3, r4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	f000 f895 	bl	80034ec <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	88fa      	ldrh	r2, [r7, #6]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	b298      	uxth	r0, r3
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	88ba      	ldrh	r2, [r7, #4]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	b299      	uxth	r1, r3
 80033d6:	4b43      	ldr	r3, [pc, #268]	; (80034e4 <BSP_LCD_DrawCircle+0x1cc>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	4c43      	ldr	r4, [pc, #268]	; (80034e8 <BSP_LCD_DrawCircle+0x1d0>)
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4423      	add	r3, r4
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	f000 f87f 	bl	80034ec <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	4413      	add	r3, r2
 80033f6:	b298      	uxth	r0, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	88bb      	ldrh	r3, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	b299      	uxth	r1, r3
 8003402:	4b38      	ldr	r3, [pc, #224]	; (80034e4 <BSP_LCD_DrawCircle+0x1cc>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4c38      	ldr	r4, [pc, #224]	; (80034e8 <BSP_LCD_DrawCircle+0x1d0>)
 8003408:	4613      	mov	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4423      	add	r3, r4
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	f000 f869 	bl	80034ec <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	b29b      	uxth	r3, r3
 800341e:	88fa      	ldrh	r2, [r7, #6]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	b298      	uxth	r0, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	b29a      	uxth	r2, r3
 8003428:	88bb      	ldrh	r3, [r7, #4]
 800342a:	4413      	add	r3, r2
 800342c:	b299      	uxth	r1, r3
 800342e:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <BSP_LCD_DrawCircle+0x1cc>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4c2d      	ldr	r4, [pc, #180]	; (80034e8 <BSP_LCD_DrawCircle+0x1d0>)
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4423      	add	r3, r4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	f000 f853 	bl	80034ec <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	b29a      	uxth	r2, r3
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	4413      	add	r3, r2
 800344e:	b298      	uxth	r0, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	b29a      	uxth	r2, r3
 8003454:	88bb      	ldrh	r3, [r7, #4]
 8003456:	4413      	add	r3, r2
 8003458:	b299      	uxth	r1, r3
 800345a:	4b22      	ldr	r3, [pc, #136]	; (80034e4 <BSP_LCD_DrawCircle+0x1cc>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4c22      	ldr	r4, [pc, #136]	; (80034e8 <BSP_LCD_DrawCircle+0x1d0>)
 8003460:	4613      	mov	r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4423      	add	r3, r4
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	f000 f83d 	bl	80034ec <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	b29b      	uxth	r3, r3
 8003476:	88fa      	ldrh	r2, [r7, #6]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	b298      	uxth	r0, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	b29a      	uxth	r2, r3
 8003480:	88bb      	ldrh	r3, [r7, #4]
 8003482:	4413      	add	r3, r2
 8003484:	b299      	uxth	r1, r3
 8003486:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <BSP_LCD_DrawCircle+0x1cc>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4c17      	ldr	r4, [pc, #92]	; (80034e8 <BSP_LCD_DrawCircle+0x1d0>)
 800348c:	4613      	mov	r3, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4423      	add	r3, r4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	f000 f827 	bl	80034ec <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da06      	bge.n	80034b2 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	009a      	lsls	r2, r3, #2
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	4413      	add	r3, r2
 80034ac:	3306      	adds	r3, #6
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	e00a      	b.n	80034c8 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	009a      	lsls	r2, r3, #2
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	4413      	add	r3, r2
 80034be:	330a      	adds	r3, #10
 80034c0:	617b      	str	r3, [r7, #20]
      current_y--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	3301      	adds	r3, #1
 80034cc:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	f67f af33 	bls.w	800333e <BSP_LCD_DrawCircle+0x26>
  } 
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd90      	pop	{r4, r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000444 	.word	0x20000444
 80034e8:	20000448 	.word	0x20000448

080034ec <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80034ec:	b5b0      	push	{r4, r5, r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	603a      	str	r2, [r7, #0]
 80034f6:	80fb      	strh	r3, [r7, #6]
 80034f8:	460b      	mov	r3, r1
 80034fa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80034fc:	4b1d      	ldr	r3, [pc, #116]	; (8003574 <BSP_LCD_DrawPixel+0x88>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1d      	ldr	r2, [pc, #116]	; (8003578 <BSP_LCD_DrawPixel+0x8c>)
 8003502:	2134      	movs	r1, #52	; 0x34
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	4413      	add	r3, r2
 800350a:	3348      	adds	r3, #72	; 0x48
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d116      	bne.n	8003540 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003512:	4b18      	ldr	r3, [pc, #96]	; (8003574 <BSP_LCD_DrawPixel+0x88>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a18      	ldr	r2, [pc, #96]	; (8003578 <BSP_LCD_DrawPixel+0x8c>)
 8003518:	2134      	movs	r1, #52	; 0x34
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	335c      	adds	r3, #92	; 0x5c
 8003522:	681c      	ldr	r4, [r3, #0]
 8003524:	88bd      	ldrh	r5, [r7, #4]
 8003526:	f7ff fd8d 	bl	8003044 <BSP_LCD_GetXSize>
 800352a:	4603      	mov	r3, r0
 800352c:	fb03 f205 	mul.w	r2, r3, r5
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	4413      	add	r3, r2
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	4423      	add	r3, r4
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	b292      	uxth	r2, r2
 800353c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800353e:	e015      	b.n	800356c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <BSP_LCD_DrawPixel+0x88>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a0c      	ldr	r2, [pc, #48]	; (8003578 <BSP_LCD_DrawPixel+0x8c>)
 8003546:	2134      	movs	r1, #52	; 0x34
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	335c      	adds	r3, #92	; 0x5c
 8003550:	681c      	ldr	r4, [r3, #0]
 8003552:	88bd      	ldrh	r5, [r7, #4]
 8003554:	f7ff fd76 	bl	8003044 <BSP_LCD_GetXSize>
 8003558:	4603      	mov	r3, r0
 800355a:	fb03 f205 	mul.w	r2, r3, r5
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4423      	add	r3, r4
 8003566:	461a      	mov	r2, r3
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	6013      	str	r3, [r2, #0]
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bdb0      	pop	{r4, r5, r7, pc}
 8003574:	20000444 	.word	0x20000444
 8003578:	20008cf4 	.word	0x20008cf4

0800357c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b08b      	sub	sp, #44	; 0x2c
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
 800358c:	2300      	movs	r3, #0
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	330a      	adds	r3, #10
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	330b      	adds	r3, #11
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	441a      	add	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	330c      	adds	r3, #12
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	441a      	add	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	330d      	adds	r3, #13
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	061b      	lsls	r3, r3, #24
 80035c0:	4413      	add	r3, r2
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3312      	adds	r3, #18
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3313      	adds	r3, #19
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	441a      	add	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3314      	adds	r3, #20
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	041b      	lsls	r3, r3, #16
 80035de:	441a      	add	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3315      	adds	r3, #21
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	061b      	lsls	r3, r3, #24
 80035e8:	4413      	add	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3316      	adds	r3, #22
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3317      	adds	r3, #23
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	441a      	add	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3318      	adds	r3, #24
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	041b      	lsls	r3, r3, #16
 8003606:	441a      	add	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3319      	adds	r3, #25
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	061b      	lsls	r3, r3, #24
 8003610:	4413      	add	r3, r2
 8003612:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	331c      	adds	r3, #28
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	331d      	adds	r3, #29
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	4413      	add	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003628:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <BSP_LCD_DrawBitmap+0x15c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a2b      	ldr	r2, [pc, #172]	; (80036dc <BSP_LCD_DrawBitmap+0x160>)
 800362e:	2134      	movs	r1, #52	; 0x34
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	4413      	add	r3, r2
 8003636:	335c      	adds	r3, #92	; 0x5c
 8003638:	681c      	ldr	r4, [r3, #0]
 800363a:	f7ff fd03 	bl	8003044 <BSP_LCD_GetXSize>
 800363e:	4602      	mov	r2, r0
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	fb03 f202 	mul.w	r2, r3, r2
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4423      	add	r3, r4
 800364e:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	3b20      	subs	r3, #32
 8003654:	2b07      	cmp	r3, #7
 8003656:	d802      	bhi.n	800365e <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	e008      	b.n	8003670 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3b10      	subs	r3, #16
 8003662:	2b07      	cmp	r3, #7
 8003664:	d802      	bhi.n	800366c <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8003666:	2302      	movs	r3, #2
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	e001      	b.n	8003670 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 800366c:	2301      	movs	r3, #1
 800366e:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	3b01      	subs	r3, #1
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	08d2      	lsrs	r2, r2, #3
 800367e:	fb02 f203 	mul.w	r2, r2, r3
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	4413      	add	r3, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	4413      	add	r3, r2
 800368a:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 800368c:	2300      	movs	r3, #0
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
 8003690:	e018      	b.n	80036c4 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003692:	6a39      	ldr	r1, [r7, #32]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fa21 	bl	8003ae0 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 800369e:	f7ff fcd1 	bl	8003044 <BSP_LCD_GetXSize>
 80036a2:	4603      	mov	r3, r0
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	6a3a      	ldr	r2, [r7, #32]
 80036a8:	4413      	add	r3, r2
 80036aa:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	08db      	lsrs	r3, r3, #3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	425b      	negs	r3, r3
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	4413      	add	r3, r2
 80036bc:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	3301      	adds	r3, #1
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
 80036c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d3e2      	bcc.n	8003692 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	372c      	adds	r7, #44	; 0x2c
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd90      	pop	{r4, r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000444 	.word	0x20000444
 80036dc:	20008cf4 	.word	0x20008cf4

080036e0 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	80fb      	strh	r3, [r7, #6]
 80036ea:	460b      	mov	r3, r1
 80036ec:	80bb      	strh	r3, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	f1c3 0303 	rsb	r3, r3, #3
 80036fa:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003700:	887b      	ldrh	r3, [r7, #2]
 8003702:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003704:	4b44      	ldr	r3, [pc, #272]	; (8003818 <BSP_LCD_FillCircle+0x138>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	4944      	ldr	r1, [pc, #272]	; (800381c <BSP_LCD_FillCircle+0x13c>)
 800370a:	4613      	mov	r3, r2
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fd2c 	bl	8003174 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 800371c:	e061      	b.n	80037e2 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d021      	beq.n	8003768 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	b29b      	uxth	r3, r3
 8003728:	88fa      	ldrh	r2, [r7, #6]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	b298      	uxth	r0, r3
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	b29a      	uxth	r2, r3
 8003732:	88bb      	ldrh	r3, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	b299      	uxth	r1, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	b29b      	uxth	r3, r3
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	b29b      	uxth	r3, r3
 8003740:	461a      	mov	r2, r3
 8003742:	f7ff fd8b 	bl	800325c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	b29b      	uxth	r3, r3
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	b298      	uxth	r0, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	b29b      	uxth	r3, r3
 8003754:	88ba      	ldrh	r2, [r7, #4]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	b299      	uxth	r1, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	b29b      	uxth	r3, r3
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	b29b      	uxth	r3, r3
 8003762:	461a      	mov	r2, r3
 8003764:	f7ff fd7a 	bl	800325c <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d021      	beq.n	80037b2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	b29b      	uxth	r3, r3
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	b298      	uxth	r0, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	b29b      	uxth	r3, r3
 800377c:	88ba      	ldrh	r2, [r7, #4]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	b299      	uxth	r1, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	b29b      	uxth	r3, r3
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	b29b      	uxth	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	f7ff fd66 	bl	800325c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	b29b      	uxth	r3, r3
 8003794:	88fa      	ldrh	r2, [r7, #6]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	b298      	uxth	r0, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	b29a      	uxth	r2, r3
 800379e:	88bb      	ldrh	r3, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	b299      	uxth	r1, r3
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	f7ff fd55 	bl	800325c <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	da06      	bge.n	80037c6 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	009a      	lsls	r2, r3, #2
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	4413      	add	r3, r2
 80037c0:	3306      	adds	r3, #6
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	e00a      	b.n	80037dc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	009a      	lsls	r2, r3, #2
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	4413      	add	r3, r2
 80037d2:	330a      	adds	r3, #10
 80037d4:	617b      	str	r3, [r7, #20]
      current_y--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3b01      	subs	r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	3301      	adds	r3, #1
 80037e0:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d999      	bls.n	800371e <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <BSP_LCD_FillCircle+0x138>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	490b      	ldr	r1, [pc, #44]	; (800381c <BSP_LCD_FillCircle+0x13c>)
 80037f0:	4613      	mov	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7ff fcb9 	bl	8003174 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	88b9      	ldrh	r1, [r7, #4]
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fd85 	bl	8003318 <BSP_LCD_DrawCircle>
}
 800380e:	bf00      	nop
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	20000444 	.word	0x20000444
 800381c:	20000448 	.word	0x20000448

08003820 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <BSP_LCD_DisplayOn+0x30>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	4b09      	ldr	r3, [pc, #36]	; (8003850 <BSP_LCD_DisplayOn+0x30>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003834:	2201      	movs	r2, #1
 8003836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800383a:	4806      	ldr	r0, [pc, #24]	; (8003854 <BSP_LCD_DisplayOn+0x34>)
 800383c:	f003 fad4 	bl	8006de8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003840:	2201      	movs	r2, #1
 8003842:	2108      	movs	r1, #8
 8003844:	4804      	ldr	r0, [pc, #16]	; (8003858 <BSP_LCD_DisplayOn+0x38>)
 8003846:	f003 facf 	bl	8006de8 <HAL_GPIO_WritePin>
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20008cf4 	.word	0x20008cf4
 8003854:	40022000 	.word	0x40022000
 8003858:	40022800 	.word	0x40022800

0800385c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b090      	sub	sp, #64	; 0x40
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003866:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	4a63      	ldr	r2, [pc, #396]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 800386c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003870:	6453      	str	r3, [r2, #68]	; 0x44
 8003872:	4b61      	ldr	r3, [pc, #388]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
 800387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800387e:	4b5e      	ldr	r3, [pc, #376]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	4a5d      	ldr	r2, [pc, #372]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 8003884:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003888:	6313      	str	r3, [r2, #48]	; 0x30
 800388a:	4b5b      	ldr	r3, [pc, #364]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003896:	4b58      	ldr	r3, [pc, #352]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	4a57      	ldr	r2, [pc, #348]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 800389c:	f043 0310 	orr.w	r3, r3, #16
 80038a0:	6313      	str	r3, [r2, #48]	; 0x30
 80038a2:	4b55      	ldr	r3, [pc, #340]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	623b      	str	r3, [r7, #32]
 80038ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80038ae:	4b52      	ldr	r3, [pc, #328]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4a51      	ldr	r2, [pc, #324]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 80038b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ba:	4b4f      	ldr	r3, [pc, #316]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80038c6:	4b4c      	ldr	r3, [pc, #304]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	4a4b      	ldr	r2, [pc, #300]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 80038cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d0:	6313      	str	r3, [r2, #48]	; 0x30
 80038d2:	4b49      	ldr	r3, [pc, #292]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	61bb      	str	r3, [r7, #24]
 80038dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80038de:	4b46      	ldr	r3, [pc, #280]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4a45      	ldr	r2, [pc, #276]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 80038e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ea:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80038f6:	4b40      	ldr	r3, [pc, #256]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4a3f      	ldr	r2, [pc, #252]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 80038fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003900:	6313      	str	r3, [r2, #48]	; 0x30
 8003902:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800390e:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	4a39      	ldr	r2, [pc, #228]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003918:	6313      	str	r3, [r2, #48]	; 0x30
 800391a:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	4a33      	ldr	r2, [pc, #204]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 800392c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003930:	6313      	str	r3, [r2, #48]	; 0x30
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <BSP_LCD_MspInit+0x19c>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800393e:	2310      	movs	r3, #16
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003942:	2302      	movs	r3, #2
 8003944:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800394a:	2302      	movs	r3, #2
 800394c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800394e:	230e      	movs	r3, #14
 8003950:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003956:	4619      	mov	r1, r3
 8003958:	4828      	ldr	r0, [pc, #160]	; (80039fc <BSP_LCD_MspInit+0x1a0>)
 800395a:	f002 ff8d 	bl	8006878 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800395e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003964:	2302      	movs	r3, #2
 8003966:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003968:	2309      	movs	r3, #9
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800396c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003970:	4619      	mov	r1, r3
 8003972:	4823      	ldr	r0, [pc, #140]	; (8003a00 <BSP_LCD_MspInit+0x1a4>)
 8003974:	f002 ff80 	bl	8006878 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003978:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800397c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800397e:	2302      	movs	r3, #2
 8003980:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003982:	230e      	movs	r3, #14
 8003984:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800398a:	4619      	mov	r1, r3
 800398c:	481d      	ldr	r0, [pc, #116]	; (8003a04 <BSP_LCD_MspInit+0x1a8>)
 800398e:	f002 ff73 	bl	8006878 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003992:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003996:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800399c:	230e      	movs	r3, #14
 800399e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80039a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039a4:	4619      	mov	r1, r3
 80039a6:	4818      	ldr	r0, [pc, #96]	; (8003a08 <BSP_LCD_MspInit+0x1ac>)
 80039a8:	f002 ff66 	bl	8006878 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80039ac:	23f7      	movs	r3, #247	; 0xf7
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80039b4:	230e      	movs	r3, #14
 80039b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80039b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039bc:	4619      	mov	r1, r3
 80039be:	4813      	ldr	r0, [pc, #76]	; (8003a0c <BSP_LCD_MspInit+0x1b0>)
 80039c0:	f002 ff5a 	bl	8006878 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80039c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80039ca:	2301      	movs	r3, #1
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80039ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039d2:	4619      	mov	r1, r3
 80039d4:	480b      	ldr	r0, [pc, #44]	; (8003a04 <BSP_LCD_MspInit+0x1a8>)
 80039d6:	f002 ff4f 	bl	8006878 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80039da:	2308      	movs	r3, #8
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80039de:	2301      	movs	r3, #1
 80039e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80039e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e6:	4619      	mov	r1, r3
 80039e8:	4808      	ldr	r0, [pc, #32]	; (8003a0c <BSP_LCD_MspInit+0x1b0>)
 80039ea:	f002 ff45 	bl	8006878 <HAL_GPIO_Init>
}
 80039ee:	bf00      	nop
 80039f0:	3740      	adds	r7, #64	; 0x40
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40021800 	.word	0x40021800
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40022400 	.word	0x40022400
 8003a0c:	40022800 	.word	0x40022800

08003a10 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <BSP_LCD_ClockConfig+0x34>)
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003a20:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <BSP_LCD_ClockConfig+0x34>)
 8003a22:	22c0      	movs	r2, #192	; 0xc0
 8003a24:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <BSP_LCD_ClockConfig+0x34>)
 8003a28:	2205      	movs	r2, #5
 8003a2a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003a2c:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <BSP_LCD_ClockConfig+0x34>)
 8003a2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a32:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003a34:	4803      	ldr	r0, [pc, #12]	; (8003a44 <BSP_LCD_ClockConfig+0x34>)
 8003a36:	f005 f8e1 	bl	8008bfc <HAL_RCCEx_PeriphCLKConfig>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000460 	.word	0x20000460

08003a48 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003a56:	4b1e      	ldr	r3, [pc, #120]	; (8003ad0 <LL_FillBuffer+0x88>)
 8003a58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a5c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <LL_FillBuffer+0x8c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <LL_FillBuffer+0x90>)
 8003a64:	2134      	movs	r1, #52	; 0x34
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3348      	adds	r3, #72	; 0x48
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d103      	bne.n	8003a7c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003a74:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <LL_FillBuffer+0x88>)
 8003a76:	2202      	movs	r2, #2
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	e002      	b.n	8003a82 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003a7c:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <LL_FillBuffer+0x88>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003a82:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <LL_FillBuffer+0x88>)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003a88:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <LL_FillBuffer+0x88>)
 8003a8a:	4a14      	ldr	r2, [pc, #80]	; (8003adc <LL_FillBuffer+0x94>)
 8003a8c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003a8e:	4810      	ldr	r0, [pc, #64]	; (8003ad0 <LL_FillBuffer+0x88>)
 8003a90:	f002 fb56 	bl	8006140 <HAL_DMA2D_Init>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d115      	bne.n	8003ac6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003a9a:	68f9      	ldr	r1, [r7, #12]
 8003a9c:	480c      	ldr	r0, [pc, #48]	; (8003ad0 <LL_FillBuffer+0x88>)
 8003a9e:	f002 fdbd 	bl	800661c <HAL_DMA2D_ConfigLayer>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10e      	bne.n	8003ac6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69f9      	ldr	r1, [r7, #28]
 8003ab2:	4807      	ldr	r0, [pc, #28]	; (8003ad0 <LL_FillBuffer+0x88>)
 8003ab4:	f002 fb8e 	bl	80061d4 <HAL_DMA2D_Start>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003abe:	210a      	movs	r1, #10
 8003ac0:	4803      	ldr	r0, [pc, #12]	; (8003ad0 <LL_FillBuffer+0x88>)
 8003ac2:	f002 fbb2 	bl	800622a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000404 	.word	0x20000404
 8003ad4:	20000444 	.word	0x20000444
 8003ad8:	20008cf4 	.word	0x20008cf4
 8003adc:	4002b000 	.word	0x4002b000

08003ae0 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8003aee:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <LL_ConvertLineToARGB8888+0x80>)
 8003af0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003af4:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003af6:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <LL_ConvertLineToARGB8888+0x80>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8003afc:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <LL_ConvertLineToARGB8888+0x80>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003b02:	4b17      	ldr	r3, [pc, #92]	; (8003b60 <LL_ConvertLineToARGB8888+0x80>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003b08:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <LL_ConvertLineToARGB8888+0x80>)
 8003b0a:	22ff      	movs	r2, #255	; 0xff
 8003b0c:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003b0e:	4a14      	ldr	r2, [pc, #80]	; (8003b60 <LL_ConvertLineToARGB8888+0x80>)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8003b14:	4b12      	ldr	r3, [pc, #72]	; (8003b60 <LL_ConvertLineToARGB8888+0x80>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8003b1a:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <LL_ConvertLineToARGB8888+0x80>)
 8003b1c:	4a11      	ldr	r2, [pc, #68]	; (8003b64 <LL_ConvertLineToARGB8888+0x84>)
 8003b1e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003b20:	480f      	ldr	r0, [pc, #60]	; (8003b60 <LL_ConvertLineToARGB8888+0x80>)
 8003b22:	f002 fb0d 	bl	8006140 <HAL_DMA2D_Init>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d115      	bne.n	8003b58 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	480c      	ldr	r0, [pc, #48]	; (8003b60 <LL_ConvertLineToARGB8888+0x80>)
 8003b30:	f002 fd74 	bl	800661c <HAL_DMA2D_ConfigLayer>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10e      	bne.n	8003b58 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003b3a:	68f9      	ldr	r1, [r7, #12]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	2301      	movs	r3, #1
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4806      	ldr	r0, [pc, #24]	; (8003b60 <LL_ConvertLineToARGB8888+0x80>)
 8003b46:	f002 fb45 	bl	80061d4 <HAL_DMA2D_Start>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d103      	bne.n	8003b58 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003b50:	210a      	movs	r1, #10
 8003b52:	4803      	ldr	r0, [pc, #12]	; (8003b60 <LL_ConvertLineToARGB8888+0x80>)
 8003b54:	f002 fb69 	bl	800622a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000404 	.word	0x20000404
 8003b64:	4002b000 	.word	0x4002b000

08003b68 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003b6c:	4b29      	ldr	r3, [pc, #164]	; (8003c14 <BSP_SDRAM_Init+0xac>)
 8003b6e:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <BSP_SDRAM_Init+0xb0>)
 8003b70:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003b72:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <BSP_SDRAM_Init+0xb4>)
 8003b74:	2202      	movs	r2, #2
 8003b76:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003b78:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <BSP_SDRAM_Init+0xb4>)
 8003b7a:	2207      	movs	r2, #7
 8003b7c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003b7e:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <BSP_SDRAM_Init+0xb4>)
 8003b80:	2204      	movs	r2, #4
 8003b82:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003b84:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <BSP_SDRAM_Init+0xb4>)
 8003b86:	2207      	movs	r2, #7
 8003b88:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003b8a:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <BSP_SDRAM_Init+0xb4>)
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003b90:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <BSP_SDRAM_Init+0xb4>)
 8003b92:	2202      	movs	r2, #2
 8003b94:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003b96:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <BSP_SDRAM_Init+0xb4>)
 8003b98:	2202      	movs	r2, #2
 8003b9a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <BSP_SDRAM_Init+0xac>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <BSP_SDRAM_Init+0xac>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003ba8:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <BSP_SDRAM_Init+0xac>)
 8003baa:	2204      	movs	r2, #4
 8003bac:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003bae:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <BSP_SDRAM_Init+0xac>)
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003bb4:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <BSP_SDRAM_Init+0xac>)
 8003bb6:	2240      	movs	r2, #64	; 0x40
 8003bb8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003bba:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <BSP_SDRAM_Init+0xac>)
 8003bbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bc0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <BSP_SDRAM_Init+0xac>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003bc8:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <BSP_SDRAM_Init+0xac>)
 8003bca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bce:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <BSP_SDRAM_Init+0xac>)
 8003bd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <BSP_SDRAM_Init+0xac>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003bde:	2100      	movs	r1, #0
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <BSP_SDRAM_Init+0xac>)
 8003be2:	f000 f87f 	bl	8003ce4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003be6:	490d      	ldr	r1, [pc, #52]	; (8003c1c <BSP_SDRAM_Init+0xb4>)
 8003be8:	480a      	ldr	r0, [pc, #40]	; (8003c14 <BSP_SDRAM_Init+0xac>)
 8003bea:	f005 ffcf 	bl	8009b8c <HAL_SDRAM_Init>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <BSP_SDRAM_Init+0xb8>)
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	e002      	b.n	8003c02 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003bfc:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <BSP_SDRAM_Init+0xb8>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003c02:	f240 6003 	movw	r0, #1539	; 0x603
 8003c06:	f000 f80d 	bl	8003c24 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003c0a:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <BSP_SDRAM_Init+0xb8>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20008d9c 	.word	0x20008d9c
 8003c18:	a0000140 	.word	0xa0000140
 8003c1c:	200004e4 	.word	0x200004e4
 8003c20:	2000003c 	.word	0x2000003c

08003c24 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003c30:	4b2a      	ldr	r3, [pc, #168]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c32:	2201      	movs	r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c36:	4b29      	ldr	r3, [pc, #164]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c38:	2210      	movs	r2, #16
 8003c3a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003c3c:	4b27      	ldr	r3, [pc, #156]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c42:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003c48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c4c:	4923      	ldr	r1, [pc, #140]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c4e:	4824      	ldr	r0, [pc, #144]	; (8003ce0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c50:	f005 ffd0 	bl	8009bf4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003c54:	2001      	movs	r0, #1
 8003c56:	f001 fadb 	bl	8005210 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003c5a:	4b20      	ldr	r3, [pc, #128]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c60:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c62:	2210      	movs	r2, #16
 8003c64:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003c66:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c76:	4919      	ldr	r1, [pc, #100]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c78:	4819      	ldr	r0, [pc, #100]	; (8003ce0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c7a:	f005 ffbb 	bl	8009bf4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003c7e:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c80:	2203      	movs	r2, #3
 8003c82:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c84:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c86:	2210      	movs	r2, #16
 8003c88:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003c8a:	4b14      	ldr	r3, [pc, #80]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c9a:	4910      	ldr	r1, [pc, #64]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c9c:	4810      	ldr	r0, [pc, #64]	; (8003ce0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c9e:	f005 ffa9 	bl	8009bf4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003ca2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003ca6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003caa:	2204      	movs	r2, #4
 8003cac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003cb4:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4a07      	ldr	r2, [pc, #28]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cbe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cc4:	4905      	ldr	r1, [pc, #20]	; (8003cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cc6:	4806      	ldr	r0, [pc, #24]	; (8003ce0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003cc8:	f005 ff94 	bl	8009bf4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4804      	ldr	r0, [pc, #16]	; (8003ce0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003cd0:	f005 ffc5 	bl	8009c5e <HAL_SDRAM_ProgramRefreshRate>
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000500 	.word	0x20000500
 8003ce0:	20008d9c 	.word	0x20008d9c

08003ce4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b090      	sub	sp, #64	; 0x40
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003cee:	4b70      	ldr	r3, [pc, #448]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	4a6f      	ldr	r2, [pc, #444]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	6393      	str	r3, [r2, #56]	; 0x38
 8003cfa:	4b6d      	ldr	r3, [pc, #436]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003d06:	4b6a      	ldr	r3, [pc, #424]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	4a69      	ldr	r2, [pc, #420]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d10:	6313      	str	r3, [r2, #48]	; 0x30
 8003d12:	4b67      	ldr	r3, [pc, #412]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d1e:	4b64      	ldr	r3, [pc, #400]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4a63      	ldr	r2, [pc, #396]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d24:	f043 0304 	orr.w	r3, r3, #4
 8003d28:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2a:	4b61      	ldr	r3, [pc, #388]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	623b      	str	r3, [r7, #32]
 8003d34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d36:	4b5e      	ldr	r3, [pc, #376]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	4a5d      	ldr	r2, [pc, #372]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d3c:	f043 0308 	orr.w	r3, r3, #8
 8003d40:	6313      	str	r3, [r2, #48]	; 0x30
 8003d42:	4b5b      	ldr	r3, [pc, #364]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	61fb      	str	r3, [r7, #28]
 8003d4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d4e:	4b58      	ldr	r3, [pc, #352]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	4a57      	ldr	r2, [pc, #348]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d54:	f043 0310 	orr.w	r3, r3, #16
 8003d58:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5a:	4b55      	ldr	r3, [pc, #340]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d66:	4b52      	ldr	r3, [pc, #328]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a51      	ldr	r2, [pc, #324]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d6c:	f043 0320 	orr.w	r3, r3, #32
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b4f      	ldr	r3, [pc, #316]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d7e:	4b4c      	ldr	r3, [pc, #304]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a4b      	ldr	r2, [pc, #300]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b49      	ldr	r3, [pc, #292]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d96:	4b46      	ldr	r3, [pc, #280]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4a45      	ldr	r2, [pc, #276]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da0:	6313      	str	r3, [r2, #48]	; 0x30
 8003da2:	4b43      	ldr	r3, [pc, #268]	; (8003eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003dae:	2302      	movs	r3, #2
 8003db0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003db2:	2301      	movs	r3, #1
 8003db4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003db6:	2302      	movs	r3, #2
 8003db8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003dba:	230c      	movs	r3, #12
 8003dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	483a      	ldr	r0, [pc, #232]	; (8003eb4 <BSP_SDRAM_MspInit+0x1d0>)
 8003dca:	f002 fd55 	bl	8006878 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003dce:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003dd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4837      	ldr	r0, [pc, #220]	; (8003eb8 <BSP_SDRAM_MspInit+0x1d4>)
 8003ddc:	f002 fd4c 	bl	8006878 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003de0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003de4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dea:	4619      	mov	r1, r3
 8003dec:	4833      	ldr	r0, [pc, #204]	; (8003ebc <BSP_SDRAM_MspInit+0x1d8>)
 8003dee:	f002 fd43 	bl	8006878 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003df2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003df6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4830      	ldr	r0, [pc, #192]	; (8003ec0 <BSP_SDRAM_MspInit+0x1dc>)
 8003e00:	f002 fd3a 	bl	8006878 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003e04:	f248 1333 	movw	r3, #33075	; 0x8133
 8003e08:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e0e:	4619      	mov	r1, r3
 8003e10:	482c      	ldr	r0, [pc, #176]	; (8003ec4 <BSP_SDRAM_MspInit+0x1e0>)
 8003e12:	f002 fd31 	bl	8006878 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003e16:	2328      	movs	r3, #40	; 0x28
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4829      	ldr	r0, [pc, #164]	; (8003ec8 <BSP_SDRAM_MspInit+0x1e4>)
 8003e22:	f002 fd29 	bl	8006878 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003e26:	4b29      	ldr	r3, [pc, #164]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003e2c:	4b27      	ldr	r3, [pc, #156]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e2e:	2280      	movs	r2, #128	; 0x80
 8003e30:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003e32:	4b26      	ldr	r3, [pc, #152]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e38:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003e3a:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e40:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e42:	4b22      	ldr	r3, [pc, #136]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e48:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003e4a:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e50:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003e52:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003e58:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e5e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003e60:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003e66:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e68:	2203      	movs	r2, #3
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003e6c:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003e72:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003e78:	4b14      	ldr	r3, [pc, #80]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <BSP_SDRAM_MspInit+0x1ec>)
 8003e7c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
 8003e84:	4a11      	ldr	r2, [pc, #68]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003e8a:	4810      	ldr	r0, [pc, #64]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e8c:	f001 ffb6 	bl	8005dfc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003e90:	480e      	ldr	r0, [pc, #56]	; (8003ecc <BSP_SDRAM_MspInit+0x1e8>)
 8003e92:	f001 ff05 	bl	8005ca0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003e96:	2200      	movs	r2, #0
 8003e98:	210f      	movs	r1, #15
 8003e9a:	2038      	movs	r0, #56	; 0x38
 8003e9c:	f001 fdf6 	bl	8005a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003ea0:	2038      	movs	r0, #56	; 0x38
 8003ea2:	f001 fe0f 	bl	8005ac4 <HAL_NVIC_EnableIRQ>
}
 8003ea6:	bf00      	nop
 8003ea8:	3740      	adds	r7, #64	; 0x40
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40020800 	.word	0x40020800
 8003eb8:	40020c00 	.word	0x40020c00
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	40021400 	.word	0x40021400
 8003ec4:	40021800 	.word	0x40021800
 8003ec8:	40021c00 	.word	0x40021c00
 8003ecc:	20000510 	.word	0x20000510
 8003ed0:	40026410 	.word	0x40026410

08003ed4 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	460a      	mov	r2, r1
 8003ede:	80fb      	strh	r3, [r7, #6]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003ee8:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <BSP_TS_Init+0x68>)
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003eee:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <BSP_TS_Init+0x6c>)
 8003ef0:	88bb      	ldrh	r3, [r7, #4]
 8003ef2:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003ef4:	4b13      	ldr	r3, [pc, #76]	; (8003f44 <BSP_TS_Init+0x70>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2070      	movs	r0, #112	; 0x70
 8003efa:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003efc:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <BSP_TS_Init+0x70>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2070      	movs	r0, #112	; 0x70
 8003f02:	4798      	blx	r3
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b51      	cmp	r3, #81	; 0x51
 8003f08:	d111      	bne.n	8003f2e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <BSP_TS_Init+0x74>)
 8003f0c:	4a0d      	ldr	r2, [pc, #52]	; (8003f44 <BSP_TS_Init+0x70>)
 8003f0e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003f10:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <BSP_TS_Init+0x78>)
 8003f12:	2270      	movs	r2, #112	; 0x70
 8003f14:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003f16:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <BSP_TS_Init+0x7c>)
 8003f18:	2208      	movs	r2, #8
 8003f1a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <BSP_TS_Init+0x74>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	4a0a      	ldr	r2, [pc, #40]	; (8003f4c <BSP_TS_Init+0x78>)
 8003f24:	7812      	ldrb	r2, [r2, #0]
 8003f26:	b292      	uxth	r2, r2
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4798      	blx	r3
 8003f2c:	e001      	b.n	8003f32 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20000574 	.word	0x20000574
 8003f40:	20000576 	.word	0x20000576
 8003f44:	20000000 	.word	0x20000000
 8003f48:	20000570 	.word	0x20000570
 8003f4c:	20000579 	.word	0x20000579
 8003f50:	20000578 	.word	0x20000578

08003f54 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Configure Interrupt mode for SD detection pin */
  gpio_init_structure.Pin = TS_INT_PIN;
 8003f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f5e:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003f64:	2302      	movs	r3, #2
 8003f66:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003f68:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003f6c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8003f6e:	1d3b      	adds	r3, r7, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	480c      	ldr	r0, [pc, #48]	; (8003fa4 <BSP_TS_ITConfig+0x50>)
 8003f74:	f002 fc80 	bl	8006878 <HAL_GPIO_Init>

  /* Enable and set Touch screen EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	210f      	movs	r1, #15
 8003f7c:	2028      	movs	r0, #40	; 0x28
 8003f7e:	f001 fd85 	bl	8005a8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8003f82:	2028      	movs	r0, #40	; 0x28
 8003f84:	f001 fd9e 	bl	8005ac4 <HAL_NVIC_EnableIRQ>

  /* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <BSP_TS_ITConfig+0x54>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	4a07      	ldr	r2, [pc, #28]	; (8003fac <BSP_TS_ITConfig+0x58>)
 8003f90:	7812      	ldrb	r2, [r2, #0]
 8003f92:	b292      	uxth	r2, r2
 8003f94:	4610      	mov	r0, r2
 8003f96:	4798      	blx	r3

  return TS_OK;  
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	20000570 	.word	0x20000570
 8003fac:	20000579 	.word	0x20000579

08003fb0 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b097      	sub	sp, #92	; 0x5c
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003fca:	4b97      	ldr	r3, [pc, #604]	; (8004228 <BSP_TS_GetState+0x278>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	4a96      	ldr	r2, [pc, #600]	; (800422c <BSP_TS_GetState+0x27c>)
 8003fd2:	7812      	ldrb	r2, [r2, #0]
 8003fd4:	b292      	uxth	r2, r2
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4798      	blx	r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 81a8 	beq.w	800433c <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003fec:	2300      	movs	r3, #0
 8003fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff0:	e197      	b.n	8004322 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003ff2:	4b8d      	ldr	r3, [pc, #564]	; (8004228 <BSP_TS_GetState+0x278>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	4a8c      	ldr	r2, [pc, #560]	; (800422c <BSP_TS_GetState+0x27c>)
 8003ffa:	7812      	ldrb	r2, [r2, #0]
 8003ffc:	b290      	uxth	r0, r2
 8003ffe:	f107 0120 	add.w	r1, r7, #32
 8004002:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004004:	0052      	lsls	r2, r2, #1
 8004006:	188c      	adds	r4, r1, r2
 8004008:	f107 0114 	add.w	r1, r7, #20
 800400c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800400e:	0052      	lsls	r2, r2, #1
 8004010:	440a      	add	r2, r1
 8004012:	4621      	mov	r1, r4
 8004014:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004016:	4b86      	ldr	r3, [pc, #536]	; (8004230 <BSP_TS_GetState+0x280>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d11b      	bne.n	8004056 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800401e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004026:	4413      	add	r3, r2
 8004028:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800402c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004034:	440b      	add	r3, r1
 8004036:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800403a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004042:	4413      	add	r3, r2
 8004044:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004050:	440b      	add	r3, r1
 8004052:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004056:	4b76      	ldr	r3, [pc, #472]	; (8004230 <BSP_TS_GetState+0x280>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d010      	beq.n	8004084 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8004062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800406a:	4413      	add	r3, r2
 800406c:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004070:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004074:	b29a      	uxth	r2, r3
 8004076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800407e:	440b      	add	r3, r1
 8004080:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004084:	4b6a      	ldr	r3, [pc, #424]	; (8004230 <BSP_TS_GetState+0x280>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d010      	beq.n	80040b2 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8004090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004098:	4413      	add	r3, r2
 800409a:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800409e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80040ac:	440b      	add	r3, r1
 80040ae:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80040b2:	4b5f      	ldr	r3, [pc, #380]	; (8004230 <BSP_TS_GetState+0x280>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01b      	beq.n	80040f6 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 80040be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80040c6:	4413      	add	r3, r2
 80040c8:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80040cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80040d4:	440b      	add	r3, r1
 80040d6:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80040da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80040e2:	4413      	add	r3, r2
 80040e4:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80040e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80040f0:	440b      	add	r3, r1
 80040f2:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80040f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80040fe:	4413      	add	r3, r2
 8004100:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004104:	4619      	mov	r1, r3
 8004106:	4a4b      	ldr	r2, [pc, #300]	; (8004234 <BSP_TS_GetState+0x284>)
 8004108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800410a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410e:	4299      	cmp	r1, r3
 8004110:	d90e      	bls.n	8004130 <BSP_TS_GetState+0x180>
 8004112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800411a:	4413      	add	r3, r2
 800411c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004120:	4944      	ldr	r1, [pc, #272]	; (8004234 <BSP_TS_GetState+0x284>)
 8004122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004124:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004128:	b29b      	uxth	r3, r3
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	b29b      	uxth	r3, r3
 800412e:	e00d      	b.n	800414c <BSP_TS_GetState+0x19c>
 8004130:	4a40      	ldr	r2, [pc, #256]	; (8004234 <BSP_TS_GetState+0x284>)
 8004132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004138:	b29a      	uxth	r2, r3
 800413a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004142:	440b      	add	r3, r1
 8004144:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	b29b      	uxth	r3, r3
 800414c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004158:	4413      	add	r3, r2
 800415a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800415e:	4619      	mov	r1, r3
 8004160:	4a35      	ldr	r2, [pc, #212]	; (8004238 <BSP_TS_GetState+0x288>)
 8004162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004168:	4299      	cmp	r1, r3
 800416a:	d90e      	bls.n	800418a <BSP_TS_GetState+0x1da>
 800416c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004174:	4413      	add	r3, r2
 8004176:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800417a:	492f      	ldr	r1, [pc, #188]	; (8004238 <BSP_TS_GetState+0x288>)
 800417c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800417e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004182:	b29b      	uxth	r3, r3
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	b29b      	uxth	r3, r3
 8004188:	e00d      	b.n	80041a6 <BSP_TS_GetState+0x1f6>
 800418a:	4a2b      	ldr	r2, [pc, #172]	; (8004238 <BSP_TS_GetState+0x288>)
 800418c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800418e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004192:	b29a      	uxth	r2, r3
 8004194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800419c:	440b      	add	r3, r1
 800419e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80041aa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80041ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80041b2:	4413      	add	r3, r2
 80041b4:	2b05      	cmp	r3, #5
 80041b6:	dd17      	ble.n	80041e8 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 80041b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80041c0:	4413      	add	r3, r2
 80041c2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80041c6:	4619      	mov	r1, r3
 80041c8:	4a1a      	ldr	r2, [pc, #104]	; (8004234 <BSP_TS_GetState+0x284>)
 80041ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80041d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80041d8:	4413      	add	r3, r2
 80041da:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80041de:	4619      	mov	r1, r3
 80041e0:	4a15      	ldr	r2, [pc, #84]	; (8004238 <BSP_TS_GetState+0x288>)
 80041e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80041e8:	4b10      	ldr	r3, [pc, #64]	; (800422c <BSP_TS_GetState+0x27c>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b70      	cmp	r3, #112	; 0x70
 80041ee:	d125      	bne.n	800423c <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80041f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80041f8:	4413      	add	r3, r2
 80041fa:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4413      	add	r3, r2
 8004206:	460a      	mov	r2, r1
 8004208:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800420a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004212:	4413      	add	r3, r2
 8004214:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800421c:	3304      	adds	r3, #4
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	4413      	add	r3, r2
 8004222:	460a      	mov	r2, r1
 8004224:	809a      	strh	r2, [r3, #4]
 8004226:	e02c      	b.n	8004282 <BSP_TS_GetState+0x2d2>
 8004228:	20000570 	.word	0x20000570
 800422c:	20000579 	.word	0x20000579
 8004230:	20000578 	.word	0x20000578
 8004234:	2000057c 	.word	0x2000057c
 8004238:	20000590 	.word	0x20000590
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800423c:	4b42      	ldr	r3, [pc, #264]	; (8004348 <BSP_TS_GetState+0x398>)
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	4619      	mov	r1, r3
 8004242:	4a42      	ldr	r2, [pc, #264]	; (800434c <BSP_TS_GetState+0x39c>)
 8004244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800424a:	fb03 f301 	mul.w	r3, r3, r1
 800424e:	0b1b      	lsrs	r3, r3, #12
 8004250:	b299      	uxth	r1, r3
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	4413      	add	r3, r2
 800425a:	460a      	mov	r2, r1
 800425c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800425e:	4b3c      	ldr	r3, [pc, #240]	; (8004350 <BSP_TS_GetState+0x3a0>)
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	4619      	mov	r1, r3
 8004264:	4a3b      	ldr	r2, [pc, #236]	; (8004354 <BSP_TS_GetState+0x3a4>)
 8004266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800426c:	fb03 f301 	mul.w	r3, r3, r1
 8004270:	0b1b      	lsrs	r3, r3, #12
 8004272:	b299      	uxth	r1, r3
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004278:	3304      	adds	r3, #4
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4413      	add	r3, r2
 800427e:	460a      	mov	r2, r1
 8004280:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8004282:	4b35      	ldr	r3, [pc, #212]	; (8004358 <BSP_TS_GetState+0x3a8>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	b298      	uxth	r0, r3
 8004288:	f107 010c 	add.w	r1, r7, #12
 800428c:	f107 0210 	add.w	r2, r7, #16
 8004290:	f107 0308 	add.w	r3, r7, #8
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	460b      	mov	r3, r1
 8004298:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800429a:	f7fc fb19 	bl	80008d0 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	b2d9      	uxtb	r1, r3
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a6:	4413      	add	r3, r2
 80042a8:	3316      	adds	r3, #22
 80042aa:	460a      	mov	r2, r1
 80042ac:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	b2d9      	uxtb	r1, r3
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b6:	4413      	add	r3, r2
 80042b8:	3320      	adds	r3, #32
 80042ba:	460a      	mov	r2, r1
 80042bc:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d827      	bhi.n	8004314 <BSP_TS_GetState+0x364>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <BSP_TS_GetState+0x31c>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042dd 	.word	0x080042dd
 80042d0:	080042eb 	.word	0x080042eb
 80042d4:	080042f9 	.word	0x080042f9
 80042d8:	08004307 	.word	0x08004307
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e0:	4413      	add	r3, r2
 80042e2:	331b      	adds	r3, #27
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
          break;
 80042e8:	e018      	b.n	800431c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ee:	4413      	add	r3, r2
 80042f0:	331b      	adds	r3, #27
 80042f2:	2202      	movs	r2, #2
 80042f4:	701a      	strb	r2, [r3, #0]
          break;
 80042f6:	e011      	b.n	800431c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fc:	4413      	add	r3, r2
 80042fe:	331b      	adds	r3, #27
 8004300:	2203      	movs	r2, #3
 8004302:	701a      	strb	r2, [r3, #0]
          break;
 8004304:	e00a      	b.n	800431c <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800430a:	4413      	add	r3, r2
 800430c:	331b      	adds	r3, #27
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]
          break;
 8004312:	e003      	b.n	800431c <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800431a:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800431c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800431e:	3301      	adds	r3, #1
 8004320:	64bb      	str	r3, [r7, #72]	; 0x48
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800432a:	4293      	cmp	r3, r2
 800432c:	f4ff ae61 	bcc.w	8003ff2 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f813 	bl	800435c <BSP_TS_Get_GestureId>
 8004336:	4603      	mov	r3, r0
 8004338:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800433c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004340:	4618      	mov	r0, r3
 8004342:	3754      	adds	r7, #84	; 0x54
 8004344:	46bd      	mov	sp, r7
 8004346:	bd90      	pop	{r4, r7, pc}
 8004348:	20000574 	.word	0x20000574
 800434c:	2000057c 	.word	0x2000057c
 8004350:	20000576 	.word	0x20000576
 8004354:	20000590 	.word	0x20000590
 8004358:	20000579 	.word	0x20000579

0800435c <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800436c:	4b3b      	ldr	r3, [pc, #236]	; (800445c <BSP_TS_Get_GestureId+0x100>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f107 0208 	add.w	r2, r7, #8
 8004376:	4611      	mov	r1, r2
 8004378:	4618      	mov	r0, r3
 800437a:	f7fc fa90 	bl	800089e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b49      	cmp	r3, #73	; 0x49
 8004382:	d05e      	beq.n	8004442 <BSP_TS_Get_GestureId+0xe6>
 8004384:	2b49      	cmp	r3, #73	; 0x49
 8004386:	d860      	bhi.n	800444a <BSP_TS_Get_GestureId+0xee>
 8004388:	2b1c      	cmp	r3, #28
 800438a:	d83f      	bhi.n	800440c <BSP_TS_Get_GestureId+0xb0>
 800438c:	2b1c      	cmp	r3, #28
 800438e:	d85c      	bhi.n	800444a <BSP_TS_Get_GestureId+0xee>
 8004390:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <BSP_TS_Get_GestureId+0x3c>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	08004413 	.word	0x08004413
 800439c:	0800444b 	.word	0x0800444b
 80043a0:	0800444b 	.word	0x0800444b
 80043a4:	0800444b 	.word	0x0800444b
 80043a8:	0800444b 	.word	0x0800444b
 80043ac:	0800444b 	.word	0x0800444b
 80043b0:	0800444b 	.word	0x0800444b
 80043b4:	0800444b 	.word	0x0800444b
 80043b8:	0800444b 	.word	0x0800444b
 80043bc:	0800444b 	.word	0x0800444b
 80043c0:	0800444b 	.word	0x0800444b
 80043c4:	0800444b 	.word	0x0800444b
 80043c8:	0800444b 	.word	0x0800444b
 80043cc:	0800444b 	.word	0x0800444b
 80043d0:	0800444b 	.word	0x0800444b
 80043d4:	0800444b 	.word	0x0800444b
 80043d8:	0800441b 	.word	0x0800441b
 80043dc:	0800444b 	.word	0x0800444b
 80043e0:	0800444b 	.word	0x0800444b
 80043e4:	0800444b 	.word	0x0800444b
 80043e8:	08004423 	.word	0x08004423
 80043ec:	0800444b 	.word	0x0800444b
 80043f0:	0800444b 	.word	0x0800444b
 80043f4:	0800444b 	.word	0x0800444b
 80043f8:	0800442b 	.word	0x0800442b
 80043fc:	0800444b 	.word	0x0800444b
 8004400:	0800444b 	.word	0x0800444b
 8004404:	0800444b 	.word	0x0800444b
 8004408:	08004433 	.word	0x08004433
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d014      	beq.n	800443a <BSP_TS_Get_GestureId+0xde>
 8004410:	e01b      	b.n	800444a <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004418:	e01a      	b.n	8004450 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004420:	e016      	b.n	8004450 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2202      	movs	r2, #2
 8004426:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004428:	e012      	b.n	8004450 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2203      	movs	r2, #3
 800442e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004430:	e00e      	b.n	8004450 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2204      	movs	r2, #4
 8004436:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004438:	e00a      	b.n	8004450 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2205      	movs	r2, #5
 800443e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004440:	e006      	b.n	8004450 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2206      	movs	r2, #6
 8004446:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004448:	e002      	b.n	8004450 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	73fb      	strb	r3, [r7, #15]
      break;
 800444e:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004450:	7bfb      	ldrb	r3, [r7, #15]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000579 	.word	0x20000579

08004460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <HAL_MspInit+0x4c>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	4a10      	ldr	r2, [pc, #64]	; (80044ac <HAL_MspInit+0x4c>)
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	6413      	str	r3, [r2, #64]	; 0x40
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <HAL_MspInit+0x4c>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	607b      	str	r3, [r7, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447e:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_MspInit+0x4c>)
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <HAL_MspInit+0x4c>)
 8004484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004488:	6453      	str	r3, [r2, #68]	; 0x44
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <HAL_MspInit+0x4c>)
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004496:	2200      	movs	r2, #0
 8004498:	210f      	movs	r1, #15
 800449a:	f06f 0001 	mvn.w	r0, #1
 800449e:	f001 faf5 	bl	8005a8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800

080044b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08c      	sub	sp, #48	; 0x30
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044b8:	f107 031c 	add.w	r3, r7, #28
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <HAL_ADC_MspInit+0xc8>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d124      	bne.n	800451c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80044d2:	4b2a      	ldr	r3, [pc, #168]	; (800457c <HAL_ADC_MspInit+0xcc>)
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	4a29      	ldr	r2, [pc, #164]	; (800457c <HAL_ADC_MspInit+0xcc>)
 80044d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044dc:	6453      	str	r3, [r2, #68]	; 0x44
 80044de:	4b27      	ldr	r3, [pc, #156]	; (800457c <HAL_ADC_MspInit+0xcc>)
 80044e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ea:	4b24      	ldr	r3, [pc, #144]	; (800457c <HAL_ADC_MspInit+0xcc>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	4a23      	ldr	r2, [pc, #140]	; (800457c <HAL_ADC_MspInit+0xcc>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	6313      	str	r3, [r2, #48]	; 0x30
 80044f6:	4b21      	ldr	r3, [pc, #132]	; (800457c <HAL_ADC_MspInit+0xcc>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004502:	2301      	movs	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004506:	2303      	movs	r3, #3
 8004508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450a:	2300      	movs	r3, #0
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800450e:	f107 031c 	add.w	r3, r7, #28
 8004512:	4619      	mov	r1, r3
 8004514:	481a      	ldr	r0, [pc, #104]	; (8004580 <HAL_ADC_MspInit+0xd0>)
 8004516:	f002 f9af 	bl	8006878 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800451a:	e029      	b.n	8004570 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a18      	ldr	r2, [pc, #96]	; (8004584 <HAL_ADC_MspInit+0xd4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d124      	bne.n	8004570 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <HAL_ADC_MspInit+0xcc>)
 8004528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452a:	4a14      	ldr	r2, [pc, #80]	; (800457c <HAL_ADC_MspInit+0xcc>)
 800452c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004530:	6453      	str	r3, [r2, #68]	; 0x44
 8004532:	4b12      	ldr	r3, [pc, #72]	; (800457c <HAL_ADC_MspInit+0xcc>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800453e:	4b0f      	ldr	r3, [pc, #60]	; (800457c <HAL_ADC_MspInit+0xcc>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	4a0e      	ldr	r2, [pc, #56]	; (800457c <HAL_ADC_MspInit+0xcc>)
 8004544:	f043 0320 	orr.w	r3, r3, #32
 8004548:	6313      	str	r3, [r2, #48]	; 0x30
 800454a:	4b0c      	ldr	r3, [pc, #48]	; (800457c <HAL_ADC_MspInit+0xcc>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	f003 0320 	and.w	r3, r3, #32
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8004556:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800455a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800455c:	2303      	movs	r3, #3
 800455e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004560:	2300      	movs	r3, #0
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004564:	f107 031c 	add.w	r3, r7, #28
 8004568:	4619      	mov	r1, r3
 800456a:	4807      	ldr	r0, [pc, #28]	; (8004588 <HAL_ADC_MspInit+0xd8>)
 800456c:	f002 f984 	bl	8006878 <HAL_GPIO_Init>
}
 8004570:	bf00      	nop
 8004572:	3730      	adds	r7, #48	; 0x30
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40012000 	.word	0x40012000
 800457c:	40023800 	.word	0x40023800
 8004580:	40020000 	.word	0x40020000
 8004584:	40012200 	.word	0x40012200
 8004588:	40021400 	.word	0x40021400

0800458c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004594:	f107 0314 	add.w	r3, r7, #20
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	605a      	str	r2, [r3, #4]
 800459e:	609a      	str	r2, [r3, #8]
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a19      	ldr	r2, [pc, #100]	; (8004610 <HAL_DAC_MspInit+0x84>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d12b      	bne.n	8004606 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80045ae:	4b19      	ldr	r3, [pc, #100]	; (8004614 <HAL_DAC_MspInit+0x88>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	4a18      	ldr	r2, [pc, #96]	; (8004614 <HAL_DAC_MspInit+0x88>)
 80045b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045b8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ba:	4b16      	ldr	r3, [pc, #88]	; (8004614 <HAL_DAC_MspInit+0x88>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c6:	4b13      	ldr	r3, [pc, #76]	; (8004614 <HAL_DAC_MspInit+0x88>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	4a12      	ldr	r2, [pc, #72]	; (8004614 <HAL_DAC_MspInit+0x88>)
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	6313      	str	r3, [r2, #48]	; 0x30
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <HAL_DAC_MspInit+0x88>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80045de:	2310      	movs	r3, #16
 80045e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045e2:	2303      	movs	r3, #3
 80045e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ea:	f107 0314 	add.w	r3, r7, #20
 80045ee:	4619      	mov	r1, r3
 80045f0:	4809      	ldr	r0, [pc, #36]	; (8004618 <HAL_DAC_MspInit+0x8c>)
 80045f2:	f002 f941 	bl	8006878 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80045f6:	2200      	movs	r2, #0
 80045f8:	210f      	movs	r1, #15
 80045fa:	2036      	movs	r0, #54	; 0x36
 80045fc:	f001 fa46 	bl	8005a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004600:	2036      	movs	r0, #54	; 0x36
 8004602:	f001 fa5f 	bl	8005ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004606:	bf00      	nop
 8004608:	3728      	adds	r7, #40	; 0x28
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40007400 	.word	0x40007400
 8004614:	40023800 	.word	0x40023800
 8004618:	40020000 	.word	0x40020000

0800461c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a0d      	ldr	r2, [pc, #52]	; (8004660 <HAL_DMA2D_MspInit+0x44>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d113      	bne.n	8004656 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800462e:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <HAL_DMA2D_MspInit+0x48>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	4a0c      	ldr	r2, [pc, #48]	; (8004664 <HAL_DMA2D_MspInit+0x48>)
 8004634:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004638:	6313      	str	r3, [r2, #48]	; 0x30
 800463a:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <HAL_DMA2D_MspInit+0x48>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8004646:	2200      	movs	r2, #0
 8004648:	2105      	movs	r1, #5
 800464a:	205a      	movs	r0, #90	; 0x5a
 800464c:	f001 fa1e 	bl	8005a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004650:	205a      	movs	r0, #90	; 0x5a
 8004652:	f001 fa37 	bl	8005ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004656:	bf00      	nop
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	4002b000 	.word	0x4002b000
 8004664:	40023800 	.word	0x40023800

08004668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b0ac      	sub	sp, #176	; 0xb0
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004670:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004680:	f107 0318 	add.w	r3, r7, #24
 8004684:	2284      	movs	r2, #132	; 0x84
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f009 fdcf 	bl	800e22c <memset>
  if(hi2c->Instance==I2C1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a44      	ldr	r2, [pc, #272]	; (80047a4 <HAL_I2C_MspInit+0x13c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d13d      	bne.n	8004714 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800469c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800469e:	2300      	movs	r3, #0
 80046a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046a2:	f107 0318 	add.w	r3, r7, #24
 80046a6:	4618      	mov	r0, r3
 80046a8:	f004 faa8 	bl	8008bfc <HAL_RCCEx_PeriphCLKConfig>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80046b2:	f7fe faad 	bl	8002c10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b6:	4b3c      	ldr	r3, [pc, #240]	; (80047a8 <HAL_I2C_MspInit+0x140>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	4a3b      	ldr	r2, [pc, #236]	; (80047a8 <HAL_I2C_MspInit+0x140>)
 80046bc:	f043 0302 	orr.w	r3, r3, #2
 80046c0:	6313      	str	r3, [r2, #48]	; 0x30
 80046c2:	4b39      	ldr	r3, [pc, #228]	; (80047a8 <HAL_I2C_MspInit+0x140>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80046ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046d6:	2312      	movs	r3, #18
 80046d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e2:	2303      	movs	r3, #3
 80046e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046e8:	2304      	movs	r3, #4
 80046ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80046f2:	4619      	mov	r1, r3
 80046f4:	482d      	ldr	r0, [pc, #180]	; (80047ac <HAL_I2C_MspInit+0x144>)
 80046f6:	f002 f8bf 	bl	8006878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046fa:	4b2b      	ldr	r3, [pc, #172]	; (80047a8 <HAL_I2C_MspInit+0x140>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	4a2a      	ldr	r2, [pc, #168]	; (80047a8 <HAL_I2C_MspInit+0x140>)
 8004700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004704:	6413      	str	r3, [r2, #64]	; 0x40
 8004706:	4b28      	ldr	r3, [pc, #160]	; (80047a8 <HAL_I2C_MspInit+0x140>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004712:	e042      	b.n	800479a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a25      	ldr	r2, [pc, #148]	; (80047b0 <HAL_I2C_MspInit+0x148>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d13d      	bne.n	800479a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800471e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004722:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800472a:	f107 0318 	add.w	r3, r7, #24
 800472e:	4618      	mov	r0, r3
 8004730:	f004 fa64 	bl	8008bfc <HAL_RCCEx_PeriphCLKConfig>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800473a:	f7fe fa69 	bl	8002c10 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800473e:	4b1a      	ldr	r3, [pc, #104]	; (80047a8 <HAL_I2C_MspInit+0x140>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	4a19      	ldr	r2, [pc, #100]	; (80047a8 <HAL_I2C_MspInit+0x140>)
 8004744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004748:	6313      	str	r3, [r2, #48]	; 0x30
 800474a:	4b17      	ldr	r3, [pc, #92]	; (80047a8 <HAL_I2C_MspInit+0x140>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004756:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800475a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800475e:	2312      	movs	r3, #18
 8004760:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004764:	2301      	movs	r3, #1
 8004766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800476a:	2303      	movs	r3, #3
 800476c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004770:	2304      	movs	r3, #4
 8004772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004776:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800477a:	4619      	mov	r1, r3
 800477c:	480d      	ldr	r0, [pc, #52]	; (80047b4 <HAL_I2C_MspInit+0x14c>)
 800477e:	f002 f87b 	bl	8006878 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004782:	4b09      	ldr	r3, [pc, #36]	; (80047a8 <HAL_I2C_MspInit+0x140>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	4a08      	ldr	r2, [pc, #32]	; (80047a8 <HAL_I2C_MspInit+0x140>)
 8004788:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800478c:	6413      	str	r3, [r2, #64]	; 0x40
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_I2C_MspInit+0x140>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004796:	60bb      	str	r3, [r7, #8]
 8004798:	68bb      	ldr	r3, [r7, #8]
}
 800479a:	bf00      	nop
 800479c:	37b0      	adds	r7, #176	; 0xb0
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40005400 	.word	0x40005400
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40020400 	.word	0x40020400
 80047b0:	40005c00 	.word	0x40005c00
 80047b4:	40021c00 	.word	0x40021c00

080047b8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a15      	ldr	r2, [pc, #84]	; (800481c <HAL_I2C_MspDeInit+0x64>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d110      	bne.n	80047ec <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80047ca:	4b15      	ldr	r3, [pc, #84]	; (8004820 <HAL_I2C_MspDeInit+0x68>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	4a14      	ldr	r2, [pc, #80]	; (8004820 <HAL_I2C_MspDeInit+0x68>)
 80047d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047d4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80047d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047da:	4812      	ldr	r0, [pc, #72]	; (8004824 <HAL_I2C_MspDeInit+0x6c>)
 80047dc:	f002 f9f8 	bl	8006bd0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80047e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047e4:	480f      	ldr	r0, [pc, #60]	; (8004824 <HAL_I2C_MspDeInit+0x6c>)
 80047e6:	f002 f9f3 	bl	8006bd0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80047ea:	e013      	b.n	8004814 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a0d      	ldr	r2, [pc, #52]	; (8004828 <HAL_I2C_MspDeInit+0x70>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d10e      	bne.n	8004814 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <HAL_I2C_MspDeInit+0x68>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	4a09      	ldr	r2, [pc, #36]	; (8004820 <HAL_I2C_MspDeInit+0x68>)
 80047fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004800:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8004802:	2180      	movs	r1, #128	; 0x80
 8004804:	4809      	ldr	r0, [pc, #36]	; (800482c <HAL_I2C_MspDeInit+0x74>)
 8004806:	f002 f9e3 	bl	8006bd0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800480a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800480e:	4807      	ldr	r0, [pc, #28]	; (800482c <HAL_I2C_MspDeInit+0x74>)
 8004810:	f002 f9de 	bl	8006bd0 <HAL_GPIO_DeInit>
}
 8004814:	bf00      	nop
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40005400 	.word	0x40005400
 8004820:	40023800 	.word	0x40023800
 8004824:	40020400 	.word	0x40020400
 8004828:	40005c00 	.word	0x40005c00
 800482c:	40021c00 	.word	0x40021c00

08004830 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b0ae      	sub	sp, #184	; 0xb8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004838:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	609a      	str	r2, [r3, #8]
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004848:	f107 0320 	add.w	r3, r7, #32
 800484c:	2284      	movs	r2, #132	; 0x84
 800484e:	2100      	movs	r1, #0
 8004850:	4618      	mov	r0, r3
 8004852:	f009 fceb 	bl	800e22c <memset>
  if(hltdc->Instance==LTDC)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a6f      	ldr	r2, [pc, #444]	; (8004a18 <HAL_LTDC_MspInit+0x1e8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	f040 80d6 	bne.w	8004a0e <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004862:	2308      	movs	r3, #8
 8004864:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8004866:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800486a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800486c:	2305      	movs	r3, #5
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004870:	2302      	movs	r3, #2
 8004872:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8004874:	2303      	movs	r3, #3
 8004876:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004878:	2301      	movs	r3, #1
 800487a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800487c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004880:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004882:	f107 0320 	add.w	r3, r7, #32
 8004886:	4618      	mov	r0, r3
 8004888:	f004 f9b8 	bl	8008bfc <HAL_RCCEx_PeriphCLKConfig>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8004892:	f7fe f9bd 	bl	8002c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004896:	4b61      	ldr	r3, [pc, #388]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	4a60      	ldr	r2, [pc, #384]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 800489c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048a0:	6453      	str	r3, [r2, #68]	; 0x44
 80048a2:	4b5e      	ldr	r3, [pc, #376]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80048ae:	4b5b      	ldr	r3, [pc, #364]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	4a5a      	ldr	r2, [pc, #360]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 80048b4:	f043 0310 	orr.w	r3, r3, #16
 80048b8:	6313      	str	r3, [r2, #48]	; 0x30
 80048ba:	4b58      	ldr	r3, [pc, #352]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	61bb      	str	r3, [r7, #24]
 80048c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80048c6:	4b55      	ldr	r3, [pc, #340]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	4a54      	ldr	r2, [pc, #336]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 80048cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048d0:	6313      	str	r3, [r2, #48]	; 0x30
 80048d2:	4b52      	ldr	r3, [pc, #328]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80048de:	4b4f      	ldr	r3, [pc, #316]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	4a4e      	ldr	r2, [pc, #312]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 80048e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048e8:	6313      	str	r3, [r2, #48]	; 0x30
 80048ea:	4b4c      	ldr	r3, [pc, #304]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80048f6:	4b49      	ldr	r3, [pc, #292]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	4a48      	ldr	r2, [pc, #288]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 80048fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004900:	6313      	str	r3, [r2, #48]	; 0x30
 8004902:	4b46      	ldr	r3, [pc, #280]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800490e:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	4a42      	ldr	r2, [pc, #264]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 8004914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004918:	6313      	str	r3, [r2, #48]	; 0x30
 800491a:	4b40      	ldr	r3, [pc, #256]	; (8004a1c <HAL_LTDC_MspInit+0x1ec>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004926:	2310      	movs	r3, #16
 8004928:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492c:	2302      	movs	r3, #2
 800492e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004932:	2300      	movs	r3, #0
 8004934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004938:	2300      	movs	r3, #0
 800493a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800493e:	230e      	movs	r3, #14
 8004940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004944:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004948:	4619      	mov	r1, r3
 800494a:	4835      	ldr	r0, [pc, #212]	; (8004a20 <HAL_LTDC_MspInit+0x1f0>)
 800494c:	f001 ff94 	bl	8006878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004950:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004954:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004958:	2302      	movs	r3, #2
 800495a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495e:	2300      	movs	r3, #0
 8004960:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004964:	2300      	movs	r3, #0
 8004966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800496a:	230e      	movs	r3, #14
 800496c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004970:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004974:	4619      	mov	r1, r3
 8004976:	482b      	ldr	r0, [pc, #172]	; (8004a24 <HAL_LTDC_MspInit+0x1f4>)
 8004978:	f001 ff7e 	bl	8006878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800497c:	23f7      	movs	r3, #247	; 0xf7
 800497e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004982:	2302      	movs	r3, #2
 8004984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004988:	2300      	movs	r3, #0
 800498a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498e:	2300      	movs	r3, #0
 8004990:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004994:	230e      	movs	r3, #14
 8004996:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800499a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800499e:	4619      	mov	r1, r3
 80049a0:	4821      	ldr	r0, [pc, #132]	; (8004a28 <HAL_LTDC_MspInit+0x1f8>)
 80049a2:	f001 ff69 	bl	8006878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80049a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ae:	2302      	movs	r3, #2
 80049b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80049c0:	2309      	movs	r3, #9
 80049c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80049c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80049ca:	4619      	mov	r1, r3
 80049cc:	4817      	ldr	r0, [pc, #92]	; (8004a2c <HAL_LTDC_MspInit+0x1fc>)
 80049ce:	f001 ff53 	bl	8006878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80049d2:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80049d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049da:	2302      	movs	r3, #2
 80049dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e6:	2300      	movs	r3, #0
 80049e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80049ec:	230e      	movs	r3, #14
 80049ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80049f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80049f6:	4619      	mov	r1, r3
 80049f8:	480d      	ldr	r0, [pc, #52]	; (8004a30 <HAL_LTDC_MspInit+0x200>)
 80049fa:	f001 ff3d 	bl	8006878 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80049fe:	2200      	movs	r2, #0
 8004a00:	2105      	movs	r1, #5
 8004a02:	2058      	movs	r0, #88	; 0x58
 8004a04:	f001 f842 	bl	8005a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004a08:	2058      	movs	r0, #88	; 0x58
 8004a0a:	f001 f85b 	bl	8005ac4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004a0e:	bf00      	nop
 8004a10:	37b8      	adds	r7, #184	; 0xb8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40016800 	.word	0x40016800
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	40021000 	.word	0x40021000
 8004a24:	40022400 	.word	0x40022400
 8004a28:	40022800 	.word	0x40022800
 8004a2c:	40021800 	.word	0x40021800
 8004a30:	40022000 	.word	0x40022000

08004a34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b0a4      	sub	sp, #144	; 0x90
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a3c:	f107 030c 	add.w	r3, r7, #12
 8004a40:	2284      	movs	r2, #132	; 0x84
 8004a42:	2100      	movs	r1, #0
 8004a44:	4618      	mov	r0, r3
 8004a46:	f009 fbf1 	bl	800e22c <memset>
  if(hrtc->Instance==RTC)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a0e      	ldr	r2, [pc, #56]	; (8004a88 <HAL_RTC_MspInit+0x54>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d114      	bne.n	8004a7e <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004a54:	2320      	movs	r3, #32
 8004a56:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a5e:	f107 030c 	add.w	r3, r7, #12
 8004a62:	4618      	mov	r0, r3
 8004a64:	f004 f8ca 	bl	8008bfc <HAL_RCCEx_PeriphCLKConfig>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004a6e:	f7fe f8cf 	bl	8002c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a72:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <HAL_RTC_MspInit+0x58>)
 8004a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a76:	4a05      	ldr	r2, [pc, #20]	; (8004a8c <HAL_RTC_MspInit+0x58>)
 8004a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004a7e:	bf00      	nop
 8004a80:	3790      	adds	r7, #144	; 0x90
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40002800 	.word	0x40002800
 8004a8c:	40023800 	.word	0x40023800

08004a90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a98:	f107 0314 	add.w	r3, r7, #20
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a25      	ldr	r2, [pc, #148]	; (8004b44 <HAL_SPI_MspInit+0xb4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d144      	bne.n	8004b3c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004ab2:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <HAL_SPI_MspInit+0xb8>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	4a24      	ldr	r2, [pc, #144]	; (8004b48 <HAL_SPI_MspInit+0xb8>)
 8004ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004abc:	6413      	str	r3, [r2, #64]	; 0x40
 8004abe:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <HAL_SPI_MspInit+0xb8>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004aca:	4b1f      	ldr	r3, [pc, #124]	; (8004b48 <HAL_SPI_MspInit+0xb8>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <HAL_SPI_MspInit+0xb8>)
 8004ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad6:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <HAL_SPI_MspInit+0xb8>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ae2:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <HAL_SPI_MspInit+0xb8>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <HAL_SPI_MspInit+0xb8>)
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	6313      	str	r3, [r2, #48]	; 0x30
 8004aee:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <HAL_SPI_MspInit+0xb8>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	60bb      	str	r3, [r7, #8]
 8004af8:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8004afa:	2303      	movs	r3, #3
 8004afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afe:	2302      	movs	r3, #2
 8004b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b06:	2303      	movs	r3, #3
 8004b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b0a:	2305      	movs	r3, #5
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004b0e:	f107 0314 	add.w	r3, r7, #20
 8004b12:	4619      	mov	r1, r3
 8004b14:	480d      	ldr	r0, [pc, #52]	; (8004b4c <HAL_SPI_MspInit+0xbc>)
 8004b16:	f001 feaf 	bl	8006878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004b1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b20:	2302      	movs	r3, #2
 8004b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b2c:	2305      	movs	r3, #5
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b30:	f107 0314 	add.w	r3, r7, #20
 8004b34:	4619      	mov	r1, r3
 8004b36:	4806      	ldr	r0, [pc, #24]	; (8004b50 <HAL_SPI_MspInit+0xc0>)
 8004b38:	f001 fe9e 	bl	8006878 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004b3c:	bf00      	nop
 8004b3e:	3728      	adds	r7, #40	; 0x28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40003800 	.word	0x40003800
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	40022000 	.word	0x40022000
 8004b50:	40020400 	.word	0x40020400

08004b54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08e      	sub	sp, #56	; 0x38
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	609a      	str	r2, [r3, #8]
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a3b      	ldr	r2, [pc, #236]	; (8004c60 <HAL_TIM_Base_MspInit+0x10c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d10c      	bne.n	8004b90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b76:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	4a3a      	ldr	r2, [pc, #232]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004b7c:	f043 0301 	orr.w	r3, r3, #1
 8004b80:	6453      	str	r3, [r2, #68]	; 0x44
 8004b82:	4b38      	ldr	r3, [pc, #224]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	623b      	str	r3, [r7, #32]
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004b8e:	e062      	b.n	8004c56 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b98:	d10c      	bne.n	8004bb4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b9a:	4b32      	ldr	r3, [pc, #200]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	4a31      	ldr	r2, [pc, #196]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba6:	4b2f      	ldr	r3, [pc, #188]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	69fb      	ldr	r3, [r7, #28]
}
 8004bb2:	e050      	b.n	8004c56 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a2b      	ldr	r2, [pc, #172]	; (8004c68 <HAL_TIM_Base_MspInit+0x114>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004bbe:	4b29      	ldr	r3, [pc, #164]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	4a28      	ldr	r2, [pc, #160]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004bc4:	f043 0302 	orr.w	r3, r3, #2
 8004bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bca:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	69bb      	ldr	r3, [r7, #24]
}
 8004bd6:	e03e      	b.n	8004c56 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a23      	ldr	r2, [pc, #140]	; (8004c6c <HAL_TIM_Base_MspInit+0x118>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10c      	bne.n	8004bfc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004be2:	4b20      	ldr	r3, [pc, #128]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	4a1f      	ldr	r2, [pc, #124]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004be8:	f043 0308 	orr.w	r3, r3, #8
 8004bec:	6413      	str	r3, [r2, #64]	; 0x40
 8004bee:	4b1d      	ldr	r3, [pc, #116]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	697b      	ldr	r3, [r7, #20]
}
 8004bfa:	e02c      	b.n	8004c56 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <HAL_TIM_Base_MspInit+0x11c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d127      	bne.n	8004c56 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004c06:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004c0c:	f043 0302 	orr.w	r3, r3, #2
 8004c10:	6453      	str	r3, [r2, #68]	; 0x44
 8004c12:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004c1e:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	4a10      	ldr	r2, [pc, #64]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c28:	6313      	str	r3, [r2, #48]	; 0x30
 8004c2a:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <HAL_TIM_Base_MspInit+0x110>)
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c36:	2304      	movs	r3, #4
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c42:	2300      	movs	r3, #0
 8004c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004c46:	2303      	movs	r3, #3
 8004c48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4808      	ldr	r0, [pc, #32]	; (8004c74 <HAL_TIM_Base_MspInit+0x120>)
 8004c52:	f001 fe11 	bl	8006878 <HAL_GPIO_Init>
}
 8004c56:	bf00      	nop
 8004c58:	3738      	adds	r7, #56	; 0x38
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40023800 	.word	0x40023800
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40010400 	.word	0x40010400
 8004c74:	40022000 	.word	0x40022000

08004c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b0b0      	sub	sp, #192	; 0xc0
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c80:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	605a      	str	r2, [r3, #4]
 8004c8a:	609a      	str	r2, [r3, #8]
 8004c8c:	60da      	str	r2, [r3, #12]
 8004c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c94:	2284      	movs	r2, #132	; 0x84
 8004c96:	2100      	movs	r1, #0
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f009 fac7 	bl	800e22c <memset>
  if(huart->Instance==UART7)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a79      	ldr	r2, [pc, #484]	; (8004e88 <HAL_UART_MspInit+0x210>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d13d      	bne.n	8004d24 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f003 ff9f 	bl	8008bfc <HAL_RCCEx_PeriphCLKConfig>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004cc4:	f7fd ffa4 	bl	8002c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004cc8:	4b70      	ldr	r3, [pc, #448]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	4a6f      	ldr	r2, [pc, #444]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004cce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd4:	4b6d      	ldr	r3, [pc, #436]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ce0:	4b6a      	ldr	r3, [pc, #424]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	4a69      	ldr	r2, [pc, #420]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004ce6:	f043 0320 	orr.w	r3, r3, #32
 8004cea:	6313      	str	r3, [r2, #48]	; 0x30
 8004cec:	4b67      	ldr	r3, [pc, #412]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	623b      	str	r3, [r7, #32]
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004cf8:	23c0      	movs	r3, #192	; 0xc0
 8004cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cfe:	2302      	movs	r3, #2
 8004d00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004d10:	2308      	movs	r3, #8
 8004d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004d16:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	485c      	ldr	r0, [pc, #368]	; (8004e90 <HAL_UART_MspInit+0x218>)
 8004d1e:	f001 fdab 	bl	8006878 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004d22:	e0ac      	b.n	8004e7e <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a5a      	ldr	r2, [pc, #360]	; (8004e94 <HAL_UART_MspInit+0x21c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d165      	bne.n	8004dfa <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004d2e:	2340      	movs	r3, #64	; 0x40
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004d32:	2300      	movs	r3, #0
 8004d34:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f003 ff5e 	bl	8008bfc <HAL_RCCEx_PeriphCLKConfig>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8004d46:	f7fd ff63 	bl	8002c10 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d4a:	4b50      	ldr	r3, [pc, #320]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	4a4f      	ldr	r2, [pc, #316]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004d50:	f043 0310 	orr.w	r3, r3, #16
 8004d54:	6453      	str	r3, [r2, #68]	; 0x44
 8004d56:	4b4d      	ldr	r3, [pc, #308]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	61fb      	str	r3, [r7, #28]
 8004d60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d62:	4b4a      	ldr	r3, [pc, #296]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d66:	4a49      	ldr	r2, [pc, #292]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004d68:	f043 0302 	orr.w	r3, r3, #2
 8004d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d6e:	4b47      	ldr	r3, [pc, #284]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d7a:	4b44      	ldr	r3, [pc, #272]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	4a43      	ldr	r2, [pc, #268]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	6313      	str	r3, [r2, #48]	; 0x30
 8004d86:	4b41      	ldr	r3, [pc, #260]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004d92:	2380      	movs	r3, #128	; 0x80
 8004d94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004daa:	2307      	movs	r3, #7
 8004dac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004db0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004db4:	4619      	mov	r1, r3
 8004db6:	4838      	ldr	r0, [pc, #224]	; (8004e98 <HAL_UART_MspInit+0x220>)
 8004db8:	f001 fd5e 	bl	8006878 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004dd6:	2307      	movs	r3, #7
 8004dd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004ddc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004de0:	4619      	mov	r1, r3
 8004de2:	482e      	ldr	r0, [pc, #184]	; (8004e9c <HAL_UART_MspInit+0x224>)
 8004de4:	f001 fd48 	bl	8006878 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004de8:	2200      	movs	r2, #0
 8004dea:	2105      	movs	r1, #5
 8004dec:	2025      	movs	r0, #37	; 0x25
 8004dee:	f000 fe4d 	bl	8005a8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004df2:	2025      	movs	r0, #37	; 0x25
 8004df4:	f000 fe66 	bl	8005ac4 <HAL_NVIC_EnableIRQ>
}
 8004df8:	e041      	b.n	8004e7e <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a28      	ldr	r2, [pc, #160]	; (8004ea0 <HAL_UART_MspInit+0x228>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d13c      	bne.n	8004e7e <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004e04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e14:	4618      	mov	r0, r3
 8004e16:	f003 fef1 	bl	8008bfc <HAL_RCCEx_PeriphCLKConfig>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8004e20:	f7fd fef6 	bl	8002c10 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004e24:	4b19      	ldr	r3, [pc, #100]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e28:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004e2a:	f043 0320 	orr.w	r3, r3, #32
 8004e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8004e30:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e3c:	4b13      	ldr	r3, [pc, #76]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004e42:	f043 0304 	orr.w	r3, r3, #4
 8004e46:	6313      	str	r3, [r2, #48]	; 0x30
 8004e48:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <HAL_UART_MspInit+0x214>)
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004e54:	23c0      	movs	r3, #192	; 0xc0
 8004e56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e66:	2303      	movs	r3, #3
 8004e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004e6c:	2308      	movs	r3, #8
 8004e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004e76:	4619      	mov	r1, r3
 8004e78:	480a      	ldr	r0, [pc, #40]	; (8004ea4 <HAL_UART_MspInit+0x22c>)
 8004e7a:	f001 fcfd 	bl	8006878 <HAL_GPIO_Init>
}
 8004e7e:	bf00      	nop
 8004e80:	37c0      	adds	r7, #192	; 0xc0
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40007800 	.word	0x40007800
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	40021400 	.word	0x40021400
 8004e94:	40011000 	.word	0x40011000
 8004e98:	40020400 	.word	0x40020400
 8004e9c:	40020000 	.word	0x40020000
 8004ea0:	40011400 	.word	0x40011400
 8004ea4:	40020800 	.word	0x40020800

08004ea8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004eae:	1d3b      	adds	r3, r7, #4
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	605a      	str	r2, [r3, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004ebc:	4b3a      	ldr	r3, [pc, #232]	; (8004fa8 <HAL_FMC_MspInit+0x100>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d16d      	bne.n	8004fa0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004ec4:	4b38      	ldr	r3, [pc, #224]	; (8004fa8 <HAL_FMC_MspInit+0x100>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004eca:	4b38      	ldr	r3, [pc, #224]	; (8004fac <HAL_FMC_MspInit+0x104>)
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	4a37      	ldr	r2, [pc, #220]	; (8004fac <HAL_FMC_MspInit+0x104>)
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	6393      	str	r3, [r2, #56]	; 0x38
 8004ed6:	4b35      	ldr	r3, [pc, #212]	; (8004fac <HAL_FMC_MspInit+0x104>)
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8004ee2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004ee6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004ef4:	230c      	movs	r3, #12
 8004ef6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ef8:	1d3b      	adds	r3, r7, #4
 8004efa:	4619      	mov	r1, r3
 8004efc:	482c      	ldr	r0, [pc, #176]	; (8004fb0 <HAL_FMC_MspInit+0x108>)
 8004efe:	f001 fcbb 	bl	8006878 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8004f02:	f248 1333 	movw	r3, #33075	; 0x8133
 8004f06:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f10:	2303      	movs	r3, #3
 8004f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004f14:	230c      	movs	r3, #12
 8004f16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004f18:	1d3b      	adds	r3, r7, #4
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4825      	ldr	r0, [pc, #148]	; (8004fb4 <HAL_FMC_MspInit+0x10c>)
 8004f1e:	f001 fcab 	bl	8006878 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004f22:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004f26:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f30:	2303      	movs	r3, #3
 8004f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004f34:	230c      	movs	r3, #12
 8004f36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f38:	1d3b      	adds	r3, r7, #4
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	481e      	ldr	r0, [pc, #120]	; (8004fb8 <HAL_FMC_MspInit+0x110>)
 8004f3e:	f001 fc9b 	bl	8006878 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004f42:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004f46:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f50:	2303      	movs	r3, #3
 8004f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004f54:	230c      	movs	r3, #12
 8004f56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004f58:	1d3b      	adds	r3, r7, #4
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4817      	ldr	r0, [pc, #92]	; (8004fbc <HAL_FMC_MspInit+0x114>)
 8004f5e:	f001 fc8b 	bl	8006878 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004f62:	2328      	movs	r3, #40	; 0x28
 8004f64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f66:	2302      	movs	r3, #2
 8004f68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004f72:	230c      	movs	r3, #12
 8004f74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004f76:	1d3b      	adds	r3, r7, #4
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4811      	ldr	r0, [pc, #68]	; (8004fc0 <HAL_FMC_MspInit+0x118>)
 8004f7c:	f001 fc7c 	bl	8006878 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004f80:	2308      	movs	r3, #8
 8004f82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f84:	2302      	movs	r3, #2
 8004f86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004f90:	230c      	movs	r3, #12
 8004f92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004f94:	1d3b      	adds	r3, r7, #4
 8004f96:	4619      	mov	r1, r3
 8004f98:	480a      	ldr	r0, [pc, #40]	; (8004fc4 <HAL_FMC_MspInit+0x11c>)
 8004f9a:	f001 fc6d 	bl	8006878 <HAL_GPIO_Init>
 8004f9e:	e000      	b.n	8004fa2 <HAL_FMC_MspInit+0xfa>
    return;
 8004fa0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	200005a4 	.word	0x200005a4
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	40021800 	.word	0x40021800
 8004fb8:	40020c00 	.word	0x40020c00
 8004fbc:	40021400 	.word	0x40021400
 8004fc0:	40021c00 	.word	0x40021c00
 8004fc4:	40020800 	.word	0x40020800

08004fc8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004fd0:	f7ff ff6a 	bl	8004ea8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004fd4:	bf00      	nop
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08c      	sub	sp, #48	; 0x30
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004fec:	2200      	movs	r2, #0
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	2036      	movs	r0, #54	; 0x36
 8004ff2:	f000 fd4b 	bl	8005a8c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ff6:	2036      	movs	r0, #54	; 0x36
 8004ff8:	f000 fd64 	bl	8005ac4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004ffc:	4b1f      	ldr	r3, [pc, #124]	; (800507c <HAL_InitTick+0xa0>)
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	4a1e      	ldr	r2, [pc, #120]	; (800507c <HAL_InitTick+0xa0>)
 8005002:	f043 0310 	orr.w	r3, r3, #16
 8005006:	6413      	str	r3, [r2, #64]	; 0x40
 8005008:	4b1c      	ldr	r3, [pc, #112]	; (800507c <HAL_InitTick+0xa0>)
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005014:	f107 0210 	add.w	r2, r7, #16
 8005018:	f107 0314 	add.w	r3, r7, #20
 800501c:	4611      	mov	r1, r2
 800501e:	4618      	mov	r0, r3
 8005020:	f003 fdba 	bl	8008b98 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005024:	f003 fd90 	bl	8008b48 <HAL_RCC_GetPCLK1Freq>
 8005028:	4603      	mov	r3, r0
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	4a13      	ldr	r2, [pc, #76]	; (8005080 <HAL_InitTick+0xa4>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	0c9b      	lsrs	r3, r3, #18
 8005038:	3b01      	subs	r3, #1
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800503c:	4b11      	ldr	r3, [pc, #68]	; (8005084 <HAL_InitTick+0xa8>)
 800503e:	4a12      	ldr	r2, [pc, #72]	; (8005088 <HAL_InitTick+0xac>)
 8005040:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005042:	4b10      	ldr	r3, [pc, #64]	; (8005084 <HAL_InitTick+0xa8>)
 8005044:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005048:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800504a:	4a0e      	ldr	r2, [pc, #56]	; (8005084 <HAL_InitTick+0xa8>)
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005050:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <HAL_InitTick+0xa8>)
 8005052:	2200      	movs	r2, #0
 8005054:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005056:	4b0b      	ldr	r3, [pc, #44]	; (8005084 <HAL_InitTick+0xa8>)
 8005058:	2200      	movs	r2, #0
 800505a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800505c:	4809      	ldr	r0, [pc, #36]	; (8005084 <HAL_InitTick+0xa8>)
 800505e:	f004 fed1 	bl	8009e04 <HAL_TIM_Base_Init>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d104      	bne.n	8005072 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005068:	4806      	ldr	r0, [pc, #24]	; (8005084 <HAL_InitTick+0xa8>)
 800506a:	f004 ff23 	bl	8009eb4 <HAL_TIM_Base_Start_IT>
 800506e:	4603      	mov	r3, r0
 8005070:	e000      	b.n	8005074 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
}
 8005074:	4618      	mov	r0, r3
 8005076:	3730      	adds	r7, #48	; 0x30
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40023800 	.word	0x40023800
 8005080:	431bde83 	.word	0x431bde83
 8005084:	20008dd0 	.word	0x20008dd0
 8005088:	40001000 	.word	0x40001000

0800508c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005090:	e7fe      	b.n	8005090 <NMI_Handler+0x4>

08005092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005092:	b480      	push	{r7}
 8005094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005096:	e7fe      	b.n	8005096 <HardFault_Handler+0x4>

08005098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005098:	b480      	push	{r7}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800509c:	e7fe      	b.n	800509c <MemManage_Handler+0x4>

0800509e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800509e:	b480      	push	{r7}
 80050a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050a2:	e7fe      	b.n	80050a2 <BusFault_Handler+0x4>

080050a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050a8:	e7fe      	b.n	80050a8 <UsageFault_Handler+0x4>

080050aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050aa:	b480      	push	{r7}
 80050ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050ae:	bf00      	nop
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80050bc:	4802      	ldr	r0, [pc, #8]	; (80050c8 <USART1_IRQHandler+0x10>)
 80050be:	f005 fbb7 	bl	800a830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200084a8 	.word	0x200084a8

080050cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWDIO_Pin);
 80050d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80050d4:	f001 febc 	bl	8006e50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80050d8:	bf00      	nop
 80050da:	bd80      	pop	{r7, pc}

080050dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80050e0:	4b06      	ldr	r3, [pc, #24]	; (80050fc <TIM6_DAC_IRQHandler+0x20>)
 80050e2:	791b      	ldrb	r3, [r3, #4]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80050ea:	4804      	ldr	r0, [pc, #16]	; (80050fc <TIM6_DAC_IRQHandler+0x20>)
 80050ec:	f000 fd1a 	bl	8005b24 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80050f0:	4803      	ldr	r0, [pc, #12]	; (8005100 <TIM6_DAC_IRQHandler+0x24>)
 80050f2:	f004 ff57 	bl	8009fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80050f6:	bf00      	nop
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20008530 	.word	0x20008530
 8005100:	20008dd0 	.word	0x20008dd0

08005104 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005108:	4802      	ldr	r0, [pc, #8]	; (8005114 <LTDC_IRQHandler+0x10>)
 800510a:	f002 fdc3 	bl	8007c94 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800510e:	bf00      	nop
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20008368 	.word	0x20008368

08005118 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800511c:	4802      	ldr	r0, [pc, #8]	; (8005128 <DMA2D_IRQHandler+0x10>)
 800511e:	f001 f96d 	bl	80063fc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005122:	bf00      	nop
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20008c34 	.word	0x20008c34

0800512c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005130:	4b06      	ldr	r3, [pc, #24]	; (800514c <SystemInit+0x20>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	4a05      	ldr	r2, [pc, #20]	; (800514c <SystemInit+0x20>)
 8005138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800513c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005140:	bf00      	nop
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	e000ed00 	.word	0xe000ed00

08005150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005154:	480d      	ldr	r0, [pc, #52]	; (800518c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005156:	490e      	ldr	r1, [pc, #56]	; (8005190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005158:	4a0e      	ldr	r2, [pc, #56]	; (8005194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800515a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800515c:	e002      	b.n	8005164 <LoopCopyDataInit>

0800515e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800515e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005162:	3304      	adds	r3, #4

08005164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005168:	d3f9      	bcc.n	800515e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800516a:	4a0b      	ldr	r2, [pc, #44]	; (8005198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800516c:	4c0b      	ldr	r4, [pc, #44]	; (800519c <LoopFillZerobss+0x26>)
  movs r3, #0
 800516e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005170:	e001      	b.n	8005176 <LoopFillZerobss>

08005172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005174:	3204      	adds	r2, #4

08005176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005178:	d3fb      	bcc.n	8005172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800517a:	f7ff ffd7 	bl	800512c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800517e:	f009 f821 	bl	800e1c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005182:	f7fb ffdd 	bl	8001140 <main>
  bx  lr    
 8005186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005188:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800518c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005190:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8005194:	080346a0 	.word	0x080346a0
  ldr r2, =_sbss
 8005198:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800519c:	20008e2c 	.word	0x20008e2c

080051a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051a0:	e7fe      	b.n	80051a0 <ADC_IRQHandler>
	...

080051a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051a8:	4b08      	ldr	r3, [pc, #32]	; (80051cc <HAL_Init+0x28>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a07      	ldr	r2, [pc, #28]	; (80051cc <HAL_Init+0x28>)
 80051ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051b4:	2003      	movs	r0, #3
 80051b6:	f000 fc5e 	bl	8005a76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051ba:	200f      	movs	r0, #15
 80051bc:	f7ff ff0e 	bl	8004fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051c0:	f7ff f94e 	bl	8004460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40023c00 	.word	0x40023c00

080051d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <HAL_IncTick+0x20>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <HAL_IncTick+0x24>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4413      	add	r3, r2
 80051e0:	4a04      	ldr	r2, [pc, #16]	; (80051f4 <HAL_IncTick+0x24>)
 80051e2:	6013      	str	r3, [r2, #0]
}
 80051e4:	bf00      	nop
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	20000048 	.word	0x20000048
 80051f4:	20008e1c 	.word	0x20008e1c

080051f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  return uwTick;
 80051fc:	4b03      	ldr	r3, [pc, #12]	; (800520c <HAL_GetTick+0x14>)
 80051fe:	681b      	ldr	r3, [r3, #0]
}
 8005200:	4618      	mov	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	20008e1c 	.word	0x20008e1c

08005210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005218:	f7ff ffee 	bl	80051f8 <HAL_GetTick>
 800521c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005228:	d005      	beq.n	8005236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <HAL_Delay+0x44>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005236:	bf00      	nop
 8005238:	f7ff ffde 	bl	80051f8 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	429a      	cmp	r2, r3
 8005246:	d8f7      	bhi.n	8005238 <HAL_Delay+0x28>
  {
  }
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000048 	.word	0x20000048

08005258 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e031      	b.n	80052d2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff f91a 	bl	80044b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b00      	cmp	r3, #0
 8005294:	d116      	bne.n	80052c4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <HAL_ADC_Init+0x84>)
 800529c:	4013      	ands	r3, r2
 800529e:	f043 0202 	orr.w	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fa3e 	bl	8005728 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f023 0303 	bic.w	r3, r3, #3
 80052ba:	f043 0201 	orr.w	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
 80052c2:	e001      	b.n	80052c8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	ffffeefd 	.word	0xffffeefd

080052e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_ADC_Start+0x1a>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e0ad      	b.n	8005456 <HAL_ADC_Start+0x176>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b01      	cmp	r3, #1
 800530e:	d018      	beq.n	8005342 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005320:	4b50      	ldr	r3, [pc, #320]	; (8005464 <HAL_ADC_Start+0x184>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a50      	ldr	r2, [pc, #320]	; (8005468 <HAL_ADC_Start+0x188>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	0c9a      	lsrs	r2, r3, #18
 800532c:	4613      	mov	r3, r2
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	4413      	add	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005334:	e002      	b.n	800533c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3b01      	subs	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f9      	bne.n	8005336 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d175      	bne.n	800543c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005354:	4b45      	ldr	r3, [pc, #276]	; (800546c <HAL_ADC_Start+0x18c>)
 8005356:	4013      	ands	r3, r2
 8005358:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005376:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538a:	d106      	bne.n	800539a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005390:	f023 0206 	bic.w	r2, r3, #6
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	645a      	str	r2, [r3, #68]	; 0x44
 8005398:	e002      	b.n	80053a0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80053b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80053b2:	4b2f      	ldr	r3, [pc, #188]	; (8005470 <HAL_ADC_Start+0x190>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10f      	bne.n	80053de <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d143      	bne.n	8005454 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053da:	609a      	str	r2, [r3, #8]
 80053dc:	e03a      	b.n	8005454 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a24      	ldr	r2, [pc, #144]	; (8005474 <HAL_ADC_Start+0x194>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d10e      	bne.n	8005406 <HAL_ADC_Start+0x126>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d107      	bne.n	8005406 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005404:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005406:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <HAL_ADC_Start+0x190>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f003 0310 	and.w	r3, r3, #16
 800540e:	2b00      	cmp	r3, #0
 8005410:	d120      	bne.n	8005454 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a18      	ldr	r2, [pc, #96]	; (8005478 <HAL_ADC_Start+0x198>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d11b      	bne.n	8005454 <HAL_ADC_Start+0x174>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d114      	bne.n	8005454 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005438:	609a      	str	r2, [r3, #8]
 800543a:	e00b      	b.n	8005454 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	f043 0210 	orr.w	r2, r3, #16
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544c:	f043 0201 	orr.w	r2, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20000040 	.word	0x20000040
 8005468:	431bde83 	.word	0x431bde83
 800546c:	fffff8fe 	.word	0xfffff8fe
 8005470:	40012300 	.word	0x40012300
 8005474:	40012000 	.word	0x40012000
 8005478:	40012200 	.word	0x40012200

0800547c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x1c>
 8005494:	2302      	movs	r3, #2
 8005496:	e136      	b.n	8005706 <HAL_ADC_ConfigChannel+0x28a>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b09      	cmp	r3, #9
 80054a6:	d93a      	bls.n	800551e <HAL_ADC_ConfigChannel+0xa2>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b0:	d035      	beq.n	800551e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68d9      	ldr	r1, [r3, #12]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	4613      	mov	r3, r2
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	4413      	add	r3, r2
 80054c6:	3b1e      	subs	r3, #30
 80054c8:	2207      	movs	r2, #7
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43da      	mvns	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	400a      	ands	r2, r1
 80054d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a8d      	ldr	r2, [pc, #564]	; (8005714 <HAL_ADC_ConfigChannel+0x298>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d10a      	bne.n	80054f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68d9      	ldr	r1, [r3, #12]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	061a      	lsls	r2, r3, #24
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054f6:	e035      	b.n	8005564 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68d9      	ldr	r1, [r3, #12]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	b29b      	uxth	r3, r3
 8005508:	4618      	mov	r0, r3
 800550a:	4603      	mov	r3, r0
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	4403      	add	r3, r0
 8005510:	3b1e      	subs	r3, #30
 8005512:	409a      	lsls	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800551c:	e022      	b.n	8005564 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6919      	ldr	r1, [r3, #16]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	4613      	mov	r3, r2
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	4413      	add	r3, r2
 8005532:	2207      	movs	r2, #7
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	43da      	mvns	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	400a      	ands	r2, r1
 8005540:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6919      	ldr	r1, [r3, #16]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	b29b      	uxth	r3, r3
 8005552:	4618      	mov	r0, r3
 8005554:	4603      	mov	r3, r0
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	4403      	add	r3, r0
 800555a:	409a      	lsls	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b06      	cmp	r3, #6
 800556a:	d824      	bhi.n	80055b6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	3b05      	subs	r3, #5
 800557e:	221f      	movs	r2, #31
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	43da      	mvns	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	400a      	ands	r2, r1
 800558c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	4618      	mov	r0, r3
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	3b05      	subs	r3, #5
 80055a8:	fa00 f203 	lsl.w	r2, r0, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	635a      	str	r2, [r3, #52]	; 0x34
 80055b4:	e04c      	b.n	8005650 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b0c      	cmp	r3, #12
 80055bc:	d824      	bhi.n	8005608 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	3b23      	subs	r3, #35	; 0x23
 80055d0:	221f      	movs	r2, #31
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	43da      	mvns	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	400a      	ands	r2, r1
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	4618      	mov	r0, r3
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	3b23      	subs	r3, #35	; 0x23
 80055fa:	fa00 f203 	lsl.w	r2, r0, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	631a      	str	r2, [r3, #48]	; 0x30
 8005606:	e023      	b.n	8005650 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	3b41      	subs	r3, #65	; 0x41
 800561a:	221f      	movs	r2, #31
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43da      	mvns	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	400a      	ands	r2, r1
 8005628:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	4618      	mov	r0, r3
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	3b41      	subs	r3, #65	; 0x41
 8005644:	fa00 f203 	lsl.w	r2, r0, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a30      	ldr	r2, [pc, #192]	; (8005718 <HAL_ADC_ConfigChannel+0x29c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d10a      	bne.n	8005670 <HAL_ADC_ConfigChannel+0x1f4>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005662:	d105      	bne.n	8005670 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005664:	4b2d      	ldr	r3, [pc, #180]	; (800571c <HAL_ADC_ConfigChannel+0x2a0>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4a2c      	ldr	r2, [pc, #176]	; (800571c <HAL_ADC_ConfigChannel+0x2a0>)
 800566a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800566e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a28      	ldr	r2, [pc, #160]	; (8005718 <HAL_ADC_ConfigChannel+0x29c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d10f      	bne.n	800569a <HAL_ADC_ConfigChannel+0x21e>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b12      	cmp	r3, #18
 8005680:	d10b      	bne.n	800569a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005682:	4b26      	ldr	r3, [pc, #152]	; (800571c <HAL_ADC_ConfigChannel+0x2a0>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	4a25      	ldr	r2, [pc, #148]	; (800571c <HAL_ADC_ConfigChannel+0x2a0>)
 8005688:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800568c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800568e:	4b23      	ldr	r3, [pc, #140]	; (800571c <HAL_ADC_ConfigChannel+0x2a0>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_ADC_ConfigChannel+0x2a0>)
 8005694:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005698:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a1e      	ldr	r2, [pc, #120]	; (8005718 <HAL_ADC_ConfigChannel+0x29c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d12b      	bne.n	80056fc <HAL_ADC_ConfigChannel+0x280>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a1a      	ldr	r2, [pc, #104]	; (8005714 <HAL_ADC_ConfigChannel+0x298>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d003      	beq.n	80056b6 <HAL_ADC_ConfigChannel+0x23a>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b11      	cmp	r3, #17
 80056b4:	d122      	bne.n	80056fc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80056b6:	4b19      	ldr	r3, [pc, #100]	; (800571c <HAL_ADC_ConfigChannel+0x2a0>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4a18      	ldr	r2, [pc, #96]	; (800571c <HAL_ADC_ConfigChannel+0x2a0>)
 80056bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80056c0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80056c2:	4b16      	ldr	r3, [pc, #88]	; (800571c <HAL_ADC_ConfigChannel+0x2a0>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4a15      	ldr	r2, [pc, #84]	; (800571c <HAL_ADC_ConfigChannel+0x2a0>)
 80056c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056cc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a10      	ldr	r2, [pc, #64]	; (8005714 <HAL_ADC_ConfigChannel+0x298>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d111      	bne.n	80056fc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80056d8:	4b11      	ldr	r3, [pc, #68]	; (8005720 <HAL_ADC_ConfigChannel+0x2a4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a11      	ldr	r2, [pc, #68]	; (8005724 <HAL_ADC_ConfigChannel+0x2a8>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	0c9a      	lsrs	r2, r3, #18
 80056e4:	4613      	mov	r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80056ee:	e002      	b.n	80056f6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1f9      	bne.n	80056f0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	10000012 	.word	0x10000012
 8005718:	40012000 	.word	0x40012000
 800571c:	40012300 	.word	0x40012300
 8005720:	20000040 	.word	0x20000040
 8005724:	431bde83 	.word	0x431bde83

08005728 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005730:	4b78      	ldr	r3, [pc, #480]	; (8005914 <ADC_Init+0x1ec>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4a77      	ldr	r2, [pc, #476]	; (8005914 <ADC_Init+0x1ec>)
 8005736:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800573a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800573c:	4b75      	ldr	r3, [pc, #468]	; (8005914 <ADC_Init+0x1ec>)
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	4973      	ldr	r1, [pc, #460]	; (8005914 <ADC_Init+0x1ec>)
 8005746:	4313      	orrs	r3, r2
 8005748:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6859      	ldr	r1, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	021a      	lsls	r2, r3, #8
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800577c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800579e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6899      	ldr	r1, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	4a58      	ldr	r2, [pc, #352]	; (8005918 <ADC_Init+0x1f0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d022      	beq.n	8005802 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6899      	ldr	r1, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6899      	ldr	r1, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	609a      	str	r2, [r3, #8]
 8005800:	e00f      	b.n	8005822 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005820:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0202 	bic.w	r2, r2, #2
 8005830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6899      	ldr	r1, [r3, #8]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	005a      	lsls	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800585e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800586e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6859      	ldr	r1, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	3b01      	subs	r3, #1
 800587c:	035a      	lsls	r2, r3, #13
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	e007      	b.n	8005898 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005896:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80058a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	051a      	lsls	r2, r3, #20
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6899      	ldr	r1, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058da:	025a      	lsls	r2, r3, #9
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6899      	ldr	r1, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	029a      	lsls	r2, r3, #10
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	40012300 	.word	0x40012300
 8005918:	0f000001 	.word	0x0f000001

0800591c <__NVIC_SetPriorityGrouping>:
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800592c:	4b0b      	ldr	r3, [pc, #44]	; (800595c <__NVIC_SetPriorityGrouping+0x40>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005938:	4013      	ands	r3, r2
 800593a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005944:	4b06      	ldr	r3, [pc, #24]	; (8005960 <__NVIC_SetPriorityGrouping+0x44>)
 8005946:	4313      	orrs	r3, r2
 8005948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800594a:	4a04      	ldr	r2, [pc, #16]	; (800595c <__NVIC_SetPriorityGrouping+0x40>)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	60d3      	str	r3, [r2, #12]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	e000ed00 	.word	0xe000ed00
 8005960:	05fa0000 	.word	0x05fa0000

08005964 <__NVIC_GetPriorityGrouping>:
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005968:	4b04      	ldr	r3, [pc, #16]	; (800597c <__NVIC_GetPriorityGrouping+0x18>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	0a1b      	lsrs	r3, r3, #8
 800596e:	f003 0307 	and.w	r3, r3, #7
}
 8005972:	4618      	mov	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	e000ed00 	.word	0xe000ed00

08005980 <__NVIC_EnableIRQ>:
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800598a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598e:	2b00      	cmp	r3, #0
 8005990:	db0b      	blt.n	80059aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	f003 021f 	and.w	r2, r3, #31
 8005998:	4907      	ldr	r1, [pc, #28]	; (80059b8 <__NVIC_EnableIRQ+0x38>)
 800599a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	2001      	movs	r0, #1
 80059a2:	fa00 f202 	lsl.w	r2, r0, r2
 80059a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	e000e100 	.word	0xe000e100

080059bc <__NVIC_SetPriority>:
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	4603      	mov	r3, r0
 80059c4:	6039      	str	r1, [r7, #0]
 80059c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	db0a      	blt.n	80059e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	490c      	ldr	r1, [pc, #48]	; (8005a08 <__NVIC_SetPriority+0x4c>)
 80059d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059da:	0112      	lsls	r2, r2, #4
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	440b      	add	r3, r1
 80059e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80059e4:	e00a      	b.n	80059fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	4908      	ldr	r1, [pc, #32]	; (8005a0c <__NVIC_SetPriority+0x50>)
 80059ec:	79fb      	ldrb	r3, [r7, #7]
 80059ee:	f003 030f 	and.w	r3, r3, #15
 80059f2:	3b04      	subs	r3, #4
 80059f4:	0112      	lsls	r2, r2, #4
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	440b      	add	r3, r1
 80059fa:	761a      	strb	r2, [r3, #24]
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	e000e100 	.word	0xe000e100
 8005a0c:	e000ed00 	.word	0xe000ed00

08005a10 <NVIC_EncodePriority>:
{
 8005a10:	b480      	push	{r7}
 8005a12:	b089      	sub	sp, #36	; 0x24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f1c3 0307 	rsb	r3, r3, #7
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	bf28      	it	cs
 8005a2e:	2304      	movcs	r3, #4
 8005a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3304      	adds	r3, #4
 8005a36:	2b06      	cmp	r3, #6
 8005a38:	d902      	bls.n	8005a40 <NVIC_EncodePriority+0x30>
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3b03      	subs	r3, #3
 8005a3e:	e000      	b.n	8005a42 <NVIC_EncodePriority+0x32>
 8005a40:	2300      	movs	r3, #0
 8005a42:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a44:	f04f 32ff 	mov.w	r2, #4294967295
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43da      	mvns	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	401a      	ands	r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a58:	f04f 31ff 	mov.w	r1, #4294967295
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a62:	43d9      	mvns	r1, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a68:	4313      	orrs	r3, r2
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3724      	adds	r7, #36	; 0x24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff ff4c 	bl	800591c <__NVIC_SetPriorityGrouping>
}
 8005a84:	bf00      	nop
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a9e:	f7ff ff61 	bl	8005964 <__NVIC_GetPriorityGrouping>
 8005aa2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	6978      	ldr	r0, [r7, #20]
 8005aaa:	f7ff ffb1 	bl	8005a10 <NVIC_EncodePriority>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff ff80 	bl	80059bc <__NVIC_SetPriority>
}
 8005abc:	bf00      	nop
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff ff54 	bl	8005980 <__NVIC_EnableIRQ>
}
 8005ad8:	bf00      	nop
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e014      	b.n	8005b1c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	791b      	ldrb	r3, [r3, #4]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d105      	bne.n	8005b08 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fe fd42 	bl	800458c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3a:	d120      	bne.n	8005b7e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b4a:	d118      	bne.n	8005b7e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2204      	movs	r2, #4
 8005b50:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f043 0201 	orr.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b76:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f82d 	bl	8005bd8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b8c:	d120      	bne.n	8005bd0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b9c:	d118      	bne.n	8005bd0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2204      	movs	r2, #4
 8005ba2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f043 0202 	orr.w	r2, r3, #2
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005bb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005bc8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f85d 	bl	8005c8a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	795b      	ldrb	r3, [r3, #5]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_DAC_ConfigChannel+0x18>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e03c      	b.n	8005c7e <HAL_DAC_ConfigChannel+0x92>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2202      	movs	r2, #2
 8005c0e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f003 0310 	and.w	r3, r3, #16
 8005c1e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005c22:	fa02 f303 	lsl.w	r3, r2, r3
 8005c26:	43db      	mvns	r3, r3
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6819      	ldr	r1, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	22c0      	movs	r2, #192	; 0xc0
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	43da      	mvns	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	400a      	ands	r2, r1
 8005c6e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2201      	movs	r2, #1
 8005c74:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005cac:	f7ff faa4 	bl	80051f8 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e099      	b.n	8005df0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0201 	bic.w	r2, r2, #1
 8005cda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cdc:	e00f      	b.n	8005cfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cde:	f7ff fa8b 	bl	80051f8 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b05      	cmp	r3, #5
 8005cea:	d908      	bls.n	8005cfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e078      	b.n	8005df0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e8      	bne.n	8005cde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4b38      	ldr	r3, [pc, #224]	; (8005df8 <HAL_DMA_Init+0x158>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d107      	bne.n	8005d68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	4313      	orrs	r3, r2
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f023 0307 	bic.w	r3, r3, #7
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d117      	bne.n	8005dc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00e      	beq.n	8005dc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f94f 	bl	8006048 <DMA_CheckFifoParam>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d008      	beq.n	8005dc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2240      	movs	r2, #64	; 0x40
 8005db4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e016      	b.n	8005df0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f906 	bl	8005fdc <DMA_CalcBaseAndBitshift>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd8:	223f      	movs	r2, #63	; 0x3f
 8005dda:	409a      	lsls	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	f010803f 	.word	0xf010803f

08005dfc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e050      	b.n	8005eb0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d101      	bne.n	8005e1e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e048      	b.n	8005eb0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0201 	bic.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2200      	movs	r2, #0
 8005e44:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2200      	movs	r2, #0
 8005e54:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2221      	movs	r2, #33	; 0x21
 8005e5c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f8bc 	bl	8005fdc <DMA_CalcBaseAndBitshift>
 8005e64:	4603      	mov	r3, r0
 8005e66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6c:	223f      	movs	r2, #63	; 0x3f
 8005e6e:	409a      	lsls	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ec6:	f7ff f997 	bl	80051f8 <HAL_GetTick>
 8005eca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d008      	beq.n	8005eea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2280      	movs	r2, #128	; 0x80
 8005edc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e052      	b.n	8005f90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0216 	bic.w	r2, r2, #22
 8005ef8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695a      	ldr	r2, [r3, #20]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d103      	bne.n	8005f1a <HAL_DMA_Abort+0x62>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d007      	beq.n	8005f2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0208 	bic.w	r2, r2, #8
 8005f28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f3a:	e013      	b.n	8005f64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f3c:	f7ff f95c 	bl	80051f8 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	d90c      	bls.n	8005f64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2203      	movs	r2, #3
 8005f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e015      	b.n	8005f90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e4      	bne.n	8005f3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f76:	223f      	movs	r2, #63	; 0x3f
 8005f78:	409a      	lsls	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d004      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2280      	movs	r2, #128	; 0x80
 8005fb0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e00c      	b.n	8005fd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2205      	movs	r2, #5
 8005fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	3b10      	subs	r3, #16
 8005fec:	4a13      	ldr	r2, [pc, #76]	; (800603c <DMA_CalcBaseAndBitshift+0x60>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	091b      	lsrs	r3, r3, #4
 8005ff4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ff6:	4a12      	ldr	r2, [pc, #72]	; (8006040 <DMA_CalcBaseAndBitshift+0x64>)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b03      	cmp	r3, #3
 8006008:	d908      	bls.n	800601c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <DMA_CalcBaseAndBitshift+0x68>)
 8006012:	4013      	ands	r3, r2
 8006014:	1d1a      	adds	r2, r3, #4
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	659a      	str	r2, [r3, #88]	; 0x58
 800601a:	e006      	b.n	800602a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	4b08      	ldr	r3, [pc, #32]	; (8006044 <DMA_CalcBaseAndBitshift+0x68>)
 8006024:	4013      	ands	r3, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	aaaaaaab 	.word	0xaaaaaaab
 8006040:	08034628 	.word	0x08034628
 8006044:	fffffc00 	.word	0xfffffc00

08006048 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d11f      	bne.n	80060a2 <DMA_CheckFifoParam+0x5a>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b03      	cmp	r3, #3
 8006066:	d856      	bhi.n	8006116 <DMA_CheckFifoParam+0xce>
 8006068:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <DMA_CheckFifoParam+0x28>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	08006081 	.word	0x08006081
 8006074:	08006093 	.word	0x08006093
 8006078:	08006081 	.word	0x08006081
 800607c:	08006117 	.word	0x08006117
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d046      	beq.n	800611a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006090:	e043      	b.n	800611a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800609a:	d140      	bne.n	800611e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060a0:	e03d      	b.n	800611e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060aa:	d121      	bne.n	80060f0 <DMA_CheckFifoParam+0xa8>
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d837      	bhi.n	8006122 <DMA_CheckFifoParam+0xda>
 80060b2:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <DMA_CheckFifoParam+0x70>)
 80060b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b8:	080060c9 	.word	0x080060c9
 80060bc:	080060cf 	.word	0x080060cf
 80060c0:	080060c9 	.word	0x080060c9
 80060c4:	080060e1 	.word	0x080060e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	73fb      	strb	r3, [r7, #15]
      break;
 80060cc:	e030      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d025      	beq.n	8006126 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060de:	e022      	b.n	8006126 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060e8:	d11f      	bne.n	800612a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060ee:	e01c      	b.n	800612a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d903      	bls.n	80060fe <DMA_CheckFifoParam+0xb6>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d003      	beq.n	8006104 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80060fc:	e018      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	73fb      	strb	r3, [r7, #15]
      break;
 8006102:	e015      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00e      	beq.n	800612e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	73fb      	strb	r3, [r7, #15]
      break;
 8006114:	e00b      	b.n	800612e <DMA_CheckFifoParam+0xe6>
      break;
 8006116:	bf00      	nop
 8006118:	e00a      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 800611a:	bf00      	nop
 800611c:	e008      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 800611e:	bf00      	nop
 8006120:	e006      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 8006122:	bf00      	nop
 8006124:	e004      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 8006126:	bf00      	nop
 8006128:	e002      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;   
 800612a:	bf00      	nop
 800612c:	e000      	b.n	8006130 <DMA_CheckFifoParam+0xe8>
      break;
 800612e:	bf00      	nop
    }
  } 
  
  return status; 
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop

08006140 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e039      	b.n	80061c6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fe fa58 	bl	800461c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006190:	f023 0107 	bic.w	r1, r3, #7
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061a6:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <HAL_DMA2D_Init+0x90>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	68d1      	ldr	r1, [r2, #12]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6812      	ldr	r2, [r2, #0]
 80061b2:	430b      	orrs	r3, r1
 80061b4:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	ffffc000 	.word	0xffffc000

080061d4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_DMA2D_Start+0x1c>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e018      	b.n	8006222 <HAL_DMA2D_Start+0x4e>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fa98 	bl	8006740 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006234:	2300      	movs	r3, #0
 8006236:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d056      	beq.n	80062f4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006246:	f7fe ffd7 	bl	80051f8 <HAL_GetTick>
 800624a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800624c:	e04b      	b.n	80062e6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800625c:	2b00      	cmp	r3, #0
 800625e:	d023      	beq.n	80062a8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626e:	f043 0202 	orr.w	r2, r3, #2
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006284:	f043 0201 	orr.w	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2221      	movs	r2, #33	; 0x21
 8006292:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2204      	movs	r2, #4
 8006298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0a5      	b.n	80063f4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d01a      	beq.n	80062e6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80062b0:	f7fe ffa2 	bl	80051f8 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d302      	bcc.n	80062c6 <HAL_DMA2D_PollForTransfer+0x9c>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10f      	bne.n	80062e6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ca:	f043 0220 	orr.w	r2, r3, #32
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2203      	movs	r2, #3
 80062d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e086      	b.n	80063f4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0ac      	beq.n	800624e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d061      	beq.n	80063da <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006316:	f7fe ff6f 	bl	80051f8 <HAL_GetTick>
 800631a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800631c:	e056      	b.n	80063cc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800632c:	2b00      	cmp	r3, #0
 800632e:	d02e      	beq.n	800638e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f003 0308 	and.w	r3, r3, #8
 8006336:	2b00      	cmp	r3, #0
 8006338:	d005      	beq.n	8006346 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633e:	f043 0204 	orr.w	r2, r3, #4
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006354:	f043 0202 	orr.w	r2, r3, #2
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d005      	beq.n	8006372 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636a:	f043 0201 	orr.w	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2229      	movs	r2, #41	; 0x29
 8006378:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2204      	movs	r2, #4
 800637e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e032      	b.n	80063f4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d01a      	beq.n	80063cc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006396:	f7fe ff2f 	bl	80051f8 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d302      	bcc.n	80063ac <HAL_DMA2D_PollForTransfer+0x182>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10f      	bne.n	80063cc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b0:	f043 0220 	orr.w	r2, r3, #32
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2203      	movs	r2, #3
 80063bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e013      	b.n	80063f4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0a1      	beq.n	800631e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2212      	movs	r2, #18
 80063e0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d026      	beq.n	800646c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006424:	2b00      	cmp	r3, #0
 8006426:	d021      	beq.n	800646c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006436:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643c:	f043 0201 	orr.w	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2201      	movs	r2, #1
 800644a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2204      	movs	r2, #4
 8006450:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d026      	beq.n	80064c4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d021      	beq.n	80064c4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800648e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2220      	movs	r2, #32
 8006496:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649c:	f043 0202 	orr.w	r2, r3, #2
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2204      	movs	r2, #4
 80064a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 0308 	and.w	r3, r3, #8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d026      	beq.n	800651c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d021      	beq.n	800651c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064e6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2208      	movs	r2, #8
 80064ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	f043 0204 	orr.w	r2, r3, #4
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2204      	movs	r2, #4
 8006500:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f003 0304 	and.w	r3, r3, #4
 8006522:	2b00      	cmp	r3, #0
 8006524:	d013      	beq.n	800654e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00e      	beq.n	800654e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2204      	movs	r2, #4
 8006546:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f853 	bl	80065f4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d024      	beq.n	80065a2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01f      	beq.n	80065a2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006570:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2202      	movs	r2, #2
 8006578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d01f      	beq.n	80065ec <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d01a      	beq.n	80065ec <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065c4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2210      	movs	r2, #16
 80065cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f80e 	bl	8006608 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80065ec:	bf00      	nop
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_DMA2D_ConfigLayer+0x20>
 8006638:	2302      	movs	r3, #2
 800663a:	e079      	b.n	8006730 <HAL_DMA2D_ConfigLayer+0x114>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	011b      	lsls	r3, r3, #4
 8006650:	3318      	adds	r3, #24
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	4413      	add	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006666:	4b35      	ldr	r3, [pc, #212]	; (800673c <HAL_DMA2D_ConfigLayer+0x120>)
 8006668:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2b0a      	cmp	r3, #10
 8006670:	d003      	beq.n	800667a <HAL_DMA2D_ConfigLayer+0x5e>
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2b09      	cmp	r3, #9
 8006678:	d107      	bne.n	800668a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e005      	b.n	8006696 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	061b      	lsls	r3, r3, #24
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d120      	bne.n	80066de <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	43db      	mvns	r3, r3
 80066a6:	ea02 0103 	and.w	r1, r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	6812      	ldr	r2, [r2, #0]
 80066bc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b0a      	cmp	r3, #10
 80066c4:	d003      	beq.n	80066ce <HAL_DMA2D_ConfigLayer+0xb2>
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	d127      	bne.n	800671e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80066da:	629a      	str	r2, [r3, #40]	; 0x28
 80066dc:	e01f      	b.n	800671e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69da      	ldr	r2, [r3, #28]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	43db      	mvns	r3, r3
 80066e8:	ea02 0103 	and.w	r1, r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	6812      	ldr	r2, [r2, #0]
 80066fe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b0a      	cmp	r3, #10
 8006706:	d003      	beq.n	8006710 <HAL_DMA2D_ConfigLayer+0xf4>
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b09      	cmp	r3, #9
 800670e:	d106      	bne.n	800671e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800671c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	371c      	adds	r7, #28
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	ff03000f 	.word	0xff03000f

08006740 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006740:	b480      	push	{r7}
 8006742:	b08b      	sub	sp, #44	; 0x2c
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006754:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	041a      	lsls	r2, r3, #16
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	431a      	orrs	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006778:	d174      	bne.n	8006864 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006780:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006788:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006790:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d108      	bne.n	80067b2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	431a      	orrs	r2, r3
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
 80067b0:	e053      	b.n	800685a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d106      	bne.n	80067c8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	4313      	orrs	r3, r2
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
 80067c6:	e048      	b.n	800685a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d111      	bne.n	80067f4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	0cdb      	lsrs	r3, r3, #19
 80067d4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	0a9b      	lsrs	r3, r3, #10
 80067da:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	08db      	lsrs	r3, r3, #3
 80067e0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	02db      	lsls	r3, r3, #11
 80067ea:	4313      	orrs	r3, r2
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
 80067f2:	e032      	b.n	800685a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	2b03      	cmp	r3, #3
 80067fa:	d117      	bne.n	800682c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	0fdb      	lsrs	r3, r3, #31
 8006800:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	0cdb      	lsrs	r3, r3, #19
 8006806:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	0adb      	lsrs	r3, r3, #11
 800680c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	08db      	lsrs	r3, r3, #3
 8006812:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	029b      	lsls	r3, r3, #10
 800681c:	431a      	orrs	r2, r3
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	03db      	lsls	r3, r3, #15
 8006822:	4313      	orrs	r3, r2
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	627b      	str	r3, [r7, #36]	; 0x24
 800682a:	e016      	b.n	800685a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	0f1b      	lsrs	r3, r3, #28
 8006830:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	0d1b      	lsrs	r3, r3, #20
 8006836:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	0b1b      	lsrs	r3, r3, #12
 800683c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	091b      	lsrs	r3, r3, #4
 8006842:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	011a      	lsls	r2, r3, #4
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	431a      	orrs	r2, r3
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	031b      	lsls	r3, r3, #12
 8006852:	4313      	orrs	r3, r2
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006860:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006862:	e003      	b.n	800686c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	60da      	str	r2, [r3, #12]
}
 800686c:	bf00      	nop
 800686e:	372c      	adds	r7, #44	; 0x2c
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006878:	b480      	push	{r7}
 800687a:	b089      	sub	sp, #36	; 0x24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006882:	2300      	movs	r3, #0
 8006884:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800688a:	2300      	movs	r3, #0
 800688c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800688e:	2300      	movs	r3, #0
 8006890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006892:	2300      	movs	r3, #0
 8006894:	61fb      	str	r3, [r7, #28]
 8006896:	e175      	b.n	8006b84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006898:	2201      	movs	r2, #1
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	fa02 f303 	lsl.w	r3, r2, r3
 80068a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4013      	ands	r3, r2
 80068aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	f040 8164 	bne.w	8006b7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d005      	beq.n	80068ce <HAL_GPIO_Init+0x56>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d130      	bne.n	8006930 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	2203      	movs	r2, #3
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	43db      	mvns	r3, r3
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	4013      	ands	r3, r2
 80068e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006904:	2201      	movs	r2, #1
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	fa02 f303 	lsl.w	r3, r2, r3
 800690c:	43db      	mvns	r3, r3
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	4013      	ands	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	091b      	lsrs	r3, r3, #4
 800691a:	f003 0201 	and.w	r2, r3, #1
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	fa02 f303 	lsl.w	r3, r2, r3
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	4313      	orrs	r3, r2
 8006928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	2b03      	cmp	r3, #3
 800693a:	d017      	beq.n	800696c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	005b      	lsls	r3, r3, #1
 8006946:	2203      	movs	r2, #3
 8006948:	fa02 f303 	lsl.w	r3, r2, r3
 800694c:	43db      	mvns	r3, r3
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	4013      	ands	r3, r2
 8006952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	4313      	orrs	r3, r2
 8006964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d123      	bne.n	80069c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	08da      	lsrs	r2, r3, #3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3208      	adds	r2, #8
 8006980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	f003 0307 	and.w	r3, r3, #7
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	220f      	movs	r2, #15
 8006990:	fa02 f303 	lsl.w	r3, r2, r3
 8006994:	43db      	mvns	r3, r3
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	4013      	ands	r3, r2
 800699a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	f003 0307 	and.w	r3, r3, #7
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	69ba      	ldr	r2, [r7, #24]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	08da      	lsrs	r2, r3, #3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3208      	adds	r2, #8
 80069ba:	69b9      	ldr	r1, [r7, #24]
 80069bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	2203      	movs	r2, #3
 80069cc:	fa02 f303 	lsl.w	r3, r2, r3
 80069d0:	43db      	mvns	r3, r3
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	4013      	ands	r3, r2
 80069d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f003 0203 	and.w	r2, r3, #3
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	fa02 f303 	lsl.w	r3, r2, r3
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 80be 	beq.w	8006b7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a02:	4b66      	ldr	r3, [pc, #408]	; (8006b9c <HAL_GPIO_Init+0x324>)
 8006a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a06:	4a65      	ldr	r2, [pc, #404]	; (8006b9c <HAL_GPIO_Init+0x324>)
 8006a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8006a0e:	4b63      	ldr	r3, [pc, #396]	; (8006b9c <HAL_GPIO_Init+0x324>)
 8006a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006a1a:	4a61      	ldr	r2, [pc, #388]	; (8006ba0 <HAL_GPIO_Init+0x328>)
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	089b      	lsrs	r3, r3, #2
 8006a20:	3302      	adds	r3, #2
 8006a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	220f      	movs	r2, #15
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	43db      	mvns	r3, r3
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a58      	ldr	r2, [pc, #352]	; (8006ba4 <HAL_GPIO_Init+0x32c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d037      	beq.n	8006ab6 <HAL_GPIO_Init+0x23e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a57      	ldr	r2, [pc, #348]	; (8006ba8 <HAL_GPIO_Init+0x330>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d031      	beq.n	8006ab2 <HAL_GPIO_Init+0x23a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a56      	ldr	r2, [pc, #344]	; (8006bac <HAL_GPIO_Init+0x334>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d02b      	beq.n	8006aae <HAL_GPIO_Init+0x236>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a55      	ldr	r2, [pc, #340]	; (8006bb0 <HAL_GPIO_Init+0x338>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d025      	beq.n	8006aaa <HAL_GPIO_Init+0x232>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a54      	ldr	r2, [pc, #336]	; (8006bb4 <HAL_GPIO_Init+0x33c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d01f      	beq.n	8006aa6 <HAL_GPIO_Init+0x22e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a53      	ldr	r2, [pc, #332]	; (8006bb8 <HAL_GPIO_Init+0x340>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d019      	beq.n	8006aa2 <HAL_GPIO_Init+0x22a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a52      	ldr	r2, [pc, #328]	; (8006bbc <HAL_GPIO_Init+0x344>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d013      	beq.n	8006a9e <HAL_GPIO_Init+0x226>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a51      	ldr	r2, [pc, #324]	; (8006bc0 <HAL_GPIO_Init+0x348>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d00d      	beq.n	8006a9a <HAL_GPIO_Init+0x222>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a50      	ldr	r2, [pc, #320]	; (8006bc4 <HAL_GPIO_Init+0x34c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d007      	beq.n	8006a96 <HAL_GPIO_Init+0x21e>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a4f      	ldr	r2, [pc, #316]	; (8006bc8 <HAL_GPIO_Init+0x350>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d101      	bne.n	8006a92 <HAL_GPIO_Init+0x21a>
 8006a8e:	2309      	movs	r3, #9
 8006a90:	e012      	b.n	8006ab8 <HAL_GPIO_Init+0x240>
 8006a92:	230a      	movs	r3, #10
 8006a94:	e010      	b.n	8006ab8 <HAL_GPIO_Init+0x240>
 8006a96:	2308      	movs	r3, #8
 8006a98:	e00e      	b.n	8006ab8 <HAL_GPIO_Init+0x240>
 8006a9a:	2307      	movs	r3, #7
 8006a9c:	e00c      	b.n	8006ab8 <HAL_GPIO_Init+0x240>
 8006a9e:	2306      	movs	r3, #6
 8006aa0:	e00a      	b.n	8006ab8 <HAL_GPIO_Init+0x240>
 8006aa2:	2305      	movs	r3, #5
 8006aa4:	e008      	b.n	8006ab8 <HAL_GPIO_Init+0x240>
 8006aa6:	2304      	movs	r3, #4
 8006aa8:	e006      	b.n	8006ab8 <HAL_GPIO_Init+0x240>
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e004      	b.n	8006ab8 <HAL_GPIO_Init+0x240>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e002      	b.n	8006ab8 <HAL_GPIO_Init+0x240>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <HAL_GPIO_Init+0x240>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	69fa      	ldr	r2, [r7, #28]
 8006aba:	f002 0203 	and.w	r2, r2, #3
 8006abe:	0092      	lsls	r2, r2, #2
 8006ac0:	4093      	lsls	r3, r2
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006ac8:	4935      	ldr	r1, [pc, #212]	; (8006ba0 <HAL_GPIO_Init+0x328>)
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	089b      	lsrs	r3, r3, #2
 8006ace:	3302      	adds	r3, #2
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ad6:	4b3d      	ldr	r3, [pc, #244]	; (8006bcc <HAL_GPIO_Init+0x354>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006afa:	4a34      	ldr	r2, [pc, #208]	; (8006bcc <HAL_GPIO_Init+0x354>)
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b00:	4b32      	ldr	r3, [pc, #200]	; (8006bcc <HAL_GPIO_Init+0x354>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b24:	4a29      	ldr	r2, [pc, #164]	; (8006bcc <HAL_GPIO_Init+0x354>)
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b2a:	4b28      	ldr	r3, [pc, #160]	; (8006bcc <HAL_GPIO_Init+0x354>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	43db      	mvns	r3, r3
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	4013      	ands	r3, r2
 8006b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b4e:	4a1f      	ldr	r2, [pc, #124]	; (8006bcc <HAL_GPIO_Init+0x354>)
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b54:	4b1d      	ldr	r3, [pc, #116]	; (8006bcc <HAL_GPIO_Init+0x354>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	4013      	ands	r3, r2
 8006b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b78:	4a14      	ldr	r2, [pc, #80]	; (8006bcc <HAL_GPIO_Init+0x354>)
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	3301      	adds	r3, #1
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	2b0f      	cmp	r3, #15
 8006b88:	f67f ae86 	bls.w	8006898 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	3724      	adds	r7, #36	; 0x24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	40013800 	.word	0x40013800
 8006ba4:	40020000 	.word	0x40020000
 8006ba8:	40020400 	.word	0x40020400
 8006bac:	40020800 	.word	0x40020800
 8006bb0:	40020c00 	.word	0x40020c00
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	40021400 	.word	0x40021400
 8006bbc:	40021800 	.word	0x40021800
 8006bc0:	40021c00 	.word	0x40021c00
 8006bc4:	40022000 	.word	0x40022000
 8006bc8:	40022400 	.word	0x40022400
 8006bcc:	40013c00 	.word	0x40013c00

08006bd0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	e0d9      	b.n	8006da0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006bec:	2201      	movs	r2, #1
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006bf6:	683a      	ldr	r2, [r7, #0]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	f040 80c9 	bne.w	8006d9a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006c08:	4a6b      	ldr	r2, [pc, #428]	; (8006db8 <HAL_GPIO_DeInit+0x1e8>)
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	089b      	lsrs	r3, r3, #2
 8006c0e:	3302      	adds	r3, #2
 8006c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c14:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f003 0303 	and.w	r3, r3, #3
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	220f      	movs	r2, #15
 8006c20:	fa02 f303 	lsl.w	r3, r2, r3
 8006c24:	68ba      	ldr	r2, [r7, #8]
 8006c26:	4013      	ands	r3, r2
 8006c28:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a63      	ldr	r2, [pc, #396]	; (8006dbc <HAL_GPIO_DeInit+0x1ec>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d037      	beq.n	8006ca2 <HAL_GPIO_DeInit+0xd2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a62      	ldr	r2, [pc, #392]	; (8006dc0 <HAL_GPIO_DeInit+0x1f0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d031      	beq.n	8006c9e <HAL_GPIO_DeInit+0xce>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a61      	ldr	r2, [pc, #388]	; (8006dc4 <HAL_GPIO_DeInit+0x1f4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d02b      	beq.n	8006c9a <HAL_GPIO_DeInit+0xca>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a60      	ldr	r2, [pc, #384]	; (8006dc8 <HAL_GPIO_DeInit+0x1f8>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d025      	beq.n	8006c96 <HAL_GPIO_DeInit+0xc6>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a5f      	ldr	r2, [pc, #380]	; (8006dcc <HAL_GPIO_DeInit+0x1fc>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d01f      	beq.n	8006c92 <HAL_GPIO_DeInit+0xc2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a5e      	ldr	r2, [pc, #376]	; (8006dd0 <HAL_GPIO_DeInit+0x200>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d019      	beq.n	8006c8e <HAL_GPIO_DeInit+0xbe>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a5d      	ldr	r2, [pc, #372]	; (8006dd4 <HAL_GPIO_DeInit+0x204>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d013      	beq.n	8006c8a <HAL_GPIO_DeInit+0xba>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a5c      	ldr	r2, [pc, #368]	; (8006dd8 <HAL_GPIO_DeInit+0x208>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00d      	beq.n	8006c86 <HAL_GPIO_DeInit+0xb6>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a5b      	ldr	r2, [pc, #364]	; (8006ddc <HAL_GPIO_DeInit+0x20c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d007      	beq.n	8006c82 <HAL_GPIO_DeInit+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a5a      	ldr	r2, [pc, #360]	; (8006de0 <HAL_GPIO_DeInit+0x210>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d101      	bne.n	8006c7e <HAL_GPIO_DeInit+0xae>
 8006c7a:	2309      	movs	r3, #9
 8006c7c:	e012      	b.n	8006ca4 <HAL_GPIO_DeInit+0xd4>
 8006c7e:	230a      	movs	r3, #10
 8006c80:	e010      	b.n	8006ca4 <HAL_GPIO_DeInit+0xd4>
 8006c82:	2308      	movs	r3, #8
 8006c84:	e00e      	b.n	8006ca4 <HAL_GPIO_DeInit+0xd4>
 8006c86:	2307      	movs	r3, #7
 8006c88:	e00c      	b.n	8006ca4 <HAL_GPIO_DeInit+0xd4>
 8006c8a:	2306      	movs	r3, #6
 8006c8c:	e00a      	b.n	8006ca4 <HAL_GPIO_DeInit+0xd4>
 8006c8e:	2305      	movs	r3, #5
 8006c90:	e008      	b.n	8006ca4 <HAL_GPIO_DeInit+0xd4>
 8006c92:	2304      	movs	r3, #4
 8006c94:	e006      	b.n	8006ca4 <HAL_GPIO_DeInit+0xd4>
 8006c96:	2303      	movs	r3, #3
 8006c98:	e004      	b.n	8006ca4 <HAL_GPIO_DeInit+0xd4>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e002      	b.n	8006ca4 <HAL_GPIO_DeInit+0xd4>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e000      	b.n	8006ca4 <HAL_GPIO_DeInit+0xd4>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	f002 0203 	and.w	r2, r2, #3
 8006caa:	0092      	lsls	r2, r2, #2
 8006cac:	4093      	lsls	r3, r2
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d132      	bne.n	8006d1a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006cb4:	4b4b      	ldr	r3, [pc, #300]	; (8006de4 <HAL_GPIO_DeInit+0x214>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	43db      	mvns	r3, r3
 8006cbc:	4949      	ldr	r1, [pc, #292]	; (8006de4 <HAL_GPIO_DeInit+0x214>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006cc2:	4b48      	ldr	r3, [pc, #288]	; (8006de4 <HAL_GPIO_DeInit+0x214>)
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	4946      	ldr	r1, [pc, #280]	; (8006de4 <HAL_GPIO_DeInit+0x214>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006cd0:	4b44      	ldr	r3, [pc, #272]	; (8006de4 <HAL_GPIO_DeInit+0x214>)
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	43db      	mvns	r3, r3
 8006cd8:	4942      	ldr	r1, [pc, #264]	; (8006de4 <HAL_GPIO_DeInit+0x214>)
 8006cda:	4013      	ands	r3, r2
 8006cdc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006cde:	4b41      	ldr	r3, [pc, #260]	; (8006de4 <HAL_GPIO_DeInit+0x214>)
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	43db      	mvns	r3, r3
 8006ce6:	493f      	ldr	r1, [pc, #252]	; (8006de4 <HAL_GPIO_DeInit+0x214>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	220f      	movs	r2, #15
 8006cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006cfc:	4a2e      	ldr	r2, [pc, #184]	; (8006db8 <HAL_GPIO_DeInit+0x1e8>)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	089b      	lsrs	r3, r3, #2
 8006d02:	3302      	adds	r3, #2
 8006d04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	43da      	mvns	r2, r3
 8006d0c:	482a      	ldr	r0, [pc, #168]	; (8006db8 <HAL_GPIO_DeInit+0x1e8>)
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	089b      	lsrs	r3, r3, #2
 8006d12:	400a      	ands	r2, r1
 8006d14:	3302      	adds	r3, #2
 8006d16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	2103      	movs	r1, #3
 8006d24:	fa01 f303 	lsl.w	r3, r1, r3
 8006d28:	43db      	mvns	r3, r3
 8006d2a:	401a      	ands	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	08da      	lsrs	r2, r3, #3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3208      	adds	r2, #8
 8006d38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	220f      	movs	r2, #15
 8006d46:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4a:	43db      	mvns	r3, r3
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	08d2      	lsrs	r2, r2, #3
 8006d50:	4019      	ands	r1, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3208      	adds	r2, #8
 8006d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	005b      	lsls	r3, r3, #1
 8006d62:	2103      	movs	r1, #3
 8006d64:	fa01 f303 	lsl.w	r3, r1, r3
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	401a      	ands	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685a      	ldr	r2, [r3, #4]
 8006d74:	2101      	movs	r1, #1
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7c:	43db      	mvns	r3, r3
 8006d7e:	401a      	ands	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	2103      	movs	r1, #3
 8006d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d92:	43db      	mvns	r3, r3
 8006d94:	401a      	ands	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2b0f      	cmp	r3, #15
 8006da4:	f67f af22 	bls.w	8006bec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40013800 	.word	0x40013800
 8006dbc:	40020000 	.word	0x40020000
 8006dc0:	40020400 	.word	0x40020400
 8006dc4:	40020800 	.word	0x40020800
 8006dc8:	40020c00 	.word	0x40020c00
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	40021400 	.word	0x40021400
 8006dd4:	40021800 	.word	0x40021800
 8006dd8:	40021c00 	.word	0x40021c00
 8006ddc:	40022000 	.word	0x40022000
 8006de0:	40022400 	.word	0x40022400
 8006de4:	40013c00 	.word	0x40013c00

08006de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	807b      	strh	r3, [r7, #2]
 8006df4:	4613      	mov	r3, r2
 8006df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006df8:	787b      	ldrb	r3, [r7, #1]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dfe:	887a      	ldrh	r2, [r7, #2]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006e04:	e003      	b.n	8006e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006e06:	887b      	ldrh	r3, [r7, #2]
 8006e08:	041a      	lsls	r2, r3, #16
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	619a      	str	r2, [r3, #24]
}
 8006e0e:	bf00      	nop
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e2c:	887a      	ldrh	r2, [r7, #2]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4013      	ands	r3, r2
 8006e32:	041a      	lsls	r2, r3, #16
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	43d9      	mvns	r1, r3
 8006e38:	887b      	ldrh	r3, [r7, #2]
 8006e3a:	400b      	ands	r3, r1
 8006e3c:	431a      	orrs	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	619a      	str	r2, [r3, #24]
}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
	...

08006e50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	4603      	mov	r3, r0
 8006e58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006e5a:	4b08      	ldr	r3, [pc, #32]	; (8006e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e5c:	695a      	ldr	r2, [r3, #20]
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	4013      	ands	r3, r2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d006      	beq.n	8006e74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e66:	4a05      	ldr	r2, [pc, #20]	; (8006e7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e68:	88fb      	ldrh	r3, [r7, #6]
 8006e6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e6c:	88fb      	ldrh	r3, [r7, #6]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fb fb04 	bl	800247c <HAL_GPIO_EXTI_Callback>
  }
}
 8006e74:	bf00      	nop
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	40013c00 	.word	0x40013c00

08006e80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e07f      	b.n	8006f92 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fd fbde 	bl	8004668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2224      	movs	r2, #36	; 0x24
 8006eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f022 0201 	bic.w	r2, r2, #1
 8006ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ed0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ee0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d107      	bne.n	8006efa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ef6:	609a      	str	r2, [r3, #8]
 8006ef8:	e006      	b.n	8006f08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689a      	ldr	r2, [r3, #8]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006f06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d104      	bne.n	8006f1a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f18:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6859      	ldr	r1, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	4b1d      	ldr	r3, [pc, #116]	; (8006f9c <HAL_I2C_Init+0x11c>)
 8006f26:	430b      	orrs	r3, r1
 8006f28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691a      	ldr	r2, [r3, #16]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	69d9      	ldr	r1, [r3, #28]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a1a      	ldr	r2, [r3, #32]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3708      	adds	r7, #8
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	02008000 	.word	0x02008000

08006fa0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e021      	b.n	8006ff6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2224      	movs	r2, #36	; 0x24
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0201 	bic.w	r2, r2, #1
 8006fc8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fd fbf4 	bl	80047b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af02      	add	r7, sp, #8
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	4608      	mov	r0, r1
 800700a:	4611      	mov	r1, r2
 800700c:	461a      	mov	r2, r3
 800700e:	4603      	mov	r3, r0
 8007010:	817b      	strh	r3, [r7, #10]
 8007012:	460b      	mov	r3, r1
 8007014:	813b      	strh	r3, [r7, #8]
 8007016:	4613      	mov	r3, r2
 8007018:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b20      	cmp	r3, #32
 8007024:	f040 80f9 	bne.w	800721a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <HAL_I2C_Mem_Write+0x34>
 800702e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007030:	2b00      	cmp	r3, #0
 8007032:	d105      	bne.n	8007040 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800703a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e0ed      	b.n	800721c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007046:	2b01      	cmp	r3, #1
 8007048:	d101      	bne.n	800704e <HAL_I2C_Mem_Write+0x4e>
 800704a:	2302      	movs	r3, #2
 800704c:	e0e6      	b.n	800721c <HAL_I2C_Mem_Write+0x21c>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007056:	f7fe f8cf 	bl	80051f8 <HAL_GetTick>
 800705a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	2319      	movs	r3, #25
 8007062:	2201      	movs	r2, #1
 8007064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 fad1 	bl	8007610 <I2C_WaitOnFlagUntilTimeout>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0d1      	b.n	800721c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2221      	movs	r2, #33	; 0x21
 800707c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2240      	movs	r2, #64	; 0x40
 8007084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a3a      	ldr	r2, [r7, #32]
 8007092:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007098:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80070a0:	88f8      	ldrh	r0, [r7, #6]
 80070a2:	893a      	ldrh	r2, [r7, #8]
 80070a4:	8979      	ldrh	r1, [r7, #10]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	4603      	mov	r3, r0
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 f9e1 	bl	8007478 <I2C_RequestMemoryWrite>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e0a9      	b.n	800721c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2bff      	cmp	r3, #255	; 0xff
 80070d0:	d90e      	bls.n	80070f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	22ff      	movs	r2, #255	; 0xff
 80070d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	8979      	ldrh	r1, [r7, #10]
 80070e0:	2300      	movs	r3, #0
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 fc39 	bl	8007960 <I2C_TransferConfig>
 80070ee:	e00f      	b.n	8007110 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f4:	b29a      	uxth	r2, r3
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	8979      	ldrh	r1, [r7, #10]
 8007102:	2300      	movs	r3, #0
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 fc28 	bl	8007960 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 fabb 	bl	8007690 <I2C_WaitOnTXISFlagUntilTimeout>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e07b      	b.n	800721c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	781a      	ldrb	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b01      	subs	r3, #1
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714c:	3b01      	subs	r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007158:	b29b      	uxth	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d034      	beq.n	80071c8 <HAL_I2C_Mem_Write+0x1c8>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d130      	bne.n	80071c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	2200      	movs	r2, #0
 800716e:	2180      	movs	r1, #128	; 0x80
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 fa4d 	bl	8007610 <I2C_WaitOnFlagUntilTimeout>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e04d      	b.n	800721c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007184:	b29b      	uxth	r3, r3
 8007186:	2bff      	cmp	r3, #255	; 0xff
 8007188:	d90e      	bls.n	80071a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	22ff      	movs	r2, #255	; 0xff
 800718e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007194:	b2da      	uxtb	r2, r3
 8007196:	8979      	ldrh	r1, [r7, #10]
 8007198:	2300      	movs	r3, #0
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 fbdd 	bl	8007960 <I2C_TransferConfig>
 80071a6:	e00f      	b.n	80071c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	8979      	ldrh	r1, [r7, #10]
 80071ba:	2300      	movs	r3, #0
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fbcc 	bl	8007960 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d19e      	bne.n	8007110 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 fa9a 	bl	8007710 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e01a      	b.n	800721c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2220      	movs	r2, #32
 80071ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6859      	ldr	r1, [r3, #4]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <HAL_I2C_Mem_Write+0x224>)
 80071fa:	400b      	ands	r3, r1
 80071fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	e000      	b.n	800721c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800721a:	2302      	movs	r3, #2
  }
}
 800721c:	4618      	mov	r0, r3
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	fe00e800 	.word	0xfe00e800

08007228 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af02      	add	r7, sp, #8
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	4608      	mov	r0, r1
 8007232:	4611      	mov	r1, r2
 8007234:	461a      	mov	r2, r3
 8007236:	4603      	mov	r3, r0
 8007238:	817b      	strh	r3, [r7, #10]
 800723a:	460b      	mov	r3, r1
 800723c:	813b      	strh	r3, [r7, #8]
 800723e:	4613      	mov	r3, r2
 8007240:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b20      	cmp	r3, #32
 800724c:	f040 80fd 	bne.w	800744a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <HAL_I2C_Mem_Read+0x34>
 8007256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007258:	2b00      	cmp	r3, #0
 800725a:	d105      	bne.n	8007268 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007262:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e0f1      	b.n	800744c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800726e:	2b01      	cmp	r3, #1
 8007270:	d101      	bne.n	8007276 <HAL_I2C_Mem_Read+0x4e>
 8007272:	2302      	movs	r3, #2
 8007274:	e0ea      	b.n	800744c <HAL_I2C_Mem_Read+0x224>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800727e:	f7fd ffbb 	bl	80051f8 <HAL_GetTick>
 8007282:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	2319      	movs	r3, #25
 800728a:	2201      	movs	r2, #1
 800728c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f9bd 	bl	8007610 <I2C_WaitOnFlagUntilTimeout>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e0d5      	b.n	800744c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2222      	movs	r2, #34	; 0x22
 80072a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2240      	movs	r2, #64	; 0x40
 80072ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6a3a      	ldr	r2, [r7, #32]
 80072ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072c8:	88f8      	ldrh	r0, [r7, #6]
 80072ca:	893a      	ldrh	r2, [r7, #8]
 80072cc:	8979      	ldrh	r1, [r7, #10]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	4603      	mov	r3, r0
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f921 	bl	8007520 <I2C_RequestMemoryRead>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d005      	beq.n	80072f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e0ad      	b.n	800744c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2bff      	cmp	r3, #255	; 0xff
 80072f8:	d90e      	bls.n	8007318 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	22ff      	movs	r2, #255	; 0xff
 80072fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007304:	b2da      	uxtb	r2, r3
 8007306:	8979      	ldrh	r1, [r7, #10]
 8007308:	4b52      	ldr	r3, [pc, #328]	; (8007454 <HAL_I2C_Mem_Read+0x22c>)
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fb25 	bl	8007960 <I2C_TransferConfig>
 8007316:	e00f      	b.n	8007338 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731c:	b29a      	uxth	r2, r3
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007326:	b2da      	uxtb	r2, r3
 8007328:	8979      	ldrh	r1, [r7, #10]
 800732a:	4b4a      	ldr	r3, [pc, #296]	; (8007454 <HAL_I2C_Mem_Read+0x22c>)
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 fb14 	bl	8007960 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	2200      	movs	r2, #0
 8007340:	2104      	movs	r1, #4
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 f964 	bl	8007610 <I2C_WaitOnFlagUntilTimeout>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e07c      	b.n	800744c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	b2d2      	uxtb	r2, r2
 800735e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800736e:	3b01      	subs	r3, #1
 8007370:	b29a      	uxth	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007388:	b29b      	uxth	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d034      	beq.n	80073f8 <HAL_I2C_Mem_Read+0x1d0>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007392:	2b00      	cmp	r3, #0
 8007394:	d130      	bne.n	80073f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	2200      	movs	r2, #0
 800739e:	2180      	movs	r1, #128	; 0x80
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 f935 	bl	8007610 <I2C_WaitOnFlagUntilTimeout>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d001      	beq.n	80073b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e04d      	b.n	800744c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2bff      	cmp	r3, #255	; 0xff
 80073b8:	d90e      	bls.n	80073d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	22ff      	movs	r2, #255	; 0xff
 80073be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	8979      	ldrh	r1, [r7, #10]
 80073c8:	2300      	movs	r3, #0
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 fac5 	bl	8007960 <I2C_TransferConfig>
 80073d6:	e00f      	b.n	80073f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073dc:	b29a      	uxth	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	8979      	ldrh	r1, [r7, #10]
 80073ea:	2300      	movs	r3, #0
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 fab4 	bl	8007960 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d19a      	bne.n	8007338 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007402:	697a      	ldr	r2, [r7, #20]
 8007404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 f982 	bl	8007710 <I2C_WaitOnSTOPFlagUntilTimeout>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e01a      	b.n	800744c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2220      	movs	r2, #32
 800741c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6859      	ldr	r1, [r3, #4]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <HAL_I2C_Mem_Read+0x230>)
 800742a:	400b      	ands	r3, r1
 800742c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	e000      	b.n	800744c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800744a:	2302      	movs	r3, #2
  }
}
 800744c:	4618      	mov	r0, r3
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	80002400 	.word	0x80002400
 8007458:	fe00e800 	.word	0xfe00e800

0800745c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800746a:	b2db      	uxtb	r3, r3
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af02      	add	r7, sp, #8
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	4608      	mov	r0, r1
 8007482:	4611      	mov	r1, r2
 8007484:	461a      	mov	r2, r3
 8007486:	4603      	mov	r3, r0
 8007488:	817b      	strh	r3, [r7, #10]
 800748a:	460b      	mov	r3, r1
 800748c:	813b      	strh	r3, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007492:	88fb      	ldrh	r3, [r7, #6]
 8007494:	b2da      	uxtb	r2, r3
 8007496:	8979      	ldrh	r1, [r7, #10]
 8007498:	4b20      	ldr	r3, [pc, #128]	; (800751c <I2C_RequestMemoryWrite+0xa4>)
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fa5d 	bl	8007960 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	69b9      	ldr	r1, [r7, #24]
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 f8f0 	bl	8007690 <I2C_WaitOnTXISFlagUntilTimeout>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e02c      	b.n	8007514 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074ba:	88fb      	ldrh	r3, [r7, #6]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d105      	bne.n	80074cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074c0:	893b      	ldrh	r3, [r7, #8]
 80074c2:	b2da      	uxtb	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	629a      	str	r2, [r3, #40]	; 0x28
 80074ca:	e015      	b.n	80074f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80074cc:	893b      	ldrh	r3, [r7, #8]
 80074ce:	0a1b      	lsrs	r3, r3, #8
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	69b9      	ldr	r1, [r7, #24]
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 f8d6 	bl	8007690 <I2C_WaitOnTXISFlagUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e012      	b.n	8007514 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074ee:	893b      	ldrh	r3, [r7, #8]
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	2200      	movs	r2, #0
 8007500:	2180      	movs	r1, #128	; 0x80
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f884 	bl	8007610 <I2C_WaitOnFlagUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e000      	b.n	8007514 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	80002000 	.word	0x80002000

08007520 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af02      	add	r7, sp, #8
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	4608      	mov	r0, r1
 800752a:	4611      	mov	r1, r2
 800752c:	461a      	mov	r2, r3
 800752e:	4603      	mov	r3, r0
 8007530:	817b      	strh	r3, [r7, #10]
 8007532:	460b      	mov	r3, r1
 8007534:	813b      	strh	r3, [r7, #8]
 8007536:	4613      	mov	r3, r2
 8007538:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800753a:	88fb      	ldrh	r3, [r7, #6]
 800753c:	b2da      	uxtb	r2, r3
 800753e:	8979      	ldrh	r1, [r7, #10]
 8007540:	4b20      	ldr	r3, [pc, #128]	; (80075c4 <I2C_RequestMemoryRead+0xa4>)
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	2300      	movs	r3, #0
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 fa0a 	bl	8007960 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	69b9      	ldr	r1, [r7, #24]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f89d 	bl	8007690 <I2C_WaitOnTXISFlagUntilTimeout>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e02c      	b.n	80075ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007560:	88fb      	ldrh	r3, [r7, #6]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d105      	bne.n	8007572 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007566:	893b      	ldrh	r3, [r7, #8]
 8007568:	b2da      	uxtb	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	629a      	str	r2, [r3, #40]	; 0x28
 8007570:	e015      	b.n	800759e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007572:	893b      	ldrh	r3, [r7, #8]
 8007574:	0a1b      	lsrs	r3, r3, #8
 8007576:	b29b      	uxth	r3, r3
 8007578:	b2da      	uxtb	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	69b9      	ldr	r1, [r7, #24]
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 f883 	bl	8007690 <I2C_WaitOnTXISFlagUntilTimeout>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d001      	beq.n	8007594 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e012      	b.n	80075ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007594:	893b      	ldrh	r3, [r7, #8]
 8007596:	b2da      	uxtb	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	2200      	movs	r2, #0
 80075a6:	2140      	movs	r1, #64	; 0x40
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 f831 	bl	8007610 <I2C_WaitOnFlagUntilTimeout>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e000      	b.n	80075ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	80002000 	.word	0x80002000

080075c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d103      	bne.n	80075e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2200      	movs	r2, #0
 80075e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d007      	beq.n	8007604 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0201 	orr.w	r2, r2, #1
 8007602:	619a      	str	r2, [r3, #24]
  }
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	603b      	str	r3, [r7, #0]
 800761c:	4613      	mov	r3, r2
 800761e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007620:	e022      	b.n	8007668 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007628:	d01e      	beq.n	8007668 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800762a:	f7fd fde5 	bl	80051f8 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d302      	bcc.n	8007640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d113      	bne.n	8007668 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007644:	f043 0220 	orr.w	r2, r3, #32
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2220      	movs	r2, #32
 8007650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	e00f      	b.n	8007688 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	699a      	ldr	r2, [r3, #24]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	4013      	ands	r3, r2
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	429a      	cmp	r2, r3
 8007676:	bf0c      	ite	eq
 8007678:	2301      	moveq	r3, #1
 800767a:	2300      	movne	r3, #0
 800767c:	b2db      	uxtb	r3, r3
 800767e:	461a      	mov	r2, r3
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	429a      	cmp	r2, r3
 8007684:	d0cd      	beq.n	8007622 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800769c:	e02c      	b.n	80076f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	68b9      	ldr	r1, [r7, #8]
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 f870 	bl	8007788 <I2C_IsErrorOccurred>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e02a      	b.n	8007708 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d01e      	beq.n	80076f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ba:	f7fd fd9d 	bl	80051f8 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d302      	bcc.n	80076d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d113      	bne.n	80076f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d4:	f043 0220 	orr.w	r2, r3, #32
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2220      	movs	r2, #32
 80076e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e007      	b.n	8007708 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b02      	cmp	r3, #2
 8007704:	d1cb      	bne.n	800769e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800771c:	e028      	b.n	8007770 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	68b9      	ldr	r1, [r7, #8]
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 f830 	bl	8007788 <I2C_IsErrorOccurred>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e026      	b.n	8007780 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007732:	f7fd fd61 	bl	80051f8 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	429a      	cmp	r2, r3
 8007740:	d302      	bcc.n	8007748 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d113      	bne.n	8007770 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800774c:	f043 0220 	orr.w	r2, r3, #32
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2220      	movs	r2, #32
 8007758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e007      	b.n	8007780 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b20      	cmp	r3, #32
 800777c:	d1cf      	bne.n	800771e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08a      	sub	sp, #40	; 0x28
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	f003 0310 	and.w	r3, r3, #16
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d075      	beq.n	80078a0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2210      	movs	r2, #16
 80077ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80077bc:	e056      	b.n	800786c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c4:	d052      	beq.n	800786c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80077c6:	f7fd fd17 	bl	80051f8 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d302      	bcc.n	80077dc <I2C_IsErrorOccurred+0x54>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d147      	bne.n	800786c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077fe:	d12e      	bne.n	800785e <I2C_IsErrorOccurred+0xd6>
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007806:	d02a      	beq.n	800785e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007808:	7cfb      	ldrb	r3, [r7, #19]
 800780a:	2b20      	cmp	r3, #32
 800780c:	d027      	beq.n	800785e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800781c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800781e:	f7fd fceb 	bl	80051f8 <HAL_GetTick>
 8007822:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007824:	e01b      	b.n	800785e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007826:	f7fd fce7 	bl	80051f8 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	2b19      	cmp	r3, #25
 8007832:	d914      	bls.n	800785e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007838:	f043 0220 	orr.w	r2, r3, #32
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2220      	movs	r2, #32
 8007844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	f003 0320 	and.w	r3, r3, #32
 8007868:	2b20      	cmp	r3, #32
 800786a:	d1dc      	bne.n	8007826 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b20      	cmp	r3, #32
 8007878:	d003      	beq.n	8007882 <I2C_IsErrorOccurred+0xfa>
 800787a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800787e:	2b00      	cmp	r3, #0
 8007880:	d09d      	beq.n	80077be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007882:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007886:	2b00      	cmp	r3, #0
 8007888:	d103      	bne.n	8007892 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2220      	movs	r2, #32
 8007890:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	f043 0304 	orr.w	r3, r3, #4
 8007898:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	f043 0301 	orr.w	r3, r3, #1
 80078b8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00b      	beq.n	80078ec <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	f043 0308 	orr.w	r3, r3, #8
 80078da:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	f043 0302 	orr.w	r3, r3, #2
 80078fc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007906:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800790e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007912:	2b00      	cmp	r3, #0
 8007914:	d01c      	beq.n	8007950 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f7ff fe56 	bl	80075c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	6859      	ldr	r1, [r3, #4]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	4b0d      	ldr	r3, [pc, #52]	; (800795c <I2C_IsErrorOccurred+0x1d4>)
 8007928:	400b      	ands	r3, r1
 800792a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	431a      	orrs	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2220      	movs	r2, #32
 800793c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007954:	4618      	mov	r0, r3
 8007956:	3728      	adds	r7, #40	; 0x28
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	fe00e800 	.word	0xfe00e800

08007960 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	607b      	str	r3, [r7, #4]
 800796a:	460b      	mov	r3, r1
 800796c:	817b      	strh	r3, [r7, #10]
 800796e:	4613      	mov	r3, r2
 8007970:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007972:	897b      	ldrh	r3, [r7, #10]
 8007974:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007978:	7a7b      	ldrb	r3, [r7, #9]
 800797a:	041b      	lsls	r3, r3, #16
 800797c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007980:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	4313      	orrs	r3, r2
 800798a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800798e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	0d5b      	lsrs	r3, r3, #21
 800799a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800799e:	4b08      	ldr	r3, [pc, #32]	; (80079c0 <I2C_TransferConfig+0x60>)
 80079a0:	430b      	orrs	r3, r1
 80079a2:	43db      	mvns	r3, r3
 80079a4:	ea02 0103 	and.w	r1, r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	03ff63ff 	.word	0x03ff63ff

080079c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	d138      	bne.n	8007a4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d101      	bne.n	80079e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80079e4:	2302      	movs	r3, #2
 80079e6:	e032      	b.n	8007a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2224      	movs	r2, #36	; 0x24
 80079f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f022 0201 	bic.w	r2, r2, #1
 8007a06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6819      	ldr	r1, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0201 	orr.w	r2, r2, #1
 8007a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	e000      	b.n	8007a4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a4c:	2302      	movs	r3, #2
  }
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	d139      	bne.n	8007ae4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d101      	bne.n	8007a7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e033      	b.n	8007ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2224      	movs	r2, #36	; 0x24
 8007a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0201 	bic.w	r2, r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007aac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	021b      	lsls	r3, r3, #8
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f042 0201 	orr.w	r2, r2, #1
 8007ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	e000      	b.n	8007ae6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ae4:	2302      	movs	r3, #2
  }
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
	...

08007af4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e0bf      	b.n	8007c86 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7fc fe88 	bl	8004830 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699a      	ldr	r2, [r3, #24]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007b36:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6999      	ldr	r1, [r3, #24]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007b4c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6899      	ldr	r1, [r3, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	4b4a      	ldr	r3, [pc, #296]	; (8007c90 <HAL_LTDC_Init+0x19c>)
 8007b68:	400b      	ands	r3, r1
 8007b6a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	041b      	lsls	r3, r3, #16
 8007b72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6899      	ldr	r1, [r3, #8]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	699a      	ldr	r2, [r3, #24]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	431a      	orrs	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68d9      	ldr	r1, [r3, #12]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	4b3e      	ldr	r3, [pc, #248]	; (8007c90 <HAL_LTDC_Init+0x19c>)
 8007b96:	400b      	ands	r3, r1
 8007b98:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	041b      	lsls	r3, r3, #16
 8007ba0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68d9      	ldr	r1, [r3, #12]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a1a      	ldr	r2, [r3, #32]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6919      	ldr	r1, [r3, #16]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	4b33      	ldr	r3, [pc, #204]	; (8007c90 <HAL_LTDC_Init+0x19c>)
 8007bc4:	400b      	ands	r3, r1
 8007bc6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	041b      	lsls	r3, r3, #16
 8007bce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6919      	ldr	r1, [r3, #16]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6959      	ldr	r1, [r3, #20]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	4b27      	ldr	r3, [pc, #156]	; (8007c90 <HAL_LTDC_Init+0x19c>)
 8007bf2:	400b      	ands	r3, r1
 8007bf4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfa:	041b      	lsls	r3, r3, #16
 8007bfc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6959      	ldr	r1, [r3, #20]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007c24:	041b      	lsls	r3, r3, #16
 8007c26:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f042 0206 	orr.w	r2, r2, #6
 8007c62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	699a      	ldr	r2, [r3, #24]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f042 0201 	orr.w	r2, r2, #1
 8007c72:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	f000f800 	.word	0xf000f800

08007c94 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007caa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f003 0304 	and.w	r3, r3, #4
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d023      	beq.n	8007cfe <HAL_LTDC_IRQHandler+0x6a>
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d01e      	beq.n	8007cfe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 0204 	bic.w	r2, r2, #4
 8007cce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2204      	movs	r2, #4
 8007cd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007cde:	f043 0201 	orr.w	r2, r3, #1
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2204      	movs	r2, #4
 8007cec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f86f 	bl	8007ddc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d023      	beq.n	8007d50 <HAL_LTDC_IRQHandler+0xbc>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d01e      	beq.n	8007d50 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f022 0202 	bic.w	r2, r2, #2
 8007d20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2202      	movs	r2, #2
 8007d28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d30:	f043 0202 	orr.w	r2, r3, #2
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2204      	movs	r2, #4
 8007d3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f846 	bl	8007ddc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01b      	beq.n	8007d92 <HAL_LTDC_IRQHandler+0xfe>
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d016      	beq.n	8007d92 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0201 	bic.w	r2, r2, #1
 8007d72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f82f 	bl	8007df0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f003 0308 	and.w	r3, r3, #8
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d01b      	beq.n	8007dd4 <HAL_LTDC_IRQHandler+0x140>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f003 0308 	and.w	r3, r3, #8
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d016      	beq.n	8007dd4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0208 	bic.w	r2, r2, #8
 8007db4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2208      	movs	r2, #8
 8007dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f818 	bl	8007e04 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007dd4:	bf00      	nop
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007e18:	b5b0      	push	{r4, r5, r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d101      	bne.n	8007e32 <HAL_LTDC_ConfigLayer+0x1a>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e02c      	b.n	8007e8c <HAL_LTDC_ConfigLayer+0x74>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2134      	movs	r1, #52	; 0x34
 8007e48:	fb01 f303 	mul.w	r3, r1, r3
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	4614      	mov	r4, r2
 8007e56:	461d      	mov	r5, r3
 8007e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 f81f 	bl	8007eb0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2201      	movs	r2, #1
 8007e78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bdb0      	pop	{r4, r5, r7, pc}

08007e94 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007ea2:	b2db      	uxtb	r3, r3
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b089      	sub	sp, #36	; 0x24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	0c1b      	lsrs	r3, r3, #16
 8007ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ecc:	4413      	add	r3, r2
 8007ece:	041b      	lsls	r3, r3, #16
 8007ed0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	01db      	lsls	r3, r3, #7
 8007edc:	4413      	add	r3, r2
 8007ede:	3384      	adds	r3, #132	; 0x84
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	6812      	ldr	r2, [r2, #0]
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	01d2      	lsls	r2, r2, #7
 8007eec:	440a      	add	r2, r1
 8007eee:	3284      	adds	r2, #132	; 0x84
 8007ef0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007ef4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	0c1b      	lsrs	r3, r3, #16
 8007f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f06:	4413      	add	r3, r2
 8007f08:	1c5a      	adds	r2, r3, #1
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	01db      	lsls	r3, r3, #7
 8007f14:	440b      	add	r3, r1
 8007f16:	3384      	adds	r3, #132	; 0x84
 8007f18:	4619      	mov	r1, r3
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	68da      	ldr	r2, [r3, #12]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f2e:	4413      	add	r3, r2
 8007f30:	041b      	lsls	r3, r3, #16
 8007f32:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	461a      	mov	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	01db      	lsls	r3, r3, #7
 8007f3e:	4413      	add	r3, r2
 8007f40:	3384      	adds	r3, #132	; 0x84
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	6812      	ldr	r2, [r2, #0]
 8007f48:	4611      	mov	r1, r2
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	01d2      	lsls	r2, r2, #7
 8007f4e:	440a      	add	r2, r1
 8007f50:	3284      	adds	r2, #132	; 0x84
 8007f52:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007f56:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f66:	4413      	add	r3, r2
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	01db      	lsls	r3, r3, #7
 8007f74:	440b      	add	r3, r1
 8007f76:	3384      	adds	r3, #132	; 0x84
 8007f78:	4619      	mov	r1, r3
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	01db      	lsls	r3, r3, #7
 8007f8a:	4413      	add	r3, r2
 8007f8c:	3384      	adds	r3, #132	; 0x84
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	6812      	ldr	r2, [r2, #0]
 8007f94:	4611      	mov	r1, r2
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	01d2      	lsls	r2, r2, #7
 8007f9a:	440a      	add	r2, r1
 8007f9c:	3284      	adds	r2, #132	; 0x84
 8007f9e:	f023 0307 	bic.w	r3, r3, #7
 8007fa2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	01db      	lsls	r3, r3, #7
 8007fae:	4413      	add	r3, r2
 8007fb0:	3384      	adds	r3, #132	; 0x84
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007fc0:	021b      	lsls	r3, r3, #8
 8007fc2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007fca:	041b      	lsls	r3, r3, #16
 8007fcc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	061b      	lsls	r3, r3, #24
 8007fd4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	01db      	lsls	r3, r3, #7
 8007fe0:	4413      	add	r3, r2
 8007fe2:	3384      	adds	r3, #132	; 0x84
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	01db      	lsls	r3, r3, #7
 8007ff0:	4413      	add	r3, r2
 8007ff2:	3384      	adds	r3, #132	; 0x84
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008000:	461a      	mov	r2, r3
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	431a      	orrs	r2, r3
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	431a      	orrs	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4619      	mov	r1, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	01db      	lsls	r3, r3, #7
 8008014:	440b      	add	r3, r1
 8008016:	3384      	adds	r3, #132	; 0x84
 8008018:	4619      	mov	r1, r3
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	4313      	orrs	r3, r2
 800801e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	01db      	lsls	r3, r3, #7
 800802a:	4413      	add	r3, r2
 800802c:	3384      	adds	r3, #132	; 0x84
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	6812      	ldr	r2, [r2, #0]
 8008034:	4611      	mov	r1, r2
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	01d2      	lsls	r2, r2, #7
 800803a:	440a      	add	r2, r1
 800803c:	3284      	adds	r2, #132	; 0x84
 800803e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008042:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	01db      	lsls	r3, r3, #7
 800804e:	4413      	add	r3, r2
 8008050:	3384      	adds	r3, #132	; 0x84
 8008052:	461a      	mov	r2, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	01db      	lsls	r3, r3, #7
 8008064:	4413      	add	r3, r2
 8008066:	3384      	adds	r3, #132	; 0x84
 8008068:	69da      	ldr	r2, [r3, #28]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4619      	mov	r1, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	01db      	lsls	r3, r3, #7
 8008074:	440b      	add	r3, r1
 8008076:	3384      	adds	r3, #132	; 0x84
 8008078:	4619      	mov	r1, r3
 800807a:	4b58      	ldr	r3, [pc, #352]	; (80081dc <LTDC_SetConfig+0x32c>)
 800807c:	4013      	ands	r3, r2
 800807e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	69da      	ldr	r2, [r3, #28]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	68f9      	ldr	r1, [r7, #12]
 800808a:	6809      	ldr	r1, [r1, #0]
 800808c:	4608      	mov	r0, r1
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	01c9      	lsls	r1, r1, #7
 8008092:	4401      	add	r1, r0
 8008094:	3184      	adds	r1, #132	; 0x84
 8008096:	4313      	orrs	r3, r2
 8008098:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	01db      	lsls	r3, r3, #7
 80080a4:	4413      	add	r3, r2
 80080a6:	3384      	adds	r3, #132	; 0x84
 80080a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	01db      	lsls	r3, r3, #7
 80080b4:	4413      	add	r3, r2
 80080b6:	3384      	adds	r3, #132	; 0x84
 80080b8:	461a      	mov	r2, r3
 80080ba:	2300      	movs	r3, #0
 80080bc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	461a      	mov	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	01db      	lsls	r3, r3, #7
 80080c8:	4413      	add	r3, r2
 80080ca:	3384      	adds	r3, #132	; 0x84
 80080cc:	461a      	mov	r2, r3
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d102      	bne.n	80080e2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80080dc:	2304      	movs	r3, #4
 80080de:	61fb      	str	r3, [r7, #28]
 80080e0:	e01b      	b.n	800811a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d102      	bne.n	80080f0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80080ea:	2303      	movs	r3, #3
 80080ec:	61fb      	str	r3, [r7, #28]
 80080ee:	e014      	b.n	800811a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	d00b      	beq.n	8008110 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d007      	beq.n	8008110 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008104:	2b03      	cmp	r3, #3
 8008106:	d003      	beq.n	8008110 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800810c:	2b07      	cmp	r3, #7
 800810e:	d102      	bne.n	8008116 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008110:	2302      	movs	r3, #2
 8008112:	61fb      	str	r3, [r7, #28]
 8008114:	e001      	b.n	800811a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008116:	2301      	movs	r3, #1
 8008118:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	01db      	lsls	r3, r3, #7
 8008124:	4413      	add	r3, r2
 8008126:	3384      	adds	r3, #132	; 0x84
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	6812      	ldr	r2, [r2, #0]
 800812e:	4611      	mov	r1, r2
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	01d2      	lsls	r2, r2, #7
 8008134:	440a      	add	r2, r1
 8008136:	3284      	adds	r2, #132	; 0x84
 8008138:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800813c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008142:	69fa      	ldr	r2, [r7, #28]
 8008144:	fb02 f303 	mul.w	r3, r2, r3
 8008148:	041a      	lsls	r2, r3, #16
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	6859      	ldr	r1, [r3, #4]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	1acb      	subs	r3, r1, r3
 8008154:	69f9      	ldr	r1, [r7, #28]
 8008156:	fb01 f303 	mul.w	r3, r1, r3
 800815a:	3303      	adds	r3, #3
 800815c:	68f9      	ldr	r1, [r7, #12]
 800815e:	6809      	ldr	r1, [r1, #0]
 8008160:	4608      	mov	r0, r1
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	01c9      	lsls	r1, r1, #7
 8008166:	4401      	add	r1, r0
 8008168:	3184      	adds	r1, #132	; 0x84
 800816a:	4313      	orrs	r3, r2
 800816c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	461a      	mov	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	01db      	lsls	r3, r3, #7
 8008178:	4413      	add	r3, r2
 800817a:	3384      	adds	r3, #132	; 0x84
 800817c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4619      	mov	r1, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	01db      	lsls	r3, r3, #7
 8008188:	440b      	add	r3, r1
 800818a:	3384      	adds	r3, #132	; 0x84
 800818c:	4619      	mov	r1, r3
 800818e:	4b14      	ldr	r3, [pc, #80]	; (80081e0 <LTDC_SetConfig+0x330>)
 8008190:	4013      	ands	r3, r2
 8008192:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	461a      	mov	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	01db      	lsls	r3, r3, #7
 800819e:	4413      	add	r3, r2
 80081a0:	3384      	adds	r3, #132	; 0x84
 80081a2:	461a      	mov	r2, r3
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	01db      	lsls	r3, r3, #7
 80081b4:	4413      	add	r3, r2
 80081b6:	3384      	adds	r3, #132	; 0x84
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	6812      	ldr	r2, [r2, #0]
 80081be:	4611      	mov	r1, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	01d2      	lsls	r2, r2, #7
 80081c4:	440a      	add	r2, r1
 80081c6:	3284      	adds	r2, #132	; 0x84
 80081c8:	f043 0301 	orr.w	r3, r3, #1
 80081cc:	6013      	str	r3, [r2, #0]
}
 80081ce:	bf00      	nop
 80081d0:	3724      	adds	r7, #36	; 0x24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	fffff8f8 	.word	0xfffff8f8
 80081e0:	fffff800 	.word	0xfffff800

080081e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081e8:	4b05      	ldr	r3, [pc, #20]	; (8008200 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a04      	ldr	r2, [pc, #16]	; (8008200 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80081ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081f2:	6013      	str	r3, [r2, #0]
}
 80081f4:	bf00      	nop
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	40007000 	.word	0x40007000

08008204 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b082      	sub	sp, #8
 8008208:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800820e:	4b23      	ldr	r3, [pc, #140]	; (800829c <HAL_PWREx_EnableOverDrive+0x98>)
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	4a22      	ldr	r2, [pc, #136]	; (800829c <HAL_PWREx_EnableOverDrive+0x98>)
 8008214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008218:	6413      	str	r3, [r2, #64]	; 0x40
 800821a:	4b20      	ldr	r3, [pc, #128]	; (800829c <HAL_PWREx_EnableOverDrive+0x98>)
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008226:	4b1e      	ldr	r3, [pc, #120]	; (80082a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a1d      	ldr	r2, [pc, #116]	; (80082a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800822c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008230:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008232:	f7fc ffe1 	bl	80051f8 <HAL_GetTick>
 8008236:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008238:	e009      	b.n	800824e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800823a:	f7fc ffdd 	bl	80051f8 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008248:	d901      	bls.n	800824e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e022      	b.n	8008294 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800824e:	4b14      	ldr	r3, [pc, #80]	; (80082a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800825a:	d1ee      	bne.n	800823a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800825c:	4b10      	ldr	r3, [pc, #64]	; (80082a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a0f      	ldr	r2, [pc, #60]	; (80082a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008266:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008268:	f7fc ffc6 	bl	80051f8 <HAL_GetTick>
 800826c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800826e:	e009      	b.n	8008284 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008270:	f7fc ffc2 	bl	80051f8 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800827e:	d901      	bls.n	8008284 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e007      	b.n	8008294 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008284:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800828c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008290:	d1ee      	bne.n	8008270 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	40023800 	.word	0x40023800
 80082a0:	40007000 	.word	0x40007000

080082a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80082ac:	2300      	movs	r3, #0
 80082ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e291      	b.n	80087de <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 8087 	beq.w	80083d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082c8:	4b96      	ldr	r3, [pc, #600]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f003 030c 	and.w	r3, r3, #12
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d00c      	beq.n	80082ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082d4:	4b93      	ldr	r3, [pc, #588]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f003 030c 	and.w	r3, r3, #12
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d112      	bne.n	8008306 <HAL_RCC_OscConfig+0x62>
 80082e0:	4b90      	ldr	r3, [pc, #576]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082ec:	d10b      	bne.n	8008306 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082ee:	4b8d      	ldr	r3, [pc, #564]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d06c      	beq.n	80083d4 <HAL_RCC_OscConfig+0x130>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d168      	bne.n	80083d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e26b      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800830e:	d106      	bne.n	800831e <HAL_RCC_OscConfig+0x7a>
 8008310:	4b84      	ldr	r3, [pc, #528]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a83      	ldr	r2, [pc, #524]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	e02e      	b.n	800837c <HAL_RCC_OscConfig+0xd8>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10c      	bne.n	8008340 <HAL_RCC_OscConfig+0x9c>
 8008326:	4b7f      	ldr	r3, [pc, #508]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a7e      	ldr	r2, [pc, #504]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 800832c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008330:	6013      	str	r3, [r2, #0]
 8008332:	4b7c      	ldr	r3, [pc, #496]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a7b      	ldr	r2, [pc, #492]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008338:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	e01d      	b.n	800837c <HAL_RCC_OscConfig+0xd8>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008348:	d10c      	bne.n	8008364 <HAL_RCC_OscConfig+0xc0>
 800834a:	4b76      	ldr	r3, [pc, #472]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a75      	ldr	r2, [pc, #468]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	4b73      	ldr	r3, [pc, #460]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a72      	ldr	r2, [pc, #456]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 800835c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008360:	6013      	str	r3, [r2, #0]
 8008362:	e00b      	b.n	800837c <HAL_RCC_OscConfig+0xd8>
 8008364:	4b6f      	ldr	r3, [pc, #444]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a6e      	ldr	r2, [pc, #440]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 800836a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	4b6c      	ldr	r3, [pc, #432]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a6b      	ldr	r2, [pc, #428]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800837a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d013      	beq.n	80083ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008384:	f7fc ff38 	bl	80051f8 <HAL_GetTick>
 8008388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800838a:	e008      	b.n	800839e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800838c:	f7fc ff34 	bl	80051f8 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b64      	cmp	r3, #100	; 0x64
 8008398:	d901      	bls.n	800839e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e21f      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800839e:	4b61      	ldr	r3, [pc, #388]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0f0      	beq.n	800838c <HAL_RCC_OscConfig+0xe8>
 80083aa:	e014      	b.n	80083d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ac:	f7fc ff24 	bl	80051f8 <HAL_GetTick>
 80083b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083b2:	e008      	b.n	80083c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083b4:	f7fc ff20 	bl	80051f8 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	2b64      	cmp	r3, #100	; 0x64
 80083c0:	d901      	bls.n	80083c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e20b      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083c6:	4b57      	ldr	r3, [pc, #348]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1f0      	bne.n	80083b4 <HAL_RCC_OscConfig+0x110>
 80083d2:	e000      	b.n	80083d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d069      	beq.n	80084b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80083e2:	4b50      	ldr	r3, [pc, #320]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f003 030c 	and.w	r3, r3, #12
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00b      	beq.n	8008406 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083ee:	4b4d      	ldr	r3, [pc, #308]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f003 030c 	and.w	r3, r3, #12
 80083f6:	2b08      	cmp	r3, #8
 80083f8:	d11c      	bne.n	8008434 <HAL_RCC_OscConfig+0x190>
 80083fa:	4b4a      	ldr	r3, [pc, #296]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d116      	bne.n	8008434 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008406:	4b47      	ldr	r3, [pc, #284]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d005      	beq.n	800841e <HAL_RCC_OscConfig+0x17a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d001      	beq.n	800841e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e1df      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800841e:	4b41      	ldr	r3, [pc, #260]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	493d      	ldr	r1, [pc, #244]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 800842e:	4313      	orrs	r3, r2
 8008430:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008432:	e040      	b.n	80084b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d023      	beq.n	8008484 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800843c:	4b39      	ldr	r3, [pc, #228]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a38      	ldr	r2, [pc, #224]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008442:	f043 0301 	orr.w	r3, r3, #1
 8008446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008448:	f7fc fed6 	bl	80051f8 <HAL_GetTick>
 800844c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008450:	f7fc fed2 	bl	80051f8 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e1bd      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008462:	4b30      	ldr	r3, [pc, #192]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0f0      	beq.n	8008450 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800846e:	4b2d      	ldr	r3, [pc, #180]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	00db      	lsls	r3, r3, #3
 800847c:	4929      	ldr	r1, [pc, #164]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 800847e:	4313      	orrs	r3, r2
 8008480:	600b      	str	r3, [r1, #0]
 8008482:	e018      	b.n	80084b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008484:	4b27      	ldr	r3, [pc, #156]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a26      	ldr	r2, [pc, #152]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 800848a:	f023 0301 	bic.w	r3, r3, #1
 800848e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008490:	f7fc feb2 	bl	80051f8 <HAL_GetTick>
 8008494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008496:	e008      	b.n	80084aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008498:	f7fc feae 	bl	80051f8 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	2b02      	cmp	r3, #2
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e199      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084aa:	4b1e      	ldr	r3, [pc, #120]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1f0      	bne.n	8008498 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0308 	and.w	r3, r3, #8
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d038      	beq.n	8008534 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d019      	beq.n	80084fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084ca:	4b16      	ldr	r3, [pc, #88]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 80084cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ce:	4a15      	ldr	r2, [pc, #84]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 80084d0:	f043 0301 	orr.w	r3, r3, #1
 80084d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084d6:	f7fc fe8f 	bl	80051f8 <HAL_GetTick>
 80084da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084dc:	e008      	b.n	80084f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084de:	f7fc fe8b 	bl	80051f8 <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d901      	bls.n	80084f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e176      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084f0:	4b0c      	ldr	r3, [pc, #48]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 80084f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f4:	f003 0302 	and.w	r3, r3, #2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d0f0      	beq.n	80084de <HAL_RCC_OscConfig+0x23a>
 80084fc:	e01a      	b.n	8008534 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084fe:	4b09      	ldr	r3, [pc, #36]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008502:	4a08      	ldr	r2, [pc, #32]	; (8008524 <HAL_RCC_OscConfig+0x280>)
 8008504:	f023 0301 	bic.w	r3, r3, #1
 8008508:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800850a:	f7fc fe75 	bl	80051f8 <HAL_GetTick>
 800850e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008510:	e00a      	b.n	8008528 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008512:	f7fc fe71 	bl	80051f8 <HAL_GetTick>
 8008516:	4602      	mov	r2, r0
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	2b02      	cmp	r3, #2
 800851e:	d903      	bls.n	8008528 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e15c      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
 8008524:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008528:	4b91      	ldr	r3, [pc, #580]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 800852a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1ee      	bne.n	8008512 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 0304 	and.w	r3, r3, #4
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 80a4 	beq.w	800868a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008542:	4b8b      	ldr	r3, [pc, #556]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10d      	bne.n	800856a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800854e:	4b88      	ldr	r3, [pc, #544]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	4a87      	ldr	r2, [pc, #540]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008558:	6413      	str	r3, [r2, #64]	; 0x40
 800855a:	4b85      	ldr	r3, [pc, #532]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 800855c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008562:	60bb      	str	r3, [r7, #8]
 8008564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008566:	2301      	movs	r3, #1
 8008568:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800856a:	4b82      	ldr	r3, [pc, #520]	; (8008774 <HAL_RCC_OscConfig+0x4d0>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008572:	2b00      	cmp	r3, #0
 8008574:	d118      	bne.n	80085a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008576:	4b7f      	ldr	r3, [pc, #508]	; (8008774 <HAL_RCC_OscConfig+0x4d0>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a7e      	ldr	r2, [pc, #504]	; (8008774 <HAL_RCC_OscConfig+0x4d0>)
 800857c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008582:	f7fc fe39 	bl	80051f8 <HAL_GetTick>
 8008586:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008588:	e008      	b.n	800859c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800858a:	f7fc fe35 	bl	80051f8 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	2b64      	cmp	r3, #100	; 0x64
 8008596:	d901      	bls.n	800859c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e120      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800859c:	4b75      	ldr	r3, [pc, #468]	; (8008774 <HAL_RCC_OscConfig+0x4d0>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d0f0      	beq.n	800858a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d106      	bne.n	80085be <HAL_RCC_OscConfig+0x31a>
 80085b0:	4b6f      	ldr	r3, [pc, #444]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 80085b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b4:	4a6e      	ldr	r2, [pc, #440]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 80085b6:	f043 0301 	orr.w	r3, r3, #1
 80085ba:	6713      	str	r3, [r2, #112]	; 0x70
 80085bc:	e02d      	b.n	800861a <HAL_RCC_OscConfig+0x376>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10c      	bne.n	80085e0 <HAL_RCC_OscConfig+0x33c>
 80085c6:	4b6a      	ldr	r3, [pc, #424]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 80085c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ca:	4a69      	ldr	r2, [pc, #420]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 80085cc:	f023 0301 	bic.w	r3, r3, #1
 80085d0:	6713      	str	r3, [r2, #112]	; 0x70
 80085d2:	4b67      	ldr	r3, [pc, #412]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 80085d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d6:	4a66      	ldr	r2, [pc, #408]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 80085d8:	f023 0304 	bic.w	r3, r3, #4
 80085dc:	6713      	str	r3, [r2, #112]	; 0x70
 80085de:	e01c      	b.n	800861a <HAL_RCC_OscConfig+0x376>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2b05      	cmp	r3, #5
 80085e6:	d10c      	bne.n	8008602 <HAL_RCC_OscConfig+0x35e>
 80085e8:	4b61      	ldr	r3, [pc, #388]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 80085ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ec:	4a60      	ldr	r2, [pc, #384]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 80085ee:	f043 0304 	orr.w	r3, r3, #4
 80085f2:	6713      	str	r3, [r2, #112]	; 0x70
 80085f4:	4b5e      	ldr	r3, [pc, #376]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 80085f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f8:	4a5d      	ldr	r2, [pc, #372]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 80085fa:	f043 0301 	orr.w	r3, r3, #1
 80085fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008600:	e00b      	b.n	800861a <HAL_RCC_OscConfig+0x376>
 8008602:	4b5b      	ldr	r3, [pc, #364]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008606:	4a5a      	ldr	r2, [pc, #360]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008608:	f023 0301 	bic.w	r3, r3, #1
 800860c:	6713      	str	r3, [r2, #112]	; 0x70
 800860e:	4b58      	ldr	r3, [pc, #352]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008612:	4a57      	ldr	r2, [pc, #348]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008614:	f023 0304 	bic.w	r3, r3, #4
 8008618:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d015      	beq.n	800864e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008622:	f7fc fde9 	bl	80051f8 <HAL_GetTick>
 8008626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008628:	e00a      	b.n	8008640 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800862a:	f7fc fde5 	bl	80051f8 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	f241 3288 	movw	r2, #5000	; 0x1388
 8008638:	4293      	cmp	r3, r2
 800863a:	d901      	bls.n	8008640 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e0ce      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008640:	4b4b      	ldr	r3, [pc, #300]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008644:	f003 0302 	and.w	r3, r3, #2
 8008648:	2b00      	cmp	r3, #0
 800864a:	d0ee      	beq.n	800862a <HAL_RCC_OscConfig+0x386>
 800864c:	e014      	b.n	8008678 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800864e:	f7fc fdd3 	bl	80051f8 <HAL_GetTick>
 8008652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008654:	e00a      	b.n	800866c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008656:	f7fc fdcf 	bl	80051f8 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	f241 3288 	movw	r2, #5000	; 0x1388
 8008664:	4293      	cmp	r3, r2
 8008666:	d901      	bls.n	800866c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e0b8      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800866c:	4b40      	ldr	r3, [pc, #256]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 800866e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008670:	f003 0302 	and.w	r3, r3, #2
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1ee      	bne.n	8008656 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008678:	7dfb      	ldrb	r3, [r7, #23]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d105      	bne.n	800868a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800867e:	4b3c      	ldr	r3, [pc, #240]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	4a3b      	ldr	r2, [pc, #236]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008688:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 80a4 	beq.w	80087dc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008694:	4b36      	ldr	r3, [pc, #216]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f003 030c 	and.w	r3, r3, #12
 800869c:	2b08      	cmp	r3, #8
 800869e:	d06b      	beq.n	8008778 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d149      	bne.n	800873c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086a8:	4b31      	ldr	r3, [pc, #196]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a30      	ldr	r2, [pc, #192]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 80086ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b4:	f7fc fda0 	bl	80051f8 <HAL_GetTick>
 80086b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ba:	e008      	b.n	80086ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086bc:	f7fc fd9c 	bl	80051f8 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d901      	bls.n	80086ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e087      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ce:	4b28      	ldr	r3, [pc, #160]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1f0      	bne.n	80086bc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	69da      	ldr	r2, [r3, #28]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	431a      	orrs	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e8:	019b      	lsls	r3, r3, #6
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f0:	085b      	lsrs	r3, r3, #1
 80086f2:	3b01      	subs	r3, #1
 80086f4:	041b      	lsls	r3, r3, #16
 80086f6:	431a      	orrs	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086fc:	061b      	lsls	r3, r3, #24
 80086fe:	4313      	orrs	r3, r2
 8008700:	4a1b      	ldr	r2, [pc, #108]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008702:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008706:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008708:	4b19      	ldr	r3, [pc, #100]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a18      	ldr	r2, [pc, #96]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 800870e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008714:	f7fc fd70 	bl	80051f8 <HAL_GetTick>
 8008718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800871c:	f7fc fd6c 	bl	80051f8 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e057      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800872e:	4b10      	ldr	r3, [pc, #64]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d0f0      	beq.n	800871c <HAL_RCC_OscConfig+0x478>
 800873a:	e04f      	b.n	80087dc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800873c:	4b0c      	ldr	r3, [pc, #48]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a0b      	ldr	r2, [pc, #44]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008748:	f7fc fd56 	bl	80051f8 <HAL_GetTick>
 800874c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800874e:	e008      	b.n	8008762 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008750:	f7fc fd52 	bl	80051f8 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b02      	cmp	r3, #2
 800875c:	d901      	bls.n	8008762 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e03d      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008762:	4b03      	ldr	r3, [pc, #12]	; (8008770 <HAL_RCC_OscConfig+0x4cc>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1f0      	bne.n	8008750 <HAL_RCC_OscConfig+0x4ac>
 800876e:	e035      	b.n	80087dc <HAL_RCC_OscConfig+0x538>
 8008770:	40023800 	.word	0x40023800
 8008774:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008778:	4b1b      	ldr	r3, [pc, #108]	; (80087e8 <HAL_RCC_OscConfig+0x544>)
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d028      	beq.n	80087d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008790:	429a      	cmp	r2, r3
 8008792:	d121      	bne.n	80087d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800879e:	429a      	cmp	r2, r3
 80087a0:	d11a      	bne.n	80087d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087a8:	4013      	ands	r3, r2
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80087ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d111      	bne.n	80087d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	085b      	lsrs	r3, r3, #1
 80087c0:	3b01      	subs	r3, #1
 80087c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d107      	bne.n	80087d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d001      	beq.n	80087dc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e000      	b.n	80087de <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	40023800 	.word	0x40023800

080087ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e0d0      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008804:	4b6a      	ldr	r3, [pc, #424]	; (80089b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 030f 	and.w	r3, r3, #15
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d910      	bls.n	8008834 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008812:	4b67      	ldr	r3, [pc, #412]	; (80089b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f023 020f 	bic.w	r2, r3, #15
 800881a:	4965      	ldr	r1, [pc, #404]	; (80089b0 <HAL_RCC_ClockConfig+0x1c4>)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	4313      	orrs	r3, r2
 8008820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008822:	4b63      	ldr	r3, [pc, #396]	; (80089b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 030f 	and.w	r3, r3, #15
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	429a      	cmp	r2, r3
 800882e:	d001      	beq.n	8008834 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e0b8      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d020      	beq.n	8008882 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	d005      	beq.n	8008858 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800884c:	4b59      	ldr	r3, [pc, #356]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	4a58      	ldr	r2, [pc, #352]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008856:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0308 	and.w	r3, r3, #8
 8008860:	2b00      	cmp	r3, #0
 8008862:	d005      	beq.n	8008870 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008864:	4b53      	ldr	r3, [pc, #332]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	4a52      	ldr	r2, [pc, #328]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 800886a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800886e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008870:	4b50      	ldr	r3, [pc, #320]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	494d      	ldr	r1, [pc, #308]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 800887e:	4313      	orrs	r3, r2
 8008880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	2b00      	cmp	r3, #0
 800888c:	d040      	beq.n	8008910 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d107      	bne.n	80088a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008896:	4b47      	ldr	r3, [pc, #284]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d115      	bne.n	80088ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e07f      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d107      	bne.n	80088be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088ae:	4b41      	ldr	r3, [pc, #260]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d109      	bne.n	80088ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e073      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088be:	4b3d      	ldr	r3, [pc, #244]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e06b      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088ce:	4b39      	ldr	r3, [pc, #228]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f023 0203 	bic.w	r2, r3, #3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	4936      	ldr	r1, [pc, #216]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088e0:	f7fc fc8a 	bl	80051f8 <HAL_GetTick>
 80088e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088e6:	e00a      	b.n	80088fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088e8:	f7fc fc86 	bl	80051f8 <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d901      	bls.n	80088fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e053      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088fe:	4b2d      	ldr	r3, [pc, #180]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f003 020c 	and.w	r2, r3, #12
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	429a      	cmp	r2, r3
 800890e:	d1eb      	bne.n	80088e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008910:	4b27      	ldr	r3, [pc, #156]	; (80089b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 030f 	and.w	r3, r3, #15
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	429a      	cmp	r2, r3
 800891c:	d210      	bcs.n	8008940 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800891e:	4b24      	ldr	r3, [pc, #144]	; (80089b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f023 020f 	bic.w	r2, r3, #15
 8008926:	4922      	ldr	r1, [pc, #136]	; (80089b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	4313      	orrs	r3, r2
 800892c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800892e:	4b20      	ldr	r3, [pc, #128]	; (80089b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 030f 	and.w	r3, r3, #15
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	429a      	cmp	r2, r3
 800893a:	d001      	beq.n	8008940 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e032      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0304 	and.w	r3, r3, #4
 8008948:	2b00      	cmp	r3, #0
 800894a:	d008      	beq.n	800895e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800894c:	4b19      	ldr	r3, [pc, #100]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	4916      	ldr	r1, [pc, #88]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 800895a:	4313      	orrs	r3, r2
 800895c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b00      	cmp	r3, #0
 8008968:	d009      	beq.n	800897e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800896a:	4b12      	ldr	r3, [pc, #72]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	490e      	ldr	r1, [pc, #56]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 800897a:	4313      	orrs	r3, r2
 800897c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800897e:	f000 f821 	bl	80089c4 <HAL_RCC_GetSysClockFreq>
 8008982:	4602      	mov	r2, r0
 8008984:	4b0b      	ldr	r3, [pc, #44]	; (80089b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	091b      	lsrs	r3, r3, #4
 800898a:	f003 030f 	and.w	r3, r3, #15
 800898e:	490a      	ldr	r1, [pc, #40]	; (80089b8 <HAL_RCC_ClockConfig+0x1cc>)
 8008990:	5ccb      	ldrb	r3, [r1, r3]
 8008992:	fa22 f303 	lsr.w	r3, r2, r3
 8008996:	4a09      	ldr	r2, [pc, #36]	; (80089bc <HAL_RCC_ClockConfig+0x1d0>)
 8008998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <HAL_RCC_ClockConfig+0x1d4>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fc fb1c 	bl	8004fdc <HAL_InitTick>

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	40023c00 	.word	0x40023c00
 80089b4:	40023800 	.word	0x40023800
 80089b8:	08034610 	.word	0x08034610
 80089bc:	20000040 	.word	0x20000040
 80089c0:	20000044 	.word	0x20000044

080089c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089c4:	b5b0      	push	{r4, r5, r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80089ca:	2100      	movs	r1, #0
 80089cc:	6079      	str	r1, [r7, #4]
 80089ce:	2100      	movs	r1, #0
 80089d0:	60f9      	str	r1, [r7, #12]
 80089d2:	2100      	movs	r1, #0
 80089d4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80089d6:	2100      	movs	r1, #0
 80089d8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089da:	4952      	ldr	r1, [pc, #328]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x160>)
 80089dc:	6889      	ldr	r1, [r1, #8]
 80089de:	f001 010c 	and.w	r1, r1, #12
 80089e2:	2908      	cmp	r1, #8
 80089e4:	d00d      	beq.n	8008a02 <HAL_RCC_GetSysClockFreq+0x3e>
 80089e6:	2908      	cmp	r1, #8
 80089e8:	f200 8094 	bhi.w	8008b14 <HAL_RCC_GetSysClockFreq+0x150>
 80089ec:	2900      	cmp	r1, #0
 80089ee:	d002      	beq.n	80089f6 <HAL_RCC_GetSysClockFreq+0x32>
 80089f0:	2904      	cmp	r1, #4
 80089f2:	d003      	beq.n	80089fc <HAL_RCC_GetSysClockFreq+0x38>
 80089f4:	e08e      	b.n	8008b14 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80089f6:	4b4c      	ldr	r3, [pc, #304]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x164>)
 80089f8:	60bb      	str	r3, [r7, #8]
      break;
 80089fa:	e08e      	b.n	8008b1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80089fc:	4b4b      	ldr	r3, [pc, #300]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x168>)
 80089fe:	60bb      	str	r3, [r7, #8]
      break;
 8008a00:	e08b      	b.n	8008b1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a02:	4948      	ldr	r1, [pc, #288]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a04:	6849      	ldr	r1, [r1, #4]
 8008a06:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008a0a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008a0c:	4945      	ldr	r1, [pc, #276]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a0e:	6849      	ldr	r1, [r1, #4]
 8008a10:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008a14:	2900      	cmp	r1, #0
 8008a16:	d024      	beq.n	8008a62 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a18:	4942      	ldr	r1, [pc, #264]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a1a:	6849      	ldr	r1, [r1, #4]
 8008a1c:	0989      	lsrs	r1, r1, #6
 8008a1e:	4608      	mov	r0, r1
 8008a20:	f04f 0100 	mov.w	r1, #0
 8008a24:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008a28:	f04f 0500 	mov.w	r5, #0
 8008a2c:	ea00 0204 	and.w	r2, r0, r4
 8008a30:	ea01 0305 	and.w	r3, r1, r5
 8008a34:	493d      	ldr	r1, [pc, #244]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x168>)
 8008a36:	fb01 f003 	mul.w	r0, r1, r3
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	fb01 f102 	mul.w	r1, r1, r2
 8008a40:	1844      	adds	r4, r0, r1
 8008a42:	493a      	ldr	r1, [pc, #232]	; (8008b2c <HAL_RCC_GetSysClockFreq+0x168>)
 8008a44:	fba2 0101 	umull	r0, r1, r2, r1
 8008a48:	1863      	adds	r3, r4, r1
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f04f 0300 	mov.w	r3, #0
 8008a54:	f7f7 fbdc 	bl	8000210 <__aeabi_uldivmod>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	e04a      	b.n	8008af8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a62:	4b30      	ldr	r3, [pc, #192]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	099b      	lsrs	r3, r3, #6
 8008a68:	461a      	mov	r2, r3
 8008a6a:	f04f 0300 	mov.w	r3, #0
 8008a6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008a72:	f04f 0100 	mov.w	r1, #0
 8008a76:	ea02 0400 	and.w	r4, r2, r0
 8008a7a:	ea03 0501 	and.w	r5, r3, r1
 8008a7e:	4620      	mov	r0, r4
 8008a80:	4629      	mov	r1, r5
 8008a82:	f04f 0200 	mov.w	r2, #0
 8008a86:	f04f 0300 	mov.w	r3, #0
 8008a8a:	014b      	lsls	r3, r1, #5
 8008a8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008a90:	0142      	lsls	r2, r0, #5
 8008a92:	4610      	mov	r0, r2
 8008a94:	4619      	mov	r1, r3
 8008a96:	1b00      	subs	r0, r0, r4
 8008a98:	eb61 0105 	sbc.w	r1, r1, r5
 8008a9c:	f04f 0200 	mov.w	r2, #0
 8008aa0:	f04f 0300 	mov.w	r3, #0
 8008aa4:	018b      	lsls	r3, r1, #6
 8008aa6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008aaa:	0182      	lsls	r2, r0, #6
 8008aac:	1a12      	subs	r2, r2, r0
 8008aae:	eb63 0301 	sbc.w	r3, r3, r1
 8008ab2:	f04f 0000 	mov.w	r0, #0
 8008ab6:	f04f 0100 	mov.w	r1, #0
 8008aba:	00d9      	lsls	r1, r3, #3
 8008abc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ac0:	00d0      	lsls	r0, r2, #3
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	1912      	adds	r2, r2, r4
 8008ac8:	eb45 0303 	adc.w	r3, r5, r3
 8008acc:	f04f 0000 	mov.w	r0, #0
 8008ad0:	f04f 0100 	mov.w	r1, #0
 8008ad4:	0299      	lsls	r1, r3, #10
 8008ad6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008ada:	0290      	lsls	r0, r2, #10
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f04f 0300 	mov.w	r3, #0
 8008aec:	f7f7 fb90 	bl	8000210 <__aeabi_uldivmod>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4613      	mov	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008af8:	4b0a      	ldr	r3, [pc, #40]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	0c1b      	lsrs	r3, r3, #16
 8008afe:	f003 0303 	and.w	r3, r3, #3
 8008b02:	3301      	adds	r3, #1
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b10:	60bb      	str	r3, [r7, #8]
      break;
 8008b12:	e002      	b.n	8008b1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b14:	4b04      	ldr	r3, [pc, #16]	; (8008b28 <HAL_RCC_GetSysClockFreq+0x164>)
 8008b16:	60bb      	str	r3, [r7, #8]
      break;
 8008b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b1a:	68bb      	ldr	r3, [r7, #8]
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3710      	adds	r7, #16
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bdb0      	pop	{r4, r5, r7, pc}
 8008b24:	40023800 	.word	0x40023800
 8008b28:	00f42400 	.word	0x00f42400
 8008b2c:	017d7840 	.word	0x017d7840

08008b30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b30:	b480      	push	{r7}
 8008b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b34:	4b03      	ldr	r3, [pc, #12]	; (8008b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b36:	681b      	ldr	r3, [r3, #0]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	20000040 	.word	0x20000040

08008b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008b4c:	f7ff fff0 	bl	8008b30 <HAL_RCC_GetHCLKFreq>
 8008b50:	4602      	mov	r2, r0
 8008b52:	4b05      	ldr	r3, [pc, #20]	; (8008b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	0a9b      	lsrs	r3, r3, #10
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	4903      	ldr	r1, [pc, #12]	; (8008b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b5e:	5ccb      	ldrb	r3, [r1, r3]
 8008b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	40023800 	.word	0x40023800
 8008b6c:	08034620 	.word	0x08034620

08008b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008b74:	f7ff ffdc 	bl	8008b30 <HAL_RCC_GetHCLKFreq>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	0b5b      	lsrs	r3, r3, #13
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	4903      	ldr	r1, [pc, #12]	; (8008b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b86:	5ccb      	ldrb	r3, [r1, r3]
 8008b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	40023800 	.word	0x40023800
 8008b94:	08034620 	.word	0x08034620

08008b98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	220f      	movs	r2, #15
 8008ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008ba8:	4b12      	ldr	r3, [pc, #72]	; (8008bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f003 0203 	and.w	r2, r3, #3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008bb4:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008bc0:	4b0c      	ldr	r3, [pc, #48]	; (8008bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008bcc:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	08db      	lsrs	r3, r3, #3
 8008bd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008bda:	4b07      	ldr	r3, [pc, #28]	; (8008bf8 <HAL_RCC_GetClockConfig+0x60>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 020f 	and.w	r2, r3, #15
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	601a      	str	r2, [r3, #0]
}
 8008be6:	bf00      	nop
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	40023800 	.word	0x40023800
 8008bf8:	40023c00 	.word	0x40023c00

08008bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d012      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c24:	4b69      	ldr	r3, [pc, #420]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	4a68      	ldr	r2, [pc, #416]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c2e:	6093      	str	r3, [r2, #8]
 8008c30:	4b66      	ldr	r3, [pc, #408]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c38:	4964      	ldr	r1, [pc, #400]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008c46:	2301      	movs	r3, #1
 8008c48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d017      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c56:	4b5d      	ldr	r3, [pc, #372]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c64:	4959      	ldr	r1, [pc, #356]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c66:	4313      	orrs	r3, r2
 8008c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c74:	d101      	bne.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008c76:	2301      	movs	r3, #1
 8008c78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008c82:	2301      	movs	r3, #1
 8008c84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d017      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008c92:	4b4e      	ldr	r3, [pc, #312]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca0:	494a      	ldr	r1, [pc, #296]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cb0:	d101      	bne.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d101      	bne.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 0320 	and.w	r3, r3, #32
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 808b 	beq.w	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ce0:	4b3a      	ldr	r3, [pc, #232]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce4:	4a39      	ldr	r2, [pc, #228]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cea:	6413      	str	r3, [r2, #64]	; 0x40
 8008cec:	4b37      	ldr	r3, [pc, #220]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cf4:	60bb      	str	r3, [r7, #8]
 8008cf6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008cf8:	4b35      	ldr	r3, [pc, #212]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a34      	ldr	r2, [pc, #208]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d04:	f7fc fa78 	bl	80051f8 <HAL_GetTick>
 8008d08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008d0a:	e008      	b.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d0c:	f7fc fa74 	bl	80051f8 <HAL_GetTick>
 8008d10:	4602      	mov	r2, r0
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	2b64      	cmp	r3, #100	; 0x64
 8008d18:	d901      	bls.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e357      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008d1e:	4b2c      	ldr	r3, [pc, #176]	; (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d0f0      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008d2a:	4b28      	ldr	r3, [pc, #160]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d035      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d02e      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d48:	4b20      	ldr	r3, [pc, #128]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008d52:	4b1e      	ldr	r3, [pc, #120]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d56:	4a1d      	ldr	r2, [pc, #116]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d5e:	4b1b      	ldr	r3, [pc, #108]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d62:	4a1a      	ldr	r2, [pc, #104]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008d6a:	4a18      	ldr	r2, [pc, #96]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008d70:	4b16      	ldr	r3, [pc, #88]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d114      	bne.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d7c:	f7fc fa3c 	bl	80051f8 <HAL_GetTick>
 8008d80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d82:	e00a      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d84:	f7fc fa38 	bl	80051f8 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e319      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d9a:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0ee      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008db2:	d111      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008db4:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008dc0:	4b04      	ldr	r3, [pc, #16]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008dc2:	400b      	ands	r3, r1
 8008dc4:	4901      	ldr	r1, [pc, #4]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	608b      	str	r3, [r1, #8]
 8008dca:	e00b      	b.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008dcc:	40023800 	.word	0x40023800
 8008dd0:	40007000 	.word	0x40007000
 8008dd4:	0ffffcff 	.word	0x0ffffcff
 8008dd8:	4bb1      	ldr	r3, [pc, #708]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	4ab0      	ldr	r2, [pc, #704]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008dde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008de2:	6093      	str	r3, [r2, #8]
 8008de4:	4bae      	ldr	r3, [pc, #696]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008df0:	49ab      	ldr	r1, [pc, #684]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 0310 	and.w	r3, r3, #16
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d010      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e02:	4ba7      	ldr	r3, [pc, #668]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e08:	4aa5      	ldr	r2, [pc, #660]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008e12:	4ba3      	ldr	r3, [pc, #652]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1c:	49a0      	ldr	r1, [pc, #640]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00a      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e30:	4b9b      	ldr	r3, [pc, #620]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e3e:	4998      	ldr	r1, [pc, #608]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e40:	4313      	orrs	r3, r2
 8008e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00a      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e52:	4b93      	ldr	r3, [pc, #588]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e60:	498f      	ldr	r1, [pc, #572]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00a      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e74:	4b8a      	ldr	r3, [pc, #552]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e82:	4987      	ldr	r1, [pc, #540]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e96:	4b82      	ldr	r3, [pc, #520]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea4:	497e      	ldr	r1, [pc, #504]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00a      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008eb8:	4b79      	ldr	r3, [pc, #484]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ebe:	f023 0203 	bic.w	r2, r3, #3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec6:	4976      	ldr	r1, [pc, #472]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00a      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008eda:	4b71      	ldr	r3, [pc, #452]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee0:	f023 020c 	bic.w	r2, r3, #12
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ee8:	496d      	ldr	r1, [pc, #436]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00a      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008efc:	4b68      	ldr	r3, [pc, #416]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f0a:	4965      	ldr	r1, [pc, #404]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00a      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008f1e:	4b60      	ldr	r3, [pc, #384]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f2c:	495c      	ldr	r1, [pc, #368]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00a      	beq.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f40:	4b57      	ldr	r3, [pc, #348]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f4e:	4954      	ldr	r1, [pc, #336]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f50:	4313      	orrs	r3, r2
 8008f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00a      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008f62:	4b4f      	ldr	r3, [pc, #316]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f70:	494b      	ldr	r1, [pc, #300]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f72:	4313      	orrs	r3, r2
 8008f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00a      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008f84:	4b46      	ldr	r3, [pc, #280]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f92:	4943      	ldr	r1, [pc, #268]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f94:	4313      	orrs	r3, r2
 8008f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00a      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008fa6:	4b3e      	ldr	r3, [pc, #248]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb4:	493a      	ldr	r1, [pc, #232]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00a      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008fc8:	4b35      	ldr	r3, [pc, #212]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fd6:	4932      	ldr	r1, [pc, #200]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d011      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008fea:	4b2d      	ldr	r3, [pc, #180]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ff8:	4929      	ldr	r1, [pc, #164]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009008:	d101      	bne.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800900a:	2301      	movs	r3, #1
 800900c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0308 	and.w	r3, r3, #8
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800901a:	2301      	movs	r3, #1
 800901c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800902a:	4b1d      	ldr	r3, [pc, #116]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800902c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009030:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009038:	4919      	ldr	r1, [pc, #100]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800903a:	4313      	orrs	r3, r2
 800903c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800904c:	4b14      	ldr	r3, [pc, #80]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800904e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009052:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800905c:	4910      	ldr	r1, [pc, #64]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800905e:	4313      	orrs	r3, r2
 8009060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d006      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009072:	2b00      	cmp	r3, #0
 8009074:	f000 80d9 	beq.w	800922a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009078:	4b09      	ldr	r3, [pc, #36]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a08      	ldr	r2, [pc, #32]	; (80090a0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800907e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009082:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009084:	f7fc f8b8 	bl	80051f8 <HAL_GetTick>
 8009088:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800908a:	e00b      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800908c:	f7fc f8b4 	bl	80051f8 <HAL_GetTick>
 8009090:	4602      	mov	r2, r0
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	2b64      	cmp	r3, #100	; 0x64
 8009098:	d904      	bls.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e197      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800909e:	bf00      	nop
 80090a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090a4:	4b6c      	ldr	r3, [pc, #432]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1ed      	bne.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d021      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d11d      	bne.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80090c4:	4b64      	ldr	r3, [pc, #400]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ca:	0c1b      	lsrs	r3, r3, #16
 80090cc:	f003 0303 	and.w	r3, r3, #3
 80090d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80090d2:	4b61      	ldr	r3, [pc, #388]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090d8:	0e1b      	lsrs	r3, r3, #24
 80090da:	f003 030f 	and.w	r3, r3, #15
 80090de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	019a      	lsls	r2, r3, #6
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	041b      	lsls	r3, r3, #16
 80090ea:	431a      	orrs	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	061b      	lsls	r3, r3, #24
 80090f0:	431a      	orrs	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	071b      	lsls	r3, r3, #28
 80090f8:	4957      	ldr	r1, [pc, #348]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d004      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009114:	d00a      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800911e:	2b00      	cmp	r3, #0
 8009120:	d02e      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800912a:	d129      	bne.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800912c:	4b4a      	ldr	r3, [pc, #296]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800912e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009132:	0c1b      	lsrs	r3, r3, #16
 8009134:	f003 0303 	and.w	r3, r3, #3
 8009138:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800913a:	4b47      	ldr	r3, [pc, #284]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800913c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009140:	0f1b      	lsrs	r3, r3, #28
 8009142:	f003 0307 	and.w	r3, r3, #7
 8009146:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	019a      	lsls	r2, r3, #6
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	041b      	lsls	r3, r3, #16
 8009152:	431a      	orrs	r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	061b      	lsls	r3, r3, #24
 800915a:	431a      	orrs	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	071b      	lsls	r3, r3, #28
 8009160:	493d      	ldr	r1, [pc, #244]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009162:	4313      	orrs	r3, r2
 8009164:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009168:	4b3b      	ldr	r3, [pc, #236]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800916a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800916e:	f023 021f 	bic.w	r2, r3, #31
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009176:	3b01      	subs	r3, #1
 8009178:	4937      	ldr	r1, [pc, #220]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800917a:	4313      	orrs	r3, r2
 800917c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009188:	2b00      	cmp	r3, #0
 800918a:	d01d      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800918c:	4b32      	ldr	r3, [pc, #200]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800918e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009192:	0e1b      	lsrs	r3, r3, #24
 8009194:	f003 030f 	and.w	r3, r3, #15
 8009198:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800919a:	4b2f      	ldr	r3, [pc, #188]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800919c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091a0:	0f1b      	lsrs	r3, r3, #28
 80091a2:	f003 0307 	and.w	r3, r3, #7
 80091a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	019a      	lsls	r2, r3, #6
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	041b      	lsls	r3, r3, #16
 80091b4:	431a      	orrs	r2, r3
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	061b      	lsls	r3, r3, #24
 80091ba:	431a      	orrs	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	071b      	lsls	r3, r3, #28
 80091c0:	4925      	ldr	r1, [pc, #148]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d011      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	019a      	lsls	r2, r3, #6
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	041b      	lsls	r3, r3, #16
 80091e0:	431a      	orrs	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	061b      	lsls	r3, r3, #24
 80091e8:	431a      	orrs	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	071b      	lsls	r3, r3, #28
 80091f0:	4919      	ldr	r1, [pc, #100]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80091f8:	4b17      	ldr	r3, [pc, #92]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a16      	ldr	r2, [pc, #88]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009204:	f7fb fff8 	bl	80051f8 <HAL_GetTick>
 8009208:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800920a:	e008      	b.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800920c:	f7fb fff4 	bl	80051f8 <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	2b64      	cmp	r3, #100	; 0x64
 8009218:	d901      	bls.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e0d7      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800921e:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0f0      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	2b01      	cmp	r3, #1
 800922e:	f040 80cd 	bne.w	80093cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009232:	4b09      	ldr	r3, [pc, #36]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a08      	ldr	r2, [pc, #32]	; (8009258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800923c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800923e:	f7fb ffdb 	bl	80051f8 <HAL_GetTick>
 8009242:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009244:	e00a      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009246:	f7fb ffd7 	bl	80051f8 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	2b64      	cmp	r3, #100	; 0x64
 8009252:	d903      	bls.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e0ba      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009258:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800925c:	4b5e      	ldr	r3, [pc, #376]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009268:	d0ed      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d003      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927a:	2b00      	cmp	r3, #0
 800927c:	d009      	beq.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009286:	2b00      	cmp	r3, #0
 8009288:	d02e      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928e:	2b00      	cmp	r3, #0
 8009290:	d12a      	bne.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009292:	4b51      	ldr	r3, [pc, #324]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009298:	0c1b      	lsrs	r3, r3, #16
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80092a0:	4b4d      	ldr	r3, [pc, #308]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a6:	0f1b      	lsrs	r3, r3, #28
 80092a8:	f003 0307 	and.w	r3, r3, #7
 80092ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	019a      	lsls	r2, r3, #6
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	041b      	lsls	r3, r3, #16
 80092b8:	431a      	orrs	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	061b      	lsls	r3, r3, #24
 80092c0:	431a      	orrs	r2, r3
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	071b      	lsls	r3, r3, #28
 80092c6:	4944      	ldr	r1, [pc, #272]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092c8:	4313      	orrs	r3, r2
 80092ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80092ce:	4b42      	ldr	r3, [pc, #264]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092dc:	3b01      	subs	r3, #1
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	493d      	ldr	r1, [pc, #244]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092e2:	4313      	orrs	r3, r2
 80092e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d022      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092fc:	d11d      	bne.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80092fe:	4b36      	ldr	r3, [pc, #216]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009304:	0e1b      	lsrs	r3, r3, #24
 8009306:	f003 030f 	and.w	r3, r3, #15
 800930a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800930c:	4b32      	ldr	r3, [pc, #200]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800930e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009312:	0f1b      	lsrs	r3, r3, #28
 8009314:	f003 0307 	and.w	r3, r3, #7
 8009318:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	695b      	ldr	r3, [r3, #20]
 800931e:	019a      	lsls	r2, r3, #6
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a1b      	ldr	r3, [r3, #32]
 8009324:	041b      	lsls	r3, r3, #16
 8009326:	431a      	orrs	r2, r3
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	061b      	lsls	r3, r3, #24
 800932c:	431a      	orrs	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	071b      	lsls	r3, r3, #28
 8009332:	4929      	ldr	r1, [pc, #164]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009334:	4313      	orrs	r3, r2
 8009336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0308 	and.w	r3, r3, #8
 8009342:	2b00      	cmp	r3, #0
 8009344:	d028      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009346:	4b24      	ldr	r3, [pc, #144]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800934c:	0e1b      	lsrs	r3, r3, #24
 800934e:	f003 030f 	and.w	r3, r3, #15
 8009352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009354:	4b20      	ldr	r3, [pc, #128]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800935a:	0c1b      	lsrs	r3, r3, #16
 800935c:	f003 0303 	and.w	r3, r3, #3
 8009360:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	695b      	ldr	r3, [r3, #20]
 8009366:	019a      	lsls	r2, r3, #6
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	041b      	lsls	r3, r3, #16
 800936c:	431a      	orrs	r2, r3
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	061b      	lsls	r3, r3, #24
 8009372:	431a      	orrs	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	071b      	lsls	r3, r3, #28
 800937a:	4917      	ldr	r1, [pc, #92]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800937c:	4313      	orrs	r3, r2
 800937e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009388:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009390:	4911      	ldr	r1, [pc, #68]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009392:	4313      	orrs	r3, r2
 8009394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009398:	4b0f      	ldr	r3, [pc, #60]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a0e      	ldr	r2, [pc, #56]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800939e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093a4:	f7fb ff28 	bl	80051f8 <HAL_GetTick>
 80093a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80093aa:	e008      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80093ac:	f7fb ff24 	bl	80051f8 <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	2b64      	cmp	r3, #100	; 0x64
 80093b8:	d901      	bls.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e007      	b.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80093be:	4b06      	ldr	r3, [pc, #24]	; (80093d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ca:	d1ef      	bne.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3720      	adds	r7, #32
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	40023800 	.word	0x40023800

080093dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d101      	bne.n	80093ee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e081      	b.n	80094f2 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	7f5b      	ldrb	r3, [r3, #29]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d105      	bne.n	8009404 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7fb fb18 	bl	8004a34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2202      	movs	r2, #2
 8009408:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	22ca      	movs	r2, #202	; 0xca
 8009410:	625a      	str	r2, [r3, #36]	; 0x24
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2253      	movs	r2, #83	; 0x53
 8009418:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fb16 	bl	8009a4c <RTC_EnterInitMode>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d008      	beq.n	8009438 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	22ff      	movs	r2, #255	; 0xff
 800942c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2204      	movs	r2, #4
 8009432:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e05c      	b.n	80094f2 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	6899      	ldr	r1, [r3, #8]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	4b2e      	ldr	r3, [pc, #184]	; (80094fc <HAL_RTC_Init+0x120>)
 8009444:	400b      	ands	r3, r1
 8009446:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	6899      	ldr	r1, [r3, #8]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685a      	ldr	r2, [r3, #4]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	431a      	orrs	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	695b      	ldr	r3, [r3, #20]
 800945c:	431a      	orrs	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	68d2      	ldr	r2, [r2, #12]
 800946e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6919      	ldr	r1, [r3, #16]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	041a      	lsls	r2, r3, #16
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009492:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10e      	bne.n	80094c0 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 faaa 	bl	80099fc <HAL_RTC_WaitForSynchro>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d008      	beq.n	80094c0 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	22ff      	movs	r2, #255	; 0xff
 80094b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2204      	movs	r2, #4
 80094ba:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e018      	b.n	80094f2 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f022 0208 	bic.w	r2, r2, #8
 80094ce:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	699a      	ldr	r2, [r3, #24]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	22ff      	movs	r2, #255	; 0xff
 80094e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80094f0:	2300      	movs	r3, #0
  }
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	ff8fffbf 	.word	0xff8fffbf

08009500 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009500:	b590      	push	{r4, r7, lr}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800950c:	2300      	movs	r3, #0
 800950e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	7f1b      	ldrb	r3, [r3, #28]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d101      	bne.n	800951c <HAL_RTC_SetTime+0x1c>
 8009518:	2302      	movs	r3, #2
 800951a:	e0a8      	b.n	800966e <HAL_RTC_SetTime+0x16e>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2201      	movs	r2, #1
 8009520:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2202      	movs	r2, #2
 8009526:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d126      	bne.n	800957c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009538:	2b00      	cmp	r3, #0
 800953a:	d102      	bne.n	8009542 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2200      	movs	r2, #0
 8009540:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 faac 	bl	8009aa4 <RTC_ByteToBcd2>
 800954c:	4603      	mov	r3, r0
 800954e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	785b      	ldrb	r3, [r3, #1]
 8009554:	4618      	mov	r0, r3
 8009556:	f000 faa5 	bl	8009aa4 <RTC_ByteToBcd2>
 800955a:	4603      	mov	r3, r0
 800955c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800955e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	789b      	ldrb	r3, [r3, #2]
 8009564:	4618      	mov	r0, r3
 8009566:	f000 fa9d 	bl	8009aa4 <RTC_ByteToBcd2>
 800956a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800956c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	7b1b      	ldrb	r3, [r3, #12]
 8009574:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009576:	4313      	orrs	r3, r2
 8009578:	617b      	str	r3, [r7, #20]
 800957a:	e018      	b.n	80095ae <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009586:	2b00      	cmp	r3, #0
 8009588:	d102      	bne.n	8009590 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2200      	movs	r2, #0
 800958e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	785b      	ldrb	r3, [r3, #1]
 800959a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800959c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80095a2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	7b1b      	ldrb	r3, [r3, #12]
 80095a8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80095aa:	4313      	orrs	r3, r2
 80095ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	22ca      	movs	r2, #202	; 0xca
 80095b4:	625a      	str	r2, [r3, #36]	; 0x24
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2253      	movs	r2, #83	; 0x53
 80095bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 fa44 	bl	8009a4c <RTC_EnterInitMode>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00b      	beq.n	80095e2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	22ff      	movs	r2, #255	; 0xff
 80095d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2204      	movs	r2, #4
 80095d6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2200      	movs	r2, #0
 80095dc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e045      	b.n	800966e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	6979      	ldr	r1, [r7, #20]
 80095e8:	4b23      	ldr	r3, [pc, #140]	; (8009678 <HAL_RTC_SetTime+0x178>)
 80095ea:	400b      	ands	r3, r1
 80095ec:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689a      	ldr	r2, [r3, #8]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80095fc:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6899      	ldr	r1, [r3, #8]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	691a      	ldr	r2, [r3, #16]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	431a      	orrs	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68da      	ldr	r2, [r3, #12]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009624:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f003 0320 	and.w	r3, r3, #32
 8009630:	2b00      	cmp	r3, #0
 8009632:	d111      	bne.n	8009658 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f000 f9e1 	bl	80099fc <HAL_RTC_WaitForSynchro>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00b      	beq.n	8009658 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	22ff      	movs	r2, #255	; 0xff
 8009646:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2204      	movs	r2, #4
 800964c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2200      	movs	r2, #0
 8009652:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e00a      	b.n	800966e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	22ff      	movs	r2, #255	; 0xff
 800965e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2201      	movs	r2, #1
 8009664:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800966c:	2300      	movs	r3, #0
  }
}
 800966e:	4618      	mov	r0, r3
 8009670:	371c      	adds	r7, #28
 8009672:	46bd      	mov	sp, r7
 8009674:	bd90      	pop	{r4, r7, pc}
 8009676:	bf00      	nop
 8009678:	007f7f7f 	.word	0x007f7f7f

0800967c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800967c:	b590      	push	{r4, r7, lr}
 800967e:	b087      	sub	sp, #28
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009688:	2300      	movs	r3, #0
 800968a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	7f1b      	ldrb	r3, [r3, #28]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d101      	bne.n	8009698 <HAL_RTC_SetDate+0x1c>
 8009694:	2302      	movs	r3, #2
 8009696:	e092      	b.n	80097be <HAL_RTC_SetDate+0x142>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2201      	movs	r2, #1
 800969c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2202      	movs	r2, #2
 80096a2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10e      	bne.n	80096c8 <HAL_RTC_SetDate+0x4c>
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	785b      	ldrb	r3, [r3, #1]
 80096ae:	f003 0310 	and.w	r3, r3, #16
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d008      	beq.n	80096c8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	785b      	ldrb	r3, [r3, #1]
 80096ba:	f023 0310 	bic.w	r3, r3, #16
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	330a      	adds	r3, #10
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d11c      	bne.n	8009708 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	78db      	ldrb	r3, [r3, #3]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 f9e6 	bl	8009aa4 <RTC_ByteToBcd2>
 80096d8:	4603      	mov	r3, r0
 80096da:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	785b      	ldrb	r3, [r3, #1]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 f9df 	bl	8009aa4 <RTC_ByteToBcd2>
 80096e6:	4603      	mov	r3, r0
 80096e8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80096ea:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	789b      	ldrb	r3, [r3, #2]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 f9d7 	bl	8009aa4 <RTC_ByteToBcd2>
 80096f6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80096f8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009702:	4313      	orrs	r3, r2
 8009704:	617b      	str	r3, [r7, #20]
 8009706:	e00e      	b.n	8009726 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	78db      	ldrb	r3, [r3, #3]
 800970c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	785b      	ldrb	r3, [r3, #1]
 8009712:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009714:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800971a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009722:	4313      	orrs	r3, r2
 8009724:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	22ca      	movs	r2, #202	; 0xca
 800972c:	625a      	str	r2, [r3, #36]	; 0x24
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2253      	movs	r2, #83	; 0x53
 8009734:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 f988 	bl	8009a4c <RTC_EnterInitMode>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d00b      	beq.n	800975a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	22ff      	movs	r2, #255	; 0xff
 8009748:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2204      	movs	r2, #4
 800974e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e031      	b.n	80097be <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	6979      	ldr	r1, [r7, #20]
 8009760:	4b19      	ldr	r3, [pc, #100]	; (80097c8 <HAL_RTC_SetDate+0x14c>)
 8009762:	400b      	ands	r3, r1
 8009764:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68da      	ldr	r2, [r3, #12]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009774:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f003 0320 	and.w	r3, r3, #32
 8009780:	2b00      	cmp	r3, #0
 8009782:	d111      	bne.n	80097a8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 f939 	bl	80099fc <HAL_RTC_WaitForSynchro>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	22ff      	movs	r2, #255	; 0xff
 8009796:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2204      	movs	r2, #4
 800979c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e00a      	b.n	80097be <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	22ff      	movs	r2, #255	; 0xff
 80097ae:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2201      	movs	r2, #1
 80097b4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2200      	movs	r2, #0
 80097ba:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80097bc:	2300      	movs	r3, #0
  }
}
 80097be:	4618      	mov	r0, r3
 80097c0:	371c      	adds	r7, #28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd90      	pop	{r4, r7, pc}
 80097c6:	bf00      	nop
 80097c8:	00ffff3f 	.word	0x00ffff3f

080097cc <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80097cc:	b590      	push	{r4, r7, lr}
 80097ce:	b089      	sub	sp, #36	; 0x24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80097d8:	2300      	movs	r3, #0
 80097da:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80097dc:	2300      	movs	r3, #0
 80097de:	61fb      	str	r3, [r7, #28]
 80097e0:	2300      	movs	r3, #0
 80097e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	7f1b      	ldrb	r3, [r3, #28]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d101      	bne.n	80097f0 <HAL_RTC_SetAlarm+0x24>
 80097ec:	2302      	movs	r3, #2
 80097ee:	e101      	b.n	80099f4 <HAL_RTC_SetAlarm+0x228>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2201      	movs	r2, #1
 80097f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2202      	movs	r2, #2
 80097fa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d137      	bne.n	8009872 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980c:	2b00      	cmp	r3, #0
 800980e:	d102      	bne.n	8009816 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2200      	movs	r2, #0
 8009814:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	4618      	mov	r0, r3
 800981c:	f000 f942 	bl	8009aa4 <RTC_ByteToBcd2>
 8009820:	4603      	mov	r3, r0
 8009822:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	785b      	ldrb	r3, [r3, #1]
 8009828:	4618      	mov	r0, r3
 800982a:	f000 f93b 	bl	8009aa4 <RTC_ByteToBcd2>
 800982e:	4603      	mov	r3, r0
 8009830:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009832:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	789b      	ldrb	r3, [r3, #2]
 8009838:	4618      	mov	r0, r3
 800983a:	f000 f933 	bl	8009aa4 <RTC_ByteToBcd2>
 800983e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009840:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	7b1b      	ldrb	r3, [r3, #12]
 8009848:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800984a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009854:	4618      	mov	r0, r3
 8009856:	f000 f925 	bl	8009aa4 <RTC_ByteToBcd2>
 800985a:	4603      	mov	r3, r0
 800985c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800985e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009866:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800986c:	4313      	orrs	r3, r2
 800986e:	61fb      	str	r3, [r7, #28]
 8009870:	e023      	b.n	80098ba <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2200      	movs	r2, #0
 8009884:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009892:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009898:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	7b1b      	ldrb	r3, [r3, #12]
 800989e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80098a0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80098a8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80098aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80098b0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80098b6:	4313      	orrs	r3, r2
 80098b8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	685a      	ldr	r2, [r3, #4]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	22ca      	movs	r2, #202	; 0xca
 80098cc:	625a      	str	r2, [r3, #36]	; 0x24
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2253      	movs	r2, #83	; 0x53
 80098d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098de:	d13f      	bne.n	8009960 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	689a      	ldr	r2, [r3, #8]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098ee:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689a      	ldr	r2, [r3, #8]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80098fe:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009900:	f7fb fc7a 	bl	80051f8 <HAL_GetTick>
 8009904:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009906:	e013      	b.n	8009930 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009908:	f7fb fc76 	bl	80051f8 <HAL_GetTick>
 800990c:	4602      	mov	r2, r0
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009916:	d90b      	bls.n	8009930 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	22ff      	movs	r2, #255	; 0xff
 800991e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2203      	movs	r2, #3
 8009924:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e061      	b.n	80099f4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	f003 0301 	and.w	r3, r3, #1
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0e4      	beq.n	8009908 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69fa      	ldr	r2, [r7, #28]
 8009944:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689a      	ldr	r2, [r3, #8]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800995c:	609a      	str	r2, [r3, #8]
 800995e:	e03e      	b.n	80099de <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	689a      	ldr	r2, [r3, #8]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800996e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	689a      	ldr	r2, [r3, #8]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800997e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009980:	f7fb fc3a 	bl	80051f8 <HAL_GetTick>
 8009984:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009986:	e013      	b.n	80099b0 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009988:	f7fb fc36 	bl	80051f8 <HAL_GetTick>
 800998c:	4602      	mov	r2, r0
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009996:	d90b      	bls.n	80099b0 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	22ff      	movs	r2, #255	; 0xff
 800999e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2203      	movs	r2, #3
 80099a4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e021      	b.n	80099f4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	f003 0302 	and.w	r3, r3, #2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0e4      	beq.n	8009988 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	69fa      	ldr	r2, [r7, #28]
 80099c4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	697a      	ldr	r2, [r7, #20]
 80099cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	689a      	ldr	r2, [r3, #8]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	22ff      	movs	r2, #255	; 0xff
 80099e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2201      	movs	r2, #1
 80099ea:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3724      	adds	r7, #36	; 0x24
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd90      	pop	{r4, r7, pc}

080099fc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68da      	ldr	r2, [r3, #12]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009a16:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a18:	f7fb fbee 	bl	80051f8 <HAL_GetTick>
 8009a1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009a1e:	e009      	b.n	8009a34 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009a20:	f7fb fbea 	bl	80051f8 <HAL_GetTick>
 8009a24:	4602      	mov	r2, r0
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a2e:	d901      	bls.n	8009a34 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e007      	b.n	8009a44 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d0ee      	beq.n	8009a20 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d119      	bne.n	8009a9a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a6e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a70:	f7fb fbc2 	bl	80051f8 <HAL_GetTick>
 8009a74:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009a76:	e009      	b.n	8009a8c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009a78:	f7fb fbbe 	bl	80051f8 <HAL_GetTick>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a86:	d901      	bls.n	8009a8c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e007      	b.n	8009a9c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d0ee      	beq.n	8009a78 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	4603      	mov	r3, r0
 8009aac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009ab2:	e005      	b.n	8009ac0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009aba:	79fb      	ldrb	r3, [r7, #7]
 8009abc:	3b0a      	subs	r3, #10
 8009abe:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009ac0:	79fb      	ldrb	r3, [r7, #7]
 8009ac2:	2b09      	cmp	r3, #9
 8009ac4:	d8f6      	bhi.n	8009ab4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	011b      	lsls	r3, r3, #4
 8009acc:	b2da      	uxtb	r2, r3
 8009ace:	79fb      	ldrb	r3, [r7, #7]
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	b2db      	uxtb	r3, r3
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b087      	sub	sp, #28
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009aec:	2300      	movs	r3, #0
 8009aee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	7f1b      	ldrb	r3, [r3, #28]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d101      	bne.n	8009afc <HAL_RTCEx_SetTimeStamp+0x1c>
 8009af8:	2302      	movs	r3, #2
 8009afa:	e03e      	b.n	8009b7a <HAL_RTCEx_SetTimeStamp+0x9a>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2201      	movs	r2, #1
 8009b00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2202      	movs	r2, #2
 8009b06:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	689a      	ldr	r2, [r3, #8]
 8009b0e:	4b1e      	ldr	r3, [pc, #120]	; (8009b88 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8009b10:	4013      	ands	r3, r2
 8009b12:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	22ca      	movs	r2, #202	; 0xca
 8009b22:	625a      	str	r2, [r3, #36]	; 0x24
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2253      	movs	r2, #83	; 0x53
 8009b2a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f022 0206 	bic.w	r2, r2, #6
 8009b3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	689a      	ldr	r2, [r3, #8]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b62:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	22ff      	movs	r2, #255	; 0xff
 8009b6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	371c      	adds	r7, #28
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	fffff7f7 	.word	0xfffff7f7

08009b8c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e025      	b.n	8009bec <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d106      	bne.n	8009bba <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7fb fa07 	bl	8004fc8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	4619      	mov	r1, r3
 8009bcc:	4610      	mov	r0, r2
 8009bce:	f001 fdb7 	bl	800b740 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6818      	ldr	r0, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	f001 fe0b 	bl	800b7f8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c06:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009c08:	7dfb      	ldrb	r3, [r7, #23]
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d101      	bne.n	8009c12 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e021      	b.n	8009c56 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009c12:	7dfb      	ldrb	r3, [r7, #23]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d002      	beq.n	8009c1e <HAL_SDRAM_SendCommand+0x2a>
 8009c18:	7dfb      	ldrb	r3, [r7, #23]
 8009c1a:	2b05      	cmp	r3, #5
 8009c1c:	d118      	bne.n	8009c50 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2202      	movs	r2, #2
 8009c22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	68b9      	ldr	r1, [r7, #8]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f001 fe4c 	bl	800b8cc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d104      	bne.n	8009c46 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2205      	movs	r2, #5
 8009c40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009c44:	e006      	b.n	8009c54 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009c4e:	e001      	b.n	8009c54 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e000      	b.n	8009c56 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b082      	sub	sp, #8
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d101      	bne.n	8009c78 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009c74:	2302      	movs	r3, #2
 8009c76:	e016      	b.n	8009ca6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d10f      	bne.n	8009ca4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2202      	movs	r2, #2
 8009c88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f001 fe3e 	bl	800b914 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e000      	b.n	8009ca6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e09d      	b.n	8009dfc <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d108      	bne.n	8009cda <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cd0:	d009      	beq.n	8009ce6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	61da      	str	r2, [r3, #28]
 8009cd8:	e005      	b.n	8009ce6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d106      	bne.n	8009d06 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7fa fec5 	bl	8004a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2202      	movs	r2, #2
 8009d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d1c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d26:	d902      	bls.n	8009d2e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60fb      	str	r3, [r7, #12]
 8009d2c:	e002      	b.n	8009d34 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d32:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009d3c:	d007      	beq.n	8009d4e <HAL_SPI_Init+0xa0>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d46:	d002      	beq.n	8009d4e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009d5e:	431a      	orrs	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	f003 0302 	and.w	r3, r3, #2
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	f003 0301 	and.w	r3, r3, #1
 8009d72:	431a      	orrs	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d7c:	431a      	orrs	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d86:	431a      	orrs	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a1b      	ldr	r3, [r3, #32]
 8009d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d90:	ea42 0103 	orr.w	r1, r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	0c1b      	lsrs	r3, r3, #16
 8009daa:	f003 0204 	and.w	r2, r3, #4
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db2:	f003 0310 	and.w	r3, r3, #16
 8009db6:	431a      	orrs	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dbc:	f003 0308 	and.w	r3, r3, #8
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009dca:	ea42 0103 	orr.w	r1, r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	69da      	ldr	r2, [r3, #28]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009dea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2201      	movs	r2, #1
 8009df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d101      	bne.n	8009e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	e049      	b.n	8009eaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d106      	bne.n	8009e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f7fa fe92 	bl	8004b54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2202      	movs	r2, #2
 8009e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3304      	adds	r3, #4
 8009e40:	4619      	mov	r1, r3
 8009e42:	4610      	mov	r0, r2
 8009e44:	f000 fac0 	bl	800a3c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
	...

08009eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d001      	beq.n	8009ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e054      	b.n	8009f76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0201 	orr.w	r2, r2, #1
 8009ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a26      	ldr	r2, [pc, #152]	; (8009f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d022      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef6:	d01d      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a22      	ldr	r2, [pc, #136]	; (8009f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d018      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a21      	ldr	r2, [pc, #132]	; (8009f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d013      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a1f      	ldr	r2, [pc, #124]	; (8009f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d00e      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a1e      	ldr	r2, [pc, #120]	; (8009f94 <HAL_TIM_Base_Start_IT+0xe0>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d009      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a1c      	ldr	r2, [pc, #112]	; (8009f98 <HAL_TIM_Base_Start_IT+0xe4>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d004      	beq.n	8009f34 <HAL_TIM_Base_Start_IT+0x80>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a1b      	ldr	r2, [pc, #108]	; (8009f9c <HAL_TIM_Base_Start_IT+0xe8>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d115      	bne.n	8009f60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689a      	ldr	r2, [r3, #8]
 8009f3a:	4b19      	ldr	r3, [pc, #100]	; (8009fa0 <HAL_TIM_Base_Start_IT+0xec>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2b06      	cmp	r3, #6
 8009f44:	d015      	beq.n	8009f72 <HAL_TIM_Base_Start_IT+0xbe>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f4c:	d011      	beq.n	8009f72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f042 0201 	orr.w	r2, r2, #1
 8009f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f5e:	e008      	b.n	8009f72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f042 0201 	orr.w	r2, r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	e000      	b.n	8009f74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	40010000 	.word	0x40010000
 8009f88:	40000400 	.word	0x40000400
 8009f8c:	40000800 	.word	0x40000800
 8009f90:	40000c00 	.word	0x40000c00
 8009f94:	40010400 	.word	0x40010400
 8009f98:	40014000 	.word	0x40014000
 8009f9c:	40001800 	.word	0x40001800
 8009fa0:	00010007 	.word	0x00010007

08009fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	f003 0302 	and.w	r3, r3, #2
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d122      	bne.n	800a000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	f003 0302 	and.w	r3, r3, #2
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d11b      	bne.n	800a000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f06f 0202 	mvn.w	r2, #2
 8009fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	f003 0303 	and.w	r3, r3, #3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d003      	beq.n	8009fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f9d0 	bl	800a38c <HAL_TIM_IC_CaptureCallback>
 8009fec:	e005      	b.n	8009ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f9c2 	bl	800a378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f9d3 	bl	800a3a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	691b      	ldr	r3, [r3, #16]
 800a006:	f003 0304 	and.w	r3, r3, #4
 800a00a:	2b04      	cmp	r3, #4
 800a00c:	d122      	bne.n	800a054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	f003 0304 	and.w	r3, r3, #4
 800a018:	2b04      	cmp	r3, #4
 800a01a:	d11b      	bne.n	800a054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f06f 0204 	mvn.w	r2, #4
 800a024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2202      	movs	r2, #2
 800a02a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f9a6 	bl	800a38c <HAL_TIM_IC_CaptureCallback>
 800a040:	e005      	b.n	800a04e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f998 	bl	800a378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f9a9 	bl	800a3a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	f003 0308 	and.w	r3, r3, #8
 800a05e:	2b08      	cmp	r3, #8
 800a060:	d122      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	f003 0308 	and.w	r3, r3, #8
 800a06c:	2b08      	cmp	r3, #8
 800a06e:	d11b      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f06f 0208 	mvn.w	r2, #8
 800a078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2204      	movs	r2, #4
 800a07e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	69db      	ldr	r3, [r3, #28]
 800a086:	f003 0303 	and.w	r3, r3, #3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d003      	beq.n	800a096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f97c 	bl	800a38c <HAL_TIM_IC_CaptureCallback>
 800a094:	e005      	b.n	800a0a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f96e 	bl	800a378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 f97f 	bl	800a3a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	f003 0310 	and.w	r3, r3, #16
 800a0b2:	2b10      	cmp	r3, #16
 800a0b4:	d122      	bne.n	800a0fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f003 0310 	and.w	r3, r3, #16
 800a0c0:	2b10      	cmp	r3, #16
 800a0c2:	d11b      	bne.n	800a0fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f06f 0210 	mvn.w	r2, #16
 800a0cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2208      	movs	r2, #8
 800a0d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f952 	bl	800a38c <HAL_TIM_IC_CaptureCallback>
 800a0e8:	e005      	b.n	800a0f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f944 	bl	800a378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 f955 	bl	800a3a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	2b01      	cmp	r3, #1
 800a108:	d10e      	bne.n	800a128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	f003 0301 	and.w	r3, r3, #1
 800a114:	2b01      	cmp	r3, #1
 800a116:	d107      	bne.n	800a128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f06f 0201 	mvn.w	r2, #1
 800a120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7f8 fd62 	bl	8002bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a132:	2b80      	cmp	r3, #128	; 0x80
 800a134:	d10e      	bne.n	800a154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a140:	2b80      	cmp	r3, #128	; 0x80
 800a142:	d107      	bne.n	800a154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a14c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fb0c 	bl	800a76c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a15e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a162:	d10e      	bne.n	800a182 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a16e:	2b80      	cmp	r3, #128	; 0x80
 800a170:	d107      	bne.n	800a182 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a17a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 faff 	bl	800a780 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a18c:	2b40      	cmp	r3, #64	; 0x40
 800a18e:	d10e      	bne.n	800a1ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a19a:	2b40      	cmp	r3, #64	; 0x40
 800a19c:	d107      	bne.n	800a1ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f903 	bl	800a3b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	f003 0320 	and.w	r3, r3, #32
 800a1b8:	2b20      	cmp	r3, #32
 800a1ba:	d10e      	bne.n	800a1da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	f003 0320 	and.w	r3, r3, #32
 800a1c6:	2b20      	cmp	r3, #32
 800a1c8:	d107      	bne.n	800a1da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f06f 0220 	mvn.w	r2, #32
 800a1d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fabf 	bl	800a758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1da:	bf00      	nop
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
	...

0800a1e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d101      	bne.n	800a200 <HAL_TIM_ConfigClockSource+0x1c>
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	e0b4      	b.n	800a36a <HAL_TIM_ConfigClockSource+0x186>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2202      	movs	r2, #2
 800a20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	4b56      	ldr	r3, [pc, #344]	; (800a374 <HAL_TIM_ConfigClockSource+0x190>)
 800a21c:	4013      	ands	r3, r2
 800a21e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a226:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a238:	d03e      	beq.n	800a2b8 <HAL_TIM_ConfigClockSource+0xd4>
 800a23a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a23e:	f200 8087 	bhi.w	800a350 <HAL_TIM_ConfigClockSource+0x16c>
 800a242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a246:	f000 8086 	beq.w	800a356 <HAL_TIM_ConfigClockSource+0x172>
 800a24a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a24e:	d87f      	bhi.n	800a350 <HAL_TIM_ConfigClockSource+0x16c>
 800a250:	2b70      	cmp	r3, #112	; 0x70
 800a252:	d01a      	beq.n	800a28a <HAL_TIM_ConfigClockSource+0xa6>
 800a254:	2b70      	cmp	r3, #112	; 0x70
 800a256:	d87b      	bhi.n	800a350 <HAL_TIM_ConfigClockSource+0x16c>
 800a258:	2b60      	cmp	r3, #96	; 0x60
 800a25a:	d050      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x11a>
 800a25c:	2b60      	cmp	r3, #96	; 0x60
 800a25e:	d877      	bhi.n	800a350 <HAL_TIM_ConfigClockSource+0x16c>
 800a260:	2b50      	cmp	r3, #80	; 0x50
 800a262:	d03c      	beq.n	800a2de <HAL_TIM_ConfigClockSource+0xfa>
 800a264:	2b50      	cmp	r3, #80	; 0x50
 800a266:	d873      	bhi.n	800a350 <HAL_TIM_ConfigClockSource+0x16c>
 800a268:	2b40      	cmp	r3, #64	; 0x40
 800a26a:	d058      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x13a>
 800a26c:	2b40      	cmp	r3, #64	; 0x40
 800a26e:	d86f      	bhi.n	800a350 <HAL_TIM_ConfigClockSource+0x16c>
 800a270:	2b30      	cmp	r3, #48	; 0x30
 800a272:	d064      	beq.n	800a33e <HAL_TIM_ConfigClockSource+0x15a>
 800a274:	2b30      	cmp	r3, #48	; 0x30
 800a276:	d86b      	bhi.n	800a350 <HAL_TIM_ConfigClockSource+0x16c>
 800a278:	2b20      	cmp	r3, #32
 800a27a:	d060      	beq.n	800a33e <HAL_TIM_ConfigClockSource+0x15a>
 800a27c:	2b20      	cmp	r3, #32
 800a27e:	d867      	bhi.n	800a350 <HAL_TIM_ConfigClockSource+0x16c>
 800a280:	2b00      	cmp	r3, #0
 800a282:	d05c      	beq.n	800a33e <HAL_TIM_ConfigClockSource+0x15a>
 800a284:	2b10      	cmp	r3, #16
 800a286:	d05a      	beq.n	800a33e <HAL_TIM_ConfigClockSource+0x15a>
 800a288:	e062      	b.n	800a350 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6818      	ldr	r0, [r3, #0]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	6899      	ldr	r1, [r3, #8]
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	f000 f9af 	bl	800a5fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a2ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	609a      	str	r2, [r3, #8]
      break;
 800a2b6:	e04f      	b.n	800a358 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6818      	ldr	r0, [r3, #0]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	6899      	ldr	r1, [r3, #8]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	685a      	ldr	r2, [r3, #4]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	f000 f998 	bl	800a5fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	689a      	ldr	r2, [r3, #8]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2da:	609a      	str	r2, [r3, #8]
      break;
 800a2dc:	e03c      	b.n	800a358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	6859      	ldr	r1, [r3, #4]
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	f000 f90c 	bl	800a508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2150      	movs	r1, #80	; 0x50
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 f965 	bl	800a5c6 <TIM_ITRx_SetConfig>
      break;
 800a2fc:	e02c      	b.n	800a358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6818      	ldr	r0, [r3, #0]
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	6859      	ldr	r1, [r3, #4]
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	461a      	mov	r2, r3
 800a30c:	f000 f92b 	bl	800a566 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2160      	movs	r1, #96	; 0x60
 800a316:	4618      	mov	r0, r3
 800a318:	f000 f955 	bl	800a5c6 <TIM_ITRx_SetConfig>
      break;
 800a31c:	e01c      	b.n	800a358 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6818      	ldr	r0, [r3, #0]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	6859      	ldr	r1, [r3, #4]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	461a      	mov	r2, r3
 800a32c:	f000 f8ec 	bl	800a508 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2140      	movs	r1, #64	; 0x40
 800a336:	4618      	mov	r0, r3
 800a338:	f000 f945 	bl	800a5c6 <TIM_ITRx_SetConfig>
      break;
 800a33c:	e00c      	b.n	800a358 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4619      	mov	r1, r3
 800a348:	4610      	mov	r0, r2
 800a34a:	f000 f93c 	bl	800a5c6 <TIM_ITRx_SetConfig>
      break;
 800a34e:	e003      	b.n	800a358 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	73fb      	strb	r3, [r7, #15]
      break;
 800a354:	e000      	b.n	800a358 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a368:	7bfb      	ldrb	r3, [r7, #15]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	fffeff88 	.word	0xfffeff88

0800a378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a40      	ldr	r2, [pc, #256]	; (800a4dc <TIM_Base_SetConfig+0x114>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d013      	beq.n	800a408 <TIM_Base_SetConfig+0x40>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3e6:	d00f      	beq.n	800a408 <TIM_Base_SetConfig+0x40>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a3d      	ldr	r2, [pc, #244]	; (800a4e0 <TIM_Base_SetConfig+0x118>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d00b      	beq.n	800a408 <TIM_Base_SetConfig+0x40>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a3c      	ldr	r2, [pc, #240]	; (800a4e4 <TIM_Base_SetConfig+0x11c>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d007      	beq.n	800a408 <TIM_Base_SetConfig+0x40>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a3b      	ldr	r2, [pc, #236]	; (800a4e8 <TIM_Base_SetConfig+0x120>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d003      	beq.n	800a408 <TIM_Base_SetConfig+0x40>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a3a      	ldr	r2, [pc, #232]	; (800a4ec <TIM_Base_SetConfig+0x124>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d108      	bne.n	800a41a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a40e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	4313      	orrs	r3, r2
 800a418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a2f      	ldr	r2, [pc, #188]	; (800a4dc <TIM_Base_SetConfig+0x114>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d02b      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a428:	d027      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a2c      	ldr	r2, [pc, #176]	; (800a4e0 <TIM_Base_SetConfig+0x118>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d023      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a2b      	ldr	r2, [pc, #172]	; (800a4e4 <TIM_Base_SetConfig+0x11c>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d01f      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a2a      	ldr	r2, [pc, #168]	; (800a4e8 <TIM_Base_SetConfig+0x120>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d01b      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a29      	ldr	r2, [pc, #164]	; (800a4ec <TIM_Base_SetConfig+0x124>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d017      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a28      	ldr	r2, [pc, #160]	; (800a4f0 <TIM_Base_SetConfig+0x128>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d013      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a27      	ldr	r2, [pc, #156]	; (800a4f4 <TIM_Base_SetConfig+0x12c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d00f      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a26      	ldr	r2, [pc, #152]	; (800a4f8 <TIM_Base_SetConfig+0x130>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d00b      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a25      	ldr	r2, [pc, #148]	; (800a4fc <TIM_Base_SetConfig+0x134>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d007      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a24      	ldr	r2, [pc, #144]	; (800a500 <TIM_Base_SetConfig+0x138>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d003      	beq.n	800a47a <TIM_Base_SetConfig+0xb2>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a23      	ldr	r2, [pc, #140]	; (800a504 <TIM_Base_SetConfig+0x13c>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d108      	bne.n	800a48c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	4313      	orrs	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	4313      	orrs	r3, r2
 800a498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	689a      	ldr	r2, [r3, #8]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a0a      	ldr	r2, [pc, #40]	; (800a4dc <TIM_Base_SetConfig+0x114>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d003      	beq.n	800a4c0 <TIM_Base_SetConfig+0xf8>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a0c      	ldr	r2, [pc, #48]	; (800a4ec <TIM_Base_SetConfig+0x124>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d103      	bne.n	800a4c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	691a      	ldr	r2, [r3, #16]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	615a      	str	r2, [r3, #20]
}
 800a4ce:	bf00      	nop
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	40010000 	.word	0x40010000
 800a4e0:	40000400 	.word	0x40000400
 800a4e4:	40000800 	.word	0x40000800
 800a4e8:	40000c00 	.word	0x40000c00
 800a4ec:	40010400 	.word	0x40010400
 800a4f0:	40014000 	.word	0x40014000
 800a4f4:	40014400 	.word	0x40014400
 800a4f8:	40014800 	.word	0x40014800
 800a4fc:	40001800 	.word	0x40001800
 800a500:	40001c00 	.word	0x40001c00
 800a504:	40002000 	.word	0x40002000

0800a508 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a508:	b480      	push	{r7}
 800a50a:	b087      	sub	sp, #28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6a1b      	ldr	r3, [r3, #32]
 800a518:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6a1b      	ldr	r3, [r3, #32]
 800a51e:	f023 0201 	bic.w	r2, r3, #1
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a532:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	011b      	lsls	r3, r3, #4
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f023 030a 	bic.w	r3, r3, #10
 800a544:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	621a      	str	r2, [r3, #32]
}
 800a55a:	bf00      	nop
 800a55c:	371c      	adds	r7, #28
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a566:	b480      	push	{r7}
 800a568:	b087      	sub	sp, #28
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	60b9      	str	r1, [r7, #8]
 800a570:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	f023 0210 	bic.w	r2, r3, #16
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a590:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	031b      	lsls	r3, r3, #12
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	4313      	orrs	r3, r2
 800a59a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	011b      	lsls	r3, r3, #4
 800a5a8:	693a      	ldr	r2, [r7, #16]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	697a      	ldr	r2, [r7, #20]
 800a5b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	693a      	ldr	r2, [r7, #16]
 800a5b8:	621a      	str	r2, [r3, #32]
}
 800a5ba:	bf00      	nop
 800a5bc:	371c      	adds	r7, #28
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b085      	sub	sp, #20
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	f043 0307 	orr.w	r3, r3, #7
 800a5e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	609a      	str	r2, [r3, #8]
}
 800a5f0:	bf00      	nop
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b087      	sub	sp, #28
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
 800a608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	021a      	lsls	r2, r3, #8
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	431a      	orrs	r2, r3
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	4313      	orrs	r3, r2
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	4313      	orrs	r3, r2
 800a628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	697a      	ldr	r2, [r7, #20]
 800a62e:	609a      	str	r2, [r3, #8]
}
 800a630:	bf00      	nop
 800a632:	371c      	adds	r7, #28
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d101      	bne.n	800a654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a650:	2302      	movs	r3, #2
 800a652:	e06d      	b.n	800a730 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2202      	movs	r2, #2
 800a660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a30      	ldr	r2, [pc, #192]	; (800a73c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d004      	beq.n	800a688 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a2f      	ldr	r2, [pc, #188]	; (800a740 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d108      	bne.n	800a69a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a68e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	68fa      	ldr	r2, [r7, #12]
 800a696:	4313      	orrs	r3, r2
 800a698:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a20      	ldr	r2, [pc, #128]	; (800a73c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d022      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6c6:	d01d      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a1d      	ldr	r2, [pc, #116]	; (800a744 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d018      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a1c      	ldr	r2, [pc, #112]	; (800a748 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d013      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a1a      	ldr	r2, [pc, #104]	; (800a74c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d00e      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a15      	ldr	r2, [pc, #84]	; (800a740 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d009      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a16      	ldr	r2, [pc, #88]	; (800a750 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d004      	beq.n	800a704 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a15      	ldr	r2, [pc, #84]	; (800a754 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d10c      	bne.n	800a71e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a70a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	4313      	orrs	r3, r2
 800a714:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	40010000 	.word	0x40010000
 800a740:	40010400 	.word	0x40010400
 800a744:	40000400 	.word	0x40000400
 800a748:	40000800 	.word	0x40000800
 800a74c:	40000c00 	.word	0x40000c00
 800a750:	40014000 	.word	0x40014000
 800a754:	40001800 	.word	0x40001800

0800a758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e040      	b.n	800a828 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d106      	bne.n	800a7bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7fa fa5e 	bl	8004c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2224      	movs	r2, #36	; 0x24
 800a7c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f022 0201 	bic.w	r2, r2, #1
 800a7d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fb16 	bl	800ae04 <UART_SetConfig>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d101      	bne.n	800a7e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e022      	b.n	800a828 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d002      	beq.n	800a7f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fd6c 	bl	800b2c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	685a      	ldr	r2, [r3, #4]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	689a      	ldr	r2, [r3, #8]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a80e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f042 0201 	orr.w	r2, r2, #1
 800a81e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fdf3 	bl	800b40c <UART_CheckIdleState>
 800a826:	4603      	mov	r3, r0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b0ba      	sub	sp, #232	; 0xe8
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a856:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a85a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a85e:	4013      	ands	r3, r2
 800a860:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a864:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d115      	bne.n	800a898 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a86c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a870:	f003 0320 	and.w	r3, r3, #32
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00f      	beq.n	800a898 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a87c:	f003 0320 	and.w	r3, r3, #32
 800a880:	2b00      	cmp	r3, #0
 800a882:	d009      	beq.n	800a898 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f000 828f 	beq.w	800adac <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	4798      	blx	r3
      }
      return;
 800a896:	e289      	b.n	800adac <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f000 8117 	beq.w	800aad0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a8a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8a6:	f003 0301 	and.w	r3, r3, #1
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d106      	bne.n	800a8bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a8ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a8b2:	4b85      	ldr	r3, [pc, #532]	; (800aac8 <HAL_UART_IRQHandler+0x298>)
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f000 810a 	beq.w	800aad0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a8bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8c0:	f003 0301 	and.w	r3, r3, #1
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d011      	beq.n	800a8ec <HAL_UART_IRQHandler+0xbc>
 800a8c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d00b      	beq.n	800a8ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8e2:	f043 0201 	orr.w	r2, r3, #1
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a8ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d011      	beq.n	800a91c <HAL_UART_IRQHandler+0xec>
 800a8f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8fc:	f003 0301 	and.w	r3, r3, #1
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00b      	beq.n	800a91c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2202      	movs	r2, #2
 800a90a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a912:	f043 0204 	orr.w	r2, r3, #4
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a920:	f003 0304 	and.w	r3, r3, #4
 800a924:	2b00      	cmp	r3, #0
 800a926:	d011      	beq.n	800a94c <HAL_UART_IRQHandler+0x11c>
 800a928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00b      	beq.n	800a94c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2204      	movs	r2, #4
 800a93a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a942:	f043 0202 	orr.w	r2, r3, #2
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a94c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a950:	f003 0308 	and.w	r3, r3, #8
 800a954:	2b00      	cmp	r3, #0
 800a956:	d017      	beq.n	800a988 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a95c:	f003 0320 	and.w	r3, r3, #32
 800a960:	2b00      	cmp	r3, #0
 800a962:	d105      	bne.n	800a970 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a968:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00b      	beq.n	800a988 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2208      	movs	r2, #8
 800a976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a97e:	f043 0208 	orr.w	r2, r3, #8
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a98c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a990:	2b00      	cmp	r3, #0
 800a992:	d012      	beq.n	800a9ba <HAL_UART_IRQHandler+0x18a>
 800a994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00c      	beq.n	800a9ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9b0:	f043 0220 	orr.w	r2, r3, #32
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 81f5 	beq.w	800adb0 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a9c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ca:	f003 0320 	and.w	r3, r3, #32
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00d      	beq.n	800a9ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a9d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9d6:	f003 0320 	and.w	r3, r3, #32
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d007      	beq.n	800a9ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d003      	beq.n	800a9ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa02:	2b40      	cmp	r3, #64	; 0x40
 800aa04:	d005      	beq.n	800aa12 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aa06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d04f      	beq.n	800aab2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fdf1 	bl	800b5fa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa22:	2b40      	cmp	r3, #64	; 0x40
 800aa24:	d141      	bne.n	800aaaa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	3308      	adds	r3, #8
 800aa2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa34:	e853 3f00 	ldrex	r3, [r3]
 800aa38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aa3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3308      	adds	r3, #8
 800aa4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aa52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aa56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aa5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aa62:	e841 2300 	strex	r3, r2, [r1]
 800aa66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aa6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1d9      	bne.n	800aa26 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d013      	beq.n	800aaa2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa7e:	4a13      	ldr	r2, [pc, #76]	; (800aacc <HAL_UART_IRQHandler+0x29c>)
 800aa80:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7fb fa86 	bl	8005f98 <HAL_DMA_Abort_IT>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d017      	beq.n	800aac2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaa0:	e00f      	b.n	800aac2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f998 	bl	800add8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaa8:	e00b      	b.n	800aac2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 f994 	bl	800add8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aab0:	e007      	b.n	800aac2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f990 	bl	800add8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800aac0:	e176      	b.n	800adb0 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aac2:	bf00      	nop
    return;
 800aac4:	e174      	b.n	800adb0 <HAL_UART_IRQHandler+0x580>
 800aac6:	bf00      	nop
 800aac8:	04000120 	.word	0x04000120
 800aacc:	0800b6c1 	.word	0x0800b6c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	f040 8144 	bne.w	800ad62 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aade:	f003 0310 	and.w	r3, r3, #16
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 813d 	beq.w	800ad62 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaec:	f003 0310 	and.w	r3, r3, #16
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f000 8136 	beq.w	800ad62 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2210      	movs	r2, #16
 800aafc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab08:	2b40      	cmp	r3, #64	; 0x40
 800ab0a:	f040 80b2 	bne.w	800ac72 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ab1a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	f000 8148 	beq.w	800adb4 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ab2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	f080 8140 	bcs.w	800adb4 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab42:	69db      	ldr	r3, [r3, #28]
 800ab44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab48:	f000 8085 	beq.w	800ac56 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab58:	e853 3f00 	ldrex	r3, [r3]
 800ab5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ab60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	461a      	mov	r2, r3
 800ab72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ab76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab7a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ab82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ab86:	e841 2300 	strex	r3, r2, [r1]
 800ab8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ab8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1da      	bne.n	800ab4c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aba0:	e853 3f00 	ldrex	r3, [r3]
 800aba4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aba8:	f023 0301 	bic.w	r3, r3, #1
 800abac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3308      	adds	r3, #8
 800abb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800abba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800abbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800abc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800abc6:	e841 2300 	strex	r3, r2, [r1]
 800abca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800abcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1e1      	bne.n	800ab96 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	3308      	adds	r3, #8
 800abd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abdc:	e853 3f00 	ldrex	r3, [r3]
 800abe0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800abe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	3308      	adds	r3, #8
 800abf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800abf6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800abf8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800abfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800abfe:	e841 2300 	strex	r3, r2, [r1]
 800ac02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ac04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d1e3      	bne.n	800abd2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2220      	movs	r2, #32
 800ac0e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac1e:	e853 3f00 	ldrex	r3, [r3]
 800ac22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac26:	f023 0310 	bic.w	r3, r3, #16
 800ac2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	461a      	mov	r2, r3
 800ac34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac38:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac40:	e841 2300 	strex	r3, r2, [r1]
 800ac44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1e4      	bne.n	800ac16 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fb f931 	bl	8005eb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	1ad3      	subs	r3, r2, r3
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f8be 	bl	800adec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac70:	e0a0      	b.n	800adb4 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 8092 	beq.w	800adb8 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800ac94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 808d 	beq.w	800adb8 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca6:	e853 3f00 	ldrex	r3, [r3]
 800acaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800acac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	461a      	mov	r2, r3
 800acbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acc0:	647b      	str	r3, [r7, #68]	; 0x44
 800acc2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800acc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acc8:	e841 2300 	strex	r3, r2, [r1]
 800accc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800acce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1e4      	bne.n	800ac9e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	3308      	adds	r3, #8
 800acda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	e853 3f00 	ldrex	r3, [r3]
 800ace2:	623b      	str	r3, [r7, #32]
   return(result);
 800ace4:	6a3b      	ldr	r3, [r7, #32]
 800ace6:	f023 0301 	bic.w	r3, r3, #1
 800acea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3308      	adds	r3, #8
 800acf4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800acf8:	633a      	str	r2, [r7, #48]	; 0x30
 800acfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad00:	e841 2300 	strex	r3, r2, [r1]
 800ad04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1e3      	bne.n	800acd4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2220      	movs	r2, #32
 800ad10:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	e853 3f00 	ldrex	r3, [r3]
 800ad2a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f023 0310 	bic.w	r3, r3, #16
 800ad32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ad40:	61fb      	str	r3, [r7, #28]
 800ad42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad44:	69b9      	ldr	r1, [r7, #24]
 800ad46:	69fa      	ldr	r2, [r7, #28]
 800ad48:	e841 2300 	strex	r3, r2, [r1]
 800ad4c:	617b      	str	r3, [r7, #20]
   return(result);
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1e4      	bne.n	800ad1e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ad54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad58:	4619      	mov	r1, r3
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f846 	bl	800adec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad60:	e02a      	b.n	800adb8 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ad62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00e      	beq.n	800ad8c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ad6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d008      	beq.n	800ad8c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d01c      	beq.n	800adbc <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	4798      	blx	r3
    }
    return;
 800ad8a:	e017      	b.n	800adbc <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d012      	beq.n	800adbe <HAL_UART_IRQHandler+0x58e>
 800ad98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00c      	beq.n	800adbe <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 fca1 	bl	800b6ec <UART_EndTransmit_IT>
    return;
 800adaa:	e008      	b.n	800adbe <HAL_UART_IRQHandler+0x58e>
      return;
 800adac:	bf00      	nop
 800adae:	e006      	b.n	800adbe <HAL_UART_IRQHandler+0x58e>
    return;
 800adb0:	bf00      	nop
 800adb2:	e004      	b.n	800adbe <HAL_UART_IRQHandler+0x58e>
      return;
 800adb4:	bf00      	nop
 800adb6:	e002      	b.n	800adbe <HAL_UART_IRQHandler+0x58e>
      return;
 800adb8:	bf00      	nop
 800adba:	e000      	b.n	800adbe <HAL_UART_IRQHandler+0x58e>
    return;
 800adbc:	bf00      	nop
  }

}
 800adbe:	37e8      	adds	r7, #232	; 0xe8
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b088      	sub	sp, #32
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	689a      	ldr	r2, [r3, #8]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	691b      	ldr	r3, [r3, #16]
 800ae18:	431a      	orrs	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	431a      	orrs	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	69db      	ldr	r3, [r3, #28]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	4ba7      	ldr	r3, [pc, #668]	; (800b0cc <UART_SetConfig+0x2c8>)
 800ae30:	4013      	ands	r3, r2
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	6812      	ldr	r2, [r2, #0]
 800ae36:	6979      	ldr	r1, [r7, #20]
 800ae38:	430b      	orrs	r3, r1
 800ae3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68da      	ldr	r2, [r3, #12]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	699b      	ldr	r3, [r3, #24]
 800ae56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a1b      	ldr	r3, [r3, #32]
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	430a      	orrs	r2, r1
 800ae74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a95      	ldr	r2, [pc, #596]	; (800b0d0 <UART_SetConfig+0x2cc>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d120      	bne.n	800aec2 <UART_SetConfig+0xbe>
 800ae80:	4b94      	ldr	r3, [pc, #592]	; (800b0d4 <UART_SetConfig+0x2d0>)
 800ae82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae86:	f003 0303 	and.w	r3, r3, #3
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	d816      	bhi.n	800aebc <UART_SetConfig+0xb8>
 800ae8e:	a201      	add	r2, pc, #4	; (adr r2, 800ae94 <UART_SetConfig+0x90>)
 800ae90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae94:	0800aea5 	.word	0x0800aea5
 800ae98:	0800aeb1 	.word	0x0800aeb1
 800ae9c:	0800aeab 	.word	0x0800aeab
 800aea0:	0800aeb7 	.word	0x0800aeb7
 800aea4:	2301      	movs	r3, #1
 800aea6:	77fb      	strb	r3, [r7, #31]
 800aea8:	e14f      	b.n	800b14a <UART_SetConfig+0x346>
 800aeaa:	2302      	movs	r3, #2
 800aeac:	77fb      	strb	r3, [r7, #31]
 800aeae:	e14c      	b.n	800b14a <UART_SetConfig+0x346>
 800aeb0:	2304      	movs	r3, #4
 800aeb2:	77fb      	strb	r3, [r7, #31]
 800aeb4:	e149      	b.n	800b14a <UART_SetConfig+0x346>
 800aeb6:	2308      	movs	r3, #8
 800aeb8:	77fb      	strb	r3, [r7, #31]
 800aeba:	e146      	b.n	800b14a <UART_SetConfig+0x346>
 800aebc:	2310      	movs	r3, #16
 800aebe:	77fb      	strb	r3, [r7, #31]
 800aec0:	e143      	b.n	800b14a <UART_SetConfig+0x346>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a84      	ldr	r2, [pc, #528]	; (800b0d8 <UART_SetConfig+0x2d4>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d132      	bne.n	800af32 <UART_SetConfig+0x12e>
 800aecc:	4b81      	ldr	r3, [pc, #516]	; (800b0d4 <UART_SetConfig+0x2d0>)
 800aece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aed2:	f003 030c 	and.w	r3, r3, #12
 800aed6:	2b0c      	cmp	r3, #12
 800aed8:	d828      	bhi.n	800af2c <UART_SetConfig+0x128>
 800aeda:	a201      	add	r2, pc, #4	; (adr r2, 800aee0 <UART_SetConfig+0xdc>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800af15 	.word	0x0800af15
 800aee4:	0800af2d 	.word	0x0800af2d
 800aee8:	0800af2d 	.word	0x0800af2d
 800aeec:	0800af2d 	.word	0x0800af2d
 800aef0:	0800af21 	.word	0x0800af21
 800aef4:	0800af2d 	.word	0x0800af2d
 800aef8:	0800af2d 	.word	0x0800af2d
 800aefc:	0800af2d 	.word	0x0800af2d
 800af00:	0800af1b 	.word	0x0800af1b
 800af04:	0800af2d 	.word	0x0800af2d
 800af08:	0800af2d 	.word	0x0800af2d
 800af0c:	0800af2d 	.word	0x0800af2d
 800af10:	0800af27 	.word	0x0800af27
 800af14:	2300      	movs	r3, #0
 800af16:	77fb      	strb	r3, [r7, #31]
 800af18:	e117      	b.n	800b14a <UART_SetConfig+0x346>
 800af1a:	2302      	movs	r3, #2
 800af1c:	77fb      	strb	r3, [r7, #31]
 800af1e:	e114      	b.n	800b14a <UART_SetConfig+0x346>
 800af20:	2304      	movs	r3, #4
 800af22:	77fb      	strb	r3, [r7, #31]
 800af24:	e111      	b.n	800b14a <UART_SetConfig+0x346>
 800af26:	2308      	movs	r3, #8
 800af28:	77fb      	strb	r3, [r7, #31]
 800af2a:	e10e      	b.n	800b14a <UART_SetConfig+0x346>
 800af2c:	2310      	movs	r3, #16
 800af2e:	77fb      	strb	r3, [r7, #31]
 800af30:	e10b      	b.n	800b14a <UART_SetConfig+0x346>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a69      	ldr	r2, [pc, #420]	; (800b0dc <UART_SetConfig+0x2d8>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d120      	bne.n	800af7e <UART_SetConfig+0x17a>
 800af3c:	4b65      	ldr	r3, [pc, #404]	; (800b0d4 <UART_SetConfig+0x2d0>)
 800af3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800af46:	2b30      	cmp	r3, #48	; 0x30
 800af48:	d013      	beq.n	800af72 <UART_SetConfig+0x16e>
 800af4a:	2b30      	cmp	r3, #48	; 0x30
 800af4c:	d814      	bhi.n	800af78 <UART_SetConfig+0x174>
 800af4e:	2b20      	cmp	r3, #32
 800af50:	d009      	beq.n	800af66 <UART_SetConfig+0x162>
 800af52:	2b20      	cmp	r3, #32
 800af54:	d810      	bhi.n	800af78 <UART_SetConfig+0x174>
 800af56:	2b00      	cmp	r3, #0
 800af58:	d002      	beq.n	800af60 <UART_SetConfig+0x15c>
 800af5a:	2b10      	cmp	r3, #16
 800af5c:	d006      	beq.n	800af6c <UART_SetConfig+0x168>
 800af5e:	e00b      	b.n	800af78 <UART_SetConfig+0x174>
 800af60:	2300      	movs	r3, #0
 800af62:	77fb      	strb	r3, [r7, #31]
 800af64:	e0f1      	b.n	800b14a <UART_SetConfig+0x346>
 800af66:	2302      	movs	r3, #2
 800af68:	77fb      	strb	r3, [r7, #31]
 800af6a:	e0ee      	b.n	800b14a <UART_SetConfig+0x346>
 800af6c:	2304      	movs	r3, #4
 800af6e:	77fb      	strb	r3, [r7, #31]
 800af70:	e0eb      	b.n	800b14a <UART_SetConfig+0x346>
 800af72:	2308      	movs	r3, #8
 800af74:	77fb      	strb	r3, [r7, #31]
 800af76:	e0e8      	b.n	800b14a <UART_SetConfig+0x346>
 800af78:	2310      	movs	r3, #16
 800af7a:	77fb      	strb	r3, [r7, #31]
 800af7c:	e0e5      	b.n	800b14a <UART_SetConfig+0x346>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a57      	ldr	r2, [pc, #348]	; (800b0e0 <UART_SetConfig+0x2dc>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d120      	bne.n	800afca <UART_SetConfig+0x1c6>
 800af88:	4b52      	ldr	r3, [pc, #328]	; (800b0d4 <UART_SetConfig+0x2d0>)
 800af8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af92:	2bc0      	cmp	r3, #192	; 0xc0
 800af94:	d013      	beq.n	800afbe <UART_SetConfig+0x1ba>
 800af96:	2bc0      	cmp	r3, #192	; 0xc0
 800af98:	d814      	bhi.n	800afc4 <UART_SetConfig+0x1c0>
 800af9a:	2b80      	cmp	r3, #128	; 0x80
 800af9c:	d009      	beq.n	800afb2 <UART_SetConfig+0x1ae>
 800af9e:	2b80      	cmp	r3, #128	; 0x80
 800afa0:	d810      	bhi.n	800afc4 <UART_SetConfig+0x1c0>
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d002      	beq.n	800afac <UART_SetConfig+0x1a8>
 800afa6:	2b40      	cmp	r3, #64	; 0x40
 800afa8:	d006      	beq.n	800afb8 <UART_SetConfig+0x1b4>
 800afaa:	e00b      	b.n	800afc4 <UART_SetConfig+0x1c0>
 800afac:	2300      	movs	r3, #0
 800afae:	77fb      	strb	r3, [r7, #31]
 800afb0:	e0cb      	b.n	800b14a <UART_SetConfig+0x346>
 800afb2:	2302      	movs	r3, #2
 800afb4:	77fb      	strb	r3, [r7, #31]
 800afb6:	e0c8      	b.n	800b14a <UART_SetConfig+0x346>
 800afb8:	2304      	movs	r3, #4
 800afba:	77fb      	strb	r3, [r7, #31]
 800afbc:	e0c5      	b.n	800b14a <UART_SetConfig+0x346>
 800afbe:	2308      	movs	r3, #8
 800afc0:	77fb      	strb	r3, [r7, #31]
 800afc2:	e0c2      	b.n	800b14a <UART_SetConfig+0x346>
 800afc4:	2310      	movs	r3, #16
 800afc6:	77fb      	strb	r3, [r7, #31]
 800afc8:	e0bf      	b.n	800b14a <UART_SetConfig+0x346>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a45      	ldr	r2, [pc, #276]	; (800b0e4 <UART_SetConfig+0x2e0>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d125      	bne.n	800b020 <UART_SetConfig+0x21c>
 800afd4:	4b3f      	ldr	r3, [pc, #252]	; (800b0d4 <UART_SetConfig+0x2d0>)
 800afd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afe2:	d017      	beq.n	800b014 <UART_SetConfig+0x210>
 800afe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afe8:	d817      	bhi.n	800b01a <UART_SetConfig+0x216>
 800afea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afee:	d00b      	beq.n	800b008 <UART_SetConfig+0x204>
 800aff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aff4:	d811      	bhi.n	800b01a <UART_SetConfig+0x216>
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d003      	beq.n	800b002 <UART_SetConfig+0x1fe>
 800affa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800affe:	d006      	beq.n	800b00e <UART_SetConfig+0x20a>
 800b000:	e00b      	b.n	800b01a <UART_SetConfig+0x216>
 800b002:	2300      	movs	r3, #0
 800b004:	77fb      	strb	r3, [r7, #31]
 800b006:	e0a0      	b.n	800b14a <UART_SetConfig+0x346>
 800b008:	2302      	movs	r3, #2
 800b00a:	77fb      	strb	r3, [r7, #31]
 800b00c:	e09d      	b.n	800b14a <UART_SetConfig+0x346>
 800b00e:	2304      	movs	r3, #4
 800b010:	77fb      	strb	r3, [r7, #31]
 800b012:	e09a      	b.n	800b14a <UART_SetConfig+0x346>
 800b014:	2308      	movs	r3, #8
 800b016:	77fb      	strb	r3, [r7, #31]
 800b018:	e097      	b.n	800b14a <UART_SetConfig+0x346>
 800b01a:	2310      	movs	r3, #16
 800b01c:	77fb      	strb	r3, [r7, #31]
 800b01e:	e094      	b.n	800b14a <UART_SetConfig+0x346>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a30      	ldr	r2, [pc, #192]	; (800b0e8 <UART_SetConfig+0x2e4>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d125      	bne.n	800b076 <UART_SetConfig+0x272>
 800b02a:	4b2a      	ldr	r3, [pc, #168]	; (800b0d4 <UART_SetConfig+0x2d0>)
 800b02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b030:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b038:	d017      	beq.n	800b06a <UART_SetConfig+0x266>
 800b03a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b03e:	d817      	bhi.n	800b070 <UART_SetConfig+0x26c>
 800b040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b044:	d00b      	beq.n	800b05e <UART_SetConfig+0x25a>
 800b046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b04a:	d811      	bhi.n	800b070 <UART_SetConfig+0x26c>
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d003      	beq.n	800b058 <UART_SetConfig+0x254>
 800b050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b054:	d006      	beq.n	800b064 <UART_SetConfig+0x260>
 800b056:	e00b      	b.n	800b070 <UART_SetConfig+0x26c>
 800b058:	2301      	movs	r3, #1
 800b05a:	77fb      	strb	r3, [r7, #31]
 800b05c:	e075      	b.n	800b14a <UART_SetConfig+0x346>
 800b05e:	2302      	movs	r3, #2
 800b060:	77fb      	strb	r3, [r7, #31]
 800b062:	e072      	b.n	800b14a <UART_SetConfig+0x346>
 800b064:	2304      	movs	r3, #4
 800b066:	77fb      	strb	r3, [r7, #31]
 800b068:	e06f      	b.n	800b14a <UART_SetConfig+0x346>
 800b06a:	2308      	movs	r3, #8
 800b06c:	77fb      	strb	r3, [r7, #31]
 800b06e:	e06c      	b.n	800b14a <UART_SetConfig+0x346>
 800b070:	2310      	movs	r3, #16
 800b072:	77fb      	strb	r3, [r7, #31]
 800b074:	e069      	b.n	800b14a <UART_SetConfig+0x346>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a1c      	ldr	r2, [pc, #112]	; (800b0ec <UART_SetConfig+0x2e8>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d137      	bne.n	800b0f0 <UART_SetConfig+0x2ec>
 800b080:	4b14      	ldr	r3, [pc, #80]	; (800b0d4 <UART_SetConfig+0x2d0>)
 800b082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b086:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b08a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b08e:	d017      	beq.n	800b0c0 <UART_SetConfig+0x2bc>
 800b090:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b094:	d817      	bhi.n	800b0c6 <UART_SetConfig+0x2c2>
 800b096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b09a:	d00b      	beq.n	800b0b4 <UART_SetConfig+0x2b0>
 800b09c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0a0:	d811      	bhi.n	800b0c6 <UART_SetConfig+0x2c2>
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d003      	beq.n	800b0ae <UART_SetConfig+0x2aa>
 800b0a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0aa:	d006      	beq.n	800b0ba <UART_SetConfig+0x2b6>
 800b0ac:	e00b      	b.n	800b0c6 <UART_SetConfig+0x2c2>
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	77fb      	strb	r3, [r7, #31]
 800b0b2:	e04a      	b.n	800b14a <UART_SetConfig+0x346>
 800b0b4:	2302      	movs	r3, #2
 800b0b6:	77fb      	strb	r3, [r7, #31]
 800b0b8:	e047      	b.n	800b14a <UART_SetConfig+0x346>
 800b0ba:	2304      	movs	r3, #4
 800b0bc:	77fb      	strb	r3, [r7, #31]
 800b0be:	e044      	b.n	800b14a <UART_SetConfig+0x346>
 800b0c0:	2308      	movs	r3, #8
 800b0c2:	77fb      	strb	r3, [r7, #31]
 800b0c4:	e041      	b.n	800b14a <UART_SetConfig+0x346>
 800b0c6:	2310      	movs	r3, #16
 800b0c8:	77fb      	strb	r3, [r7, #31]
 800b0ca:	e03e      	b.n	800b14a <UART_SetConfig+0x346>
 800b0cc:	efff69f3 	.word	0xefff69f3
 800b0d0:	40011000 	.word	0x40011000
 800b0d4:	40023800 	.word	0x40023800
 800b0d8:	40004400 	.word	0x40004400
 800b0dc:	40004800 	.word	0x40004800
 800b0e0:	40004c00 	.word	0x40004c00
 800b0e4:	40005000 	.word	0x40005000
 800b0e8:	40011400 	.word	0x40011400
 800b0ec:	40007800 	.word	0x40007800
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a71      	ldr	r2, [pc, #452]	; (800b2bc <UART_SetConfig+0x4b8>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d125      	bne.n	800b146 <UART_SetConfig+0x342>
 800b0fa:	4b71      	ldr	r3, [pc, #452]	; (800b2c0 <UART_SetConfig+0x4bc>)
 800b0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b100:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b104:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b108:	d017      	beq.n	800b13a <UART_SetConfig+0x336>
 800b10a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b10e:	d817      	bhi.n	800b140 <UART_SetConfig+0x33c>
 800b110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b114:	d00b      	beq.n	800b12e <UART_SetConfig+0x32a>
 800b116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b11a:	d811      	bhi.n	800b140 <UART_SetConfig+0x33c>
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d003      	beq.n	800b128 <UART_SetConfig+0x324>
 800b120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b124:	d006      	beq.n	800b134 <UART_SetConfig+0x330>
 800b126:	e00b      	b.n	800b140 <UART_SetConfig+0x33c>
 800b128:	2300      	movs	r3, #0
 800b12a:	77fb      	strb	r3, [r7, #31]
 800b12c:	e00d      	b.n	800b14a <UART_SetConfig+0x346>
 800b12e:	2302      	movs	r3, #2
 800b130:	77fb      	strb	r3, [r7, #31]
 800b132:	e00a      	b.n	800b14a <UART_SetConfig+0x346>
 800b134:	2304      	movs	r3, #4
 800b136:	77fb      	strb	r3, [r7, #31]
 800b138:	e007      	b.n	800b14a <UART_SetConfig+0x346>
 800b13a:	2308      	movs	r3, #8
 800b13c:	77fb      	strb	r3, [r7, #31]
 800b13e:	e004      	b.n	800b14a <UART_SetConfig+0x346>
 800b140:	2310      	movs	r3, #16
 800b142:	77fb      	strb	r3, [r7, #31]
 800b144:	e001      	b.n	800b14a <UART_SetConfig+0x346>
 800b146:	2310      	movs	r3, #16
 800b148:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	69db      	ldr	r3, [r3, #28]
 800b14e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b152:	d15a      	bne.n	800b20a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800b154:	7ffb      	ldrb	r3, [r7, #31]
 800b156:	2b08      	cmp	r3, #8
 800b158:	d827      	bhi.n	800b1aa <UART_SetConfig+0x3a6>
 800b15a:	a201      	add	r2, pc, #4	; (adr r2, 800b160 <UART_SetConfig+0x35c>)
 800b15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b160:	0800b185 	.word	0x0800b185
 800b164:	0800b18d 	.word	0x0800b18d
 800b168:	0800b195 	.word	0x0800b195
 800b16c:	0800b1ab 	.word	0x0800b1ab
 800b170:	0800b19b 	.word	0x0800b19b
 800b174:	0800b1ab 	.word	0x0800b1ab
 800b178:	0800b1ab 	.word	0x0800b1ab
 800b17c:	0800b1ab 	.word	0x0800b1ab
 800b180:	0800b1a3 	.word	0x0800b1a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b184:	f7fd fce0 	bl	8008b48 <HAL_RCC_GetPCLK1Freq>
 800b188:	61b8      	str	r0, [r7, #24]
        break;
 800b18a:	e013      	b.n	800b1b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b18c:	f7fd fcf0 	bl	8008b70 <HAL_RCC_GetPCLK2Freq>
 800b190:	61b8      	str	r0, [r7, #24]
        break;
 800b192:	e00f      	b.n	800b1b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b194:	4b4b      	ldr	r3, [pc, #300]	; (800b2c4 <UART_SetConfig+0x4c0>)
 800b196:	61bb      	str	r3, [r7, #24]
        break;
 800b198:	e00c      	b.n	800b1b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b19a:	f7fd fc13 	bl	80089c4 <HAL_RCC_GetSysClockFreq>
 800b19e:	61b8      	str	r0, [r7, #24]
        break;
 800b1a0:	e008      	b.n	800b1b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1a6:	61bb      	str	r3, [r7, #24]
        break;
 800b1a8:	e004      	b.n	800b1b4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	77bb      	strb	r3, [r7, #30]
        break;
 800b1b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d074      	beq.n	800b2a4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	005a      	lsls	r2, r3, #1
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	085b      	lsrs	r3, r3, #1
 800b1c4:	441a      	add	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	2b0f      	cmp	r3, #15
 800b1d4:	d916      	bls.n	800b204 <UART_SetConfig+0x400>
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1dc:	d212      	bcs.n	800b204 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	f023 030f 	bic.w	r3, r3, #15
 800b1e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	085b      	lsrs	r3, r3, #1
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	f003 0307 	and.w	r3, r3, #7
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	89fb      	ldrh	r3, [r7, #14]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	89fa      	ldrh	r2, [r7, #14]
 800b200:	60da      	str	r2, [r3, #12]
 800b202:	e04f      	b.n	800b2a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	77bb      	strb	r3, [r7, #30]
 800b208:	e04c      	b.n	800b2a4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b20a:	7ffb      	ldrb	r3, [r7, #31]
 800b20c:	2b08      	cmp	r3, #8
 800b20e:	d828      	bhi.n	800b262 <UART_SetConfig+0x45e>
 800b210:	a201      	add	r2, pc, #4	; (adr r2, 800b218 <UART_SetConfig+0x414>)
 800b212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b216:	bf00      	nop
 800b218:	0800b23d 	.word	0x0800b23d
 800b21c:	0800b245 	.word	0x0800b245
 800b220:	0800b24d 	.word	0x0800b24d
 800b224:	0800b263 	.word	0x0800b263
 800b228:	0800b253 	.word	0x0800b253
 800b22c:	0800b263 	.word	0x0800b263
 800b230:	0800b263 	.word	0x0800b263
 800b234:	0800b263 	.word	0x0800b263
 800b238:	0800b25b 	.word	0x0800b25b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b23c:	f7fd fc84 	bl	8008b48 <HAL_RCC_GetPCLK1Freq>
 800b240:	61b8      	str	r0, [r7, #24]
        break;
 800b242:	e013      	b.n	800b26c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b244:	f7fd fc94 	bl	8008b70 <HAL_RCC_GetPCLK2Freq>
 800b248:	61b8      	str	r0, [r7, #24]
        break;
 800b24a:	e00f      	b.n	800b26c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b24c:	4b1d      	ldr	r3, [pc, #116]	; (800b2c4 <UART_SetConfig+0x4c0>)
 800b24e:	61bb      	str	r3, [r7, #24]
        break;
 800b250:	e00c      	b.n	800b26c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b252:	f7fd fbb7 	bl	80089c4 <HAL_RCC_GetSysClockFreq>
 800b256:	61b8      	str	r0, [r7, #24]
        break;
 800b258:	e008      	b.n	800b26c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b25a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b25e:	61bb      	str	r3, [r7, #24]
        break;
 800b260:	e004      	b.n	800b26c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b262:	2300      	movs	r3, #0
 800b264:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	77bb      	strb	r3, [r7, #30]
        break;
 800b26a:	bf00      	nop
    }

    if (pclk != 0U)
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d018      	beq.n	800b2a4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	085a      	lsrs	r2, r3, #1
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	441a      	add	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	fbb2 f3f3 	udiv	r3, r2, r3
 800b284:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	2b0f      	cmp	r3, #15
 800b28a:	d909      	bls.n	800b2a0 <UART_SetConfig+0x49c>
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b292:	d205      	bcs.n	800b2a0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	b29a      	uxth	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	60da      	str	r2, [r3, #12]
 800b29e:	e001      	b.n	800b2a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b2b0:	7fbb      	ldrb	r3, [r7, #30]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3720      	adds	r7, #32
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	40007c00 	.word	0x40007c00
 800b2c0:	40023800 	.word	0x40023800
 800b2c4:	00f42400 	.word	0x00f42400

0800b2c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	f003 0301 	and.w	r3, r3, #1
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00a      	beq.n	800b2f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f6:	f003 0302 	and.w	r3, r3, #2
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00a      	beq.n	800b314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	430a      	orrs	r2, r1
 800b312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b318:	f003 0304 	and.w	r3, r3, #4
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00a      	beq.n	800b336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	430a      	orrs	r2, r1
 800b334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33a:	f003 0308 	and.w	r3, r3, #8
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00a      	beq.n	800b358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	430a      	orrs	r2, r1
 800b356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35c:	f003 0310 	and.w	r3, r3, #16
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00a      	beq.n	800b37a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	430a      	orrs	r2, r1
 800b378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37e:	f003 0320 	and.w	r3, r3, #32
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00a      	beq.n	800b39c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	430a      	orrs	r2, r1
 800b39a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d01a      	beq.n	800b3de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	430a      	orrs	r2, r1
 800b3bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3c6:	d10a      	bne.n	800b3de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00a      	beq.n	800b400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	430a      	orrs	r2, r1
 800b3fe:	605a      	str	r2, [r3, #4]
  }
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af02      	add	r7, sp, #8
 800b412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2200      	movs	r2, #0
 800b418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b41c:	f7f9 feec 	bl	80051f8 <HAL_GetTick>
 800b420:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 0308 	and.w	r3, r3, #8
 800b42c:	2b08      	cmp	r3, #8
 800b42e:	d10e      	bne.n	800b44e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b430:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f817 	bl	800b472 <UART_WaitOnFlagUntilTimeout>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	d001      	beq.n	800b44e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e00d      	b.n	800b46a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2220      	movs	r2, #32
 800b452:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2220      	movs	r2, #32
 800b458:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2200      	movs	r2, #0
 800b45e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b468:	2300      	movs	r3, #0
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b09c      	sub	sp, #112	; 0x70
 800b476:	af00      	add	r7, sp, #0
 800b478:	60f8      	str	r0, [r7, #12]
 800b47a:	60b9      	str	r1, [r7, #8]
 800b47c:	603b      	str	r3, [r7, #0]
 800b47e:	4613      	mov	r3, r2
 800b480:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b482:	e0a5      	b.n	800b5d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48a:	f000 80a1 	beq.w	800b5d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b48e:	f7f9 feb3 	bl	80051f8 <HAL_GetTick>
 800b492:	4602      	mov	r2, r0
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	1ad3      	subs	r3, r2, r3
 800b498:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d302      	bcc.n	800b4a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b49e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d13e      	bne.n	800b522 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b4b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b4b8:	667b      	str	r3, [r7, #100]	; 0x64
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b4c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b4d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1e6      	bne.n	800b4a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	3308      	adds	r3, #8
 800b4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e0:	e853 3f00 	ldrex	r3, [r3]
 800b4e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e8:	f023 0301 	bic.w	r3, r3, #1
 800b4ec:	663b      	str	r3, [r7, #96]	; 0x60
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3308      	adds	r3, #8
 800b4f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b4f6:	64ba      	str	r2, [r7, #72]	; 0x48
 800b4f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b4fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4fe:	e841 2300 	strex	r3, r2, [r1]
 800b502:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1e5      	bne.n	800b4d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2220      	movs	r2, #32
 800b50e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2220      	movs	r2, #32
 800b514:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e067      	b.n	800b5f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d04f      	beq.n	800b5d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b53a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b53e:	d147      	bne.n	800b5d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b548:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b552:	e853 3f00 	ldrex	r3, [r3]
 800b556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b55e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	461a      	mov	r2, r3
 800b566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b568:	637b      	str	r3, [r7, #52]	; 0x34
 800b56a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b56e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b570:	e841 2300 	strex	r3, r2, [r1]
 800b574:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1e6      	bne.n	800b54a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3308      	adds	r3, #8
 800b582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	e853 3f00 	ldrex	r3, [r3]
 800b58a:	613b      	str	r3, [r7, #16]
   return(result);
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	f023 0301 	bic.w	r3, r3, #1
 800b592:	66bb      	str	r3, [r7, #104]	; 0x68
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	3308      	adds	r3, #8
 800b59a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b59c:	623a      	str	r2, [r7, #32]
 800b59e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a0:	69f9      	ldr	r1, [r7, #28]
 800b5a2:	6a3a      	ldr	r2, [r7, #32]
 800b5a4:	e841 2300 	strex	r3, r2, [r1]
 800b5a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1e5      	bne.n	800b57c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2220      	movs	r2, #32
 800b5b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2220      	movs	r2, #32
 800b5ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2220      	movs	r2, #32
 800b5c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	e010      	b.n	800b5f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	69da      	ldr	r2, [r3, #28]
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	4013      	ands	r3, r2
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	bf0c      	ite	eq
 800b5e0:	2301      	moveq	r3, #1
 800b5e2:	2300      	movne	r3, #0
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	79fb      	ldrb	r3, [r7, #7]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	f43f af4a 	beq.w	800b484 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3770      	adds	r7, #112	; 0x70
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b5fa:	b480      	push	{r7}
 800b5fc:	b095      	sub	sp, #84	; 0x54
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60a:	e853 3f00 	ldrex	r3, [r3]
 800b60e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b612:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b616:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	461a      	mov	r2, r3
 800b61e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b620:	643b      	str	r3, [r7, #64]	; 0x40
 800b622:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b624:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b626:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b628:	e841 2300 	strex	r3, r2, [r1]
 800b62c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1e6      	bne.n	800b602 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3308      	adds	r3, #8
 800b63a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63c:	6a3b      	ldr	r3, [r7, #32]
 800b63e:	e853 3f00 	ldrex	r3, [r3]
 800b642:	61fb      	str	r3, [r7, #28]
   return(result);
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	f023 0301 	bic.w	r3, r3, #1
 800b64a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	3308      	adds	r3, #8
 800b652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b654:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b65c:	e841 2300 	strex	r3, r2, [r1]
 800b660:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b664:	2b00      	cmp	r3, #0
 800b666:	d1e5      	bne.n	800b634 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d118      	bne.n	800b6a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	e853 3f00 	ldrex	r3, [r3]
 800b67c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	f023 0310 	bic.w	r3, r3, #16
 800b684:	647b      	str	r3, [r7, #68]	; 0x44
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	461a      	mov	r2, r3
 800b68c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b68e:	61bb      	str	r3, [r7, #24]
 800b690:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b692:	6979      	ldr	r1, [r7, #20]
 800b694:	69ba      	ldr	r2, [r7, #24]
 800b696:	e841 2300 	strex	r3, r2, [r1]
 800b69a:	613b      	str	r3, [r7, #16]
   return(result);
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1e6      	bne.n	800b670 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2220      	movs	r2, #32
 800b6a6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b6b4:	bf00      	nop
 800b6b6:	3754      	adds	r7, #84	; 0x54
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f7ff fb7a 	bl	800add8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6e4:	bf00      	nop
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b088      	sub	sp, #32
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	e853 3f00 	ldrex	r3, [r3]
 800b700:	60bb      	str	r3, [r7, #8]
   return(result);
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b708:	61fb      	str	r3, [r7, #28]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	461a      	mov	r2, r3
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	61bb      	str	r3, [r7, #24]
 800b714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b716:	6979      	ldr	r1, [r7, #20]
 800b718:	69ba      	ldr	r2, [r7, #24]
 800b71a:	e841 2300 	strex	r3, r2, [r1]
 800b71e:	613b      	str	r3, [r7, #16]
   return(result);
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1e6      	bne.n	800b6f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2220      	movs	r2, #32
 800b72a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7ff fb46 	bl	800adc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b738:	bf00      	nop
 800b73a:	3720      	adds	r7, #32
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b740:	b480      	push	{r7}
 800b742:	b083      	sub	sp, #12
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d121      	bne.n	800b796 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	4b27      	ldr	r3, [pc, #156]	; (800b7f4 <FMC_SDRAM_Init+0xb4>)
 800b758:	4013      	ands	r3, r2
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	6851      	ldr	r1, [r2, #4]
 800b75e:	683a      	ldr	r2, [r7, #0]
 800b760:	6892      	ldr	r2, [r2, #8]
 800b762:	4311      	orrs	r1, r2
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	68d2      	ldr	r2, [r2, #12]
 800b768:	4311      	orrs	r1, r2
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	6912      	ldr	r2, [r2, #16]
 800b76e:	4311      	orrs	r1, r2
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	6952      	ldr	r2, [r2, #20]
 800b774:	4311      	orrs	r1, r2
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	6992      	ldr	r2, [r2, #24]
 800b77a:	4311      	orrs	r1, r2
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	69d2      	ldr	r2, [r2, #28]
 800b780:	4311      	orrs	r1, r2
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	6a12      	ldr	r2, [r2, #32]
 800b786:	4311      	orrs	r1, r2
 800b788:	683a      	ldr	r2, [r7, #0]
 800b78a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b78c:	430a      	orrs	r2, r1
 800b78e:	431a      	orrs	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	e026      	b.n	800b7e4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	69d9      	ldr	r1, [r3, #28]
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	6a1b      	ldr	r3, [r3, #32]
 800b7a6:	4319      	orrs	r1, r3
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ac:	430b      	orrs	r3, r1
 800b7ae:	431a      	orrs	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	685a      	ldr	r2, [r3, #4]
 800b7b8:	4b0e      	ldr	r3, [pc, #56]	; (800b7f4 <FMC_SDRAM_Init+0xb4>)
 800b7ba:	4013      	ands	r3, r2
 800b7bc:	683a      	ldr	r2, [r7, #0]
 800b7be:	6851      	ldr	r1, [r2, #4]
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	6892      	ldr	r2, [r2, #8]
 800b7c4:	4311      	orrs	r1, r2
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	68d2      	ldr	r2, [r2, #12]
 800b7ca:	4311      	orrs	r1, r2
 800b7cc:	683a      	ldr	r2, [r7, #0]
 800b7ce:	6912      	ldr	r2, [r2, #16]
 800b7d0:	4311      	orrs	r1, r2
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	6952      	ldr	r2, [r2, #20]
 800b7d6:	4311      	orrs	r1, r2
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	6992      	ldr	r2, [r2, #24]
 800b7dc:	430a      	orrs	r2, r1
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	ffff8000 	.word	0xffff8000

0800b7f8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d128      	bne.n	800b85c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	1e59      	subs	r1, r3, #1
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	011b      	lsls	r3, r3, #4
 800b820:	4319      	orrs	r1, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	3b01      	subs	r3, #1
 800b828:	021b      	lsls	r3, r3, #8
 800b82a:	4319      	orrs	r1, r3
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	3b01      	subs	r3, #1
 800b832:	031b      	lsls	r3, r3, #12
 800b834:	4319      	orrs	r1, r3
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	041b      	lsls	r3, r3, #16
 800b83e:	4319      	orrs	r1, r3
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	695b      	ldr	r3, [r3, #20]
 800b844:	3b01      	subs	r3, #1
 800b846:	051b      	lsls	r3, r3, #20
 800b848:	4319      	orrs	r1, r3
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	699b      	ldr	r3, [r3, #24]
 800b84e:	3b01      	subs	r3, #1
 800b850:	061b      	lsls	r3, r3, #24
 800b852:	430b      	orrs	r3, r1
 800b854:	431a      	orrs	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	609a      	str	r2, [r3, #8]
 800b85a:	e02d      	b.n	800b8b8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	689a      	ldr	r2, [r3, #8]
 800b860:	4b19      	ldr	r3, [pc, #100]	; (800b8c8 <FMC_SDRAM_Timing_Init+0xd0>)
 800b862:	4013      	ands	r3, r2
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	68d2      	ldr	r2, [r2, #12]
 800b868:	3a01      	subs	r2, #1
 800b86a:	0311      	lsls	r1, r2, #12
 800b86c:	68ba      	ldr	r2, [r7, #8]
 800b86e:	6952      	ldr	r2, [r2, #20]
 800b870:	3a01      	subs	r2, #1
 800b872:	0512      	lsls	r2, r2, #20
 800b874:	430a      	orrs	r2, r1
 800b876:	431a      	orrs	r2, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	1e59      	subs	r1, r3, #1
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	3b01      	subs	r3, #1
 800b890:	011b      	lsls	r3, r3, #4
 800b892:	4319      	orrs	r1, r3
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	3b01      	subs	r3, #1
 800b89a:	021b      	lsls	r3, r3, #8
 800b89c:	4319      	orrs	r1, r3
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	041b      	lsls	r3, r3, #16
 800b8a6:	4319      	orrs	r1, r3
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	061b      	lsls	r3, r3, #24
 800b8b0:	430b      	orrs	r3, r1
 800b8b2:	431a      	orrs	r2, r3
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	ff0f0fff 	.word	0xff0f0fff

0800b8cc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	691a      	ldr	r2, [r3, #16]
 800b8dc:	4b0c      	ldr	r3, [pc, #48]	; (800b910 <FMC_SDRAM_SendCommand+0x44>)
 800b8de:	4013      	ands	r3, r2
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	6811      	ldr	r1, [r2, #0]
 800b8e4:	68ba      	ldr	r2, [r7, #8]
 800b8e6:	6852      	ldr	r2, [r2, #4]
 800b8e8:	4311      	orrs	r1, r2
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	6892      	ldr	r2, [r2, #8]
 800b8ee:	3a01      	subs	r2, #1
 800b8f0:	0152      	lsls	r2, r2, #5
 800b8f2:	4311      	orrs	r1, r2
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	68d2      	ldr	r2, [r2, #12]
 800b8f8:	0252      	lsls	r2, r2, #9
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	431a      	orrs	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	ffc00000 	.word	0xffc00000

0800b914 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	695a      	ldr	r2, [r3, #20]
 800b922:	4b07      	ldr	r3, [pc, #28]	; (800b940 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b924:	4013      	ands	r3, r2
 800b926:	683a      	ldr	r2, [r7, #0]
 800b928:	0052      	lsls	r2, r2, #1
 800b92a:	431a      	orrs	r2, r3
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	370c      	adds	r7, #12
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	ffffc001 	.word	0xffffc001

0800b944 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b944:	b480      	push	{r7}
 800b946:	b085      	sub	sp, #20
 800b948:	af00      	add	r7, sp, #0
 800b94a:	4603      	mov	r3, r0
 800b94c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b94e:	2300      	movs	r3, #0
 800b950:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b956:	2b84      	cmp	r3, #132	; 0x84
 800b958:	d005      	beq.n	800b966 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b95a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	3303      	adds	r3, #3
 800b964:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b966:	68fb      	ldr	r3, [r7, #12]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b978:	f001 f9e6 	bl	800cd48 <vTaskStartScheduler>
  
  return osOK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	bd80      	pop	{r7, pc}

0800b982 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b982:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b984:	b089      	sub	sp, #36	; 0x24
 800b986:	af04      	add	r7, sp, #16
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	695b      	ldr	r3, [r3, #20]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d020      	beq.n	800b9d6 <osThreadCreate+0x54>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	699b      	ldr	r3, [r3, #24]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d01c      	beq.n	800b9d6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685c      	ldr	r4, [r3, #4]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681d      	ldr	r5, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	691e      	ldr	r6, [r3, #16]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7ff ffc8 	bl	800b944 <makeFreeRtosPriority>
 800b9b4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9be:	9202      	str	r2, [sp, #8]
 800b9c0:	9301      	str	r3, [sp, #4]
 800b9c2:	9100      	str	r1, [sp, #0]
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	4632      	mov	r2, r6
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f000 febe 	bl	800c74c <xTaskCreateStatic>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	60fb      	str	r3, [r7, #12]
 800b9d4:	e01c      	b.n	800ba10 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	685c      	ldr	r4, [r3, #4]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9e2:	b29e      	uxth	r6, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7ff ffaa 	bl	800b944 <makeFreeRtosPriority>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	f107 030c 	add.w	r3, r7, #12
 800b9f6:	9301      	str	r3, [sp, #4]
 800b9f8:	9200      	str	r2, [sp, #0]
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	4632      	mov	r2, r6
 800b9fe:	4629      	mov	r1, r5
 800ba00:	4620      	mov	r0, r4
 800ba02:	f000 ff06 	bl	800c812 <xTaskCreate>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d001      	beq.n	800ba10 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	e000      	b.n	800ba12 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ba10:	68fb      	ldr	r3, [r7, #12]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba1a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <osDelay+0x16>
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	e000      	b.n	800ba32 <osDelay+0x18>
 800ba30:	2301      	movs	r3, #1
 800ba32:	4618      	mov	r0, r3
 800ba34:	f001 f952 	bl	800ccdc <vTaskDelay>
  
  return osOK;
 800ba38:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ba42:	b590      	push	{r4, r7, lr}
 800ba44:	b085      	sub	sp, #20
 800ba46:	af02      	add	r7, sp, #8
 800ba48:	6078      	str	r0, [r7, #4]
 800ba4a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d011      	beq.n	800ba78 <osMessageCreate+0x36>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d00d      	beq.n	800ba78 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6818      	ldr	r0, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6859      	ldr	r1, [r3, #4]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	689a      	ldr	r2, [r3, #8]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	2400      	movs	r4, #0
 800ba6e:	9400      	str	r4, [sp, #0]
 800ba70:	f000 f92e 	bl	800bcd0 <xQueueGenericCreateStatic>
 800ba74:	4603      	mov	r3, r0
 800ba76:	e008      	b.n	800ba8a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6818      	ldr	r0, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	4619      	mov	r1, r3
 800ba84:	f000 f9a6 	bl	800bdd4 <xQueueGenericCreate>
 800ba88:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd90      	pop	{r4, r7, pc}

0800ba92 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba92:	b480      	push	{r7}
 800ba94:	b083      	sub	sp, #12
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f103 0208 	add.w	r2, r3, #8
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f04f 32ff 	mov.w	r2, #4294967295
 800baaa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f103 0208 	add.w	r2, r3, #8
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f103 0208 	add.w	r2, r3, #8
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bac6:	bf00      	nop
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bad2:	b480      	push	{r7}
 800bad4:	b083      	sub	sp, #12
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bae0:	bf00      	nop
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	689a      	ldr	r2, [r3, #8]
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	683a      	ldr	r2, [r7, #0]
 800bb16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	601a      	str	r2, [r3, #0]
}
 800bb28:	bf00      	nop
 800bb2a:	3714      	adds	r7, #20
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb4a:	d103      	bne.n	800bb54 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	60fb      	str	r3, [r7, #12]
 800bb52:	e00c      	b.n	800bb6e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	3308      	adds	r3, #8
 800bb58:	60fb      	str	r3, [r7, #12]
 800bb5a:	e002      	b.n	800bb62 <vListInsert+0x2e>
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	60fb      	str	r3, [r7, #12]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d2f6      	bcs.n	800bb5c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	685a      	ldr	r2, [r3, #4]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	683a      	ldr	r2, [r7, #0]
 800bb7c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	1c5a      	adds	r2, r3, #1
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	601a      	str	r2, [r3, #0]
}
 800bb9a:	bf00      	nop
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr

0800bba6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bba6:	b480      	push	{r7}
 800bba8:	b085      	sub	sp, #20
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	691b      	ldr	r3, [r3, #16]
 800bbb2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	6892      	ldr	r2, [r2, #8]
 800bbbc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	6852      	ldr	r2, [r2, #4]
 800bbc6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d103      	bne.n	800bbda <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	689a      	ldr	r2, [r3, #8]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	1e5a      	subs	r2, r3, #1
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3714      	adds	r7, #20
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
	...

0800bbfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10c      	bne.n	800bc2a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc14:	b672      	cpsid	i
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	b662      	cpsie	i
 800bc24:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc26:	bf00      	nop
 800bc28:	e7fe      	b.n	800bc28 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800bc2a:	f001 ffff 	bl	800dc2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc36:	68f9      	ldr	r1, [r7, #12]
 800bc38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc3a:	fb01 f303 	mul.w	r3, r1, r3
 800bc3e:	441a      	add	r2, r3
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	68f9      	ldr	r1, [r7, #12]
 800bc5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc60:	fb01 f303 	mul.w	r3, r1, r3
 800bc64:	441a      	add	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	22ff      	movs	r2, #255	; 0xff
 800bc6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	22ff      	movs	r2, #255	; 0xff
 800bc76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d114      	bne.n	800bcaa <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d01a      	beq.n	800bcbe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3310      	adds	r3, #16
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f001 fab9 	bl	800d204 <xTaskRemoveFromEventList>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d012      	beq.n	800bcbe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc98:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <xQueueGenericReset+0xd0>)
 800bc9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc9e:	601a      	str	r2, [r3, #0]
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	e009      	b.n	800bcbe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	3310      	adds	r3, #16
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7ff feef 	bl	800ba92 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	3324      	adds	r3, #36	; 0x24
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f7ff feea 	bl	800ba92 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bcbe:	f001 ffe9 	bl	800dc94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bcc2:	2301      	movs	r3, #1
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	e000ed04 	.word	0xe000ed04

0800bcd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b08e      	sub	sp, #56	; 0x38
 800bcd4:	af02      	add	r7, sp, #8
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
 800bcdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10c      	bne.n	800bcfe <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	b672      	cpsid	i
 800bcea:	f383 8811 	msr	BASEPRI, r3
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	b662      	cpsie	i
 800bcf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10c      	bne.n	800bd1e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd08:	b672      	cpsid	i
 800bd0a:	f383 8811 	msr	BASEPRI, r3
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f3bf 8f4f 	dsb	sy
 800bd16:	b662      	cpsie	i
 800bd18:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd1a:	bf00      	nop
 800bd1c:	e7fe      	b.n	800bd1c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d002      	beq.n	800bd2a <xQueueGenericCreateStatic+0x5a>
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <xQueueGenericCreateStatic+0x5e>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e000      	b.n	800bd30 <xQueueGenericCreateStatic+0x60>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10c      	bne.n	800bd4e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd38:	b672      	cpsid	i
 800bd3a:	f383 8811 	msr	BASEPRI, r3
 800bd3e:	f3bf 8f6f 	isb	sy
 800bd42:	f3bf 8f4f 	dsb	sy
 800bd46:	b662      	cpsie	i
 800bd48:	623b      	str	r3, [r7, #32]
}
 800bd4a:	bf00      	nop
 800bd4c:	e7fe      	b.n	800bd4c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d102      	bne.n	800bd5a <xQueueGenericCreateStatic+0x8a>
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d101      	bne.n	800bd5e <xQueueGenericCreateStatic+0x8e>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e000      	b.n	800bd60 <xQueueGenericCreateStatic+0x90>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d10c      	bne.n	800bd7e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd68:	b672      	cpsid	i
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	b662      	cpsie	i
 800bd78:	61fb      	str	r3, [r7, #28]
}
 800bd7a:	bf00      	nop
 800bd7c:	e7fe      	b.n	800bd7c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bd7e:	2348      	movs	r3, #72	; 0x48
 800bd80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	2b48      	cmp	r3, #72	; 0x48
 800bd86:	d00c      	beq.n	800bda2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800bd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8c:	b672      	cpsid	i
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	b662      	cpsie	i
 800bd9c:	61bb      	str	r3, [r7, #24]
}
 800bd9e:	bf00      	nop
 800bda0:	e7fe      	b.n	800bda0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bda2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00d      	beq.n	800bdca <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bdb6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	68b9      	ldr	r1, [r7, #8]
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f000 f847 	bl	800be58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3730      	adds	r7, #48	; 0x30
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b08a      	sub	sp, #40	; 0x28
 800bdd8:	af02      	add	r7, sp, #8
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	4613      	mov	r3, r2
 800bde0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d10c      	bne.n	800be02 <xQueueGenericCreate+0x2e>
	__asm volatile
 800bde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdec:	b672      	cpsid	i
 800bdee:	f383 8811 	msr	BASEPRI, r3
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	b662      	cpsie	i
 800bdfc:	613b      	str	r3, [r7, #16]
}
 800bdfe:	bf00      	nop
 800be00:	e7fe      	b.n	800be00 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d102      	bne.n	800be0e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800be08:	2300      	movs	r3, #0
 800be0a:	61fb      	str	r3, [r7, #28]
 800be0c:	e004      	b.n	800be18 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	68ba      	ldr	r2, [r7, #8]
 800be12:	fb02 f303 	mul.w	r3, r2, r3
 800be16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	3348      	adds	r3, #72	; 0x48
 800be1c:	4618      	mov	r0, r3
 800be1e:	f001 ffed 	bl	800ddfc <pvPortMalloc>
 800be22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d011      	beq.n	800be4e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	3348      	adds	r3, #72	; 0x48
 800be32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	2200      	movs	r2, #0
 800be38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be3c:	79fa      	ldrb	r2, [r7, #7]
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	4613      	mov	r3, r2
 800be44:	697a      	ldr	r2, [r7, #20]
 800be46:	68b9      	ldr	r1, [r7, #8]
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f000 f805 	bl	800be58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be4e:	69bb      	ldr	r3, [r7, #24]
	}
 800be50:	4618      	mov	r0, r3
 800be52:	3720      	adds	r7, #32
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
 800be64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d103      	bne.n	800be74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	69ba      	ldr	r2, [r7, #24]
 800be70:	601a      	str	r2, [r3, #0]
 800be72:	e002      	b.n	800be7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800be86:	2101      	movs	r1, #1
 800be88:	69b8      	ldr	r0, [r7, #24]
 800be8a:	f7ff feb7 	bl	800bbfc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800be8e:	bf00      	nop
 800be90:	3710      	adds	r7, #16
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800be96:	b580      	push	{r7, lr}
 800be98:	b082      	sub	sp, #8
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00e      	beq.n	800bec2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2200      	movs	r2, #0
 800beb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800beb6:	2300      	movs	r3, #0
 800beb8:	2200      	movs	r2, #0
 800beba:	2100      	movs	r1, #0
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 f81d 	bl	800befc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bec2:	bf00      	nop
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800beca:	b580      	push	{r7, lr}
 800becc:	b086      	sub	sp, #24
 800bece:	af00      	add	r7, sp, #0
 800bed0:	4603      	mov	r3, r0
 800bed2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bed4:	2301      	movs	r3, #1
 800bed6:	617b      	str	r3, [r7, #20]
 800bed8:	2300      	movs	r3, #0
 800beda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	461a      	mov	r2, r3
 800bee0:	6939      	ldr	r1, [r7, #16]
 800bee2:	6978      	ldr	r0, [r7, #20]
 800bee4:	f7ff ff76 	bl	800bdd4 <xQueueGenericCreate>
 800bee8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	f7ff ffd3 	bl	800be96 <prvInitialiseMutex>

		return xNewQueue;
 800bef0:	68fb      	ldr	r3, [r7, #12]
	}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3718      	adds	r7, #24
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
	...

0800befc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b08e      	sub	sp, #56	; 0x38
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	607a      	str	r2, [r7, #4]
 800bf08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10c      	bne.n	800bf32 <xQueueGenericSend+0x36>
	__asm volatile
 800bf18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1c:	b672      	cpsid	i
 800bf1e:	f383 8811 	msr	BASEPRI, r3
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	b662      	cpsie	i
 800bf2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf2e:	bf00      	nop
 800bf30:	e7fe      	b.n	800bf30 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d103      	bne.n	800bf40 <xQueueGenericSend+0x44>
 800bf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d101      	bne.n	800bf44 <xQueueGenericSend+0x48>
 800bf40:	2301      	movs	r3, #1
 800bf42:	e000      	b.n	800bf46 <xQueueGenericSend+0x4a>
 800bf44:	2300      	movs	r3, #0
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10c      	bne.n	800bf64 <xQueueGenericSend+0x68>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4e:	b672      	cpsid	i
 800bf50:	f383 8811 	msr	BASEPRI, r3
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	f3bf 8f4f 	dsb	sy
 800bf5c:	b662      	cpsie	i
 800bf5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf60:	bf00      	nop
 800bf62:	e7fe      	b.n	800bf62 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	d103      	bne.n	800bf72 <xQueueGenericSend+0x76>
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d101      	bne.n	800bf76 <xQueueGenericSend+0x7a>
 800bf72:	2301      	movs	r3, #1
 800bf74:	e000      	b.n	800bf78 <xQueueGenericSend+0x7c>
 800bf76:	2300      	movs	r3, #0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10c      	bne.n	800bf96 <xQueueGenericSend+0x9a>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf80:	b672      	cpsid	i
 800bf82:	f383 8811 	msr	BASEPRI, r3
 800bf86:	f3bf 8f6f 	isb	sy
 800bf8a:	f3bf 8f4f 	dsb	sy
 800bf8e:	b662      	cpsie	i
 800bf90:	623b      	str	r3, [r7, #32]
}
 800bf92:	bf00      	nop
 800bf94:	e7fe      	b.n	800bf94 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf96:	f001 fafd 	bl	800d594 <xTaskGetSchedulerState>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d102      	bne.n	800bfa6 <xQueueGenericSend+0xaa>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d101      	bne.n	800bfaa <xQueueGenericSend+0xae>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e000      	b.n	800bfac <xQueueGenericSend+0xb0>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10c      	bne.n	800bfca <xQueueGenericSend+0xce>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	b672      	cpsid	i
 800bfb6:	f383 8811 	msr	BASEPRI, r3
 800bfba:	f3bf 8f6f 	isb	sy
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	b662      	cpsie	i
 800bfc4:	61fb      	str	r3, [r7, #28]
}
 800bfc6:	bf00      	nop
 800bfc8:	e7fe      	b.n	800bfc8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bfca:	f001 fe2f 	bl	800dc2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d302      	bcc.n	800bfe0 <xQueueGenericSend+0xe4>
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	d129      	bne.n	800c034 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfe0:	683a      	ldr	r2, [r7, #0]
 800bfe2:	68b9      	ldr	r1, [r7, #8]
 800bfe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfe6:	f000 faa1 	bl	800c52c <prvCopyDataToQueue>
 800bfea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bfec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d010      	beq.n	800c016 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff6:	3324      	adds	r3, #36	; 0x24
 800bff8:	4618      	mov	r0, r3
 800bffa:	f001 f903 	bl	800d204 <xTaskRemoveFromEventList>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d013      	beq.n	800c02c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c004:	4b3f      	ldr	r3, [pc, #252]	; (800c104 <xQueueGenericSend+0x208>)
 800c006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c00a:	601a      	str	r2, [r3, #0]
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	e00a      	b.n	800c02c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d007      	beq.n	800c02c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c01c:	4b39      	ldr	r3, [pc, #228]	; (800c104 <xQueueGenericSend+0x208>)
 800c01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c022:	601a      	str	r2, [r3, #0]
 800c024:	f3bf 8f4f 	dsb	sy
 800c028:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c02c:	f001 fe32 	bl	800dc94 <vPortExitCritical>
				return pdPASS;
 800c030:	2301      	movs	r3, #1
 800c032:	e063      	b.n	800c0fc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d103      	bne.n	800c042 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c03a:	f001 fe2b 	bl	800dc94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c03e:	2300      	movs	r3, #0
 800c040:	e05c      	b.n	800c0fc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c044:	2b00      	cmp	r3, #0
 800c046:	d106      	bne.n	800c056 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c048:	f107 0314 	add.w	r3, r7, #20
 800c04c:	4618      	mov	r0, r3
 800c04e:	f001 f93d 	bl	800d2cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c052:	2301      	movs	r3, #1
 800c054:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c056:	f001 fe1d 	bl	800dc94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c05a:	f000 fee3 	bl	800ce24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c05e:	f001 fde5 	bl	800dc2c <vPortEnterCritical>
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c068:	b25b      	sxtb	r3, r3
 800c06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06e:	d103      	bne.n	800c078 <xQueueGenericSend+0x17c>
 800c070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c072:	2200      	movs	r2, #0
 800c074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c07e:	b25b      	sxtb	r3, r3
 800c080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c084:	d103      	bne.n	800c08e <xQueueGenericSend+0x192>
 800c086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c08e:	f001 fe01 	bl	800dc94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c092:	1d3a      	adds	r2, r7, #4
 800c094:	f107 0314 	add.w	r3, r7, #20
 800c098:	4611      	mov	r1, r2
 800c09a:	4618      	mov	r0, r3
 800c09c:	f001 f92c 	bl	800d2f8 <xTaskCheckForTimeOut>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d124      	bne.n	800c0f0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c0a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0a8:	f000 fb38 	bl	800c71c <prvIsQueueFull>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d018      	beq.n	800c0e4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b4:	3310      	adds	r3, #16
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	4611      	mov	r1, r2
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f001 f87c 	bl	800d1b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c0c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0c2:	f000 fac3 	bl	800c64c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c0c6:	f000 febb 	bl	800ce40 <xTaskResumeAll>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f47f af7c 	bne.w	800bfca <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800c0d2:	4b0c      	ldr	r3, [pc, #48]	; (800c104 <xQueueGenericSend+0x208>)
 800c0d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0d8:	601a      	str	r2, [r3, #0]
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	f3bf 8f6f 	isb	sy
 800c0e2:	e772      	b.n	800bfca <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c0e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0e6:	f000 fab1 	bl	800c64c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0ea:	f000 fea9 	bl	800ce40 <xTaskResumeAll>
 800c0ee:	e76c      	b.n	800bfca <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c0f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0f2:	f000 faab 	bl	800c64c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0f6:	f000 fea3 	bl	800ce40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c0fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3738      	adds	r7, #56	; 0x38
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}
 800c104:	e000ed04 	.word	0xe000ed04

0800c108 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b08c      	sub	sp, #48	; 0x30
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	60f8      	str	r0, [r7, #12]
 800c110:	60b9      	str	r1, [r7, #8]
 800c112:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c114:	2300      	movs	r3, #0
 800c116:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10c      	bne.n	800c13c <xQueueReceive+0x34>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	b672      	cpsid	i
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	b662      	cpsie	i
 800c136:	623b      	str	r3, [r7, #32]
}
 800c138:	bf00      	nop
 800c13a:	e7fe      	b.n	800c13a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d103      	bne.n	800c14a <xQueueReceive+0x42>
 800c142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c146:	2b00      	cmp	r3, #0
 800c148:	d101      	bne.n	800c14e <xQueueReceive+0x46>
 800c14a:	2301      	movs	r3, #1
 800c14c:	e000      	b.n	800c150 <xQueueReceive+0x48>
 800c14e:	2300      	movs	r3, #0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10c      	bne.n	800c16e <xQueueReceive+0x66>
	__asm volatile
 800c154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c158:	b672      	cpsid	i
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	b662      	cpsie	i
 800c168:	61fb      	str	r3, [r7, #28]
}
 800c16a:	bf00      	nop
 800c16c:	e7fe      	b.n	800c16c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c16e:	f001 fa11 	bl	800d594 <xTaskGetSchedulerState>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	d102      	bne.n	800c17e <xQueueReceive+0x76>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d101      	bne.n	800c182 <xQueueReceive+0x7a>
 800c17e:	2301      	movs	r3, #1
 800c180:	e000      	b.n	800c184 <xQueueReceive+0x7c>
 800c182:	2300      	movs	r3, #0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10c      	bne.n	800c1a2 <xQueueReceive+0x9a>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	b672      	cpsid	i
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	b662      	cpsie	i
 800c19c:	61bb      	str	r3, [r7, #24]
}
 800c19e:	bf00      	nop
 800c1a0:	e7fe      	b.n	800c1a0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1a2:	f001 fd43 	bl	800dc2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d01f      	beq.n	800c1f2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1b2:	68b9      	ldr	r1, [r7, #8]
 800c1b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1b6:	f000 fa23 	bl	800c600 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1bc:	1e5a      	subs	r2, r3, #1
 800c1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00f      	beq.n	800c1ea <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	3310      	adds	r3, #16
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f001 f818 	bl	800d204 <xTaskRemoveFromEventList>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d007      	beq.n	800c1ea <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1da:	4b3d      	ldr	r3, [pc, #244]	; (800c2d0 <xQueueReceive+0x1c8>)
 800c1dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1e0:	601a      	str	r2, [r3, #0]
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1ea:	f001 fd53 	bl	800dc94 <vPortExitCritical>
				return pdPASS;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e069      	b.n	800c2c6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d103      	bne.n	800c200 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1f8:	f001 fd4c 	bl	800dc94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	e062      	b.n	800c2c6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c202:	2b00      	cmp	r3, #0
 800c204:	d106      	bne.n	800c214 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c206:	f107 0310 	add.w	r3, r7, #16
 800c20a:	4618      	mov	r0, r3
 800c20c:	f001 f85e 	bl	800d2cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c210:	2301      	movs	r3, #1
 800c212:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c214:	f001 fd3e 	bl	800dc94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c218:	f000 fe04 	bl	800ce24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c21c:	f001 fd06 	bl	800dc2c <vPortEnterCritical>
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c226:	b25b      	sxtb	r3, r3
 800c228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c22c:	d103      	bne.n	800c236 <xQueueReceive+0x12e>
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	2200      	movs	r2, #0
 800c232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c23c:	b25b      	sxtb	r3, r3
 800c23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c242:	d103      	bne.n	800c24c <xQueueReceive+0x144>
 800c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c246:	2200      	movs	r2, #0
 800c248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c24c:	f001 fd22 	bl	800dc94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c250:	1d3a      	adds	r2, r7, #4
 800c252:	f107 0310 	add.w	r3, r7, #16
 800c256:	4611      	mov	r1, r2
 800c258:	4618      	mov	r0, r3
 800c25a:	f001 f84d 	bl	800d2f8 <xTaskCheckForTimeOut>
 800c25e:	4603      	mov	r3, r0
 800c260:	2b00      	cmp	r3, #0
 800c262:	d123      	bne.n	800c2ac <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c266:	f000 fa43 	bl	800c6f0 <prvIsQueueEmpty>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d017      	beq.n	800c2a0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c272:	3324      	adds	r3, #36	; 0x24
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	4611      	mov	r1, r2
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 ff9d 	bl	800d1b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c27e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c280:	f000 f9e4 	bl	800c64c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c284:	f000 fddc 	bl	800ce40 <xTaskResumeAll>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d189      	bne.n	800c1a2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800c28e:	4b10      	ldr	r3, [pc, #64]	; (800c2d0 <xQueueReceive+0x1c8>)
 800c290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c294:	601a      	str	r2, [r3, #0]
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	f3bf 8f6f 	isb	sy
 800c29e:	e780      	b.n	800c1a2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c2a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2a2:	f000 f9d3 	bl	800c64c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2a6:	f000 fdcb 	bl	800ce40 <xTaskResumeAll>
 800c2aa:	e77a      	b.n	800c1a2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ae:	f000 f9cd 	bl	800c64c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2b2:	f000 fdc5 	bl	800ce40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2b8:	f000 fa1a 	bl	800c6f0 <prvIsQueueEmpty>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f43f af6f 	beq.w	800c1a2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3730      	adds	r7, #48	; 0x30
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	e000ed04 	.word	0xe000ed04

0800c2d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b08e      	sub	sp, #56	; 0x38
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d10c      	bne.n	800c30a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800c2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f4:	b672      	cpsid	i
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	b662      	cpsie	i
 800c304:	623b      	str	r3, [r7, #32]
}
 800c306:	bf00      	nop
 800c308:	e7fe      	b.n	800c308 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00c      	beq.n	800c32c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c316:	b672      	cpsid	i
 800c318:	f383 8811 	msr	BASEPRI, r3
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	b662      	cpsie	i
 800c326:	61fb      	str	r3, [r7, #28]
}
 800c328:	bf00      	nop
 800c32a:	e7fe      	b.n	800c32a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c32c:	f001 f932 	bl	800d594 <xTaskGetSchedulerState>
 800c330:	4603      	mov	r3, r0
 800c332:	2b00      	cmp	r3, #0
 800c334:	d102      	bne.n	800c33c <xQueueSemaphoreTake+0x68>
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d101      	bne.n	800c340 <xQueueSemaphoreTake+0x6c>
 800c33c:	2301      	movs	r3, #1
 800c33e:	e000      	b.n	800c342 <xQueueSemaphoreTake+0x6e>
 800c340:	2300      	movs	r3, #0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10c      	bne.n	800c360 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800c346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34a:	b672      	cpsid	i
 800c34c:	f383 8811 	msr	BASEPRI, r3
 800c350:	f3bf 8f6f 	isb	sy
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	b662      	cpsie	i
 800c35a:	61bb      	str	r3, [r7, #24]
}
 800c35c:	bf00      	nop
 800c35e:	e7fe      	b.n	800c35e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c360:	f001 fc64 	bl	800dc2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c368:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d024      	beq.n	800c3ba <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c372:	1e5a      	subs	r2, r3, #1
 800c374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c376:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d104      	bne.n	800c38a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c380:	f001 face 	bl	800d920 <pvTaskIncrementMutexHeldCount>
 800c384:	4602      	mov	r2, r0
 800c386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c388:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d00f      	beq.n	800c3b2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c394:	3310      	adds	r3, #16
 800c396:	4618      	mov	r0, r3
 800c398:	f000 ff34 	bl	800d204 <xTaskRemoveFromEventList>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d007      	beq.n	800c3b2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3a2:	4b55      	ldr	r3, [pc, #340]	; (800c4f8 <xQueueSemaphoreTake+0x224>)
 800c3a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a8:	601a      	str	r2, [r3, #0]
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c3b2:	f001 fc6f 	bl	800dc94 <vPortExitCritical>
				return pdPASS;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e099      	b.n	800c4ee <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d113      	bne.n	800c3e8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d00c      	beq.n	800c3e0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800c3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ca:	b672      	cpsid	i
 800c3cc:	f383 8811 	msr	BASEPRI, r3
 800c3d0:	f3bf 8f6f 	isb	sy
 800c3d4:	f3bf 8f4f 	dsb	sy
 800c3d8:	b662      	cpsie	i
 800c3da:	617b      	str	r3, [r7, #20]
}
 800c3dc:	bf00      	nop
 800c3de:	e7fe      	b.n	800c3de <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c3e0:	f001 fc58 	bl	800dc94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	e082      	b.n	800c4ee <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d106      	bne.n	800c3fc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3ee:	f107 030c 	add.w	r3, r7, #12
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f000 ff6a 	bl	800d2cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3fc:	f001 fc4a 	bl	800dc94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c400:	f000 fd10 	bl	800ce24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c404:	f001 fc12 	bl	800dc2c <vPortEnterCritical>
 800c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c40e:	b25b      	sxtb	r3, r3
 800c410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c414:	d103      	bne.n	800c41e <xQueueSemaphoreTake+0x14a>
 800c416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c424:	b25b      	sxtb	r3, r3
 800c426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42a:	d103      	bne.n	800c434 <xQueueSemaphoreTake+0x160>
 800c42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42e:	2200      	movs	r2, #0
 800c430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c434:	f001 fc2e 	bl	800dc94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c438:	463a      	mov	r2, r7
 800c43a:	f107 030c 	add.w	r3, r7, #12
 800c43e:	4611      	mov	r1, r2
 800c440:	4618      	mov	r0, r3
 800c442:	f000 ff59 	bl	800d2f8 <xTaskCheckForTimeOut>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d132      	bne.n	800c4b2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c44c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c44e:	f000 f94f 	bl	800c6f0 <prvIsQueueEmpty>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d026      	beq.n	800c4a6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d109      	bne.n	800c474 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800c460:	f001 fbe4 	bl	800dc2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	4618      	mov	r0, r3
 800c46a:	f001 f8b1 	bl	800d5d0 <xTaskPriorityInherit>
 800c46e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c470:	f001 fc10 	bl	800dc94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c476:	3324      	adds	r3, #36	; 0x24
 800c478:	683a      	ldr	r2, [r7, #0]
 800c47a:	4611      	mov	r1, r2
 800c47c:	4618      	mov	r0, r3
 800c47e:	f000 fe9b 	bl	800d1b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c484:	f000 f8e2 	bl	800c64c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c488:	f000 fcda 	bl	800ce40 <xTaskResumeAll>
 800c48c:	4603      	mov	r3, r0
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f47f af66 	bne.w	800c360 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800c494:	4b18      	ldr	r3, [pc, #96]	; (800c4f8 <xQueueSemaphoreTake+0x224>)
 800c496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c49a:	601a      	str	r2, [r3, #0]
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	e75c      	b.n	800c360 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c4a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4a8:	f000 f8d0 	bl	800c64c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4ac:	f000 fcc8 	bl	800ce40 <xTaskResumeAll>
 800c4b0:	e756      	b.n	800c360 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c4b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4b4:	f000 f8ca 	bl	800c64c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4b8:	f000 fcc2 	bl	800ce40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4be:	f000 f917 	bl	800c6f0 <prvIsQueueEmpty>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f43f af4b 	beq.w	800c360 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00d      	beq.n	800c4ec <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800c4d0:	f001 fbac 	bl	800dc2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c4d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4d6:	f000 f811 	bl	800c4fc <prvGetDisinheritPriorityAfterTimeout>
 800c4da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f001 f97e 	bl	800d7e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c4e8:	f001 fbd4 	bl	800dc94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3738      	adds	r7, #56	; 0x38
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	e000ed04 	.word	0xe000ed04

0800c4fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d006      	beq.n	800c51a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f1c3 0307 	rsb	r3, r3, #7
 800c516:	60fb      	str	r3, [r7, #12]
 800c518:	e001      	b.n	800c51e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c51a:	2300      	movs	r3, #0
 800c51c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c51e:	68fb      	ldr	r3, [r7, #12]
	}
 800c520:	4618      	mov	r0, r3
 800c522:	3714      	adds	r7, #20
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c538:	2300      	movs	r3, #0
 800c53a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c540:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c546:	2b00      	cmp	r3, #0
 800c548:	d10d      	bne.n	800c566 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d14d      	bne.n	800c5ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	4618      	mov	r0, r3
 800c558:	f001 f8ba 	bl	800d6d0 <xTaskPriorityDisinherit>
 800c55c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2200      	movs	r2, #0
 800c562:	609a      	str	r2, [r3, #8]
 800c564:	e043      	b.n	800c5ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d119      	bne.n	800c5a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6858      	ldr	r0, [r3, #4]
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c574:	461a      	mov	r2, r3
 800c576:	68b9      	ldr	r1, [r7, #8]
 800c578:	f001 fe4a 	bl	800e210 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	685a      	ldr	r2, [r3, #4]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c584:	441a      	add	r2, r3
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	685a      	ldr	r2, [r3, #4]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	429a      	cmp	r2, r3
 800c594:	d32b      	bcc.n	800c5ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	605a      	str	r2, [r3, #4]
 800c59e:	e026      	b.n	800c5ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	68d8      	ldr	r0, [r3, #12]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	68b9      	ldr	r1, [r7, #8]
 800c5ac:	f001 fe30 	bl	800e210 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	68da      	ldr	r2, [r3, #12]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b8:	425b      	negs	r3, r3
 800c5ba:	441a      	add	r2, r3
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	68da      	ldr	r2, [r3, #12]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d207      	bcs.n	800c5dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	689a      	ldr	r2, [r3, #8]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d4:	425b      	negs	r3, r3
 800c5d6:	441a      	add	r2, r3
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	d105      	bne.n	800c5ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d002      	beq.n	800c5ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	1c5a      	adds	r2, r3, #1
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c5f6:	697b      	ldr	r3, [r7, #20]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3718      	adds	r7, #24
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d018      	beq.n	800c644 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	68da      	ldr	r2, [r3, #12]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61a:	441a      	add	r2, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	68da      	ldr	r2, [r3, #12]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d303      	bcc.n	800c634 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	68d9      	ldr	r1, [r3, #12]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c63c:	461a      	mov	r2, r3
 800c63e:	6838      	ldr	r0, [r7, #0]
 800c640:	f001 fde6 	bl	800e210 <memcpy>
	}
}
 800c644:	bf00      	nop
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c654:	f001 faea 	bl	800dc2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c65e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c660:	e011      	b.n	800c686 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c666:	2b00      	cmp	r3, #0
 800c668:	d012      	beq.n	800c690 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	3324      	adds	r3, #36	; 0x24
 800c66e:	4618      	mov	r0, r3
 800c670:	f000 fdc8 	bl	800d204 <xTaskRemoveFromEventList>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d001      	beq.n	800c67e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c67a:	f000 fea3 	bl	800d3c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c67e:	7bfb      	ldrb	r3, [r7, #15]
 800c680:	3b01      	subs	r3, #1
 800c682:	b2db      	uxtb	r3, r3
 800c684:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	dce9      	bgt.n	800c662 <prvUnlockQueue+0x16>
 800c68e:	e000      	b.n	800c692 <prvUnlockQueue+0x46>
					break;
 800c690:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	22ff      	movs	r2, #255	; 0xff
 800c696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c69a:	f001 fafb 	bl	800dc94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c69e:	f001 fac5 	bl	800dc2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6aa:	e011      	b.n	800c6d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	691b      	ldr	r3, [r3, #16]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d012      	beq.n	800c6da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3310      	adds	r3, #16
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f000 fda3 	bl	800d204 <xTaskRemoveFromEventList>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d001      	beq.n	800c6c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c6c4:	f000 fe7e 	bl	800d3c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c6c8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	b2db      	uxtb	r3, r3
 800c6ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	dce9      	bgt.n	800c6ac <prvUnlockQueue+0x60>
 800c6d8:	e000      	b.n	800c6dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c6da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	22ff      	movs	r2, #255	; 0xff
 800c6e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c6e4:	f001 fad6 	bl	800dc94 <vPortExitCritical>
}
 800c6e8:	bf00      	nop
 800c6ea:	3710      	adds	r7, #16
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6f8:	f001 fa98 	bl	800dc2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c700:	2b00      	cmp	r3, #0
 800c702:	d102      	bne.n	800c70a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c704:	2301      	movs	r3, #1
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	e001      	b.n	800c70e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c70a:	2300      	movs	r3, #0
 800c70c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c70e:	f001 fac1 	bl	800dc94 <vPortExitCritical>

	return xReturn;
 800c712:	68fb      	ldr	r3, [r7, #12]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c724:	f001 fa82 	bl	800dc2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c730:	429a      	cmp	r2, r3
 800c732:	d102      	bne.n	800c73a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c734:	2301      	movs	r3, #1
 800c736:	60fb      	str	r3, [r7, #12]
 800c738:	e001      	b.n	800c73e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c73a:	2300      	movs	r3, #0
 800c73c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c73e:	f001 faa9 	bl	800dc94 <vPortExitCritical>

	return xReturn;
 800c742:	68fb      	ldr	r3, [r7, #12]
}
 800c744:	4618      	mov	r0, r3
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b08e      	sub	sp, #56	; 0x38
 800c750:	af04      	add	r7, sp, #16
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
 800c758:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d10c      	bne.n	800c77a <xTaskCreateStatic+0x2e>
	__asm volatile
 800c760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c764:	b672      	cpsid	i
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	b662      	cpsie	i
 800c774:	623b      	str	r3, [r7, #32]
}
 800c776:	bf00      	nop
 800c778:	e7fe      	b.n	800c778 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d10c      	bne.n	800c79a <xTaskCreateStatic+0x4e>
	__asm volatile
 800c780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c784:	b672      	cpsid	i
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	b662      	cpsie	i
 800c794:	61fb      	str	r3, [r7, #28]
}
 800c796:	bf00      	nop
 800c798:	e7fe      	b.n	800c798 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c79a:	23b4      	movs	r3, #180	; 0xb4
 800c79c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	2bb4      	cmp	r3, #180	; 0xb4
 800c7a2:	d00c      	beq.n	800c7be <xTaskCreateStatic+0x72>
	__asm volatile
 800c7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a8:	b672      	cpsid	i
 800c7aa:	f383 8811 	msr	BASEPRI, r3
 800c7ae:	f3bf 8f6f 	isb	sy
 800c7b2:	f3bf 8f4f 	dsb	sy
 800c7b6:	b662      	cpsie	i
 800c7b8:	61bb      	str	r3, [r7, #24]
}
 800c7ba:	bf00      	nop
 800c7bc:	e7fe      	b.n	800c7bc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c7be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d01e      	beq.n	800c804 <xTaskCreateStatic+0xb8>
 800c7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d01b      	beq.n	800c804 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d8:	2202      	movs	r2, #2
 800c7da:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c7de:	2300      	movs	r3, #0
 800c7e0:	9303      	str	r3, [sp, #12]
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e4:	9302      	str	r3, [sp, #8]
 800c7e6:	f107 0314 	add.w	r3, r7, #20
 800c7ea:	9301      	str	r3, [sp, #4]
 800c7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	68b9      	ldr	r1, [r7, #8]
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f000 f850 	bl	800c89c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c7fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7fe:	f000 f8ed 	bl	800c9dc <prvAddNewTaskToReadyList>
 800c802:	e001      	b.n	800c808 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c804:	2300      	movs	r3, #0
 800c806:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c808:	697b      	ldr	r3, [r7, #20]
	}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3728      	adds	r7, #40	; 0x28
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}

0800c812 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c812:	b580      	push	{r7, lr}
 800c814:	b08c      	sub	sp, #48	; 0x30
 800c816:	af04      	add	r7, sp, #16
 800c818:	60f8      	str	r0, [r7, #12]
 800c81a:	60b9      	str	r1, [r7, #8]
 800c81c:	603b      	str	r3, [r7, #0]
 800c81e:	4613      	mov	r3, r2
 800c820:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c822:	88fb      	ldrh	r3, [r7, #6]
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	4618      	mov	r0, r3
 800c828:	f001 fae8 	bl	800ddfc <pvPortMalloc>
 800c82c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00e      	beq.n	800c852 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c834:	20b4      	movs	r0, #180	; 0xb4
 800c836:	f001 fae1 	bl	800ddfc <pvPortMalloc>
 800c83a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d003      	beq.n	800c84a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	697a      	ldr	r2, [r7, #20]
 800c846:	631a      	str	r2, [r3, #48]	; 0x30
 800c848:	e005      	b.n	800c856 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c84a:	6978      	ldr	r0, [r7, #20]
 800c84c:	f001 fba0 	bl	800df90 <vPortFree>
 800c850:	e001      	b.n	800c856 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c852:	2300      	movs	r3, #0
 800c854:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d017      	beq.n	800c88c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	2200      	movs	r2, #0
 800c860:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c864:	88fa      	ldrh	r2, [r7, #6]
 800c866:	2300      	movs	r3, #0
 800c868:	9303      	str	r3, [sp, #12]
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	9302      	str	r3, [sp, #8]
 800c86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c870:	9301      	str	r3, [sp, #4]
 800c872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f000 f80e 	bl	800c89c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c880:	69f8      	ldr	r0, [r7, #28]
 800c882:	f000 f8ab 	bl	800c9dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c886:	2301      	movs	r3, #1
 800c888:	61bb      	str	r3, [r7, #24]
 800c88a:	e002      	b.n	800c892 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c88c:	f04f 33ff 	mov.w	r3, #4294967295
 800c890:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c892:	69bb      	ldr	r3, [r7, #24]
	}
 800c894:	4618      	mov	r0, r3
 800c896:	3720      	adds	r7, #32
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b088      	sub	sp, #32
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	60f8      	str	r0, [r7, #12]
 800c8a4:	60b9      	str	r1, [r7, #8]
 800c8a6:	607a      	str	r2, [r7, #4]
 800c8a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8ae:	6879      	ldr	r1, [r7, #4]
 800c8b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c8b4:	440b      	add	r3, r1
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	f023 0307 	bic.w	r3, r3, #7
 800c8c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	f003 0307 	and.w	r3, r3, #7
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00c      	beq.n	800c8e8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8d2:	b672      	cpsid	i
 800c8d4:	f383 8811 	msr	BASEPRI, r3
 800c8d8:	f3bf 8f6f 	isb	sy
 800c8dc:	f3bf 8f4f 	dsb	sy
 800c8e0:	b662      	cpsie	i
 800c8e2:	617b      	str	r3, [r7, #20]
}
 800c8e4:	bf00      	nop
 800c8e6:	e7fe      	b.n	800c8e6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d01f      	beq.n	800c92e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	61fb      	str	r3, [r7, #28]
 800c8f2:	e012      	b.n	800c91a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	7819      	ldrb	r1, [r3, #0]
 800c8fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	4413      	add	r3, r2
 800c902:	3334      	adds	r3, #52	; 0x34
 800c904:	460a      	mov	r2, r1
 800c906:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c908:	68ba      	ldr	r2, [r7, #8]
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	4413      	add	r3, r2
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d006      	beq.n	800c922 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	3301      	adds	r3, #1
 800c918:	61fb      	str	r3, [r7, #28]
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	2b0f      	cmp	r3, #15
 800c91e:	d9e9      	bls.n	800c8f4 <prvInitialiseNewTask+0x58>
 800c920:	e000      	b.n	800c924 <prvInitialiseNewTask+0x88>
			{
				break;
 800c922:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c926:	2200      	movs	r2, #0
 800c928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c92c:	e003      	b.n	800c936 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c930:	2200      	movs	r2, #0
 800c932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c938:	2b06      	cmp	r3, #6
 800c93a:	d901      	bls.n	800c940 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c93c:	2306      	movs	r3, #6
 800c93e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c944:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c94a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94e:	2200      	movs	r2, #0
 800c950:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c954:	3304      	adds	r3, #4
 800c956:	4618      	mov	r0, r3
 800c958:	f7ff f8bb 	bl	800bad2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95e:	3318      	adds	r3, #24
 800c960:	4618      	mov	r0, r3
 800c962:	f7ff f8b6 	bl	800bad2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c96a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96e:	f1c3 0207 	rsb	r2, r3, #7
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c97a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97e:	2200      	movs	r2, #0
 800c980:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c986:	2200      	movs	r2, #0
 800c988:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98e:	334c      	adds	r3, #76	; 0x4c
 800c990:	2260      	movs	r2, #96	; 0x60
 800c992:	2100      	movs	r1, #0
 800c994:	4618      	mov	r0, r3
 800c996:	f001 fc49 	bl	800e22c <memset>
 800c99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99c:	4a0c      	ldr	r2, [pc, #48]	; (800c9d0 <prvInitialiseNewTask+0x134>)
 800c99e:	651a      	str	r2, [r3, #80]	; 0x50
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a2:	4a0c      	ldr	r2, [pc, #48]	; (800c9d4 <prvInitialiseNewTask+0x138>)
 800c9a4:	655a      	str	r2, [r3, #84]	; 0x54
 800c9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a8:	4a0b      	ldr	r2, [pc, #44]	; (800c9d8 <prvInitialiseNewTask+0x13c>)
 800c9aa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c9ac:	683a      	ldr	r2, [r7, #0]
 800c9ae:	68f9      	ldr	r1, [r7, #12]
 800c9b0:	69b8      	ldr	r0, [r7, #24]
 800c9b2:	f001 f82f 	bl	800da14 <pxPortInitialiseStack>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d002      	beq.n	800c9c8 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9c8:	bf00      	nop
 800c9ca:	3720      	adds	r7, #32
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	08034650 	.word	0x08034650
 800c9d4:	08034670 	.word	0x08034670
 800c9d8:	08034630 	.word	0x08034630

0800c9dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c9e4:	f001 f922 	bl	800dc2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c9e8:	4b2a      	ldr	r3, [pc, #168]	; (800ca94 <prvAddNewTaskToReadyList+0xb8>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	4a29      	ldr	r2, [pc, #164]	; (800ca94 <prvAddNewTaskToReadyList+0xb8>)
 800c9f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c9f2:	4b29      	ldr	r3, [pc, #164]	; (800ca98 <prvAddNewTaskToReadyList+0xbc>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d109      	bne.n	800ca0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c9fa:	4a27      	ldr	r2, [pc, #156]	; (800ca98 <prvAddNewTaskToReadyList+0xbc>)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca00:	4b24      	ldr	r3, [pc, #144]	; (800ca94 <prvAddNewTaskToReadyList+0xb8>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d110      	bne.n	800ca2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca08:	f000 fd00 	bl	800d40c <prvInitialiseTaskLists>
 800ca0c:	e00d      	b.n	800ca2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca0e:	4b23      	ldr	r3, [pc, #140]	; (800ca9c <prvAddNewTaskToReadyList+0xc0>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d109      	bne.n	800ca2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca16:	4b20      	ldr	r3, [pc, #128]	; (800ca98 <prvAddNewTaskToReadyList+0xbc>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d802      	bhi.n	800ca2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca24:	4a1c      	ldr	r2, [pc, #112]	; (800ca98 <prvAddNewTaskToReadyList+0xbc>)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca2a:	4b1d      	ldr	r3, [pc, #116]	; (800caa0 <prvAddNewTaskToReadyList+0xc4>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	4a1b      	ldr	r2, [pc, #108]	; (800caa0 <prvAddNewTaskToReadyList+0xc4>)
 800ca32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca38:	2201      	movs	r2, #1
 800ca3a:	409a      	lsls	r2, r3
 800ca3c:	4b19      	ldr	r3, [pc, #100]	; (800caa4 <prvAddNewTaskToReadyList+0xc8>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	4a18      	ldr	r2, [pc, #96]	; (800caa4 <prvAddNewTaskToReadyList+0xc8>)
 800ca44:	6013      	str	r3, [r2, #0]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4413      	add	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4a15      	ldr	r2, [pc, #84]	; (800caa8 <prvAddNewTaskToReadyList+0xcc>)
 800ca54:	441a      	add	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	3304      	adds	r3, #4
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	4610      	mov	r0, r2
 800ca5e:	f7ff f845 	bl	800baec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca62:	f001 f917 	bl	800dc94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca66:	4b0d      	ldr	r3, [pc, #52]	; (800ca9c <prvAddNewTaskToReadyList+0xc0>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00e      	beq.n	800ca8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ca6e:	4b0a      	ldr	r3, [pc, #40]	; (800ca98 <prvAddNewTaskToReadyList+0xbc>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d207      	bcs.n	800ca8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ca7c:	4b0b      	ldr	r3, [pc, #44]	; (800caac <prvAddNewTaskToReadyList+0xd0>)
 800ca7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	f3bf 8f4f 	dsb	sy
 800ca88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca8c:	bf00      	nop
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	200006a8 	.word	0x200006a8
 800ca98:	200005a8 	.word	0x200005a8
 800ca9c:	200006b4 	.word	0x200006b4
 800caa0:	200006c4 	.word	0x200006c4
 800caa4:	200006b0 	.word	0x200006b0
 800caa8:	200005ac 	.word	0x200005ac
 800caac:	e000ed04 	.word	0xe000ed04

0800cab0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cab8:	f001 f8b8 	bl	800dc2c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d102      	bne.n	800cac8 <vTaskDelete+0x18>
 800cac2:	4b3a      	ldr	r3, [pc, #232]	; (800cbac <vTaskDelete+0xfc>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	e000      	b.n	800caca <vTaskDelete+0x1a>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	3304      	adds	r3, #4
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7ff f868 	bl	800bba6 <uxListRemove>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d115      	bne.n	800cb08 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae0:	4933      	ldr	r1, [pc, #204]	; (800cbb0 <vTaskDelete+0x100>)
 800cae2:	4613      	mov	r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	4413      	add	r3, r2
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	440b      	add	r3, r1
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d10a      	bne.n	800cb08 <vTaskDelete+0x58>
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf6:	2201      	movs	r2, #1
 800caf8:	fa02 f303 	lsl.w	r3, r2, r3
 800cafc:	43da      	mvns	r2, r3
 800cafe:	4b2d      	ldr	r3, [pc, #180]	; (800cbb4 <vTaskDelete+0x104>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	4013      	ands	r3, r2
 800cb04:	4a2b      	ldr	r2, [pc, #172]	; (800cbb4 <vTaskDelete+0x104>)
 800cb06:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d004      	beq.n	800cb1a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	3318      	adds	r3, #24
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7ff f846 	bl	800bba6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800cb1a:	4b27      	ldr	r3, [pc, #156]	; (800cbb8 <vTaskDelete+0x108>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	4a25      	ldr	r2, [pc, #148]	; (800cbb8 <vTaskDelete+0x108>)
 800cb22:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800cb24:	4b21      	ldr	r3, [pc, #132]	; (800cbac <vTaskDelete+0xfc>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	68fa      	ldr	r2, [r7, #12]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d10b      	bne.n	800cb46 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3304      	adds	r3, #4
 800cb32:	4619      	mov	r1, r3
 800cb34:	4821      	ldr	r0, [pc, #132]	; (800cbbc <vTaskDelete+0x10c>)
 800cb36:	f7fe ffd9 	bl	800baec <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800cb3a:	4b21      	ldr	r3, [pc, #132]	; (800cbc0 <vTaskDelete+0x110>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	4a1f      	ldr	r2, [pc, #124]	; (800cbc0 <vTaskDelete+0x110>)
 800cb42:	6013      	str	r3, [r2, #0]
 800cb44:	e009      	b.n	800cb5a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800cb46:	4b1f      	ldr	r3, [pc, #124]	; (800cbc4 <vTaskDelete+0x114>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	3b01      	subs	r3, #1
 800cb4c:	4a1d      	ldr	r2, [pc, #116]	; (800cbc4 <vTaskDelete+0x114>)
 800cb4e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f000 fcc9 	bl	800d4e8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800cb56:	f000 fcfd 	bl	800d554 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800cb5a:	f001 f89b 	bl	800dc94 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800cb5e:	4b1a      	ldr	r3, [pc, #104]	; (800cbc8 <vTaskDelete+0x118>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d01d      	beq.n	800cba2 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800cb66:	4b11      	ldr	r3, [pc, #68]	; (800cbac <vTaskDelete+0xfc>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d118      	bne.n	800cba2 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800cb70:	4b16      	ldr	r3, [pc, #88]	; (800cbcc <vTaskDelete+0x11c>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d00c      	beq.n	800cb92 <vTaskDelete+0xe2>
	__asm volatile
 800cb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7c:	b672      	cpsid	i
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	b662      	cpsie	i
 800cb8c:	60bb      	str	r3, [r7, #8]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800cb92:	4b0f      	ldr	r3, [pc, #60]	; (800cbd0 <vTaskDelete+0x120>)
 800cb94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb98:	601a      	str	r2, [r3, #0]
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cba2:	bf00      	nop
 800cba4:	3710      	adds	r7, #16
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	200005a8 	.word	0x200005a8
 800cbb0:	200005ac 	.word	0x200005ac
 800cbb4:	200006b0 	.word	0x200006b0
 800cbb8:	200006c4 	.word	0x200006c4
 800cbbc:	2000067c 	.word	0x2000067c
 800cbc0:	20000690 	.word	0x20000690
 800cbc4:	200006a8 	.word	0x200006a8
 800cbc8:	200006b4 	.word	0x200006b4
 800cbcc:	200006d0 	.word	0x200006d0
 800cbd0:	e000ed04 	.word	0xe000ed04

0800cbd4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b08a      	sub	sp, #40	; 0x28
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10c      	bne.n	800cc02 <vTaskDelayUntil+0x2e>
	__asm volatile
 800cbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbec:	b672      	cpsid	i
 800cbee:	f383 8811 	msr	BASEPRI, r3
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	b662      	cpsie	i
 800cbfc:	617b      	str	r3, [r7, #20]
}
 800cbfe:	bf00      	nop
 800cc00:	e7fe      	b.n	800cc00 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10c      	bne.n	800cc22 <vTaskDelayUntil+0x4e>
	__asm volatile
 800cc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0c:	b672      	cpsid	i
 800cc0e:	f383 8811 	msr	BASEPRI, r3
 800cc12:	f3bf 8f6f 	isb	sy
 800cc16:	f3bf 8f4f 	dsb	sy
 800cc1a:	b662      	cpsie	i
 800cc1c:	613b      	str	r3, [r7, #16]
}
 800cc1e:	bf00      	nop
 800cc20:	e7fe      	b.n	800cc20 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800cc22:	4b2b      	ldr	r3, [pc, #172]	; (800ccd0 <vTaskDelayUntil+0xfc>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d00c      	beq.n	800cc44 <vTaskDelayUntil+0x70>
	__asm volatile
 800cc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2e:	b672      	cpsid	i
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	b662      	cpsie	i
 800cc3e:	60fb      	str	r3, [r7, #12]
}
 800cc40:	bf00      	nop
 800cc42:	e7fe      	b.n	800cc42 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800cc44:	f000 f8ee 	bl	800ce24 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800cc48:	4b22      	ldr	r3, [pc, #136]	; (800ccd4 <vTaskDelayUntil+0x100>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	4413      	add	r3, r2
 800cc56:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	6a3a      	ldr	r2, [r7, #32]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d20b      	bcs.n	800cc7a <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	69fa      	ldr	r2, [r7, #28]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d211      	bcs.n	800cc90 <vTaskDelayUntil+0xbc>
 800cc6c:	69fa      	ldr	r2, [r7, #28]
 800cc6e:	6a3b      	ldr	r3, [r7, #32]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d90d      	bls.n	800cc90 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800cc74:	2301      	movs	r3, #1
 800cc76:	627b      	str	r3, [r7, #36]	; 0x24
 800cc78:	e00a      	b.n	800cc90 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	69fa      	ldr	r2, [r7, #28]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d303      	bcc.n	800cc8c <vTaskDelayUntil+0xb8>
 800cc84:	69fa      	ldr	r2, [r7, #28]
 800cc86:	6a3b      	ldr	r3, [r7, #32]
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d901      	bls.n	800cc90 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	69fa      	ldr	r2, [r7, #28]
 800cc94:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800cc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d006      	beq.n	800ccaa <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800cc9c:	69fa      	ldr	r2, [r7, #28]
 800cc9e:	6a3b      	ldr	r3, [r7, #32]
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	2100      	movs	r1, #0
 800cca4:	4618      	mov	r0, r3
 800cca6:	f000 fe4f 	bl	800d948 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ccaa:	f000 f8c9 	bl	800ce40 <xTaskResumeAll>
 800ccae:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d107      	bne.n	800ccc6 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800ccb6:	4b08      	ldr	r3, [pc, #32]	; (800ccd8 <vTaskDelayUntil+0x104>)
 800ccb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccbc:	601a      	str	r2, [r3, #0]
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ccc6:	bf00      	nop
 800ccc8:	3728      	adds	r7, #40	; 0x28
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	200006d0 	.word	0x200006d0
 800ccd4:	200006ac 	.word	0x200006ac
 800ccd8:	e000ed04 	.word	0xe000ed04

0800ccdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cce4:	2300      	movs	r3, #0
 800cce6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d019      	beq.n	800cd22 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ccee:	4b14      	ldr	r3, [pc, #80]	; (800cd40 <vTaskDelay+0x64>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00c      	beq.n	800cd10 <vTaskDelay+0x34>
	__asm volatile
 800ccf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfa:	b672      	cpsid	i
 800ccfc:	f383 8811 	msr	BASEPRI, r3
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	f3bf 8f4f 	dsb	sy
 800cd08:	b662      	cpsie	i
 800cd0a:	60bb      	str	r3, [r7, #8]
}
 800cd0c:	bf00      	nop
 800cd0e:	e7fe      	b.n	800cd0e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cd10:	f000 f888 	bl	800ce24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd14:	2100      	movs	r1, #0
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 fe16 	bl	800d948 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd1c:	f000 f890 	bl	800ce40 <xTaskResumeAll>
 800cd20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d107      	bne.n	800cd38 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800cd28:	4b06      	ldr	r3, [pc, #24]	; (800cd44 <vTaskDelay+0x68>)
 800cd2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd2e:	601a      	str	r2, [r3, #0]
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd38:	bf00      	nop
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	200006d0 	.word	0x200006d0
 800cd44:	e000ed04 	.word	0xe000ed04

0800cd48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b08a      	sub	sp, #40	; 0x28
 800cd4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd52:	2300      	movs	r3, #0
 800cd54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cd56:	463a      	mov	r2, r7
 800cd58:	1d39      	adds	r1, r7, #4
 800cd5a:	f107 0308 	add.w	r3, r7, #8
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7f3 fbd2 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	68ba      	ldr	r2, [r7, #8]
 800cd6a:	9202      	str	r2, [sp, #8]
 800cd6c:	9301      	str	r3, [sp, #4]
 800cd6e:	2300      	movs	r3, #0
 800cd70:	9300      	str	r3, [sp, #0]
 800cd72:	2300      	movs	r3, #0
 800cd74:	460a      	mov	r2, r1
 800cd76:	4923      	ldr	r1, [pc, #140]	; (800ce04 <vTaskStartScheduler+0xbc>)
 800cd78:	4823      	ldr	r0, [pc, #140]	; (800ce08 <vTaskStartScheduler+0xc0>)
 800cd7a:	f7ff fce7 	bl	800c74c <xTaskCreateStatic>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	4a22      	ldr	r2, [pc, #136]	; (800ce0c <vTaskStartScheduler+0xc4>)
 800cd82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd84:	4b21      	ldr	r3, [pc, #132]	; (800ce0c <vTaskStartScheduler+0xc4>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d002      	beq.n	800cd92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	617b      	str	r3, [r7, #20]
 800cd90:	e001      	b.n	800cd96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd92:	2300      	movs	r3, #0
 800cd94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d11d      	bne.n	800cdd8 <vTaskStartScheduler+0x90>
	__asm volatile
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	b672      	cpsid	i
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	b662      	cpsie	i
 800cdb0:	613b      	str	r3, [r7, #16]
}
 800cdb2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cdb4:	4b16      	ldr	r3, [pc, #88]	; (800ce10 <vTaskStartScheduler+0xc8>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	334c      	adds	r3, #76	; 0x4c
 800cdba:	4a16      	ldr	r2, [pc, #88]	; (800ce14 <vTaskStartScheduler+0xcc>)
 800cdbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cdbe:	4b16      	ldr	r3, [pc, #88]	; (800ce18 <vTaskStartScheduler+0xd0>)
 800cdc0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cdc6:	4b15      	ldr	r3, [pc, #84]	; (800ce1c <vTaskStartScheduler+0xd4>)
 800cdc8:	2201      	movs	r2, #1
 800cdca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cdcc:	4b14      	ldr	r3, [pc, #80]	; (800ce20 <vTaskStartScheduler+0xd8>)
 800cdce:	2200      	movs	r2, #0
 800cdd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cdd2:	f000 fead 	bl	800db30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cdd6:	e010      	b.n	800cdfa <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdde:	d10c      	bne.n	800cdfa <vTaskStartScheduler+0xb2>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	b672      	cpsid	i
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	b662      	cpsie	i
 800cdf4:	60fb      	str	r3, [r7, #12]
}
 800cdf6:	bf00      	nop
 800cdf8:	e7fe      	b.n	800cdf8 <vTaskStartScheduler+0xb0>
}
 800cdfa:	bf00      	nop
 800cdfc:	3718      	adds	r7, #24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	0800e494 	.word	0x0800e494
 800ce08:	0800d3dd 	.word	0x0800d3dd
 800ce0c:	200006cc 	.word	0x200006cc
 800ce10:	200005a8 	.word	0x200005a8
 800ce14:	20000050 	.word	0x20000050
 800ce18:	200006c8 	.word	0x200006c8
 800ce1c:	200006b4 	.word	0x200006b4
 800ce20:	200006ac 	.word	0x200006ac

0800ce24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce24:	b480      	push	{r7}
 800ce26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ce28:	4b04      	ldr	r3, [pc, #16]	; (800ce3c <vTaskSuspendAll+0x18>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	4a03      	ldr	r2, [pc, #12]	; (800ce3c <vTaskSuspendAll+0x18>)
 800ce30:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ce32:	bf00      	nop
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	200006d0 	.word	0x200006d0

0800ce40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce46:	2300      	movs	r3, #0
 800ce48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce4e:	4b42      	ldr	r3, [pc, #264]	; (800cf58 <xTaskResumeAll+0x118>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d10c      	bne.n	800ce70 <xTaskResumeAll+0x30>
	__asm volatile
 800ce56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5a:	b672      	cpsid	i
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	b662      	cpsie	i
 800ce6a:	603b      	str	r3, [r7, #0]
}
 800ce6c:	bf00      	nop
 800ce6e:	e7fe      	b.n	800ce6e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce70:	f000 fedc 	bl	800dc2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce74:	4b38      	ldr	r3, [pc, #224]	; (800cf58 <xTaskResumeAll+0x118>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	4a37      	ldr	r2, [pc, #220]	; (800cf58 <xTaskResumeAll+0x118>)
 800ce7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce7e:	4b36      	ldr	r3, [pc, #216]	; (800cf58 <xTaskResumeAll+0x118>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d161      	bne.n	800cf4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce86:	4b35      	ldr	r3, [pc, #212]	; (800cf5c <xTaskResumeAll+0x11c>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d05d      	beq.n	800cf4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce8e:	e02e      	b.n	800ceee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce90:	4b33      	ldr	r3, [pc, #204]	; (800cf60 <xTaskResumeAll+0x120>)
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	3318      	adds	r3, #24
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe fe82 	bl	800bba6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	3304      	adds	r3, #4
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fe fe7d 	bl	800bba6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	409a      	lsls	r2, r3
 800ceb4:	4b2b      	ldr	r3, [pc, #172]	; (800cf64 <xTaskResumeAll+0x124>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	4a2a      	ldr	r2, [pc, #168]	; (800cf64 <xTaskResumeAll+0x124>)
 800cebc:	6013      	str	r3, [r2, #0]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cec2:	4613      	mov	r3, r2
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	4413      	add	r3, r2
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	4a27      	ldr	r2, [pc, #156]	; (800cf68 <xTaskResumeAll+0x128>)
 800cecc:	441a      	add	r2, r3
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	3304      	adds	r3, #4
 800ced2:	4619      	mov	r1, r3
 800ced4:	4610      	mov	r0, r2
 800ced6:	f7fe fe09 	bl	800baec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cede:	4b23      	ldr	r3, [pc, #140]	; (800cf6c <xTaskResumeAll+0x12c>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d302      	bcc.n	800ceee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cee8:	4b21      	ldr	r3, [pc, #132]	; (800cf70 <xTaskResumeAll+0x130>)
 800ceea:	2201      	movs	r2, #1
 800ceec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ceee:	4b1c      	ldr	r3, [pc, #112]	; (800cf60 <xTaskResumeAll+0x120>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1cc      	bne.n	800ce90 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d001      	beq.n	800cf00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cefc:	f000 fb2a 	bl	800d554 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cf00:	4b1c      	ldr	r3, [pc, #112]	; (800cf74 <xTaskResumeAll+0x134>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d010      	beq.n	800cf2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf0c:	f000 f836 	bl	800cf7c <xTaskIncrementTick>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d002      	beq.n	800cf1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cf16:	4b16      	ldr	r3, [pc, #88]	; (800cf70 <xTaskResumeAll+0x130>)
 800cf18:	2201      	movs	r2, #1
 800cf1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	3b01      	subs	r3, #1
 800cf20:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1f1      	bne.n	800cf0c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800cf28:	4b12      	ldr	r3, [pc, #72]	; (800cf74 <xTaskResumeAll+0x134>)
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf2e:	4b10      	ldr	r3, [pc, #64]	; (800cf70 <xTaskResumeAll+0x130>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d009      	beq.n	800cf4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf36:	2301      	movs	r3, #1
 800cf38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf3a:	4b0f      	ldr	r3, [pc, #60]	; (800cf78 <xTaskResumeAll+0x138>)
 800cf3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf40:	601a      	str	r2, [r3, #0]
 800cf42:	f3bf 8f4f 	dsb	sy
 800cf46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf4a:	f000 fea3 	bl	800dc94 <vPortExitCritical>

	return xAlreadyYielded;
 800cf4e:	68bb      	ldr	r3, [r7, #8]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3710      	adds	r7, #16
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	200006d0 	.word	0x200006d0
 800cf5c:	200006a8 	.word	0x200006a8
 800cf60:	20000668 	.word	0x20000668
 800cf64:	200006b0 	.word	0x200006b0
 800cf68:	200005ac 	.word	0x200005ac
 800cf6c:	200005a8 	.word	0x200005a8
 800cf70:	200006bc 	.word	0x200006bc
 800cf74:	200006b8 	.word	0x200006b8
 800cf78:	e000ed04 	.word	0xe000ed04

0800cf7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b086      	sub	sp, #24
 800cf80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf82:	2300      	movs	r3, #0
 800cf84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf86:	4b4f      	ldr	r3, [pc, #316]	; (800d0c4 <xTaskIncrementTick+0x148>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	f040 808a 	bne.w	800d0a4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cf90:	4b4d      	ldr	r3, [pc, #308]	; (800d0c8 <xTaskIncrementTick+0x14c>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	3301      	adds	r3, #1
 800cf96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cf98:	4a4b      	ldr	r2, [pc, #300]	; (800d0c8 <xTaskIncrementTick+0x14c>)
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d122      	bne.n	800cfea <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfa4:	4b49      	ldr	r3, [pc, #292]	; (800d0cc <xTaskIncrementTick+0x150>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00c      	beq.n	800cfc8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800cfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb2:	b672      	cpsid	i
 800cfb4:	f383 8811 	msr	BASEPRI, r3
 800cfb8:	f3bf 8f6f 	isb	sy
 800cfbc:	f3bf 8f4f 	dsb	sy
 800cfc0:	b662      	cpsie	i
 800cfc2:	603b      	str	r3, [r7, #0]
}
 800cfc4:	bf00      	nop
 800cfc6:	e7fe      	b.n	800cfc6 <xTaskIncrementTick+0x4a>
 800cfc8:	4b40      	ldr	r3, [pc, #256]	; (800d0cc <xTaskIncrementTick+0x150>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	60fb      	str	r3, [r7, #12]
 800cfce:	4b40      	ldr	r3, [pc, #256]	; (800d0d0 <xTaskIncrementTick+0x154>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	4a3e      	ldr	r2, [pc, #248]	; (800d0cc <xTaskIncrementTick+0x150>)
 800cfd4:	6013      	str	r3, [r2, #0]
 800cfd6:	4a3e      	ldr	r2, [pc, #248]	; (800d0d0 <xTaskIncrementTick+0x154>)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	6013      	str	r3, [r2, #0]
 800cfdc:	4b3d      	ldr	r3, [pc, #244]	; (800d0d4 <xTaskIncrementTick+0x158>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	4a3c      	ldr	r2, [pc, #240]	; (800d0d4 <xTaskIncrementTick+0x158>)
 800cfe4:	6013      	str	r3, [r2, #0]
 800cfe6:	f000 fab5 	bl	800d554 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cfea:	4b3b      	ldr	r3, [pc, #236]	; (800d0d8 <xTaskIncrementTick+0x15c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	693a      	ldr	r2, [r7, #16]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d348      	bcc.n	800d086 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cff4:	4b35      	ldr	r3, [pc, #212]	; (800d0cc <xTaskIncrementTick+0x150>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d104      	bne.n	800d008 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cffe:	4b36      	ldr	r3, [pc, #216]	; (800d0d8 <xTaskIncrementTick+0x15c>)
 800d000:	f04f 32ff 	mov.w	r2, #4294967295
 800d004:	601a      	str	r2, [r3, #0]
					break;
 800d006:	e03e      	b.n	800d086 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d008:	4b30      	ldr	r3, [pc, #192]	; (800d0cc <xTaskIncrementTick+0x150>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	68db      	ldr	r3, [r3, #12]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d018:	693a      	ldr	r2, [r7, #16]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d203      	bcs.n	800d028 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d020:	4a2d      	ldr	r2, [pc, #180]	; (800d0d8 <xTaskIncrementTick+0x15c>)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d026:	e02e      	b.n	800d086 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	3304      	adds	r3, #4
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7fe fdba 	bl	800bba6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d036:	2b00      	cmp	r3, #0
 800d038:	d004      	beq.n	800d044 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	3318      	adds	r3, #24
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe fdb1 	bl	800bba6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d048:	2201      	movs	r2, #1
 800d04a:	409a      	lsls	r2, r3
 800d04c:	4b23      	ldr	r3, [pc, #140]	; (800d0dc <xTaskIncrementTick+0x160>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4313      	orrs	r3, r2
 800d052:	4a22      	ldr	r2, [pc, #136]	; (800d0dc <xTaskIncrementTick+0x160>)
 800d054:	6013      	str	r3, [r2, #0]
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d05a:	4613      	mov	r3, r2
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	4413      	add	r3, r2
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	4a1f      	ldr	r2, [pc, #124]	; (800d0e0 <xTaskIncrementTick+0x164>)
 800d064:	441a      	add	r2, r3
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	3304      	adds	r3, #4
 800d06a:	4619      	mov	r1, r3
 800d06c:	4610      	mov	r0, r2
 800d06e:	f7fe fd3d 	bl	800baec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d076:	4b1b      	ldr	r3, [pc, #108]	; (800d0e4 <xTaskIncrementTick+0x168>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d3b9      	bcc.n	800cff4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800d080:	2301      	movs	r3, #1
 800d082:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d084:	e7b6      	b.n	800cff4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d086:	4b17      	ldr	r3, [pc, #92]	; (800d0e4 <xTaskIncrementTick+0x168>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d08c:	4914      	ldr	r1, [pc, #80]	; (800d0e0 <xTaskIncrementTick+0x164>)
 800d08e:	4613      	mov	r3, r2
 800d090:	009b      	lsls	r3, r3, #2
 800d092:	4413      	add	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	440b      	add	r3, r1
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d907      	bls.n	800d0ae <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	617b      	str	r3, [r7, #20]
 800d0a2:	e004      	b.n	800d0ae <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d0a4:	4b10      	ldr	r3, [pc, #64]	; (800d0e8 <xTaskIncrementTick+0x16c>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	4a0f      	ldr	r2, [pc, #60]	; (800d0e8 <xTaskIncrementTick+0x16c>)
 800d0ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d0ae:	4b0f      	ldr	r3, [pc, #60]	; (800d0ec <xTaskIncrementTick+0x170>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d001      	beq.n	800d0ba <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d0ba:	697b      	ldr	r3, [r7, #20]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3718      	adds	r7, #24
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	200006d0 	.word	0x200006d0
 800d0c8:	200006ac 	.word	0x200006ac
 800d0cc:	20000660 	.word	0x20000660
 800d0d0:	20000664 	.word	0x20000664
 800d0d4:	200006c0 	.word	0x200006c0
 800d0d8:	200006c8 	.word	0x200006c8
 800d0dc:	200006b0 	.word	0x200006b0
 800d0e0:	200005ac 	.word	0x200005ac
 800d0e4:	200005a8 	.word	0x200005a8
 800d0e8:	200006b8 	.word	0x200006b8
 800d0ec:	200006bc 	.word	0x200006bc

0800d0f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b087      	sub	sp, #28
 800d0f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d0f6:	4b2a      	ldr	r3, [pc, #168]	; (800d1a0 <vTaskSwitchContext+0xb0>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d003      	beq.n	800d106 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d0fe:	4b29      	ldr	r3, [pc, #164]	; (800d1a4 <vTaskSwitchContext+0xb4>)
 800d100:	2201      	movs	r2, #1
 800d102:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d104:	e046      	b.n	800d194 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d106:	4b27      	ldr	r3, [pc, #156]	; (800d1a4 <vTaskSwitchContext+0xb4>)
 800d108:	2200      	movs	r2, #0
 800d10a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d10c:	4b26      	ldr	r3, [pc, #152]	; (800d1a8 <vTaskSwitchContext+0xb8>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	fab3 f383 	clz	r3, r3
 800d118:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d11a:	7afb      	ldrb	r3, [r7, #11]
 800d11c:	f1c3 031f 	rsb	r3, r3, #31
 800d120:	617b      	str	r3, [r7, #20]
 800d122:	4922      	ldr	r1, [pc, #136]	; (800d1ac <vTaskSwitchContext+0xbc>)
 800d124:	697a      	ldr	r2, [r7, #20]
 800d126:	4613      	mov	r3, r2
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	4413      	add	r3, r2
 800d12c:	009b      	lsls	r3, r3, #2
 800d12e:	440b      	add	r3, r1
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10c      	bne.n	800d150 <vTaskSwitchContext+0x60>
	__asm volatile
 800d136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13a:	b672      	cpsid	i
 800d13c:	f383 8811 	msr	BASEPRI, r3
 800d140:	f3bf 8f6f 	isb	sy
 800d144:	f3bf 8f4f 	dsb	sy
 800d148:	b662      	cpsie	i
 800d14a:	607b      	str	r3, [r7, #4]
}
 800d14c:	bf00      	nop
 800d14e:	e7fe      	b.n	800d14e <vTaskSwitchContext+0x5e>
 800d150:	697a      	ldr	r2, [r7, #20]
 800d152:	4613      	mov	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4413      	add	r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4a14      	ldr	r2, [pc, #80]	; (800d1ac <vTaskSwitchContext+0xbc>)
 800d15c:	4413      	add	r3, r2
 800d15e:	613b      	str	r3, [r7, #16]
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	605a      	str	r2, [r3, #4]
 800d16a:	693b      	ldr	r3, [r7, #16]
 800d16c:	685a      	ldr	r2, [r3, #4]
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	3308      	adds	r3, #8
 800d172:	429a      	cmp	r2, r3
 800d174:	d104      	bne.n	800d180 <vTaskSwitchContext+0x90>
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	605a      	str	r2, [r3, #4]
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	4a0a      	ldr	r2, [pc, #40]	; (800d1b0 <vTaskSwitchContext+0xc0>)
 800d188:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d18a:	4b09      	ldr	r3, [pc, #36]	; (800d1b0 <vTaskSwitchContext+0xc0>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	334c      	adds	r3, #76	; 0x4c
 800d190:	4a08      	ldr	r2, [pc, #32]	; (800d1b4 <vTaskSwitchContext+0xc4>)
 800d192:	6013      	str	r3, [r2, #0]
}
 800d194:	bf00      	nop
 800d196:	371c      	adds	r7, #28
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr
 800d1a0:	200006d0 	.word	0x200006d0
 800d1a4:	200006bc 	.word	0x200006bc
 800d1a8:	200006b0 	.word	0x200006b0
 800d1ac:	200005ac 	.word	0x200005ac
 800d1b0:	200005a8 	.word	0x200005a8
 800d1b4:	20000050 	.word	0x20000050

0800d1b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d10c      	bne.n	800d1e2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800d1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1cc:	b672      	cpsid	i
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	b662      	cpsie	i
 800d1dc:	60fb      	str	r3, [r7, #12]
}
 800d1de:	bf00      	nop
 800d1e0:	e7fe      	b.n	800d1e0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1e2:	4b07      	ldr	r3, [pc, #28]	; (800d200 <vTaskPlaceOnEventList+0x48>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	3318      	adds	r3, #24
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f7fe fca2 	bl	800bb34 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d1f0:	2101      	movs	r1, #1
 800d1f2:	6838      	ldr	r0, [r7, #0]
 800d1f4:	f000 fba8 	bl	800d948 <prvAddCurrentTaskToDelayedList>
}
 800d1f8:	bf00      	nop
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	200005a8 	.word	0x200005a8

0800d204 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b086      	sub	sp, #24
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d10c      	bne.n	800d234 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800d21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21e:	b672      	cpsid	i
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	b662      	cpsie	i
 800d22e:	60fb      	str	r3, [r7, #12]
}
 800d230:	bf00      	nop
 800d232:	e7fe      	b.n	800d232 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	3318      	adds	r3, #24
 800d238:	4618      	mov	r0, r3
 800d23a:	f7fe fcb4 	bl	800bba6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d23e:	4b1d      	ldr	r3, [pc, #116]	; (800d2b4 <xTaskRemoveFromEventList+0xb0>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d11c      	bne.n	800d280 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	3304      	adds	r3, #4
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fe fcab 	bl	800bba6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d254:	2201      	movs	r2, #1
 800d256:	409a      	lsls	r2, r3
 800d258:	4b17      	ldr	r3, [pc, #92]	; (800d2b8 <xTaskRemoveFromEventList+0xb4>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4313      	orrs	r3, r2
 800d25e:	4a16      	ldr	r2, [pc, #88]	; (800d2b8 <xTaskRemoveFromEventList+0xb4>)
 800d260:	6013      	str	r3, [r2, #0]
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d266:	4613      	mov	r3, r2
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	4413      	add	r3, r2
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	4a13      	ldr	r2, [pc, #76]	; (800d2bc <xTaskRemoveFromEventList+0xb8>)
 800d270:	441a      	add	r2, r3
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	3304      	adds	r3, #4
 800d276:	4619      	mov	r1, r3
 800d278:	4610      	mov	r0, r2
 800d27a:	f7fe fc37 	bl	800baec <vListInsertEnd>
 800d27e:	e005      	b.n	800d28c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	3318      	adds	r3, #24
 800d284:	4619      	mov	r1, r3
 800d286:	480e      	ldr	r0, [pc, #56]	; (800d2c0 <xTaskRemoveFromEventList+0xbc>)
 800d288:	f7fe fc30 	bl	800baec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d290:	4b0c      	ldr	r3, [pc, #48]	; (800d2c4 <xTaskRemoveFromEventList+0xc0>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d296:	429a      	cmp	r2, r3
 800d298:	d905      	bls.n	800d2a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d29a:	2301      	movs	r3, #1
 800d29c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d29e:	4b0a      	ldr	r3, [pc, #40]	; (800d2c8 <xTaskRemoveFromEventList+0xc4>)
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	601a      	str	r2, [r3, #0]
 800d2a4:	e001      	b.n	800d2aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d2aa:	697b      	ldr	r3, [r7, #20]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3718      	adds	r7, #24
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	200006d0 	.word	0x200006d0
 800d2b8:	200006b0 	.word	0x200006b0
 800d2bc:	200005ac 	.word	0x200005ac
 800d2c0:	20000668 	.word	0x20000668
 800d2c4:	200005a8 	.word	0x200005a8
 800d2c8:	200006bc 	.word	0x200006bc

0800d2cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d2d4:	4b06      	ldr	r3, [pc, #24]	; (800d2f0 <vTaskInternalSetTimeOutState+0x24>)
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d2dc:	4b05      	ldr	r3, [pc, #20]	; (800d2f4 <vTaskInternalSetTimeOutState+0x28>)
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	605a      	str	r2, [r3, #4]
}
 800d2e4:	bf00      	nop
 800d2e6:	370c      	adds	r7, #12
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr
 800d2f0:	200006c0 	.word	0x200006c0
 800d2f4:	200006ac 	.word	0x200006ac

0800d2f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b088      	sub	sp, #32
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10c      	bne.n	800d322 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800d308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30c:	b672      	cpsid	i
 800d30e:	f383 8811 	msr	BASEPRI, r3
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	f3bf 8f4f 	dsb	sy
 800d31a:	b662      	cpsie	i
 800d31c:	613b      	str	r3, [r7, #16]
}
 800d31e:	bf00      	nop
 800d320:	e7fe      	b.n	800d320 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d10c      	bne.n	800d342 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800d328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d32c:	b672      	cpsid	i
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	b662      	cpsie	i
 800d33c:	60fb      	str	r3, [r7, #12]
}
 800d33e:	bf00      	nop
 800d340:	e7fe      	b.n	800d340 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800d342:	f000 fc73 	bl	800dc2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d346:	4b1d      	ldr	r3, [pc, #116]	; (800d3bc <xTaskCheckForTimeOut+0xc4>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	69ba      	ldr	r2, [r7, #24]
 800d352:	1ad3      	subs	r3, r2, r3
 800d354:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35e:	d102      	bne.n	800d366 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d360:	2300      	movs	r3, #0
 800d362:	61fb      	str	r3, [r7, #28]
 800d364:	e023      	b.n	800d3ae <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	4b15      	ldr	r3, [pc, #84]	; (800d3c0 <xTaskCheckForTimeOut+0xc8>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d007      	beq.n	800d382 <xTaskCheckForTimeOut+0x8a>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	69ba      	ldr	r2, [r7, #24]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d302      	bcc.n	800d382 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d37c:	2301      	movs	r3, #1
 800d37e:	61fb      	str	r3, [r7, #28]
 800d380:	e015      	b.n	800d3ae <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	697a      	ldr	r2, [r7, #20]
 800d388:	429a      	cmp	r2, r3
 800d38a:	d20b      	bcs.n	800d3a4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	1ad2      	subs	r2, r2, r3
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f7ff ff97 	bl	800d2cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	61fb      	str	r3, [r7, #28]
 800d3a2:	e004      	b.n	800d3ae <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d3ae:	f000 fc71 	bl	800dc94 <vPortExitCritical>

	return xReturn;
 800d3b2:	69fb      	ldr	r3, [r7, #28]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3720      	adds	r7, #32
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}
 800d3bc:	200006ac 	.word	0x200006ac
 800d3c0:	200006c0 	.word	0x200006c0

0800d3c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d3c8:	4b03      	ldr	r3, [pc, #12]	; (800d3d8 <vTaskMissedYield+0x14>)
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	601a      	str	r2, [r3, #0]
}
 800d3ce:	bf00      	nop
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr
 800d3d8:	200006bc 	.word	0x200006bc

0800d3dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d3e4:	f000 f852 	bl	800d48c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d3e8:	4b06      	ldr	r3, [pc, #24]	; (800d404 <prvIdleTask+0x28>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d9f9      	bls.n	800d3e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d3f0:	4b05      	ldr	r3, [pc, #20]	; (800d408 <prvIdleTask+0x2c>)
 800d3f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3f6:	601a      	str	r2, [r3, #0]
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d400:	e7f0      	b.n	800d3e4 <prvIdleTask+0x8>
 800d402:	bf00      	nop
 800d404:	200005ac 	.word	0x200005ac
 800d408:	e000ed04 	.word	0xe000ed04

0800d40c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d412:	2300      	movs	r3, #0
 800d414:	607b      	str	r3, [r7, #4]
 800d416:	e00c      	b.n	800d432 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	4613      	mov	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4a12      	ldr	r2, [pc, #72]	; (800d46c <prvInitialiseTaskLists+0x60>)
 800d424:	4413      	add	r3, r2
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe fb33 	bl	800ba92 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	3301      	adds	r3, #1
 800d430:	607b      	str	r3, [r7, #4]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2b06      	cmp	r3, #6
 800d436:	d9ef      	bls.n	800d418 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d438:	480d      	ldr	r0, [pc, #52]	; (800d470 <prvInitialiseTaskLists+0x64>)
 800d43a:	f7fe fb2a 	bl	800ba92 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d43e:	480d      	ldr	r0, [pc, #52]	; (800d474 <prvInitialiseTaskLists+0x68>)
 800d440:	f7fe fb27 	bl	800ba92 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d444:	480c      	ldr	r0, [pc, #48]	; (800d478 <prvInitialiseTaskLists+0x6c>)
 800d446:	f7fe fb24 	bl	800ba92 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d44a:	480c      	ldr	r0, [pc, #48]	; (800d47c <prvInitialiseTaskLists+0x70>)
 800d44c:	f7fe fb21 	bl	800ba92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d450:	480b      	ldr	r0, [pc, #44]	; (800d480 <prvInitialiseTaskLists+0x74>)
 800d452:	f7fe fb1e 	bl	800ba92 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d456:	4b0b      	ldr	r3, [pc, #44]	; (800d484 <prvInitialiseTaskLists+0x78>)
 800d458:	4a05      	ldr	r2, [pc, #20]	; (800d470 <prvInitialiseTaskLists+0x64>)
 800d45a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d45c:	4b0a      	ldr	r3, [pc, #40]	; (800d488 <prvInitialiseTaskLists+0x7c>)
 800d45e:	4a05      	ldr	r2, [pc, #20]	; (800d474 <prvInitialiseTaskLists+0x68>)
 800d460:	601a      	str	r2, [r3, #0]
}
 800d462:	bf00      	nop
 800d464:	3708      	adds	r7, #8
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	200005ac 	.word	0x200005ac
 800d470:	20000638 	.word	0x20000638
 800d474:	2000064c 	.word	0x2000064c
 800d478:	20000668 	.word	0x20000668
 800d47c:	2000067c 	.word	0x2000067c
 800d480:	20000694 	.word	0x20000694
 800d484:	20000660 	.word	0x20000660
 800d488:	20000664 	.word	0x20000664

0800d48c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d492:	e019      	b.n	800d4c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d494:	f000 fbca 	bl	800dc2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d498:	4b10      	ldr	r3, [pc, #64]	; (800d4dc <prvCheckTasksWaitingTermination+0x50>)
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	3304      	adds	r3, #4
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7fe fb7e 	bl	800bba6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d4aa:	4b0d      	ldr	r3, [pc, #52]	; (800d4e0 <prvCheckTasksWaitingTermination+0x54>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	3b01      	subs	r3, #1
 800d4b0:	4a0b      	ldr	r2, [pc, #44]	; (800d4e0 <prvCheckTasksWaitingTermination+0x54>)
 800d4b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d4b4:	4b0b      	ldr	r3, [pc, #44]	; (800d4e4 <prvCheckTasksWaitingTermination+0x58>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	4a0a      	ldr	r2, [pc, #40]	; (800d4e4 <prvCheckTasksWaitingTermination+0x58>)
 800d4bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d4be:	f000 fbe9 	bl	800dc94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 f810 	bl	800d4e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4c8:	4b06      	ldr	r3, [pc, #24]	; (800d4e4 <prvCheckTasksWaitingTermination+0x58>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d1e1      	bne.n	800d494 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d4d0:	bf00      	nop
 800d4d2:	bf00      	nop
 800d4d4:	3708      	adds	r7, #8
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	2000067c 	.word	0x2000067c
 800d4e0:	200006a8 	.word	0x200006a8
 800d4e4:	20000690 	.word	0x20000690

0800d4e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	334c      	adds	r3, #76	; 0x4c
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f000 feaf 	bl	800e258 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d108      	bne.n	800d516 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d508:	4618      	mov	r0, r3
 800d50a:	f000 fd41 	bl	800df90 <vPortFree>
				vPortFree( pxTCB );
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 fd3e 	bl	800df90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d514:	e01a      	b.n	800d54c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d103      	bne.n	800d528 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 fd35 	bl	800df90 <vPortFree>
	}
 800d526:	e011      	b.n	800d54c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d52e:	2b02      	cmp	r3, #2
 800d530:	d00c      	beq.n	800d54c <prvDeleteTCB+0x64>
	__asm volatile
 800d532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d536:	b672      	cpsid	i
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	b662      	cpsie	i
 800d546:	60fb      	str	r3, [r7, #12]
}
 800d548:	bf00      	nop
 800d54a:	e7fe      	b.n	800d54a <prvDeleteTCB+0x62>
	}
 800d54c:	bf00      	nop
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d55a:	4b0c      	ldr	r3, [pc, #48]	; (800d58c <prvResetNextTaskUnblockTime+0x38>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d104      	bne.n	800d56e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d564:	4b0a      	ldr	r3, [pc, #40]	; (800d590 <prvResetNextTaskUnblockTime+0x3c>)
 800d566:	f04f 32ff 	mov.w	r2, #4294967295
 800d56a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d56c:	e008      	b.n	800d580 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d56e:	4b07      	ldr	r3, [pc, #28]	; (800d58c <prvResetNextTaskUnblockTime+0x38>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	68db      	ldr	r3, [r3, #12]
 800d576:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	4a04      	ldr	r2, [pc, #16]	; (800d590 <prvResetNextTaskUnblockTime+0x3c>)
 800d57e:	6013      	str	r3, [r2, #0]
}
 800d580:	bf00      	nop
 800d582:	370c      	adds	r7, #12
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr
 800d58c:	20000660 	.word	0x20000660
 800d590:	200006c8 	.word	0x200006c8

0800d594 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d59a:	4b0b      	ldr	r3, [pc, #44]	; (800d5c8 <xTaskGetSchedulerState+0x34>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d102      	bne.n	800d5a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	607b      	str	r3, [r7, #4]
 800d5a6:	e008      	b.n	800d5ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5a8:	4b08      	ldr	r3, [pc, #32]	; (800d5cc <xTaskGetSchedulerState+0x38>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d102      	bne.n	800d5b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	607b      	str	r3, [r7, #4]
 800d5b4:	e001      	b.n	800d5ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d5ba:	687b      	ldr	r3, [r7, #4]
	}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	370c      	adds	r7, #12
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr
 800d5c8:	200006b4 	.word	0x200006b4
 800d5cc:	200006d0 	.word	0x200006d0

0800d5d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d069      	beq.n	800d6ba <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ea:	4b36      	ldr	r3, [pc, #216]	; (800d6c4 <xTaskPriorityInherit+0xf4>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d259      	bcs.n	800d6a8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	699b      	ldr	r3, [r3, #24]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	db06      	blt.n	800d60a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5fc:	4b31      	ldr	r3, [pc, #196]	; (800d6c4 <xTaskPriorityInherit+0xf4>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d602:	f1c3 0207 	rsb	r2, r3, #7
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	6959      	ldr	r1, [r3, #20]
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d612:	4613      	mov	r3, r2
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	4413      	add	r3, r2
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	4a2b      	ldr	r2, [pc, #172]	; (800d6c8 <xTaskPriorityInherit+0xf8>)
 800d61c:	4413      	add	r3, r2
 800d61e:	4299      	cmp	r1, r3
 800d620:	d13a      	bne.n	800d698 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	3304      	adds	r3, #4
 800d626:	4618      	mov	r0, r3
 800d628:	f7fe fabd 	bl	800bba6 <uxListRemove>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d115      	bne.n	800d65e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d636:	4924      	ldr	r1, [pc, #144]	; (800d6c8 <xTaskPriorityInherit+0xf8>)
 800d638:	4613      	mov	r3, r2
 800d63a:	009b      	lsls	r3, r3, #2
 800d63c:	4413      	add	r3, r2
 800d63e:	009b      	lsls	r3, r3, #2
 800d640:	440b      	add	r3, r1
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d10a      	bne.n	800d65e <xTaskPriorityInherit+0x8e>
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64c:	2201      	movs	r2, #1
 800d64e:	fa02 f303 	lsl.w	r3, r2, r3
 800d652:	43da      	mvns	r2, r3
 800d654:	4b1d      	ldr	r3, [pc, #116]	; (800d6cc <xTaskPriorityInherit+0xfc>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	4013      	ands	r3, r2
 800d65a:	4a1c      	ldr	r2, [pc, #112]	; (800d6cc <xTaskPriorityInherit+0xfc>)
 800d65c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d65e:	4b19      	ldr	r3, [pc, #100]	; (800d6c4 <xTaskPriorityInherit+0xf4>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66c:	2201      	movs	r2, #1
 800d66e:	409a      	lsls	r2, r3
 800d670:	4b16      	ldr	r3, [pc, #88]	; (800d6cc <xTaskPriorityInherit+0xfc>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4313      	orrs	r3, r2
 800d676:	4a15      	ldr	r2, [pc, #84]	; (800d6cc <xTaskPriorityInherit+0xfc>)
 800d678:	6013      	str	r3, [r2, #0]
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d67e:	4613      	mov	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	4413      	add	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	4a10      	ldr	r2, [pc, #64]	; (800d6c8 <xTaskPriorityInherit+0xf8>)
 800d688:	441a      	add	r2, r3
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	3304      	adds	r3, #4
 800d68e:	4619      	mov	r1, r3
 800d690:	4610      	mov	r0, r2
 800d692:	f7fe fa2b 	bl	800baec <vListInsertEnd>
 800d696:	e004      	b.n	800d6a2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d698:	4b0a      	ldr	r3, [pc, #40]	; (800d6c4 <xTaskPriorityInherit+0xf4>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	60fb      	str	r3, [r7, #12]
 800d6a6:	e008      	b.n	800d6ba <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6ac:	4b05      	ldr	r3, [pc, #20]	; (800d6c4 <xTaskPriorityInherit+0xf4>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d201      	bcs.n	800d6ba <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
	}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	3710      	adds	r7, #16
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	200005a8 	.word	0x200005a8
 800d6c8:	200005ac 	.word	0x200005ac
 800d6cc:	200006b0 	.word	0x200006b0

0800d6d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d072      	beq.n	800d7cc <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d6e6:	4b3c      	ldr	r3, [pc, #240]	; (800d7d8 <xTaskPriorityDisinherit+0x108>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	693a      	ldr	r2, [r7, #16]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d00c      	beq.n	800d70a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f4:	b672      	cpsid	i
 800d6f6:	f383 8811 	msr	BASEPRI, r3
 800d6fa:	f3bf 8f6f 	isb	sy
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	b662      	cpsie	i
 800d704:	60fb      	str	r3, [r7, #12]
}
 800d706:	bf00      	nop
 800d708:	e7fe      	b.n	800d708 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d10c      	bne.n	800d72c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d716:	b672      	cpsid	i
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	b662      	cpsie	i
 800d726:	60bb      	str	r3, [r7, #8]
}
 800d728:	bf00      	nop
 800d72a:	e7fe      	b.n	800d72a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d730:	1e5a      	subs	r2, r3, #1
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d73e:	429a      	cmp	r2, r3
 800d740:	d044      	beq.n	800d7cc <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d746:	2b00      	cmp	r3, #0
 800d748:	d140      	bne.n	800d7cc <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	3304      	adds	r3, #4
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fe fa29 	bl	800bba6 <uxListRemove>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d115      	bne.n	800d786 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d75e:	491f      	ldr	r1, [pc, #124]	; (800d7dc <xTaskPriorityDisinherit+0x10c>)
 800d760:	4613      	mov	r3, r2
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	4413      	add	r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	440b      	add	r3, r1
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d10a      	bne.n	800d786 <xTaskPriorityDisinherit+0xb6>
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d774:	2201      	movs	r2, #1
 800d776:	fa02 f303 	lsl.w	r3, r2, r3
 800d77a:	43da      	mvns	r2, r3
 800d77c:	4b18      	ldr	r3, [pc, #96]	; (800d7e0 <xTaskPriorityDisinherit+0x110>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4013      	ands	r3, r2
 800d782:	4a17      	ldr	r2, [pc, #92]	; (800d7e0 <xTaskPriorityDisinherit+0x110>)
 800d784:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d792:	f1c3 0207 	rsb	r2, r3, #7
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d79e:	2201      	movs	r2, #1
 800d7a0:	409a      	lsls	r2, r3
 800d7a2:	4b0f      	ldr	r3, [pc, #60]	; (800d7e0 <xTaskPriorityDisinherit+0x110>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	4a0d      	ldr	r2, [pc, #52]	; (800d7e0 <xTaskPriorityDisinherit+0x110>)
 800d7aa:	6013      	str	r3, [r2, #0]
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	4413      	add	r3, r2
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	4a08      	ldr	r2, [pc, #32]	; (800d7dc <xTaskPriorityDisinherit+0x10c>)
 800d7ba:	441a      	add	r2, r3
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	3304      	adds	r3, #4
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	4610      	mov	r0, r2
 800d7c4:	f7fe f992 	bl	800baec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d7cc:	697b      	ldr	r3, [r7, #20]
	}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3718      	adds	r7, #24
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	200005a8 	.word	0x200005a8
 800d7dc:	200005ac 	.word	0x200005ac
 800d7e0:	200006b0 	.word	0x200006b0

0800d7e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b088      	sub	sp, #32
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f000 8087 	beq.w	800d90c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d7fe:	69bb      	ldr	r3, [r7, #24]
 800d800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d802:	2b00      	cmp	r3, #0
 800d804:	d10c      	bne.n	800d820 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800d806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80a:	b672      	cpsid	i
 800d80c:	f383 8811 	msr	BASEPRI, r3
 800d810:	f3bf 8f6f 	isb	sy
 800d814:	f3bf 8f4f 	dsb	sy
 800d818:	b662      	cpsie	i
 800d81a:	60fb      	str	r3, [r7, #12]
}
 800d81c:	bf00      	nop
 800d81e:	e7fe      	b.n	800d81e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d824:	683a      	ldr	r2, [r7, #0]
 800d826:	429a      	cmp	r2, r3
 800d828:	d902      	bls.n	800d830 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	61fb      	str	r3, [r7, #28]
 800d82e:	e002      	b.n	800d836 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d830:	69bb      	ldr	r3, [r7, #24]
 800d832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d834:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d83a:	69fa      	ldr	r2, [r7, #28]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d065      	beq.n	800d90c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d844:	697a      	ldr	r2, [r7, #20]
 800d846:	429a      	cmp	r2, r3
 800d848:	d160      	bne.n	800d90c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d84a:	4b32      	ldr	r3, [pc, #200]	; (800d914 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	69ba      	ldr	r2, [r7, #24]
 800d850:	429a      	cmp	r2, r3
 800d852:	d10c      	bne.n	800d86e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800d854:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d858:	b672      	cpsid	i
 800d85a:	f383 8811 	msr	BASEPRI, r3
 800d85e:	f3bf 8f6f 	isb	sy
 800d862:	f3bf 8f4f 	dsb	sy
 800d866:	b662      	cpsie	i
 800d868:	60bb      	str	r3, [r7, #8]
}
 800d86a:	bf00      	nop
 800d86c:	e7fe      	b.n	800d86c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d86e:	69bb      	ldr	r3, [r7, #24]
 800d870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d872:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	69fa      	ldr	r2, [r7, #28]
 800d878:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	699b      	ldr	r3, [r3, #24]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	db04      	blt.n	800d88c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	f1c3 0207 	rsb	r2, r3, #7
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d88c:	69bb      	ldr	r3, [r7, #24]
 800d88e:	6959      	ldr	r1, [r3, #20]
 800d890:	693a      	ldr	r2, [r7, #16]
 800d892:	4613      	mov	r3, r2
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	4413      	add	r3, r2
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	4a1f      	ldr	r2, [pc, #124]	; (800d918 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d89c:	4413      	add	r3, r2
 800d89e:	4299      	cmp	r1, r3
 800d8a0:	d134      	bne.n	800d90c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fe f97d 	bl	800bba6 <uxListRemove>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d115      	bne.n	800d8de <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d8b2:	69bb      	ldr	r3, [r7, #24]
 800d8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b6:	4918      	ldr	r1, [pc, #96]	; (800d918 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d8b8:	4613      	mov	r3, r2
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	4413      	add	r3, r2
 800d8be:	009b      	lsls	r3, r3, #2
 800d8c0:	440b      	add	r3, r1
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10a      	bne.n	800d8de <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8cc:	2201      	movs	r2, #1
 800d8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d8d2:	43da      	mvns	r2, r3
 800d8d4:	4b11      	ldr	r3, [pc, #68]	; (800d91c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4013      	ands	r3, r2
 800d8da:	4a10      	ldr	r2, [pc, #64]	; (800d91c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d8dc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	409a      	lsls	r2, r3
 800d8e6:	4b0d      	ldr	r3, [pc, #52]	; (800d91c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	4a0b      	ldr	r2, [pc, #44]	; (800d91c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d8ee:	6013      	str	r3, [r2, #0]
 800d8f0:	69bb      	ldr	r3, [r7, #24]
 800d8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4413      	add	r3, r2
 800d8fa:	009b      	lsls	r3, r3, #2
 800d8fc:	4a06      	ldr	r2, [pc, #24]	; (800d918 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d8fe:	441a      	add	r2, r3
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	3304      	adds	r3, #4
 800d904:	4619      	mov	r1, r3
 800d906:	4610      	mov	r0, r2
 800d908:	f7fe f8f0 	bl	800baec <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d90c:	bf00      	nop
 800d90e:	3720      	adds	r7, #32
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	200005a8 	.word	0x200005a8
 800d918:	200005ac 	.word	0x200005ac
 800d91c:	200006b0 	.word	0x200006b0

0800d920 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d920:	b480      	push	{r7}
 800d922:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d924:	4b07      	ldr	r3, [pc, #28]	; (800d944 <pvTaskIncrementMutexHeldCount+0x24>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d004      	beq.n	800d936 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d92c:	4b05      	ldr	r3, [pc, #20]	; (800d944 <pvTaskIncrementMutexHeldCount+0x24>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d932:	3201      	adds	r2, #1
 800d934:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d936:	4b03      	ldr	r3, [pc, #12]	; (800d944 <pvTaskIncrementMutexHeldCount+0x24>)
 800d938:	681b      	ldr	r3, [r3, #0]
	}
 800d93a:	4618      	mov	r0, r3
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr
 800d944:	200005a8 	.word	0x200005a8

0800d948 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d952:	4b29      	ldr	r3, [pc, #164]	; (800d9f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d958:	4b28      	ldr	r3, [pc, #160]	; (800d9fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	3304      	adds	r3, #4
 800d95e:	4618      	mov	r0, r3
 800d960:	f7fe f921 	bl	800bba6 <uxListRemove>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10b      	bne.n	800d982 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d96a:	4b24      	ldr	r3, [pc, #144]	; (800d9fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d970:	2201      	movs	r2, #1
 800d972:	fa02 f303 	lsl.w	r3, r2, r3
 800d976:	43da      	mvns	r2, r3
 800d978:	4b21      	ldr	r3, [pc, #132]	; (800da00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4013      	ands	r3, r2
 800d97e:	4a20      	ldr	r2, [pc, #128]	; (800da00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d980:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d988:	d10a      	bne.n	800d9a0 <prvAddCurrentTaskToDelayedList+0x58>
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d007      	beq.n	800d9a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d990:	4b1a      	ldr	r3, [pc, #104]	; (800d9fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3304      	adds	r3, #4
 800d996:	4619      	mov	r1, r3
 800d998:	481a      	ldr	r0, [pc, #104]	; (800da04 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d99a:	f7fe f8a7 	bl	800baec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d99e:	e026      	b.n	800d9ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d9a8:	4b14      	ldr	r3, [pc, #80]	; (800d9fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d9b0:	68ba      	ldr	r2, [r7, #8]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d209      	bcs.n	800d9cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9b8:	4b13      	ldr	r3, [pc, #76]	; (800da08 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	4b0f      	ldr	r3, [pc, #60]	; (800d9fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	3304      	adds	r3, #4
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	f7fe f8b5 	bl	800bb34 <vListInsert>
}
 800d9ca:	e010      	b.n	800d9ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9cc:	4b0f      	ldr	r3, [pc, #60]	; (800da0c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	4b0a      	ldr	r3, [pc, #40]	; (800d9fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3304      	adds	r3, #4
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	4610      	mov	r0, r2
 800d9da:	f7fe f8ab 	bl	800bb34 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d9de:	4b0c      	ldr	r3, [pc, #48]	; (800da10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	68ba      	ldr	r2, [r7, #8]
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d202      	bcs.n	800d9ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d9e8:	4a09      	ldr	r2, [pc, #36]	; (800da10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	6013      	str	r3, [r2, #0]
}
 800d9ee:	bf00      	nop
 800d9f0:	3710      	adds	r7, #16
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	200006ac 	.word	0x200006ac
 800d9fc:	200005a8 	.word	0x200005a8
 800da00:	200006b0 	.word	0x200006b0
 800da04:	20000694 	.word	0x20000694
 800da08:	20000664 	.word	0x20000664
 800da0c:	20000660 	.word	0x20000660
 800da10:	200006c8 	.word	0x200006c8

0800da14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	3b04      	subs	r3, #4
 800da24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800da2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	3b04      	subs	r3, #4
 800da32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	f023 0201 	bic.w	r2, r3, #1
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	3b04      	subs	r3, #4
 800da42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800da44:	4a0c      	ldr	r2, [pc, #48]	; (800da78 <pxPortInitialiseStack+0x64>)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	3b14      	subs	r3, #20
 800da4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	3b04      	subs	r3, #4
 800da5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f06f 0202 	mvn.w	r2, #2
 800da62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	3b20      	subs	r3, #32
 800da68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800da6a:	68fb      	ldr	r3, [r7, #12]
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3714      	adds	r7, #20
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr
 800da78:	0800da7d 	.word	0x0800da7d

0800da7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800da7c:	b480      	push	{r7}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800da82:	2300      	movs	r3, #0
 800da84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800da86:	4b14      	ldr	r3, [pc, #80]	; (800dad8 <prvTaskExitError+0x5c>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da8e:	d00c      	beq.n	800daaa <prvTaskExitError+0x2e>
	__asm volatile
 800da90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da94:	b672      	cpsid	i
 800da96:	f383 8811 	msr	BASEPRI, r3
 800da9a:	f3bf 8f6f 	isb	sy
 800da9e:	f3bf 8f4f 	dsb	sy
 800daa2:	b662      	cpsie	i
 800daa4:	60fb      	str	r3, [r7, #12]
}
 800daa6:	bf00      	nop
 800daa8:	e7fe      	b.n	800daa8 <prvTaskExitError+0x2c>
	__asm volatile
 800daaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daae:	b672      	cpsid	i
 800dab0:	f383 8811 	msr	BASEPRI, r3
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	b662      	cpsie	i
 800dabe:	60bb      	str	r3, [r7, #8]
}
 800dac0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dac2:	bf00      	nop
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d0fc      	beq.n	800dac4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800daca:	bf00      	nop
 800dacc:	bf00      	nop
 800dace:	3714      	adds	r7, #20
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	2000004c 	.word	0x2000004c
 800dadc:	00000000 	.word	0x00000000

0800dae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dae0:	4b07      	ldr	r3, [pc, #28]	; (800db00 <pxCurrentTCBConst2>)
 800dae2:	6819      	ldr	r1, [r3, #0]
 800dae4:	6808      	ldr	r0, [r1, #0]
 800dae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daea:	f380 8809 	msr	PSP, r0
 800daee:	f3bf 8f6f 	isb	sy
 800daf2:	f04f 0000 	mov.w	r0, #0
 800daf6:	f380 8811 	msr	BASEPRI, r0
 800dafa:	4770      	bx	lr
 800dafc:	f3af 8000 	nop.w

0800db00 <pxCurrentTCBConst2>:
 800db00:	200005a8 	.word	0x200005a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800db04:	bf00      	nop
 800db06:	bf00      	nop

0800db08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800db08:	4808      	ldr	r0, [pc, #32]	; (800db2c <prvPortStartFirstTask+0x24>)
 800db0a:	6800      	ldr	r0, [r0, #0]
 800db0c:	6800      	ldr	r0, [r0, #0]
 800db0e:	f380 8808 	msr	MSP, r0
 800db12:	f04f 0000 	mov.w	r0, #0
 800db16:	f380 8814 	msr	CONTROL, r0
 800db1a:	b662      	cpsie	i
 800db1c:	b661      	cpsie	f
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	df00      	svc	0
 800db28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800db2a:	bf00      	nop
 800db2c:	e000ed08 	.word	0xe000ed08

0800db30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b084      	sub	sp, #16
 800db34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800db36:	4b37      	ldr	r3, [pc, #220]	; (800dc14 <xPortStartScheduler+0xe4>)
 800db38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	22ff      	movs	r2, #255	; 0xff
 800db46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800db50:	78fb      	ldrb	r3, [r7, #3]
 800db52:	b2db      	uxtb	r3, r3
 800db54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800db58:	b2da      	uxtb	r2, r3
 800db5a:	4b2f      	ldr	r3, [pc, #188]	; (800dc18 <xPortStartScheduler+0xe8>)
 800db5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800db5e:	4b2f      	ldr	r3, [pc, #188]	; (800dc1c <xPortStartScheduler+0xec>)
 800db60:	2207      	movs	r2, #7
 800db62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db64:	e009      	b.n	800db7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800db66:	4b2d      	ldr	r3, [pc, #180]	; (800dc1c <xPortStartScheduler+0xec>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	3b01      	subs	r3, #1
 800db6c:	4a2b      	ldr	r2, [pc, #172]	; (800dc1c <xPortStartScheduler+0xec>)
 800db6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800db70:	78fb      	ldrb	r3, [r7, #3]
 800db72:	b2db      	uxtb	r3, r3
 800db74:	005b      	lsls	r3, r3, #1
 800db76:	b2db      	uxtb	r3, r3
 800db78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db7a:	78fb      	ldrb	r3, [r7, #3]
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db82:	2b80      	cmp	r3, #128	; 0x80
 800db84:	d0ef      	beq.n	800db66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800db86:	4b25      	ldr	r3, [pc, #148]	; (800dc1c <xPortStartScheduler+0xec>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f1c3 0307 	rsb	r3, r3, #7
 800db8e:	2b04      	cmp	r3, #4
 800db90:	d00c      	beq.n	800dbac <xPortStartScheduler+0x7c>
	__asm volatile
 800db92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db96:	b672      	cpsid	i
 800db98:	f383 8811 	msr	BASEPRI, r3
 800db9c:	f3bf 8f6f 	isb	sy
 800dba0:	f3bf 8f4f 	dsb	sy
 800dba4:	b662      	cpsie	i
 800dba6:	60bb      	str	r3, [r7, #8]
}
 800dba8:	bf00      	nop
 800dbaa:	e7fe      	b.n	800dbaa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dbac:	4b1b      	ldr	r3, [pc, #108]	; (800dc1c <xPortStartScheduler+0xec>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	021b      	lsls	r3, r3, #8
 800dbb2:	4a1a      	ldr	r2, [pc, #104]	; (800dc1c <xPortStartScheduler+0xec>)
 800dbb4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dbb6:	4b19      	ldr	r3, [pc, #100]	; (800dc1c <xPortStartScheduler+0xec>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dbbe:	4a17      	ldr	r2, [pc, #92]	; (800dc1c <xPortStartScheduler+0xec>)
 800dbc0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dbca:	4b15      	ldr	r3, [pc, #84]	; (800dc20 <xPortStartScheduler+0xf0>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a14      	ldr	r2, [pc, #80]	; (800dc20 <xPortStartScheduler+0xf0>)
 800dbd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dbd4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dbd6:	4b12      	ldr	r3, [pc, #72]	; (800dc20 <xPortStartScheduler+0xf0>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a11      	ldr	r2, [pc, #68]	; (800dc20 <xPortStartScheduler+0xf0>)
 800dbdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dbe0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dbe2:	f000 f8dd 	bl	800dda0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dbe6:	4b0f      	ldr	r3, [pc, #60]	; (800dc24 <xPortStartScheduler+0xf4>)
 800dbe8:	2200      	movs	r2, #0
 800dbea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dbec:	f000 f8fc 	bl	800dde8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dbf0:	4b0d      	ldr	r3, [pc, #52]	; (800dc28 <xPortStartScheduler+0xf8>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a0c      	ldr	r2, [pc, #48]	; (800dc28 <xPortStartScheduler+0xf8>)
 800dbf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dbfa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dbfc:	f7ff ff84 	bl	800db08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dc00:	f7ff fa76 	bl	800d0f0 <vTaskSwitchContext>
	prvTaskExitError();
 800dc04:	f7ff ff3a 	bl	800da7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	e000e400 	.word	0xe000e400
 800dc18:	200006d4 	.word	0x200006d4
 800dc1c:	200006d8 	.word	0x200006d8
 800dc20:	e000ed20 	.word	0xe000ed20
 800dc24:	2000004c 	.word	0x2000004c
 800dc28:	e000ef34 	.word	0xe000ef34

0800dc2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
	__asm volatile
 800dc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc36:	b672      	cpsid	i
 800dc38:	f383 8811 	msr	BASEPRI, r3
 800dc3c:	f3bf 8f6f 	isb	sy
 800dc40:	f3bf 8f4f 	dsb	sy
 800dc44:	b662      	cpsie	i
 800dc46:	607b      	str	r3, [r7, #4]
}
 800dc48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dc4a:	4b10      	ldr	r3, [pc, #64]	; (800dc8c <vPortEnterCritical+0x60>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	4a0e      	ldr	r2, [pc, #56]	; (800dc8c <vPortEnterCritical+0x60>)
 800dc52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dc54:	4b0d      	ldr	r3, [pc, #52]	; (800dc8c <vPortEnterCritical+0x60>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d111      	bne.n	800dc80 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dc5c:	4b0c      	ldr	r3, [pc, #48]	; (800dc90 <vPortEnterCritical+0x64>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00c      	beq.n	800dc80 <vPortEnterCritical+0x54>
	__asm volatile
 800dc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6a:	b672      	cpsid	i
 800dc6c:	f383 8811 	msr	BASEPRI, r3
 800dc70:	f3bf 8f6f 	isb	sy
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	b662      	cpsie	i
 800dc7a:	603b      	str	r3, [r7, #0]
}
 800dc7c:	bf00      	nop
 800dc7e:	e7fe      	b.n	800dc7e <vPortEnterCritical+0x52>
	}
}
 800dc80:	bf00      	nop
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	2000004c 	.word	0x2000004c
 800dc90:	e000ed04 	.word	0xe000ed04

0800dc94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dc94:	b480      	push	{r7}
 800dc96:	b083      	sub	sp, #12
 800dc98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dc9a:	4b13      	ldr	r3, [pc, #76]	; (800dce8 <vPortExitCritical+0x54>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d10c      	bne.n	800dcbc <vPortExitCritical+0x28>
	__asm volatile
 800dca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca6:	b672      	cpsid	i
 800dca8:	f383 8811 	msr	BASEPRI, r3
 800dcac:	f3bf 8f6f 	isb	sy
 800dcb0:	f3bf 8f4f 	dsb	sy
 800dcb4:	b662      	cpsie	i
 800dcb6:	607b      	str	r3, [r7, #4]
}
 800dcb8:	bf00      	nop
 800dcba:	e7fe      	b.n	800dcba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800dcbc:	4b0a      	ldr	r3, [pc, #40]	; (800dce8 <vPortExitCritical+0x54>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	3b01      	subs	r3, #1
 800dcc2:	4a09      	ldr	r2, [pc, #36]	; (800dce8 <vPortExitCritical+0x54>)
 800dcc4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dcc6:	4b08      	ldr	r3, [pc, #32]	; (800dce8 <vPortExitCritical+0x54>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d105      	bne.n	800dcda <vPortExitCritical+0x46>
 800dcce:	2300      	movs	r3, #0
 800dcd0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dcd8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dcda:	bf00      	nop
 800dcdc:	370c      	adds	r7, #12
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	2000004c 	.word	0x2000004c
 800dcec:	00000000 	.word	0x00000000

0800dcf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dcf0:	f3ef 8009 	mrs	r0, PSP
 800dcf4:	f3bf 8f6f 	isb	sy
 800dcf8:	4b15      	ldr	r3, [pc, #84]	; (800dd50 <pxCurrentTCBConst>)
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	f01e 0f10 	tst.w	lr, #16
 800dd00:	bf08      	it	eq
 800dd02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dd06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd0a:	6010      	str	r0, [r2, #0]
 800dd0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dd10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dd14:	b672      	cpsid	i
 800dd16:	f380 8811 	msr	BASEPRI, r0
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	f3bf 8f6f 	isb	sy
 800dd22:	b662      	cpsie	i
 800dd24:	f7ff f9e4 	bl	800d0f0 <vTaskSwitchContext>
 800dd28:	f04f 0000 	mov.w	r0, #0
 800dd2c:	f380 8811 	msr	BASEPRI, r0
 800dd30:	bc09      	pop	{r0, r3}
 800dd32:	6819      	ldr	r1, [r3, #0]
 800dd34:	6808      	ldr	r0, [r1, #0]
 800dd36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd3a:	f01e 0f10 	tst.w	lr, #16
 800dd3e:	bf08      	it	eq
 800dd40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dd44:	f380 8809 	msr	PSP, r0
 800dd48:	f3bf 8f6f 	isb	sy
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop

0800dd50 <pxCurrentTCBConst>:
 800dd50:	200005a8 	.word	0x200005a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dd54:	bf00      	nop
 800dd56:	bf00      	nop

0800dd58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
	__asm volatile
 800dd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd62:	b672      	cpsid	i
 800dd64:	f383 8811 	msr	BASEPRI, r3
 800dd68:	f3bf 8f6f 	isb	sy
 800dd6c:	f3bf 8f4f 	dsb	sy
 800dd70:	b662      	cpsie	i
 800dd72:	607b      	str	r3, [r7, #4]
}
 800dd74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dd76:	f7ff f901 	bl	800cf7c <xTaskIncrementTick>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d003      	beq.n	800dd88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dd80:	4b06      	ldr	r3, [pc, #24]	; (800dd9c <SysTick_Handler+0x44>)
 800dd82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd86:	601a      	str	r2, [r3, #0]
 800dd88:	2300      	movs	r3, #0
 800dd8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	f383 8811 	msr	BASEPRI, r3
}
 800dd92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dd94:	bf00      	nop
 800dd96:	3708      	adds	r7, #8
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	e000ed04 	.word	0xe000ed04

0800dda0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dda0:	b480      	push	{r7}
 800dda2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dda4:	4b0b      	ldr	r3, [pc, #44]	; (800ddd4 <vPortSetupTimerInterrupt+0x34>)
 800dda6:	2200      	movs	r2, #0
 800dda8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ddaa:	4b0b      	ldr	r3, [pc, #44]	; (800ddd8 <vPortSetupTimerInterrupt+0x38>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ddb0:	4b0a      	ldr	r3, [pc, #40]	; (800dddc <vPortSetupTimerInterrupt+0x3c>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4a0a      	ldr	r2, [pc, #40]	; (800dde0 <vPortSetupTimerInterrupt+0x40>)
 800ddb6:	fba2 2303 	umull	r2, r3, r2, r3
 800ddba:	099b      	lsrs	r3, r3, #6
 800ddbc:	4a09      	ldr	r2, [pc, #36]	; (800dde4 <vPortSetupTimerInterrupt+0x44>)
 800ddbe:	3b01      	subs	r3, #1
 800ddc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ddc2:	4b04      	ldr	r3, [pc, #16]	; (800ddd4 <vPortSetupTimerInterrupt+0x34>)
 800ddc4:	2207      	movs	r2, #7
 800ddc6:	601a      	str	r2, [r3, #0]
}
 800ddc8:	bf00      	nop
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop
 800ddd4:	e000e010 	.word	0xe000e010
 800ddd8:	e000e018 	.word	0xe000e018
 800dddc:	20000040 	.word	0x20000040
 800dde0:	10624dd3 	.word	0x10624dd3
 800dde4:	e000e014 	.word	0xe000e014

0800dde8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dde8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ddf8 <vPortEnableVFP+0x10>
 800ddec:	6801      	ldr	r1, [r0, #0]
 800ddee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ddf2:	6001      	str	r1, [r0, #0]
 800ddf4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ddf6:	bf00      	nop
 800ddf8:	e000ed88 	.word	0xe000ed88

0800ddfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b08a      	sub	sp, #40	; 0x28
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800de04:	2300      	movs	r3, #0
 800de06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de08:	f7ff f80c 	bl	800ce24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de0c:	4b5b      	ldr	r3, [pc, #364]	; (800df7c <pvPortMalloc+0x180>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d101      	bne.n	800de18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800de14:	f000 f91a 	bl	800e04c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de18:	4b59      	ldr	r3, [pc, #356]	; (800df80 <pvPortMalloc+0x184>)
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4013      	ands	r3, r2
 800de20:	2b00      	cmp	r3, #0
 800de22:	f040 8092 	bne.w	800df4a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d01f      	beq.n	800de6c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800de2c:	2208      	movs	r2, #8
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4413      	add	r3, r2
 800de32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f003 0307 	and.w	r3, r3, #7
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d016      	beq.n	800de6c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f023 0307 	bic.w	r3, r3, #7
 800de44:	3308      	adds	r3, #8
 800de46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f003 0307 	and.w	r3, r3, #7
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d00c      	beq.n	800de6c <pvPortMalloc+0x70>
	__asm volatile
 800de52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de56:	b672      	cpsid	i
 800de58:	f383 8811 	msr	BASEPRI, r3
 800de5c:	f3bf 8f6f 	isb	sy
 800de60:	f3bf 8f4f 	dsb	sy
 800de64:	b662      	cpsie	i
 800de66:	617b      	str	r3, [r7, #20]
}
 800de68:	bf00      	nop
 800de6a:	e7fe      	b.n	800de6a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d06b      	beq.n	800df4a <pvPortMalloc+0x14e>
 800de72:	4b44      	ldr	r3, [pc, #272]	; (800df84 <pvPortMalloc+0x188>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d866      	bhi.n	800df4a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de7c:	4b42      	ldr	r3, [pc, #264]	; (800df88 <pvPortMalloc+0x18c>)
 800de7e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de80:	4b41      	ldr	r3, [pc, #260]	; (800df88 <pvPortMalloc+0x18c>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de86:	e004      	b.n	800de92 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800de88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d903      	bls.n	800dea4 <pvPortMalloc+0xa8>
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d1f1      	bne.n	800de88 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dea4:	4b35      	ldr	r3, [pc, #212]	; (800df7c <pvPortMalloc+0x180>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deaa:	429a      	cmp	r2, r3
 800deac:	d04d      	beq.n	800df4a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800deae:	6a3b      	ldr	r3, [r7, #32]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2208      	movs	r2, #8
 800deb4:	4413      	add	r3, r2
 800deb6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800deb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	6a3b      	ldr	r3, [r7, #32]
 800debe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	685a      	ldr	r2, [r3, #4]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	1ad2      	subs	r2, r2, r3
 800dec8:	2308      	movs	r3, #8
 800deca:	005b      	lsls	r3, r3, #1
 800decc:	429a      	cmp	r2, r3
 800dece:	d921      	bls.n	800df14 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ded0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	4413      	add	r3, r2
 800ded6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	f003 0307 	and.w	r3, r3, #7
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d00c      	beq.n	800defc <pvPortMalloc+0x100>
	__asm volatile
 800dee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee6:	b672      	cpsid	i
 800dee8:	f383 8811 	msr	BASEPRI, r3
 800deec:	f3bf 8f6f 	isb	sy
 800def0:	f3bf 8f4f 	dsb	sy
 800def4:	b662      	cpsie	i
 800def6:	613b      	str	r3, [r7, #16]
}
 800def8:	bf00      	nop
 800defa:	e7fe      	b.n	800defa <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defe:	685a      	ldr	r2, [r3, #4]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	1ad2      	subs	r2, r2, r3
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df0e:	69b8      	ldr	r0, [r7, #24]
 800df10:	f000 f8fe 	bl	800e110 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df14:	4b1b      	ldr	r3, [pc, #108]	; (800df84 <pvPortMalloc+0x188>)
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	4a19      	ldr	r2, [pc, #100]	; (800df84 <pvPortMalloc+0x188>)
 800df20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df22:	4b18      	ldr	r3, [pc, #96]	; (800df84 <pvPortMalloc+0x188>)
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	4b19      	ldr	r3, [pc, #100]	; (800df8c <pvPortMalloc+0x190>)
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d203      	bcs.n	800df36 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df2e:	4b15      	ldr	r3, [pc, #84]	; (800df84 <pvPortMalloc+0x188>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a16      	ldr	r2, [pc, #88]	; (800df8c <pvPortMalloc+0x190>)
 800df34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df38:	685a      	ldr	r2, [r3, #4]
 800df3a:	4b11      	ldr	r3, [pc, #68]	; (800df80 <pvPortMalloc+0x184>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	431a      	orrs	r2, r3
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800df44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df46:	2200      	movs	r2, #0
 800df48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800df4a:	f7fe ff79 	bl	800ce40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	f003 0307 	and.w	r3, r3, #7
 800df54:	2b00      	cmp	r3, #0
 800df56:	d00c      	beq.n	800df72 <pvPortMalloc+0x176>
	__asm volatile
 800df58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df5c:	b672      	cpsid	i
 800df5e:	f383 8811 	msr	BASEPRI, r3
 800df62:	f3bf 8f6f 	isb	sy
 800df66:	f3bf 8f4f 	dsb	sy
 800df6a:	b662      	cpsie	i
 800df6c:	60fb      	str	r3, [r7, #12]
}
 800df6e:	bf00      	nop
 800df70:	e7fe      	b.n	800df70 <pvPortMalloc+0x174>
	return pvReturn;
 800df72:	69fb      	ldr	r3, [r7, #28]
}
 800df74:	4618      	mov	r0, r3
 800df76:	3728      	adds	r7, #40	; 0x28
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	20007ee4 	.word	0x20007ee4
 800df80:	20007ef0 	.word	0x20007ef0
 800df84:	20007ee8 	.word	0x20007ee8
 800df88:	20007edc 	.word	0x20007edc
 800df8c:	20007eec 	.word	0x20007eec

0800df90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b086      	sub	sp, #24
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d04c      	beq.n	800e03c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dfa2:	2308      	movs	r3, #8
 800dfa4:	425b      	negs	r3, r3
 800dfa6:	697a      	ldr	r2, [r7, #20]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	685a      	ldr	r2, [r3, #4]
 800dfb4:	4b23      	ldr	r3, [pc, #140]	; (800e044 <vPortFree+0xb4>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4013      	ands	r3, r2
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d10c      	bne.n	800dfd8 <vPortFree+0x48>
	__asm volatile
 800dfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfc2:	b672      	cpsid	i
 800dfc4:	f383 8811 	msr	BASEPRI, r3
 800dfc8:	f3bf 8f6f 	isb	sy
 800dfcc:	f3bf 8f4f 	dsb	sy
 800dfd0:	b662      	cpsie	i
 800dfd2:	60fb      	str	r3, [r7, #12]
}
 800dfd4:	bf00      	nop
 800dfd6:	e7fe      	b.n	800dfd6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d00c      	beq.n	800dffa <vPortFree+0x6a>
	__asm volatile
 800dfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe4:	b672      	cpsid	i
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	b662      	cpsie	i
 800dff4:	60bb      	str	r3, [r7, #8]
}
 800dff6:	bf00      	nop
 800dff8:	e7fe      	b.n	800dff8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	685a      	ldr	r2, [r3, #4]
 800dffe:	4b11      	ldr	r3, [pc, #68]	; (800e044 <vPortFree+0xb4>)
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4013      	ands	r3, r2
 800e004:	2b00      	cmp	r3, #0
 800e006:	d019      	beq.n	800e03c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d115      	bne.n	800e03c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	685a      	ldr	r2, [r3, #4]
 800e014:	4b0b      	ldr	r3, [pc, #44]	; (800e044 <vPortFree+0xb4>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	43db      	mvns	r3, r3
 800e01a:	401a      	ands	r2, r3
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e020:	f7fe ff00 	bl	800ce24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	685a      	ldr	r2, [r3, #4]
 800e028:	4b07      	ldr	r3, [pc, #28]	; (800e048 <vPortFree+0xb8>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4413      	add	r3, r2
 800e02e:	4a06      	ldr	r2, [pc, #24]	; (800e048 <vPortFree+0xb8>)
 800e030:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e032:	6938      	ldr	r0, [r7, #16]
 800e034:	f000 f86c 	bl	800e110 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e038:	f7fe ff02 	bl	800ce40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e03c:	bf00      	nop
 800e03e:	3718      	adds	r7, #24
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	20007ef0 	.word	0x20007ef0
 800e048:	20007ee8 	.word	0x20007ee8

0800e04c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e04c:	b480      	push	{r7}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e052:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800e056:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e058:	4b27      	ldr	r3, [pc, #156]	; (800e0f8 <prvHeapInit+0xac>)
 800e05a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f003 0307 	and.w	r3, r3, #7
 800e062:	2b00      	cmp	r3, #0
 800e064:	d00c      	beq.n	800e080 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	3307      	adds	r3, #7
 800e06a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f023 0307 	bic.w	r3, r3, #7
 800e072:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e074:	68ba      	ldr	r2, [r7, #8]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	4a1f      	ldr	r2, [pc, #124]	; (800e0f8 <prvHeapInit+0xac>)
 800e07c:	4413      	add	r3, r2
 800e07e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e084:	4a1d      	ldr	r2, [pc, #116]	; (800e0fc <prvHeapInit+0xb0>)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e08a:	4b1c      	ldr	r3, [pc, #112]	; (800e0fc <prvHeapInit+0xb0>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	4413      	add	r3, r2
 800e096:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e098:	2208      	movs	r2, #8
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	1a9b      	subs	r3, r3, r2
 800e09e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f023 0307 	bic.w	r3, r3, #7
 800e0a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	4a15      	ldr	r2, [pc, #84]	; (800e100 <prvHeapInit+0xb4>)
 800e0ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e0ae:	4b14      	ldr	r3, [pc, #80]	; (800e100 <prvHeapInit+0xb4>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e0b6:	4b12      	ldr	r3, [pc, #72]	; (800e100 <prvHeapInit+0xb4>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	1ad2      	subs	r2, r2, r3
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e0cc:	4b0c      	ldr	r3, [pc, #48]	; (800e100 <prvHeapInit+0xb4>)
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	4a0a      	ldr	r2, [pc, #40]	; (800e104 <prvHeapInit+0xb8>)
 800e0da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	4a09      	ldr	r2, [pc, #36]	; (800e108 <prvHeapInit+0xbc>)
 800e0e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e0e4:	4b09      	ldr	r3, [pc, #36]	; (800e10c <prvHeapInit+0xc0>)
 800e0e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e0ea:	601a      	str	r2, [r3, #0]
}
 800e0ec:	bf00      	nop
 800e0ee:	3714      	adds	r7, #20
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr
 800e0f8:	200006dc 	.word	0x200006dc
 800e0fc:	20007edc 	.word	0x20007edc
 800e100:	20007ee4 	.word	0x20007ee4
 800e104:	20007eec 	.word	0x20007eec
 800e108:	20007ee8 	.word	0x20007ee8
 800e10c:	20007ef0 	.word	0x20007ef0

0800e110 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e110:	b480      	push	{r7}
 800e112:	b085      	sub	sp, #20
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e118:	4b28      	ldr	r3, [pc, #160]	; (800e1bc <prvInsertBlockIntoFreeList+0xac>)
 800e11a:	60fb      	str	r3, [r7, #12]
 800e11c:	e002      	b.n	800e124 <prvInsertBlockIntoFreeList+0x14>
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	60fb      	str	r3, [r7, #12]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d8f7      	bhi.n	800e11e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	68ba      	ldr	r2, [r7, #8]
 800e138:	4413      	add	r3, r2
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d108      	bne.n	800e152 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	685a      	ldr	r2, [r3, #4]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	441a      	add	r2, r3
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	441a      	add	r2, r3
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	429a      	cmp	r2, r3
 800e164:	d118      	bne.n	800e198 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	4b15      	ldr	r3, [pc, #84]	; (800e1c0 <prvInsertBlockIntoFreeList+0xb0>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d00d      	beq.n	800e18e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	685a      	ldr	r2, [r3, #4]
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	441a      	add	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	601a      	str	r2, [r3, #0]
 800e18c:	e008      	b.n	800e1a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e18e:	4b0c      	ldr	r3, [pc, #48]	; (800e1c0 <prvInsertBlockIntoFreeList+0xb0>)
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	601a      	str	r2, [r3, #0]
 800e196:	e003      	b.n	800e1a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d002      	beq.n	800e1ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	687a      	ldr	r2, [r7, #4]
 800e1ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1ae:	bf00      	nop
 800e1b0:	3714      	adds	r7, #20
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop
 800e1bc:	20007edc 	.word	0x20007edc
 800e1c0:	20007ee4 	.word	0x20007ee4

0800e1c4 <__libc_init_array>:
 800e1c4:	b570      	push	{r4, r5, r6, lr}
 800e1c6:	4d0d      	ldr	r5, [pc, #52]	; (800e1fc <__libc_init_array+0x38>)
 800e1c8:	4c0d      	ldr	r4, [pc, #52]	; (800e200 <__libc_init_array+0x3c>)
 800e1ca:	1b64      	subs	r4, r4, r5
 800e1cc:	10a4      	asrs	r4, r4, #2
 800e1ce:	2600      	movs	r6, #0
 800e1d0:	42a6      	cmp	r6, r4
 800e1d2:	d109      	bne.n	800e1e8 <__libc_init_array+0x24>
 800e1d4:	4d0b      	ldr	r5, [pc, #44]	; (800e204 <__libc_init_array+0x40>)
 800e1d6:	4c0c      	ldr	r4, [pc, #48]	; (800e208 <__libc_init_array+0x44>)
 800e1d8:	f000 f8f6 	bl	800e3c8 <_init>
 800e1dc:	1b64      	subs	r4, r4, r5
 800e1de:	10a4      	asrs	r4, r4, #2
 800e1e0:	2600      	movs	r6, #0
 800e1e2:	42a6      	cmp	r6, r4
 800e1e4:	d105      	bne.n	800e1f2 <__libc_init_array+0x2e>
 800e1e6:	bd70      	pop	{r4, r5, r6, pc}
 800e1e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1ec:	4798      	blx	r3
 800e1ee:	3601      	adds	r6, #1
 800e1f0:	e7ee      	b.n	800e1d0 <__libc_init_array+0xc>
 800e1f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1f6:	4798      	blx	r3
 800e1f8:	3601      	adds	r6, #1
 800e1fa:	e7f2      	b.n	800e1e2 <__libc_init_array+0x1e>
 800e1fc:	08034698 	.word	0x08034698
 800e200:	08034698 	.word	0x08034698
 800e204:	08034698 	.word	0x08034698
 800e208:	0803469c 	.word	0x0803469c

0800e20c <__retarget_lock_acquire_recursive>:
 800e20c:	4770      	bx	lr

0800e20e <__retarget_lock_release_recursive>:
 800e20e:	4770      	bx	lr

0800e210 <memcpy>:
 800e210:	440a      	add	r2, r1
 800e212:	4291      	cmp	r1, r2
 800e214:	f100 33ff 	add.w	r3, r0, #4294967295
 800e218:	d100      	bne.n	800e21c <memcpy+0xc>
 800e21a:	4770      	bx	lr
 800e21c:	b510      	push	{r4, lr}
 800e21e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e222:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e226:	4291      	cmp	r1, r2
 800e228:	d1f9      	bne.n	800e21e <memcpy+0xe>
 800e22a:	bd10      	pop	{r4, pc}

0800e22c <memset>:
 800e22c:	4402      	add	r2, r0
 800e22e:	4603      	mov	r3, r0
 800e230:	4293      	cmp	r3, r2
 800e232:	d100      	bne.n	800e236 <memset+0xa>
 800e234:	4770      	bx	lr
 800e236:	f803 1b01 	strb.w	r1, [r3], #1
 800e23a:	e7f9      	b.n	800e230 <memset+0x4>

0800e23c <cleanup_glue>:
 800e23c:	b538      	push	{r3, r4, r5, lr}
 800e23e:	460c      	mov	r4, r1
 800e240:	6809      	ldr	r1, [r1, #0]
 800e242:	4605      	mov	r5, r0
 800e244:	b109      	cbz	r1, 800e24a <cleanup_glue+0xe>
 800e246:	f7ff fff9 	bl	800e23c <cleanup_glue>
 800e24a:	4621      	mov	r1, r4
 800e24c:	4628      	mov	r0, r5
 800e24e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e252:	f000 b869 	b.w	800e328 <_free_r>
	...

0800e258 <_reclaim_reent>:
 800e258:	4b2c      	ldr	r3, [pc, #176]	; (800e30c <_reclaim_reent+0xb4>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4283      	cmp	r3, r0
 800e25e:	b570      	push	{r4, r5, r6, lr}
 800e260:	4604      	mov	r4, r0
 800e262:	d051      	beq.n	800e308 <_reclaim_reent+0xb0>
 800e264:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e266:	b143      	cbz	r3, 800e27a <_reclaim_reent+0x22>
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d14a      	bne.n	800e304 <_reclaim_reent+0xac>
 800e26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e270:	6819      	ldr	r1, [r3, #0]
 800e272:	b111      	cbz	r1, 800e27a <_reclaim_reent+0x22>
 800e274:	4620      	mov	r0, r4
 800e276:	f000 f857 	bl	800e328 <_free_r>
 800e27a:	6961      	ldr	r1, [r4, #20]
 800e27c:	b111      	cbz	r1, 800e284 <_reclaim_reent+0x2c>
 800e27e:	4620      	mov	r0, r4
 800e280:	f000 f852 	bl	800e328 <_free_r>
 800e284:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e286:	b111      	cbz	r1, 800e28e <_reclaim_reent+0x36>
 800e288:	4620      	mov	r0, r4
 800e28a:	f000 f84d 	bl	800e328 <_free_r>
 800e28e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e290:	b111      	cbz	r1, 800e298 <_reclaim_reent+0x40>
 800e292:	4620      	mov	r0, r4
 800e294:	f000 f848 	bl	800e328 <_free_r>
 800e298:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e29a:	b111      	cbz	r1, 800e2a2 <_reclaim_reent+0x4a>
 800e29c:	4620      	mov	r0, r4
 800e29e:	f000 f843 	bl	800e328 <_free_r>
 800e2a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e2a4:	b111      	cbz	r1, 800e2ac <_reclaim_reent+0x54>
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f000 f83e 	bl	800e328 <_free_r>
 800e2ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e2ae:	b111      	cbz	r1, 800e2b6 <_reclaim_reent+0x5e>
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	f000 f839 	bl	800e328 <_free_r>
 800e2b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e2b8:	b111      	cbz	r1, 800e2c0 <_reclaim_reent+0x68>
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	f000 f834 	bl	800e328 <_free_r>
 800e2c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2c2:	b111      	cbz	r1, 800e2ca <_reclaim_reent+0x72>
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f000 f82f 	bl	800e328 <_free_r>
 800e2ca:	69a3      	ldr	r3, [r4, #24]
 800e2cc:	b1e3      	cbz	r3, 800e308 <_reclaim_reent+0xb0>
 800e2ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	4798      	blx	r3
 800e2d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e2d6:	b1b9      	cbz	r1, 800e308 <_reclaim_reent+0xb0>
 800e2d8:	4620      	mov	r0, r4
 800e2da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e2de:	f7ff bfad 	b.w	800e23c <cleanup_glue>
 800e2e2:	5949      	ldr	r1, [r1, r5]
 800e2e4:	b941      	cbnz	r1, 800e2f8 <_reclaim_reent+0xa0>
 800e2e6:	3504      	adds	r5, #4
 800e2e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2ea:	2d80      	cmp	r5, #128	; 0x80
 800e2ec:	68d9      	ldr	r1, [r3, #12]
 800e2ee:	d1f8      	bne.n	800e2e2 <_reclaim_reent+0x8a>
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f000 f819 	bl	800e328 <_free_r>
 800e2f6:	e7ba      	b.n	800e26e <_reclaim_reent+0x16>
 800e2f8:	680e      	ldr	r6, [r1, #0]
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	f000 f814 	bl	800e328 <_free_r>
 800e300:	4631      	mov	r1, r6
 800e302:	e7ef      	b.n	800e2e4 <_reclaim_reent+0x8c>
 800e304:	2500      	movs	r5, #0
 800e306:	e7ef      	b.n	800e2e8 <_reclaim_reent+0x90>
 800e308:	bd70      	pop	{r4, r5, r6, pc}
 800e30a:	bf00      	nop
 800e30c:	20000050 	.word	0x20000050

0800e310 <__malloc_lock>:
 800e310:	4801      	ldr	r0, [pc, #4]	; (800e318 <__malloc_lock+0x8>)
 800e312:	f7ff bf7b 	b.w	800e20c <__retarget_lock_acquire_recursive>
 800e316:	bf00      	nop
 800e318:	20008e24 	.word	0x20008e24

0800e31c <__malloc_unlock>:
 800e31c:	4801      	ldr	r0, [pc, #4]	; (800e324 <__malloc_unlock+0x8>)
 800e31e:	f7ff bf76 	b.w	800e20e <__retarget_lock_release_recursive>
 800e322:	bf00      	nop
 800e324:	20008e24 	.word	0x20008e24

0800e328 <_free_r>:
 800e328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e32a:	2900      	cmp	r1, #0
 800e32c:	d048      	beq.n	800e3c0 <_free_r+0x98>
 800e32e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e332:	9001      	str	r0, [sp, #4]
 800e334:	2b00      	cmp	r3, #0
 800e336:	f1a1 0404 	sub.w	r4, r1, #4
 800e33a:	bfb8      	it	lt
 800e33c:	18e4      	addlt	r4, r4, r3
 800e33e:	f7ff ffe7 	bl	800e310 <__malloc_lock>
 800e342:	4a20      	ldr	r2, [pc, #128]	; (800e3c4 <_free_r+0x9c>)
 800e344:	9801      	ldr	r0, [sp, #4]
 800e346:	6813      	ldr	r3, [r2, #0]
 800e348:	4615      	mov	r5, r2
 800e34a:	b933      	cbnz	r3, 800e35a <_free_r+0x32>
 800e34c:	6063      	str	r3, [r4, #4]
 800e34e:	6014      	str	r4, [r2, #0]
 800e350:	b003      	add	sp, #12
 800e352:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e356:	f7ff bfe1 	b.w	800e31c <__malloc_unlock>
 800e35a:	42a3      	cmp	r3, r4
 800e35c:	d90b      	bls.n	800e376 <_free_r+0x4e>
 800e35e:	6821      	ldr	r1, [r4, #0]
 800e360:	1862      	adds	r2, r4, r1
 800e362:	4293      	cmp	r3, r2
 800e364:	bf04      	itt	eq
 800e366:	681a      	ldreq	r2, [r3, #0]
 800e368:	685b      	ldreq	r3, [r3, #4]
 800e36a:	6063      	str	r3, [r4, #4]
 800e36c:	bf04      	itt	eq
 800e36e:	1852      	addeq	r2, r2, r1
 800e370:	6022      	streq	r2, [r4, #0]
 800e372:	602c      	str	r4, [r5, #0]
 800e374:	e7ec      	b.n	800e350 <_free_r+0x28>
 800e376:	461a      	mov	r2, r3
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	b10b      	cbz	r3, 800e380 <_free_r+0x58>
 800e37c:	42a3      	cmp	r3, r4
 800e37e:	d9fa      	bls.n	800e376 <_free_r+0x4e>
 800e380:	6811      	ldr	r1, [r2, #0]
 800e382:	1855      	adds	r5, r2, r1
 800e384:	42a5      	cmp	r5, r4
 800e386:	d10b      	bne.n	800e3a0 <_free_r+0x78>
 800e388:	6824      	ldr	r4, [r4, #0]
 800e38a:	4421      	add	r1, r4
 800e38c:	1854      	adds	r4, r2, r1
 800e38e:	42a3      	cmp	r3, r4
 800e390:	6011      	str	r1, [r2, #0]
 800e392:	d1dd      	bne.n	800e350 <_free_r+0x28>
 800e394:	681c      	ldr	r4, [r3, #0]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	6053      	str	r3, [r2, #4]
 800e39a:	4421      	add	r1, r4
 800e39c:	6011      	str	r1, [r2, #0]
 800e39e:	e7d7      	b.n	800e350 <_free_r+0x28>
 800e3a0:	d902      	bls.n	800e3a8 <_free_r+0x80>
 800e3a2:	230c      	movs	r3, #12
 800e3a4:	6003      	str	r3, [r0, #0]
 800e3a6:	e7d3      	b.n	800e350 <_free_r+0x28>
 800e3a8:	6825      	ldr	r5, [r4, #0]
 800e3aa:	1961      	adds	r1, r4, r5
 800e3ac:	428b      	cmp	r3, r1
 800e3ae:	bf04      	itt	eq
 800e3b0:	6819      	ldreq	r1, [r3, #0]
 800e3b2:	685b      	ldreq	r3, [r3, #4]
 800e3b4:	6063      	str	r3, [r4, #4]
 800e3b6:	bf04      	itt	eq
 800e3b8:	1949      	addeq	r1, r1, r5
 800e3ba:	6021      	streq	r1, [r4, #0]
 800e3bc:	6054      	str	r4, [r2, #4]
 800e3be:	e7c7      	b.n	800e350 <_free_r+0x28>
 800e3c0:	b003      	add	sp, #12
 800e3c2:	bd30      	pop	{r4, r5, pc}
 800e3c4:	20007ef4 	.word	0x20007ef4

0800e3c8 <_init>:
 800e3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3ca:	bf00      	nop
 800e3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3ce:	bc08      	pop	{r3}
 800e3d0:	469e      	mov	lr, r3
 800e3d2:	4770      	bx	lr

0800e3d4 <_fini>:
 800e3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3d6:	bf00      	nop
 800e3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3da:	bc08      	pop	{r3}
 800e3dc:	469e      	mov	lr, r3
 800e3de:	4770      	bx	lr
