
II2_Dames.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d690  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000262c0  0800d860  0800d860  0001d860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08033b20  08033b20  000500b4  2**0
                  CONTENTS
  4 .ARM          00000008  08033b20  08033b20  00043b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08033b28  08033b28  000500b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033b28  08033b28  00043b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08033b2c  08033b2c  00043b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08033b30  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000877c  200000b4  08033be4  000500b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008830  08033be4  00058830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033311  00000000  00000000  000500e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d51  00000000  00000000  000833f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002660  00000000  00000000  00089148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002408  00000000  00000000  0008b7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e830  00000000  00000000  0008dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f6a9  00000000  00000000  000bc3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117912  00000000  00000000  000eba89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0020339b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a60c  00000000  00000000  002033f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d848 	.word	0x0800d848

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800d848 	.word	0x0800d848

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000d0 	.word	0x200000d0
 8000538:	20000184 	.word	0x20000184

0800053c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000546:	20c8      	movs	r0, #200	; 0xc8
 8000548:	f002 f862 	bl	8002610 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800054c:	f000 fa7a 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000580:	2300      	movs	r3, #0
 8000582:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000584:	f000 fa5e 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e010      	b.n	80005b0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	21a8      	movs	r1, #168	; 0xa8
 8000594:	4618      	mov	r0, r3
 8000596:	f002 f81d 	bl	80025d4 <TS_IO_Read>
 800059a:	4603      	mov	r3, r0
 800059c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b51      	cmp	r3, #81	; 0x51
 80005a4:	d101      	bne.n	80005aa <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d802      	bhi.n	80005bc <ft5336_ReadID+0x4e>
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e8      	beq.n	800058e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fa44 	bl	8000a64 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f932 	bl	8000848 <ft5336_TS_DisableIT>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f001 ffe7 	bl	80025d4 <TS_IO_Read>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b05      	cmp	r3, #5
 800061c:	d901      	bls.n	8000622 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 8000628:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	b2db      	uxtb	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000384 	.word	0x20000384

08000640 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000664:	789a      	ldrb	r2, [r3, #2]
 8000666:	4b6c      	ldr	r3, [pc, #432]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	429a      	cmp	r2, r3
 800066c:	f080 80cf 	bcs.w	800080e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000670:	4b69      	ldr	r3, [pc, #420]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d871      	bhi.n	800075c <ft5336_TS_GetXY+0x11c>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <ft5336_TS_GetXY+0x40>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	080006a9 	.word	0x080006a9
 8000684:	080006bb 	.word	0x080006bb
 8000688:	080006cd 	.word	0x080006cd
 800068c:	080006df 	.word	0x080006df
 8000690:	080006f1 	.word	0x080006f1
 8000694:	08000703 	.word	0x08000703
 8000698:	08000715 	.word	0x08000715
 800069c:	08000727 	.word	0x08000727
 80006a0:	08000739 	.word	0x08000739
 80006a4:	0800074b 	.word	0x0800074b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006a8:	2304      	movs	r3, #4
 80006aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006ac:	2303      	movs	r3, #3
 80006ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b0:	2306      	movs	r3, #6
 80006b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006b4:	2305      	movs	r3, #5
 80006b6:	753b      	strb	r3, [r7, #20]
      break;
 80006b8:	e051      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ba:	230a      	movs	r3, #10
 80006bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006be:	2309      	movs	r3, #9
 80006c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006c2:	230c      	movs	r3, #12
 80006c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006c6:	230b      	movs	r3, #11
 80006c8:	753b      	strb	r3, [r7, #20]
      break;
 80006ca:	e048      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006cc:	2310      	movs	r3, #16
 80006ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d0:	230f      	movs	r3, #15
 80006d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006d4:	2312      	movs	r3, #18
 80006d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006d8:	2311      	movs	r3, #17
 80006da:	753b      	strb	r3, [r7, #20]
      break;
 80006dc:	e03f      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006de:	2316      	movs	r3, #22
 80006e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006e2:	2315      	movs	r3, #21
 80006e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006e6:	2318      	movs	r3, #24
 80006e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006ea:	2317      	movs	r3, #23
 80006ec:	753b      	strb	r3, [r7, #20]
      break;
 80006ee:	e036      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f0:	231c      	movs	r3, #28
 80006f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006f4:	231b      	movs	r3, #27
 80006f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006f8:	231e      	movs	r3, #30
 80006fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006fc:	231d      	movs	r3, #29
 80006fe:	753b      	strb	r3, [r7, #20]
      break;
 8000700:	e02d      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000702:	2322      	movs	r3, #34	; 0x22
 8000704:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000706:	2321      	movs	r3, #33	; 0x21
 8000708:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800070a:	2324      	movs	r3, #36	; 0x24
 800070c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800070e:	2323      	movs	r3, #35	; 0x23
 8000710:	753b      	strb	r3, [r7, #20]
      break;
 8000712:	e024      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000714:	2328      	movs	r3, #40	; 0x28
 8000716:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000718:	2327      	movs	r3, #39	; 0x27
 800071a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800071c:	232a      	movs	r3, #42	; 0x2a
 800071e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000720:	2329      	movs	r3, #41	; 0x29
 8000722:	753b      	strb	r3, [r7, #20]
      break;
 8000724:	e01b      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000726:	232e      	movs	r3, #46	; 0x2e
 8000728:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800072a:	232d      	movs	r3, #45	; 0x2d
 800072c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800072e:	2330      	movs	r3, #48	; 0x30
 8000730:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000732:	232f      	movs	r3, #47	; 0x2f
 8000734:	753b      	strb	r3, [r7, #20]
      break;
 8000736:	e012      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000738:	2334      	movs	r3, #52	; 0x34
 800073a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800073c:	2333      	movs	r3, #51	; 0x33
 800073e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000740:	2336      	movs	r3, #54	; 0x36
 8000742:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000744:	2335      	movs	r3, #53	; 0x35
 8000746:	753b      	strb	r3, [r7, #20]
      break;
 8000748:	e009      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800074a:	233a      	movs	r3, #58	; 0x3a
 800074c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800074e:	2339      	movs	r3, #57	; 0x39
 8000750:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000752:	233c      	movs	r3, #60	; 0x3c
 8000754:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000756:	233b      	movs	r3, #59	; 0x3b
 8000758:	753b      	strb	r3, [r7, #20]
      break;
 800075a:	e000      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800075c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	7dfa      	ldrb	r2, [r7, #23]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f001 ff34 	bl	80025d4 <TS_IO_Read>
 800076c:	4603      	mov	r3, r0
 800076e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 8000778:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	7dba      	ldrb	r2, [r7, #22]
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f001 ff26 	bl	80025d4 <TS_IO_Read>
 8000788:	4603      	mov	r3, r0
 800078a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007a6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	7d7a      	ldrb	r2, [r7, #21]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 ff0b 	bl	80025d4 <TS_IO_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007c2:	7cfb      	ldrb	r3, [r7, #19]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ca:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	7d3a      	ldrb	r2, [r7, #20]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fefd 	bl	80025d4 <TS_IO_Read>
 80007da:	4603      	mov	r3, r0
 80007dc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007de:	7cfb      	ldrb	r3, [r7, #19]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007f8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007fc:	881a      	ldrh	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	3301      	adds	r3, #1
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 800080c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000384 	.word	0x20000384
 800081c:	20000388 	.word	0x20000388

08000820 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	21a4      	movs	r1, #164	; 0xa4
 800083a:	4618      	mov	r0, r3
 800083c:	f001 feb0 	bl	80025a0 <TS_IO_Write>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	21a4      	movs	r1, #164	; 0xa4
 8000862:	4618      	mov	r0, r3
 8000864:	f001 fe9c 	bl	80025a0 <TS_IO_Write>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	6039      	str	r1, [r7, #0]
 80008a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2101      	movs	r1, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fe8d 	bl	80025d4 <TS_IO_Read>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	4603      	mov	r3, r0
 80008de:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80008f0:	4b4d      	ldr	r3, [pc, #308]	; (8000a28 <ft5336_TS_GetTouchInfo+0x158>)
 80008f2:	785b      	ldrb	r3, [r3, #1]
 80008f4:	461a      	mov	r2, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4293      	cmp	r3, r2
 80008fa:	f080 8090 	bcs.w	8000a1e <ft5336_TS_GetTouchInfo+0x14e>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b09      	cmp	r3, #9
 8000902:	d85d      	bhi.n	80009c0 <ft5336_TS_GetTouchInfo+0xf0>
 8000904:	a201      	add	r2, pc, #4	; (adr r2, 800090c <ft5336_TS_GetTouchInfo+0x3c>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	08000935 	.word	0x08000935
 8000910:	08000943 	.word	0x08000943
 8000914:	08000951 	.word	0x08000951
 8000918:	0800095f 	.word	0x0800095f
 800091c:	0800096d 	.word	0x0800096d
 8000920:	0800097b 	.word	0x0800097b
 8000924:	08000989 	.word	0x08000989
 8000928:	08000997 	.word	0x08000997
 800092c:	080009a5 	.word	0x080009a5
 8000930:	080009b3 	.word	0x080009b3
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000934:	2303      	movs	r3, #3
 8000936:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000938:	2307      	movs	r3, #7
 800093a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800093c:	2308      	movs	r3, #8
 800093e:	757b      	strb	r3, [r7, #21]
      break;
 8000940:	e03f      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000942:	2309      	movs	r3, #9
 8000944:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000946:	230d      	movs	r3, #13
 8000948:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800094a:	230e      	movs	r3, #14
 800094c:	757b      	strb	r3, [r7, #21]
      break;
 800094e:	e038      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000950:	230f      	movs	r3, #15
 8000952:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000954:	2313      	movs	r3, #19
 8000956:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000958:	2314      	movs	r3, #20
 800095a:	757b      	strb	r3, [r7, #21]
      break;
 800095c:	e031      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800095e:	2315      	movs	r3, #21
 8000960:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000962:	2319      	movs	r3, #25
 8000964:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000966:	231a      	movs	r3, #26
 8000968:	757b      	strb	r3, [r7, #21]
      break;
 800096a:	e02a      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 800096c:	231b      	movs	r3, #27
 800096e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000970:	231f      	movs	r3, #31
 8000972:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000974:	2320      	movs	r3, #32
 8000976:	757b      	strb	r3, [r7, #21]
      break;
 8000978:	e023      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800097a:	2321      	movs	r3, #33	; 0x21
 800097c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800097e:	2325      	movs	r3, #37	; 0x25
 8000980:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000982:	2326      	movs	r3, #38	; 0x26
 8000984:	757b      	strb	r3, [r7, #21]
      break;
 8000986:	e01c      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000988:	2327      	movs	r3, #39	; 0x27
 800098a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 800098c:	232b      	movs	r3, #43	; 0x2b
 800098e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000990:	232c      	movs	r3, #44	; 0x2c
 8000992:	757b      	strb	r3, [r7, #21]
      break;
 8000994:	e015      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000996:	232d      	movs	r3, #45	; 0x2d
 8000998:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800099a:	2331      	movs	r3, #49	; 0x31
 800099c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800099e:	2332      	movs	r3, #50	; 0x32
 80009a0:	757b      	strb	r3, [r7, #21]
      break;
 80009a2:	e00e      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80009a4:	2333      	movs	r3, #51	; 0x33
 80009a6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80009a8:	2337      	movs	r3, #55	; 0x37
 80009aa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80009ac:	2338      	movs	r3, #56	; 0x38
 80009ae:	757b      	strb	r3, [r7, #21]
      break;
 80009b0:	e007      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80009b2:	2339      	movs	r3, #57	; 0x39
 80009b4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80009b6:	233d      	movs	r3, #61	; 0x3d
 80009b8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80009ba:	233e      	movs	r3, #62	; 0x3e
 80009bc:	757b      	strb	r3, [r7, #21]
      break;
 80009be:	e000      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80009c0:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80009c2:	89fb      	ldrh	r3, [r7, #14]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	7dfa      	ldrb	r2, [r7, #23]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fe02 	bl	80025d4 <TS_IO_Read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80009d4:	7d3b      	ldrb	r3, [r7, #20]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	119b      	asrs	r3, r3, #6
 80009da:	f003 0203 	and.w	r2, r3, #3
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	7dba      	ldrb	r2, [r7, #22]
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 fdf2 	bl	80025d4 <TS_IO_Read>
 80009f0:	4603      	mov	r3, r0
 80009f2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80009f4:	7d3b      	ldrb	r3, [r7, #20]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	7d7a      	ldrb	r2, [r7, #21]
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fde4 	bl	80025d4 <TS_IO_Read>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a10:	7d3b      	ldrb	r3, [r7, #20]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	111b      	asrs	r3, r3, #4
 8000a16:	f003 0204 	and.w	r2, r3, #4
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000384 	.word	0x20000384

08000a2c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000384 	.word	0x20000384

08000a44 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000a48:	f7ff fff0 	bl	8000a2c <ft5336_Get_I2C_InitializedStatus>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d104      	bne.n	8000a5c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000a52:	f001 fd9b 	bl	800258c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000a56:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000384 	.word	0x20000384

08000a64 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a8a:	f3bf 8f6f 	isb	sy
}
 8000a8e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a98:	f3bf 8f4f 	dsb	sy
}
 8000a9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a9e:	f3bf 8f6f 	isb	sy
}
 8000aa2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab0:	f3bf 8f4f 	dsb	sy
}
 8000ab4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab6:	f3bf 8f6f 	isb	sy
}
 8000aba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ada:	f3bf 8f4f 	dsb	sy
}
 8000ade:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ae6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	0b5b      	lsrs	r3, r3, #13
 8000aec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000af0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000afa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	015a      	lsls	r2, r3, #5
 8000b00:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b04:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b0a:	4911      	ldr	r1, [pc, #68]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1e5a      	subs	r2, r3, #1
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1ef      	bne.n	8000afc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	60fa      	str	r2, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1e5      	bne.n	8000af2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b26:	f3bf 8f4f 	dsb	sy
}
 8000b2a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b36:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b38:	f3bf 8f4f 	dsb	sy
}
 8000b3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b3e:	f3bf 8f6f 	isb	sy
}
 8000b42:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b5b0      	push	{r4, r5, r7, lr}
 8000b56:	b0a8      	sub	sp, #160	; 0xa0
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000b74:	f7ff ff84 	bl	8000a80 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000b78:	f7ff ffa8 	bl	8000acc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7c:	f003 fe74 	bl	8004868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b80:	f000 f908 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b84:	f000 fed0 	bl	8001928 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000b88:	f000 f9c8 	bl	8000f1c <MX_ADC3_Init>
  MX_DMA2D_Init();
 8000b8c:	f000 fa42 	bl	8001014 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000b90:	f000 fe7a 	bl	8001888 <MX_FMC_Init>
  MX_I2C1_Init();
 8000b94:	f000 fa70 	bl	8001078 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000b98:	f000 faae 	bl	80010f8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000b9c:	f000 faec 	bl	8001178 <MX_LTDC_Init>
  MX_RTC_Init();
 8000ba0:	f000 fb6c 	bl	800127c <MX_RTC_Init>
  MX_SPI2_Init();
 8000ba4:	f000 fc10 	bl	80013c8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000ba8:	f000 fc4c 	bl	8001444 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bac:	f000 fc9e 	bl	80014ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bb0:	f000 fcea 	bl	8001588 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000bb4:	f000 fd36 	bl	8001624 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000bb8:	f000 fd82 	bl	80016c0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000bbc:	f000 fe04 	bl	80017c8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000bc0:	f000 fe32 	bl	8001828 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000bc4:	f000 f958 	bl	8000e78 <MX_ADC1_Init>
  MX_DAC_Init();
 8000bc8:	f000 f9fa 	bl	8000fc0 <MX_DAC_Init>
  MX_UART7_Init();
 8000bcc:	f000 fdcc 	bl	8001768 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000bd0:	f001 fd2a 	bl	8002628 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000bd4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f001 fdbd 	bl	8002758 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000bde:	f001 fd93 	bl	8002708 <BSP_LCD_GetXSize>
 8000be2:	4604      	mov	r4, r0
 8000be4:	f001 fda4 	bl	8002730 <BSP_LCD_GetYSize>
 8000be8:	4603      	mov	r3, r0
 8000bea:	fb03 f304 	mul.w	r3, r3, r4
 8000bee:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f001 fdae 	bl	8002758 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8000bfc:	f002 f972 	bl	8002ee4 <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 8000c00:	2000      	movs	r0, #0
 8000c02:	f001 fe09 	bl	8002818 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000c06:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000c0a:	f001 fe61 	bl	80028d0 <BSP_LCD_Clear>
    //BSP_LCD_DrawBitmap(0,0,(uint8_t*)HorombeRGB565_bmp);
    BSP_LCD_DrawBitmap(0,0,(uint8_t*)damier_bmp);
 8000c0e:	4a50      	ldr	r2, [pc, #320]	; (8000d50 <main+0x1fc>)
 8000c10:	2100      	movs	r1, #0
 8000c12:	2000      	movs	r0, #0
 8000c14:	f002 f814 	bl	8002c40 <BSP_LCD_DrawBitmap>
    BSP_LCD_SelectLayer(1);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f001 fdfd 	bl	8002818 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(0);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f001 fe56 	bl	80028d0 <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font12);
 8000c24:	484b      	ldr	r0, [pc, #300]	; (8000d54 <main+0x200>)
 8000c26:	f001 fe39 	bl	800289c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2e:	f001 fe03 	bl	8002838 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8000c32:	4849      	ldr	r0, [pc, #292]	; (8000d58 <main+0x204>)
 8000c34:	f001 fe18 	bl	8002868 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000c38:	f001 fd66 	bl	8002708 <BSP_LCD_GetXSize>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b29c      	uxth	r4, r3
 8000c40:	f001 fd76 	bl	8002730 <BSP_LCD_GetYSize>
 8000c44:	4603      	mov	r3, r0
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	f002 fca4 	bl	8003598 <BSP_TS_Init>
    BSP_TS_ITConfig();
 8000c50:	f002 fce2 	bl	8003618 <BSP_TS_ITConfig>

	// Init potentiometre
	  sConfig.Channel = ADC_CHANNEL_6;
 8000c54:	2306      	movs	r3, #6
 8000c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000c5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000c5e:	4619      	mov	r1, r3
 8000c60:	483e      	ldr	r0, [pc, #248]	; (8000d5c <main+0x208>)
 8000c62:	f003 ff6d 	bl	8004b40 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000c66:	483d      	ldr	r0, [pc, #244]	; (8000d5c <main+0x208>)
 8000c68:	f003 fe9c 	bl	80049a4 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
    mutexEcran = xSemaphoreCreateMutex();
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f00a fc7a 	bl	800b566 <xQueueCreateMutex>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <main+0x20c>)
 8000c76:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueTS */
  osMessageQDef(myQueueTS, 3, uint16_t);
 8000c78:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <main+0x210>)
 8000c7a:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8000c7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueTSHandle = osMessageCreate(osMessageQ(myQueueTS), NULL);
 8000c84:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00a fa27 	bl	800b0de <osMessageCreate>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4a35      	ldr	r2, [pc, #212]	; (8000d68 <main+0x214>)
 8000c94:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueueTempo */
  osMessageQDef(myQueueTempo, 16, uint8_t);
 8000c96:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <main+0x218>)
 8000c98:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueTempoHandle = osMessageCreate(osMessageQ(myQueueTempo), NULL);
 8000ca2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f00a fa18 	bl	800b0de <osMessageCreate>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a2f      	ldr	r2, [pc, #188]	; (8000d70 <main+0x21c>)
 8000cb2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task_init */
  osThreadDef(task_init, fonction_init, osPriorityAboveNormal, 0, 1024);
 8000cb4:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <main+0x220>)
 8000cb6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000cba:	461d      	mov	r5, r3
 8000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_initHandle = osThreadCreate(osThread(task_init), NULL);
 8000cc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f00a f9b9 	bl	800b046 <osThreadCreate>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4a28      	ldr	r2, [pc, #160]	; (8000d78 <main+0x224>)
 8000cd8:	6013      	str	r3, [r2, #0]

  /* definition and creation of affichage */
  osThreadDef(affichage, fonction_affichage, osPriorityNormal, 0, 1024);
 8000cda:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <main+0x228>)
 8000cdc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000ce0:	461d      	mov	r5, r3
 8000ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  affichageHandle = osThreadCreate(osThread(affichage), NULL);
 8000cee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f00a f9a6 	bl	800b046 <osThreadCreate>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4a20      	ldr	r2, [pc, #128]	; (8000d80 <main+0x22c>)
 8000cfe:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_select */
  osThreadDef(task_select, fonction_select, osPriorityIdle, 0, 256);
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <main+0x230>)
 8000d02:	f107 041c 	add.w	r4, r7, #28
 8000d06:	461d      	mov	r5, r3
 8000d08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_selectHandle = osThreadCreate(osThread(task_select), NULL);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f00a f993 	bl	800b046 <osThreadCreate>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <main+0x234>)
 8000d24:	6013      	str	r3, [r2, #0]

  /* definition and creation of temporisation */
  osThreadDef(temporisation, fonction_temporisation, osPriorityHigh, 0, 128);
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <main+0x238>)
 8000d28:	463c      	mov	r4, r7
 8000d2a:	461d      	mov	r5, r3
 8000d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  temporisationHandle = osThreadCreate(osThread(temporisation), NULL);
 8000d38:	463b      	mov	r3, r7
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f00a f982 	bl	800b046 <osThreadCreate>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <main+0x23c>)
 8000d46:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000d48:	f00a f976 	bl	800b038 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <main+0x1f8>
 8000d4e:	bf00      	nop
 8000d50:	0800d92c 	.word	0x0800d92c
 8000d54:	20000034 	.word	0x20000034
 8000d58:	ff0000ff 	.word	0xff0000ff
 8000d5c:	2000845c 	.word	0x2000845c
 8000d60:	20008528 	.word	0x20008528
 8000d64:	0800d894 	.word	0x0800d894
 8000d68:	200086c0 	.word	0x200086c0
 8000d6c:	0800d8a4 	.word	0x0800d8a4
 8000d70:	20008540 	.word	0x20008540
 8000d74:	0800d8b4 	.word	0x0800d8b4
 8000d78:	2000802c 	.word	0x2000802c
 8000d7c:	0800d8d0 	.word	0x0800d8d0
 8000d80:	20008458 	.word	0x20008458
 8000d84:	0800d8ec 	.word	0x0800d8ec
 8000d88:	20008318 	.word	0x20008318
 8000d8c:	0800d908 	.word	0x0800d908
 8000d90:	200082c8 	.word	0x200082c8

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	; 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2230      	movs	r2, #48	; 0x30
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f00c fc82 	bl	800d6ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000db8:	f006 fd76 	bl	80078a8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <SystemClock_Config+0xdc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a2b      	ldr	r2, [pc, #172]	; (8000e70 <SystemClock_Config+0xdc>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <SystemClock_Config+0xdc>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <SystemClock_Config+0xe0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a26      	ldr	r2, [pc, #152]	; (8000e74 <SystemClock_Config+0xe0>)
 8000dda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <SystemClock_Config+0xe0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000dec:	2309      	movs	r3, #9
 8000dee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000df6:	2301      	movs	r3, #1
 8000df8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e04:	2319      	movs	r3, #25
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000e08:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000e0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000e12:	2309      	movs	r3, #9
 8000e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e16:	f107 0320 	add.w	r3, r7, #32
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f006 fda4 	bl	8007968 <HAL_RCC_OscConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e26:	f001 fa55 	bl	80022d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e2a:	f006 fd4d 	bl	80078c8 <HAL_PWREx_EnableOverDrive>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000e34:	f001 fa4e 	bl	80022d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e38:	230f      	movs	r3, #15
 8000e3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2106      	movs	r1, #6
 8000e56:	4618      	mov	r0, r3
 8000e58:	f007 f82a 	bl	8007eb0 <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000e62:	f001 fa37 	bl	80022d4 <Error_Handler>
  }
}
 8000e66:	bf00      	nop
 8000e68:	3750      	adds	r7, #80	; 0x50
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40007000 	.word	0x40007000

08000e78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000e8c:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <MX_ADC1_Init+0x9c>)
 8000e8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000e92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000eba:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <MX_ADC1_Init+0xa0>)
 8000ebc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000eda:	f003 fd1f 	bl	800491c <HAL_ADC_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ee4:	f001 f9f6 	bl	80022d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_ADC1_Init+0x98>)
 8000efa:	f003 fe21 	bl	8004b40 <HAL_ADC_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f04:	f001 f9e6 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20008410 	.word	0x20008410
 8000f14:	40012000 	.word	0x40012000
 8000f18:	0f000001 	.word	0x0f000001

08000f1c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <MX_ADC3_Init+0x9c>)
 8000f32:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f3a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f56:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f5e:	4a17      	ldr	r2, [pc, #92]	; (8000fbc <MX_ADC3_Init+0xa0>)
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f62:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f7e:	f003 fccd 	bl	800491c <HAL_ADC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000f88:	f001 f9a4 	bl	80022d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_ADC3_Init+0x98>)
 8000f9e:	f003 fdcf 	bl	8004b40 <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000fa8:	f001 f994 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000845c 	.word	0x2000845c
 8000fb8:	40012200 	.word	0x40012200
 8000fbc:	0f000001 	.word	0x0f000001

08000fc0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_DAC_Init+0x4c>)
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <MX_DAC_Init+0x50>)
 8000fd2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_DAC_Init+0x4c>)
 8000fd6:	f004 f8e5 	bl	80051a4 <HAL_DAC_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000fe0:	f001 f978 	bl	80022d4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <MX_DAC_Init+0x4c>)
 8000ff4:	f004 f95c 	bl	80052b0 <HAL_DAC_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ffe:	f001 f969 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	2000852c 	.word	0x2000852c
 8001010:	40007400 	.word	0x40007400

08001014 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <MX_DMA2D_Init+0x5c>)
 800101a:	4a16      	ldr	r2, [pc, #88]	; (8001074 <MX_DMA2D_Init+0x60>)
 800101c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_DMA2D_Init+0x5c>)
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_DMA2D_Init+0x5c>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_DMA2D_Init+0x5c>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_DMA2D_Init+0x5c>)
 8001032:	2200      	movs	r2, #0
 8001034:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_DMA2D_Init+0x5c>)
 8001038:	2200      	movs	r2, #0
 800103a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_DMA2D_Init+0x5c>)
 800103e:	2200      	movs	r2, #0
 8001040:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_DMA2D_Init+0x5c>)
 8001044:	2200      	movs	r2, #0
 8001046:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <MX_DMA2D_Init+0x5c>)
 800104a:	f004 fbdb 	bl	8005804 <HAL_DMA2D_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001054:	f001 f93e 	bl	80022d4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001058:	2101      	movs	r1, #1
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_DMA2D_Init+0x5c>)
 800105c:	f004 fe40 	bl	8005ce0 <HAL_DMA2D_ConfigLayer>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001066:	f001 f935 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20008634 	.word	0x20008634
 8001074:	4002b000 	.word	0x4002b000

08001078 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_I2C1_Init+0x74>)
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <MX_I2C1_Init+0x78>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_I2C1_Init+0x74>)
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <MX_I2C1_Init+0x7c>)
 8001086:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <MX_I2C1_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_I2C1_Init+0x74>)
 8001090:	2201      	movs	r2, #1
 8001092:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_I2C1_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_I2C1_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_I2C1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_I2C1_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_I2C1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b2:	480e      	ldr	r0, [pc, #56]	; (80010ec <MX_I2C1_Init+0x74>)
 80010b4:	f005 fa46 	bl	8006544 <HAL_I2C_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010be:	f001 f909 	bl	80022d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c2:	2100      	movs	r1, #0
 80010c4:	4809      	ldr	r0, [pc, #36]	; (80010ec <MX_I2C1_Init+0x74>)
 80010c6:	f005 ffdf 	bl	8007088 <HAL_I2CEx_ConfigAnalogFilter>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010d0:	f001 f900 	bl	80022d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_I2C1_Init+0x74>)
 80010d8:	f006 f821 	bl	800711e <HAL_I2CEx_ConfigDigitalFilter>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010e2:	f001 f8f7 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000807c 	.word	0x2000807c
 80010f0:	40005400 	.word	0x40005400
 80010f4:	00c0eaff 	.word	0x00c0eaff

080010f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_I2C3_Init+0x74>)
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <MX_I2C3_Init+0x78>)
 8001100:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <MX_I2C3_Init+0x74>)
 8001104:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <MX_I2C3_Init+0x7c>)
 8001106:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <MX_I2C3_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <MX_I2C3_Init+0x74>)
 8001110:	2201      	movs	r2, #1
 8001112:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <MX_I2C3_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <MX_I2C3_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <MX_I2C3_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_I2C3_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_I2C3_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <MX_I2C3_Init+0x74>)
 8001134:	f005 fa06 	bl	8006544 <HAL_I2C_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800113e:	f001 f8c9 	bl	80022d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001142:	2100      	movs	r1, #0
 8001144:	4809      	ldr	r0, [pc, #36]	; (800116c <MX_I2C3_Init+0x74>)
 8001146:	f005 ff9f 	bl	8007088 <HAL_I2CEx_ConfigAnalogFilter>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001150:	f001 f8c0 	bl	80022d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001154:	2100      	movs	r1, #0
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_I2C3_Init+0x74>)
 8001158:	f005 ffe1 	bl	800711e <HAL_I2CEx_ConfigDigitalFilter>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001162:	f001 f8b7 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20007ef8 	.word	0x20007ef8
 8001170:	40005c00 	.word	0x40005c00
 8001174:	00c0eaff 	.word	0x00c0eaff

08001178 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2234      	movs	r2, #52	; 0x34
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f00c fa91 	bl	800d6ac <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800118a:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <MX_LTDC_Init+0xfc>)
 800118c:	4a3a      	ldr	r2, [pc, #232]	; (8001278 <MX_LTDC_Init+0x100>)
 800118e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001190:	4b38      	ldr	r3, [pc, #224]	; (8001274 <MX_LTDC_Init+0xfc>)
 8001192:	2200      	movs	r2, #0
 8001194:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001196:	4b37      	ldr	r3, [pc, #220]	; (8001274 <MX_LTDC_Init+0xfc>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800119c:	4b35      	ldr	r3, [pc, #212]	; (8001274 <MX_LTDC_Init+0xfc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011a2:	4b34      	ldr	r3, [pc, #208]	; (8001274 <MX_LTDC_Init+0xfc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80011a8:	4b32      	ldr	r3, [pc, #200]	; (8001274 <MX_LTDC_Init+0xfc>)
 80011aa:	2228      	movs	r2, #40	; 0x28
 80011ac:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80011ae:	4b31      	ldr	r3, [pc, #196]	; (8001274 <MX_LTDC_Init+0xfc>)
 80011b0:	2209      	movs	r2, #9
 80011b2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80011b4:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <MX_LTDC_Init+0xfc>)
 80011b6:	2235      	movs	r2, #53	; 0x35
 80011b8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80011ba:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <MX_LTDC_Init+0xfc>)
 80011bc:	220b      	movs	r2, #11
 80011be:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80011c0:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <MX_LTDC_Init+0xfc>)
 80011c2:	f240 2215 	movw	r2, #533	; 0x215
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <MX_LTDC_Init+0xfc>)
 80011ca:	f240 121b 	movw	r2, #283	; 0x11b
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80011d0:	4b28      	ldr	r3, [pc, #160]	; (8001274 <MX_LTDC_Init+0xfc>)
 80011d2:	f240 2235 	movw	r2, #565	; 0x235
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80011d8:	4b26      	ldr	r3, [pc, #152]	; (8001274 <MX_LTDC_Init+0xfc>)
 80011da:	f240 121d 	movw	r2, #285	; 0x11d
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <MX_LTDC_Init+0xfc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <MX_LTDC_Init+0xfc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <MX_LTDC_Init+0xfc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011f8:	481e      	ldr	r0, [pc, #120]	; (8001274 <MX_LTDC_Init+0xfc>)
 80011fa:	f005 ffdd 	bl	80071b8 <HAL_LTDC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001204:	f001 f866 	bl	80022d4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800120c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001210:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001216:	f44f 7388 	mov.w	r3, #272	; 0x110
 800121a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800121c:	2302      	movs	r3, #2
 800121e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001220:	23ff      	movs	r3, #255	; 0xff
 8001222:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001228:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800122c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800122e:	2307      	movs	r3, #7
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001232:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001238:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800123e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_LTDC_Init+0xfc>)
 800125e:	f006 f93d 	bl	80074dc <HAL_LTDC_ConfigLayer>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001268:	f001 f834 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	3738      	adds	r7, #56	; 0x38
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20008368 	.word	0x20008368
 8001278:	40016800 	.word	0x40016800

0800127c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b092      	sub	sp, #72	; 0x48
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001282:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
 8001292:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001298:	463b      	mov	r3, r7
 800129a:	222c      	movs	r2, #44	; 0x2c
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f00c fa04 	bl	800d6ac <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012a4:	4b46      	ldr	r3, [pc, #280]	; (80013c0 <MX_RTC_Init+0x144>)
 80012a6:	4a47      	ldr	r2, [pc, #284]	; (80013c4 <MX_RTC_Init+0x148>)
 80012a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012aa:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <MX_RTC_Init+0x144>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012b0:	4b43      	ldr	r3, [pc, #268]	; (80013c0 <MX_RTC_Init+0x144>)
 80012b2:	227f      	movs	r2, #127	; 0x7f
 80012b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012b6:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <MX_RTC_Init+0x144>)
 80012b8:	22ff      	movs	r2, #255	; 0xff
 80012ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012bc:	4b40      	ldr	r3, [pc, #256]	; (80013c0 <MX_RTC_Init+0x144>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012c2:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <MX_RTC_Init+0x144>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012c8:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <MX_RTC_Init+0x144>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012ce:	483c      	ldr	r0, [pc, #240]	; (80013c0 <MX_RTC_Init+0x144>)
 80012d0:	f007 fbe6 	bl	8008aa0 <HAL_RTC_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80012da:	f000 fffb 	bl	80022d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80012de:	2300      	movs	r3, #0
 80012e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012fc:	2201      	movs	r2, #1
 80012fe:	4619      	mov	r1, r3
 8001300:	482f      	ldr	r0, [pc, #188]	; (80013c0 <MX_RTC_Init+0x144>)
 8001302:	f007 fc5f 	bl	8008bc4 <HAL_RTC_SetTime>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800130c:	f000 ffe2 	bl	80022d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001310:	2301      	movs	r3, #1
 8001312:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001316:	2301      	movs	r3, #1
 8001318:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800131c:	2301      	movs	r3, #1
 800131e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001322:	2300      	movs	r3, #0
 8001324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132c:	2201      	movs	r2, #1
 800132e:	4619      	mov	r1, r3
 8001330:	4823      	ldr	r0, [pc, #140]	; (80013c0 <MX_RTC_Init+0x144>)
 8001332:	f007 fd05 	bl	8008d40 <HAL_RTC_SetDate>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800133c:	f000 ffca 	bl	80022d4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001340:	2300      	movs	r3, #0
 8001342:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001344:	2300      	movs	r3, #0
 8001346:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001348:	2300      	movs	r3, #0
 800134a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001364:	2301      	movs	r3, #1
 8001366:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800136a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	2201      	movs	r2, #1
 8001374:	4619      	mov	r1, r3
 8001376:	4812      	ldr	r0, [pc, #72]	; (80013c0 <MX_RTC_Init+0x144>)
 8001378:	f007 fd8a 	bl	8008e90 <HAL_RTC_SetAlarm>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001382:	f000 ffa7 	bl	80022d4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	2201      	movs	r2, #1
 8001390:	4619      	mov	r1, r3
 8001392:	480b      	ldr	r0, [pc, #44]	; (80013c0 <MX_RTC_Init+0x144>)
 8001394:	f007 fd7c 	bl	8008e90 <HAL_RTC_SetAlarm>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800139e:	f000 ff99 	bl	80022d4 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80013a2:	2202      	movs	r2, #2
 80013a4:	2100      	movs	r1, #0
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <MX_RTC_Init+0x144>)
 80013a8:	f007 fefc 	bl	80091a4 <HAL_RTCEx_SetTimeStamp>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80013b2:	f000 ff8f 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	3748      	adds	r7, #72	; 0x48
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20008544 	.word	0x20008544
 80013c4:	40002800 	.word	0x40002800

080013c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_SPI2_Init+0x74>)
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <MX_SPI2_Init+0x78>)
 80013d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_SPI2_Init+0x74>)
 80013d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_SPI2_Init+0x74>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_SPI2_Init+0x74>)
 80013e2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80013e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_SPI2_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ee:	4b13      	ldr	r3, [pc, #76]	; (800143c <MX_SPI2_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_SPI2_Init+0x74>)
 80013f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_SPI2_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_SPI2_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_SPI2_Init+0x74>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <MX_SPI2_Init+0x74>)
 8001410:	2200      	movs	r2, #0
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_SPI2_Init+0x74>)
 8001416:	2207      	movs	r2, #7
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <MX_SPI2_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_SPI2_Init+0x74>)
 8001422:	2208      	movs	r2, #8
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_SPI2_Init+0x74>)
 8001428:	f007 ffa3 	bl	8009372 <HAL_SPI_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001432:	f000 ff4f 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20007f44 	.word	0x20007f44
 8001440:	40003800 	.word	0x40003800

08001444 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <MX_TIM1_Init+0xa0>)
 8001464:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <MX_TIM1_Init+0xa4>)
 8001466:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <MX_TIM1_Init+0xa0>)
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_TIM1_Init+0xa0>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_TIM1_Init+0xa0>)
 8001476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_TIM1_Init+0xa0>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <MX_TIM1_Init+0xa0>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_TIM1_Init+0xa0>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800148e:	4815      	ldr	r0, [pc, #84]	; (80014e4 <MX_TIM1_Init+0xa0>)
 8001490:	f008 f81a 	bl	80094c8 <HAL_TIM_Base_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800149a:	f000 ff1b 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4619      	mov	r1, r3
 80014aa:	480e      	ldr	r0, [pc, #56]	; (80014e4 <MX_TIM1_Init+0xa0>)
 80014ac:	f008 f9fc 	bl	80098a8 <HAL_TIM_ConfigClockSource>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80014b6:	f000 ff0d 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <MX_TIM1_Init+0xa0>)
 80014cc:	f008 fc18 	bl	8009d00 <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014d6:	f000 fefd 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20008564 	.word	0x20008564
 80014e8:	40010000 	.word	0x40010000

080014ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800150a:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <MX_TIM2_Init+0x98>)
 800150c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001510:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <MX_TIM2_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_TIM2_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <MX_TIM2_Init+0x98>)
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_TIM2_Init+0x98>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <MX_TIM2_Init+0x98>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001532:	4814      	ldr	r0, [pc, #80]	; (8001584 <MX_TIM2_Init+0x98>)
 8001534:	f007 ffc8 	bl	80094c8 <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800153e:	f000 fec9 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001546:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4619      	mov	r1, r3
 800154e:	480d      	ldr	r0, [pc, #52]	; (8001584 <MX_TIM2_Init+0x98>)
 8001550:	f008 f9aa 	bl	80098a8 <HAL_TIM_ConfigClockSource>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800155a:	f000 febb 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	4619      	mov	r1, r3
 800156a:	4806      	ldr	r0, [pc, #24]	; (8001584 <MX_TIM2_Init+0x98>)
 800156c:	f008 fbc8 	bl	8009d00 <HAL_TIMEx_MasterConfigSynchronization>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001576:	f000 fead 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	3720      	adds	r7, #32
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20008674 	.word	0x20008674

08001588 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <MX_TIM3_Init+0x94>)
 80015a8:	4a1d      	ldr	r2, [pc, #116]	; (8001620 <MX_TIM3_Init+0x98>)
 80015aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_TIM3_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_TIM3_Init+0x94>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_TIM3_Init+0x94>)
 80015ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <MX_TIM3_Init+0x94>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_TIM3_Init+0x94>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015cc:	4813      	ldr	r0, [pc, #76]	; (800161c <MX_TIM3_Init+0x94>)
 80015ce:	f007 ff7b 	bl	80094c8 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80015d8:	f000 fe7c 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <MX_TIM3_Init+0x94>)
 80015ea:	f008 f95d 	bl	80098a8 <HAL_TIM_ConfigClockSource>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015f4:	f000 fe6e 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_TIM3_Init+0x94>)
 8001606:	f008 fb7b 	bl	8009d00 <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001610:	f000 fe60 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000831c 	.word	0x2000831c
 8001620:	40000400 	.word	0x40000400

08001624 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001642:	4b1d      	ldr	r3, [pc, #116]	; (80016b8 <MX_TIM5_Init+0x94>)
 8001644:	4a1d      	ldr	r2, [pc, #116]	; (80016bc <MX_TIM5_Init+0x98>)
 8001646:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <MX_TIM5_Init+0x94>)
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_TIM5_Init+0x94>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <MX_TIM5_Init+0x94>)
 8001656:	f04f 32ff 	mov.w	r2, #4294967295
 800165a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165c:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <MX_TIM5_Init+0x94>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_TIM5_Init+0x94>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001668:	4813      	ldr	r0, [pc, #76]	; (80016b8 <MX_TIM5_Init+0x94>)
 800166a:	f007 ff2d 	bl	80094c8 <HAL_TIM_Base_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001674:	f000 fe2e 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	4619      	mov	r1, r3
 8001684:	480c      	ldr	r0, [pc, #48]	; (80016b8 <MX_TIM5_Init+0x94>)
 8001686:	f008 f90f 	bl	80098a8 <HAL_TIM_ConfigClockSource>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001690:	f000 fe20 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_TIM5_Init+0x94>)
 80016a2:	f008 fb2d 	bl	8009d00 <HAL_TIMEx_MasterConfigSynchronization>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80016ac:	f000 fe12 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200082cc 	.word	0x200082cc
 80016bc:	40000c00 	.word	0x40000c00

080016c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <MX_TIM8_Init+0xa0>)
 80016e0:	4a20      	ldr	r2, [pc, #128]	; (8001764 <MX_TIM8_Init+0xa4>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <MX_TIM8_Init+0xa0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <MX_TIM8_Init+0xa0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <MX_TIM8_Init+0xa0>)
 80016f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <MX_TIM8_Init+0xa0>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_TIM8_Init+0xa0>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b16      	ldr	r3, [pc, #88]	; (8001760 <MX_TIM8_Init+0xa0>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800170a:	4815      	ldr	r0, [pc, #84]	; (8001760 <MX_TIM8_Init+0xa0>)
 800170c:	f007 fedc 	bl	80094c8 <HAL_TIM_Base_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001716:	f000 fddd 	bl	80022d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4619      	mov	r1, r3
 8001726:	480e      	ldr	r0, [pc, #56]	; (8001760 <MX_TIM8_Init+0xa0>)
 8001728:	f008 f8be 	bl	80098a8 <HAL_TIM_ConfigClockSource>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001732:	f000 fdcf 	bl	80022d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	; (8001760 <MX_TIM8_Init+0xa0>)
 8001748:	f008 fada 	bl	8009d00 <HAL_TIMEx_MasterConfigSynchronization>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001752:	f000 fdbf 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	3720      	adds	r7, #32
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20008030 	.word	0x20008030
 8001764:	40010400 	.word	0x40010400

08001768 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_UART7_Init+0x58>)
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <MX_UART7_Init+0x5c>)
 8001770:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_UART7_Init+0x58>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_UART7_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_UART7_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_UART7_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_UART7_Init+0x58>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_UART7_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_UART7_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_UART7_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_UART7_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_UART7_Init+0x58>)
 80017ac:	f008 fb54 	bl	8009e58 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80017b6:	f000 fd8d 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20007fa8 	.word	0x20007fa8
 80017c4:	40007800 	.word	0x40007800

080017c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_USART1_UART_Init+0x58>)
 80017ce:	4a15      	ldr	r2, [pc, #84]	; (8001824 <MX_USART1_UART_Init+0x5c>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MX_USART1_UART_Init+0x58>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_USART1_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_USART1_UART_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_USART1_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_USART1_UART_Init+0x58>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_USART1_UART_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_USART1_UART_Init+0x58>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_USART1_UART_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_USART1_UART_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_USART1_UART_Init+0x58>)
 800180c:	f008 fb24 	bl	8009e58 <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001816:	f000 fd5d 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200084a4 	.word	0x200084a4
 8001824:	40011000 	.word	0x40011000

08001828 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MX_USART6_UART_Init+0x58>)
 800182e:	4a15      	ldr	r2, [pc, #84]	; (8001884 <MX_USART6_UART_Init+0x5c>)
 8001830:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MX_USART6_UART_Init+0x58>)
 8001834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001838:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_USART6_UART_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_USART6_UART_Init+0x58>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_USART6_UART_Init+0x58>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_USART6_UART_Init+0x58>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_USART6_UART_Init+0x58>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_USART6_UART_Init+0x58>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_USART6_UART_Init+0x58>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_USART6_UART_Init+0x58>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_USART6_UART_Init+0x58>)
 800186c:	f008 faf4 	bl	8009e58 <HAL_UART_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001876:	f000 fd2d 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200085b0 	.word	0x200085b0
 8001884:	40011400 	.word	0x40011400

08001888 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
 800189c:	615a      	str	r2, [r3, #20]
 800189e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80018a0:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <MX_FMC_Init+0x98>)
 80018a2:	4a20      	ldr	r2, [pc, #128]	; (8001924 <MX_FMC_Init+0x9c>)
 80018a4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <MX_FMC_Init+0x98>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <MX_FMC_Init+0x98>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <MX_FMC_Init+0x98>)
 80018b4:	2204      	movs	r2, #4
 80018b6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <MX_FMC_Init+0x98>)
 80018ba:	2210      	movs	r2, #16
 80018bc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <MX_FMC_Init+0x98>)
 80018c0:	2240      	movs	r2, #64	; 0x40
 80018c2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <MX_FMC_Init+0x98>)
 80018c6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80018ca:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_FMC_Init+0x98>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <MX_FMC_Init+0x98>)
 80018d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_FMC_Init+0x98>)
 80018dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_FMC_Init+0x98>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80018e8:	2302      	movs	r3, #2
 80018ea:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80018ec:	2307      	movs	r3, #7
 80018ee:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80018f0:	2304      	movs	r3, #4
 80018f2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80018f4:	2307      	movs	r3, #7
 80018f6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80018f8:	2303      	movs	r3, #3
 80018fa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001900:	2302      	movs	r3, #2
 8001902:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	4619      	mov	r1, r3
 8001908:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_FMC_Init+0x98>)
 800190a:	f007 fca1 	bl	8009250 <HAL_SDRAM_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001914:	f000 fcde 	bl	80022d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001918:	bf00      	nop
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200086c4 	.word	0x200086c4
 8001924:	a0000140 	.word	0xa0000140

08001928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b090      	sub	sp, #64	; 0x40
 800192c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
 800193c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800193e:	4baf      	ldr	r3, [pc, #700]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4aae      	ldr	r2, [pc, #696]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001944:	f043 0310 	orr.w	r3, r3, #16
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4bac      	ldr	r3, [pc, #688]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
 8001954:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001956:	4ba9      	ldr	r3, [pc, #676]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4aa8      	ldr	r2, [pc, #672]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 800195c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4ba6      	ldr	r3, [pc, #664]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	4ba3      	ldr	r3, [pc, #652]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4aa2      	ldr	r2, [pc, #648]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4ba0      	ldr	r3, [pc, #640]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	4b9d      	ldr	r3, [pc, #628]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a9c      	ldr	r2, [pc, #624]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b9a      	ldr	r3, [pc, #616]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	4b97      	ldr	r3, [pc, #604]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a96      	ldr	r2, [pc, #600]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b94      	ldr	r3, [pc, #592]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b91      	ldr	r3, [pc, #580]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a90      	ldr	r2, [pc, #576]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b8e      	ldr	r3, [pc, #568]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80019ce:	4b8b      	ldr	r3, [pc, #556]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a8a      	ldr	r2, [pc, #552]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 80019d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b88      	ldr	r3, [pc, #544]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80019e6:	4b85      	ldr	r3, [pc, #532]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a84      	ldr	r2, [pc, #528]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 80019ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b82      	ldr	r3, [pc, #520]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80019fe:	4b7f      	ldr	r3, [pc, #508]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a7e      	ldr	r2, [pc, #504]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001a04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b7c      	ldr	r3, [pc, #496]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a16:	4b79      	ldr	r3, [pc, #484]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a78      	ldr	r2, [pc, #480]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001a1c:	f043 0320 	orr.w	r3, r3, #32
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0320 	and.w	r3, r3, #32
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a72      	ldr	r2, [pc, #456]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b70      	ldr	r3, [pc, #448]	; (8001bfc <MX_GPIO_Init+0x2d4>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2160      	movs	r1, #96	; 0x60
 8001a4a:	486d      	ldr	r0, [pc, #436]	; (8001c00 <MX_GPIO_Init+0x2d8>)
 8001a4c:	f004 fd2e 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2120      	movs	r1, #32
 8001a54:	486b      	ldr	r0, [pc, #428]	; (8001c04 <MX_GPIO_Init+0x2dc>)
 8001a56:	f004 fd29 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2108      	movs	r1, #8
 8001a5e:	4869      	ldr	r0, [pc, #420]	; (8001c04 <MX_GPIO_Init+0x2dc>)
 8001a60:	f004 fd24 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	2108      	movs	r1, #8
 8001a68:	4867      	ldr	r0, [pc, #412]	; (8001c08 <MX_GPIO_Init+0x2e0>)
 8001a6a:	f004 fd1f 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a74:	4865      	ldr	r0, [pc, #404]	; (8001c0c <MX_GPIO_Init+0x2e4>)
 8001a76:	f004 fd19 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001a80:	4863      	ldr	r0, [pc, #396]	; (8001c10 <MX_GPIO_Init+0x2e8>)
 8001a82:	f004 fd13 	bl	80064ac <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	21c8      	movs	r1, #200	; 0xc8
 8001a8a:	4862      	ldr	r0, [pc, #392]	; (8001c14 <MX_GPIO_Init+0x2ec>)
 8001a8c:	f004 fd0e 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001a90:	2308      	movs	r3, #8
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a94:	2300      	movs	r3, #0
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4857      	ldr	r0, [pc, #348]	; (8001c00 <MX_GPIO_Init+0x2d8>)
 8001aa4:	f004 fa4a 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ab8:	2309      	movs	r3, #9
 8001aba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	484f      	ldr	r0, [pc, #316]	; (8001c00 <MX_GPIO_Init+0x2d8>)
 8001ac4:	f004 fa3a 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001ac8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ada:	230b      	movs	r3, #11
 8001adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	484b      	ldr	r0, [pc, #300]	; (8001c14 <MX_GPIO_Init+0x2ec>)
 8001ae6:	f004 fa29 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001aea:	f643 0323 	movw	r3, #14371	; 0x3823
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001afc:	230a      	movs	r3, #10
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b04:	4619      	mov	r1, r3
 8001b06:	4844      	ldr	r0, [pc, #272]	; (8001c18 <MX_GPIO_Init+0x2f0>)
 8001b08:	f004 fa18 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001b1c:	2308      	movs	r3, #8
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b24:	4619      	mov	r1, r3
 8001b26:	4837      	ldr	r0, [pc, #220]	; (8001c04 <MX_GPIO_Init+0x2dc>)
 8001b28:	f004 fa08 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001b2c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b3e:	230c      	movs	r3, #12
 8001b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b46:	4619      	mov	r1, r3
 8001b48:	4834      	ldr	r0, [pc, #208]	; (8001c1c <MX_GPIO_Init+0x2f4>)
 8001b4a:	f004 f9f7 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_6;
 8001b4e:	f248 1340 	movw	r3, #33088	; 0x8140
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b60:	4619      	mov	r1, r3
 8001b62:	482f      	ldr	r0, [pc, #188]	; (8001c20 <MX_GPIO_Init+0x2f8>)
 8001b64:	f004 f9ea 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001b68:	2360      	movs	r3, #96	; 0x60
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4820      	ldr	r0, [pc, #128]	; (8001c00 <MX_GPIO_Init+0x2d8>)
 8001b80:	f004 f9dc 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001b84:	2340      	movs	r3, #64	; 0x40
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b94:	230a      	movs	r3, #10
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	481e      	ldr	r0, [pc, #120]	; (8001c18 <MX_GPIO_Init+0x2f0>)
 8001ba0:	f004 f9cc 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001baa:	2300      	movs	r3, #0
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481a      	ldr	r0, [pc, #104]	; (8001c24 <MX_GPIO_Init+0x2fc>)
 8001bba:	f004 f9bf 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001bbe:	2340      	movs	r3, #64	; 0x40
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bc2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480c      	ldr	r0, [pc, #48]	; (8001c04 <MX_GPIO_Init+0x2dc>)
 8001bd4:	f004 f9b2 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001bd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bea:	230a      	movs	r3, #10
 8001bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480a      	ldr	r0, [pc, #40]	; (8001c20 <MX_GPIO_Init+0x2f8>)
 8001bf6:	f004 f9a1 	bl	8005f3c <HAL_GPIO_Init>
 8001bfa:	e015      	b.n	8001c28 <MX_GPIO_Init+0x300>
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	40022800 	.word	0x40022800
 8001c0c:	40022000 	.word	0x40022000
 8001c10:	40021c00 	.word	0x40021c00
 8001c14:	40021800 	.word	0x40021800
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	40020800 	.word	0x40020800
 8001c20:	40020000 	.word	0x40020000
 8001c24:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001c28:	23f0      	movs	r3, #240	; 0xf0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001c38:	230a      	movs	r3, #10
 8001c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c40:	4619      	mov	r1, r3
 8001c42:	4895      	ldr	r0, [pc, #596]	; (8001e98 <MX_GPIO_Init+0x570>)
 8001c44:	f004 f97a 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c62:	4619      	mov	r1, r3
 8001c64:	488d      	ldr	r0, [pc, #564]	; (8001e9c <MX_GPIO_Init+0x574>)
 8001c66:	f004 f969 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001c6a:	2328      	movs	r3, #40	; 0x28
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4887      	ldr	r0, [pc, #540]	; (8001ea0 <MX_GPIO_Init+0x578>)
 8001c82:	f004 f95b 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4882      	ldr	r0, [pc, #520]	; (8001ea4 <MX_GPIO_Init+0x57c>)
 8001c9c:	f004 f94e 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	487c      	ldr	r0, [pc, #496]	; (8001ea8 <MX_GPIO_Init+0x580>)
 8001cb8:	f004 f940 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001cbc:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4872      	ldr	r0, [pc, #456]	; (8001e9c <MX_GPIO_Init+0x574>)
 8001cd2:	f004 f933 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001cd6:	2310      	movs	r3, #16
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	486d      	ldr	r0, [pc, #436]	; (8001ea0 <MX_GPIO_Init+0x578>)
 8001cea:	f004 f927 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001cfe:	230c      	movs	r3, #12
 8001d00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d06:	4619      	mov	r1, r3
 8001d08:	4865      	ldr	r0, [pc, #404]	; (8001ea0 <MX_GPIO_Init+0x578>)
 8001d0a:	f004 f917 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001d0e:	f24a 0304 	movw	r3, #40964	; 0xa004
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d14:	2300      	movs	r3, #0
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d20:	4619      	mov	r1, r3
 8001d22:	4862      	ldr	r0, [pc, #392]	; (8001eac <MX_GPIO_Init+0x584>)
 8001d24:	f004 f90a 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4855      	ldr	r0, [pc, #340]	; (8001e98 <MX_GPIO_Init+0x570>)
 8001d42:	f004 f8fb 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001d46:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4853      	ldr	r0, [pc, #332]	; (8001eac <MX_GPIO_Init+0x584>)
 8001d60:	f004 f8ec 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4847      	ldr	r0, [pc, #284]	; (8001e98 <MX_GPIO_Init+0x570>)
 8001d7c:	f004 f8de 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d80:	2310      	movs	r3, #16
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d90:	230a      	movs	r3, #10
 8001d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4844      	ldr	r0, [pc, #272]	; (8001eac <MX_GPIO_Init+0x584>)
 8001d9c:	f004 f8ce 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001da0:	23c8      	movs	r3, #200	; 0xc8
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001db4:	4619      	mov	r1, r3
 8001db6:	4839      	ldr	r0, [pc, #228]	; (8001e9c <MX_GPIO_Init+0x574>)
 8001db8:	f004 f8c0 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001dbc:	2305      	movs	r3, #5
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001dcc:	230a      	movs	r3, #10
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4833      	ldr	r0, [pc, #204]	; (8001ea4 <MX_GPIO_Init+0x57c>)
 8001dd8:	f004 f8b0 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ddc:	2332      	movs	r3, #50	; 0x32
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dec:	230b      	movs	r3, #11
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001df4:	4619      	mov	r1, r3
 8001df6:	482b      	ldr	r0, [pc, #172]	; (8001ea4 <MX_GPIO_Init+0x57c>)
 8001df8:	f004 f8a0 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e0c:	2309      	movs	r3, #9
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e14:	4619      	mov	r1, r3
 8001e16:	4826      	ldr	r0, [pc, #152]	; (8001eb0 <MX_GPIO_Init+0x588>)
 8001e18:	f004 f890 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001e1c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001e2e:	2309      	movs	r3, #9
 8001e30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e36:	4619      	mov	r1, r3
 8001e38:	4819      	ldr	r0, [pc, #100]	; (8001ea0 <MX_GPIO_Init+0x578>)
 8001e3a:	f004 f87f 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e3e:	2386      	movs	r3, #134	; 0x86
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e4e:	230b      	movs	r3, #11
 8001e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e56:	4619      	mov	r1, r3
 8001e58:	4816      	ldr	r0, [pc, #88]	; (8001eb4 <MX_GPIO_Init+0x58c>)
 8001e5a:	f004 f86f 	bl	8005f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001e5e:	2328      	movs	r3, #40	; 0x28
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001e6e:	230a      	movs	r3, #10
 8001e70:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e76:	4619      	mov	r1, r3
 8001e78:	480e      	ldr	r0, [pc, #56]	; (8001eb4 <MX_GPIO_Init+0x58c>)
 8001e7a:	f004 f85f 	bl	8005f3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2105      	movs	r1, #5
 8001e82:	2028      	movs	r0, #40	; 0x28
 8001e84:	f003 f964 	bl	8005150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e88:	2028      	movs	r0, #40	; 0x28
 8001e8a:	f003 f97d 	bl	8005188 <HAL_NVIC_EnableIRQ>

}
 8001e8e:	bf00      	nop
 8001e90:	3740      	adds	r7, #64	; 0x40
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	40021800 	.word	0x40021800
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40022800 	.word	0x40022800
 8001eac:	40021c00 	.word	0x40021c00
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020000 	.word	0x40020000

08001eb8 <HAL_GPIO_EXTI_Callback>:
		HAL_UART_Receive_IT(&huart1,rxbuffer,1); // Rappel (callback) de l'interruption
		*/
	}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{	/**
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80fb      	strh	r3, [r7, #6]
 		flag = 1;
	}
	//xQueueSendFromISR(myQueueTempoHandle, &MessageTempo, 0);
	 *
	 */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <fonction_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fonction_init */
void fonction_init(void const * argument)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 20;
 8001ed8:	2314      	movs	r3, #20
 8001eda:	613b      	str	r3, [r7, #16]
    uint8_t i, j, cpt_lignesw = 0, cpt_colonnesw = 1, cpt_lignesb, cpt_colonnesb;
 8001edc:	2300      	movs	r3, #0
 8001ede:	757b      	strb	r3, [r7, #21]
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	753b      	strb	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {


	  for (i = 0; i < 3; i++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	75fb      	strb	r3, [r7, #23]
 8001ee8:	e090      	b.n	800200c <fonction_init+0x13c>
	  {
		  for (j = 0; j < 4; j++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	75bb      	strb	r3, [r7, #22]
 8001eee:	e07a      	b.n	8001fe6 <fonction_init+0x116>
		  {
			  taskENTER_CRITICAL();
 8001ef0:	f00b f8dc 	bl	800d0ac <vPortEnterCritical>
			  	 // init white pieces
			  chessboard[cpt_lignesw][cpt_colonnesw].ligne = cpt_lignesw;
 8001ef4:	7d7a      	ldrb	r2, [r7, #21]
 8001ef6:	7d3b      	ldrb	r3, [r7, #20]
 8001ef8:	7d79      	ldrb	r1, [r7, #21]
 8001efa:	b288      	uxth	r0, r1
 8001efc:	4949      	ldr	r1, [pc, #292]	; (8002024 <fonction_init+0x154>)
 8001efe:	00d2      	lsls	r2, r2, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	4602      	mov	r2, r0
 8001f04:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
			  chessboard[cpt_lignesw][cpt_colonnesw].colonne = cpt_colonnesw;
 8001f08:	7d7a      	ldrb	r2, [r7, #21]
 8001f0a:	7d3b      	ldrb	r3, [r7, #20]
 8001f0c:	7d39      	ldrb	r1, [r7, #20]
 8001f0e:	b288      	uxth	r0, r1
 8001f10:	4944      	ldr	r1, [pc, #272]	; (8002024 <fonction_init+0x154>)
 8001f12:	00d2      	lsls	r2, r2, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	805a      	strh	r2, [r3, #2]
			  chessboard[cpt_lignesw][cpt_colonnesw].isFilled = 1;
 8001f1e:	7d7a      	ldrb	r2, [r7, #21]
 8001f20:	7d3b      	ldrb	r3, [r7, #20]
 8001f22:	4940      	ldr	r1, [pc, #256]	; (8002024 <fonction_init+0x154>)
 8001f24:	00d2      	lsls	r2, r2, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	711a      	strb	r2, [r3, #4]
			  chessboard[cpt_lignesw][cpt_colonnesw].rayon = 9;
 8001f30:	7d7a      	ldrb	r2, [r7, #21]
 8001f32:	7d3b      	ldrb	r3, [r7, #20]
 8001f34:	493b      	ldr	r1, [pc, #236]	; (8002024 <fonction_init+0x154>)
 8001f36:	00d2      	lsls	r2, r2, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	2209      	movs	r2, #9
 8001f40:	719a      	strb	r2, [r3, #6]
			  chessboard[cpt_lignesw][cpt_colonnesw].piece_color = 0;
 8001f42:	7d7a      	ldrb	r2, [r7, #21]
 8001f44:	7d3b      	ldrb	r3, [r7, #20]
 8001f46:	4937      	ldr	r1, [pc, #220]	; (8002024 <fonction_init+0x154>)
 8001f48:	00d2      	lsls	r2, r2, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	2200      	movs	r2, #0
 8001f52:	715a      	strb	r2, [r3, #5]
			  // init black pieces
			  cpt_lignesb = cpt_lignesw + 5;
 8001f54:	7d7b      	ldrb	r3, [r7, #21]
 8001f56:	3305      	adds	r3, #5
 8001f58:	73fb      	strb	r3, [r7, #15]
			  cpt_colonnesb = (cpt_colonnesw % 2 == 0) ? cpt_colonnesw + 1 : cpt_colonnesw - 1;
 8001f5a:	7d3b      	ldrb	r3, [r7, #20]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d103      	bne.n	8001f6e <fonction_init+0x9e>
 8001f66:	7d3b      	ldrb	r3, [r7, #20]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	e002      	b.n	8001f74 <fonction_init+0xa4>
 8001f6e:	7d3b      	ldrb	r3, [r7, #20]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	73bb      	strb	r3, [r7, #14]
			  chessboard[cpt_lignesb][cpt_colonnesb].ligne = cpt_lignesb;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	7bbb      	ldrb	r3, [r7, #14]
 8001f7a:	7bf9      	ldrb	r1, [r7, #15]
 8001f7c:	b288      	uxth	r0, r1
 8001f7e:	4929      	ldr	r1, [pc, #164]	; (8002024 <fonction_init+0x154>)
 8001f80:	00d2      	lsls	r2, r2, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	4602      	mov	r2, r0
 8001f86:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
			  chessboard[cpt_lignesb][cpt_colonnesb].colonne = cpt_colonnesb;
 8001f8a:	7bfa      	ldrb	r2, [r7, #15]
 8001f8c:	7bbb      	ldrb	r3, [r7, #14]
 8001f8e:	7bb9      	ldrb	r1, [r7, #14]
 8001f90:	b288      	uxth	r0, r1
 8001f92:	4924      	ldr	r1, [pc, #144]	; (8002024 <fonction_init+0x154>)
 8001f94:	00d2      	lsls	r2, r2, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	805a      	strh	r2, [r3, #2]
			  chessboard[cpt_lignesb][cpt_colonnesb].isFilled = 1;
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	7bbb      	ldrb	r3, [r7, #14]
 8001fa4:	491f      	ldr	r1, [pc, #124]	; (8002024 <fonction_init+0x154>)
 8001fa6:	00d2      	lsls	r2, r2, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	440b      	add	r3, r1
 8001fae:	2201      	movs	r2, #1
 8001fb0:	711a      	strb	r2, [r3, #4]
			  chessboard[cpt_lignesb][cpt_colonnesb].rayon = 9;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	7bbb      	ldrb	r3, [r7, #14]
 8001fb6:	491b      	ldr	r1, [pc, #108]	; (8002024 <fonction_init+0x154>)
 8001fb8:	00d2      	lsls	r2, r2, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	2209      	movs	r2, #9
 8001fc2:	719a      	strb	r2, [r3, #6]
			  chessboard[cpt_lignesb][cpt_colonnesb].piece_color = 1;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	4916      	ldr	r1, [pc, #88]	; (8002024 <fonction_init+0x154>)
 8001fca:	00d2      	lsls	r2, r2, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	440b      	add	r3, r1
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	715a      	strb	r2, [r3, #5]
			  taskEXIT_CRITICAL();
 8001fd6:	f00b f89d 	bl	800d114 <vPortExitCritical>
			  cpt_colonnesw += 2;
 8001fda:	7d3b      	ldrb	r3, [r7, #20]
 8001fdc:	3302      	adds	r3, #2
 8001fde:	753b      	strb	r3, [r7, #20]
		  for (j = 0; j < 4; j++)
 8001fe0:	7dbb      	ldrb	r3, [r7, #22]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	75bb      	strb	r3, [r7, #22]
 8001fe6:	7dbb      	ldrb	r3, [r7, #22]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d981      	bls.n	8001ef0 <fonction_init+0x20>
		  }
		  cpt_colonnesw = (cpt_colonnesw % 2 == 0) ? 1 : 0;
 8001fec:	7d3b      	ldrb	r3, [r7, #20]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	753b      	strb	r3, [r7, #20]
		  cpt_lignesw++;
 8002000:	7d7b      	ldrb	r3, [r7, #21]
 8002002:	3301      	adds	r3, #1
 8002004:	757b      	strb	r3, [r7, #21]
	  for (i = 0; i < 3; i++)
 8002006:	7dfb      	ldrb	r3, [r7, #23]
 8002008:	3301      	adds	r3, #1
 800200a:	75fb      	strb	r3, [r7, #23]
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	2b02      	cmp	r3, #2
 8002010:	f67f af6b 	bls.w	8001eea <fonction_init+0x1a>
	  }

      vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002014:	f107 0308 	add.w	r3, r7, #8
 8002018:	6939      	ldr	r1, [r7, #16]
 800201a:	4618      	mov	r0, r3
 800201c:	f00a f81c 	bl	800c058 <vTaskDelayUntil>
	  for (i = 0; i < 3; i++)
 8002020:	e760      	b.n	8001ee4 <fonction_init+0x14>
 8002022:	bf00      	nop
 8002024:	200080c8 	.word	0x200080c8

08002028 <fonction_affichage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_affichage */
void fonction_affichage(void const * argument)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_affichage */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;
 8002030:	2332      	movs	r3, #50	; 0x32
 8002032:	61bb      	str	r3, [r7, #24]
	const uint8_t pas 			= 30;
 8002034:	231e      	movs	r3, #30
 8002036:	75fb      	strb	r3, [r7, #23]
	const uint8_t marge			= 15;
 8002038:	230f      	movs	r3, #15
 800203a:	75bb      	strb	r3, [r7, #22]
	uint16_t pointeurX 			= marge + pas / 2;
 800203c:	7dbb      	ldrb	r3, [r7, #22]
 800203e:	b29a      	uxth	r2, r3
 8002040:	7dfb      	ldrb	r3, [r7, #23]
 8002042:	085b      	lsrs	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	b29b      	uxth	r3, r3
 8002048:	4413      	add	r3, r2
 800204a:	82bb      	strh	r3, [r7, #20]
	uint16_t pointeurY 			= marge + pas / 2;
 800204c:	7dbb      	ldrb	r3, [r7, #22]
 800204e:	b29a      	uxth	r2, r3
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	085b      	lsrs	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	b29b      	uxth	r3, r3
 8002058:	4413      	add	r3, r2
 800205a:	827b      	strh	r3, [r7, #18]
	uint8_t color				= 2;
 800205c:	2302      	movs	r3, #2
 800205e:	747b      	strb	r3, [r7, #17]
	uint8_t i, j;
	uint8_t filled = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	743b      	strb	r3, [r7, #16]
	vTaskDelete(task_initHandle);
 8002064:	4b4a      	ldr	r3, [pc, #296]	; (8002190 <fonction_affichage+0x168>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f009 ff63 	bl	800bf34 <vTaskDelete>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 800206e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002072:	4848      	ldr	r0, [pc, #288]	; (8002194 <fonction_affichage+0x16c>)
 8002074:	f004 fa33 	bl	80064de <HAL_GPIO_TogglePin>
	  taskENTER_CRITICAL();
 8002078:	f00b f818 	bl	800d0ac <vPortEnterCritical>
	  if(change == 1)
 800207c:	4b46      	ldr	r3, [pc, #280]	; (8002198 <fonction_affichage+0x170>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d105      	bne.n	8002090 <fonction_affichage+0x68>
	  {
		  BSP_LCD_Clear(0);
 8002084:	2000      	movs	r0, #0
 8002086:	f000 fc23 	bl	80028d0 <BSP_LCD_Clear>
		  change = 0;
 800208a:	4b43      	ldr	r3, [pc, #268]	; (8002198 <fonction_affichage+0x170>)
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
	  }
	  taskEXIT_CRITICAL();
 8002090:	f00b f840 	bl	800d114 <vPortExitCritical>
	  for (i = 0; i < 8; i++)
 8002094:	2300      	movs	r3, #0
 8002096:	77fb      	strb	r3, [r7, #31]
 8002098:	e070      	b.n	800217c <fonction_affichage+0x154>
	  {
		  for (j = 0; j < 8; j++)
 800209a:	2300      	movs	r3, #0
 800209c:	77bb      	strb	r3, [r7, #30]
 800209e:	e067      	b.n	8002170 <fonction_affichage+0x148>
		  {
			  taskENTER_CRITICAL();
 80020a0:	f00b f804 	bl	800d0ac <vPortEnterCritical>
			  filled = chessboard[i][j].isFilled;
 80020a4:	7ffa      	ldrb	r2, [r7, #31]
 80020a6:	7fbb      	ldrb	r3, [r7, #30]
 80020a8:	493c      	ldr	r1, [pc, #240]	; (800219c <fonction_affichage+0x174>)
 80020aa:	00d2      	lsls	r2, r2, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	440b      	add	r3, r1
 80020b2:	791b      	ldrb	r3, [r3, #4]
 80020b4:	743b      	strb	r3, [r7, #16]
			  taskEXIT_CRITICAL();
 80020b6:	f00b f82d 	bl	800d114 <vPortExitCritical>
			  if ( filled != 0)
 80020ba:	7c3b      	ldrb	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d054      	beq.n	800216a <fonction_affichage+0x142>
			  {
				  color = chessboard[i][j].piece_color;
 80020c0:	7ffa      	ldrb	r2, [r7, #31]
 80020c2:	7fbb      	ldrb	r3, [r7, #30]
 80020c4:	4935      	ldr	r1, [pc, #212]	; (800219c <fonction_affichage+0x174>)
 80020c6:	00d2      	lsls	r2, r2, #3
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	795b      	ldrb	r3, [r3, #5]
 80020d0:	747b      	strb	r3, [r7, #17]
				  xSemaphoreTake(mutexEcran, portMAX_DELAY);
 80020d2:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <fonction_affichage+0x178>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f04f 31ff 	mov.w	r1, #4294967295
 80020da:	4618      	mov	r0, r3
 80020dc:	f009 fb62 	bl	800b7a4 <xQueueSemaphoreTake>
				  if (color == 1) BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80020e0:	7c7b      	ldrb	r3, [r7, #17]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d103      	bne.n	80020ee <fonction_affichage+0xc6>
 80020e6:	482f      	ldr	r0, [pc, #188]	; (80021a4 <fonction_affichage+0x17c>)
 80020e8:	f000 fba6 	bl	8002838 <BSP_LCD_SetTextColor>
 80020ec:	e006      	b.n	80020fc <fonction_affichage+0xd4>
				  else if (color == 0) BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80020ee:	7c7b      	ldrb	r3, [r7, #17]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d103      	bne.n	80020fc <fonction_affichage+0xd4>
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f000 fb9e 	bl	8002838 <BSP_LCD_SetTextColor>
			      pointeurX = marge + pas / 2 + j * pas;
 80020fc:	7dbb      	ldrb	r3, [r7, #22]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	b2db      	uxtb	r3, r3
 8002106:	b29b      	uxth	r3, r3
 8002108:	4413      	add	r3, r2
 800210a:	b29a      	uxth	r2, r3
 800210c:	7fbb      	ldrb	r3, [r7, #30]
 800210e:	b299      	uxth	r1, r3
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	b29b      	uxth	r3, r3
 8002114:	fb11 f303 	smulbb	r3, r1, r3
 8002118:	b29b      	uxth	r3, r3
 800211a:	4413      	add	r3, r2
 800211c:	82bb      	strh	r3, [r7, #20]
			      pointeurY = marge + pas / 2 + i * pas;
 800211e:	7dbb      	ldrb	r3, [r7, #22]
 8002120:	b29a      	uxth	r2, r3
 8002122:	7dfb      	ldrb	r3, [r7, #23]
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	b2db      	uxtb	r3, r3
 8002128:	b29b      	uxth	r3, r3
 800212a:	4413      	add	r3, r2
 800212c:	b29a      	uxth	r2, r3
 800212e:	7ffb      	ldrb	r3, [r7, #31]
 8002130:	b299      	uxth	r1, r3
 8002132:	7dfb      	ldrb	r3, [r7, #23]
 8002134:	b29b      	uxth	r3, r3
 8002136:	fb11 f303 	smulbb	r3, r1, r3
 800213a:	b29b      	uxth	r3, r3
 800213c:	4413      	add	r3, r2
 800213e:	827b      	strh	r3, [r7, #18]
				  BSP_LCD_FillCircle(pointeurX, pointeurY, chessboard[i][j].rayon);
 8002140:	7ffa      	ldrb	r2, [r7, #31]
 8002142:	7fbb      	ldrb	r3, [r7, #30]
 8002144:	4915      	ldr	r1, [pc, #84]	; (800219c <fonction_affichage+0x174>)
 8002146:	00d2      	lsls	r2, r2, #3
 8002148:	4413      	add	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	440b      	add	r3, r1
 800214e:	799b      	ldrb	r3, [r3, #6]
 8002150:	b29a      	uxth	r2, r3
 8002152:	8a79      	ldrh	r1, [r7, #18]
 8002154:	8abb      	ldrh	r3, [r7, #20]
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fe24 	bl	8002da4 <BSP_LCD_FillCircle>
				  xSemaphoreGive(mutexEcran);
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <fonction_affichage+0x178>)
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	2300      	movs	r3, #0
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	f009 fa17 	bl	800b598 <xQueueGenericSend>
		  for (j = 0; j < 8; j++)
 800216a:	7fbb      	ldrb	r3, [r7, #30]
 800216c:	3301      	adds	r3, #1
 800216e:	77bb      	strb	r3, [r7, #30]
 8002170:	7fbb      	ldrb	r3, [r7, #30]
 8002172:	2b07      	cmp	r3, #7
 8002174:	d994      	bls.n	80020a0 <fonction_affichage+0x78>
	  for (i = 0; i < 8; i++)
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	3301      	adds	r3, #1
 800217a:	77fb      	strb	r3, [r7, #31]
 800217c:	7ffb      	ldrb	r3, [r7, #31]
 800217e:	2b07      	cmp	r3, #7
 8002180:	d98b      	bls.n	800209a <fonction_affichage+0x72>
			  }


		  }
	  }
    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	69b9      	ldr	r1, [r7, #24]
 8002188:	4618      	mov	r0, r3
 800218a:	f009 ff65 	bl	800c058 <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 800218e:	e76e      	b.n	800206e <fonction_affichage+0x46>
 8002190:	2000802c 	.word	0x2000802c
 8002194:	40021c00 	.word	0x40021c00
 8002198:	20000028 	.word	0x20000028
 800219c:	200080c8 	.word	0x200080c8
 80021a0:	20008528 	.word	0x20008528
 80021a4:	ff0000ff 	.word	0xff0000ff

080021a8 <fonction_select>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_select */
void fonction_select(void const * argument)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_select */
	//uint16_t MessageTS[1];
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 80021b0:	2364      	movs	r3, #100	; 0x64
 80021b2:	61bb      	str	r3, [r7, #24]
	static TS_StateTypeDef TS_State;
	//flag = 0;
	uint8_t posx = 0, posy = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	75fb      	strb	r3, [r7, #23]
 80021b8:	2300      	movs	r3, #0
 80021ba:	75bb      	strb	r3, [r7, #22]
	uint8_t line = 0, col = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	757b      	strb	r3, [r7, #21]
 80021c0:	2300      	movs	r3, #0
 80021c2:	753b      	strb	r3, [r7, #20]
	const uint8_t pas 			= 30;
 80021c4:	231e      	movs	r3, #30
 80021c6:	74fb      	strb	r3, [r7, #19]
	const uint8_t marge			= 15;
 80021c8:	230f      	movs	r3, #15
 80021ca:	74bb      	strb	r3, [r7, #18]
	uint8_t selected 			= 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
	  //xQueueReceiveFromISR(myQueueTSHandle, &MessageTS, portMAX_DELAY);
	  //if(MessageTS[0] == LCD_INT_Pin)
	  BSP_TS_GetState(&TS_State);
 80021d0:	4830      	ldr	r0, [pc, #192]	; (8002294 <fonction_select+0xec>)
 80021d2:	f001 fa4f 	bl	8003674 <BSP_TS_GetState>
	  if(TS_State.touchDetected)
 80021d6:	4b2f      	ldr	r3, [pc, #188]	; (8002294 <fonction_select+0xec>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d052      	beq.n	8002284 <fonction_select+0xdc>
	  {
		 // taskENTER_CRITICAL();
		 // flag = 0;
		 // taskEXIT_CRITICAL();

		  posx = TS_State.touchX[0];
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <fonction_select+0xec>)
 80021e0:	885b      	ldrh	r3, [r3, #2]
 80021e2:	75fb      	strb	r3, [r7, #23]
		  posy = TS_State.touchY[0];
 80021e4:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <fonction_select+0xec>)
 80021e6:	899b      	ldrh	r3, [r3, #12]
 80021e8:	75bb      	strb	r3, [r7, #22]

		  col = (posx - marge) / pas;
 80021ea:	7dfa      	ldrb	r2, [r7, #23]
 80021ec:	7cbb      	ldrb	r3, [r7, #18]
 80021ee:	1ad2      	subs	r2, r2, r3
 80021f0:	7cfb      	ldrb	r3, [r7, #19]
 80021f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80021f6:	753b      	strb	r3, [r7, #20]
		  line = (posy - marge) / pas;
 80021f8:	7dba      	ldrb	r2, [r7, #22]
 80021fa:	7cbb      	ldrb	r3, [r7, #18]
 80021fc:	1ad2      	subs	r2, r2, r3
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	fb92 f3f3 	sdiv	r3, r2, r3
 8002204:	757b      	strb	r3, [r7, #21]
		  taskENTER_CRITICAL();
 8002206:	f00a ff51 	bl	800d0ac <vPortEnterCritical>
		  if(chessboard[line][col].isFilled)
 800220a:	7d7a      	ldrb	r2, [r7, #21]
 800220c:	7d3b      	ldrb	r3, [r7, #20]
 800220e:	4922      	ldr	r1, [pc, #136]	; (8002298 <fonction_select+0xf0>)
 8002210:	00d2      	lsls	r2, r2, #3
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	791b      	ldrb	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d030      	beq.n	8002280 <fonction_select+0xd8>
		  {
			  if(chessboard[line][col].rayon < 12 && selected == 0)
 800221e:	7d7a      	ldrb	r2, [r7, #21]
 8002220:	7d3b      	ldrb	r3, [r7, #20]
 8002222:	491d      	ldr	r1, [pc, #116]	; (8002298 <fonction_select+0xf0>)
 8002224:	00d2      	lsls	r2, r2, #3
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	440b      	add	r3, r1
 800222c:	799b      	ldrb	r3, [r3, #6]
 800222e:	2b0b      	cmp	r3, #11
 8002230:	d80e      	bhi.n	8002250 <fonction_select+0xa8>
 8002232:	7ffb      	ldrb	r3, [r7, #31]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10b      	bne.n	8002250 <fonction_select+0xa8>
			  {
				  chessboard[line][col].rayon = 12;
 8002238:	7d7a      	ldrb	r2, [r7, #21]
 800223a:	7d3b      	ldrb	r3, [r7, #20]
 800223c:	4916      	ldr	r1, [pc, #88]	; (8002298 <fonction_select+0xf0>)
 800223e:	00d2      	lsls	r2, r2, #3
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	220c      	movs	r2, #12
 8002248:	719a      	strb	r2, [r3, #6]
				  selected = 1;
 800224a:	2301      	movs	r3, #1
 800224c:	77fb      	strb	r3, [r7, #31]
 800224e:	e017      	b.n	8002280 <fonction_select+0xd8>
			  }
			  else if (chessboard[line][col].rayon == 12)
 8002250:	7d7a      	ldrb	r2, [r7, #21]
 8002252:	7d3b      	ldrb	r3, [r7, #20]
 8002254:	4910      	ldr	r1, [pc, #64]	; (8002298 <fonction_select+0xf0>)
 8002256:	00d2      	lsls	r2, r2, #3
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	799b      	ldrb	r3, [r3, #6]
 8002260:	2b0c      	cmp	r3, #12
 8002262:	d10d      	bne.n	8002280 <fonction_select+0xd8>
			  {
				  chessboard[line][col].rayon = 9;
 8002264:	7d7a      	ldrb	r2, [r7, #21]
 8002266:	7d3b      	ldrb	r3, [r7, #20]
 8002268:	490b      	ldr	r1, [pc, #44]	; (8002298 <fonction_select+0xf0>)
 800226a:	00d2      	lsls	r2, r2, #3
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	2209      	movs	r2, #9
 8002274:	719a      	strb	r2, [r3, #6]
				  change = 1;
 8002276:	4b09      	ldr	r3, [pc, #36]	; (800229c <fonction_select+0xf4>)
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
				  selected = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	77fb      	strb	r3, [r7, #31]
			  }
		  }
		  taskEXIT_CRITICAL();
 8002280:	f00a ff48 	bl	800d114 <vPortExitCritical>

	  }

    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	69b9      	ldr	r1, [r7, #24]
 800228a:	4618      	mov	r0, r3
 800228c:	f009 fee4 	bl	800c058 <vTaskDelayUntil>
	  BSP_TS_GetState(&TS_State);
 8002290:	e79e      	b.n	80021d0 <fonction_select+0x28>
 8002292:	bf00      	nop
 8002294:	2000038c 	.word	0x2000038c
 8002298:	200080c8 	.word	0x200080c8
 800229c:	20000028 	.word	0x20000028

080022a0 <fonction_temporisation>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_temporisation */
void fonction_temporisation(void const * argument)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	vTaskDelay(20);
    taskENTER_CRITICAL();
	flag = 0;
	taskEXIT_CRITICAL();
	*/
	 vTaskDelay(20);
 80022a8:	2014      	movs	r0, #20
 80022aa:	f009 ff59 	bl	800c160 <vTaskDelay>
 80022ae:	e7fb      	b.n	80022a8 <fonction_temporisation+0x8>

080022b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a04      	ldr	r2, [pc, #16]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d101      	bne.n	80022c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022c2:	f002 fae7 	bl	8004894 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40001000 	.word	0x40001000

080022d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022d8:	b672      	cpsid	i
}
 80022da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022dc:	e7fe      	b.n	80022dc <Error_Handler+0x8>
	...

080022e0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	; 0x30
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a51      	ldr	r2, [pc, #324]	; (8002430 <I2Cx_MspInit+0x150>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d14d      	bne.n	800238c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80022f0:	4b50      	ldr	r3, [pc, #320]	; (8002434 <I2Cx_MspInit+0x154>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	4a4f      	ldr	r2, [pc, #316]	; (8002434 <I2Cx_MspInit+0x154>)
 80022f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022fa:	6313      	str	r3, [r2, #48]	; 0x30
 80022fc:	4b4d      	ldr	r3, [pc, #308]	; (8002434 <I2Cx_MspInit+0x154>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800230c:	2312      	movs	r3, #18
 800230e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002314:	2302      	movs	r3, #2
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002318:	2304      	movs	r3, #4
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	4845      	ldr	r0, [pc, #276]	; (8002438 <I2Cx_MspInit+0x158>)
 8002324:	f003 fe0a 	bl	8005f3c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800232c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	4619      	mov	r1, r3
 8002334:	4840      	ldr	r0, [pc, #256]	; (8002438 <I2Cx_MspInit+0x158>)
 8002336:	f003 fe01 	bl	8005f3c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800233a:	4b3e      	ldr	r3, [pc, #248]	; (8002434 <I2Cx_MspInit+0x154>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a3d      	ldr	r2, [pc, #244]	; (8002434 <I2Cx_MspInit+0x154>)
 8002340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <I2Cx_MspInit+0x154>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002352:	4b38      	ldr	r3, [pc, #224]	; (8002434 <I2Cx_MspInit+0x154>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a37      	ldr	r2, [pc, #220]	; (8002434 <I2Cx_MspInit+0x154>)
 8002358:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800235c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800235e:	4b35      	ldr	r3, [pc, #212]	; (8002434 <I2Cx_MspInit+0x154>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a34      	ldr	r2, [pc, #208]	; (8002434 <I2Cx_MspInit+0x154>)
 8002364:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002368:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	210f      	movs	r1, #15
 800236e:	2048      	movs	r0, #72	; 0x48
 8002370:	f002 feee 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002374:	2048      	movs	r0, #72	; 0x48
 8002376:	f002 ff07 	bl	8005188 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	210f      	movs	r1, #15
 800237e:	2049      	movs	r0, #73	; 0x49
 8002380:	f002 fee6 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002384:	2049      	movs	r0, #73	; 0x49
 8002386:	f002 feff 	bl	8005188 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800238a:	e04d      	b.n	8002428 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800238c:	4b29      	ldr	r3, [pc, #164]	; (8002434 <I2Cx_MspInit+0x154>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4a28      	ldr	r2, [pc, #160]	; (8002434 <I2Cx_MspInit+0x154>)
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	6313      	str	r3, [r2, #48]	; 0x30
 8002398:	4b26      	ldr	r3, [pc, #152]	; (8002434 <I2Cx_MspInit+0x154>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80023a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023a8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80023aa:	2312      	movs	r3, #18
 80023ac:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80023b2:	2302      	movs	r3, #2
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80023b6:	2304      	movs	r3, #4
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023ba:	f107 031c 	add.w	r3, r7, #28
 80023be:	4619      	mov	r1, r3
 80023c0:	481e      	ldr	r0, [pc, #120]	; (800243c <I2Cx_MspInit+0x15c>)
 80023c2:	f003 fdbb 	bl	8005f3c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80023c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	4619      	mov	r1, r3
 80023d2:	481a      	ldr	r0, [pc, #104]	; (800243c <I2Cx_MspInit+0x15c>)
 80023d4:	f003 fdb2 	bl	8005f3c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <I2Cx_MspInit+0x154>)
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	4a15      	ldr	r2, [pc, #84]	; (8002434 <I2Cx_MspInit+0x154>)
 80023de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023e2:	6413      	str	r3, [r2, #64]	; 0x40
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <I2Cx_MspInit+0x154>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80023f0:	4b10      	ldr	r3, [pc, #64]	; (8002434 <I2Cx_MspInit+0x154>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a0f      	ldr	r2, [pc, #60]	; (8002434 <I2Cx_MspInit+0x154>)
 80023f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023fa:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <I2Cx_MspInit+0x154>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <I2Cx_MspInit+0x154>)
 8002402:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002406:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	210f      	movs	r1, #15
 800240c:	201f      	movs	r0, #31
 800240e:	f002 fe9f 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002412:	201f      	movs	r0, #31
 8002414:	f002 feb8 	bl	8005188 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002418:	2200      	movs	r2, #0
 800241a:	210f      	movs	r1, #15
 800241c:	2020      	movs	r0, #32
 800241e:	f002 fe97 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002422:	2020      	movs	r0, #32
 8002424:	f002 feb0 	bl	8005188 <HAL_NVIC_EnableIRQ>
}
 8002428:	bf00      	nop
 800242a:	3730      	adds	r7, #48	; 0x30
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	200003b8 	.word	0x200003b8
 8002434:	40023800 	.word	0x40023800
 8002438:	40021c00 	.word	0x40021c00
 800243c:	40020400 	.word	0x40020400

08002440 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f004 fb69 	bl	8006b20 <HAL_I2C_GetState>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d125      	bne.n	80024a0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <I2Cx_Init+0x68>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d103      	bne.n	8002464 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a13      	ldr	r2, [pc, #76]	; (80024ac <I2Cx_Init+0x6c>)
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e002      	b.n	800246a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <I2Cx_Init+0x70>)
 8002468:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a11      	ldr	r2, [pc, #68]	; (80024b4 <I2Cx_Init+0x74>)
 800246e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ff23 	bl	80022e0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f004 f852 	bl	8006544 <HAL_I2C_Init>
  }
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	200003b8 	.word	0x200003b8
 80024ac:	40005c00 	.word	0x40005c00
 80024b0:	40005400 	.word	0x40005400
 80024b4:	40912732 	.word	0x40912732

080024b8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af04      	add	r7, sp, #16
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	4608      	mov	r0, r1
 80024c2:	4611      	mov	r1, r2
 80024c4:	461a      	mov	r2, r3
 80024c6:	4603      	mov	r3, r0
 80024c8:	72fb      	strb	r3, [r7, #11]
 80024ca:	460b      	mov	r3, r1
 80024cc:	813b      	strh	r3, [r7, #8]
 80024ce:	4613      	mov	r3, r2
 80024d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024d6:	7afb      	ldrb	r3, [r7, #11]
 80024d8:	b299      	uxth	r1, r3
 80024da:	88f8      	ldrh	r0, [r7, #6]
 80024dc:	893a      	ldrh	r2, [r7, #8]
 80024de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e2:	9302      	str	r3, [sp, #8]
 80024e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	4603      	mov	r3, r0
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f004 f9fc 	bl	80068ec <HAL_I2C_Mem_Read>
 80024f4:	4603      	mov	r3, r0
 80024f6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d004      	beq.n	8002508 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80024fe:	7afb      	ldrb	r3, [r7, #11]
 8002500:	4619      	mov	r1, r3
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 f832 	bl	800256c <I2Cx_Error>
  }
  return status;    
 8002508:	7dfb      	ldrb	r3, [r7, #23]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b08a      	sub	sp, #40	; 0x28
 8002516:	af04      	add	r7, sp, #16
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	4608      	mov	r0, r1
 800251c:	4611      	mov	r1, r2
 800251e:	461a      	mov	r2, r3
 8002520:	4603      	mov	r3, r0
 8002522:	72fb      	strb	r3, [r7, #11]
 8002524:	460b      	mov	r3, r1
 8002526:	813b      	strh	r3, [r7, #8]
 8002528:	4613      	mov	r3, r2
 800252a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002530:	7afb      	ldrb	r3, [r7, #11]
 8002532:	b299      	uxth	r1, r3
 8002534:	88f8      	ldrh	r0, [r7, #6]
 8002536:	893a      	ldrh	r2, [r7, #8]
 8002538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800253c:	9302      	str	r3, [sp, #8]
 800253e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	4603      	mov	r3, r0
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f004 f8bb 	bl	80066c4 <HAL_I2C_Mem_Write>
 800254e:	4603      	mov	r3, r0
 8002550:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002558:	7afb      	ldrb	r3, [r7, #11]
 800255a:	4619      	mov	r1, r3
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f805 	bl	800256c <I2Cx_Error>
  }
  return status;
 8002562:	7dfb      	ldrb	r3, [r7, #23]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f004 f873 	bl	8006664 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ff5e 	bl	8002440 <I2Cx_Init>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <TS_IO_Init+0x10>)
 8002592:	f7ff ff55 	bl	8002440 <I2Cx_Init>
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200003b8 	.word	0x200003b8

080025a0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	4603      	mov	r3, r0
 80025a8:	71fb      	strb	r3, [r7, #7]
 80025aa:	460b      	mov	r3, r1
 80025ac:	71bb      	strb	r3, [r7, #6]
 80025ae:	4613      	mov	r3, r2
 80025b0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80025b2:	79bb      	ldrb	r3, [r7, #6]
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	79f9      	ldrb	r1, [r7, #7]
 80025b8:	2301      	movs	r3, #1
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	1d7b      	adds	r3, r7, #5
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2301      	movs	r3, #1
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <TS_IO_Write+0x30>)
 80025c4:	f7ff ffa5 	bl	8002512 <I2Cx_WriteMultiple>
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	200003b8 	.word	0x200003b8

080025d4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	4603      	mov	r3, r0
 80025dc:	460a      	mov	r2, r1
 80025de:	71fb      	strb	r3, [r7, #7]
 80025e0:	4613      	mov	r3, r2
 80025e2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80025e8:	79bb      	ldrb	r3, [r7, #6]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	79f9      	ldrb	r1, [r7, #7]
 80025ee:	2301      	movs	r3, #1
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	f107 030f 	add.w	r3, r7, #15
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2301      	movs	r3, #1
 80025fa:	4804      	ldr	r0, [pc, #16]	; (800260c <TS_IO_Read+0x38>)
 80025fc:	f7ff ff5c 	bl	80024b8 <I2Cx_ReadMultiple>

  return read_value;
 8002600:	7bfb      	ldrb	r3, [r7, #15]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200003b8 	.word	0x200003b8

08002610 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f002 f95b 	bl	80048d4 <HAL_Delay>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800262c:	4b31      	ldr	r3, [pc, #196]	; (80026f4 <BSP_LCD_Init+0xcc>)
 800262e:	2228      	movs	r2, #40	; 0x28
 8002630:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002632:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <BSP_LCD_Init+0xcc>)
 8002634:	2209      	movs	r2, #9
 8002636:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002638:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <BSP_LCD_Init+0xcc>)
 800263a:	2235      	movs	r2, #53	; 0x35
 800263c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800263e:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <BSP_LCD_Init+0xcc>)
 8002640:	220b      	movs	r2, #11
 8002642:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002644:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <BSP_LCD_Init+0xcc>)
 8002646:	f240 121b 	movw	r2, #283	; 0x11b
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800264c:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <BSP_LCD_Init+0xcc>)
 800264e:	f240 2215 	movw	r2, #533	; 0x215
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <BSP_LCD_Init+0xcc>)
 8002656:	f240 121d 	movw	r2, #285	; 0x11d
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <BSP_LCD_Init+0xcc>)
 800265e:	f240 2235 	movw	r2, #565	; 0x235
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002664:	2100      	movs	r1, #0
 8002666:	4823      	ldr	r0, [pc, #140]	; (80026f4 <BSP_LCD_Init+0xcc>)
 8002668:	f000 fd34 	bl	80030d4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800266c:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <BSP_LCD_Init+0xcc>)
 800266e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002672:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002674:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <BSP_LCD_Init+0xcc>)
 8002676:	f44f 7288 	mov.w	r2, #272	; 0x110
 800267a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <BSP_LCD_Init+0xcc>)
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <BSP_LCD_Init+0xcc>)
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <BSP_LCD_Init+0xcc>)
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002694:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <BSP_LCD_Init+0xcc>)
 8002696:	2200      	movs	r2, #0
 8002698:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <BSP_LCD_Init+0xcc>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <BSP_LCD_Init+0xcc>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <BSP_LCD_Init+0xcc>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <BSP_LCD_Init+0xcc>)
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <BSP_LCD_Init+0xd0>)
 80026b0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80026b2:	4810      	ldr	r0, [pc, #64]	; (80026f4 <BSP_LCD_Init+0xcc>)
 80026b4:	f004 ff50 	bl	8007558 <HAL_LTDC_GetState>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d103      	bne.n	80026c6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80026be:	2100      	movs	r1, #0
 80026c0:	480c      	ldr	r0, [pc, #48]	; (80026f4 <BSP_LCD_Init+0xcc>)
 80026c2:	f000 fc2d 	bl	8002f20 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80026c6:	480b      	ldr	r0, [pc, #44]	; (80026f4 <BSP_LCD_Init+0xcc>)
 80026c8:	f004 fd76 	bl	80071b8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80026cc:	2201      	movs	r2, #1
 80026ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026d2:	480a      	ldr	r0, [pc, #40]	; (80026fc <BSP_LCD_Init+0xd4>)
 80026d4:	f003 feea 	bl	80064ac <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80026d8:	2201      	movs	r2, #1
 80026da:	2108      	movs	r1, #8
 80026dc:	4808      	ldr	r0, [pc, #32]	; (8002700 <BSP_LCD_Init+0xd8>)
 80026de:	f003 fee5 	bl	80064ac <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80026e2:	f000 fda3 	bl	800322c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80026e6:	4807      	ldr	r0, [pc, #28]	; (8002704 <BSP_LCD_Init+0xdc>)
 80026e8:	f000 f8d8 	bl	800289c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200086f8 	.word	0x200086f8
 80026f8:	40016800 	.word	0x40016800
 80026fc:	40022000 	.word	0x40022000
 8002700:	40022800 	.word	0x40022800
 8002704:	2000002c 	.word	0x2000002c

08002708 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <BSP_LCD_GetXSize+0x20>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a06      	ldr	r2, [pc, #24]	; (800272c <BSP_LCD_GetXSize+0x24>)
 8002712:	2134      	movs	r1, #52	; 0x34
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3360      	adds	r3, #96	; 0x60
 800271c:	681b      	ldr	r3, [r3, #0]
}
 800271e:	4618      	mov	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	20000444 	.word	0x20000444
 800272c:	200086f8 	.word	0x200086f8

08002730 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <BSP_LCD_GetYSize+0x20>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a06      	ldr	r2, [pc, #24]	; (8002754 <BSP_LCD_GetYSize+0x24>)
 800273a:	2134      	movs	r1, #52	; 0x34
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3364      	adds	r3, #100	; 0x64
 8002744:	681b      	ldr	r3, [r3, #0]
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	20000444 	.word	0x20000444
 8002754:	200086f8 	.word	0x200086f8

08002758 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002758:	b580      	push	{r7, lr}
 800275a:	b090      	sub	sp, #64	; 0x40
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002768:	f7ff ffce 	bl	8002708 <BSP_LCD_GetXSize>
 800276c:	4603      	mov	r3, r0
 800276e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002774:	f7ff ffdc 	bl	8002730 <BSP_LCD_GetYSize>
 8002778:	4603      	mov	r3, r0
 800277a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002784:	23ff      	movs	r3, #255	; 0xff
 8002786:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800279e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80027a4:	2307      	movs	r3, #7
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80027a8:	f7ff ffae 	bl	8002708 <BSP_LCD_GetXSize>
 80027ac:	4603      	mov	r3, r0
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80027b0:	f7ff ffbe 	bl	8002730 <BSP_LCD_GetYSize>
 80027b4:	4603      	mov	r3, r0
 80027b6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	4619      	mov	r1, r3
 80027c0:	4812      	ldr	r0, [pc, #72]	; (800280c <BSP_LCD_LayerDefaultInit+0xb4>)
 80027c2:	f004 fe8b 	bl	80074dc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80027c6:	88fa      	ldrh	r2, [r7, #6]
 80027c8:	4911      	ldr	r1, [pc, #68]	; (8002810 <BSP_LCD_LayerDefaultInit+0xb8>)
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	3304      	adds	r3, #4
 80027d6:	f04f 32ff 	mov.w	r2, #4294967295
 80027da:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	490c      	ldr	r1, [pc, #48]	; (8002810 <BSP_LCD_LayerDefaultInit+0xb8>)
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3308      	adds	r3, #8
 80027ec:	4a09      	ldr	r2, [pc, #36]	; (8002814 <BSP_LCD_LayerDefaultInit+0xbc>)
 80027ee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80027f0:	88fa      	ldrh	r2, [r7, #6]
 80027f2:	4907      	ldr	r1, [pc, #28]	; (8002810 <BSP_LCD_LayerDefaultInit+0xb8>)
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002802:	601a      	str	r2, [r3, #0]
}
 8002804:	bf00      	nop
 8002806:	3740      	adds	r7, #64	; 0x40
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	200086f8 	.word	0x200086f8
 8002810:	20000448 	.word	0x20000448
 8002814:	2000002c 	.word	0x2000002c

08002818 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002820:	4a04      	ldr	r2, [pc, #16]	; (8002834 <BSP_LCD_SelectLayer+0x1c>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6013      	str	r3, [r2, #0]
} 
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000444 	.word	0x20000444

08002838 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <BSP_LCD_SetTextColor+0x28>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4907      	ldr	r1, [pc, #28]	; (8002864 <BSP_LCD_SetTextColor+0x2c>)
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	601a      	str	r2, [r3, #0]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	20000444 	.word	0x20000444
 8002864:	20000448 	.word	0x20000448

08002868 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <BSP_LCD_SetBackColor+0x2c>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4908      	ldr	r1, [pc, #32]	; (8002898 <BSP_LCD_SetBackColor+0x30>)
 8002876:	4613      	mov	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	3304      	adds	r3, #4
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	601a      	str	r2, [r3, #0]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000444 	.word	0x20000444
 8002898:	20000448 	.word	0x20000448

0800289c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <BSP_LCD_SetFont+0x2c>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4908      	ldr	r1, [pc, #32]	; (80028cc <BSP_LCD_SetFont+0x30>)
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	3308      	adds	r3, #8
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	601a      	str	r2, [r3, #0]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000444 	.word	0x20000444
 80028cc:	20000448 	.word	0x20000448

080028d0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80028d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <BSP_LCD_Clear+0x48>)
 80028da:	681c      	ldr	r4, [r3, #0]
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <BSP_LCD_Clear+0x48>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0e      	ldr	r2, [pc, #56]	; (800291c <BSP_LCD_Clear+0x4c>)
 80028e2:	2134      	movs	r1, #52	; 0x34
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	335c      	adds	r3, #92	; 0x5c
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	461e      	mov	r6, r3
 80028f0:	f7ff ff0a 	bl	8002708 <BSP_LCD_GetXSize>
 80028f4:	4605      	mov	r5, r0
 80028f6:	f7ff ff1b 	bl	8002730 <BSP_LCD_GetYSize>
 80028fa:	4602      	mov	r2, r0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	9301      	str	r3, [sp, #4]
 8002900:	2300      	movs	r3, #0
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	4613      	mov	r3, r2
 8002906:	462a      	mov	r2, r5
 8002908:	4631      	mov	r1, r6
 800290a:	4620      	mov	r0, r4
 800290c:	f000 fbfe 	bl	800310c <LL_FillBuffer>
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002918:	20000444 	.word	0x20000444
 800291c:	200086f8 	.word	0x200086f8

08002920 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af02      	add	r7, sp, #8
 8002926:	4603      	mov	r3, r0
 8002928:	80fb      	strh	r3, [r7, #6]
 800292a:	460b      	mov	r3, r1
 800292c:	80bb      	strh	r3, [r7, #4]
 800292e:	4613      	mov	r3, r2
 8002930:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002936:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <BSP_LCD_DrawHLine+0xb0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a26      	ldr	r2, [pc, #152]	; (80029d4 <BSP_LCD_DrawHLine+0xb4>)
 800293c:	2134      	movs	r1, #52	; 0x34
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3348      	adds	r3, #72	; 0x48
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d114      	bne.n	8002976 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800294c:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <BSP_LCD_DrawHLine+0xb0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <BSP_LCD_DrawHLine+0xb4>)
 8002952:	2134      	movs	r1, #52	; 0x34
 8002954:	fb01 f303 	mul.w	r3, r1, r3
 8002958:	4413      	add	r3, r2
 800295a:	335c      	adds	r3, #92	; 0x5c
 800295c:	681c      	ldr	r4, [r3, #0]
 800295e:	f7ff fed3 	bl	8002708 <BSP_LCD_GetXSize>
 8002962:	4602      	mov	r2, r0
 8002964:	88bb      	ldrh	r3, [r7, #4]
 8002966:	fb03 f202 	mul.w	r2, r3, r2
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	4413      	add	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4423      	add	r3, r4
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e013      	b.n	800299e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002976:	4b16      	ldr	r3, [pc, #88]	; (80029d0 <BSP_LCD_DrawHLine+0xb0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a16      	ldr	r2, [pc, #88]	; (80029d4 <BSP_LCD_DrawHLine+0xb4>)
 800297c:	2134      	movs	r1, #52	; 0x34
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	335c      	adds	r3, #92	; 0x5c
 8002986:	681c      	ldr	r4, [r3, #0]
 8002988:	f7ff febe 	bl	8002708 <BSP_LCD_GetXSize>
 800298c:	4602      	mov	r2, r0
 800298e:	88bb      	ldrh	r3, [r7, #4]
 8002990:	fb03 f202 	mul.w	r2, r3, r2
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4423      	add	r3, r4
 800299c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <BSP_LCD_DrawHLine+0xb0>)
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	68f9      	ldr	r1, [r7, #12]
 80029a4:	887c      	ldrh	r4, [r7, #2]
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <BSP_LCD_DrawHLine+0xb0>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4d0b      	ldr	r5, [pc, #44]	; (80029d8 <BSP_LCD_DrawHLine+0xb8>)
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	442b      	add	r3, r5
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	2300      	movs	r3, #0
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	2301      	movs	r3, #1
 80029c0:	4622      	mov	r2, r4
 80029c2:	f000 fba3 	bl	800310c <LL_FillBuffer>
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bdb0      	pop	{r4, r5, r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000444 	.word	0x20000444
 80029d4:	200086f8 	.word	0x200086f8
 80029d8:	20000448 	.word	0x20000448

080029dc <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
 80029e6:	460b      	mov	r3, r1
 80029e8:	80bb      	strh	r3, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	f1c3 0303 	rsb	r3, r3, #3
 80029f6:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80029fc:	887b      	ldrh	r3, [r7, #2]
 80029fe:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002a00:	e0c7      	b.n	8002b92 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	4413      	add	r3, r2
 8002a0a:	b298      	uxth	r0, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	88ba      	ldrh	r2, [r7, #4]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	b299      	uxth	r1, r3
 8002a16:	4b64      	ldr	r3, [pc, #400]	; (8002ba8 <BSP_LCD_DrawCircle+0x1cc>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4c64      	ldr	r4, [pc, #400]	; (8002bac <BSP_LCD_DrawCircle+0x1d0>)
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4423      	add	r3, r4
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f000 f8c1 	bl	8002bb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	b298      	uxth	r0, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	88ba      	ldrh	r2, [r7, #4]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	b299      	uxth	r1, r3
 8002a42:	4b59      	ldr	r3, [pc, #356]	; (8002ba8 <BSP_LCD_DrawCircle+0x1cc>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4c59      	ldr	r4, [pc, #356]	; (8002bac <BSP_LCD_DrawCircle+0x1d0>)
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4423      	add	r3, r4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	f000 f8ab 	bl	8002bb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	4413      	add	r3, r2
 8002a62:	b298      	uxth	r0, r3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	88ba      	ldrh	r2, [r7, #4]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	b299      	uxth	r1, r3
 8002a6e:	4b4e      	ldr	r3, [pc, #312]	; (8002ba8 <BSP_LCD_DrawCircle+0x1cc>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4c4e      	ldr	r4, [pc, #312]	; (8002bac <BSP_LCD_DrawCircle+0x1d0>)
 8002a74:	4613      	mov	r3, r2
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4423      	add	r3, r4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	f000 f895 	bl	8002bb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	b298      	uxth	r0, r3
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	88ba      	ldrh	r2, [r7, #4]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	b299      	uxth	r1, r3
 8002a9a:	4b43      	ldr	r3, [pc, #268]	; (8002ba8 <BSP_LCD_DrawCircle+0x1cc>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4c43      	ldr	r4, [pc, #268]	; (8002bac <BSP_LCD_DrawCircle+0x1d0>)
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4423      	add	r3, r4
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	f000 f87f 	bl	8002bb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	4413      	add	r3, r2
 8002aba:	b298      	uxth	r0, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	88bb      	ldrh	r3, [r7, #4]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	b299      	uxth	r1, r3
 8002ac6:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <BSP_LCD_DrawCircle+0x1cc>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	4c38      	ldr	r4, [pc, #224]	; (8002bac <BSP_LCD_DrawCircle+0x1d0>)
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4423      	add	r3, r4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f000 f869 	bl	8002bb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	88fa      	ldrh	r2, [r7, #6]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	b298      	uxth	r0, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	88bb      	ldrh	r3, [r7, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	b299      	uxth	r1, r3
 8002af2:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <BSP_LCD_DrawCircle+0x1cc>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4c2d      	ldr	r4, [pc, #180]	; (8002bac <BSP_LCD_DrawCircle+0x1d0>)
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4423      	add	r3, r4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	f000 f853 	bl	8002bb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	4413      	add	r3, r2
 8002b12:	b298      	uxth	r0, r3
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	88bb      	ldrh	r3, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	b299      	uxth	r1, r3
 8002b1e:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <BSP_LCD_DrawCircle+0x1cc>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4c22      	ldr	r4, [pc, #136]	; (8002bac <BSP_LCD_DrawCircle+0x1d0>)
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4423      	add	r3, r4
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	f000 f83d 	bl	8002bb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	88fa      	ldrh	r2, [r7, #6]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	b298      	uxth	r0, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	88bb      	ldrh	r3, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	b299      	uxth	r1, r3
 8002b4a:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <BSP_LCD_DrawCircle+0x1cc>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4c17      	ldr	r4, [pc, #92]	; (8002bac <BSP_LCD_DrawCircle+0x1d0>)
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4423      	add	r3, r4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f000 f827 	bl	8002bb0 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	da06      	bge.n	8002b76 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	009a      	lsls	r2, r3, #2
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	4413      	add	r3, r2
 8002b70:	3306      	adds	r3, #6
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	e00a      	b.n	8002b8c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	009a      	lsls	r2, r3, #2
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	4413      	add	r3, r2
 8002b82:	330a      	adds	r3, #10
 8002b84:	617b      	str	r3, [r7, #20]
      current_y--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	f67f af33 	bls.w	8002a02 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd90      	pop	{r4, r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000444 	.word	0x20000444
 8002bac:	20000448 	.word	0x20000448

08002bb0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	603a      	str	r2, [r7, #0]
 8002bba:	80fb      	strh	r3, [r7, #6]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <BSP_LCD_DrawPixel+0x88>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <BSP_LCD_DrawPixel+0x8c>)
 8002bc6:	2134      	movs	r1, #52	; 0x34
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	4413      	add	r3, r2
 8002bce:	3348      	adds	r3, #72	; 0x48
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d116      	bne.n	8002c04 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002bd6:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <BSP_LCD_DrawPixel+0x88>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <BSP_LCD_DrawPixel+0x8c>)
 8002bdc:	2134      	movs	r1, #52	; 0x34
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	335c      	adds	r3, #92	; 0x5c
 8002be6:	681c      	ldr	r4, [r3, #0]
 8002be8:	88bd      	ldrh	r5, [r7, #4]
 8002bea:	f7ff fd8d 	bl	8002708 <BSP_LCD_GetXSize>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	fb03 f205 	mul.w	r2, r3, r5
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4423      	add	r3, r4
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b292      	uxth	r2, r2
 8002c00:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002c02:	e015      	b.n	8002c30 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <BSP_LCD_DrawPixel+0x88>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <BSP_LCD_DrawPixel+0x8c>)
 8002c0a:	2134      	movs	r1, #52	; 0x34
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	335c      	adds	r3, #92	; 0x5c
 8002c14:	681c      	ldr	r4, [r3, #0]
 8002c16:	88bd      	ldrh	r5, [r7, #4]
 8002c18:	f7ff fd76 	bl	8002708 <BSP_LCD_GetXSize>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	fb03 f205 	mul.w	r2, r3, r5
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4423      	add	r3, r4
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	6013      	str	r3, [r2, #0]
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bdb0      	pop	{r4, r5, r7, pc}
 8002c38:	20000444 	.word	0x20000444
 8002c3c:	200086f8 	.word	0x200086f8

08002c40 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b08b      	sub	sp, #44	; 0x2c
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	330a      	adds	r3, #10
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	330b      	adds	r3, #11
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	441a      	add	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	330c      	adds	r3, #12
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	041b      	lsls	r3, r3, #16
 8002c7a:	441a      	add	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	330d      	adds	r3, #13
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	4413      	add	r3, r2
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3312      	adds	r3, #18
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3313      	adds	r3, #19
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	441a      	add	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3314      	adds	r3, #20
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	041b      	lsls	r3, r3, #16
 8002ca2:	441a      	add	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3315      	adds	r3, #21
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	061b      	lsls	r3, r3, #24
 8002cac:	4413      	add	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3316      	adds	r3, #22
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3317      	adds	r3, #23
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	441a      	add	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3318      	adds	r3, #24
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	041b      	lsls	r3, r3, #16
 8002cca:	441a      	add	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3319      	adds	r3, #25
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	061b      	lsls	r3, r3, #24
 8002cd4:	4413      	add	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	331c      	adds	r3, #28
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	331d      	adds	r3, #29
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	4413      	add	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <BSP_LCD_DrawBitmap+0x15c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a2b      	ldr	r2, [pc, #172]	; (8002da0 <BSP_LCD_DrawBitmap+0x160>)
 8002cf2:	2134      	movs	r1, #52	; 0x34
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	335c      	adds	r3, #92	; 0x5c
 8002cfc:	681c      	ldr	r4, [r3, #0]
 8002cfe:	f7ff fd03 	bl	8002708 <BSP_LCD_GetXSize>
 8002d02:	4602      	mov	r2, r0
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	fb03 f202 	mul.w	r2, r3, r2
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4423      	add	r3, r4
 8002d12:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	3b20      	subs	r3, #32
 8002d18:	2b07      	cmp	r3, #7
 8002d1a:	d802      	bhi.n	8002d22 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	e008      	b.n	8002d34 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	3b10      	subs	r3, #16
 8002d26:	2b07      	cmp	r3, #7
 8002d28:	d802      	bhi.n	8002d30 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	e001      	b.n	8002d34 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8002d30:	2301      	movs	r3, #1
 8002d32:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	08d2      	lsrs	r2, r2, #3
 8002d42:	fb02 f203 	mul.w	r2, r2, r3
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	4413      	add	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
 8002d54:	e018      	b.n	8002d88 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8002d56:	6a39      	ldr	r1, [r7, #32]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fa21 	bl	80031a4 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8002d62:	f7ff fcd1 	bl	8002708 <BSP_LCD_GetXSize>
 8002d66:	4603      	mov	r3, r0
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	6a3a      	ldr	r2, [r7, #32]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	08db      	lsrs	r3, r3, #3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	425b      	negs	r3, r3
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d84:	3301      	adds	r3, #1
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
 8002d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d3e2      	bcc.n	8002d56 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	372c      	adds	r7, #44	; 0x2c
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000444 	.word	0x20000444
 8002da0:	200086f8 	.word	0x200086f8

08002da4 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	80fb      	strh	r3, [r7, #6]
 8002dae:	460b      	mov	r3, r1
 8002db0:	80bb      	strh	r3, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002db6:	887b      	ldrh	r3, [r7, #2]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	f1c3 0303 	rsb	r3, r3, #3
 8002dbe:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002dc8:	4b44      	ldr	r3, [pc, #272]	; (8002edc <BSP_LCD_FillCircle+0x138>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4944      	ldr	r1, [pc, #272]	; (8002ee0 <BSP_LCD_FillCircle+0x13c>)
 8002dce:	4613      	mov	r3, r2
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fd2c 	bl	8002838 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8002de0:	e061      	b.n	8002ea6 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d021      	beq.n	8002e2c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	b298      	uxth	r0, r3
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	88bb      	ldrh	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	b299      	uxth	r1, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	461a      	mov	r2, r3
 8002e06:	f7ff fd8b 	bl	8002920 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	b298      	uxth	r0, r3
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	88ba      	ldrh	r2, [r7, #4]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	b299      	uxth	r1, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	f7ff fd7a 	bl	8002920 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d021      	beq.n	8002e76 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	88fa      	ldrh	r2, [r7, #6]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	b298      	uxth	r0, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	88ba      	ldrh	r2, [r7, #4]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	b299      	uxth	r1, r3
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f7ff fd66 	bl	8002920 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	88fa      	ldrh	r2, [r7, #6]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	b298      	uxth	r0, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	88bb      	ldrh	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	b299      	uxth	r1, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	f7ff fd55 	bl	8002920 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	da06      	bge.n	8002e8a <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	009a      	lsls	r2, r3, #2
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	4413      	add	r3, r2
 8002e84:	3306      	adds	r3, #6
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	e00a      	b.n	8002ea0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	009a      	lsls	r2, r3, #2
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	4413      	add	r3, r2
 8002e96:	330a      	adds	r3, #10
 8002e98:	617b      	str	r3, [r7, #20]
      current_y--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d999      	bls.n	8002de2 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <BSP_LCD_FillCircle+0x138>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	490b      	ldr	r1, [pc, #44]	; (8002ee0 <BSP_LCD_FillCircle+0x13c>)
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fcb9 	bl	8002838 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	88b9      	ldrh	r1, [r7, #4]
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fd85 	bl	80029dc <BSP_LCD_DrawCircle>
}
 8002ed2:	bf00      	nop
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000444 	.word	0x20000444
 8002ee0:	20000448 	.word	0x20000448

08002ee4 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <BSP_LCD_DisplayOn+0x30>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <BSP_LCD_DisplayOn+0x30>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002efe:	4806      	ldr	r0, [pc, #24]	; (8002f18 <BSP_LCD_DisplayOn+0x34>)
 8002f00:	f003 fad4 	bl	80064ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002f04:	2201      	movs	r2, #1
 8002f06:	2108      	movs	r1, #8
 8002f08:	4804      	ldr	r0, [pc, #16]	; (8002f1c <BSP_LCD_DisplayOn+0x38>)
 8002f0a:	f003 facf 	bl	80064ac <HAL_GPIO_WritePin>
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200086f8 	.word	0x200086f8
 8002f18:	40022000 	.word	0x40022000
 8002f1c:	40022800 	.word	0x40022800

08002f20 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b090      	sub	sp, #64	; 0x40
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002f2a:	4b64      	ldr	r3, [pc, #400]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	4a63      	ldr	r2, [pc, #396]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f34:	6453      	str	r3, [r2, #68]	; 0x44
 8002f36:	4b61      	ldr	r3, [pc, #388]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f42:	4b5e      	ldr	r3, [pc, #376]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	4a5d      	ldr	r2, [pc, #372]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f5a:	4b58      	ldr	r3, [pc, #352]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a57      	ldr	r2, [pc, #348]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f60:	f043 0310 	orr.w	r3, r3, #16
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b55      	ldr	r3, [pc, #340]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	623b      	str	r3, [r7, #32]
 8002f70:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f72:	4b52      	ldr	r3, [pc, #328]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a51      	ldr	r2, [pc, #324]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b4f      	ldr	r3, [pc, #316]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f8a:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a4b      	ldr	r2, [pc, #300]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b49      	ldr	r3, [pc, #292]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	61bb      	str	r3, [r7, #24]
 8002fa0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002fa2:	4b46      	ldr	r3, [pc, #280]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a45      	ldr	r2, [pc, #276]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002fa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b43      	ldr	r3, [pc, #268]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002fba:	4b40      	ldr	r3, [pc, #256]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	4a3f      	ldr	r2, [pc, #252]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002fc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc6:	4b3d      	ldr	r3, [pc, #244]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002fd2:	4b3a      	ldr	r3, [pc, #232]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	4a39      	ldr	r2, [pc, #228]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002fea:	4b34      	ldr	r3, [pc, #208]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a33      	ldr	r2, [pc, #204]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002ff0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b31      	ldr	r3, [pc, #196]	; (80030bc <BSP_LCD_MspInit+0x19c>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003002:	2310      	movs	r3, #16
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003006:	2302      	movs	r3, #2
 8003008:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800300e:	2302      	movs	r3, #2
 8003010:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003012:	230e      	movs	r3, #14
 8003014:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800301a:	4619      	mov	r1, r3
 800301c:	4828      	ldr	r0, [pc, #160]	; (80030c0 <BSP_LCD_MspInit+0x1a0>)
 800301e:	f002 ff8d 	bl	8005f3c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003028:	2302      	movs	r3, #2
 800302a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800302c:	2309      	movs	r3, #9
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003034:	4619      	mov	r1, r3
 8003036:	4823      	ldr	r0, [pc, #140]	; (80030c4 <BSP_LCD_MspInit+0x1a4>)
 8003038:	f002 ff80 	bl	8005f3c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800303c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003042:	2302      	movs	r3, #2
 8003044:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003046:	230e      	movs	r3, #14
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800304a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800304e:	4619      	mov	r1, r3
 8003050:	481d      	ldr	r0, [pc, #116]	; (80030c8 <BSP_LCD_MspInit+0x1a8>)
 8003052:	f002 ff73 	bl	8005f3c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003056:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003060:	230e      	movs	r3, #14
 8003062:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003068:	4619      	mov	r1, r3
 800306a:	4818      	ldr	r0, [pc, #96]	; (80030cc <BSP_LCD_MspInit+0x1ac>)
 800306c:	f002 ff66 	bl	8005f3c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003070:	23f7      	movs	r3, #247	; 0xf7
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003074:	2302      	movs	r3, #2
 8003076:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003078:	230e      	movs	r3, #14
 800307a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800307c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003080:	4619      	mov	r1, r3
 8003082:	4813      	ldr	r0, [pc, #76]	; (80030d0 <BSP_LCD_MspInit+0x1b0>)
 8003084:	f002 ff5a 	bl	8005f3c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800308e:	2301      	movs	r3, #1
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003096:	4619      	mov	r1, r3
 8003098:	480b      	ldr	r0, [pc, #44]	; (80030c8 <BSP_LCD_MspInit+0x1a8>)
 800309a:	f002 ff4f 	bl	8005f3c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800309e:	2308      	movs	r3, #8
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80030a2:	2301      	movs	r3, #1
 80030a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80030a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030aa:	4619      	mov	r1, r3
 80030ac:	4808      	ldr	r0, [pc, #32]	; (80030d0 <BSP_LCD_MspInit+0x1b0>)
 80030ae:	f002 ff45 	bl	8005f3c <HAL_GPIO_Init>
}
 80030b2:	bf00      	nop
 80030b4:	3740      	adds	r7, #64	; 0x40
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40021800 	.word	0x40021800
 80030c8:	40022000 	.word	0x40022000
 80030cc:	40022400 	.word	0x40022400
 80030d0:	40022800 	.word	0x40022800

080030d4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <BSP_LCD_ClockConfig+0x34>)
 80030e0:	2208      	movs	r2, #8
 80030e2:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80030e4:	4b08      	ldr	r3, [pc, #32]	; (8003108 <BSP_LCD_ClockConfig+0x34>)
 80030e6:	22c0      	movs	r2, #192	; 0xc0
 80030e8:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80030ea:	4b07      	ldr	r3, [pc, #28]	; (8003108 <BSP_LCD_ClockConfig+0x34>)
 80030ec:	2205      	movs	r2, #5
 80030ee:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <BSP_LCD_ClockConfig+0x34>)
 80030f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030f6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80030f8:	4803      	ldr	r0, [pc, #12]	; (8003108 <BSP_LCD_ClockConfig+0x34>)
 80030fa:	f005 f8e1 	bl	80082c0 <HAL_RCCEx_PeriphCLKConfig>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000460 	.word	0x20000460

0800310c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
 8003118:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800311a:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <LL_FillBuffer+0x88>)
 800311c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003120:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003122:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <LL_FillBuffer+0x8c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1d      	ldr	r2, [pc, #116]	; (800319c <LL_FillBuffer+0x90>)
 8003128:	2134      	movs	r1, #52	; 0x34
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	3348      	adds	r3, #72	; 0x48
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d103      	bne.n	8003140 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003138:	4b16      	ldr	r3, [pc, #88]	; (8003194 <LL_FillBuffer+0x88>)
 800313a:	2202      	movs	r2, #2
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	e002      	b.n	8003146 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <LL_FillBuffer+0x88>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003146:	4a13      	ldr	r2, [pc, #76]	; (8003194 <LL_FillBuffer+0x88>)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <LL_FillBuffer+0x88>)
 800314e:	4a14      	ldr	r2, [pc, #80]	; (80031a0 <LL_FillBuffer+0x94>)
 8003150:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003152:	4810      	ldr	r0, [pc, #64]	; (8003194 <LL_FillBuffer+0x88>)
 8003154:	f002 fb56 	bl	8005804 <HAL_DMA2D_Init>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d115      	bne.n	800318a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800315e:	68f9      	ldr	r1, [r7, #12]
 8003160:	480c      	ldr	r0, [pc, #48]	; (8003194 <LL_FillBuffer+0x88>)
 8003162:	f002 fdbd 	bl	8005ce0 <HAL_DMA2D_ConfigLayer>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10e      	bne.n	800318a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69f9      	ldr	r1, [r7, #28]
 8003176:	4807      	ldr	r0, [pc, #28]	; (8003194 <LL_FillBuffer+0x88>)
 8003178:	f002 fb8e 	bl	8005898 <HAL_DMA2D_Start>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003182:	210a      	movs	r1, #10
 8003184:	4803      	ldr	r0, [pc, #12]	; (8003194 <LL_FillBuffer+0x88>)
 8003186:	f002 fbb2 	bl	80058ee <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000404 	.word	0x20000404
 8003198:	20000444 	.word	0x20000444
 800319c:	200086f8 	.word	0x200086f8
 80031a0:	4002b000 	.word	0x4002b000

080031a4 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80031b2:	4b1c      	ldr	r3, [pc, #112]	; (8003224 <LL_ConvertLineToARGB8888+0x80>)
 80031b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031b8:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <LL_ConvertLineToARGB8888+0x80>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80031c0:	4b18      	ldr	r3, [pc, #96]	; (8003224 <LL_ConvertLineToARGB8888+0x80>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80031c6:	4b17      	ldr	r3, [pc, #92]	; (8003224 <LL_ConvertLineToARGB8888+0x80>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80031cc:	4b15      	ldr	r3, [pc, #84]	; (8003224 <LL_ConvertLineToARGB8888+0x80>)
 80031ce:	22ff      	movs	r2, #255	; 0xff
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80031d2:	4a14      	ldr	r2, [pc, #80]	; (8003224 <LL_ConvertLineToARGB8888+0x80>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80031d8:	4b12      	ldr	r3, [pc, #72]	; (8003224 <LL_ConvertLineToARGB8888+0x80>)
 80031da:	2200      	movs	r2, #0
 80031dc:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <LL_ConvertLineToARGB8888+0x80>)
 80031e0:	4a11      	ldr	r2, [pc, #68]	; (8003228 <LL_ConvertLineToARGB8888+0x84>)
 80031e2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80031e4:	480f      	ldr	r0, [pc, #60]	; (8003224 <LL_ConvertLineToARGB8888+0x80>)
 80031e6:	f002 fb0d 	bl	8005804 <HAL_DMA2D_Init>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d115      	bne.n	800321c <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80031f0:	2101      	movs	r1, #1
 80031f2:	480c      	ldr	r0, [pc, #48]	; (8003224 <LL_ConvertLineToARGB8888+0x80>)
 80031f4:	f002 fd74 	bl	8005ce0 <HAL_DMA2D_ConfigLayer>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10e      	bne.n	800321c <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80031fe:	68f9      	ldr	r1, [r7, #12]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	2301      	movs	r3, #1
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4806      	ldr	r0, [pc, #24]	; (8003224 <LL_ConvertLineToARGB8888+0x80>)
 800320a:	f002 fb45 	bl	8005898 <HAL_DMA2D_Start>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d103      	bne.n	800321c <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003214:	210a      	movs	r1, #10
 8003216:	4803      	ldr	r0, [pc, #12]	; (8003224 <LL_ConvertLineToARGB8888+0x80>)
 8003218:	f002 fb69 	bl	80058ee <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000404 	.word	0x20000404
 8003228:	4002b000 	.word	0x4002b000

0800322c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003230:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <BSP_SDRAM_Init+0xac>)
 8003232:	4a2a      	ldr	r2, [pc, #168]	; (80032dc <BSP_SDRAM_Init+0xb0>)
 8003234:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003236:	4b2a      	ldr	r3, [pc, #168]	; (80032e0 <BSP_SDRAM_Init+0xb4>)
 8003238:	2202      	movs	r2, #2
 800323a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800323c:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <BSP_SDRAM_Init+0xb4>)
 800323e:	2207      	movs	r2, #7
 8003240:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003242:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <BSP_SDRAM_Init+0xb4>)
 8003244:	2204      	movs	r2, #4
 8003246:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003248:	4b25      	ldr	r3, [pc, #148]	; (80032e0 <BSP_SDRAM_Init+0xb4>)
 800324a:	2207      	movs	r2, #7
 800324c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <BSP_SDRAM_Init+0xb4>)
 8003250:	2202      	movs	r2, #2
 8003252:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003254:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <BSP_SDRAM_Init+0xb4>)
 8003256:	2202      	movs	r2, #2
 8003258:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800325a:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <BSP_SDRAM_Init+0xb4>)
 800325c:	2202      	movs	r2, #2
 800325e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <BSP_SDRAM_Init+0xac>)
 8003262:	2200      	movs	r2, #0
 8003264:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003266:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <BSP_SDRAM_Init+0xac>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800326c:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <BSP_SDRAM_Init+0xac>)
 800326e:	2204      	movs	r2, #4
 8003270:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003272:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <BSP_SDRAM_Init+0xac>)
 8003274:	2210      	movs	r2, #16
 8003276:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003278:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <BSP_SDRAM_Init+0xac>)
 800327a:	2240      	movs	r2, #64	; 0x40
 800327c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800327e:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <BSP_SDRAM_Init+0xac>)
 8003280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003284:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <BSP_SDRAM_Init+0xac>)
 8003288:	2200      	movs	r2, #0
 800328a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800328c:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <BSP_SDRAM_Init+0xac>)
 800328e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003292:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <BSP_SDRAM_Init+0xac>)
 8003296:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800329a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <BSP_SDRAM_Init+0xac>)
 800329e:	2200      	movs	r2, #0
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80032a2:	2100      	movs	r1, #0
 80032a4:	480c      	ldr	r0, [pc, #48]	; (80032d8 <BSP_SDRAM_Init+0xac>)
 80032a6:	f000 f87f 	bl	80033a8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80032aa:	490d      	ldr	r1, [pc, #52]	; (80032e0 <BSP_SDRAM_Init+0xb4>)
 80032ac:	480a      	ldr	r0, [pc, #40]	; (80032d8 <BSP_SDRAM_Init+0xac>)
 80032ae:	f005 ffcf 	bl	8009250 <HAL_SDRAM_Init>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <BSP_SDRAM_Init+0xb8>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e002      	b.n	80032c6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <BSP_SDRAM_Init+0xb8>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80032c6:	f240 6003 	movw	r0, #1539	; 0x603
 80032ca:	f000 f80d 	bl	80032e8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <BSP_SDRAM_Init+0xb8>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200087a0 	.word	0x200087a0
 80032dc:	a0000140 	.word	0xa0000140
 80032e0:	200004e4 	.word	0x200004e4
 80032e4:	2000003c 	.word	0x2000003c

080032e8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80032fa:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032fc:	2210      	movs	r2, #16
 80032fe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003302:	2201      	movs	r2, #1
 8003304:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003306:	4b26      	ldr	r3, [pc, #152]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003308:	2200      	movs	r2, #0
 800330a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800330c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003310:	4923      	ldr	r1, [pc, #140]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003312:	4824      	ldr	r0, [pc, #144]	; (80033a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003314:	f005 ffd0 	bl	80092b8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003318:	2001      	movs	r0, #1
 800331a:	f001 fadb 	bl	80048d4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800331e:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003320:	2202      	movs	r2, #2
 8003322:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003324:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003326:	2210      	movs	r2, #16
 8003328:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800332c:	2201      	movs	r2, #1
 800332e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003332:	2200      	movs	r2, #0
 8003334:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800333a:	4919      	ldr	r1, [pc, #100]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800333c:	4819      	ldr	r0, [pc, #100]	; (80033a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800333e:	f005 ffbb 	bl	80092b8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003342:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003344:	2203      	movs	r2, #3
 8003346:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800334a:	2210      	movs	r2, #16
 800334c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003350:	2208      	movs	r2, #8
 8003352:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003354:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003356:	2200      	movs	r2, #0
 8003358:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800335a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800335e:	4910      	ldr	r1, [pc, #64]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003360:	4810      	ldr	r0, [pc, #64]	; (80033a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003362:	f005 ffa9 	bl	80092b8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003366:	f44f 7308 	mov.w	r3, #544	; 0x220
 800336a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800336e:	2204      	movs	r2, #4
 8003370:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003374:	2210      	movs	r2, #16
 8003376:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800337a:	2201      	movs	r2, #1
 800337c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4a07      	ldr	r2, [pc, #28]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003382:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003388:	4905      	ldr	r1, [pc, #20]	; (80033a0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800338a:	4806      	ldr	r0, [pc, #24]	; (80033a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800338c:	f005 ff94 	bl	80092b8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4804      	ldr	r0, [pc, #16]	; (80033a4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003394:	f005 ffc5 	bl	8009322 <HAL_SDRAM_ProgramRefreshRate>
}
 8003398:	bf00      	nop
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000500 	.word	0x20000500
 80033a4:	200087a0 	.word	0x200087a0

080033a8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b090      	sub	sp, #64	; 0x40
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80033b2:	4b70      	ldr	r3, [pc, #448]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 80033b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b6:	4a6f      	ldr	r2, [pc, #444]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6393      	str	r3, [r2, #56]	; 0x38
 80033be:	4b6d      	ldr	r3, [pc, #436]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80033ca:	4b6a      	ldr	r3, [pc, #424]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a69      	ldr	r2, [pc, #420]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 80033d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b67      	ldr	r3, [pc, #412]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033e2:	4b64      	ldr	r3, [pc, #400]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a63      	ldr	r2, [pc, #396]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b61      	ldr	r3, [pc, #388]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	623b      	str	r3, [r7, #32]
 80033f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033fa:	4b5e      	ldr	r3, [pc, #376]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a5d      	ldr	r2, [pc, #372]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 8003400:	f043 0308 	orr.w	r3, r3, #8
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003412:	4b58      	ldr	r3, [pc, #352]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	4a57      	ldr	r2, [pc, #348]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 8003418:	f043 0310 	orr.w	r3, r3, #16
 800341c:	6313      	str	r3, [r2, #48]	; 0x30
 800341e:	4b55      	ldr	r3, [pc, #340]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800342a:	4b52      	ldr	r3, [pc, #328]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4a51      	ldr	r2, [pc, #324]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 8003430:	f043 0320 	orr.w	r3, r3, #32
 8003434:	6313      	str	r3, [r2, #48]	; 0x30
 8003436:	4b4f      	ldr	r3, [pc, #316]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003442:	4b4c      	ldr	r3, [pc, #304]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a4b      	ldr	r2, [pc, #300]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 8003448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
 800344e:	4b49      	ldr	r3, [pc, #292]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800345a:	4b46      	ldr	r3, [pc, #280]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	4a45      	ldr	r2, [pc, #276]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 8003460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003464:	6313      	str	r3, [r2, #48]	; 0x30
 8003466:	4b43      	ldr	r3, [pc, #268]	; (8003574 <BSP_SDRAM_MspInit+0x1cc>)
 8003468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003472:	2302      	movs	r3, #2
 8003474:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003476:	2301      	movs	r3, #1
 8003478:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800347a:	2302      	movs	r3, #2
 800347c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800347e:	230c      	movs	r3, #12
 8003480:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003482:	2308      	movs	r3, #8
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800348a:	4619      	mov	r1, r3
 800348c:	483a      	ldr	r0, [pc, #232]	; (8003578 <BSP_SDRAM_MspInit+0x1d0>)
 800348e:	f002 fd55 	bl	8005f3c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003492:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003496:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003498:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800349c:	4619      	mov	r1, r3
 800349e:	4837      	ldr	r0, [pc, #220]	; (800357c <BSP_SDRAM_MspInit+0x1d4>)
 80034a0:	f002 fd4c 	bl	8005f3c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80034a4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80034a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80034aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ae:	4619      	mov	r1, r3
 80034b0:	4833      	ldr	r0, [pc, #204]	; (8003580 <BSP_SDRAM_MspInit+0x1d8>)
 80034b2:	f002 fd43 	bl	8005f3c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80034b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80034bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034c0:	4619      	mov	r1, r3
 80034c2:	4830      	ldr	r0, [pc, #192]	; (8003584 <BSP_SDRAM_MspInit+0x1dc>)
 80034c4:	f002 fd3a 	bl	8005f3c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80034c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80034ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034d2:	4619      	mov	r1, r3
 80034d4:	482c      	ldr	r0, [pc, #176]	; (8003588 <BSP_SDRAM_MspInit+0x1e0>)
 80034d6:	f002 fd31 	bl	8005f3c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80034da:	2328      	movs	r3, #40	; 0x28
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80034de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034e2:	4619      	mov	r1, r3
 80034e4:	4829      	ldr	r0, [pc, #164]	; (800358c <BSP_SDRAM_MspInit+0x1e4>)
 80034e6:	f002 fd29 	bl	8005f3c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80034ea:	4b29      	ldr	r3, [pc, #164]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80034f0:	4b27      	ldr	r3, [pc, #156]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 80034f2:	2280      	movs	r2, #128	; 0x80
 80034f4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80034f6:	4b26      	ldr	r3, [pc, #152]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 80034f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034fc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80034fe:	4b24      	ldr	r3, [pc, #144]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 8003500:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003504:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003506:	4b22      	ldr	r3, [pc, #136]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 8003508:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800350c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 8003510:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003514:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003516:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 8003518:	2200      	movs	r2, #0
 800351a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800351c:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 800351e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003522:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003524:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 8003526:	2200      	movs	r2, #0
 8003528:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800352a:	4b19      	ldr	r3, [pc, #100]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 800352c:	2203      	movs	r2, #3
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003530:	4b17      	ldr	r3, [pc, #92]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 8003532:	2200      	movs	r2, #0
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 8003538:	2200      	movs	r2, #0
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800353c:	4b14      	ldr	r3, [pc, #80]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 800353e:	4a15      	ldr	r2, [pc, #84]	; (8003594 <BSP_SDRAM_MspInit+0x1ec>)
 8003540:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a12      	ldr	r2, [pc, #72]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
 8003548:	4a11      	ldr	r2, [pc, #68]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800354e:	4810      	ldr	r0, [pc, #64]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 8003550:	f001 ffb6 	bl	80054c0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003554:	480e      	ldr	r0, [pc, #56]	; (8003590 <BSP_SDRAM_MspInit+0x1e8>)
 8003556:	f001 ff05 	bl	8005364 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800355a:	2200      	movs	r2, #0
 800355c:	210f      	movs	r1, #15
 800355e:	2038      	movs	r0, #56	; 0x38
 8003560:	f001 fdf6 	bl	8005150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003564:	2038      	movs	r0, #56	; 0x38
 8003566:	f001 fe0f 	bl	8005188 <HAL_NVIC_EnableIRQ>
}
 800356a:	bf00      	nop
 800356c:	3740      	adds	r7, #64	; 0x40
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	40020800 	.word	0x40020800
 800357c:	40020c00 	.word	0x40020c00
 8003580:	40021000 	.word	0x40021000
 8003584:	40021400 	.word	0x40021400
 8003588:	40021800 	.word	0x40021800
 800358c:	40021c00 	.word	0x40021c00
 8003590:	20000510 	.word	0x20000510
 8003594:	40026410 	.word	0x40026410

08003598 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	460a      	mov	r2, r1
 80035a2:	80fb      	strh	r3, [r7, #6]
 80035a4:	4613      	mov	r3, r2
 80035a6:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <BSP_TS_Init+0x68>)
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80035b2:	4a14      	ldr	r2, [pc, #80]	; (8003604 <BSP_TS_Init+0x6c>)
 80035b4:	88bb      	ldrh	r3, [r7, #4]
 80035b6:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80035b8:	4b13      	ldr	r3, [pc, #76]	; (8003608 <BSP_TS_Init+0x70>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2070      	movs	r0, #112	; 0x70
 80035be:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <BSP_TS_Init+0x70>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2070      	movs	r0, #112	; 0x70
 80035c6:	4798      	blx	r3
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b51      	cmp	r3, #81	; 0x51
 80035cc:	d111      	bne.n	80035f2 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80035ce:	4b0f      	ldr	r3, [pc, #60]	; (800360c <BSP_TS_Init+0x74>)
 80035d0:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <BSP_TS_Init+0x70>)
 80035d2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80035d4:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <BSP_TS_Init+0x78>)
 80035d6:	2270      	movs	r2, #112	; 0x70
 80035d8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <BSP_TS_Init+0x7c>)
 80035dc:	2208      	movs	r2, #8
 80035de:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80035e0:	4b0a      	ldr	r3, [pc, #40]	; (800360c <BSP_TS_Init+0x74>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <BSP_TS_Init+0x78>)
 80035e8:	7812      	ldrb	r2, [r2, #0]
 80035ea:	b292      	uxth	r2, r2
 80035ec:	4610      	mov	r0, r2
 80035ee:	4798      	blx	r3
 80035f0:	e001      	b.n	80035f6 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80035f2:	2303      	movs	r3, #3
 80035f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000574 	.word	0x20000574
 8003604:	20000576 	.word	0x20000576
 8003608:	20000000 	.word	0x20000000
 800360c:	20000570 	.word	0x20000570
 8003610:	20000579 	.word	0x20000579
 8003614:	20000578 	.word	0x20000578

08003618 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Configure Interrupt mode for SD detection pin */
  gpio_init_structure.Pin = TS_INT_PIN;
 800361e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003622:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003628:	2302      	movs	r3, #2
 800362a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800362c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003630:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	4619      	mov	r1, r3
 8003636:	480c      	ldr	r0, [pc, #48]	; (8003668 <BSP_TS_ITConfig+0x50>)
 8003638:	f002 fc80 	bl	8005f3c <HAL_GPIO_Init>

  /* Enable and set Touch screen EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 800363c:	2200      	movs	r2, #0
 800363e:	210f      	movs	r1, #15
 8003640:	2028      	movs	r0, #40	; 0x28
 8003642:	f001 fd85 	bl	8005150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8003646:	2028      	movs	r0, #40	; 0x28
 8003648:	f001 fd9e 	bl	8005188 <HAL_NVIC_EnableIRQ>

  /* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <BSP_TS_ITConfig+0x54>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	4a07      	ldr	r2, [pc, #28]	; (8003670 <BSP_TS_ITConfig+0x58>)
 8003654:	7812      	ldrb	r2, [r2, #0]
 8003656:	b292      	uxth	r2, r2
 8003658:	4610      	mov	r0, r2
 800365a:	4798      	blx	r3

  return TS_OK;  
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40022000 	.word	0x40022000
 800366c:	20000570 	.word	0x20000570
 8003670:	20000579 	.word	0x20000579

08003674 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b097      	sub	sp, #92	; 0x5c
 8003678:	af02      	add	r7, sp, #8
 800367a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800368e:	4b97      	ldr	r3, [pc, #604]	; (80038ec <BSP_TS_GetState+0x278>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	4a96      	ldr	r2, [pc, #600]	; (80038f0 <BSP_TS_GetState+0x27c>)
 8003696:	7812      	ldrb	r2, [r2, #0]
 8003698:	b292      	uxth	r2, r2
 800369a:	4610      	mov	r0, r2
 800369c:	4798      	blx	r3
 800369e:	4603      	mov	r3, r0
 80036a0:	461a      	mov	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 81a8 	beq.w	8003a00 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80036b0:	2300      	movs	r3, #0
 80036b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80036b4:	e197      	b.n	80039e6 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80036b6:	4b8d      	ldr	r3, [pc, #564]	; (80038ec <BSP_TS_GetState+0x278>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	4a8c      	ldr	r2, [pc, #560]	; (80038f0 <BSP_TS_GetState+0x27c>)
 80036be:	7812      	ldrb	r2, [r2, #0]
 80036c0:	b290      	uxth	r0, r2
 80036c2:	f107 0120 	add.w	r1, r7, #32
 80036c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036c8:	0052      	lsls	r2, r2, #1
 80036ca:	188c      	adds	r4, r1, r2
 80036cc:	f107 0114 	add.w	r1, r7, #20
 80036d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036d2:	0052      	lsls	r2, r2, #1
 80036d4:	440a      	add	r2, r1
 80036d6:	4621      	mov	r1, r4
 80036d8:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80036da:	4b86      	ldr	r3, [pc, #536]	; (80038f4 <BSP_TS_GetState+0x280>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d11b      	bne.n	800371a <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 80036e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80036ea:	4413      	add	r3, r2
 80036ec:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80036f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80036f8:	440b      	add	r3, r1
 80036fa:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80036fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003706:	4413      	add	r3, r2
 8003708:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800370c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003714:	440b      	add	r3, r1
 8003716:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800371a:	4b76      	ldr	r3, [pc, #472]	; (80038f4 <BSP_TS_GetState+0x280>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d010      	beq.n	8003748 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8003726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800372e:	4413      	add	r3, r2
 8003730:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003734:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003738:	b29a      	uxth	r2, r3
 800373a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003742:	440b      	add	r3, r1
 8003744:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003748:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <BSP_TS_GetState+0x280>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d010      	beq.n	8003776 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8003754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800375c:	4413      	add	r3, r2
 800375e:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003762:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003766:	b29a      	uxth	r2, r3
 8003768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003770:	440b      	add	r3, r1
 8003772:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003776:	4b5f      	ldr	r3, [pc, #380]	; (80038f4 <BSP_TS_GetState+0x280>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d01b      	beq.n	80037ba <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8003782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800378a:	4413      	add	r3, r2
 800378c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003798:	440b      	add	r3, r1
 800379a:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800379e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037a6:	4413      	add	r3, r2
 80037a8:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80037ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80037b4:	440b      	add	r3, r1
 80037b6:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80037ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037c2:	4413      	add	r3, r2
 80037c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80037c8:	4619      	mov	r1, r3
 80037ca:	4a4b      	ldr	r2, [pc, #300]	; (80038f8 <BSP_TS_GetState+0x284>)
 80037cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d2:	4299      	cmp	r1, r3
 80037d4:	d90e      	bls.n	80037f4 <BSP_TS_GetState+0x180>
 80037d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80037de:	4413      	add	r3, r2
 80037e0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80037e4:	4944      	ldr	r1, [pc, #272]	; (80038f8 <BSP_TS_GetState+0x284>)
 80037e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	e00d      	b.n	8003810 <BSP_TS_GetState+0x19c>
 80037f4:	4a40      	ldr	r2, [pc, #256]	; (80038f8 <BSP_TS_GetState+0x284>)
 80037f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003806:	440b      	add	r3, r1
 8003808:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	b29b      	uxth	r3, r3
 8003810:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800381c:	4413      	add	r3, r2
 800381e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003822:	4619      	mov	r1, r3
 8003824:	4a35      	ldr	r2, [pc, #212]	; (80038fc <BSP_TS_GetState+0x288>)
 8003826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382c:	4299      	cmp	r1, r3
 800382e:	d90e      	bls.n	800384e <BSP_TS_GetState+0x1da>
 8003830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003838:	4413      	add	r3, r2
 800383a:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800383e:	492f      	ldr	r1, [pc, #188]	; (80038fc <BSP_TS_GetState+0x288>)
 8003840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003842:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003846:	b29b      	uxth	r3, r3
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	b29b      	uxth	r3, r3
 800384c:	e00d      	b.n	800386a <BSP_TS_GetState+0x1f6>
 800384e:	4a2b      	ldr	r2, [pc, #172]	; (80038fc <BSP_TS_GetState+0x288>)
 8003850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003856:	b29a      	uxth	r2, r3
 8003858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003860:	440b      	add	r3, r1
 8003862:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	b29b      	uxth	r3, r3
 800386a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800386e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003872:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003876:	4413      	add	r3, r2
 8003878:	2b05      	cmp	r3, #5
 800387a:	dd17      	ble.n	80038ac <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 800387c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003884:	4413      	add	r3, r2
 8003886:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800388a:	4619      	mov	r1, r3
 800388c:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <BSP_TS_GetState+0x284>)
 800388e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003890:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800389c:	4413      	add	r3, r2
 800389e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80038a2:	4619      	mov	r1, r3
 80038a4:	4a15      	ldr	r2, [pc, #84]	; (80038fc <BSP_TS_GetState+0x288>)
 80038a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <BSP_TS_GetState+0x27c>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b70      	cmp	r3, #112	; 0x70
 80038b2:	d125      	bne.n	8003900 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80038b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038bc:	4413      	add	r3, r2
 80038be:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	460a      	mov	r2, r1
 80038cc:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80038ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038d6:	4413      	add	r3, r2
 80038d8:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038e0:	3304      	adds	r3, #4
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4413      	add	r3, r2
 80038e6:	460a      	mov	r2, r1
 80038e8:	809a      	strh	r2, [r3, #4]
 80038ea:	e02c      	b.n	8003946 <BSP_TS_GetState+0x2d2>
 80038ec:	20000570 	.word	0x20000570
 80038f0:	20000579 	.word	0x20000579
 80038f4:	20000578 	.word	0x20000578
 80038f8:	2000057c 	.word	0x2000057c
 80038fc:	20000590 	.word	0x20000590
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003900:	4b42      	ldr	r3, [pc, #264]	; (8003a0c <BSP_TS_GetState+0x398>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	4a42      	ldr	r2, [pc, #264]	; (8003a10 <BSP_TS_GetState+0x39c>)
 8003908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800390a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390e:	fb03 f301 	mul.w	r3, r3, r1
 8003912:	0b1b      	lsrs	r3, r3, #12
 8003914:	b299      	uxth	r1, r3
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	460a      	mov	r2, r1
 8003920:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003922:	4b3c      	ldr	r3, [pc, #240]	; (8003a14 <BSP_TS_GetState+0x3a0>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	4619      	mov	r1, r3
 8003928:	4a3b      	ldr	r2, [pc, #236]	; (8003a18 <BSP_TS_GetState+0x3a4>)
 800392a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003930:	fb03 f301 	mul.w	r3, r3, r1
 8003934:	0b1b      	lsrs	r3, r3, #12
 8003936:	b299      	uxth	r1, r3
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800393c:	3304      	adds	r3, #4
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4413      	add	r3, r2
 8003942:	460a      	mov	r2, r1
 8003944:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003946:	4b35      	ldr	r3, [pc, #212]	; (8003a1c <BSP_TS_GetState+0x3a8>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	b298      	uxth	r0, r3
 800394c:	f107 010c 	add.w	r1, r7, #12
 8003950:	f107 0210 	add.w	r2, r7, #16
 8003954:	f107 0308 	add.w	r3, r7, #8
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	460b      	mov	r3, r1
 800395c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800395e:	f7fc ffb7 	bl	80008d0 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	b2d9      	uxtb	r1, r3
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396a:	4413      	add	r3, r2
 800396c:	3316      	adds	r3, #22
 800396e:	460a      	mov	r2, r1
 8003970:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	b2d9      	uxtb	r1, r3
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800397a:	4413      	add	r3, r2
 800397c:	3320      	adds	r3, #32
 800397e:	460a      	mov	r2, r1
 8003980:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b03      	cmp	r3, #3
 8003986:	d827      	bhi.n	80039d8 <BSP_TS_GetState+0x364>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <BSP_TS_GetState+0x31c>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039a1 	.word	0x080039a1
 8003994:	080039af 	.word	0x080039af
 8003998:	080039bd 	.word	0x080039bd
 800399c:	080039cb 	.word	0x080039cb
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a4:	4413      	add	r3, r2
 80039a6:	331b      	adds	r3, #27
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
          break;
 80039ac:	e018      	b.n	80039e0 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b2:	4413      	add	r3, r2
 80039b4:	331b      	adds	r3, #27
 80039b6:	2202      	movs	r2, #2
 80039b8:	701a      	strb	r2, [r3, #0]
          break;
 80039ba:	e011      	b.n	80039e0 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039c0:	4413      	add	r3, r2
 80039c2:	331b      	adds	r3, #27
 80039c4:	2203      	movs	r2, #3
 80039c6:	701a      	strb	r2, [r3, #0]
          break;
 80039c8:	e00a      	b.n	80039e0 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ce:	4413      	add	r3, r2
 80039d0:	331b      	adds	r3, #27
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
          break;
 80039d6:	e003      	b.n	80039e0 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80039de:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80039e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e2:	3301      	adds	r3, #1
 80039e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	461a      	mov	r2, r3
 80039ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ee:	4293      	cmp	r3, r2
 80039f0:	f4ff ae61 	bcc.w	80036b6 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f813 	bl	8003a20 <BSP_TS_Get_GestureId>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003a00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3754      	adds	r7, #84	; 0x54
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd90      	pop	{r4, r7, pc}
 8003a0c:	20000574 	.word	0x20000574
 8003a10:	2000057c 	.word	0x2000057c
 8003a14:	20000576 	.word	0x20000576
 8003a18:	20000590 	.word	0x20000590
 8003a1c:	20000579 	.word	0x20000579

08003a20 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003a30:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <BSP_TS_Get_GestureId+0x100>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	f107 0208 	add.w	r2, r7, #8
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fc ff2e 	bl	800089e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b49      	cmp	r3, #73	; 0x49
 8003a46:	d05e      	beq.n	8003b06 <BSP_TS_Get_GestureId+0xe6>
 8003a48:	2b49      	cmp	r3, #73	; 0x49
 8003a4a:	d860      	bhi.n	8003b0e <BSP_TS_Get_GestureId+0xee>
 8003a4c:	2b1c      	cmp	r3, #28
 8003a4e:	d83f      	bhi.n	8003ad0 <BSP_TS_Get_GestureId+0xb0>
 8003a50:	2b1c      	cmp	r3, #28
 8003a52:	d85c      	bhi.n	8003b0e <BSP_TS_Get_GestureId+0xee>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <BSP_TS_Get_GestureId+0x3c>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003ad7 	.word	0x08003ad7
 8003a60:	08003b0f 	.word	0x08003b0f
 8003a64:	08003b0f 	.word	0x08003b0f
 8003a68:	08003b0f 	.word	0x08003b0f
 8003a6c:	08003b0f 	.word	0x08003b0f
 8003a70:	08003b0f 	.word	0x08003b0f
 8003a74:	08003b0f 	.word	0x08003b0f
 8003a78:	08003b0f 	.word	0x08003b0f
 8003a7c:	08003b0f 	.word	0x08003b0f
 8003a80:	08003b0f 	.word	0x08003b0f
 8003a84:	08003b0f 	.word	0x08003b0f
 8003a88:	08003b0f 	.word	0x08003b0f
 8003a8c:	08003b0f 	.word	0x08003b0f
 8003a90:	08003b0f 	.word	0x08003b0f
 8003a94:	08003b0f 	.word	0x08003b0f
 8003a98:	08003b0f 	.word	0x08003b0f
 8003a9c:	08003adf 	.word	0x08003adf
 8003aa0:	08003b0f 	.word	0x08003b0f
 8003aa4:	08003b0f 	.word	0x08003b0f
 8003aa8:	08003b0f 	.word	0x08003b0f
 8003aac:	08003ae7 	.word	0x08003ae7
 8003ab0:	08003b0f 	.word	0x08003b0f
 8003ab4:	08003b0f 	.word	0x08003b0f
 8003ab8:	08003b0f 	.word	0x08003b0f
 8003abc:	08003aef 	.word	0x08003aef
 8003ac0:	08003b0f 	.word	0x08003b0f
 8003ac4:	08003b0f 	.word	0x08003b0f
 8003ac8:	08003b0f 	.word	0x08003b0f
 8003acc:	08003af7 	.word	0x08003af7
 8003ad0:	2b40      	cmp	r3, #64	; 0x40
 8003ad2:	d014      	beq.n	8003afe <BSP_TS_Get_GestureId+0xde>
 8003ad4:	e01b      	b.n	8003b0e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003adc:	e01a      	b.n	8003b14 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003ae4:	e016      	b.n	8003b14 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003aec:	e012      	b.n	8003b14 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2203      	movs	r2, #3
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003af4:	e00e      	b.n	8003b14 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2204      	movs	r2, #4
 8003afa:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003afc:	e00a      	b.n	8003b14 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2205      	movs	r2, #5
 8003b02:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b04:	e006      	b.n	8003b14 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2206      	movs	r2, #6
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003b0c:	e002      	b.n	8003b14 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
      break;
 8003b12:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000579 	.word	0x20000579

08003b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_MspInit+0x4c>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	4a10      	ldr	r2, [pc, #64]	; (8003b70 <HAL_MspInit+0x4c>)
 8003b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b34:	6413      	str	r3, [r2, #64]	; 0x40
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_MspInit+0x4c>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	607b      	str	r3, [r7, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_MspInit+0x4c>)
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	4a0a      	ldr	r2, [pc, #40]	; (8003b70 <HAL_MspInit+0x4c>)
 8003b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <HAL_MspInit+0x4c>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	210f      	movs	r1, #15
 8003b5e:	f06f 0001 	mvn.w	r0, #1
 8003b62:	f001 faf5 	bl	8005150 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800

08003b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08c      	sub	sp, #48	; 0x30
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7c:	f107 031c 	add.w	r3, r7, #28
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	60da      	str	r2, [r3, #12]
 8003b8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a2a      	ldr	r2, [pc, #168]	; (8003c3c <HAL_ADC_MspInit+0xc8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d124      	bne.n	8003be0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b96:	4b2a      	ldr	r3, [pc, #168]	; (8003c40 <HAL_ADC_MspInit+0xcc>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	4a29      	ldr	r2, [pc, #164]	; (8003c40 <HAL_ADC_MspInit+0xcc>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba2:	4b27      	ldr	r3, [pc, #156]	; (8003c40 <HAL_ADC_MspInit+0xcc>)
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bae:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <HAL_ADC_MspInit+0xcc>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	4a23      	ldr	r2, [pc, #140]	; (8003c40 <HAL_ADC_MspInit+0xcc>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <HAL_ADC_MspInit+0xcc>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd2:	f107 031c 	add.w	r3, r7, #28
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	481a      	ldr	r0, [pc, #104]	; (8003c44 <HAL_ADC_MspInit+0xd0>)
 8003bda:	f002 f9af 	bl	8005f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003bde:	e029      	b.n	8003c34 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <HAL_ADC_MspInit+0xd4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d124      	bne.n	8003c34 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003bea:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <HAL_ADC_MspInit+0xcc>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	4a14      	ldr	r2, [pc, #80]	; (8003c40 <HAL_ADC_MspInit+0xcc>)
 8003bf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <HAL_ADC_MspInit+0xcc>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c02:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <HAL_ADC_MspInit+0xcc>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	4a0e      	ldr	r2, [pc, #56]	; (8003c40 <HAL_ADC_MspInit+0xcc>)
 8003c08:	f043 0320 	orr.w	r3, r3, #32
 8003c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <HAL_ADC_MspInit+0xcc>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8003c1a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c20:	2303      	movs	r3, #3
 8003c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c28:	f107 031c 	add.w	r3, r7, #28
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4807      	ldr	r0, [pc, #28]	; (8003c4c <HAL_ADC_MspInit+0xd8>)
 8003c30:	f002 f984 	bl	8005f3c <HAL_GPIO_Init>
}
 8003c34:	bf00      	nop
 8003c36:	3730      	adds	r7, #48	; 0x30
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40012000 	.word	0x40012000
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40020000 	.word	0x40020000
 8003c48:	40012200 	.word	0x40012200
 8003c4c:	40021400 	.word	0x40021400

08003c50 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08a      	sub	sp, #40	; 0x28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	60da      	str	r2, [r3, #12]
 8003c66:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a19      	ldr	r2, [pc, #100]	; (8003cd4 <HAL_DAC_MspInit+0x84>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d12b      	bne.n	8003cca <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003c72:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <HAL_DAC_MspInit+0x88>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	4a18      	ldr	r2, [pc, #96]	; (8003cd8 <HAL_DAC_MspInit+0x88>)
 8003c78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <HAL_DAC_MspInit+0x88>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <HAL_DAC_MspInit+0x88>)
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <HAL_DAC_MspInit+0x88>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6313      	str	r3, [r2, #48]	; 0x30
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <HAL_DAC_MspInit+0x88>)
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ca2:	2310      	movs	r3, #16
 8003ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cae:	f107 0314 	add.w	r3, r7, #20
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4809      	ldr	r0, [pc, #36]	; (8003cdc <HAL_DAC_MspInit+0x8c>)
 8003cb6:	f002 f941 	bl	8005f3c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8003cba:	2200      	movs	r2, #0
 8003cbc:	210f      	movs	r1, #15
 8003cbe:	2036      	movs	r0, #54	; 0x36
 8003cc0:	f001 fa46 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003cc4:	2036      	movs	r0, #54	; 0x36
 8003cc6:	f001 fa5f 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003cca:	bf00      	nop
 8003ccc:	3728      	adds	r7, #40	; 0x28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40007400 	.word	0x40007400
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40020000 	.word	0x40020000

08003ce0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a0d      	ldr	r2, [pc, #52]	; (8003d24 <HAL_DMA2D_MspInit+0x44>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d113      	bne.n	8003d1a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003cf2:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <HAL_DMA2D_MspInit+0x48>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	4a0c      	ldr	r2, [pc, #48]	; (8003d28 <HAL_DMA2D_MspInit+0x48>)
 8003cf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <HAL_DMA2D_MspInit+0x48>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2105      	movs	r1, #5
 8003d0e:	205a      	movs	r0, #90	; 0x5a
 8003d10:	f001 fa1e 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003d14:	205a      	movs	r0, #90	; 0x5a
 8003d16:	f001 fa37 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003d1a:	bf00      	nop
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	4002b000 	.word	0x4002b000
 8003d28:	40023800 	.word	0x40023800

08003d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b0ac      	sub	sp, #176	; 0xb0
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d44:	f107 0318 	add.w	r3, r7, #24
 8003d48:	2284      	movs	r2, #132	; 0x84
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f009 fcad 	bl	800d6ac <memset>
  if(hi2c->Instance==I2C1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a44      	ldr	r2, [pc, #272]	; (8003e68 <HAL_I2C_MspInit+0x13c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d13d      	bne.n	8003dd8 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003d5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003d62:	2300      	movs	r3, #0
 8003d64:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d66:	f107 0318 	add.w	r3, r7, #24
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f004 faa8 	bl	80082c0 <HAL_RCCEx_PeriphCLKConfig>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003d76:	f7fe faad 	bl	80022d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d7a:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <HAL_I2C_MspInit+0x140>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	4a3b      	ldr	r2, [pc, #236]	; (8003e6c <HAL_I2C_MspInit+0x140>)
 8003d80:	f043 0302 	orr.w	r3, r3, #2
 8003d84:	6313      	str	r3, [r2, #48]	; 0x30
 8003d86:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <HAL_I2C_MspInit+0x140>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d9a:	2312      	movs	r3, #18
 8003d9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da6:	2303      	movs	r3, #3
 8003da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dac:	2304      	movs	r3, #4
 8003dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003db6:	4619      	mov	r1, r3
 8003db8:	482d      	ldr	r0, [pc, #180]	; (8003e70 <HAL_I2C_MspInit+0x144>)
 8003dba:	f002 f8bf 	bl	8005f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dbe:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <HAL_I2C_MspInit+0x140>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <HAL_I2C_MspInit+0x140>)
 8003dc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dca:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <HAL_I2C_MspInit+0x140>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003dd6:	e042      	b.n	8003e5e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a25      	ldr	r2, [pc, #148]	; (8003e74 <HAL_I2C_MspInit+0x148>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d13d      	bne.n	8003e5e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003de6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dee:	f107 0318 	add.w	r3, r7, #24
 8003df2:	4618      	mov	r0, r3
 8003df4:	f004 fa64 	bl	80082c0 <HAL_RCCEx_PeriphCLKConfig>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003dfe:	f7fe fa69 	bl	80022d4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e02:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <HAL_I2C_MspInit+0x140>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	4a19      	ldr	r2, [pc, #100]	; (8003e6c <HAL_I2C_MspInit+0x140>)
 8003e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0e:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <HAL_I2C_MspInit+0x140>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003e1a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003e1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e22:	2312      	movs	r3, #18
 8003e24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003e34:	2304      	movs	r3, #4
 8003e36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003e3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003e3e:	4619      	mov	r1, r3
 8003e40:	480d      	ldr	r0, [pc, #52]	; (8003e78 <HAL_I2C_MspInit+0x14c>)
 8003e42:	f002 f87b 	bl	8005f3c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003e46:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <HAL_I2C_MspInit+0x140>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	4a08      	ldr	r2, [pc, #32]	; (8003e6c <HAL_I2C_MspInit+0x140>)
 8003e4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e50:	6413      	str	r3, [r2, #64]	; 0x40
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <HAL_I2C_MspInit+0x140>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
}
 8003e5e:	bf00      	nop
 8003e60:	37b0      	adds	r7, #176	; 0xb0
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40005400 	.word	0x40005400
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40020400 	.word	0x40020400
 8003e74:	40005c00 	.word	0x40005c00
 8003e78:	40021c00 	.word	0x40021c00

08003e7c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a15      	ldr	r2, [pc, #84]	; (8003ee0 <HAL_I2C_MspDeInit+0x64>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d110      	bne.n	8003eb0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <HAL_I2C_MspDeInit+0x68>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	4a14      	ldr	r2, [pc, #80]	; (8003ee4 <HAL_I2C_MspDeInit+0x68>)
 8003e94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e98:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003e9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e9e:	4812      	ldr	r0, [pc, #72]	; (8003ee8 <HAL_I2C_MspDeInit+0x6c>)
 8003ea0:	f002 f9f8 	bl	8006294 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ea8:	480f      	ldr	r0, [pc, #60]	; (8003ee8 <HAL_I2C_MspDeInit+0x6c>)
 8003eaa:	f002 f9f3 	bl	8006294 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003eae:	e013      	b.n	8003ed8 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <HAL_I2C_MspDeInit+0x70>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <HAL_I2C_MspDeInit+0x68>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <HAL_I2C_MspDeInit+0x68>)
 8003ec0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ec4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003ec6:	2180      	movs	r1, #128	; 0x80
 8003ec8:	4809      	ldr	r0, [pc, #36]	; (8003ef0 <HAL_I2C_MspDeInit+0x74>)
 8003eca:	f002 f9e3 	bl	8006294 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003ece:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ed2:	4807      	ldr	r0, [pc, #28]	; (8003ef0 <HAL_I2C_MspDeInit+0x74>)
 8003ed4:	f002 f9de 	bl	8006294 <HAL_GPIO_DeInit>
}
 8003ed8:	bf00      	nop
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40005400 	.word	0x40005400
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40020400 	.word	0x40020400
 8003eec:	40005c00 	.word	0x40005c00
 8003ef0:	40021c00 	.word	0x40021c00

08003ef4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b0ae      	sub	sp, #184	; 0xb8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f0c:	f107 0320 	add.w	r3, r7, #32
 8003f10:	2284      	movs	r2, #132	; 0x84
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f009 fbc9 	bl	800d6ac <memset>
  if(hltdc->Instance==LTDC)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a6f      	ldr	r2, [pc, #444]	; (80040dc <HAL_LTDC_MspInit+0x1e8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	f040 80d6 	bne.w	80040d2 <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003f26:	2308      	movs	r3, #8
 8003f28:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003f2a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003f30:	2305      	movs	r3, #5
 8003f32:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003f34:	2302      	movs	r3, #2
 8003f36:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f44:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f46:	f107 0320 	add.w	r3, r7, #32
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f004 f9b8 	bl	80082c0 <HAL_RCCEx_PeriphCLKConfig>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8003f56:	f7fe f9bd 	bl	80022d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003f5a:	4b61      	ldr	r3, [pc, #388]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5e:	4a60      	ldr	r2, [pc, #384]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003f60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f64:	6453      	str	r3, [r2, #68]	; 0x44
 8003f66:	4b5e      	ldr	r3, [pc, #376]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f6e:	61fb      	str	r3, [r7, #28]
 8003f70:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f72:	4b5b      	ldr	r3, [pc, #364]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	4a5a      	ldr	r2, [pc, #360]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003f78:	f043 0310 	orr.w	r3, r3, #16
 8003f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7e:	4b58      	ldr	r3, [pc, #352]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	61bb      	str	r3, [r7, #24]
 8003f88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003f8a:	4b55      	ldr	r3, [pc, #340]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	4a54      	ldr	r2, [pc, #336]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003f90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f94:	6313      	str	r3, [r2, #48]	; 0x30
 8003f96:	4b52      	ldr	r3, [pc, #328]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003fa2:	4b4f      	ldr	r3, [pc, #316]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa6:	4a4e      	ldr	r2, [pc, #312]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003fa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fac:	6313      	str	r3, [r2, #48]	; 0x30
 8003fae:	4b4c      	ldr	r3, [pc, #304]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fba:	4b49      	ldr	r3, [pc, #292]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	4a48      	ldr	r2, [pc, #288]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc6:	4b46      	ldr	r3, [pc, #280]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003fd2:	4b43      	ldr	r3, [pc, #268]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	4a42      	ldr	r2, [pc, #264]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fde:	4b40      	ldr	r3, [pc, #256]	; (80040e0 <HAL_LTDC_MspInit+0x1ec>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003fea:	2310      	movs	r3, #16
 8003fec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004002:	230e      	movs	r3, #14
 8004004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004008:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800400c:	4619      	mov	r1, r3
 800400e:	4835      	ldr	r0, [pc, #212]	; (80040e4 <HAL_LTDC_MspInit+0x1f0>)
 8004010:	f001 ff94 	bl	8005f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004014:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401c:	2302      	movs	r3, #2
 800401e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004022:	2300      	movs	r3, #0
 8004024:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004028:	2300      	movs	r3, #0
 800402a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800402e:	230e      	movs	r3, #14
 8004030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004034:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004038:	4619      	mov	r1, r3
 800403a:	482b      	ldr	r0, [pc, #172]	; (80040e8 <HAL_LTDC_MspInit+0x1f4>)
 800403c:	f001 ff7e 	bl	8005f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004040:	23f7      	movs	r3, #247	; 0xf7
 8004042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004046:	2302      	movs	r3, #2
 8004048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004058:	230e      	movs	r3, #14
 800405a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800405e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004062:	4619      	mov	r1, r3
 8004064:	4821      	ldr	r0, [pc, #132]	; (80040ec <HAL_LTDC_MspInit+0x1f8>)
 8004066:	f001 ff69 	bl	8005f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800406a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800406e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004072:	2302      	movs	r3, #2
 8004074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004078:	2300      	movs	r3, #0
 800407a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407e:	2300      	movs	r3, #0
 8004080:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004084:	2309      	movs	r3, #9
 8004086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800408a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800408e:	4619      	mov	r1, r3
 8004090:	4817      	ldr	r0, [pc, #92]	; (80040f0 <HAL_LTDC_MspInit+0x1fc>)
 8004092:	f001 ff53 	bl	8005f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004096:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800409a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409e:	2302      	movs	r3, #2
 80040a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040b0:	230e      	movs	r3, #14
 80040b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80040b6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80040ba:	4619      	mov	r1, r3
 80040bc:	480d      	ldr	r0, [pc, #52]	; (80040f4 <HAL_LTDC_MspInit+0x200>)
 80040be:	f001 ff3d 	bl	8005f3c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80040c2:	2200      	movs	r2, #0
 80040c4:	2105      	movs	r1, #5
 80040c6:	2058      	movs	r0, #88	; 0x58
 80040c8:	f001 f842 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80040cc:	2058      	movs	r0, #88	; 0x58
 80040ce:	f001 f85b 	bl	8005188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80040d2:	bf00      	nop
 80040d4:	37b8      	adds	r7, #184	; 0xb8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40016800 	.word	0x40016800
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40022400 	.word	0x40022400
 80040ec:	40022800 	.word	0x40022800
 80040f0:	40021800 	.word	0x40021800
 80040f4:	40022000 	.word	0x40022000

080040f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b0a4      	sub	sp, #144	; 0x90
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004100:	f107 030c 	add.w	r3, r7, #12
 8004104:	2284      	movs	r2, #132	; 0x84
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f009 facf 	bl	800d6ac <memset>
  if(hrtc->Instance==RTC)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a0e      	ldr	r2, [pc, #56]	; (800414c <HAL_RTC_MspInit+0x54>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d114      	bne.n	8004142 <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004118:	2320      	movs	r3, #32
 800411a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800411c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004120:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004122:	f107 030c 	add.w	r3, r7, #12
 8004126:	4618      	mov	r0, r3
 8004128:	f004 f8ca 	bl	80082c0 <HAL_RCCEx_PeriphCLKConfig>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004132:	f7fe f8cf 	bl	80022d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_RTC_MspInit+0x58>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413a:	4a05      	ldr	r2, [pc, #20]	; (8004150 <HAL_RTC_MspInit+0x58>)
 800413c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004140:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004142:	bf00      	nop
 8004144:	3790      	adds	r7, #144	; 0x90
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40002800 	.word	0x40002800
 8004150:	40023800 	.word	0x40023800

08004154 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	; 0x28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415c:	f107 0314 	add.w	r3, r7, #20
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a25      	ldr	r2, [pc, #148]	; (8004208 <HAL_SPI_MspInit+0xb4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d144      	bne.n	8004200 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004176:	4b25      	ldr	r3, [pc, #148]	; (800420c <HAL_SPI_MspInit+0xb8>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	4a24      	ldr	r2, [pc, #144]	; (800420c <HAL_SPI_MspInit+0xb8>)
 800417c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004180:	6413      	str	r3, [r2, #64]	; 0x40
 8004182:	4b22      	ldr	r3, [pc, #136]	; (800420c <HAL_SPI_MspInit+0xb8>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800418e:	4b1f      	ldr	r3, [pc, #124]	; (800420c <HAL_SPI_MspInit+0xb8>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	4a1e      	ldr	r2, [pc, #120]	; (800420c <HAL_SPI_MspInit+0xb8>)
 8004194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004198:	6313      	str	r3, [r2, #48]	; 0x30
 800419a:	4b1c      	ldr	r3, [pc, #112]	; (800420c <HAL_SPI_MspInit+0xb8>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	60fb      	str	r3, [r7, #12]
 80041a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041a6:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_SPI_MspInit+0xb8>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	4a18      	ldr	r2, [pc, #96]	; (800420c <HAL_SPI_MspInit+0xb8>)
 80041ac:	f043 0302 	orr.w	r3, r3, #2
 80041b0:	6313      	str	r3, [r2, #48]	; 0x30
 80041b2:	4b16      	ldr	r3, [pc, #88]	; (800420c <HAL_SPI_MspInit+0xb8>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80041be:	2303      	movs	r3, #3
 80041c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c2:	2302      	movs	r3, #2
 80041c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ca:	2303      	movs	r3, #3
 80041cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041ce:	2305      	movs	r3, #5
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80041d2:	f107 0314 	add.w	r3, r7, #20
 80041d6:	4619      	mov	r1, r3
 80041d8:	480d      	ldr	r0, [pc, #52]	; (8004210 <HAL_SPI_MspInit+0xbc>)
 80041da:	f001 feaf 	bl	8005f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80041de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80041e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e4:	2302      	movs	r3, #2
 80041e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ec:	2300      	movs	r3, #0
 80041ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041f0:	2305      	movs	r3, #5
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	4619      	mov	r1, r3
 80041fa:	4806      	ldr	r0, [pc, #24]	; (8004214 <HAL_SPI_MspInit+0xc0>)
 80041fc:	f001 fe9e 	bl	8005f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004200:	bf00      	nop
 8004202:	3728      	adds	r7, #40	; 0x28
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40003800 	.word	0x40003800
 800420c:	40023800 	.word	0x40023800
 8004210:	40022000 	.word	0x40022000
 8004214:	40020400 	.word	0x40020400

08004218 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08e      	sub	sp, #56	; 0x38
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a3b      	ldr	r2, [pc, #236]	; (8004324 <HAL_TIM_Base_MspInit+0x10c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10c      	bne.n	8004254 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800423a:	4b3b      	ldr	r3, [pc, #236]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	4a3a      	ldr	r2, [pc, #232]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	6453      	str	r3, [r2, #68]	; 0x44
 8004246:	4b38      	ldr	r3, [pc, #224]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	623b      	str	r3, [r7, #32]
 8004250:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004252:	e062      	b.n	800431a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425c:	d10c      	bne.n	8004278 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800425e:	4b32      	ldr	r3, [pc, #200]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	4a31      	ldr	r2, [pc, #196]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	6413      	str	r3, [r2, #64]	; 0x40
 800426a:	4b2f      	ldr	r3, [pc, #188]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	69fb      	ldr	r3, [r7, #28]
}
 8004276:	e050      	b.n	800431a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a2b      	ldr	r2, [pc, #172]	; (800432c <HAL_TIM_Base_MspInit+0x114>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d10c      	bne.n	800429c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004282:	4b29      	ldr	r3, [pc, #164]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	4a28      	ldr	r2, [pc, #160]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 8004288:	f043 0302 	orr.w	r3, r3, #2
 800428c:	6413      	str	r3, [r2, #64]	; 0x40
 800428e:	4b26      	ldr	r3, [pc, #152]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	69bb      	ldr	r3, [r7, #24]
}
 800429a:	e03e      	b.n	800431a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a23      	ldr	r2, [pc, #140]	; (8004330 <HAL_TIM_Base_MspInit+0x118>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d10c      	bne.n	80042c0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80042a6:	4b20      	ldr	r3, [pc, #128]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	4a1f      	ldr	r2, [pc, #124]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 80042ac:	f043 0308 	orr.w	r3, r3, #8
 80042b0:	6413      	str	r3, [r2, #64]	; 0x40
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	697b      	ldr	r3, [r7, #20]
}
 80042be:	e02c      	b.n	800431a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1b      	ldr	r2, [pc, #108]	; (8004334 <HAL_TIM_Base_MspInit+0x11c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d127      	bne.n	800431a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042ca:	4b17      	ldr	r3, [pc, #92]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	4a16      	ldr	r2, [pc, #88]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 80042d0:	f043 0302 	orr.w	r3, r3, #2
 80042d4:	6453      	str	r3, [r2, #68]	; 0x44
 80042d6:	4b14      	ldr	r3, [pc, #80]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	4a10      	ldr	r2, [pc, #64]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 80042e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ec:	6313      	str	r3, [r2, #48]	; 0x30
 80042ee:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <HAL_TIM_Base_MspInit+0x110>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042fa:	2304      	movs	r3, #4
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fe:	2302      	movs	r3, #2
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004302:	2300      	movs	r3, #0
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004306:	2300      	movs	r3, #0
 8004308:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800430a:	2303      	movs	r3, #3
 800430c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800430e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004312:	4619      	mov	r1, r3
 8004314:	4808      	ldr	r0, [pc, #32]	; (8004338 <HAL_TIM_Base_MspInit+0x120>)
 8004316:	f001 fe11 	bl	8005f3c <HAL_GPIO_Init>
}
 800431a:	bf00      	nop
 800431c:	3738      	adds	r7, #56	; 0x38
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40023800 	.word	0x40023800
 800432c:	40000400 	.word	0x40000400
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40010400 	.word	0x40010400
 8004338:	40022000 	.word	0x40022000

0800433c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b0b0      	sub	sp, #192	; 0xc0
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004344:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004354:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004358:	2284      	movs	r2, #132	; 0x84
 800435a:	2100      	movs	r1, #0
 800435c:	4618      	mov	r0, r3
 800435e:	f009 f9a5 	bl	800d6ac <memset>
  if(huart->Instance==UART7)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a79      	ldr	r2, [pc, #484]	; (800454c <HAL_UART_MspInit+0x210>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d13d      	bne.n	80043e8 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800436c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004370:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004372:	2300      	movs	r3, #0
 8004374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800437c:	4618      	mov	r0, r3
 800437e:	f003 ff9f 	bl	80082c0 <HAL_RCCEx_PeriphCLKConfig>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004388:	f7fd ffa4 	bl	80022d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800438c:	4b70      	ldr	r3, [pc, #448]	; (8004550 <HAL_UART_MspInit+0x214>)
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	4a6f      	ldr	r2, [pc, #444]	; (8004550 <HAL_UART_MspInit+0x214>)
 8004392:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004396:	6413      	str	r3, [r2, #64]	; 0x40
 8004398:	4b6d      	ldr	r3, [pc, #436]	; (8004550 <HAL_UART_MspInit+0x214>)
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80043a4:	4b6a      	ldr	r3, [pc, #424]	; (8004550 <HAL_UART_MspInit+0x214>)
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	4a69      	ldr	r2, [pc, #420]	; (8004550 <HAL_UART_MspInit+0x214>)
 80043aa:	f043 0320 	orr.w	r3, r3, #32
 80043ae:	6313      	str	r3, [r2, #48]	; 0x30
 80043b0:	4b67      	ldr	r3, [pc, #412]	; (8004550 <HAL_UART_MspInit+0x214>)
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	623b      	str	r3, [r7, #32]
 80043ba:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80043bc:	23c0      	movs	r3, #192	; 0xc0
 80043be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c2:	2302      	movs	r3, #2
 80043c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ce:	2303      	movs	r3, #3
 80043d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80043d4:	2308      	movs	r3, #8
 80043d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80043da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80043de:	4619      	mov	r1, r3
 80043e0:	485c      	ldr	r0, [pc, #368]	; (8004554 <HAL_UART_MspInit+0x218>)
 80043e2:	f001 fdab 	bl	8005f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80043e6:	e0ac      	b.n	8004542 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a5a      	ldr	r2, [pc, #360]	; (8004558 <HAL_UART_MspInit+0x21c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d165      	bne.n	80044be <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80043f2:	2340      	movs	r3, #64	; 0x40
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80043f6:	2300      	movs	r3, #0
 80043f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043fe:	4618      	mov	r0, r3
 8004400:	f003 ff5e 	bl	80082c0 <HAL_RCCEx_PeriphCLKConfig>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800440a:	f7fd ff63 	bl	80022d4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800440e:	4b50      	ldr	r3, [pc, #320]	; (8004550 <HAL_UART_MspInit+0x214>)
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	4a4f      	ldr	r2, [pc, #316]	; (8004550 <HAL_UART_MspInit+0x214>)
 8004414:	f043 0310 	orr.w	r3, r3, #16
 8004418:	6453      	str	r3, [r2, #68]	; 0x44
 800441a:	4b4d      	ldr	r3, [pc, #308]	; (8004550 <HAL_UART_MspInit+0x214>)
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004426:	4b4a      	ldr	r3, [pc, #296]	; (8004550 <HAL_UART_MspInit+0x214>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	4a49      	ldr	r2, [pc, #292]	; (8004550 <HAL_UART_MspInit+0x214>)
 800442c:	f043 0302 	orr.w	r3, r3, #2
 8004430:	6313      	str	r3, [r2, #48]	; 0x30
 8004432:	4b47      	ldr	r3, [pc, #284]	; (8004550 <HAL_UART_MspInit+0x214>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800443e:	4b44      	ldr	r3, [pc, #272]	; (8004550 <HAL_UART_MspInit+0x214>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	4a43      	ldr	r2, [pc, #268]	; (8004550 <HAL_UART_MspInit+0x214>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6313      	str	r3, [r2, #48]	; 0x30
 800444a:	4b41      	ldr	r3, [pc, #260]	; (8004550 <HAL_UART_MspInit+0x214>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445c:	2302      	movs	r3, #2
 800445e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004462:	2300      	movs	r3, #0
 8004464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004468:	2300      	movs	r3, #0
 800446a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800446e:	2307      	movs	r3, #7
 8004470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004474:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004478:	4619      	mov	r1, r3
 800447a:	4838      	ldr	r0, [pc, #224]	; (800455c <HAL_UART_MspInit+0x220>)
 800447c:	f001 fd5e 	bl	8005f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004484:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004488:	2302      	movs	r3, #2
 800448a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	2300      	movs	r3, #0
 8004490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004494:	2300      	movs	r3, #0
 8004496:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800449a:	2307      	movs	r3, #7
 800449c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80044a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80044a4:	4619      	mov	r1, r3
 80044a6:	482e      	ldr	r0, [pc, #184]	; (8004560 <HAL_UART_MspInit+0x224>)
 80044a8:	f001 fd48 	bl	8005f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80044ac:	2200      	movs	r2, #0
 80044ae:	2105      	movs	r1, #5
 80044b0:	2025      	movs	r0, #37	; 0x25
 80044b2:	f000 fe4d 	bl	8005150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80044b6:	2025      	movs	r0, #37	; 0x25
 80044b8:	f000 fe66 	bl	8005188 <HAL_NVIC_EnableIRQ>
}
 80044bc:	e041      	b.n	8004542 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a28      	ldr	r2, [pc, #160]	; (8004564 <HAL_UART_MspInit+0x228>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d13c      	bne.n	8004542 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80044c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80044ce:	2300      	movs	r3, #0
 80044d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044d8:	4618      	mov	r0, r3
 80044da:	f003 fef1 	bl	80082c0 <HAL_RCCEx_PeriphCLKConfig>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 80044e4:	f7fd fef6 	bl	80022d4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80044e8:	4b19      	ldr	r3, [pc, #100]	; (8004550 <HAL_UART_MspInit+0x214>)
 80044ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ec:	4a18      	ldr	r2, [pc, #96]	; (8004550 <HAL_UART_MspInit+0x214>)
 80044ee:	f043 0320 	orr.w	r3, r3, #32
 80044f2:	6453      	str	r3, [r2, #68]	; 0x44
 80044f4:	4b16      	ldr	r3, [pc, #88]	; (8004550 <HAL_UART_MspInit+0x214>)
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004500:	4b13      	ldr	r3, [pc, #76]	; (8004550 <HAL_UART_MspInit+0x214>)
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	4a12      	ldr	r2, [pc, #72]	; (8004550 <HAL_UART_MspInit+0x214>)
 8004506:	f043 0304 	orr.w	r3, r3, #4
 800450a:	6313      	str	r3, [r2, #48]	; 0x30
 800450c:	4b10      	ldr	r3, [pc, #64]	; (8004550 <HAL_UART_MspInit+0x214>)
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004518:	23c0      	movs	r3, #192	; 0xc0
 800451a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451e:	2302      	movs	r3, #2
 8004520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004524:	2300      	movs	r3, #0
 8004526:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452a:	2303      	movs	r3, #3
 800452c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004530:	2308      	movs	r3, #8
 8004532:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004536:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800453a:	4619      	mov	r1, r3
 800453c:	480a      	ldr	r0, [pc, #40]	; (8004568 <HAL_UART_MspInit+0x22c>)
 800453e:	f001 fcfd 	bl	8005f3c <HAL_GPIO_Init>
}
 8004542:	bf00      	nop
 8004544:	37c0      	adds	r7, #192	; 0xc0
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40007800 	.word	0x40007800
 8004550:	40023800 	.word	0x40023800
 8004554:	40021400 	.word	0x40021400
 8004558:	40011000 	.word	0x40011000
 800455c:	40020400 	.word	0x40020400
 8004560:	40020000 	.word	0x40020000
 8004564:	40011400 	.word	0x40011400
 8004568:	40020800 	.word	0x40020800

0800456c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004572:	1d3b      	adds	r3, r7, #4
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	609a      	str	r2, [r3, #8]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004580:	4b3a      	ldr	r3, [pc, #232]	; (800466c <HAL_FMC_MspInit+0x100>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d16d      	bne.n	8004664 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004588:	4b38      	ldr	r3, [pc, #224]	; (800466c <HAL_FMC_MspInit+0x100>)
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800458e:	4b38      	ldr	r3, [pc, #224]	; (8004670 <HAL_FMC_MspInit+0x104>)
 8004590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004592:	4a37      	ldr	r2, [pc, #220]	; (8004670 <HAL_FMC_MspInit+0x104>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6393      	str	r3, [r2, #56]	; 0x38
 800459a:	4b35      	ldr	r3, [pc, #212]	; (8004670 <HAL_FMC_MspInit+0x104>)
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80045a6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80045aa:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ac:	2302      	movs	r3, #2
 80045ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045b4:	2303      	movs	r3, #3
 80045b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045b8:	230c      	movs	r3, #12
 80045ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80045bc:	1d3b      	adds	r3, r7, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	482c      	ldr	r0, [pc, #176]	; (8004674 <HAL_FMC_MspInit+0x108>)
 80045c2:	f001 fcbb 	bl	8005f3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80045c6:	f248 1333 	movw	r3, #33075	; 0x8133
 80045ca:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045cc:	2302      	movs	r3, #2
 80045ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d4:	2303      	movs	r3, #3
 80045d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045d8:	230c      	movs	r3, #12
 80045da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045dc:	1d3b      	adds	r3, r7, #4
 80045de:	4619      	mov	r1, r3
 80045e0:	4825      	ldr	r0, [pc, #148]	; (8004678 <HAL_FMC_MspInit+0x10c>)
 80045e2:	f001 fcab 	bl	8005f3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80045e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80045ea:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ec:	2302      	movs	r3, #2
 80045ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f4:	2303      	movs	r3, #3
 80045f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80045f8:	230c      	movs	r3, #12
 80045fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045fc:	1d3b      	adds	r3, r7, #4
 80045fe:	4619      	mov	r1, r3
 8004600:	481e      	ldr	r0, [pc, #120]	; (800467c <HAL_FMC_MspInit+0x110>)
 8004602:	f001 fc9b 	bl	8005f3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004606:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800460a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460c:	2302      	movs	r3, #2
 800460e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004614:	2303      	movs	r3, #3
 8004616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004618:	230c      	movs	r3, #12
 800461a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800461c:	1d3b      	adds	r3, r7, #4
 800461e:	4619      	mov	r1, r3
 8004620:	4817      	ldr	r0, [pc, #92]	; (8004680 <HAL_FMC_MspInit+0x114>)
 8004622:	f001 fc8b 	bl	8005f3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004626:	2328      	movs	r3, #40	; 0x28
 8004628:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462a:	2302      	movs	r3, #2
 800462c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004632:	2303      	movs	r3, #3
 8004634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004636:	230c      	movs	r3, #12
 8004638:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800463a:	1d3b      	adds	r3, r7, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4811      	ldr	r0, [pc, #68]	; (8004684 <HAL_FMC_MspInit+0x118>)
 8004640:	f001 fc7c 	bl	8005f3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004644:	2308      	movs	r3, #8
 8004646:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004648:	2302      	movs	r3, #2
 800464a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464c:	2300      	movs	r3, #0
 800464e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004650:	2303      	movs	r3, #3
 8004652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004654:	230c      	movs	r3, #12
 8004656:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004658:	1d3b      	adds	r3, r7, #4
 800465a:	4619      	mov	r1, r3
 800465c:	480a      	ldr	r0, [pc, #40]	; (8004688 <HAL_FMC_MspInit+0x11c>)
 800465e:	f001 fc6d 	bl	8005f3c <HAL_GPIO_Init>
 8004662:	e000      	b.n	8004666 <HAL_FMC_MspInit+0xfa>
    return;
 8004664:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	200005a4 	.word	0x200005a4
 8004670:	40023800 	.word	0x40023800
 8004674:	40021000 	.word	0x40021000
 8004678:	40021800 	.word	0x40021800
 800467c:	40020c00 	.word	0x40020c00
 8004680:	40021400 	.word	0x40021400
 8004684:	40021c00 	.word	0x40021c00
 8004688:	40020800 	.word	0x40020800

0800468c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004694:	f7ff ff6a 	bl	800456c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08c      	sub	sp, #48	; 0x30
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80046b0:	2200      	movs	r2, #0
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	2036      	movs	r0, #54	; 0x36
 80046b6:	f000 fd4b 	bl	8005150 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80046ba:	2036      	movs	r0, #54	; 0x36
 80046bc:	f000 fd64 	bl	8005188 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80046c0:	4b1f      	ldr	r3, [pc, #124]	; (8004740 <HAL_InitTick+0xa0>)
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	4a1e      	ldr	r2, [pc, #120]	; (8004740 <HAL_InitTick+0xa0>)
 80046c6:	f043 0310 	orr.w	r3, r3, #16
 80046ca:	6413      	str	r3, [r2, #64]	; 0x40
 80046cc:	4b1c      	ldr	r3, [pc, #112]	; (8004740 <HAL_InitTick+0xa0>)
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80046d8:	f107 0210 	add.w	r2, r7, #16
 80046dc:	f107 0314 	add.w	r3, r7, #20
 80046e0:	4611      	mov	r1, r2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f003 fdba 	bl	800825c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80046e8:	f003 fd90 	bl	800820c <HAL_RCC_GetPCLK1Freq>
 80046ec:	4603      	mov	r3, r0
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	4a13      	ldr	r2, [pc, #76]	; (8004744 <HAL_InitTick+0xa4>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	0c9b      	lsrs	r3, r3, #18
 80046fc:	3b01      	subs	r3, #1
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004700:	4b11      	ldr	r3, [pc, #68]	; (8004748 <HAL_InitTick+0xa8>)
 8004702:	4a12      	ldr	r2, [pc, #72]	; (800474c <HAL_InitTick+0xac>)
 8004704:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004706:	4b10      	ldr	r3, [pc, #64]	; (8004748 <HAL_InitTick+0xa8>)
 8004708:	f240 32e7 	movw	r2, #999	; 0x3e7
 800470c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800470e:	4a0e      	ldr	r2, [pc, #56]	; (8004748 <HAL_InitTick+0xa8>)
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004714:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <HAL_InitTick+0xa8>)
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_InitTick+0xa8>)
 800471c:	2200      	movs	r2, #0
 800471e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004720:	4809      	ldr	r0, [pc, #36]	; (8004748 <HAL_InitTick+0xa8>)
 8004722:	f004 fed1 	bl	80094c8 <HAL_TIM_Base_Init>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d104      	bne.n	8004736 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800472c:	4806      	ldr	r0, [pc, #24]	; (8004748 <HAL_InitTick+0xa8>)
 800472e:	f004 ff23 	bl	8009578 <HAL_TIM_Base_Start_IT>
 8004732:	4603      	mov	r3, r0
 8004734:	e000      	b.n	8004738 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
}
 8004738:	4618      	mov	r0, r3
 800473a:	3730      	adds	r7, #48	; 0x30
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40023800 	.word	0x40023800
 8004744:	431bde83 	.word	0x431bde83
 8004748:	200087d4 	.word	0x200087d4
 800474c:	40001000 	.word	0x40001000

08004750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004754:	e7fe      	b.n	8004754 <NMI_Handler+0x4>

08004756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004756:	b480      	push	{r7}
 8004758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800475a:	e7fe      	b.n	800475a <HardFault_Handler+0x4>

0800475c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004760:	e7fe      	b.n	8004760 <MemManage_Handler+0x4>

08004762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004762:	b480      	push	{r7}
 8004764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004766:	e7fe      	b.n	8004766 <BusFault_Handler+0x4>

08004768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800476c:	e7fe      	b.n	800476c <UsageFault_Handler+0x4>

0800476e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800476e:	b480      	push	{r7}
 8004770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004772:	bf00      	nop
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004780:	4802      	ldr	r0, [pc, #8]	; (800478c <USART1_IRQHandler+0x10>)
 8004782:	f005 fbb7 	bl	8009ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004786:	bf00      	nop
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	200084a4 	.word	0x200084a4

08004790 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWDIO_Pin);
 8004794:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004798:	f001 febc 	bl	8006514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800479c:	bf00      	nop
 800479e:	bd80      	pop	{r7, pc}

080047a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <TIM6_DAC_IRQHandler+0x20>)
 80047a6:	791b      	ldrb	r3, [r3, #4]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80047ae:	4804      	ldr	r0, [pc, #16]	; (80047c0 <TIM6_DAC_IRQHandler+0x20>)
 80047b0:	f000 fd1a 	bl	80051e8 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80047b4:	4803      	ldr	r0, [pc, #12]	; (80047c4 <TIM6_DAC_IRQHandler+0x24>)
 80047b6:	f004 ff57 	bl	8009668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80047ba:	bf00      	nop
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	2000852c 	.word	0x2000852c
 80047c4:	200087d4 	.word	0x200087d4

080047c8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80047cc:	4802      	ldr	r0, [pc, #8]	; (80047d8 <LTDC_IRQHandler+0x10>)
 80047ce:	f002 fdc3 	bl	8007358 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20008368 	.word	0x20008368

080047dc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80047e0:	4802      	ldr	r0, [pc, #8]	; (80047ec <DMA2D_IRQHandler+0x10>)
 80047e2:	f001 f96d 	bl	8005ac0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20008634 	.word	0x20008634

080047f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <SystemInit+0x20>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	4a05      	ldr	r2, [pc, #20]	; (8004810 <SystemInit+0x20>)
 80047fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800484c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004818:	480d      	ldr	r0, [pc, #52]	; (8004850 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800481a:	490e      	ldr	r1, [pc, #56]	; (8004854 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800481c:	4a0e      	ldr	r2, [pc, #56]	; (8004858 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800481e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004820:	e002      	b.n	8004828 <LoopCopyDataInit>

08004822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004826:	3304      	adds	r3, #4

08004828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800482a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800482c:	d3f9      	bcc.n	8004822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800482e:	4a0b      	ldr	r2, [pc, #44]	; (800485c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004830:	4c0b      	ldr	r4, [pc, #44]	; (8004860 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004834:	e001      	b.n	800483a <LoopFillZerobss>

08004836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004838:	3204      	adds	r2, #4

0800483a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800483a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800483c:	d3fb      	bcc.n	8004836 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800483e:	f7ff ffd7 	bl	80047f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004842:	f008 feff 	bl	800d644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004846:	f7fc f985 	bl	8000b54 <main>
  bx  lr    
 800484a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800484c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004854:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8004858:	08033b30 	.word	0x08033b30
  ldr r2, =_sbss
 800485c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8004860:	20008830 	.word	0x20008830

08004864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004864:	e7fe      	b.n	8004864 <ADC_IRQHandler>
	...

08004868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800486c:	4b08      	ldr	r3, [pc, #32]	; (8004890 <HAL_Init+0x28>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a07      	ldr	r2, [pc, #28]	; (8004890 <HAL_Init+0x28>)
 8004872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004878:	2003      	movs	r0, #3
 800487a:	f000 fc5e 	bl	800513a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800487e:	200f      	movs	r0, #15
 8004880:	f7ff ff0e 	bl	80046a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004884:	f7ff f94e 	bl	8003b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40023c00 	.word	0x40023c00

08004894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_IncTick+0x20>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	4b06      	ldr	r3, [pc, #24]	; (80048b8 <HAL_IncTick+0x24>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4413      	add	r3, r2
 80048a4:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <HAL_IncTick+0x24>)
 80048a6:	6013      	str	r3, [r2, #0]
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20000048 	.word	0x20000048
 80048b8:	20008820 	.word	0x20008820

080048bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return uwTick;
 80048c0:	4b03      	ldr	r3, [pc, #12]	; (80048d0 <HAL_GetTick+0x14>)
 80048c2:	681b      	ldr	r3, [r3, #0]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20008820 	.word	0x20008820

080048d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048dc:	f7ff ffee 	bl	80048bc <HAL_GetTick>
 80048e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d005      	beq.n	80048fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <HAL_Delay+0x44>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048fa:	bf00      	nop
 80048fc:	f7ff ffde 	bl	80048bc <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	429a      	cmp	r2, r3
 800490a:	d8f7      	bhi.n	80048fc <HAL_Delay+0x28>
  {
  }
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	20000048 	.word	0x20000048

0800491c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e031      	b.n	8004996 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff f91a 	bl	8003b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b00      	cmp	r3, #0
 8004958:	d116      	bne.n	8004988 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <HAL_ADC_Init+0x84>)
 8004960:	4013      	ands	r3, r2
 8004962:	f043 0202 	orr.w	r2, r3, #2
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa3e 	bl	8004dec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f023 0303 	bic.w	r3, r3, #3
 800497e:	f043 0201 	orr.w	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
 8004986:	e001      	b.n	800498c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	ffffeefd 	.word	0xffffeefd

080049a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_ADC_Start+0x1a>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e0ad      	b.n	8004b1a <HAL_ADC_Start+0x176>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d018      	beq.n	8004a06 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80049e4:	4b50      	ldr	r3, [pc, #320]	; (8004b28 <HAL_ADC_Start+0x184>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a50      	ldr	r2, [pc, #320]	; (8004b2c <HAL_ADC_Start+0x188>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	0c9a      	lsrs	r2, r3, #18
 80049f0:	4613      	mov	r3, r2
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	4413      	add	r3, r2
 80049f6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80049f8:	e002      	b.n	8004a00 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f9      	bne.n	80049fa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d175      	bne.n	8004b00 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a18:	4b45      	ldr	r3, [pc, #276]	; (8004b30 <HAL_ADC_Start+0x18c>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a4e:	d106      	bne.n	8004a5e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	f023 0206 	bic.w	r2, r3, #6
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	645a      	str	r2, [r3, #68]	; 0x44
 8004a5c:	e002      	b.n	8004a64 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004a74:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004a76:	4b2f      	ldr	r3, [pc, #188]	; (8004b34 <HAL_ADC_Start+0x190>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 031f 	and.w	r3, r3, #31
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10f      	bne.n	8004aa2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d143      	bne.n	8004b18 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	e03a      	b.n	8004b18 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a24      	ldr	r2, [pc, #144]	; (8004b38 <HAL_ADC_Start+0x194>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d10e      	bne.n	8004aca <HAL_ADC_Start+0x126>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d107      	bne.n	8004aca <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ac8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004aca:	4b1a      	ldr	r3, [pc, #104]	; (8004b34 <HAL_ADC_Start+0x190>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f003 0310 	and.w	r3, r3, #16
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d120      	bne.n	8004b18 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a18      	ldr	r2, [pc, #96]	; (8004b3c <HAL_ADC_Start+0x198>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d11b      	bne.n	8004b18 <HAL_ADC_Start+0x174>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d114      	bne.n	8004b18 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004afc:	609a      	str	r2, [r3, #8]
 8004afe:	e00b      	b.n	8004b18 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	f043 0210 	orr.w	r2, r3, #16
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b10:	f043 0201 	orr.w	r2, r3, #1
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	20000040 	.word	0x20000040
 8004b2c:	431bde83 	.word	0x431bde83
 8004b30:	fffff8fe 	.word	0xfffff8fe
 8004b34:	40012300 	.word	0x40012300
 8004b38:	40012000 	.word	0x40012000
 8004b3c:	40012200 	.word	0x40012200

08004b40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x1c>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e136      	b.n	8004dca <HAL_ADC_ConfigChannel+0x28a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b09      	cmp	r3, #9
 8004b6a:	d93a      	bls.n	8004be2 <HAL_ADC_ConfigChannel+0xa2>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b74:	d035      	beq.n	8004be2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68d9      	ldr	r1, [r3, #12]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	4613      	mov	r3, r2
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	4413      	add	r3, r2
 8004b8a:	3b1e      	subs	r3, #30
 8004b8c:	2207      	movs	r2, #7
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43da      	mvns	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	400a      	ands	r2, r1
 8004b9a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a8d      	ldr	r2, [pc, #564]	; (8004dd8 <HAL_ADC_ConfigChannel+0x298>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d10a      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68d9      	ldr	r1, [r3, #12]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	061a      	lsls	r2, r3, #24
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bba:	e035      	b.n	8004c28 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68d9      	ldr	r1, [r3, #12]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	4618      	mov	r0, r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4403      	add	r3, r0
 8004bd4:	3b1e      	subs	r3, #30
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004be0:	e022      	b.n	8004c28 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6919      	ldr	r1, [r3, #16]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4413      	add	r3, r2
 8004bf6:	2207      	movs	r2, #7
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	400a      	ands	r2, r1
 8004c04:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6919      	ldr	r1, [r3, #16]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	4618      	mov	r0, r3
 8004c18:	4603      	mov	r3, r0
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	4403      	add	r3, r0
 8004c1e:	409a      	lsls	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b06      	cmp	r3, #6
 8004c2e:	d824      	bhi.n	8004c7a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	3b05      	subs	r3, #5
 8004c42:	221f      	movs	r2, #31
 8004c44:	fa02 f303 	lsl.w	r3, r2, r3
 8004c48:	43da      	mvns	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	400a      	ands	r2, r1
 8004c50:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	4618      	mov	r0, r3
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	3b05      	subs	r3, #5
 8004c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	635a      	str	r2, [r3, #52]	; 0x34
 8004c78:	e04c      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d824      	bhi.n	8004ccc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	3b23      	subs	r3, #35	; 0x23
 8004c94:	221f      	movs	r2, #31
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	400a      	ands	r2, r1
 8004ca2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	3b23      	subs	r3, #35	; 0x23
 8004cbe:	fa00 f203 	lsl.w	r2, r0, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	631a      	str	r2, [r3, #48]	; 0x30
 8004cca:	e023      	b.n	8004d14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	3b41      	subs	r3, #65	; 0x41
 8004cde:	221f      	movs	r2, #31
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	43da      	mvns	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	400a      	ands	r2, r1
 8004cec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	3b41      	subs	r3, #65	; 0x41
 8004d08:	fa00 f203 	lsl.w	r2, r0, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a30      	ldr	r2, [pc, #192]	; (8004ddc <HAL_ADC_ConfigChannel+0x29c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d10a      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x1f4>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d26:	d105      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004d28:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d2e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004d32:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a28      	ldr	r2, [pc, #160]	; (8004ddc <HAL_ADC_ConfigChannel+0x29c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10f      	bne.n	8004d5e <HAL_ADC_ConfigChannel+0x21e>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b12      	cmp	r3, #18
 8004d44:	d10b      	bne.n	8004d5e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004d46:	4b26      	ldr	r3, [pc, #152]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4a25      	ldr	r2, [pc, #148]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d50:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004d52:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4a22      	ldr	r2, [pc, #136]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d5c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1e      	ldr	r2, [pc, #120]	; (8004ddc <HAL_ADC_ConfigChannel+0x29c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d12b      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x280>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a1a      	ldr	r2, [pc, #104]	; (8004dd8 <HAL_ADC_ConfigChannel+0x298>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d003      	beq.n	8004d7a <HAL_ADC_ConfigChannel+0x23a>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b11      	cmp	r3, #17
 8004d78:	d122      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004d7a:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d80:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004d84:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004d86:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004d8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d90:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a10      	ldr	r2, [pc, #64]	; (8004dd8 <HAL_ADC_ConfigChannel+0x298>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d111      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_ADC_ConfigChannel+0x2a4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a11      	ldr	r2, [pc, #68]	; (8004de8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	0c9a      	lsrs	r2, r3, #18
 8004da8:	4613      	mov	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004db2:	e002      	b.n	8004dba <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1f9      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	10000012 	.word	0x10000012
 8004ddc:	40012000 	.word	0x40012000
 8004de0:	40012300 	.word	0x40012300
 8004de4:	20000040 	.word	0x20000040
 8004de8:	431bde83 	.word	0x431bde83

08004dec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004df4:	4b78      	ldr	r3, [pc, #480]	; (8004fd8 <ADC_Init+0x1ec>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4a77      	ldr	r2, [pc, #476]	; (8004fd8 <ADC_Init+0x1ec>)
 8004dfa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004dfe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004e00:	4b75      	ldr	r3, [pc, #468]	; (8004fd8 <ADC_Init+0x1ec>)
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	4973      	ldr	r1, [pc, #460]	; (8004fd8 <ADC_Init+0x1ec>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6859      	ldr	r1, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	021a      	lsls	r2, r3, #8
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6859      	ldr	r1, [r3, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6899      	ldr	r1, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	4a58      	ldr	r2, [pc, #352]	; (8004fdc <ADC_Init+0x1f0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d022      	beq.n	8004ec6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6899      	ldr	r1, [r3, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6899      	ldr	r1, [r3, #8]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	609a      	str	r2, [r3, #8]
 8004ec4:	e00f      	b.n	8004ee6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ee4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0202 	bic.w	r2, r2, #2
 8004ef4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6899      	ldr	r1, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	005a      	lsls	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01b      	beq.n	8004f4c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004f32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6859      	ldr	r1, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	035a      	lsls	r2, r3, #13
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	e007      	b.n	8004f5c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	051a      	lsls	r2, r3, #20
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6899      	ldr	r1, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f9e:	025a      	lsls	r2, r3, #9
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6899      	ldr	r1, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	029a      	lsls	r2, r3, #10
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	609a      	str	r2, [r3, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40012300 	.word	0x40012300
 8004fdc:	0f000001 	.word	0x0f000001

08004fe0 <__NVIC_SetPriorityGrouping>:
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <__NVIC_SetPriorityGrouping+0x40>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005008:	4b06      	ldr	r3, [pc, #24]	; (8005024 <__NVIC_SetPriorityGrouping+0x44>)
 800500a:	4313      	orrs	r3, r2
 800500c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800500e:	4a04      	ldr	r2, [pc, #16]	; (8005020 <__NVIC_SetPriorityGrouping+0x40>)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	60d3      	str	r3, [r2, #12]
}
 8005014:	bf00      	nop
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	e000ed00 	.word	0xe000ed00
 8005024:	05fa0000 	.word	0x05fa0000

08005028 <__NVIC_GetPriorityGrouping>:
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800502c:	4b04      	ldr	r3, [pc, #16]	; (8005040 <__NVIC_GetPriorityGrouping+0x18>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	0a1b      	lsrs	r3, r3, #8
 8005032:	f003 0307 	and.w	r3, r3, #7
}
 8005036:	4618      	mov	r0, r3
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	e000ed00 	.word	0xe000ed00

08005044 <__NVIC_EnableIRQ>:
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800504e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005052:	2b00      	cmp	r3, #0
 8005054:	db0b      	blt.n	800506e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	f003 021f 	and.w	r2, r3, #31
 800505c:	4907      	ldr	r1, [pc, #28]	; (800507c <__NVIC_EnableIRQ+0x38>)
 800505e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005062:	095b      	lsrs	r3, r3, #5
 8005064:	2001      	movs	r0, #1
 8005066:	fa00 f202 	lsl.w	r2, r0, r2
 800506a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	e000e100 	.word	0xe000e100

08005080 <__NVIC_SetPriority>:
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	4603      	mov	r3, r0
 8005088:	6039      	str	r1, [r7, #0]
 800508a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800508c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005090:	2b00      	cmp	r3, #0
 8005092:	db0a      	blt.n	80050aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	b2da      	uxtb	r2, r3
 8005098:	490c      	ldr	r1, [pc, #48]	; (80050cc <__NVIC_SetPriority+0x4c>)
 800509a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509e:	0112      	lsls	r2, r2, #4
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	440b      	add	r3, r1
 80050a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80050a8:	e00a      	b.n	80050c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	4908      	ldr	r1, [pc, #32]	; (80050d0 <__NVIC_SetPriority+0x50>)
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	3b04      	subs	r3, #4
 80050b8:	0112      	lsls	r2, r2, #4
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	440b      	add	r3, r1
 80050be:	761a      	strb	r2, [r3, #24]
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	e000e100 	.word	0xe000e100
 80050d0:	e000ed00 	.word	0xe000ed00

080050d4 <NVIC_EncodePriority>:
{
 80050d4:	b480      	push	{r7}
 80050d6:	b089      	sub	sp, #36	; 0x24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f1c3 0307 	rsb	r3, r3, #7
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	bf28      	it	cs
 80050f2:	2304      	movcs	r3, #4
 80050f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	3304      	adds	r3, #4
 80050fa:	2b06      	cmp	r3, #6
 80050fc:	d902      	bls.n	8005104 <NVIC_EncodePriority+0x30>
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	3b03      	subs	r3, #3
 8005102:	e000      	b.n	8005106 <NVIC_EncodePriority+0x32>
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005108:	f04f 32ff 	mov.w	r2, #4294967295
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43da      	mvns	r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	401a      	ands	r2, r3
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800511c:	f04f 31ff 	mov.w	r1, #4294967295
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	fa01 f303 	lsl.w	r3, r1, r3
 8005126:	43d9      	mvns	r1, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800512c:	4313      	orrs	r3, r2
}
 800512e:	4618      	mov	r0, r3
 8005130:	3724      	adds	r7, #36	; 0x24
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff ff4c 	bl	8004fe0 <__NVIC_SetPriorityGrouping>
}
 8005148:	bf00      	nop
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800515e:	2300      	movs	r3, #0
 8005160:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005162:	f7ff ff61 	bl	8005028 <__NVIC_GetPriorityGrouping>
 8005166:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	6978      	ldr	r0, [r7, #20]
 800516e:	f7ff ffb1 	bl	80050d4 <NVIC_EncodePriority>
 8005172:	4602      	mov	r2, r0
 8005174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff ff80 	bl	8005080 <__NVIC_SetPriority>
}
 8005180:	bf00      	nop
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff ff54 	bl	8005044 <__NVIC_EnableIRQ>
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e014      	b.n	80051e0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	791b      	ldrb	r3, [r3, #4]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fe fd42 	bl	8003c50 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051fe:	d120      	bne.n	8005242 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005206:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800520a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520e:	d118      	bne.n	8005242 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2204      	movs	r2, #4
 8005214:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f043 0201 	orr.w	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800522a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800523a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f82d 	bl	800529c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800524c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005250:	d120      	bne.n	8005294 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800525c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005260:	d118      	bne.n	8005294 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2204      	movs	r2, #4
 8005266:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f043 0202 	orr.w	r2, r3, #2
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800527c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800528c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f85d 	bl	800534e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005294:	bf00      	nop
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	795b      	ldrb	r3, [r3, #5]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_DAC_ConfigChannel+0x18>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e03c      	b.n	8005342 <HAL_DAC_ConfigChannel+0x92>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2202      	movs	r2, #2
 80052d2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	43db      	mvns	r3, r3
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4013      	ands	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	22c0      	movs	r2, #192	; 0xc0
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	43da      	mvns	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	400a      	ands	r2, r1
 8005332:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005370:	f7ff faa4 	bl	80048bc <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e099      	b.n	80054b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0201 	bic.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053a0:	e00f      	b.n	80053c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053a2:	f7ff fa8b 	bl	80048bc <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b05      	cmp	r3, #5
 80053ae:	d908      	bls.n	80053c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2203      	movs	r2, #3
 80053ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e078      	b.n	80054b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e8      	bne.n	80053a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4b38      	ldr	r3, [pc, #224]	; (80054bc <HAL_DMA_Init+0x158>)
 80053dc:	4013      	ands	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	2b04      	cmp	r3, #4
 800541a:	d107      	bne.n	800542c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	4313      	orrs	r3, r2
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f023 0307 	bic.w	r3, r3, #7
 8005442:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	2b04      	cmp	r3, #4
 8005454:	d117      	bne.n	8005486 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00e      	beq.n	8005486 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f94f 	bl	800570c <DMA_CheckFifoParam>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2240      	movs	r2, #64	; 0x40
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005482:	2301      	movs	r3, #1
 8005484:	e016      	b.n	80054b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f906 	bl	80056a0 <DMA_CalcBaseAndBitshift>
 8005494:	4603      	mov	r3, r0
 8005496:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549c:	223f      	movs	r2, #63	; 0x3f
 800549e:	409a      	lsls	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	f010803f 	.word	0xf010803f

080054c0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e050      	b.n	8005574 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d101      	bne.n	80054e2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80054de:	2302      	movs	r3, #2
 80054e0:	e048      	b.n	8005574 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 0201 	bic.w	r2, r2, #1
 80054f0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2200      	movs	r2, #0
 8005500:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2200      	movs	r2, #0
 8005508:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2200      	movs	r2, #0
 8005510:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2200      	movs	r2, #0
 8005518:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2221      	movs	r2, #33	; 0x21
 8005520:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f8bc 	bl	80056a0 <DMA_CalcBaseAndBitshift>
 8005528:	4603      	mov	r3, r0
 800552a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005530:	223f      	movs	r2, #63	; 0x3f
 8005532:	409a      	lsls	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005588:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800558a:	f7ff f997 	bl	80048bc <HAL_GetTick>
 800558e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d008      	beq.n	80055ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2280      	movs	r2, #128	; 0x80
 80055a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e052      	b.n	8005654 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0216 	bic.w	r2, r2, #22
 80055bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <HAL_DMA_Abort+0x62>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d007      	beq.n	80055ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0208 	bic.w	r2, r2, #8
 80055ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055fe:	e013      	b.n	8005628 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005600:	f7ff f95c 	bl	80048bc <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b05      	cmp	r3, #5
 800560c:	d90c      	bls.n	8005628 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2220      	movs	r2, #32
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2203      	movs	r2, #3
 8005618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e015      	b.n	8005654 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e4      	bne.n	8005600 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563a:	223f      	movs	r2, #63	; 0x3f
 800563c:	409a      	lsls	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d004      	beq.n	800567a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2280      	movs	r2, #128	; 0x80
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e00c      	b.n	8005694 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2205      	movs	r2, #5
 800567e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	3b10      	subs	r3, #16
 80056b0:	4a13      	ldr	r2, [pc, #76]	; (8005700 <DMA_CalcBaseAndBitshift+0x60>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	091b      	lsrs	r3, r3, #4
 80056b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056ba:	4a12      	ldr	r2, [pc, #72]	; (8005704 <DMA_CalcBaseAndBitshift+0x64>)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d908      	bls.n	80056e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <DMA_CalcBaseAndBitshift+0x68>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	1d1a      	adds	r2, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	659a      	str	r2, [r3, #88]	; 0x58
 80056de:	e006      	b.n	80056ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	4b08      	ldr	r3, [pc, #32]	; (8005708 <DMA_CalcBaseAndBitshift+0x68>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	aaaaaaab 	.word	0xaaaaaaab
 8005704:	08033ab8 	.word	0x08033ab8
 8005708:	fffffc00 	.word	0xfffffc00

0800570c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d11f      	bne.n	8005766 <DMA_CheckFifoParam+0x5a>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b03      	cmp	r3, #3
 800572a:	d856      	bhi.n	80057da <DMA_CheckFifoParam+0xce>
 800572c:	a201      	add	r2, pc, #4	; (adr r2, 8005734 <DMA_CheckFifoParam+0x28>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005745 	.word	0x08005745
 8005738:	08005757 	.word	0x08005757
 800573c:	08005745 	.word	0x08005745
 8005740:	080057db 	.word	0x080057db
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d046      	beq.n	80057de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005754:	e043      	b.n	80057de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800575e:	d140      	bne.n	80057e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005764:	e03d      	b.n	80057e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576e:	d121      	bne.n	80057b4 <DMA_CheckFifoParam+0xa8>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b03      	cmp	r3, #3
 8005774:	d837      	bhi.n	80057e6 <DMA_CheckFifoParam+0xda>
 8005776:	a201      	add	r2, pc, #4	; (adr r2, 800577c <DMA_CheckFifoParam+0x70>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	0800578d 	.word	0x0800578d
 8005780:	08005793 	.word	0x08005793
 8005784:	0800578d 	.word	0x0800578d
 8005788:	080057a5 	.word	0x080057a5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
      break;
 8005790:	e030      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d025      	beq.n	80057ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a2:	e022      	b.n	80057ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057ac:	d11f      	bne.n	80057ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057b2:	e01c      	b.n	80057ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d903      	bls.n	80057c2 <DMA_CheckFifoParam+0xb6>
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d003      	beq.n	80057c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057c0:	e018      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
      break;
 80057c6:	e015      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00e      	beq.n	80057f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	73fb      	strb	r3, [r7, #15]
      break;
 80057d8:	e00b      	b.n	80057f2 <DMA_CheckFifoParam+0xe6>
      break;
 80057da:	bf00      	nop
 80057dc:	e00a      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      break;
 80057de:	bf00      	nop
 80057e0:	e008      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      break;
 80057e2:	bf00      	nop
 80057e4:	e006      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      break;
 80057e6:	bf00      	nop
 80057e8:	e004      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      break;
 80057ea:	bf00      	nop
 80057ec:	e002      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80057ee:	bf00      	nop
 80057f0:	e000      	b.n	80057f4 <DMA_CheckFifoParam+0xe8>
      break;
 80057f2:	bf00      	nop
    }
  } 
  
  return status; 
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop

08005804 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e039      	b.n	800588a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fe fa58 	bl	8003ce0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005854:	f023 0107 	bic.w	r1, r3, #7
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800586a:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <HAL_DMA2D_Init+0x90>)
 800586c:	4013      	ands	r3, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	68d1      	ldr	r1, [r2, #12]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	430b      	orrs	r3, r1
 8005878:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	ffffc000 	.word	0xffffc000

08005898 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af02      	add	r7, sp, #8
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_DMA2D_Start+0x1c>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e018      	b.n	80058e6 <HAL_DMA2D_Start+0x4e>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 fa98 	bl	8005e04 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b086      	sub	sp, #24
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d056      	beq.n	80059b8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800590a:	f7fe ffd7 	bl	80048bc <HAL_GetTick>
 800590e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005910:	e04b      	b.n	80059aa <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005920:	2b00      	cmp	r3, #0
 8005922:	d023      	beq.n	800596c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	f043 0202 	orr.w	r2, r3, #2
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005948:	f043 0201 	orr.w	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2221      	movs	r2, #33	; 0x21
 8005956:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2204      	movs	r2, #4
 800595c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0a5      	b.n	8005ab8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d01a      	beq.n	80059aa <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005974:	f7fe ffa2 	bl	80048bc <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d302      	bcc.n	800598a <HAL_DMA2D_PollForTransfer+0x9c>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10f      	bne.n	80059aa <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598e:	f043 0220 	orr.w	r2, r3, #32
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2203      	movs	r2, #3
 800599a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e086      	b.n	8005ab8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0ac      	beq.n	8005912 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d061      	beq.n	8005a9e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80059da:	f7fe ff6f 	bl	80048bc <HAL_GetTick>
 80059de:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80059e0:	e056      	b.n	8005a90 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d02e      	beq.n	8005a52 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	f043 0204 	orr.w	r2, r3, #4
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a18:	f043 0202 	orr.w	r2, r3, #2
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d005      	beq.n	8005a36 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	f043 0201 	orr.w	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2229      	movs	r2, #41	; 0x29
 8005a3c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2204      	movs	r2, #4
 8005a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e032      	b.n	8005ab8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d01a      	beq.n	8005a90 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a5a:	f7fe ff2f 	bl	80048bc <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d302      	bcc.n	8005a70 <HAL_DMA2D_PollForTransfer+0x182>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10f      	bne.n	8005a90 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a74:	f043 0220 	orr.w	r2, r3, #32
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2203      	movs	r2, #3
 8005a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e013      	b.n	8005ab8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d0a1      	beq.n	80059e2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2212      	movs	r2, #18
 8005aa4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d026      	beq.n	8005b30 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d021      	beq.n	8005b30 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005afa:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b00:	f043 0201 	orr.w	r2, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2204      	movs	r2, #4
 8005b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d026      	beq.n	8005b88 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d021      	beq.n	8005b88 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b52:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b60:	f043 0202 	orr.w	r2, r3, #2
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d026      	beq.n	8005be0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d021      	beq.n	8005be0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005baa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2208      	movs	r2, #8
 8005bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb8:	f043 0204 	orr.w	r2, r3, #4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2204      	movs	r2, #4
 8005bc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d013      	beq.n	8005c12 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00e      	beq.n	8005c12 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c02:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2204      	movs	r2, #4
 8005c0a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f853 	bl	8005cb8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d024      	beq.n	8005c66 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01f      	beq.n	8005c66 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c34:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d003      	beq.n	8005c66 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f003 0310 	and.w	r3, r3, #16
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01f      	beq.n	8005cb0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d01a      	beq.n	8005cb0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c88:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2210      	movs	r2, #16
 8005c90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f80e 	bl	8005ccc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005cb0:	bf00      	nop
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d101      	bne.n	8005d00 <HAL_DMA2D_ConfigLayer+0x20>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e079      	b.n	8005df4 <HAL_DMA2D_ConfigLayer+0x114>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	3318      	adds	r3, #24
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4413      	add	r3, r2
 8005d1a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	041b      	lsls	r3, r3, #16
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005d2a:	4b35      	ldr	r3, [pc, #212]	; (8005e00 <HAL_DMA2D_ConfigLayer+0x120>)
 8005d2c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b0a      	cmp	r3, #10
 8005d34:	d003      	beq.n	8005d3e <HAL_DMA2D_ConfigLayer+0x5e>
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b09      	cmp	r3, #9
 8005d3c:	d107      	bne.n	8005d4e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	e005      	b.n	8005d5a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	061b      	lsls	r3, r3, #24
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d120      	bne.n	8005da2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	ea02 0103 	and.w	r1, r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2b0a      	cmp	r3, #10
 8005d88:	d003      	beq.n	8005d92 <HAL_DMA2D_ConfigLayer+0xb2>
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2b09      	cmp	r3, #9
 8005d90:	d127      	bne.n	8005de2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8005da0:	e01f      	b.n	8005de2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69da      	ldr	r2, [r3, #28]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	43db      	mvns	r3, r3
 8005dac:	ea02 0103 	and.w	r1, r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b0a      	cmp	r3, #10
 8005dca:	d003      	beq.n	8005dd4 <HAL_DMA2D_ConfigLayer+0xf4>
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b09      	cmp	r3, #9
 8005dd2:	d106      	bne.n	8005de2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005de0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	ff03000f 	.word	0xff03000f

08005e04 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b08b      	sub	sp, #44	; 0x2c
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e18:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	041a      	lsls	r2, r3, #16
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	431a      	orrs	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e3c:	d174      	bne.n	8005f28 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005e44:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e4c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e54:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d108      	bne.n	8005e76 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
 8005e74:	e053      	b.n	8005f1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d106      	bne.n	8005e8c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
 8005e8a:	e048      	b.n	8005f1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d111      	bne.n	8005eb8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	0cdb      	lsrs	r3, r3, #19
 8005e98:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	0a9b      	lsrs	r3, r3, #10
 8005e9e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	08db      	lsrs	r3, r3, #3
 8005ea4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	02db      	lsls	r3, r3, #11
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb6:	e032      	b.n	8005f1e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d117      	bne.n	8005ef0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	0fdb      	lsrs	r3, r3, #31
 8005ec4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	0cdb      	lsrs	r3, r3, #19
 8005eca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	0adb      	lsrs	r3, r3, #11
 8005ed0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	08db      	lsrs	r3, r3, #3
 8005ed6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	029b      	lsls	r3, r3, #10
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	03db      	lsls	r3, r3, #15
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
 8005eee:	e016      	b.n	8005f1e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	0f1b      	lsrs	r3, r3, #28
 8005ef4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	0d1b      	lsrs	r3, r3, #20
 8005efa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	0b1b      	lsrs	r3, r3, #12
 8005f00:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	011a      	lsls	r2, r3, #4
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	021b      	lsls	r3, r3, #8
 8005f10:	431a      	orrs	r2, r3
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	031b      	lsls	r3, r3, #12
 8005f16:	4313      	orrs	r3, r2
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005f26:	e003      	b.n	8005f30 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	60da      	str	r2, [r3, #12]
}
 8005f30:	bf00      	nop
 8005f32:	372c      	adds	r7, #44	; 0x2c
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b089      	sub	sp, #36	; 0x24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005f52:	2300      	movs	r3, #0
 8005f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005f56:	2300      	movs	r3, #0
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	e175      	b.n	8006248 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	fa02 f303 	lsl.w	r3, r2, r3
 8005f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	f040 8164 	bne.w	8006242 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d005      	beq.n	8005f92 <HAL_GPIO_Init+0x56>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d130      	bne.n	8005ff4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	2203      	movs	r2, #3
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fc8:	2201      	movs	r2, #1
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	091b      	lsrs	r3, r3, #4
 8005fde:	f003 0201 	and.w	r2, r3, #1
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d017      	beq.n	8006030 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	2203      	movs	r2, #3
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	43db      	mvns	r3, r3
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	4013      	ands	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	fa02 f303 	lsl.w	r3, r2, r3
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	4313      	orrs	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d123      	bne.n	8006084 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	08da      	lsrs	r2, r3, #3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3208      	adds	r2, #8
 8006044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	220f      	movs	r2, #15
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	43db      	mvns	r3, r3
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	4013      	ands	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4313      	orrs	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	08da      	lsrs	r2, r3, #3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3208      	adds	r2, #8
 800607e:	69b9      	ldr	r1, [r7, #24]
 8006080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	2203      	movs	r2, #3
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	43db      	mvns	r3, r3
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	4013      	ands	r3, r2
 800609a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f003 0203 	and.w	r2, r3, #3
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	005b      	lsls	r3, r3, #1
 80060a8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 80be 	beq.w	8006242 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060c6:	4b66      	ldr	r3, [pc, #408]	; (8006260 <HAL_GPIO_Init+0x324>)
 80060c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ca:	4a65      	ldr	r2, [pc, #404]	; (8006260 <HAL_GPIO_Init+0x324>)
 80060cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060d0:	6453      	str	r3, [r2, #68]	; 0x44
 80060d2:	4b63      	ldr	r3, [pc, #396]	; (8006260 <HAL_GPIO_Init+0x324>)
 80060d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80060de:	4a61      	ldr	r2, [pc, #388]	; (8006264 <HAL_GPIO_Init+0x328>)
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	089b      	lsrs	r3, r3, #2
 80060e4:	3302      	adds	r3, #2
 80060e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	220f      	movs	r2, #15
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4013      	ands	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a58      	ldr	r2, [pc, #352]	; (8006268 <HAL_GPIO_Init+0x32c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d037      	beq.n	800617a <HAL_GPIO_Init+0x23e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a57      	ldr	r2, [pc, #348]	; (800626c <HAL_GPIO_Init+0x330>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d031      	beq.n	8006176 <HAL_GPIO_Init+0x23a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a56      	ldr	r2, [pc, #344]	; (8006270 <HAL_GPIO_Init+0x334>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d02b      	beq.n	8006172 <HAL_GPIO_Init+0x236>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a55      	ldr	r2, [pc, #340]	; (8006274 <HAL_GPIO_Init+0x338>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d025      	beq.n	800616e <HAL_GPIO_Init+0x232>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a54      	ldr	r2, [pc, #336]	; (8006278 <HAL_GPIO_Init+0x33c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d01f      	beq.n	800616a <HAL_GPIO_Init+0x22e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a53      	ldr	r2, [pc, #332]	; (800627c <HAL_GPIO_Init+0x340>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d019      	beq.n	8006166 <HAL_GPIO_Init+0x22a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a52      	ldr	r2, [pc, #328]	; (8006280 <HAL_GPIO_Init+0x344>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d013      	beq.n	8006162 <HAL_GPIO_Init+0x226>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a51      	ldr	r2, [pc, #324]	; (8006284 <HAL_GPIO_Init+0x348>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00d      	beq.n	800615e <HAL_GPIO_Init+0x222>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a50      	ldr	r2, [pc, #320]	; (8006288 <HAL_GPIO_Init+0x34c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d007      	beq.n	800615a <HAL_GPIO_Init+0x21e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a4f      	ldr	r2, [pc, #316]	; (800628c <HAL_GPIO_Init+0x350>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d101      	bne.n	8006156 <HAL_GPIO_Init+0x21a>
 8006152:	2309      	movs	r3, #9
 8006154:	e012      	b.n	800617c <HAL_GPIO_Init+0x240>
 8006156:	230a      	movs	r3, #10
 8006158:	e010      	b.n	800617c <HAL_GPIO_Init+0x240>
 800615a:	2308      	movs	r3, #8
 800615c:	e00e      	b.n	800617c <HAL_GPIO_Init+0x240>
 800615e:	2307      	movs	r3, #7
 8006160:	e00c      	b.n	800617c <HAL_GPIO_Init+0x240>
 8006162:	2306      	movs	r3, #6
 8006164:	e00a      	b.n	800617c <HAL_GPIO_Init+0x240>
 8006166:	2305      	movs	r3, #5
 8006168:	e008      	b.n	800617c <HAL_GPIO_Init+0x240>
 800616a:	2304      	movs	r3, #4
 800616c:	e006      	b.n	800617c <HAL_GPIO_Init+0x240>
 800616e:	2303      	movs	r3, #3
 8006170:	e004      	b.n	800617c <HAL_GPIO_Init+0x240>
 8006172:	2302      	movs	r3, #2
 8006174:	e002      	b.n	800617c <HAL_GPIO_Init+0x240>
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <HAL_GPIO_Init+0x240>
 800617a:	2300      	movs	r3, #0
 800617c:	69fa      	ldr	r2, [r7, #28]
 800617e:	f002 0203 	and.w	r2, r2, #3
 8006182:	0092      	lsls	r2, r2, #2
 8006184:	4093      	lsls	r3, r2
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	4313      	orrs	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800618c:	4935      	ldr	r1, [pc, #212]	; (8006264 <HAL_GPIO_Init+0x328>)
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	089b      	lsrs	r3, r3, #2
 8006192:	3302      	adds	r3, #2
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800619a:	4b3d      	ldr	r3, [pc, #244]	; (8006290 <HAL_GPIO_Init+0x354>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	43db      	mvns	r3, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4013      	ands	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061be:	4a34      	ldr	r2, [pc, #208]	; (8006290 <HAL_GPIO_Init+0x354>)
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061c4:	4b32      	ldr	r3, [pc, #200]	; (8006290 <HAL_GPIO_Init+0x354>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	43db      	mvns	r3, r3
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	4013      	ands	r3, r2
 80061d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061e8:	4a29      	ldr	r2, [pc, #164]	; (8006290 <HAL_GPIO_Init+0x354>)
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061ee:	4b28      	ldr	r3, [pc, #160]	; (8006290 <HAL_GPIO_Init+0x354>)
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	43db      	mvns	r3, r3
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	4013      	ands	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	4313      	orrs	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006212:	4a1f      	ldr	r2, [pc, #124]	; (8006290 <HAL_GPIO_Init+0x354>)
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006218:	4b1d      	ldr	r3, [pc, #116]	; (8006290 <HAL_GPIO_Init+0x354>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	43db      	mvns	r3, r3
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	4013      	ands	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800623c:	4a14      	ldr	r2, [pc, #80]	; (8006290 <HAL_GPIO_Init+0x354>)
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	3301      	adds	r3, #1
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	2b0f      	cmp	r3, #15
 800624c:	f67f ae86 	bls.w	8005f5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006250:	bf00      	nop
 8006252:	bf00      	nop
 8006254:	3724      	adds	r7, #36	; 0x24
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40023800 	.word	0x40023800
 8006264:	40013800 	.word	0x40013800
 8006268:	40020000 	.word	0x40020000
 800626c:	40020400 	.word	0x40020400
 8006270:	40020800 	.word	0x40020800
 8006274:	40020c00 	.word	0x40020c00
 8006278:	40021000 	.word	0x40021000
 800627c:	40021400 	.word	0x40021400
 8006280:	40021800 	.word	0x40021800
 8006284:	40021c00 	.word	0x40021c00
 8006288:	40022000 	.word	0x40022000
 800628c:	40022400 	.word	0x40022400
 8006290:	40013c00 	.word	0x40013c00

08006294 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800629e:	2300      	movs	r3, #0
 80062a0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80062a6:	2300      	movs	r3, #0
 80062a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e0d9      	b.n	8006464 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80062b0:	2201      	movs	r2, #1
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4013      	ands	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	f040 80c9 	bne.w	800645e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80062cc:	4a6b      	ldr	r2, [pc, #428]	; (800647c <HAL_GPIO_DeInit+0x1e8>)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	089b      	lsrs	r3, r3, #2
 80062d2:	3302      	adds	r3, #2
 80062d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062d8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f003 0303 	and.w	r3, r3, #3
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	220f      	movs	r2, #15
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	4013      	ands	r3, r2
 80062ec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a63      	ldr	r2, [pc, #396]	; (8006480 <HAL_GPIO_DeInit+0x1ec>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d037      	beq.n	8006366 <HAL_GPIO_DeInit+0xd2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a62      	ldr	r2, [pc, #392]	; (8006484 <HAL_GPIO_DeInit+0x1f0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d031      	beq.n	8006362 <HAL_GPIO_DeInit+0xce>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a61      	ldr	r2, [pc, #388]	; (8006488 <HAL_GPIO_DeInit+0x1f4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d02b      	beq.n	800635e <HAL_GPIO_DeInit+0xca>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a60      	ldr	r2, [pc, #384]	; (800648c <HAL_GPIO_DeInit+0x1f8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d025      	beq.n	800635a <HAL_GPIO_DeInit+0xc6>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a5f      	ldr	r2, [pc, #380]	; (8006490 <HAL_GPIO_DeInit+0x1fc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d01f      	beq.n	8006356 <HAL_GPIO_DeInit+0xc2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a5e      	ldr	r2, [pc, #376]	; (8006494 <HAL_GPIO_DeInit+0x200>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d019      	beq.n	8006352 <HAL_GPIO_DeInit+0xbe>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a5d      	ldr	r2, [pc, #372]	; (8006498 <HAL_GPIO_DeInit+0x204>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d013      	beq.n	800634e <HAL_GPIO_DeInit+0xba>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a5c      	ldr	r2, [pc, #368]	; (800649c <HAL_GPIO_DeInit+0x208>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00d      	beq.n	800634a <HAL_GPIO_DeInit+0xb6>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a5b      	ldr	r2, [pc, #364]	; (80064a0 <HAL_GPIO_DeInit+0x20c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d007      	beq.n	8006346 <HAL_GPIO_DeInit+0xb2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a5a      	ldr	r2, [pc, #360]	; (80064a4 <HAL_GPIO_DeInit+0x210>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d101      	bne.n	8006342 <HAL_GPIO_DeInit+0xae>
 800633e:	2309      	movs	r3, #9
 8006340:	e012      	b.n	8006368 <HAL_GPIO_DeInit+0xd4>
 8006342:	230a      	movs	r3, #10
 8006344:	e010      	b.n	8006368 <HAL_GPIO_DeInit+0xd4>
 8006346:	2308      	movs	r3, #8
 8006348:	e00e      	b.n	8006368 <HAL_GPIO_DeInit+0xd4>
 800634a:	2307      	movs	r3, #7
 800634c:	e00c      	b.n	8006368 <HAL_GPIO_DeInit+0xd4>
 800634e:	2306      	movs	r3, #6
 8006350:	e00a      	b.n	8006368 <HAL_GPIO_DeInit+0xd4>
 8006352:	2305      	movs	r3, #5
 8006354:	e008      	b.n	8006368 <HAL_GPIO_DeInit+0xd4>
 8006356:	2304      	movs	r3, #4
 8006358:	e006      	b.n	8006368 <HAL_GPIO_DeInit+0xd4>
 800635a:	2303      	movs	r3, #3
 800635c:	e004      	b.n	8006368 <HAL_GPIO_DeInit+0xd4>
 800635e:	2302      	movs	r3, #2
 8006360:	e002      	b.n	8006368 <HAL_GPIO_DeInit+0xd4>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <HAL_GPIO_DeInit+0xd4>
 8006366:	2300      	movs	r3, #0
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	f002 0203 	and.w	r2, r2, #3
 800636e:	0092      	lsls	r2, r2, #2
 8006370:	4093      	lsls	r3, r2
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	429a      	cmp	r2, r3
 8006376:	d132      	bne.n	80063de <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006378:	4b4b      	ldr	r3, [pc, #300]	; (80064a8 <HAL_GPIO_DeInit+0x214>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	43db      	mvns	r3, r3
 8006380:	4949      	ldr	r1, [pc, #292]	; (80064a8 <HAL_GPIO_DeInit+0x214>)
 8006382:	4013      	ands	r3, r2
 8006384:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006386:	4b48      	ldr	r3, [pc, #288]	; (80064a8 <HAL_GPIO_DeInit+0x214>)
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	43db      	mvns	r3, r3
 800638e:	4946      	ldr	r1, [pc, #280]	; (80064a8 <HAL_GPIO_DeInit+0x214>)
 8006390:	4013      	ands	r3, r2
 8006392:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006394:	4b44      	ldr	r3, [pc, #272]	; (80064a8 <HAL_GPIO_DeInit+0x214>)
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	43db      	mvns	r3, r3
 800639c:	4942      	ldr	r1, [pc, #264]	; (80064a8 <HAL_GPIO_DeInit+0x214>)
 800639e:	4013      	ands	r3, r2
 80063a0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80063a2:	4b41      	ldr	r3, [pc, #260]	; (80064a8 <HAL_GPIO_DeInit+0x214>)
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	43db      	mvns	r3, r3
 80063aa:	493f      	ldr	r1, [pc, #252]	; (80064a8 <HAL_GPIO_DeInit+0x214>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	220f      	movs	r2, #15
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80063c0:	4a2e      	ldr	r2, [pc, #184]	; (800647c <HAL_GPIO_DeInit+0x1e8>)
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	089b      	lsrs	r3, r3, #2
 80063c6:	3302      	adds	r3, #2
 80063c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	43da      	mvns	r2, r3
 80063d0:	482a      	ldr	r0, [pc, #168]	; (800647c <HAL_GPIO_DeInit+0x1e8>)
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	089b      	lsrs	r3, r3, #2
 80063d6:	400a      	ands	r2, r1
 80063d8:	3302      	adds	r3, #2
 80063da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	2103      	movs	r1, #3
 80063e8:	fa01 f303 	lsl.w	r3, r1, r3
 80063ec:	43db      	mvns	r3, r3
 80063ee:	401a      	ands	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	08da      	lsrs	r2, r3, #3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3208      	adds	r2, #8
 80063fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	220f      	movs	r2, #15
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	43db      	mvns	r3, r3
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	08d2      	lsrs	r2, r2, #3
 8006414:	4019      	ands	r1, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3208      	adds	r2, #8
 800641a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	2103      	movs	r1, #3
 8006428:	fa01 f303 	lsl.w	r3, r1, r3
 800642c:	43db      	mvns	r3, r3
 800642e:	401a      	ands	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	2101      	movs	r1, #1
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	fa01 f303 	lsl.w	r3, r1, r3
 8006440:	43db      	mvns	r3, r3
 8006442:	401a      	ands	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	2103      	movs	r1, #3
 8006452:	fa01 f303 	lsl.w	r3, r1, r3
 8006456:	43db      	mvns	r3, r3
 8006458:	401a      	ands	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	3301      	adds	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2b0f      	cmp	r3, #15
 8006468:	f67f af22 	bls.w	80062b0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40013800 	.word	0x40013800
 8006480:	40020000 	.word	0x40020000
 8006484:	40020400 	.word	0x40020400
 8006488:	40020800 	.word	0x40020800
 800648c:	40020c00 	.word	0x40020c00
 8006490:	40021000 	.word	0x40021000
 8006494:	40021400 	.word	0x40021400
 8006498:	40021800 	.word	0x40021800
 800649c:	40021c00 	.word	0x40021c00
 80064a0:	40022000 	.word	0x40022000
 80064a4:	40022400 	.word	0x40022400
 80064a8:	40013c00 	.word	0x40013c00

080064ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	807b      	strh	r3, [r7, #2]
 80064b8:	4613      	mov	r3, r2
 80064ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80064bc:	787b      	ldrb	r3, [r7, #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064c2:	887a      	ldrh	r2, [r7, #2]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80064c8:	e003      	b.n	80064d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80064ca:	887b      	ldrh	r3, [r7, #2]
 80064cc:	041a      	lsls	r2, r3, #16
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	619a      	str	r2, [r3, #24]
}
 80064d2:	bf00      	nop
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80064de:	b480      	push	{r7}
 80064e0:	b085      	sub	sp, #20
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80064f0:	887a      	ldrh	r2, [r7, #2]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4013      	ands	r3, r2
 80064f6:	041a      	lsls	r2, r3, #16
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	43d9      	mvns	r1, r3
 80064fc:	887b      	ldrh	r3, [r7, #2]
 80064fe:	400b      	ands	r3, r1
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	619a      	str	r2, [r3, #24]
}
 8006506:	bf00      	nop
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
	...

08006514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800651e:	4b08      	ldr	r3, [pc, #32]	; (8006540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006520:	695a      	ldr	r2, [r3, #20]
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	4013      	ands	r3, r2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d006      	beq.n	8006538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800652a:	4a05      	ldr	r2, [pc, #20]	; (8006540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800652c:	88fb      	ldrh	r3, [r7, #6]
 800652e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006530:	88fb      	ldrh	r3, [r7, #6]
 8006532:	4618      	mov	r0, r3
 8006534:	f7fb fcc0 	bl	8001eb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006538:	bf00      	nop
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40013c00 	.word	0x40013c00

08006544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e07f      	b.n	8006656 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fd fbde 	bl	8003d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2224      	movs	r2, #36	; 0x24
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006594:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d107      	bne.n	80065be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ba:	609a      	str	r2, [r3, #8]
 80065bc:	e006      	b.n	80065cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80065ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d104      	bne.n	80065de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6859      	ldr	r1, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <HAL_I2C_Init+0x11c>)
 80065ea:	430b      	orrs	r3, r1
 80065ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691a      	ldr	r2, [r3, #16]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69d9      	ldr	r1, [r3, #28]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a1a      	ldr	r2, [r3, #32]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	02008000 	.word	0x02008000

08006664 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e021      	b.n	80066ba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2224      	movs	r2, #36	; 0x24
 800667a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0201 	bic.w	r2, r2, #1
 800668c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fd fbf4 	bl	8003e7c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
	...

080066c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	4608      	mov	r0, r1
 80066ce:	4611      	mov	r1, r2
 80066d0:	461a      	mov	r2, r3
 80066d2:	4603      	mov	r3, r0
 80066d4:	817b      	strh	r3, [r7, #10]
 80066d6:	460b      	mov	r3, r1
 80066d8:	813b      	strh	r3, [r7, #8]
 80066da:	4613      	mov	r3, r2
 80066dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	f040 80f9 	bne.w	80068de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d002      	beq.n	80066f8 <HAL_I2C_Mem_Write+0x34>
 80066f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d105      	bne.n	8006704 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0ed      	b.n	80068e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_I2C_Mem_Write+0x4e>
 800670e:	2302      	movs	r3, #2
 8006710:	e0e6      	b.n	80068e0 <HAL_I2C_Mem_Write+0x21c>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800671a:	f7fe f8cf 	bl	80048bc <HAL_GetTick>
 800671e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	2319      	movs	r3, #25
 8006726:	2201      	movs	r2, #1
 8006728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 fad1 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e0d1      	b.n	80068e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2221      	movs	r2, #33	; 0x21
 8006740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2240      	movs	r2, #64	; 0x40
 8006748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a3a      	ldr	r2, [r7, #32]
 8006756:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800675c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006764:	88f8      	ldrh	r0, [r7, #6]
 8006766:	893a      	ldrh	r2, [r7, #8]
 8006768:	8979      	ldrh	r1, [r7, #10]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	4603      	mov	r3, r0
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 f9e1 	bl	8006b3c <I2C_RequestMemoryWrite>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e0a9      	b.n	80068e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006790:	b29b      	uxth	r3, r3
 8006792:	2bff      	cmp	r3, #255	; 0xff
 8006794:	d90e      	bls.n	80067b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	22ff      	movs	r2, #255	; 0xff
 800679a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	8979      	ldrh	r1, [r7, #10]
 80067a4:	2300      	movs	r3, #0
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 fc39 	bl	8007024 <I2C_TransferConfig>
 80067b2:	e00f      	b.n	80067d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	8979      	ldrh	r1, [r7, #10]
 80067c6:	2300      	movs	r3, #0
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 fc28 	bl	8007024 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fabb 	bl	8006d54 <I2C_WaitOnTXISFlagUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e07b      	b.n	80068e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	781a      	ldrb	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d034      	beq.n	800688c <HAL_I2C_Mem_Write+0x1c8>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006826:	2b00      	cmp	r3, #0
 8006828:	d130      	bne.n	800688c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006830:	2200      	movs	r2, #0
 8006832:	2180      	movs	r1, #128	; 0x80
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f000 fa4d 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e04d      	b.n	80068e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006848:	b29b      	uxth	r3, r3
 800684a:	2bff      	cmp	r3, #255	; 0xff
 800684c:	d90e      	bls.n	800686c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	22ff      	movs	r2, #255	; 0xff
 8006852:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006858:	b2da      	uxtb	r2, r3
 800685a:	8979      	ldrh	r1, [r7, #10]
 800685c:	2300      	movs	r3, #0
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 fbdd 	bl	8007024 <I2C_TransferConfig>
 800686a:	e00f      	b.n	800688c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687a:	b2da      	uxtb	r2, r3
 800687c:	8979      	ldrh	r1, [r7, #10]
 800687e:	2300      	movs	r3, #0
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 fbcc 	bl	8007024 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d19e      	bne.n	80067d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 fa9a 	bl	8006dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e01a      	b.n	80068e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2220      	movs	r2, #32
 80068b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6859      	ldr	r1, [r3, #4]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	4b0a      	ldr	r3, [pc, #40]	; (80068e8 <HAL_I2C_Mem_Write+0x224>)
 80068be:	400b      	ands	r3, r1
 80068c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	e000      	b.n	80068e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80068de:	2302      	movs	r3, #2
  }
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	fe00e800 	.word	0xfe00e800

080068ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b088      	sub	sp, #32
 80068f0:	af02      	add	r7, sp, #8
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	4608      	mov	r0, r1
 80068f6:	4611      	mov	r1, r2
 80068f8:	461a      	mov	r2, r3
 80068fa:	4603      	mov	r3, r0
 80068fc:	817b      	strh	r3, [r7, #10]
 80068fe:	460b      	mov	r3, r1
 8006900:	813b      	strh	r3, [r7, #8]
 8006902:	4613      	mov	r3, r2
 8006904:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b20      	cmp	r3, #32
 8006910:	f040 80fd 	bne.w	8006b0e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <HAL_I2C_Mem_Read+0x34>
 800691a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d105      	bne.n	800692c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006926:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e0f1      	b.n	8006b10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006932:	2b01      	cmp	r3, #1
 8006934:	d101      	bne.n	800693a <HAL_I2C_Mem_Read+0x4e>
 8006936:	2302      	movs	r3, #2
 8006938:	e0ea      	b.n	8006b10 <HAL_I2C_Mem_Read+0x224>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006942:	f7fd ffbb 	bl	80048bc <HAL_GetTick>
 8006946:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	2319      	movs	r3, #25
 800694e:	2201      	movs	r2, #1
 8006950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f9bd 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e0d5      	b.n	8006b10 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2222      	movs	r2, #34	; 0x22
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2240      	movs	r2, #64	; 0x40
 8006970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a3a      	ldr	r2, [r7, #32]
 800697e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800698c:	88f8      	ldrh	r0, [r7, #6]
 800698e:	893a      	ldrh	r2, [r7, #8]
 8006990:	8979      	ldrh	r1, [r7, #10]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	4603      	mov	r3, r0
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f921 	bl	8006be4 <I2C_RequestMemoryRead>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0ad      	b.n	8006b10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2bff      	cmp	r3, #255	; 0xff
 80069bc:	d90e      	bls.n	80069dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	22ff      	movs	r2, #255	; 0xff
 80069c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	8979      	ldrh	r1, [r7, #10]
 80069cc:	4b52      	ldr	r3, [pc, #328]	; (8006b18 <HAL_I2C_Mem_Read+0x22c>)
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 fb25 	bl	8007024 <I2C_TransferConfig>
 80069da:	e00f      	b.n	80069fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	8979      	ldrh	r1, [r7, #10]
 80069ee:	4b4a      	ldr	r3, [pc, #296]	; (8006b18 <HAL_I2C_Mem_Read+0x22c>)
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fb14 	bl	8007024 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	2200      	movs	r2, #0
 8006a04:	2104      	movs	r1, #4
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 f964 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e07c      	b.n	8006b10 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d034      	beq.n	8006abc <HAL_I2C_Mem_Read+0x1d0>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d130      	bne.n	8006abc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	2200      	movs	r2, #0
 8006a62:	2180      	movs	r1, #128	; 0x80
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f000 f935 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e04d      	b.n	8006b10 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2bff      	cmp	r3, #255	; 0xff
 8006a7c:	d90e      	bls.n	8006a9c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	22ff      	movs	r2, #255	; 0xff
 8006a82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	8979      	ldrh	r1, [r7, #10]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 fac5 	bl	8007024 <I2C_TransferConfig>
 8006a9a:	e00f      	b.n	8006abc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	8979      	ldrh	r1, [r7, #10]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 fab4 	bl	8007024 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d19a      	bne.n	80069fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f982 	bl	8006dd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e01a      	b.n	8006b10 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6859      	ldr	r1, [r3, #4]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <HAL_I2C_Mem_Read+0x230>)
 8006aee:	400b      	ands	r3, r1
 8006af0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e000      	b.n	8006b10 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006b0e:	2302      	movs	r3, #2
  }
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	80002400 	.word	0x80002400
 8006b1c:	fe00e800 	.word	0xfe00e800

08006b20 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b2e:	b2db      	uxtb	r3, r3
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	4608      	mov	r0, r1
 8006b46:	4611      	mov	r1, r2
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	817b      	strh	r3, [r7, #10]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	813b      	strh	r3, [r7, #8]
 8006b52:	4613      	mov	r3, r2
 8006b54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b56:	88fb      	ldrh	r3, [r7, #6]
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	8979      	ldrh	r1, [r7, #10]
 8006b5c:	4b20      	ldr	r3, [pc, #128]	; (8006be0 <I2C_RequestMemoryWrite+0xa4>)
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fa5d 	bl	8007024 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	69b9      	ldr	r1, [r7, #24]
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f000 f8f0 	bl	8006d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e02c      	b.n	8006bd8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d105      	bne.n	8006b90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b84:	893b      	ldrh	r3, [r7, #8]
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	629a      	str	r2, [r3, #40]	; 0x28
 8006b8e:	e015      	b.n	8006bbc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b90:	893b      	ldrh	r3, [r7, #8]
 8006b92:	0a1b      	lsrs	r3, r3, #8
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	69b9      	ldr	r1, [r7, #24]
 8006ba2:	68f8      	ldr	r0, [r7, #12]
 8006ba4:	f000 f8d6 	bl	8006d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e012      	b.n	8006bd8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006bb2:	893b      	ldrh	r3, [r7, #8]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2180      	movs	r1, #128	; 0x80
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 f884 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	80002000 	.word	0x80002000

08006be4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	4608      	mov	r0, r1
 8006bee:	4611      	mov	r1, r2
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	817b      	strh	r3, [r7, #10]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	813b      	strh	r3, [r7, #8]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	8979      	ldrh	r1, [r7, #10]
 8006c04:	4b20      	ldr	r3, [pc, #128]	; (8006c88 <I2C_RequestMemoryRead+0xa4>)
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fa0a 	bl	8007024 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	69b9      	ldr	r1, [r7, #24]
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 f89d 	bl	8006d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e02c      	b.n	8006c7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c24:	88fb      	ldrh	r3, [r7, #6]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d105      	bne.n	8006c36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c2a:	893b      	ldrh	r3, [r7, #8]
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	629a      	str	r2, [r3, #40]	; 0x28
 8006c34:	e015      	b.n	8006c62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c36:	893b      	ldrh	r3, [r7, #8]
 8006c38:	0a1b      	lsrs	r3, r3, #8
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	69b9      	ldr	r1, [r7, #24]
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 f883 	bl	8006d54 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e012      	b.n	8006c7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c58:	893b      	ldrh	r3, [r7, #8]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2140      	movs	r1, #64	; 0x40
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f831 	bl	8006cd4 <I2C_WaitOnFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e000      	b.n	8006c7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	80002000 	.word	0x80002000

08006c8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d103      	bne.n	8006caa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d007      	beq.n	8006cc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	619a      	str	r2, [r3, #24]
  }
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ce4:	e022      	b.n	8006d2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cec:	d01e      	beq.n	8006d2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cee:	f7fd fde5 	bl	80048bc <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d302      	bcc.n	8006d04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d113      	bne.n	8006d2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d08:	f043 0220 	orr.w	r2, r3, #32
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e00f      	b.n	8006d4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699a      	ldr	r2, [r3, #24]
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	4013      	ands	r3, r2
 8006d36:	68ba      	ldr	r2, [r7, #8]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	bf0c      	ite	eq
 8006d3c:	2301      	moveq	r3, #1
 8006d3e:	2300      	movne	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d0cd      	beq.n	8006ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d60:	e02c      	b.n	8006dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	68b9      	ldr	r1, [r7, #8]
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 f870 	bl	8006e4c <I2C_IsErrorOccurred>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e02a      	b.n	8006dcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7c:	d01e      	beq.n	8006dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d7e:	f7fd fd9d 	bl	80048bc <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d302      	bcc.n	8006d94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d113      	bne.n	8006dbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d98:	f043 0220 	orr.w	r2, r3, #32
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e007      	b.n	8006dcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d1cb      	bne.n	8006d62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006de0:	e028      	b.n	8006e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	68b9      	ldr	r1, [r7, #8]
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f830 	bl	8006e4c <I2C_IsErrorOccurred>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e026      	b.n	8006e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df6:	f7fd fd61 	bl	80048bc <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d302      	bcc.n	8006e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d113      	bne.n	8006e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e10:	f043 0220 	orr.w	r2, r3, #32
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e007      	b.n	8006e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f003 0320 	and.w	r3, r3, #32
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d1cf      	bne.n	8006de2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08a      	sub	sp, #40	; 0x28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f003 0310 	and.w	r3, r3, #16
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d075      	beq.n	8006f64 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2210      	movs	r2, #16
 8006e7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006e80:	e056      	b.n	8006f30 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e88:	d052      	beq.n	8006f30 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006e8a:	f7fd fd17 	bl	80048bc <HAL_GetTick>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	1ad3      	subs	r3, r2, r3
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d302      	bcc.n	8006ea0 <I2C_IsErrorOccurred+0x54>
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d147      	bne.n	8006f30 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eaa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006eb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec2:	d12e      	bne.n	8006f22 <I2C_IsErrorOccurred+0xd6>
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eca:	d02a      	beq.n	8006f22 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006ecc:	7cfb      	ldrb	r3, [r7, #19]
 8006ece:	2b20      	cmp	r3, #32
 8006ed0:	d027      	beq.n	8006f22 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ee0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006ee2:	f7fd fceb 	bl	80048bc <HAL_GetTick>
 8006ee6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ee8:	e01b      	b.n	8006f22 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006eea:	f7fd fce7 	bl	80048bc <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b19      	cmp	r3, #25
 8006ef6:	d914      	bls.n	8006f22 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efc:	f043 0220 	orr.w	r2, r3, #32
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	2b20      	cmp	r3, #32
 8006f2e:	d1dc      	bne.n	8006eea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d003      	beq.n	8006f46 <I2C_IsErrorOccurred+0xfa>
 8006f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d09d      	beq.n	8006e82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d103      	bne.n	8006f56 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2220      	movs	r2, #32
 8006f54:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	f043 0304 	orr.w	r3, r3, #4
 8006f5c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	f043 0301 	orr.w	r3, r3, #1
 8006f7c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00b      	beq.n	8006fb0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	f043 0308 	orr.w	r3, r3, #8
 8006f9e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00b      	beq.n	8006fd2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	f043 0302 	orr.w	r3, r3, #2
 8006fc0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d01c      	beq.n	8007014 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f7ff fe56 	bl	8006c8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6859      	ldr	r1, [r3, #4]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	4b0d      	ldr	r3, [pc, #52]	; (8007020 <I2C_IsErrorOccurred+0x1d4>)
 8006fec:	400b      	ands	r3, r1
 8006fee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007018:	4618      	mov	r0, r3
 800701a:	3728      	adds	r7, #40	; 0x28
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}
 8007020:	fe00e800 	.word	0xfe00e800

08007024 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	607b      	str	r3, [r7, #4]
 800702e:	460b      	mov	r3, r1
 8007030:	817b      	strh	r3, [r7, #10]
 8007032:	4613      	mov	r3, r2
 8007034:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007036:	897b      	ldrh	r3, [r7, #10]
 8007038:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800703c:	7a7b      	ldrb	r3, [r7, #9]
 800703e:	041b      	lsls	r3, r3, #16
 8007040:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007044:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	4313      	orrs	r3, r2
 800704e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007052:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685a      	ldr	r2, [r3, #4]
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	0d5b      	lsrs	r3, r3, #21
 800705e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007062:	4b08      	ldr	r3, [pc, #32]	; (8007084 <I2C_TransferConfig+0x60>)
 8007064:	430b      	orrs	r3, r1
 8007066:	43db      	mvns	r3, r3
 8007068:	ea02 0103 	and.w	r1, r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007076:	bf00      	nop
 8007078:	371c      	adds	r7, #28
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	03ff63ff 	.word	0x03ff63ff

08007088 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b20      	cmp	r3, #32
 800709c:	d138      	bne.n	8007110 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d101      	bne.n	80070ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070a8:	2302      	movs	r3, #2
 80070aa:	e032      	b.n	8007112 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2224      	movs	r2, #36	; 0x24
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0201 	bic.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6819      	ldr	r1, [r3, #0]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	430a      	orrs	r2, r1
 80070ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	e000      	b.n	8007112 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007110:	2302      	movs	r3, #2
  }
}
 8007112:	4618      	mov	r0, r3
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b20      	cmp	r3, #32
 8007132:	d139      	bne.n	80071a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800713e:	2302      	movs	r3, #2
 8007140:	e033      	b.n	80071aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2224      	movs	r2, #36	; 0x24
 800714e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0201 	bic.w	r2, r2, #1
 8007160:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007170:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	021b      	lsls	r3, r3, #8
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0201 	orr.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2220      	movs	r2, #32
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	e000      	b.n	80071aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071a8:	2302      	movs	r3, #2
  }
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
	...

080071b8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e0bf      	b.n	800734a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d106      	bne.n	80071e4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fc fe88 	bl	8003ef4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699a      	ldr	r2, [r3, #24]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80071fa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6999      	ldr	r1, [r3, #24]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007210:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6899      	ldr	r1, [r3, #8]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4b4a      	ldr	r3, [pc, #296]	; (8007354 <HAL_LTDC_Init+0x19c>)
 800722c:	400b      	ands	r3, r1
 800722e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	041b      	lsls	r3, r3, #16
 8007236:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6899      	ldr	r1, [r3, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68d9      	ldr	r1, [r3, #12]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	4b3e      	ldr	r3, [pc, #248]	; (8007354 <HAL_LTDC_Init+0x19c>)
 800725a:	400b      	ands	r3, r1
 800725c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	041b      	lsls	r3, r3, #16
 8007264:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68d9      	ldr	r1, [r3, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	431a      	orrs	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6919      	ldr	r1, [r3, #16]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	4b33      	ldr	r3, [pc, #204]	; (8007354 <HAL_LTDC_Init+0x19c>)
 8007288:	400b      	ands	r3, r1
 800728a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	041b      	lsls	r3, r3, #16
 8007292:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6919      	ldr	r1, [r3, #16]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	431a      	orrs	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6959      	ldr	r1, [r3, #20]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	4b27      	ldr	r3, [pc, #156]	; (8007354 <HAL_LTDC_Init+0x19c>)
 80072b6:	400b      	ands	r3, r1
 80072b8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072be:	041b      	lsls	r3, r3, #16
 80072c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6959      	ldr	r1, [r3, #20]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	431a      	orrs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072de:	021b      	lsls	r3, r3, #8
 80072e0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80072e8:	041b      	lsls	r3, r3, #16
 80072ea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80072fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4313      	orrs	r3, r2
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800730e:	431a      	orrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0206 	orr.w	r2, r2, #6
 8007326:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 0201 	orr.w	r2, r2, #1
 8007336:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	f000f800 	.word	0xf000f800

08007358 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f003 0304 	and.w	r3, r3, #4
 8007376:	2b00      	cmp	r3, #0
 8007378:	d023      	beq.n	80073c2 <HAL_LTDC_IRQHandler+0x6a>
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f003 0304 	and.w	r3, r3, #4
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01e      	beq.n	80073c2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0204 	bic.w	r2, r2, #4
 8007392:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2204      	movs	r2, #4
 800739a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073a2:	f043 0201 	orr.w	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2204      	movs	r2, #4
 80073b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f86f 	bl	80074a0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d023      	beq.n	8007414 <HAL_LTDC_IRQHandler+0xbc>
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d01e      	beq.n	8007414 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0202 	bic.w	r2, r2, #2
 80073e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2202      	movs	r2, #2
 80073ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073f4:	f043 0202 	orr.w	r2, r3, #2
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2204      	movs	r2, #4
 8007402:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f846 	bl	80074a0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d01b      	beq.n	8007456 <HAL_LTDC_IRQHandler+0xfe>
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d016      	beq.n	8007456 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f022 0201 	bic.w	r2, r2, #1
 8007436:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2201      	movs	r2, #1
 800743e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f82f 	bl	80074b4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d01b      	beq.n	8007498 <HAL_LTDC_IRQHandler+0x140>
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d016      	beq.n	8007498 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 0208 	bic.w	r2, r2, #8
 8007478:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2208      	movs	r2, #8
 8007480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f818 	bl	80074c8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007498:	bf00      	nop
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80074dc:	b5b0      	push	{r4, r5, r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d101      	bne.n	80074f6 <HAL_LTDC_ConfigLayer+0x1a>
 80074f2:	2302      	movs	r3, #2
 80074f4:	e02c      	b.n	8007550 <HAL_LTDC_ConfigLayer+0x74>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2202      	movs	r2, #2
 8007502:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2134      	movs	r1, #52	; 0x34
 800750c:	fb01 f303 	mul.w	r3, r1, r3
 8007510:	4413      	add	r3, r2
 8007512:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	4614      	mov	r4, r2
 800751a:	461d      	mov	r5, r3
 800751c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800751e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	68b9      	ldr	r1, [r7, #8]
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 f81f 	bl	8007574 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2201      	movs	r2, #1
 800753c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bdb0      	pop	{r4, r5, r7, pc}

08007558 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007566:	b2db      	uxtb	r3, r3
}
 8007568:	4618      	mov	r0, r3
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007574:	b480      	push	{r7}
 8007576:	b089      	sub	sp, #36	; 0x24
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	0c1b      	lsrs	r3, r3, #16
 800758c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007590:	4413      	add	r3, r2
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	01db      	lsls	r3, r3, #7
 80075a0:	4413      	add	r3, r2
 80075a2:	3384      	adds	r3, #132	; 0x84
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	6812      	ldr	r2, [r2, #0]
 80075aa:	4611      	mov	r1, r2
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	01d2      	lsls	r2, r2, #7
 80075b0:	440a      	add	r2, r1
 80075b2:	3284      	adds	r2, #132	; 0x84
 80075b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80075b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	0c1b      	lsrs	r3, r3, #16
 80075c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ca:	4413      	add	r3, r2
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4619      	mov	r1, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	01db      	lsls	r3, r3, #7
 80075d8:	440b      	add	r3, r1
 80075da:	3384      	adds	r3, #132	; 0x84
 80075dc:	4619      	mov	r1, r3
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	68da      	ldr	r2, [r3, #12]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075f2:	4413      	add	r3, r2
 80075f4:	041b      	lsls	r3, r3, #16
 80075f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	461a      	mov	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	01db      	lsls	r3, r3, #7
 8007602:	4413      	add	r3, r2
 8007604:	3384      	adds	r3, #132	; 0x84
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	6812      	ldr	r2, [r2, #0]
 800760c:	4611      	mov	r1, r2
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	01d2      	lsls	r2, r2, #7
 8007612:	440a      	add	r2, r1
 8007614:	3284      	adds	r2, #132	; 0x84
 8007616:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800761a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800762a:	4413      	add	r3, r2
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4619      	mov	r1, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	01db      	lsls	r3, r3, #7
 8007638:	440b      	add	r3, r1
 800763a:	3384      	adds	r3, #132	; 0x84
 800763c:	4619      	mov	r1, r3
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4313      	orrs	r3, r2
 8007642:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	01db      	lsls	r3, r3, #7
 800764e:	4413      	add	r3, r2
 8007650:	3384      	adds	r3, #132	; 0x84
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	6812      	ldr	r2, [r2, #0]
 8007658:	4611      	mov	r1, r2
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	01d2      	lsls	r2, r2, #7
 800765e:	440a      	add	r2, r1
 8007660:	3284      	adds	r2, #132	; 0x84
 8007662:	f023 0307 	bic.w	r3, r3, #7
 8007666:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	01db      	lsls	r3, r3, #7
 8007672:	4413      	add	r3, r2
 8007674:	3384      	adds	r3, #132	; 0x84
 8007676:	461a      	mov	r2, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800768e:	041b      	lsls	r3, r3, #16
 8007690:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	061b      	lsls	r3, r3, #24
 8007698:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	01db      	lsls	r3, r3, #7
 80076a4:	4413      	add	r3, r2
 80076a6:	3384      	adds	r3, #132	; 0x84
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	01db      	lsls	r3, r3, #7
 80076b4:	4413      	add	r3, r2
 80076b6:	3384      	adds	r3, #132	; 0x84
 80076b8:	461a      	mov	r2, r3
 80076ba:	2300      	movs	r3, #0
 80076bc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076c4:	461a      	mov	r2, r3
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	431a      	orrs	r2, r3
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	431a      	orrs	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4619      	mov	r1, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	01db      	lsls	r3, r3, #7
 80076d8:	440b      	add	r3, r1
 80076da:	3384      	adds	r3, #132	; 0x84
 80076dc:	4619      	mov	r1, r3
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	461a      	mov	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	01db      	lsls	r3, r3, #7
 80076ee:	4413      	add	r3, r2
 80076f0:	3384      	adds	r3, #132	; 0x84
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	6812      	ldr	r2, [r2, #0]
 80076f8:	4611      	mov	r1, r2
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	01d2      	lsls	r2, r2, #7
 80076fe:	440a      	add	r2, r1
 8007700:	3284      	adds	r2, #132	; 0x84
 8007702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007706:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	01db      	lsls	r3, r3, #7
 8007712:	4413      	add	r3, r2
 8007714:	3384      	adds	r3, #132	; 0x84
 8007716:	461a      	mov	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	01db      	lsls	r3, r3, #7
 8007728:	4413      	add	r3, r2
 800772a:	3384      	adds	r3, #132	; 0x84
 800772c:	69da      	ldr	r2, [r3, #28]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4619      	mov	r1, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	01db      	lsls	r3, r3, #7
 8007738:	440b      	add	r3, r1
 800773a:	3384      	adds	r3, #132	; 0x84
 800773c:	4619      	mov	r1, r3
 800773e:	4b58      	ldr	r3, [pc, #352]	; (80078a0 <LTDC_SetConfig+0x32c>)
 8007740:	4013      	ands	r3, r2
 8007742:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	69da      	ldr	r2, [r3, #28]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	68f9      	ldr	r1, [r7, #12]
 800774e:	6809      	ldr	r1, [r1, #0]
 8007750:	4608      	mov	r0, r1
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	01c9      	lsls	r1, r1, #7
 8007756:	4401      	add	r1, r0
 8007758:	3184      	adds	r1, #132	; 0x84
 800775a:	4313      	orrs	r3, r2
 800775c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	461a      	mov	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	01db      	lsls	r3, r3, #7
 8007768:	4413      	add	r3, r2
 800776a:	3384      	adds	r3, #132	; 0x84
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	01db      	lsls	r3, r3, #7
 8007778:	4413      	add	r3, r2
 800777a:	3384      	adds	r3, #132	; 0x84
 800777c:	461a      	mov	r2, r3
 800777e:	2300      	movs	r3, #0
 8007780:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	01db      	lsls	r3, r3, #7
 800778c:	4413      	add	r3, r2
 800778e:	3384      	adds	r3, #132	; 0x84
 8007790:	461a      	mov	r2, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d102      	bne.n	80077a6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80077a0:	2304      	movs	r3, #4
 80077a2:	61fb      	str	r3, [r7, #28]
 80077a4:	e01b      	b.n	80077de <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d102      	bne.n	80077b4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80077ae:	2303      	movs	r3, #3
 80077b0:	61fb      	str	r3, [r7, #28]
 80077b2:	e014      	b.n	80077de <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d00b      	beq.n	80077d4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d007      	beq.n	80077d4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80077c8:	2b03      	cmp	r3, #3
 80077ca:	d003      	beq.n	80077d4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80077d0:	2b07      	cmp	r3, #7
 80077d2:	d102      	bne.n	80077da <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80077d4:	2302      	movs	r3, #2
 80077d6:	61fb      	str	r3, [r7, #28]
 80077d8:	e001      	b.n	80077de <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80077da:	2301      	movs	r3, #1
 80077dc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	01db      	lsls	r3, r3, #7
 80077e8:	4413      	add	r3, r2
 80077ea:	3384      	adds	r3, #132	; 0x84
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	6812      	ldr	r2, [r2, #0]
 80077f2:	4611      	mov	r1, r2
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	01d2      	lsls	r2, r2, #7
 80077f8:	440a      	add	r2, r1
 80077fa:	3284      	adds	r2, #132	; 0x84
 80077fc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007800:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	fb02 f303 	mul.w	r3, r2, r3
 800780c:	041a      	lsls	r2, r3, #16
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6859      	ldr	r1, [r3, #4]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	1acb      	subs	r3, r1, r3
 8007818:	69f9      	ldr	r1, [r7, #28]
 800781a:	fb01 f303 	mul.w	r3, r1, r3
 800781e:	3303      	adds	r3, #3
 8007820:	68f9      	ldr	r1, [r7, #12]
 8007822:	6809      	ldr	r1, [r1, #0]
 8007824:	4608      	mov	r0, r1
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	01c9      	lsls	r1, r1, #7
 800782a:	4401      	add	r1, r0
 800782c:	3184      	adds	r1, #132	; 0x84
 800782e:	4313      	orrs	r3, r2
 8007830:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	01db      	lsls	r3, r3, #7
 800783c:	4413      	add	r3, r2
 800783e:	3384      	adds	r3, #132	; 0x84
 8007840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4619      	mov	r1, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	01db      	lsls	r3, r3, #7
 800784c:	440b      	add	r3, r1
 800784e:	3384      	adds	r3, #132	; 0x84
 8007850:	4619      	mov	r1, r3
 8007852:	4b14      	ldr	r3, [pc, #80]	; (80078a4 <LTDC_SetConfig+0x330>)
 8007854:	4013      	ands	r3, r2
 8007856:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	461a      	mov	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	01db      	lsls	r3, r3, #7
 8007862:	4413      	add	r3, r2
 8007864:	3384      	adds	r3, #132	; 0x84
 8007866:	461a      	mov	r2, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	01db      	lsls	r3, r3, #7
 8007878:	4413      	add	r3, r2
 800787a:	3384      	adds	r3, #132	; 0x84
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	6812      	ldr	r2, [r2, #0]
 8007882:	4611      	mov	r1, r2
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	01d2      	lsls	r2, r2, #7
 8007888:	440a      	add	r2, r1
 800788a:	3284      	adds	r2, #132	; 0x84
 800788c:	f043 0301 	orr.w	r3, r3, #1
 8007890:	6013      	str	r3, [r2, #0]
}
 8007892:	bf00      	nop
 8007894:	3724      	adds	r7, #36	; 0x24
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	fffff8f8 	.word	0xfffff8f8
 80078a4:	fffff800 	.word	0xfffff800

080078a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a04      	ldr	r2, [pc, #16]	; (80078c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b6:	6013      	str	r3, [r2, #0]
}
 80078b8:	bf00      	nop
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	40007000 	.word	0x40007000

080078c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80078d2:	4b23      	ldr	r3, [pc, #140]	; (8007960 <HAL_PWREx_EnableOverDrive+0x98>)
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	4a22      	ldr	r2, [pc, #136]	; (8007960 <HAL_PWREx_EnableOverDrive+0x98>)
 80078d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078dc:	6413      	str	r3, [r2, #64]	; 0x40
 80078de:	4b20      	ldr	r3, [pc, #128]	; (8007960 <HAL_PWREx_EnableOverDrive+0x98>)
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80078ea:	4b1e      	ldr	r3, [pc, #120]	; (8007964 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a1d      	ldr	r2, [pc, #116]	; (8007964 <HAL_PWREx_EnableOverDrive+0x9c>)
 80078f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078f6:	f7fc ffe1 	bl	80048bc <HAL_GetTick>
 80078fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078fc:	e009      	b.n	8007912 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078fe:	f7fc ffdd 	bl	80048bc <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800790c:	d901      	bls.n	8007912 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e022      	b.n	8007958 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800791a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800791e:	d1ee      	bne.n	80078fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007920:	4b10      	ldr	r3, [pc, #64]	; (8007964 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a0f      	ldr	r2, [pc, #60]	; (8007964 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800792a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800792c:	f7fc ffc6 	bl	80048bc <HAL_GetTick>
 8007930:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007932:	e009      	b.n	8007948 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007934:	f7fc ffc2 	bl	80048bc <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007942:	d901      	bls.n	8007948 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e007      	b.n	8007958 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007948:	4b06      	ldr	r3, [pc, #24]	; (8007964 <HAL_PWREx_EnableOverDrive+0x9c>)
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007954:	d1ee      	bne.n	8007934 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	40023800 	.word	0x40023800
 8007964:	40007000 	.word	0x40007000

08007968 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007970:	2300      	movs	r3, #0
 8007972:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e291      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	f000 8087 	beq.w	8007a9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800798c:	4b96      	ldr	r3, [pc, #600]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f003 030c 	and.w	r3, r3, #12
 8007994:	2b04      	cmp	r3, #4
 8007996:	d00c      	beq.n	80079b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007998:	4b93      	ldr	r3, [pc, #588]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f003 030c 	and.w	r3, r3, #12
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d112      	bne.n	80079ca <HAL_RCC_OscConfig+0x62>
 80079a4:	4b90      	ldr	r3, [pc, #576]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079b0:	d10b      	bne.n	80079ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079b2:	4b8d      	ldr	r3, [pc, #564]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d06c      	beq.n	8007a98 <HAL_RCC_OscConfig+0x130>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d168      	bne.n	8007a98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e26b      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d2:	d106      	bne.n	80079e2 <HAL_RCC_OscConfig+0x7a>
 80079d4:	4b84      	ldr	r3, [pc, #528]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a83      	ldr	r2, [pc, #524]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 80079da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	e02e      	b.n	8007a40 <HAL_RCC_OscConfig+0xd8>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10c      	bne.n	8007a04 <HAL_RCC_OscConfig+0x9c>
 80079ea:	4b7f      	ldr	r3, [pc, #508]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a7e      	ldr	r2, [pc, #504]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 80079f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	4b7c      	ldr	r3, [pc, #496]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a7b      	ldr	r2, [pc, #492]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 80079fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	e01d      	b.n	8007a40 <HAL_RCC_OscConfig+0xd8>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a0c:	d10c      	bne.n	8007a28 <HAL_RCC_OscConfig+0xc0>
 8007a0e:	4b76      	ldr	r3, [pc, #472]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a75      	ldr	r2, [pc, #468]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a18:	6013      	str	r3, [r2, #0]
 8007a1a:	4b73      	ldr	r3, [pc, #460]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a72      	ldr	r2, [pc, #456]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	e00b      	b.n	8007a40 <HAL_RCC_OscConfig+0xd8>
 8007a28:	4b6f      	ldr	r3, [pc, #444]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a6e      	ldr	r2, [pc, #440]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	4b6c      	ldr	r3, [pc, #432]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a6b      	ldr	r2, [pc, #428]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d013      	beq.n	8007a70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a48:	f7fc ff38 	bl	80048bc <HAL_GetTick>
 8007a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a4e:	e008      	b.n	8007a62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a50:	f7fc ff34 	bl	80048bc <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b64      	cmp	r3, #100	; 0x64
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e21f      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a62:	4b61      	ldr	r3, [pc, #388]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0f0      	beq.n	8007a50 <HAL_RCC_OscConfig+0xe8>
 8007a6e:	e014      	b.n	8007a9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a70:	f7fc ff24 	bl	80048bc <HAL_GetTick>
 8007a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a76:	e008      	b.n	8007a8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a78:	f7fc ff20 	bl	80048bc <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	2b64      	cmp	r3, #100	; 0x64
 8007a84:	d901      	bls.n	8007a8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e20b      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a8a:	4b57      	ldr	r3, [pc, #348]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1f0      	bne.n	8007a78 <HAL_RCC_OscConfig+0x110>
 8007a96:	e000      	b.n	8007a9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d069      	beq.n	8007b7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007aa6:	4b50      	ldr	r3, [pc, #320]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f003 030c 	and.w	r3, r3, #12
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00b      	beq.n	8007aca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ab2:	4b4d      	ldr	r3, [pc, #308]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f003 030c 	and.w	r3, r3, #12
 8007aba:	2b08      	cmp	r3, #8
 8007abc:	d11c      	bne.n	8007af8 <HAL_RCC_OscConfig+0x190>
 8007abe:	4b4a      	ldr	r3, [pc, #296]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d116      	bne.n	8007af8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aca:	4b47      	ldr	r3, [pc, #284]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d005      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x17a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d001      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e1df      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ae2:	4b41      	ldr	r3, [pc, #260]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	493d      	ldr	r1, [pc, #244]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007af6:	e040      	b.n	8007b7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d023      	beq.n	8007b48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b00:	4b39      	ldr	r3, [pc, #228]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a38      	ldr	r2, [pc, #224]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007b06:	f043 0301 	orr.w	r3, r3, #1
 8007b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b0c:	f7fc fed6 	bl	80048bc <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b12:	e008      	b.n	8007b26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b14:	f7fc fed2 	bl	80048bc <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d901      	bls.n	8007b26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e1bd      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b26:	4b30      	ldr	r3, [pc, #192]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0f0      	beq.n	8007b14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b32:	4b2d      	ldr	r3, [pc, #180]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	4929      	ldr	r1, [pc, #164]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	600b      	str	r3, [r1, #0]
 8007b46:	e018      	b.n	8007b7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b48:	4b27      	ldr	r3, [pc, #156]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a26      	ldr	r2, [pc, #152]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007b4e:	f023 0301 	bic.w	r3, r3, #1
 8007b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b54:	f7fc feb2 	bl	80048bc <HAL_GetTick>
 8007b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b5a:	e008      	b.n	8007b6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b5c:	f7fc feae 	bl	80048bc <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e199      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b6e:	4b1e      	ldr	r3, [pc, #120]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1f0      	bne.n	8007b5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0308 	and.w	r3, r3, #8
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d038      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d019      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b8e:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b92:	4a15      	ldr	r2, [pc, #84]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007b94:	f043 0301 	orr.w	r3, r3, #1
 8007b98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b9a:	f7fc fe8f 	bl	80048bc <HAL_GetTick>
 8007b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ba0:	e008      	b.n	8007bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ba2:	f7fc fe8b 	bl	80048bc <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d901      	bls.n	8007bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e176      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bb4:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0f0      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x23a>
 8007bc0:	e01a      	b.n	8007bf8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bc2:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bc6:	4a08      	ldr	r2, [pc, #32]	; (8007be8 <HAL_RCC_OscConfig+0x280>)
 8007bc8:	f023 0301 	bic.w	r3, r3, #1
 8007bcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bce:	f7fc fe75 	bl	80048bc <HAL_GetTick>
 8007bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bd4:	e00a      	b.n	8007bec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bd6:	f7fc fe71 	bl	80048bc <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d903      	bls.n	8007bec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e15c      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
 8007be8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bec:	4b91      	ldr	r3, [pc, #580]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf0:	f003 0302 	and.w	r3, r3, #2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1ee      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 80a4 	beq.w	8007d4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c06:	4b8b      	ldr	r3, [pc, #556]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10d      	bne.n	8007c2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c12:	4b88      	ldr	r3, [pc, #544]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	4a87      	ldr	r2, [pc, #540]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8007c1e:	4b85      	ldr	r3, [pc, #532]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c26:	60bb      	str	r3, [r7, #8]
 8007c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c2e:	4b82      	ldr	r3, [pc, #520]	; (8007e38 <HAL_RCC_OscConfig+0x4d0>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d118      	bne.n	8007c6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007c3a:	4b7f      	ldr	r3, [pc, #508]	; (8007e38 <HAL_RCC_OscConfig+0x4d0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a7e      	ldr	r2, [pc, #504]	; (8007e38 <HAL_RCC_OscConfig+0x4d0>)
 8007c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c46:	f7fc fe39 	bl	80048bc <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c4c:	e008      	b.n	8007c60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c4e:	f7fc fe35 	bl	80048bc <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b64      	cmp	r3, #100	; 0x64
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e120      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c60:	4b75      	ldr	r3, [pc, #468]	; (8007e38 <HAL_RCC_OscConfig+0x4d0>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0f0      	beq.n	8007c4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d106      	bne.n	8007c82 <HAL_RCC_OscConfig+0x31a>
 8007c74:	4b6f      	ldr	r3, [pc, #444]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c78:	4a6e      	ldr	r2, [pc, #440]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007c7a:	f043 0301 	orr.w	r3, r3, #1
 8007c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8007c80:	e02d      	b.n	8007cde <HAL_RCC_OscConfig+0x376>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10c      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x33c>
 8007c8a:	4b6a      	ldr	r3, [pc, #424]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8e:	4a69      	ldr	r2, [pc, #420]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007c90:	f023 0301 	bic.w	r3, r3, #1
 8007c94:	6713      	str	r3, [r2, #112]	; 0x70
 8007c96:	4b67      	ldr	r3, [pc, #412]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9a:	4a66      	ldr	r2, [pc, #408]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007c9c:	f023 0304 	bic.w	r3, r3, #4
 8007ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ca2:	e01c      	b.n	8007cde <HAL_RCC_OscConfig+0x376>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	2b05      	cmp	r3, #5
 8007caa:	d10c      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x35e>
 8007cac:	4b61      	ldr	r3, [pc, #388]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb0:	4a60      	ldr	r2, [pc, #384]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007cb2:	f043 0304 	orr.w	r3, r3, #4
 8007cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8007cb8:	4b5e      	ldr	r3, [pc, #376]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbc:	4a5d      	ldr	r2, [pc, #372]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007cbe:	f043 0301 	orr.w	r3, r3, #1
 8007cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8007cc4:	e00b      	b.n	8007cde <HAL_RCC_OscConfig+0x376>
 8007cc6:	4b5b      	ldr	r3, [pc, #364]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cca:	4a5a      	ldr	r2, [pc, #360]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007ccc:	f023 0301 	bic.w	r3, r3, #1
 8007cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd2:	4b58      	ldr	r3, [pc, #352]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd6:	4a57      	ldr	r2, [pc, #348]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007cd8:	f023 0304 	bic.w	r3, r3, #4
 8007cdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d015      	beq.n	8007d12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce6:	f7fc fde9 	bl	80048bc <HAL_GetTick>
 8007cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cec:	e00a      	b.n	8007d04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cee:	f7fc fde5 	bl	80048bc <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d901      	bls.n	8007d04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e0ce      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d04:	4b4b      	ldr	r3, [pc, #300]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d0ee      	beq.n	8007cee <HAL_RCC_OscConfig+0x386>
 8007d10:	e014      	b.n	8007d3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d12:	f7fc fdd3 	bl	80048bc <HAL_GetTick>
 8007d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d18:	e00a      	b.n	8007d30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d1a:	f7fc fdcf 	bl	80048bc <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d901      	bls.n	8007d30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e0b8      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d30:	4b40      	ldr	r3, [pc, #256]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d34:	f003 0302 	and.w	r3, r3, #2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1ee      	bne.n	8007d1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d105      	bne.n	8007d4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d42:	4b3c      	ldr	r3, [pc, #240]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d46:	4a3b      	ldr	r2, [pc, #236]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 80a4 	beq.w	8007ea0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d58:	4b36      	ldr	r3, [pc, #216]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f003 030c 	and.w	r3, r3, #12
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d06b      	beq.n	8007e3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d149      	bne.n	8007e00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d6c:	4b31      	ldr	r3, [pc, #196]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a30      	ldr	r2, [pc, #192]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d78:	f7fc fda0 	bl	80048bc <HAL_GetTick>
 8007d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d80:	f7fc fd9c 	bl	80048bc <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e087      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d92:	4b28      	ldr	r3, [pc, #160]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1f0      	bne.n	8007d80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69da      	ldr	r2, [r3, #28]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	431a      	orrs	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	019b      	lsls	r3, r3, #6
 8007dae:	431a      	orrs	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	085b      	lsrs	r3, r3, #1
 8007db6:	3b01      	subs	r3, #1
 8007db8:	041b      	lsls	r3, r3, #16
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	061b      	lsls	r3, r3, #24
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	4a1b      	ldr	r2, [pc, #108]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dcc:	4b19      	ldr	r3, [pc, #100]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a18      	ldr	r2, [pc, #96]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd8:	f7fc fd70 	bl	80048bc <HAL_GetTick>
 8007ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dde:	e008      	b.n	8007df2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007de0:	f7fc fd6c 	bl	80048bc <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d901      	bls.n	8007df2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e057      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007df2:	4b10      	ldr	r3, [pc, #64]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0f0      	beq.n	8007de0 <HAL_RCC_OscConfig+0x478>
 8007dfe:	e04f      	b.n	8007ea0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e00:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a0b      	ldr	r2, [pc, #44]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0c:	f7fc fd56 	bl	80048bc <HAL_GetTick>
 8007e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e12:	e008      	b.n	8007e26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e14:	f7fc fd52 	bl	80048bc <HAL_GetTick>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d901      	bls.n	8007e26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e03d      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e26:	4b03      	ldr	r3, [pc, #12]	; (8007e34 <HAL_RCC_OscConfig+0x4cc>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f0      	bne.n	8007e14 <HAL_RCC_OscConfig+0x4ac>
 8007e32:	e035      	b.n	8007ea0 <HAL_RCC_OscConfig+0x538>
 8007e34:	40023800 	.word	0x40023800
 8007e38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007e3c:	4b1b      	ldr	r3, [pc, #108]	; (8007eac <HAL_RCC_OscConfig+0x544>)
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d028      	beq.n	8007e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d121      	bne.n	8007e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d11a      	bne.n	8007e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d111      	bne.n	8007e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e82:	085b      	lsrs	r3, r3, #1
 8007e84:	3b01      	subs	r3, #1
 8007e86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d107      	bne.n	8007e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d001      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	40023800 	.word	0x40023800

08007eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e0d0      	b.n	800806a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ec8:	4b6a      	ldr	r3, [pc, #424]	; (8008074 <HAL_RCC_ClockConfig+0x1c4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 030f 	and.w	r3, r3, #15
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d910      	bls.n	8007ef8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ed6:	4b67      	ldr	r3, [pc, #412]	; (8008074 <HAL_RCC_ClockConfig+0x1c4>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f023 020f 	bic.w	r2, r3, #15
 8007ede:	4965      	ldr	r1, [pc, #404]	; (8008074 <HAL_RCC_ClockConfig+0x1c4>)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ee6:	4b63      	ldr	r3, [pc, #396]	; (8008074 <HAL_RCC_ClockConfig+0x1c4>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 030f 	and.w	r3, r3, #15
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d001      	beq.n	8007ef8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e0b8      	b.n	800806a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d020      	beq.n	8007f46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0304 	and.w	r3, r3, #4
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d005      	beq.n	8007f1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f10:	4b59      	ldr	r3, [pc, #356]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	4a58      	ldr	r2, [pc, #352]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8007f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0308 	and.w	r3, r3, #8
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f28:	4b53      	ldr	r3, [pc, #332]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	4a52      	ldr	r2, [pc, #328]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8007f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f34:	4b50      	ldr	r3, [pc, #320]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	494d      	ldr	r1, [pc, #308]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d040      	beq.n	8007fd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d107      	bne.n	8007f6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f5a:	4b47      	ldr	r3, [pc, #284]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d115      	bne.n	8007f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e07f      	b.n	800806a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d107      	bne.n	8007f82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f72:	4b41      	ldr	r3, [pc, #260]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d109      	bne.n	8007f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e073      	b.n	800806a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f82:	4b3d      	ldr	r3, [pc, #244]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0302 	and.w	r3, r3, #2
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e06b      	b.n	800806a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f92:	4b39      	ldr	r3, [pc, #228]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f023 0203 	bic.w	r2, r3, #3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	4936      	ldr	r1, [pc, #216]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa4:	f7fc fc8a 	bl	80048bc <HAL_GetTick>
 8007fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007faa:	e00a      	b.n	8007fc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fac:	f7fc fc86 	bl	80048bc <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d901      	bls.n	8007fc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e053      	b.n	800806a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fc2:	4b2d      	ldr	r3, [pc, #180]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f003 020c 	and.w	r2, r3, #12
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d1eb      	bne.n	8007fac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fd4:	4b27      	ldr	r3, [pc, #156]	; (8008074 <HAL_RCC_ClockConfig+0x1c4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 030f 	and.w	r3, r3, #15
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d210      	bcs.n	8008004 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fe2:	4b24      	ldr	r3, [pc, #144]	; (8008074 <HAL_RCC_ClockConfig+0x1c4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f023 020f 	bic.w	r2, r3, #15
 8007fea:	4922      	ldr	r1, [pc, #136]	; (8008074 <HAL_RCC_ClockConfig+0x1c4>)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ff2:	4b20      	ldr	r3, [pc, #128]	; (8008074 <HAL_RCC_ClockConfig+0x1c4>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d001      	beq.n	8008004 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e032      	b.n	800806a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d008      	beq.n	8008022 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008010:	4b19      	ldr	r3, [pc, #100]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	4916      	ldr	r1, [pc, #88]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 800801e:	4313      	orrs	r3, r2
 8008020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b00      	cmp	r3, #0
 800802c:	d009      	beq.n	8008042 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800802e:	4b12      	ldr	r3, [pc, #72]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	490e      	ldr	r1, [pc, #56]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 800803e:	4313      	orrs	r3, r2
 8008040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008042:	f000 f821 	bl	8008088 <HAL_RCC_GetSysClockFreq>
 8008046:	4602      	mov	r2, r0
 8008048:	4b0b      	ldr	r3, [pc, #44]	; (8008078 <HAL_RCC_ClockConfig+0x1c8>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	091b      	lsrs	r3, r3, #4
 800804e:	f003 030f 	and.w	r3, r3, #15
 8008052:	490a      	ldr	r1, [pc, #40]	; (800807c <HAL_RCC_ClockConfig+0x1cc>)
 8008054:	5ccb      	ldrb	r3, [r1, r3]
 8008056:	fa22 f303 	lsr.w	r3, r2, r3
 800805a:	4a09      	ldr	r2, [pc, #36]	; (8008080 <HAL_RCC_ClockConfig+0x1d0>)
 800805c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800805e:	4b09      	ldr	r3, [pc, #36]	; (8008084 <HAL_RCC_ClockConfig+0x1d4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4618      	mov	r0, r3
 8008064:	f7fc fb1c 	bl	80046a0 <HAL_InitTick>

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	40023c00 	.word	0x40023c00
 8008078:	40023800 	.word	0x40023800
 800807c:	08033aa0 	.word	0x08033aa0
 8008080:	20000040 	.word	0x20000040
 8008084:	20000044 	.word	0x20000044

08008088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008088:	b5b0      	push	{r4, r5, r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800808e:	2100      	movs	r1, #0
 8008090:	6079      	str	r1, [r7, #4]
 8008092:	2100      	movs	r1, #0
 8008094:	60f9      	str	r1, [r7, #12]
 8008096:	2100      	movs	r1, #0
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800809a:	2100      	movs	r1, #0
 800809c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800809e:	4952      	ldr	r1, [pc, #328]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80080a0:	6889      	ldr	r1, [r1, #8]
 80080a2:	f001 010c 	and.w	r1, r1, #12
 80080a6:	2908      	cmp	r1, #8
 80080a8:	d00d      	beq.n	80080c6 <HAL_RCC_GetSysClockFreq+0x3e>
 80080aa:	2908      	cmp	r1, #8
 80080ac:	f200 8094 	bhi.w	80081d8 <HAL_RCC_GetSysClockFreq+0x150>
 80080b0:	2900      	cmp	r1, #0
 80080b2:	d002      	beq.n	80080ba <HAL_RCC_GetSysClockFreq+0x32>
 80080b4:	2904      	cmp	r1, #4
 80080b6:	d003      	beq.n	80080c0 <HAL_RCC_GetSysClockFreq+0x38>
 80080b8:	e08e      	b.n	80081d8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080ba:	4b4c      	ldr	r3, [pc, #304]	; (80081ec <HAL_RCC_GetSysClockFreq+0x164>)
 80080bc:	60bb      	str	r3, [r7, #8]
      break;
 80080be:	e08e      	b.n	80081de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080c0:	4b4b      	ldr	r3, [pc, #300]	; (80081f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80080c2:	60bb      	str	r3, [r7, #8]
      break;
 80080c4:	e08b      	b.n	80081de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080c6:	4948      	ldr	r1, [pc, #288]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80080c8:	6849      	ldr	r1, [r1, #4]
 80080ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80080ce:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80080d0:	4945      	ldr	r1, [pc, #276]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80080d2:	6849      	ldr	r1, [r1, #4]
 80080d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80080d8:	2900      	cmp	r1, #0
 80080da:	d024      	beq.n	8008126 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080dc:	4942      	ldr	r1, [pc, #264]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80080de:	6849      	ldr	r1, [r1, #4]
 80080e0:	0989      	lsrs	r1, r1, #6
 80080e2:	4608      	mov	r0, r1
 80080e4:	f04f 0100 	mov.w	r1, #0
 80080e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80080ec:	f04f 0500 	mov.w	r5, #0
 80080f0:	ea00 0204 	and.w	r2, r0, r4
 80080f4:	ea01 0305 	and.w	r3, r1, r5
 80080f8:	493d      	ldr	r1, [pc, #244]	; (80081f0 <HAL_RCC_GetSysClockFreq+0x168>)
 80080fa:	fb01 f003 	mul.w	r0, r1, r3
 80080fe:	2100      	movs	r1, #0
 8008100:	fb01 f102 	mul.w	r1, r1, r2
 8008104:	1844      	adds	r4, r0, r1
 8008106:	493a      	ldr	r1, [pc, #232]	; (80081f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8008108:	fba2 0101 	umull	r0, r1, r2, r1
 800810c:	1863      	adds	r3, r4, r1
 800810e:	4619      	mov	r1, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	461a      	mov	r2, r3
 8008114:	f04f 0300 	mov.w	r3, #0
 8008118:	f7f8 f87a 	bl	8000210 <__aeabi_uldivmod>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4613      	mov	r3, r2
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	e04a      	b.n	80081bc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008126:	4b30      	ldr	r3, [pc, #192]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	099b      	lsrs	r3, r3, #6
 800812c:	461a      	mov	r2, r3
 800812e:	f04f 0300 	mov.w	r3, #0
 8008132:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008136:	f04f 0100 	mov.w	r1, #0
 800813a:	ea02 0400 	and.w	r4, r2, r0
 800813e:	ea03 0501 	and.w	r5, r3, r1
 8008142:	4620      	mov	r0, r4
 8008144:	4629      	mov	r1, r5
 8008146:	f04f 0200 	mov.w	r2, #0
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	014b      	lsls	r3, r1, #5
 8008150:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008154:	0142      	lsls	r2, r0, #5
 8008156:	4610      	mov	r0, r2
 8008158:	4619      	mov	r1, r3
 800815a:	1b00      	subs	r0, r0, r4
 800815c:	eb61 0105 	sbc.w	r1, r1, r5
 8008160:	f04f 0200 	mov.w	r2, #0
 8008164:	f04f 0300 	mov.w	r3, #0
 8008168:	018b      	lsls	r3, r1, #6
 800816a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800816e:	0182      	lsls	r2, r0, #6
 8008170:	1a12      	subs	r2, r2, r0
 8008172:	eb63 0301 	sbc.w	r3, r3, r1
 8008176:	f04f 0000 	mov.w	r0, #0
 800817a:	f04f 0100 	mov.w	r1, #0
 800817e:	00d9      	lsls	r1, r3, #3
 8008180:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008184:	00d0      	lsls	r0, r2, #3
 8008186:	4602      	mov	r2, r0
 8008188:	460b      	mov	r3, r1
 800818a:	1912      	adds	r2, r2, r4
 800818c:	eb45 0303 	adc.w	r3, r5, r3
 8008190:	f04f 0000 	mov.w	r0, #0
 8008194:	f04f 0100 	mov.w	r1, #0
 8008198:	0299      	lsls	r1, r3, #10
 800819a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800819e:	0290      	lsls	r0, r2, #10
 80081a0:	4602      	mov	r2, r0
 80081a2:	460b      	mov	r3, r1
 80081a4:	4610      	mov	r0, r2
 80081a6:	4619      	mov	r1, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	461a      	mov	r2, r3
 80081ac:	f04f 0300 	mov.w	r3, #0
 80081b0:	f7f8 f82e 	bl	8000210 <__aeabi_uldivmod>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	4613      	mov	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	0c1b      	lsrs	r3, r3, #16
 80081c2:	f003 0303 	and.w	r3, r3, #3
 80081c6:	3301      	adds	r3, #1
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d4:	60bb      	str	r3, [r7, #8]
      break;
 80081d6:	e002      	b.n	80081de <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081d8:	4b04      	ldr	r3, [pc, #16]	; (80081ec <HAL_RCC_GetSysClockFreq+0x164>)
 80081da:	60bb      	str	r3, [r7, #8]
      break;
 80081dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081de:	68bb      	ldr	r3, [r7, #8]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bdb0      	pop	{r4, r5, r7, pc}
 80081e8:	40023800 	.word	0x40023800
 80081ec:	00f42400 	.word	0x00f42400
 80081f0:	017d7840 	.word	0x017d7840

080081f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081f8:	4b03      	ldr	r3, [pc, #12]	; (8008208 <HAL_RCC_GetHCLKFreq+0x14>)
 80081fa:	681b      	ldr	r3, [r3, #0]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20000040 	.word	0x20000040

0800820c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008210:	f7ff fff0 	bl	80081f4 <HAL_RCC_GetHCLKFreq>
 8008214:	4602      	mov	r2, r0
 8008216:	4b05      	ldr	r3, [pc, #20]	; (800822c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	0a9b      	lsrs	r3, r3, #10
 800821c:	f003 0307 	and.w	r3, r3, #7
 8008220:	4903      	ldr	r1, [pc, #12]	; (8008230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008222:	5ccb      	ldrb	r3, [r1, r3]
 8008224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008228:	4618      	mov	r0, r3
 800822a:	bd80      	pop	{r7, pc}
 800822c:	40023800 	.word	0x40023800
 8008230:	08033ab0 	.word	0x08033ab0

08008234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008238:	f7ff ffdc 	bl	80081f4 <HAL_RCC_GetHCLKFreq>
 800823c:	4602      	mov	r2, r0
 800823e:	4b05      	ldr	r3, [pc, #20]	; (8008254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	0b5b      	lsrs	r3, r3, #13
 8008244:	f003 0307 	and.w	r3, r3, #7
 8008248:	4903      	ldr	r1, [pc, #12]	; (8008258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800824a:	5ccb      	ldrb	r3, [r1, r3]
 800824c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008250:	4618      	mov	r0, r3
 8008252:	bd80      	pop	{r7, pc}
 8008254:	40023800 	.word	0x40023800
 8008258:	08033ab0 	.word	0x08033ab0

0800825c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	220f      	movs	r2, #15
 800826a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800826c:	4b12      	ldr	r3, [pc, #72]	; (80082b8 <HAL_RCC_GetClockConfig+0x5c>)
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f003 0203 	and.w	r2, r3, #3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008278:	4b0f      	ldr	r3, [pc, #60]	; (80082b8 <HAL_RCC_GetClockConfig+0x5c>)
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008284:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <HAL_RCC_GetClockConfig+0x5c>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008290:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <HAL_RCC_GetClockConfig+0x5c>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	08db      	lsrs	r3, r3, #3
 8008296:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800829e:	4b07      	ldr	r3, [pc, #28]	; (80082bc <HAL_RCC_GetClockConfig+0x60>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 020f 	and.w	r2, r3, #15
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	601a      	str	r2, [r3, #0]
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	40023800 	.word	0x40023800
 80082bc:	40023c00 	.word	0x40023c00

080082c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80082cc:	2300      	movs	r3, #0
 80082ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d012      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082e8:	4b69      	ldr	r3, [pc, #420]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	4a68      	ldr	r2, [pc, #416]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80082f2:	6093      	str	r3, [r2, #8]
 80082f4:	4b66      	ldr	r3, [pc, #408]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082fc:	4964      	ldr	r1, [pc, #400]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008306:	2b00      	cmp	r3, #0
 8008308:	d101      	bne.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800830a:	2301      	movs	r3, #1
 800830c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d017      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800831a:	4b5d      	ldr	r3, [pc, #372]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800831c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008328:	4959      	ldr	r1, [pc, #356]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800832a:	4313      	orrs	r3, r2
 800832c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008338:	d101      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800833a:	2301      	movs	r3, #1
 800833c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008346:	2301      	movs	r3, #1
 8008348:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d017      	beq.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008356:	4b4e      	ldr	r3, [pc, #312]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800835c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008364:	494a      	ldr	r1, [pc, #296]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008374:	d101      	bne.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008376:	2301      	movs	r3, #1
 8008378:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008382:	2301      	movs	r3, #1
 8008384:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008392:	2301      	movs	r3, #1
 8008394:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 808b 	beq.w	80084ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083a4:	4b3a      	ldr	r3, [pc, #232]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a8:	4a39      	ldr	r2, [pc, #228]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ae:	6413      	str	r3, [r2, #64]	; 0x40
 80083b0:	4b37      	ldr	r3, [pc, #220]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083b8:	60bb      	str	r3, [r7, #8]
 80083ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80083bc:	4b35      	ldr	r3, [pc, #212]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a34      	ldr	r2, [pc, #208]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083c8:	f7fc fa78 	bl	80048bc <HAL_GetTick>
 80083cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083ce:	e008      	b.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083d0:	f7fc fa74 	bl	80048bc <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b64      	cmp	r3, #100	; 0x64
 80083dc:	d901      	bls.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80083de:	2303      	movs	r3, #3
 80083e0:	e357      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083e2:	4b2c      	ldr	r3, [pc, #176]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0f0      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083ee:	4b28      	ldr	r3, [pc, #160]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d035      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	429a      	cmp	r2, r3
 800840a:	d02e      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800840c:	4b20      	ldr	r3, [pc, #128]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008414:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008416:	4b1e      	ldr	r3, [pc, #120]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841a:	4a1d      	ldr	r2, [pc, #116]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008420:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008422:	4b1b      	ldr	r3, [pc, #108]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008426:	4a1a      	ldr	r2, [pc, #104]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800842c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800842e:	4a18      	ldr	r2, [pc, #96]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008434:	4b16      	ldr	r3, [pc, #88]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b01      	cmp	r3, #1
 800843e:	d114      	bne.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008440:	f7fc fa3c 	bl	80048bc <HAL_GetTick>
 8008444:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008446:	e00a      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008448:	f7fc fa38 	bl	80048bc <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	f241 3288 	movw	r2, #5000	; 0x1388
 8008456:	4293      	cmp	r3, r2
 8008458:	d901      	bls.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e319      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800845e:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0ee      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008476:	d111      	bne.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008478:	4b05      	ldr	r3, [pc, #20]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008484:	4b04      	ldr	r3, [pc, #16]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008486:	400b      	ands	r3, r1
 8008488:	4901      	ldr	r1, [pc, #4]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800848a:	4313      	orrs	r3, r2
 800848c:	608b      	str	r3, [r1, #8]
 800848e:	e00b      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008490:	40023800 	.word	0x40023800
 8008494:	40007000 	.word	0x40007000
 8008498:	0ffffcff 	.word	0x0ffffcff
 800849c:	4bb1      	ldr	r3, [pc, #708]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	4ab0      	ldr	r2, [pc, #704]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084a6:	6093      	str	r3, [r2, #8]
 80084a8:	4bae      	ldr	r3, [pc, #696]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084b4:	49ab      	ldr	r1, [pc, #684]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0310 	and.w	r3, r3, #16
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d010      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084c6:	4ba7      	ldr	r3, [pc, #668]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084cc:	4aa5      	ldr	r2, [pc, #660]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80084d6:	4ba3      	ldr	r3, [pc, #652]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	49a0      	ldr	r1, [pc, #640]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00a      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084f4:	4b9b      	ldr	r3, [pc, #620]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80084f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008502:	4998      	ldr	r1, [pc, #608]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008504:	4313      	orrs	r3, r2
 8008506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00a      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008516:	4b93      	ldr	r3, [pc, #588]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800851c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008524:	498f      	ldr	r1, [pc, #572]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008526:	4313      	orrs	r3, r2
 8008528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00a      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008538:	4b8a      	ldr	r3, [pc, #552]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800853a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800853e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008546:	4987      	ldr	r1, [pc, #540]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008548:	4313      	orrs	r3, r2
 800854a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800855a:	4b82      	ldr	r3, [pc, #520]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800855c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008560:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008568:	497e      	ldr	r1, [pc, #504]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800856a:	4313      	orrs	r3, r2
 800856c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800857c:	4b79      	ldr	r3, [pc, #484]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800857e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008582:	f023 0203 	bic.w	r2, r3, #3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858a:	4976      	ldr	r1, [pc, #472]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800858c:	4313      	orrs	r3, r2
 800858e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800859e:	4b71      	ldr	r3, [pc, #452]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a4:	f023 020c 	bic.w	r2, r3, #12
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085ac:	496d      	ldr	r1, [pc, #436]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00a      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085c0:	4b68      	ldr	r3, [pc, #416]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ce:	4965      	ldr	r1, [pc, #404]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00a      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085e2:	4b60      	ldr	r3, [pc, #384]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f0:	495c      	ldr	r1, [pc, #368]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00a      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008604:	4b57      	ldr	r3, [pc, #348]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800860a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008612:	4954      	ldr	r1, [pc, #336]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008614:	4313      	orrs	r3, r2
 8008616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008626:	4b4f      	ldr	r3, [pc, #316]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800862c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008634:	494b      	ldr	r1, [pc, #300]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008636:	4313      	orrs	r3, r2
 8008638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00a      	beq.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008648:	4b46      	ldr	r3, [pc, #280]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800864a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800864e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008656:	4943      	ldr	r1, [pc, #268]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008658:	4313      	orrs	r3, r2
 800865a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800866a:	4b3e      	ldr	r3, [pc, #248]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800866c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008670:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008678:	493a      	ldr	r1, [pc, #232]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800867a:	4313      	orrs	r3, r2
 800867c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00a      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800868c:	4b35      	ldr	r3, [pc, #212]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800868e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008692:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800869a:	4932      	ldr	r1, [pc, #200]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800869c:	4313      	orrs	r3, r2
 800869e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d011      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80086ae:	4b2d      	ldr	r3, [pc, #180]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80086b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086bc:	4929      	ldr	r1, [pc, #164]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086cc:	d101      	bne.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80086ce:	2301      	movs	r3, #1
 80086d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0308 	and.w	r3, r3, #8
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80086de:	2301      	movs	r3, #1
 80086e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00a      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086ee:	4b1d      	ldr	r3, [pc, #116]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80086f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086fc:	4919      	ldr	r1, [pc, #100]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00b      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008710:	4b14      	ldr	r3, [pc, #80]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008716:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008720:	4910      	ldr	r1, [pc, #64]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008722:	4313      	orrs	r3, r2
 8008724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d006      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 80d9 	beq.w	80088ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800873c:	4b09      	ldr	r3, [pc, #36]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a08      	ldr	r2, [pc, #32]	; (8008764 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008742:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008748:	f7fc f8b8 	bl	80048bc <HAL_GetTick>
 800874c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800874e:	e00b      	b.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008750:	f7fc f8b4 	bl	80048bc <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b64      	cmp	r3, #100	; 0x64
 800875c:	d904      	bls.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e197      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008762:	bf00      	nop
 8008764:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008768:	4b6c      	ldr	r3, [pc, #432]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1ed      	bne.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	d021      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008784:	2b00      	cmp	r3, #0
 8008786:	d11d      	bne.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008788:	4b64      	ldr	r3, [pc, #400]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800878a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800878e:	0c1b      	lsrs	r3, r3, #16
 8008790:	f003 0303 	and.w	r3, r3, #3
 8008794:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008796:	4b61      	ldr	r3, [pc, #388]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800879c:	0e1b      	lsrs	r3, r3, #24
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	019a      	lsls	r2, r3, #6
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	041b      	lsls	r3, r3, #16
 80087ae:	431a      	orrs	r2, r3
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	061b      	lsls	r3, r3, #24
 80087b4:	431a      	orrs	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	071b      	lsls	r3, r3, #28
 80087bc:	4957      	ldr	r1, [pc, #348]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d004      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087d8:	d00a      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d02e      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087ee:	d129      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087f0:	4b4a      	ldr	r3, [pc, #296]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087f6:	0c1b      	lsrs	r3, r3, #16
 80087f8:	f003 0303 	and.w	r3, r3, #3
 80087fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087fe:	4b47      	ldr	r3, [pc, #284]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008804:	0f1b      	lsrs	r3, r3, #28
 8008806:	f003 0307 	and.w	r3, r3, #7
 800880a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	019a      	lsls	r2, r3, #6
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	041b      	lsls	r3, r3, #16
 8008816:	431a      	orrs	r2, r3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	061b      	lsls	r3, r3, #24
 800881e:	431a      	orrs	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	071b      	lsls	r3, r3, #28
 8008824:	493d      	ldr	r1, [pc, #244]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008826:	4313      	orrs	r3, r2
 8008828:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800882c:	4b3b      	ldr	r3, [pc, #236]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800882e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008832:	f023 021f 	bic.w	r2, r3, #31
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883a:	3b01      	subs	r3, #1
 800883c:	4937      	ldr	r1, [pc, #220]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800883e:	4313      	orrs	r3, r2
 8008840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d01d      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008850:	4b32      	ldr	r3, [pc, #200]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008856:	0e1b      	lsrs	r3, r3, #24
 8008858:	f003 030f 	and.w	r3, r3, #15
 800885c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800885e:	4b2f      	ldr	r3, [pc, #188]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008864:	0f1b      	lsrs	r3, r3, #28
 8008866:	f003 0307 	and.w	r3, r3, #7
 800886a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	019a      	lsls	r2, r3, #6
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	041b      	lsls	r3, r3, #16
 8008878:	431a      	orrs	r2, r3
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	061b      	lsls	r3, r3, #24
 800887e:	431a      	orrs	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	071b      	lsls	r3, r3, #28
 8008884:	4925      	ldr	r1, [pc, #148]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008886:	4313      	orrs	r3, r2
 8008888:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d011      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	019a      	lsls	r2, r3, #6
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	041b      	lsls	r3, r3, #16
 80088a4:	431a      	orrs	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	061b      	lsls	r3, r3, #24
 80088ac:	431a      	orrs	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	071b      	lsls	r3, r3, #28
 80088b4:	4919      	ldr	r1, [pc, #100]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088bc:	4b17      	ldr	r3, [pc, #92]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a16      	ldr	r2, [pc, #88]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088c8:	f7fb fff8 	bl	80048bc <HAL_GetTick>
 80088cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088ce:	e008      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088d0:	f7fb fff4 	bl	80048bc <HAL_GetTick>
 80088d4:	4602      	mov	r2, r0
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	2b64      	cmp	r3, #100	; 0x64
 80088dc:	d901      	bls.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088de:	2303      	movs	r3, #3
 80088e0:	e0d7      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088e2:	4b0e      	ldr	r3, [pc, #56]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d0f0      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	f040 80cd 	bne.w	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088f6:	4b09      	ldr	r3, [pc, #36]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a08      	ldr	r2, [pc, #32]	; (800891c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008902:	f7fb ffdb 	bl	80048bc <HAL_GetTick>
 8008906:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008908:	e00a      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800890a:	f7fb ffd7 	bl	80048bc <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	2b64      	cmp	r3, #100	; 0x64
 8008916:	d903      	bls.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e0ba      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800891c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008920:	4b5e      	ldr	r3, [pc, #376]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800892c:	d0ed      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d009      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800894a:	2b00      	cmp	r3, #0
 800894c:	d02e      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008952:	2b00      	cmp	r3, #0
 8008954:	d12a      	bne.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008956:	4b51      	ldr	r3, [pc, #324]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800895c:	0c1b      	lsrs	r3, r3, #16
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008964:	4b4d      	ldr	r3, [pc, #308]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800896a:	0f1b      	lsrs	r3, r3, #28
 800896c:	f003 0307 	and.w	r3, r3, #7
 8008970:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	019a      	lsls	r2, r3, #6
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	041b      	lsls	r3, r3, #16
 800897c:	431a      	orrs	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	061b      	lsls	r3, r3, #24
 8008984:	431a      	orrs	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	071b      	lsls	r3, r3, #28
 800898a:	4944      	ldr	r1, [pc, #272]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800898c:	4313      	orrs	r3, r2
 800898e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008992:	4b42      	ldr	r3, [pc, #264]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008998:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a0:	3b01      	subs	r3, #1
 80089a2:	021b      	lsls	r3, r3, #8
 80089a4:	493d      	ldr	r1, [pc, #244]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d022      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089c0:	d11d      	bne.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089c2:	4b36      	ldr	r3, [pc, #216]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c8:	0e1b      	lsrs	r3, r3, #24
 80089ca:	f003 030f 	and.w	r3, r3, #15
 80089ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80089d0:	4b32      	ldr	r3, [pc, #200]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d6:	0f1b      	lsrs	r3, r3, #28
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	019a      	lsls	r2, r3, #6
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	041b      	lsls	r3, r3, #16
 80089ea:	431a      	orrs	r2, r3
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	061b      	lsls	r3, r3, #24
 80089f0:	431a      	orrs	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	071b      	lsls	r3, r3, #28
 80089f6:	4929      	ldr	r1, [pc, #164]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0308 	and.w	r3, r3, #8
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d028      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a0a:	4b24      	ldr	r3, [pc, #144]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a10:	0e1b      	lsrs	r3, r3, #24
 8008a12:	f003 030f 	and.w	r3, r3, #15
 8008a16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a18:	4b20      	ldr	r3, [pc, #128]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a1e:	0c1b      	lsrs	r3, r3, #16
 8008a20:	f003 0303 	and.w	r3, r3, #3
 8008a24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	019a      	lsls	r2, r3, #6
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	041b      	lsls	r3, r3, #16
 8008a30:	431a      	orrs	r2, r3
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	061b      	lsls	r3, r3, #24
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	69db      	ldr	r3, [r3, #28]
 8008a3c:	071b      	lsls	r3, r3, #28
 8008a3e:	4917      	ldr	r1, [pc, #92]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a40:	4313      	orrs	r3, r2
 8008a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a46:	4b15      	ldr	r3, [pc, #84]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a54:	4911      	ldr	r1, [pc, #68]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a5c:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a0e      	ldr	r2, [pc, #56]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a68:	f7fb ff28 	bl	80048bc <HAL_GetTick>
 8008a6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a6e:	e008      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a70:	f7fb ff24 	bl	80048bc <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b64      	cmp	r3, #100	; 0x64
 8008a7c:	d901      	bls.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e007      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a82:	4b06      	ldr	r3, [pc, #24]	; (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a8e:	d1ef      	bne.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3720      	adds	r7, #32
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	40023800 	.word	0x40023800

08008aa0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e081      	b.n	8008bb6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7f5b      	ldrb	r3, [r3, #29]
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d105      	bne.n	8008ac8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7fb fb18 	bl	80040f8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2202      	movs	r2, #2
 8008acc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	22ca      	movs	r2, #202	; 0xca
 8008ad4:	625a      	str	r2, [r3, #36]	; 0x24
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2253      	movs	r2, #83	; 0x53
 8008adc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fb16 	bl	8009110 <RTC_EnterInitMode>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d008      	beq.n	8008afc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	22ff      	movs	r2, #255	; 0xff
 8008af0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2204      	movs	r2, #4
 8008af6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e05c      	b.n	8008bb6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6899      	ldr	r1, [r3, #8]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	4b2e      	ldr	r3, [pc, #184]	; (8008bc0 <HAL_RTC_Init+0x120>)
 8008b08:	400b      	ands	r3, r1
 8008b0a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6899      	ldr	r1, [r3, #8]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	431a      	orrs	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	68d2      	ldr	r2, [r2, #12]
 8008b32:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6919      	ldr	r1, [r3, #16]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	041a      	lsls	r2, r3, #16
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	430a      	orrs	r2, r1
 8008b46:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68da      	ldr	r2, [r3, #12]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b56:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f003 0320 	and.w	r3, r3, #32
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10e      	bne.n	8008b84 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 faaa 	bl	80090c0 <HAL_RTC_WaitForSynchro>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d008      	beq.n	8008b84 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	22ff      	movs	r2, #255	; 0xff
 8008b78:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2204      	movs	r2, #4
 8008b7e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e018      	b.n	8008bb6 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 0208 	bic.w	r2, r2, #8
 8008b92:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	699a      	ldr	r2, [r3, #24]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	22ff      	movs	r2, #255	; 0xff
 8008bac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
  }
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	ff8fffbf 	.word	0xff8fffbf

08008bc4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008bc4:	b590      	push	{r4, r7, lr}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	7f1b      	ldrb	r3, [r3, #28]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d101      	bne.n	8008be0 <HAL_RTC_SetTime+0x1c>
 8008bdc:	2302      	movs	r3, #2
 8008bde:	e0a8      	b.n	8008d32 <HAL_RTC_SetTime+0x16e>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2201      	movs	r2, #1
 8008be4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2202      	movs	r2, #2
 8008bea:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d126      	bne.n	8008c40 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d102      	bne.n	8008c06 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2200      	movs	r2, #0
 8008c04:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 faac 	bl	8009168 <RTC_ByteToBcd2>
 8008c10:	4603      	mov	r3, r0
 8008c12:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	785b      	ldrb	r3, [r3, #1]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 faa5 	bl	8009168 <RTC_ByteToBcd2>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008c22:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	789b      	ldrb	r3, [r3, #2]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 fa9d 	bl	8009168 <RTC_ByteToBcd2>
 8008c2e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008c30:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	7b1b      	ldrb	r3, [r3, #12]
 8008c38:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	617b      	str	r3, [r7, #20]
 8008c3e:	e018      	b.n	8008c72 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d102      	bne.n	8008c54 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2200      	movs	r2, #0
 8008c52:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	785b      	ldrb	r3, [r3, #1]
 8008c5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008c60:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008c66:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	7b1b      	ldrb	r3, [r3, #12]
 8008c6c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	22ca      	movs	r2, #202	; 0xca
 8008c78:	625a      	str	r2, [r3, #36]	; 0x24
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2253      	movs	r2, #83	; 0x53
 8008c80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 fa44 	bl	8009110 <RTC_EnterInitMode>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00b      	beq.n	8008ca6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	22ff      	movs	r2, #255	; 0xff
 8008c94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2204      	movs	r2, #4
 8008c9a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e045      	b.n	8008d32 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	6979      	ldr	r1, [r7, #20]
 8008cac:	4b23      	ldr	r3, [pc, #140]	; (8008d3c <HAL_RTC_SetTime+0x178>)
 8008cae:	400b      	ands	r3, r1
 8008cb0:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008cc0:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6899      	ldr	r1, [r3, #8]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	691a      	ldr	r2, [r3, #16]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ce8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f003 0320 	and.w	r3, r3, #32
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d111      	bne.n	8008d1c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 f9e1 	bl	80090c0 <HAL_RTC_WaitForSynchro>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00b      	beq.n	8008d1c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	22ff      	movs	r2, #255	; 0xff
 8008d0a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2204      	movs	r2, #4
 8008d10:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e00a      	b.n	8008d32 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	22ff      	movs	r2, #255	; 0xff
 8008d22:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2201      	movs	r2, #1
 8008d28:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008d30:	2300      	movs	r3, #0
  }
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd90      	pop	{r4, r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	007f7f7f 	.word	0x007f7f7f

08008d40 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008d40:	b590      	push	{r4, r7, lr}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	7f1b      	ldrb	r3, [r3, #28]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d101      	bne.n	8008d5c <HAL_RTC_SetDate+0x1c>
 8008d58:	2302      	movs	r3, #2
 8008d5a:	e092      	b.n	8008e82 <HAL_RTC_SetDate+0x142>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2202      	movs	r2, #2
 8008d66:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10e      	bne.n	8008d8c <HAL_RTC_SetDate+0x4c>
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	785b      	ldrb	r3, [r3, #1]
 8008d72:	f003 0310 	and.w	r3, r3, #16
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d008      	beq.n	8008d8c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	785b      	ldrb	r3, [r3, #1]
 8008d7e:	f023 0310 	bic.w	r3, r3, #16
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	330a      	adds	r3, #10
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d11c      	bne.n	8008dcc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	78db      	ldrb	r3, [r3, #3]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 f9e6 	bl	8009168 <RTC_ByteToBcd2>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 f9df 	bl	8009168 <RTC_ByteToBcd2>
 8008daa:	4603      	mov	r3, r0
 8008dac:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008dae:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	789b      	ldrb	r3, [r3, #2]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 f9d7 	bl	8009168 <RTC_ByteToBcd2>
 8008dba:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008dbc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	617b      	str	r3, [r7, #20]
 8008dca:	e00e      	b.n	8008dea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	78db      	ldrb	r3, [r3, #3]
 8008dd0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	785b      	ldrb	r3, [r3, #1]
 8008dd6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008dd8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008dda:	68ba      	ldr	r2, [r7, #8]
 8008ddc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008dde:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008de6:	4313      	orrs	r3, r2
 8008de8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	22ca      	movs	r2, #202	; 0xca
 8008df0:	625a      	str	r2, [r3, #36]	; 0x24
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2253      	movs	r2, #83	; 0x53
 8008df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f000 f988 	bl	8009110 <RTC_EnterInitMode>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00b      	beq.n	8008e1e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	22ff      	movs	r2, #255	; 0xff
 8008e0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2204      	movs	r2, #4
 8008e12:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e031      	b.n	8008e82 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	6979      	ldr	r1, [r7, #20]
 8008e24:	4b19      	ldr	r3, [pc, #100]	; (8008e8c <HAL_RTC_SetDate+0x14c>)
 8008e26:	400b      	ands	r3, r1
 8008e28:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68da      	ldr	r2, [r3, #12]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e38:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f003 0320 	and.w	r3, r3, #32
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d111      	bne.n	8008e6c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 f939 	bl	80090c0 <HAL_RTC_WaitForSynchro>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00b      	beq.n	8008e6c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	22ff      	movs	r2, #255	; 0xff
 8008e5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2204      	movs	r2, #4
 8008e60:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e00a      	b.n	8008e82 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	22ff      	movs	r2, #255	; 0xff
 8008e72:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2201      	movs	r2, #1
 8008e78:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008e80:	2300      	movs	r3, #0
  }
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	371c      	adds	r7, #28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd90      	pop	{r4, r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	00ffff3f 	.word	0x00ffff3f

08008e90 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008e90:	b590      	push	{r4, r7, lr}
 8008e92:	b089      	sub	sp, #36	; 0x24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	61fb      	str	r3, [r7, #28]
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	7f1b      	ldrb	r3, [r3, #28]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d101      	bne.n	8008eb4 <HAL_RTC_SetAlarm+0x24>
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	e101      	b.n	80090b8 <HAL_RTC_SetAlarm+0x228>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2202      	movs	r2, #2
 8008ebe:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d137      	bne.n	8008f36 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d102      	bne.n	8008eda <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 f942 	bl	8009168 <RTC_ByteToBcd2>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	785b      	ldrb	r3, [r3, #1]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 f93b 	bl	8009168 <RTC_ByteToBcd2>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008ef6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	789b      	ldrb	r3, [r3, #2]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 f933 	bl	8009168 <RTC_ByteToBcd2>
 8008f02:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008f04:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	7b1b      	ldrb	r3, [r3, #12]
 8008f0c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008f0e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 f925 	bl	8009168 <RTC_ByteToBcd2>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008f22:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008f2a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008f30:	4313      	orrs	r3, r2
 8008f32:	61fb      	str	r3, [r7, #28]
 8008f34:	e023      	b.n	8008f7e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d102      	bne.n	8008f4a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	2200      	movs	r2, #0
 8008f48:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	785b      	ldrb	r3, [r3, #1]
 8008f54:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008f56:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008f58:	68ba      	ldr	r2, [r7, #8]
 8008f5a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008f5c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	7b1b      	ldrb	r3, [r3, #12]
 8008f62:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008f64:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f6c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008f6e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008f74:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	685a      	ldr	r2, [r3, #4]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	22ca      	movs	r2, #202	; 0xca
 8008f90:	625a      	str	r2, [r3, #36]	; 0x24
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2253      	movs	r2, #83	; 0x53
 8008f98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fa2:	d13f      	bne.n	8009024 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689a      	ldr	r2, [r3, #8]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fb2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	689a      	ldr	r2, [r3, #8]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fc2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fc4:	f7fb fc7a 	bl	80048bc <HAL_GetTick>
 8008fc8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008fca:	e013      	b.n	8008ff4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008fcc:	f7fb fc76 	bl	80048bc <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fda:	d90b      	bls.n	8008ff4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	22ff      	movs	r2, #255	; 0xff
 8008fe2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2203      	movs	r2, #3
 8008fe8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e061      	b.n	80090b8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d0e4      	beq.n	8008fcc <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69fa      	ldr	r2, [r7, #28]
 8009008:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	697a      	ldr	r2, [r7, #20]
 8009010:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009020:	609a      	str	r2, [r3, #8]
 8009022:	e03e      	b.n	80090a2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689a      	ldr	r2, [r3, #8]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009032:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009042:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009044:	f7fb fc3a 	bl	80048bc <HAL_GetTick>
 8009048:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800904a:	e013      	b.n	8009074 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800904c:	f7fb fc36 	bl	80048bc <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800905a:	d90b      	bls.n	8009074 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	22ff      	movs	r2, #255	; 0xff
 8009062:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2203      	movs	r2, #3
 8009068:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e021      	b.n	80090b8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d0e4      	beq.n	800904c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	22ff      	movs	r2, #255	; 0xff
 80090a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2201      	movs	r2, #1
 80090ae:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3724      	adds	r7, #36	; 0x24
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd90      	pop	{r4, r7, pc}

080090c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68da      	ldr	r2, [r3, #12]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80090da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090dc:	f7fb fbee 	bl	80048bc <HAL_GetTick>
 80090e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80090e2:	e009      	b.n	80090f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80090e4:	f7fb fbea 	bl	80048bc <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090f2:	d901      	bls.n	80090f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e007      	b.n	8009108 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	f003 0320 	and.w	r3, r3, #32
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0ee      	beq.n	80090e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009118:	2300      	movs	r3, #0
 800911a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009126:	2b00      	cmp	r3, #0
 8009128:	d119      	bne.n	800915e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f04f 32ff 	mov.w	r2, #4294967295
 8009132:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009134:	f7fb fbc2 	bl	80048bc <HAL_GetTick>
 8009138:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800913a:	e009      	b.n	8009150 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800913c:	f7fb fbbe 	bl	80048bc <HAL_GetTick>
 8009140:	4602      	mov	r2, r0
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800914a:	d901      	bls.n	8009150 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e007      	b.n	8009160 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d0ee      	beq.n	800913c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009172:	2300      	movs	r3, #0
 8009174:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009176:	e005      	b.n	8009184 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3301      	adds	r3, #1
 800917c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	3b0a      	subs	r3, #10
 8009182:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	2b09      	cmp	r3, #9
 8009188:	d8f6      	bhi.n	8009178 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	b2db      	uxtb	r3, r3
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	b2da      	uxtb	r2, r3
 8009192:	79fb      	ldrb	r3, [r7, #7]
 8009194:	4313      	orrs	r3, r2
 8009196:	b2db      	uxtb	r3, r3
}
 8009198:	4618      	mov	r0, r3
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	7f1b      	ldrb	r3, [r3, #28]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d101      	bne.n	80091c0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80091bc:	2302      	movs	r3, #2
 80091be:	e03e      	b.n	800923e <HAL_RTCEx_SetTimeStamp+0x9a>
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2201      	movs	r2, #1
 80091c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2202      	movs	r2, #2
 80091ca:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689a      	ldr	r2, [r3, #8]
 80091d2:	4b1e      	ldr	r3, [pc, #120]	; (800924c <HAL_RTCEx_SetTimeStamp+0xa8>)
 80091d4:	4013      	ands	r3, r2
 80091d6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	4313      	orrs	r3, r2
 80091de:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	22ca      	movs	r2, #202	; 0xca
 80091e6:	625a      	str	r2, [r3, #36]	; 0x24
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2253      	movs	r2, #83	; 0x53
 80091ee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f022 0206 	bic.w	r2, r2, #6
 80091fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	430a      	orrs	r2, r1
 800920e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	697a      	ldr	r2, [r7, #20]
 8009216:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009226:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	22ff      	movs	r2, #255	; 0xff
 800922e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2201      	movs	r2, #1
 8009234:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	371c      	adds	r7, #28
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	fffff7f7 	.word	0xfffff7f7

08009250 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e025      	b.n	80092b0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b00      	cmp	r3, #0
 800926e:	d106      	bne.n	800927e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7fb fa07 	bl	800468c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2202      	movs	r2, #2
 8009282:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	3304      	adds	r3, #4
 800928e:	4619      	mov	r1, r3
 8009290:	4610      	mov	r0, r2
 8009292:	f001 fdb7 	bl	800ae04 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6818      	ldr	r0, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	461a      	mov	r2, r3
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	f001 fe0b 	bl	800aebc <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b086      	sub	sp, #24
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092ca:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80092cc:	7dfb      	ldrb	r3, [r7, #23]
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d101      	bne.n	80092d6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80092d2:	2302      	movs	r3, #2
 80092d4:	e021      	b.n	800931a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d002      	beq.n	80092e2 <HAL_SDRAM_SendCommand+0x2a>
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	2b05      	cmp	r3, #5
 80092e0:	d118      	bne.n	8009314 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2202      	movs	r2, #2
 80092e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	68b9      	ldr	r1, [r7, #8]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f001 fe4c 	bl	800af90 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d104      	bne.n	800930a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2205      	movs	r2, #5
 8009304:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009308:	e006      	b.n	8009318 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009312:	e001      	b.n	8009318 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e000      	b.n	800931a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b082      	sub	sp, #8
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
 800932a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b02      	cmp	r3, #2
 8009336:	d101      	bne.n	800933c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009338:	2302      	movs	r3, #2
 800933a:	e016      	b.n	800936a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b01      	cmp	r3, #1
 8009346:	d10f      	bne.n	8009368 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2202      	movs	r2, #2
 800934c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	4618      	mov	r0, r3
 8009358:	f001 fe3e 	bl	800afd8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009364:	2300      	movs	r3, #0
 8009366:	e000      	b.n	800936a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
}
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b084      	sub	sp, #16
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d101      	bne.n	8009384 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e09d      	b.n	80094c0 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	2b00      	cmp	r3, #0
 800938a:	d108      	bne.n	800939e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009394:	d009      	beq.n	80093aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	61da      	str	r2, [r3, #28]
 800939c:	e005      	b.n	80093aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d106      	bne.n	80093ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7fa fec5 	bl	8004154 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2202      	movs	r2, #2
 80093ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093ea:	d902      	bls.n	80093f2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80093ec:	2300      	movs	r3, #0
 80093ee:	60fb      	str	r3, [r7, #12]
 80093f0:	e002      	b.n	80093f8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80093f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009400:	d007      	beq.n	8009412 <HAL_SPI_Init+0xa0>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68db      	ldr	r3, [r3, #12]
 8009406:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800940a:	d002      	beq.n	8009412 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	431a      	orrs	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	431a      	orrs	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009440:	431a      	orrs	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a1b      	ldr	r3, [r3, #32]
 8009450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009454:	ea42 0103 	orr.w	r1, r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	430a      	orrs	r2, r1
 8009466:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	0c1b      	lsrs	r3, r3, #16
 800946e:	f003 0204 	and.w	r2, r3, #4
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009476:	f003 0310 	and.w	r3, r3, #16
 800947a:	431a      	orrs	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009480:	f003 0308 	and.w	r3, r3, #8
 8009484:	431a      	orrs	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800948e:	ea42 0103 	orr.w	r1, r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	69da      	ldr	r2, [r3, #28]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e049      	b.n	800956e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d106      	bne.n	80094f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7fa fe92 	bl	8004218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3304      	adds	r3, #4
 8009504:	4619      	mov	r1, r3
 8009506:	4610      	mov	r0, r2
 8009508:	f000 fac0 	bl	8009a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
	...

08009578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b01      	cmp	r3, #1
 800958a:	d001      	beq.n	8009590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e054      	b.n	800963a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2202      	movs	r2, #2
 8009594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f042 0201 	orr.w	r2, r2, #1
 80095a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a26      	ldr	r2, [pc, #152]	; (8009648 <HAL_TIM_Base_Start_IT+0xd0>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d022      	beq.n	80095f8 <HAL_TIM_Base_Start_IT+0x80>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ba:	d01d      	beq.n	80095f8 <HAL_TIM_Base_Start_IT+0x80>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a22      	ldr	r2, [pc, #136]	; (800964c <HAL_TIM_Base_Start_IT+0xd4>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d018      	beq.n	80095f8 <HAL_TIM_Base_Start_IT+0x80>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a21      	ldr	r2, [pc, #132]	; (8009650 <HAL_TIM_Base_Start_IT+0xd8>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d013      	beq.n	80095f8 <HAL_TIM_Base_Start_IT+0x80>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a1f      	ldr	r2, [pc, #124]	; (8009654 <HAL_TIM_Base_Start_IT+0xdc>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d00e      	beq.n	80095f8 <HAL_TIM_Base_Start_IT+0x80>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a1e      	ldr	r2, [pc, #120]	; (8009658 <HAL_TIM_Base_Start_IT+0xe0>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d009      	beq.n	80095f8 <HAL_TIM_Base_Start_IT+0x80>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a1c      	ldr	r2, [pc, #112]	; (800965c <HAL_TIM_Base_Start_IT+0xe4>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d004      	beq.n	80095f8 <HAL_TIM_Base_Start_IT+0x80>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a1b      	ldr	r2, [pc, #108]	; (8009660 <HAL_TIM_Base_Start_IT+0xe8>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d115      	bne.n	8009624 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	4b19      	ldr	r3, [pc, #100]	; (8009664 <HAL_TIM_Base_Start_IT+0xec>)
 8009600:	4013      	ands	r3, r2
 8009602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b06      	cmp	r3, #6
 8009608:	d015      	beq.n	8009636 <HAL_TIM_Base_Start_IT+0xbe>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009610:	d011      	beq.n	8009636 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f042 0201 	orr.w	r2, r2, #1
 8009620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009622:	e008      	b.n	8009636 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f042 0201 	orr.w	r2, r2, #1
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	e000      	b.n	8009638 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	40010000 	.word	0x40010000
 800964c:	40000400 	.word	0x40000400
 8009650:	40000800 	.word	0x40000800
 8009654:	40000c00 	.word	0x40000c00
 8009658:	40010400 	.word	0x40010400
 800965c:	40014000 	.word	0x40014000
 8009660:	40001800 	.word	0x40001800
 8009664:	00010007 	.word	0x00010007

08009668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	f003 0302 	and.w	r3, r3, #2
 800967a:	2b02      	cmp	r3, #2
 800967c:	d122      	bne.n	80096c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f003 0302 	and.w	r3, r3, #2
 8009688:	2b02      	cmp	r3, #2
 800968a:	d11b      	bne.n	80096c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f06f 0202 	mvn.w	r2, #2
 8009694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	f003 0303 	and.w	r3, r3, #3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d003      	beq.n	80096b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f9d0 	bl	8009a50 <HAL_TIM_IC_CaptureCallback>
 80096b0:	e005      	b.n	80096be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f9c2 	bl	8009a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f9d3 	bl	8009a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	691b      	ldr	r3, [r3, #16]
 80096ca:	f003 0304 	and.w	r3, r3, #4
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d122      	bne.n	8009718 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f003 0304 	and.w	r3, r3, #4
 80096dc:	2b04      	cmp	r3, #4
 80096de:	d11b      	bne.n	8009718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f06f 0204 	mvn.w	r2, #4
 80096e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2202      	movs	r2, #2
 80096ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	699b      	ldr	r3, [r3, #24]
 80096f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f9a6 	bl	8009a50 <HAL_TIM_IC_CaptureCallback>
 8009704:	e005      	b.n	8009712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f998 	bl	8009a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f9a9 	bl	8009a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	f003 0308 	and.w	r3, r3, #8
 8009722:	2b08      	cmp	r3, #8
 8009724:	d122      	bne.n	800976c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	f003 0308 	and.w	r3, r3, #8
 8009730:	2b08      	cmp	r3, #8
 8009732:	d11b      	bne.n	800976c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f06f 0208 	mvn.w	r2, #8
 800973c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2204      	movs	r2, #4
 8009742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	69db      	ldr	r3, [r3, #28]
 800974a:	f003 0303 	and.w	r3, r3, #3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f97c 	bl	8009a50 <HAL_TIM_IC_CaptureCallback>
 8009758:	e005      	b.n	8009766 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f96e 	bl	8009a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 f97f 	bl	8009a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	f003 0310 	and.w	r3, r3, #16
 8009776:	2b10      	cmp	r3, #16
 8009778:	d122      	bne.n	80097c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f003 0310 	and.w	r3, r3, #16
 8009784:	2b10      	cmp	r3, #16
 8009786:	d11b      	bne.n	80097c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f06f 0210 	mvn.w	r2, #16
 8009790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2208      	movs	r2, #8
 8009796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	69db      	ldr	r3, [r3, #28]
 800979e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d003      	beq.n	80097ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f952 	bl	8009a50 <HAL_TIM_IC_CaptureCallback>
 80097ac:	e005      	b.n	80097ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f944 	bl	8009a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f955 	bl	8009a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d10e      	bne.n	80097ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d107      	bne.n	80097ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f06f 0201 	mvn.w	r2, #1
 80097e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7f8 fd62 	bl	80022b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f6:	2b80      	cmp	r3, #128	; 0x80
 80097f8:	d10e      	bne.n	8009818 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009804:	2b80      	cmp	r3, #128	; 0x80
 8009806:	d107      	bne.n	8009818 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fb0c 	bl	8009e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009826:	d10e      	bne.n	8009846 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009832:	2b80      	cmp	r3, #128	; 0x80
 8009834:	d107      	bne.n	8009846 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800983e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 faff 	bl	8009e44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009850:	2b40      	cmp	r3, #64	; 0x40
 8009852:	d10e      	bne.n	8009872 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985e:	2b40      	cmp	r3, #64	; 0x40
 8009860:	d107      	bne.n	8009872 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800986a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f903 	bl	8009a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	f003 0320 	and.w	r3, r3, #32
 800987c:	2b20      	cmp	r3, #32
 800987e:	d10e      	bne.n	800989e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	f003 0320 	and.w	r3, r3, #32
 800988a:	2b20      	cmp	r3, #32
 800988c:	d107      	bne.n	800989e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f06f 0220 	mvn.w	r2, #32
 8009896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fabf 	bl	8009e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800989e:	bf00      	nop
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d101      	bne.n	80098c4 <HAL_TIM_ConfigClockSource+0x1c>
 80098c0:	2302      	movs	r3, #2
 80098c2:	e0b4      	b.n	8009a2e <HAL_TIM_ConfigClockSource+0x186>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	4b56      	ldr	r3, [pc, #344]	; (8009a38 <HAL_TIM_ConfigClockSource+0x190>)
 80098e0:	4013      	ands	r3, r2
 80098e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098fc:	d03e      	beq.n	800997c <HAL_TIM_ConfigClockSource+0xd4>
 80098fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009902:	f200 8087 	bhi.w	8009a14 <HAL_TIM_ConfigClockSource+0x16c>
 8009906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800990a:	f000 8086 	beq.w	8009a1a <HAL_TIM_ConfigClockSource+0x172>
 800990e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009912:	d87f      	bhi.n	8009a14 <HAL_TIM_ConfigClockSource+0x16c>
 8009914:	2b70      	cmp	r3, #112	; 0x70
 8009916:	d01a      	beq.n	800994e <HAL_TIM_ConfigClockSource+0xa6>
 8009918:	2b70      	cmp	r3, #112	; 0x70
 800991a:	d87b      	bhi.n	8009a14 <HAL_TIM_ConfigClockSource+0x16c>
 800991c:	2b60      	cmp	r3, #96	; 0x60
 800991e:	d050      	beq.n	80099c2 <HAL_TIM_ConfigClockSource+0x11a>
 8009920:	2b60      	cmp	r3, #96	; 0x60
 8009922:	d877      	bhi.n	8009a14 <HAL_TIM_ConfigClockSource+0x16c>
 8009924:	2b50      	cmp	r3, #80	; 0x50
 8009926:	d03c      	beq.n	80099a2 <HAL_TIM_ConfigClockSource+0xfa>
 8009928:	2b50      	cmp	r3, #80	; 0x50
 800992a:	d873      	bhi.n	8009a14 <HAL_TIM_ConfigClockSource+0x16c>
 800992c:	2b40      	cmp	r3, #64	; 0x40
 800992e:	d058      	beq.n	80099e2 <HAL_TIM_ConfigClockSource+0x13a>
 8009930:	2b40      	cmp	r3, #64	; 0x40
 8009932:	d86f      	bhi.n	8009a14 <HAL_TIM_ConfigClockSource+0x16c>
 8009934:	2b30      	cmp	r3, #48	; 0x30
 8009936:	d064      	beq.n	8009a02 <HAL_TIM_ConfigClockSource+0x15a>
 8009938:	2b30      	cmp	r3, #48	; 0x30
 800993a:	d86b      	bhi.n	8009a14 <HAL_TIM_ConfigClockSource+0x16c>
 800993c:	2b20      	cmp	r3, #32
 800993e:	d060      	beq.n	8009a02 <HAL_TIM_ConfigClockSource+0x15a>
 8009940:	2b20      	cmp	r3, #32
 8009942:	d867      	bhi.n	8009a14 <HAL_TIM_ConfigClockSource+0x16c>
 8009944:	2b00      	cmp	r3, #0
 8009946:	d05c      	beq.n	8009a02 <HAL_TIM_ConfigClockSource+0x15a>
 8009948:	2b10      	cmp	r3, #16
 800994a:	d05a      	beq.n	8009a02 <HAL_TIM_ConfigClockSource+0x15a>
 800994c:	e062      	b.n	8009a14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	6899      	ldr	r1, [r3, #8]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	685a      	ldr	r2, [r3, #4]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	f000 f9af 	bl	8009cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	609a      	str	r2, [r3, #8]
      break;
 800997a:	e04f      	b.n	8009a1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6818      	ldr	r0, [r3, #0]
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	6899      	ldr	r1, [r3, #8]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	685a      	ldr	r2, [r3, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	f000 f998 	bl	8009cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	689a      	ldr	r2, [r3, #8]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800999e:	609a      	str	r2, [r3, #8]
      break;
 80099a0:	e03c      	b.n	8009a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	6859      	ldr	r1, [r3, #4]
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	461a      	mov	r2, r3
 80099b0:	f000 f90c 	bl	8009bcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2150      	movs	r1, #80	; 0x50
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 f965 	bl	8009c8a <TIM_ITRx_SetConfig>
      break;
 80099c0:	e02c      	b.n	8009a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6818      	ldr	r0, [r3, #0]
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	6859      	ldr	r1, [r3, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	461a      	mov	r2, r3
 80099d0:	f000 f92b 	bl	8009c2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2160      	movs	r1, #96	; 0x60
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 f955 	bl	8009c8a <TIM_ITRx_SetConfig>
      break;
 80099e0:	e01c      	b.n	8009a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6818      	ldr	r0, [r3, #0]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	6859      	ldr	r1, [r3, #4]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	461a      	mov	r2, r3
 80099f0:	f000 f8ec 	bl	8009bcc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2140      	movs	r1, #64	; 0x40
 80099fa:	4618      	mov	r0, r3
 80099fc:	f000 f945 	bl	8009c8a <TIM_ITRx_SetConfig>
      break;
 8009a00:	e00c      	b.n	8009a1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	f000 f93c 	bl	8009c8a <TIM_ITRx_SetConfig>
      break;
 8009a12:	e003      	b.n	8009a1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	73fb      	strb	r3, [r7, #15]
      break;
 8009a18:	e000      	b.n	8009a1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	fffeff88 	.word	0xfffeff88

08009a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b085      	sub	sp, #20
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a40      	ldr	r2, [pc, #256]	; (8009ba0 <TIM_Base_SetConfig+0x114>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d013      	beq.n	8009acc <TIM_Base_SetConfig+0x40>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aaa:	d00f      	beq.n	8009acc <TIM_Base_SetConfig+0x40>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a3d      	ldr	r2, [pc, #244]	; (8009ba4 <TIM_Base_SetConfig+0x118>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d00b      	beq.n	8009acc <TIM_Base_SetConfig+0x40>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a3c      	ldr	r2, [pc, #240]	; (8009ba8 <TIM_Base_SetConfig+0x11c>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d007      	beq.n	8009acc <TIM_Base_SetConfig+0x40>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a3b      	ldr	r2, [pc, #236]	; (8009bac <TIM_Base_SetConfig+0x120>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d003      	beq.n	8009acc <TIM_Base_SetConfig+0x40>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a3a      	ldr	r2, [pc, #232]	; (8009bb0 <TIM_Base_SetConfig+0x124>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d108      	bne.n	8009ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	4313      	orrs	r3, r2
 8009adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a2f      	ldr	r2, [pc, #188]	; (8009ba0 <TIM_Base_SetConfig+0x114>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d02b      	beq.n	8009b3e <TIM_Base_SetConfig+0xb2>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aec:	d027      	beq.n	8009b3e <TIM_Base_SetConfig+0xb2>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a2c      	ldr	r2, [pc, #176]	; (8009ba4 <TIM_Base_SetConfig+0x118>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d023      	beq.n	8009b3e <TIM_Base_SetConfig+0xb2>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a2b      	ldr	r2, [pc, #172]	; (8009ba8 <TIM_Base_SetConfig+0x11c>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d01f      	beq.n	8009b3e <TIM_Base_SetConfig+0xb2>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a2a      	ldr	r2, [pc, #168]	; (8009bac <TIM_Base_SetConfig+0x120>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d01b      	beq.n	8009b3e <TIM_Base_SetConfig+0xb2>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a29      	ldr	r2, [pc, #164]	; (8009bb0 <TIM_Base_SetConfig+0x124>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d017      	beq.n	8009b3e <TIM_Base_SetConfig+0xb2>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a28      	ldr	r2, [pc, #160]	; (8009bb4 <TIM_Base_SetConfig+0x128>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d013      	beq.n	8009b3e <TIM_Base_SetConfig+0xb2>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a27      	ldr	r2, [pc, #156]	; (8009bb8 <TIM_Base_SetConfig+0x12c>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d00f      	beq.n	8009b3e <TIM_Base_SetConfig+0xb2>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a26      	ldr	r2, [pc, #152]	; (8009bbc <TIM_Base_SetConfig+0x130>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d00b      	beq.n	8009b3e <TIM_Base_SetConfig+0xb2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a25      	ldr	r2, [pc, #148]	; (8009bc0 <TIM_Base_SetConfig+0x134>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d007      	beq.n	8009b3e <TIM_Base_SetConfig+0xb2>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a24      	ldr	r2, [pc, #144]	; (8009bc4 <TIM_Base_SetConfig+0x138>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d003      	beq.n	8009b3e <TIM_Base_SetConfig+0xb2>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a23      	ldr	r2, [pc, #140]	; (8009bc8 <TIM_Base_SetConfig+0x13c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d108      	bne.n	8009b50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a0a      	ldr	r2, [pc, #40]	; (8009ba0 <TIM_Base_SetConfig+0x114>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d003      	beq.n	8009b84 <TIM_Base_SetConfig+0xf8>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a0c      	ldr	r2, [pc, #48]	; (8009bb0 <TIM_Base_SetConfig+0x124>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d103      	bne.n	8009b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	691a      	ldr	r2, [r3, #16]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	615a      	str	r2, [r3, #20]
}
 8009b92:	bf00      	nop
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	40010000 	.word	0x40010000
 8009ba4:	40000400 	.word	0x40000400
 8009ba8:	40000800 	.word	0x40000800
 8009bac:	40000c00 	.word	0x40000c00
 8009bb0:	40010400 	.word	0x40010400
 8009bb4:	40014000 	.word	0x40014000
 8009bb8:	40014400 	.word	0x40014400
 8009bbc:	40014800 	.word	0x40014800
 8009bc0:	40001800 	.word	0x40001800
 8009bc4:	40001c00 	.word	0x40001c00
 8009bc8:	40002000 	.word	0x40002000

08009bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	f023 0201 	bic.w	r2, r3, #1
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	011b      	lsls	r3, r3, #4
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f023 030a 	bic.w	r3, r3, #10
 8009c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	697a      	ldr	r2, [r7, #20]
 8009c1c:	621a      	str	r2, [r3, #32]
}
 8009c1e:	bf00      	nop
 8009c20:	371c      	adds	r7, #28
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b087      	sub	sp, #28
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	60f8      	str	r0, [r7, #12]
 8009c32:	60b9      	str	r1, [r7, #8]
 8009c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	f023 0210 	bic.w	r2, r3, #16
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6a1b      	ldr	r3, [r3, #32]
 8009c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	031b      	lsls	r3, r3, #12
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	011b      	lsls	r3, r3, #4
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	697a      	ldr	r2, [r7, #20]
 8009c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	693a      	ldr	r2, [r7, #16]
 8009c7c:	621a      	str	r2, [r3, #32]
}
 8009c7e:	bf00      	nop
 8009c80:	371c      	adds	r7, #28
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b085      	sub	sp, #20
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	f043 0307 	orr.w	r3, r3, #7
 8009cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	609a      	str	r2, [r3, #8]
}
 8009cb4:	bf00      	nop
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
 8009ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	021a      	lsls	r2, r3, #8
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	431a      	orrs	r2, r3
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	609a      	str	r2, [r3, #8]
}
 8009cf4:	bf00      	nop
 8009cf6:	371c      	adds	r7, #28
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d101      	bne.n	8009d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d14:	2302      	movs	r3, #2
 8009d16:	e06d      	b.n	8009df4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2202      	movs	r2, #2
 8009d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a30      	ldr	r2, [pc, #192]	; (8009e00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d004      	beq.n	8009d4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a2f      	ldr	r2, [pc, #188]	; (8009e04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d108      	bne.n	8009d5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a20      	ldr	r2, [pc, #128]	; (8009e00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d022      	beq.n	8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d8a:	d01d      	beq.n	8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a1d      	ldr	r2, [pc, #116]	; (8009e08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d018      	beq.n	8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a1c      	ldr	r2, [pc, #112]	; (8009e0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d013      	beq.n	8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a1a      	ldr	r2, [pc, #104]	; (8009e10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d00e      	beq.n	8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a15      	ldr	r2, [pc, #84]	; (8009e04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d009      	beq.n	8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a16      	ldr	r2, [pc, #88]	; (8009e14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d004      	beq.n	8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a15      	ldr	r2, [pc, #84]	; (8009e18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d10c      	bne.n	8009de2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2201      	movs	r2, #1
 8009de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	40010000 	.word	0x40010000
 8009e04:	40010400 	.word	0x40010400
 8009e08:	40000400 	.word	0x40000400
 8009e0c:	40000800 	.word	0x40000800
 8009e10:	40000c00 	.word	0x40000c00
 8009e14:	40014000 	.word	0x40014000
 8009e18:	40001800 	.word	0x40001800

08009e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e040      	b.n	8009eec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d106      	bne.n	8009e80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7fa fa5e 	bl	800433c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2224      	movs	r2, #36	; 0x24
 8009e84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f022 0201 	bic.w	r2, r2, #1
 8009e94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 fb16 	bl	800a4c8 <UART_SetConfig>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d101      	bne.n	8009ea6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e022      	b.n	8009eec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fd6c 	bl	800a98c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	689a      	ldr	r2, [r3, #8]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ed2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0201 	orr.w	r2, r2, #1
 8009ee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fdf3 	bl	800aad0 <UART_CheckIdleState>
 8009eea:	4603      	mov	r3, r0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b0ba      	sub	sp, #232	; 0xe8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	69db      	ldr	r3, [r3, #28]
 8009f02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f1a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009f1e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009f22:	4013      	ands	r3, r2
 8009f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009f28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d115      	bne.n	8009f5c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f34:	f003 0320 	and.w	r3, r3, #32
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00f      	beq.n	8009f5c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f40:	f003 0320 	and.w	r3, r3, #32
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d009      	beq.n	8009f5c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 828f 	beq.w	800a470 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	4798      	blx	r3
      }
      return;
 8009f5a:	e289      	b.n	800a470 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 8117 	beq.w	800a194 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d106      	bne.n	8009f80 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009f72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009f76:	4b85      	ldr	r3, [pc, #532]	; (800a18c <HAL_UART_IRQHandler+0x298>)
 8009f78:	4013      	ands	r3, r2
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 810a 	beq.w	800a194 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f84:	f003 0301 	and.w	r3, r3, #1
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d011      	beq.n	8009fb0 <HAL_UART_IRQHandler+0xbc>
 8009f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00b      	beq.n	8009fb0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fa6:	f043 0201 	orr.w	r2, r3, #1
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fb4:	f003 0302 	and.w	r3, r3, #2
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d011      	beq.n	8009fe0 <HAL_UART_IRQHandler+0xec>
 8009fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fc0:	f003 0301 	and.w	r3, r3, #1
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00b      	beq.n	8009fe0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2202      	movs	r2, #2
 8009fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fd6:	f043 0204 	orr.w	r2, r3, #4
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fe4:	f003 0304 	and.w	r3, r3, #4
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d011      	beq.n	800a010 <HAL_UART_IRQHandler+0x11c>
 8009fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00b      	beq.n	800a010 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2204      	movs	r2, #4
 8009ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a006:	f043 0202 	orr.w	r2, r3, #2
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a014:	f003 0308 	and.w	r3, r3, #8
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d017      	beq.n	800a04c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a020:	f003 0320 	and.w	r3, r3, #32
 800a024:	2b00      	cmp	r3, #0
 800a026:	d105      	bne.n	800a034 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a02c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00b      	beq.n	800a04c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2208      	movs	r2, #8
 800a03a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a042:	f043 0208 	orr.w	r2, r3, #8
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a054:	2b00      	cmp	r3, #0
 800a056:	d012      	beq.n	800a07e <HAL_UART_IRQHandler+0x18a>
 800a058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a05c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00c      	beq.n	800a07e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a06c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a074:	f043 0220 	orr.w	r2, r3, #32
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 81f5 	beq.w	800a474 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a08a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a08e:	f003 0320 	and.w	r3, r3, #32
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00d      	beq.n	800a0b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a09a:	f003 0320 	and.w	r3, r3, #32
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d007      	beq.n	800a0b2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d003      	beq.n	800a0b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c6:	2b40      	cmp	r3, #64	; 0x40
 800a0c8:	d005      	beq.n	800a0d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a0ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d04f      	beq.n	800a176 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 fdf1 	bl	800acbe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e6:	2b40      	cmp	r3, #64	; 0x40
 800a0e8:	d141      	bne.n	800a16e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3308      	adds	r3, #8
 800a0f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0f8:	e853 3f00 	ldrex	r3, [r3]
 800a0fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	3308      	adds	r3, #8
 800a112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a116:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a11a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a126:	e841 2300 	strex	r3, r2, [r1]
 800a12a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a12e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1d9      	bne.n	800a0ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d013      	beq.n	800a166 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a142:	4a13      	ldr	r2, [pc, #76]	; (800a190 <HAL_UART_IRQHandler+0x29c>)
 800a144:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fb fa86 	bl	800565c <HAL_DMA_Abort_IT>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d017      	beq.n	800a186 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a160:	4610      	mov	r0, r2
 800a162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a164:	e00f      	b.n	800a186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f998 	bl	800a49c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a16c:	e00b      	b.n	800a186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f994 	bl	800a49c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a174:	e007      	b.n	800a186 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 f990 	bl	800a49c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a184:	e176      	b.n	800a474 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a186:	bf00      	nop
    return;
 800a188:	e174      	b.n	800a474 <HAL_UART_IRQHandler+0x580>
 800a18a:	bf00      	nop
 800a18c:	04000120 	.word	0x04000120
 800a190:	0800ad85 	.word	0x0800ad85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a198:	2b01      	cmp	r3, #1
 800a19a:	f040 8144 	bne.w	800a426 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1a2:	f003 0310 	and.w	r3, r3, #16
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 813d 	beq.w	800a426 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a1ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1b0:	f003 0310 	and.w	r3, r3, #16
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 8136 	beq.w	800a426 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2210      	movs	r2, #16
 800a1c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	689b      	ldr	r3, [r3, #8]
 800a1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1cc:	2b40      	cmp	r3, #64	; 0x40
 800a1ce:	f040 80b2 	bne.w	800a336 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a1de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f000 8148 	beq.w	800a478 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a1ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	f080 8140 	bcs.w	800a478 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a1fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a206:	69db      	ldr	r3, [r3, #28]
 800a208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a20c:	f000 8085 	beq.w	800a31a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a22c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	461a      	mov	r2, r3
 800a236:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a23a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a23e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a242:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a246:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a24a:	e841 2300 	strex	r3, r2, [r1]
 800a24e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1da      	bne.n	800a210 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	3308      	adds	r3, #8
 800a260:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a264:	e853 3f00 	ldrex	r3, [r3]
 800a268:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a26a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a26c:	f023 0301 	bic.w	r3, r3, #1
 800a270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3308      	adds	r3, #8
 800a27a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a27e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a282:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a284:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a286:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a28a:	e841 2300 	strex	r3, r2, [r1]
 800a28e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1e1      	bne.n	800a25a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	3308      	adds	r3, #8
 800a29c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2a0:	e853 3f00 	ldrex	r3, [r3]
 800a2a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a2a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3308      	adds	r3, #8
 800a2b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a2ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a2bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a2c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a2c2:	e841 2300 	strex	r3, r2, [r1]
 800a2c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a2c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1e3      	bne.n	800a296 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2220      	movs	r2, #32
 800a2d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a2e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ea:	f023 0310 	bic.w	r3, r3, #16
 800a2ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a2fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a300:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a302:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a304:	e841 2300 	strex	r3, r2, [r1]
 800a308:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a30a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e4      	bne.n	800a2da <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a314:	4618      	mov	r0, r3
 800a316:	f7fb f931 	bl	800557c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a326:	b29b      	uxth	r3, r3
 800a328:	1ad3      	subs	r3, r2, r3
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f8be 	bl	800a4b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a334:	e0a0      	b.n	800a478 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a342:	b29b      	uxth	r3, r3
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a350:	b29b      	uxth	r3, r3
 800a352:	2b00      	cmp	r3, #0
 800a354:	f000 8092 	beq.w	800a47c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800a358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	f000 808d 	beq.w	800a47c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36a:	e853 3f00 	ldrex	r3, [r3]
 800a36e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a372:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	461a      	mov	r2, r3
 800a380:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a384:	647b      	str	r3, [r7, #68]	; 0x44
 800a386:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a388:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a38a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a38c:	e841 2300 	strex	r3, r2, [r1]
 800a390:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1e4      	bne.n	800a362 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3308      	adds	r3, #8
 800a39e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	e853 3f00 	ldrex	r3, [r3]
 800a3a6:	623b      	str	r3, [r7, #32]
   return(result);
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	f023 0301 	bic.w	r3, r3, #1
 800a3ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	3308      	adds	r3, #8
 800a3b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a3bc:	633a      	str	r2, [r7, #48]	; 0x30
 800a3be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e3      	bne.n	800a398 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	e853 3f00 	ldrex	r3, [r3]
 800a3ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f023 0310 	bic.w	r3, r3, #16
 800a3f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	461a      	mov	r2, r3
 800a400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a404:	61fb      	str	r3, [r7, #28]
 800a406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a408:	69b9      	ldr	r1, [r7, #24]
 800a40a:	69fa      	ldr	r2, [r7, #28]
 800a40c:	e841 2300 	strex	r3, r2, [r1]
 800a410:	617b      	str	r3, [r7, #20]
   return(result);
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1e4      	bne.n	800a3e2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a41c:	4619      	mov	r1, r3
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f846 	bl	800a4b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a424:	e02a      	b.n	800a47c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a42a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00e      	beq.n	800a450 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d008      	beq.n	800a450 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a442:	2b00      	cmp	r3, #0
 800a444:	d01c      	beq.n	800a480 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	4798      	blx	r3
    }
    return;
 800a44e:	e017      	b.n	800a480 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d012      	beq.n	800a482 <HAL_UART_IRQHandler+0x58e>
 800a45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00c      	beq.n	800a482 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fca1 	bl	800adb0 <UART_EndTransmit_IT>
    return;
 800a46e:	e008      	b.n	800a482 <HAL_UART_IRQHandler+0x58e>
      return;
 800a470:	bf00      	nop
 800a472:	e006      	b.n	800a482 <HAL_UART_IRQHandler+0x58e>
    return;
 800a474:	bf00      	nop
 800a476:	e004      	b.n	800a482 <HAL_UART_IRQHandler+0x58e>
      return;
 800a478:	bf00      	nop
 800a47a:	e002      	b.n	800a482 <HAL_UART_IRQHandler+0x58e>
      return;
 800a47c:	bf00      	nop
 800a47e:	e000      	b.n	800a482 <HAL_UART_IRQHandler+0x58e>
    return;
 800a480:	bf00      	nop
  }

}
 800a482:	37e8      	adds	r7, #232	; 0xe8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a4bc:	bf00      	nop
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b088      	sub	sp, #32
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	689a      	ldr	r2, [r3, #8]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	695b      	ldr	r3, [r3, #20]
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	69db      	ldr	r3, [r3, #28]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	4ba7      	ldr	r3, [pc, #668]	; (800a790 <UART_SetConfig+0x2c8>)
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	6812      	ldr	r2, [r2, #0]
 800a4fa:	6979      	ldr	r1, [r7, #20]
 800a4fc:	430b      	orrs	r3, r1
 800a4fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68da      	ldr	r2, [r3, #12]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	430a      	orrs	r2, r1
 800a514:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a1b      	ldr	r3, [r3, #32]
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	4313      	orrs	r3, r2
 800a524:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	430a      	orrs	r2, r1
 800a538:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a95      	ldr	r2, [pc, #596]	; (800a794 <UART_SetConfig+0x2cc>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d120      	bne.n	800a586 <UART_SetConfig+0xbe>
 800a544:	4b94      	ldr	r3, [pc, #592]	; (800a798 <UART_SetConfig+0x2d0>)
 800a546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	2b03      	cmp	r3, #3
 800a550:	d816      	bhi.n	800a580 <UART_SetConfig+0xb8>
 800a552:	a201      	add	r2, pc, #4	; (adr r2, 800a558 <UART_SetConfig+0x90>)
 800a554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a558:	0800a569 	.word	0x0800a569
 800a55c:	0800a575 	.word	0x0800a575
 800a560:	0800a56f 	.word	0x0800a56f
 800a564:	0800a57b 	.word	0x0800a57b
 800a568:	2301      	movs	r3, #1
 800a56a:	77fb      	strb	r3, [r7, #31]
 800a56c:	e14f      	b.n	800a80e <UART_SetConfig+0x346>
 800a56e:	2302      	movs	r3, #2
 800a570:	77fb      	strb	r3, [r7, #31]
 800a572:	e14c      	b.n	800a80e <UART_SetConfig+0x346>
 800a574:	2304      	movs	r3, #4
 800a576:	77fb      	strb	r3, [r7, #31]
 800a578:	e149      	b.n	800a80e <UART_SetConfig+0x346>
 800a57a:	2308      	movs	r3, #8
 800a57c:	77fb      	strb	r3, [r7, #31]
 800a57e:	e146      	b.n	800a80e <UART_SetConfig+0x346>
 800a580:	2310      	movs	r3, #16
 800a582:	77fb      	strb	r3, [r7, #31]
 800a584:	e143      	b.n	800a80e <UART_SetConfig+0x346>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a84      	ldr	r2, [pc, #528]	; (800a79c <UART_SetConfig+0x2d4>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d132      	bne.n	800a5f6 <UART_SetConfig+0x12e>
 800a590:	4b81      	ldr	r3, [pc, #516]	; (800a798 <UART_SetConfig+0x2d0>)
 800a592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a596:	f003 030c 	and.w	r3, r3, #12
 800a59a:	2b0c      	cmp	r3, #12
 800a59c:	d828      	bhi.n	800a5f0 <UART_SetConfig+0x128>
 800a59e:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <UART_SetConfig+0xdc>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a5d9 	.word	0x0800a5d9
 800a5a8:	0800a5f1 	.word	0x0800a5f1
 800a5ac:	0800a5f1 	.word	0x0800a5f1
 800a5b0:	0800a5f1 	.word	0x0800a5f1
 800a5b4:	0800a5e5 	.word	0x0800a5e5
 800a5b8:	0800a5f1 	.word	0x0800a5f1
 800a5bc:	0800a5f1 	.word	0x0800a5f1
 800a5c0:	0800a5f1 	.word	0x0800a5f1
 800a5c4:	0800a5df 	.word	0x0800a5df
 800a5c8:	0800a5f1 	.word	0x0800a5f1
 800a5cc:	0800a5f1 	.word	0x0800a5f1
 800a5d0:	0800a5f1 	.word	0x0800a5f1
 800a5d4:	0800a5eb 	.word	0x0800a5eb
 800a5d8:	2300      	movs	r3, #0
 800a5da:	77fb      	strb	r3, [r7, #31]
 800a5dc:	e117      	b.n	800a80e <UART_SetConfig+0x346>
 800a5de:	2302      	movs	r3, #2
 800a5e0:	77fb      	strb	r3, [r7, #31]
 800a5e2:	e114      	b.n	800a80e <UART_SetConfig+0x346>
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	77fb      	strb	r3, [r7, #31]
 800a5e8:	e111      	b.n	800a80e <UART_SetConfig+0x346>
 800a5ea:	2308      	movs	r3, #8
 800a5ec:	77fb      	strb	r3, [r7, #31]
 800a5ee:	e10e      	b.n	800a80e <UART_SetConfig+0x346>
 800a5f0:	2310      	movs	r3, #16
 800a5f2:	77fb      	strb	r3, [r7, #31]
 800a5f4:	e10b      	b.n	800a80e <UART_SetConfig+0x346>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a69      	ldr	r2, [pc, #420]	; (800a7a0 <UART_SetConfig+0x2d8>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d120      	bne.n	800a642 <UART_SetConfig+0x17a>
 800a600:	4b65      	ldr	r3, [pc, #404]	; (800a798 <UART_SetConfig+0x2d0>)
 800a602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a606:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a60a:	2b30      	cmp	r3, #48	; 0x30
 800a60c:	d013      	beq.n	800a636 <UART_SetConfig+0x16e>
 800a60e:	2b30      	cmp	r3, #48	; 0x30
 800a610:	d814      	bhi.n	800a63c <UART_SetConfig+0x174>
 800a612:	2b20      	cmp	r3, #32
 800a614:	d009      	beq.n	800a62a <UART_SetConfig+0x162>
 800a616:	2b20      	cmp	r3, #32
 800a618:	d810      	bhi.n	800a63c <UART_SetConfig+0x174>
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d002      	beq.n	800a624 <UART_SetConfig+0x15c>
 800a61e:	2b10      	cmp	r3, #16
 800a620:	d006      	beq.n	800a630 <UART_SetConfig+0x168>
 800a622:	e00b      	b.n	800a63c <UART_SetConfig+0x174>
 800a624:	2300      	movs	r3, #0
 800a626:	77fb      	strb	r3, [r7, #31]
 800a628:	e0f1      	b.n	800a80e <UART_SetConfig+0x346>
 800a62a:	2302      	movs	r3, #2
 800a62c:	77fb      	strb	r3, [r7, #31]
 800a62e:	e0ee      	b.n	800a80e <UART_SetConfig+0x346>
 800a630:	2304      	movs	r3, #4
 800a632:	77fb      	strb	r3, [r7, #31]
 800a634:	e0eb      	b.n	800a80e <UART_SetConfig+0x346>
 800a636:	2308      	movs	r3, #8
 800a638:	77fb      	strb	r3, [r7, #31]
 800a63a:	e0e8      	b.n	800a80e <UART_SetConfig+0x346>
 800a63c:	2310      	movs	r3, #16
 800a63e:	77fb      	strb	r3, [r7, #31]
 800a640:	e0e5      	b.n	800a80e <UART_SetConfig+0x346>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a57      	ldr	r2, [pc, #348]	; (800a7a4 <UART_SetConfig+0x2dc>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d120      	bne.n	800a68e <UART_SetConfig+0x1c6>
 800a64c:	4b52      	ldr	r3, [pc, #328]	; (800a798 <UART_SetConfig+0x2d0>)
 800a64e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a652:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a656:	2bc0      	cmp	r3, #192	; 0xc0
 800a658:	d013      	beq.n	800a682 <UART_SetConfig+0x1ba>
 800a65a:	2bc0      	cmp	r3, #192	; 0xc0
 800a65c:	d814      	bhi.n	800a688 <UART_SetConfig+0x1c0>
 800a65e:	2b80      	cmp	r3, #128	; 0x80
 800a660:	d009      	beq.n	800a676 <UART_SetConfig+0x1ae>
 800a662:	2b80      	cmp	r3, #128	; 0x80
 800a664:	d810      	bhi.n	800a688 <UART_SetConfig+0x1c0>
 800a666:	2b00      	cmp	r3, #0
 800a668:	d002      	beq.n	800a670 <UART_SetConfig+0x1a8>
 800a66a:	2b40      	cmp	r3, #64	; 0x40
 800a66c:	d006      	beq.n	800a67c <UART_SetConfig+0x1b4>
 800a66e:	e00b      	b.n	800a688 <UART_SetConfig+0x1c0>
 800a670:	2300      	movs	r3, #0
 800a672:	77fb      	strb	r3, [r7, #31]
 800a674:	e0cb      	b.n	800a80e <UART_SetConfig+0x346>
 800a676:	2302      	movs	r3, #2
 800a678:	77fb      	strb	r3, [r7, #31]
 800a67a:	e0c8      	b.n	800a80e <UART_SetConfig+0x346>
 800a67c:	2304      	movs	r3, #4
 800a67e:	77fb      	strb	r3, [r7, #31]
 800a680:	e0c5      	b.n	800a80e <UART_SetConfig+0x346>
 800a682:	2308      	movs	r3, #8
 800a684:	77fb      	strb	r3, [r7, #31]
 800a686:	e0c2      	b.n	800a80e <UART_SetConfig+0x346>
 800a688:	2310      	movs	r3, #16
 800a68a:	77fb      	strb	r3, [r7, #31]
 800a68c:	e0bf      	b.n	800a80e <UART_SetConfig+0x346>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a45      	ldr	r2, [pc, #276]	; (800a7a8 <UART_SetConfig+0x2e0>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d125      	bne.n	800a6e4 <UART_SetConfig+0x21c>
 800a698:	4b3f      	ldr	r3, [pc, #252]	; (800a798 <UART_SetConfig+0x2d0>)
 800a69a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a69e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6a6:	d017      	beq.n	800a6d8 <UART_SetConfig+0x210>
 800a6a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6ac:	d817      	bhi.n	800a6de <UART_SetConfig+0x216>
 800a6ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6b2:	d00b      	beq.n	800a6cc <UART_SetConfig+0x204>
 800a6b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6b8:	d811      	bhi.n	800a6de <UART_SetConfig+0x216>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d003      	beq.n	800a6c6 <UART_SetConfig+0x1fe>
 800a6be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6c2:	d006      	beq.n	800a6d2 <UART_SetConfig+0x20a>
 800a6c4:	e00b      	b.n	800a6de <UART_SetConfig+0x216>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	77fb      	strb	r3, [r7, #31]
 800a6ca:	e0a0      	b.n	800a80e <UART_SetConfig+0x346>
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	77fb      	strb	r3, [r7, #31]
 800a6d0:	e09d      	b.n	800a80e <UART_SetConfig+0x346>
 800a6d2:	2304      	movs	r3, #4
 800a6d4:	77fb      	strb	r3, [r7, #31]
 800a6d6:	e09a      	b.n	800a80e <UART_SetConfig+0x346>
 800a6d8:	2308      	movs	r3, #8
 800a6da:	77fb      	strb	r3, [r7, #31]
 800a6dc:	e097      	b.n	800a80e <UART_SetConfig+0x346>
 800a6de:	2310      	movs	r3, #16
 800a6e0:	77fb      	strb	r3, [r7, #31]
 800a6e2:	e094      	b.n	800a80e <UART_SetConfig+0x346>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a30      	ldr	r2, [pc, #192]	; (800a7ac <UART_SetConfig+0x2e4>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d125      	bne.n	800a73a <UART_SetConfig+0x272>
 800a6ee:	4b2a      	ldr	r3, [pc, #168]	; (800a798 <UART_SetConfig+0x2d0>)
 800a6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a6f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a6fc:	d017      	beq.n	800a72e <UART_SetConfig+0x266>
 800a6fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a702:	d817      	bhi.n	800a734 <UART_SetConfig+0x26c>
 800a704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a708:	d00b      	beq.n	800a722 <UART_SetConfig+0x25a>
 800a70a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a70e:	d811      	bhi.n	800a734 <UART_SetConfig+0x26c>
 800a710:	2b00      	cmp	r3, #0
 800a712:	d003      	beq.n	800a71c <UART_SetConfig+0x254>
 800a714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a718:	d006      	beq.n	800a728 <UART_SetConfig+0x260>
 800a71a:	e00b      	b.n	800a734 <UART_SetConfig+0x26c>
 800a71c:	2301      	movs	r3, #1
 800a71e:	77fb      	strb	r3, [r7, #31]
 800a720:	e075      	b.n	800a80e <UART_SetConfig+0x346>
 800a722:	2302      	movs	r3, #2
 800a724:	77fb      	strb	r3, [r7, #31]
 800a726:	e072      	b.n	800a80e <UART_SetConfig+0x346>
 800a728:	2304      	movs	r3, #4
 800a72a:	77fb      	strb	r3, [r7, #31]
 800a72c:	e06f      	b.n	800a80e <UART_SetConfig+0x346>
 800a72e:	2308      	movs	r3, #8
 800a730:	77fb      	strb	r3, [r7, #31]
 800a732:	e06c      	b.n	800a80e <UART_SetConfig+0x346>
 800a734:	2310      	movs	r3, #16
 800a736:	77fb      	strb	r3, [r7, #31]
 800a738:	e069      	b.n	800a80e <UART_SetConfig+0x346>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1c      	ldr	r2, [pc, #112]	; (800a7b0 <UART_SetConfig+0x2e8>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d137      	bne.n	800a7b4 <UART_SetConfig+0x2ec>
 800a744:	4b14      	ldr	r3, [pc, #80]	; (800a798 <UART_SetConfig+0x2d0>)
 800a746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a74a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a74e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a752:	d017      	beq.n	800a784 <UART_SetConfig+0x2bc>
 800a754:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a758:	d817      	bhi.n	800a78a <UART_SetConfig+0x2c2>
 800a75a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a75e:	d00b      	beq.n	800a778 <UART_SetConfig+0x2b0>
 800a760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a764:	d811      	bhi.n	800a78a <UART_SetConfig+0x2c2>
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <UART_SetConfig+0x2aa>
 800a76a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a76e:	d006      	beq.n	800a77e <UART_SetConfig+0x2b6>
 800a770:	e00b      	b.n	800a78a <UART_SetConfig+0x2c2>
 800a772:	2300      	movs	r3, #0
 800a774:	77fb      	strb	r3, [r7, #31]
 800a776:	e04a      	b.n	800a80e <UART_SetConfig+0x346>
 800a778:	2302      	movs	r3, #2
 800a77a:	77fb      	strb	r3, [r7, #31]
 800a77c:	e047      	b.n	800a80e <UART_SetConfig+0x346>
 800a77e:	2304      	movs	r3, #4
 800a780:	77fb      	strb	r3, [r7, #31]
 800a782:	e044      	b.n	800a80e <UART_SetConfig+0x346>
 800a784:	2308      	movs	r3, #8
 800a786:	77fb      	strb	r3, [r7, #31]
 800a788:	e041      	b.n	800a80e <UART_SetConfig+0x346>
 800a78a:	2310      	movs	r3, #16
 800a78c:	77fb      	strb	r3, [r7, #31]
 800a78e:	e03e      	b.n	800a80e <UART_SetConfig+0x346>
 800a790:	efff69f3 	.word	0xefff69f3
 800a794:	40011000 	.word	0x40011000
 800a798:	40023800 	.word	0x40023800
 800a79c:	40004400 	.word	0x40004400
 800a7a0:	40004800 	.word	0x40004800
 800a7a4:	40004c00 	.word	0x40004c00
 800a7a8:	40005000 	.word	0x40005000
 800a7ac:	40011400 	.word	0x40011400
 800a7b0:	40007800 	.word	0x40007800
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a71      	ldr	r2, [pc, #452]	; (800a980 <UART_SetConfig+0x4b8>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d125      	bne.n	800a80a <UART_SetConfig+0x342>
 800a7be:	4b71      	ldr	r3, [pc, #452]	; (800a984 <UART_SetConfig+0x4bc>)
 800a7c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a7c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a7cc:	d017      	beq.n	800a7fe <UART_SetConfig+0x336>
 800a7ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a7d2:	d817      	bhi.n	800a804 <UART_SetConfig+0x33c>
 800a7d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7d8:	d00b      	beq.n	800a7f2 <UART_SetConfig+0x32a>
 800a7da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7de:	d811      	bhi.n	800a804 <UART_SetConfig+0x33c>
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d003      	beq.n	800a7ec <UART_SetConfig+0x324>
 800a7e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7e8:	d006      	beq.n	800a7f8 <UART_SetConfig+0x330>
 800a7ea:	e00b      	b.n	800a804 <UART_SetConfig+0x33c>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	77fb      	strb	r3, [r7, #31]
 800a7f0:	e00d      	b.n	800a80e <UART_SetConfig+0x346>
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	77fb      	strb	r3, [r7, #31]
 800a7f6:	e00a      	b.n	800a80e <UART_SetConfig+0x346>
 800a7f8:	2304      	movs	r3, #4
 800a7fa:	77fb      	strb	r3, [r7, #31]
 800a7fc:	e007      	b.n	800a80e <UART_SetConfig+0x346>
 800a7fe:	2308      	movs	r3, #8
 800a800:	77fb      	strb	r3, [r7, #31]
 800a802:	e004      	b.n	800a80e <UART_SetConfig+0x346>
 800a804:	2310      	movs	r3, #16
 800a806:	77fb      	strb	r3, [r7, #31]
 800a808:	e001      	b.n	800a80e <UART_SetConfig+0x346>
 800a80a:	2310      	movs	r3, #16
 800a80c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	69db      	ldr	r3, [r3, #28]
 800a812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a816:	d15a      	bne.n	800a8ce <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800a818:	7ffb      	ldrb	r3, [r7, #31]
 800a81a:	2b08      	cmp	r3, #8
 800a81c:	d827      	bhi.n	800a86e <UART_SetConfig+0x3a6>
 800a81e:	a201      	add	r2, pc, #4	; (adr r2, 800a824 <UART_SetConfig+0x35c>)
 800a820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a824:	0800a849 	.word	0x0800a849
 800a828:	0800a851 	.word	0x0800a851
 800a82c:	0800a859 	.word	0x0800a859
 800a830:	0800a86f 	.word	0x0800a86f
 800a834:	0800a85f 	.word	0x0800a85f
 800a838:	0800a86f 	.word	0x0800a86f
 800a83c:	0800a86f 	.word	0x0800a86f
 800a840:	0800a86f 	.word	0x0800a86f
 800a844:	0800a867 	.word	0x0800a867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a848:	f7fd fce0 	bl	800820c <HAL_RCC_GetPCLK1Freq>
 800a84c:	61b8      	str	r0, [r7, #24]
        break;
 800a84e:	e013      	b.n	800a878 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a850:	f7fd fcf0 	bl	8008234 <HAL_RCC_GetPCLK2Freq>
 800a854:	61b8      	str	r0, [r7, #24]
        break;
 800a856:	e00f      	b.n	800a878 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a858:	4b4b      	ldr	r3, [pc, #300]	; (800a988 <UART_SetConfig+0x4c0>)
 800a85a:	61bb      	str	r3, [r7, #24]
        break;
 800a85c:	e00c      	b.n	800a878 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a85e:	f7fd fc13 	bl	8008088 <HAL_RCC_GetSysClockFreq>
 800a862:	61b8      	str	r0, [r7, #24]
        break;
 800a864:	e008      	b.n	800a878 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a86a:	61bb      	str	r3, [r7, #24]
        break;
 800a86c:	e004      	b.n	800a878 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	77bb      	strb	r3, [r7, #30]
        break;
 800a876:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d074      	beq.n	800a968 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	005a      	lsls	r2, r3, #1
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	085b      	lsrs	r3, r3, #1
 800a888:	441a      	add	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a892:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	2b0f      	cmp	r3, #15
 800a898:	d916      	bls.n	800a8c8 <UART_SetConfig+0x400>
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8a0:	d212      	bcs.n	800a8c8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	f023 030f 	bic.w	r3, r3, #15
 800a8aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	085b      	lsrs	r3, r3, #1
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	f003 0307 	and.w	r3, r3, #7
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	89fb      	ldrh	r3, [r7, #14]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	89fa      	ldrh	r2, [r7, #14]
 800a8c4:	60da      	str	r2, [r3, #12]
 800a8c6:	e04f      	b.n	800a968 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	77bb      	strb	r3, [r7, #30]
 800a8cc:	e04c      	b.n	800a968 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a8ce:	7ffb      	ldrb	r3, [r7, #31]
 800a8d0:	2b08      	cmp	r3, #8
 800a8d2:	d828      	bhi.n	800a926 <UART_SetConfig+0x45e>
 800a8d4:	a201      	add	r2, pc, #4	; (adr r2, 800a8dc <UART_SetConfig+0x414>)
 800a8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8da:	bf00      	nop
 800a8dc:	0800a901 	.word	0x0800a901
 800a8e0:	0800a909 	.word	0x0800a909
 800a8e4:	0800a911 	.word	0x0800a911
 800a8e8:	0800a927 	.word	0x0800a927
 800a8ec:	0800a917 	.word	0x0800a917
 800a8f0:	0800a927 	.word	0x0800a927
 800a8f4:	0800a927 	.word	0x0800a927
 800a8f8:	0800a927 	.word	0x0800a927
 800a8fc:	0800a91f 	.word	0x0800a91f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a900:	f7fd fc84 	bl	800820c <HAL_RCC_GetPCLK1Freq>
 800a904:	61b8      	str	r0, [r7, #24]
        break;
 800a906:	e013      	b.n	800a930 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a908:	f7fd fc94 	bl	8008234 <HAL_RCC_GetPCLK2Freq>
 800a90c:	61b8      	str	r0, [r7, #24]
        break;
 800a90e:	e00f      	b.n	800a930 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a910:	4b1d      	ldr	r3, [pc, #116]	; (800a988 <UART_SetConfig+0x4c0>)
 800a912:	61bb      	str	r3, [r7, #24]
        break;
 800a914:	e00c      	b.n	800a930 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a916:	f7fd fbb7 	bl	8008088 <HAL_RCC_GetSysClockFreq>
 800a91a:	61b8      	str	r0, [r7, #24]
        break;
 800a91c:	e008      	b.n	800a930 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a91e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a922:	61bb      	str	r3, [r7, #24]
        break;
 800a924:	e004      	b.n	800a930 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a926:	2300      	movs	r3, #0
 800a928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	77bb      	strb	r3, [r7, #30]
        break;
 800a92e:	bf00      	nop
    }

    if (pclk != 0U)
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d018      	beq.n	800a968 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	085a      	lsrs	r2, r3, #1
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	441a      	add	r2, r3
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	fbb2 f3f3 	udiv	r3, r2, r3
 800a948:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	2b0f      	cmp	r3, #15
 800a94e:	d909      	bls.n	800a964 <UART_SetConfig+0x49c>
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a956:	d205      	bcs.n	800a964 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	60da      	str	r2, [r3, #12]
 800a962:	e001      	b.n	800a968 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2200      	movs	r2, #0
 800a972:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a974:	7fbb      	ldrb	r3, [r7, #30]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3720      	adds	r7, #32
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	40007c00 	.word	0x40007c00
 800a984:	40023800 	.word	0x40023800
 800a988:	00f42400 	.word	0x00f42400

0800a98c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00a      	beq.n	800a9b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	430a      	orrs	r2, r1
 800a9b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ba:	f003 0302 	and.w	r3, r3, #2
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00a      	beq.n	800a9d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	430a      	orrs	r2, r1
 800a9d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9dc:	f003 0304 	and.w	r3, r3, #4
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00a      	beq.n	800a9fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	430a      	orrs	r2, r1
 800a9f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	f003 0308 	and.w	r3, r3, #8
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00a      	beq.n	800aa1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	430a      	orrs	r2, r1
 800aa1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	f003 0310 	and.w	r3, r3, #16
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00a      	beq.n	800aa3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	430a      	orrs	r2, r1
 800aa3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa42:	f003 0320 	and.w	r3, r3, #32
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00a      	beq.n	800aa60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	430a      	orrs	r2, r1
 800aa5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d01a      	beq.n	800aaa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	430a      	orrs	r2, r1
 800aa80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa8a:	d10a      	bne.n	800aaa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	430a      	orrs	r2, r1
 800aaa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00a      	beq.n	800aac4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	430a      	orrs	r2, r1
 800aac2:	605a      	str	r2, [r3, #4]
  }
}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af02      	add	r7, sp, #8
 800aad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aae0:	f7f9 feec 	bl	80048bc <HAL_GetTick>
 800aae4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f003 0308 	and.w	r3, r3, #8
 800aaf0:	2b08      	cmp	r3, #8
 800aaf2:	d10e      	bne.n	800ab12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f817 	bl	800ab36 <UART_WaitOnFlagUntilTimeout>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d001      	beq.n	800ab12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e00d      	b.n	800ab2e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2220      	movs	r2, #32
 800ab16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2220      	movs	r2, #32
 800ab1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b09c      	sub	sp, #112	; 0x70
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	60f8      	str	r0, [r7, #12]
 800ab3e:	60b9      	str	r1, [r7, #8]
 800ab40:	603b      	str	r3, [r7, #0]
 800ab42:	4613      	mov	r3, r2
 800ab44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab46:	e0a5      	b.n	800ac94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab4e:	f000 80a1 	beq.w	800ac94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab52:	f7f9 feb3 	bl	80048bc <HAL_GetTick>
 800ab56:	4602      	mov	r2, r0
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	1ad3      	subs	r3, r2, r3
 800ab5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d302      	bcc.n	800ab68 <UART_WaitOnFlagUntilTimeout+0x32>
 800ab62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d13e      	bne.n	800abe6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab70:	e853 3f00 	ldrex	r3, [r3]
 800ab74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ab76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab7c:	667b      	str	r3, [r7, #100]	; 0x64
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	461a      	mov	r2, r3
 800ab84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ab94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1e6      	bne.n	800ab68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3308      	adds	r3, #8
 800aba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aba4:	e853 3f00 	ldrex	r3, [r3]
 800aba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abac:	f023 0301 	bic.w	r3, r3, #1
 800abb0:	663b      	str	r3, [r7, #96]	; 0x60
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3308      	adds	r3, #8
 800abb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abba:	64ba      	str	r2, [r7, #72]	; 0x48
 800abbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800abc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800abc2:	e841 2300 	strex	r3, r2, [r1]
 800abc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800abc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1e5      	bne.n	800ab9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2220      	movs	r2, #32
 800abd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2220      	movs	r2, #32
 800abd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800abe2:	2303      	movs	r3, #3
 800abe4:	e067      	b.n	800acb6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f003 0304 	and.w	r3, r3, #4
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d04f      	beq.n	800ac94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac02:	d147      	bne.n	800ac94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac16:	e853 3f00 	ldrex	r3, [r3]
 800ac1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac22:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac2c:	637b      	str	r3, [r7, #52]	; 0x34
 800ac2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac34:	e841 2300 	strex	r3, r2, [r1]
 800ac38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1e6      	bne.n	800ac0e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	3308      	adds	r3, #8
 800ac46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	e853 3f00 	ldrex	r3, [r3]
 800ac4e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	f023 0301 	bic.w	r3, r3, #1
 800ac56:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3308      	adds	r3, #8
 800ac5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac60:	623a      	str	r2, [r7, #32]
 800ac62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac64:	69f9      	ldr	r1, [r7, #28]
 800ac66:	6a3a      	ldr	r2, [r7, #32]
 800ac68:	e841 2300 	strex	r3, r2, [r1]
 800ac6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1e5      	bne.n	800ac40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2220      	movs	r2, #32
 800ac78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2220      	movs	r2, #32
 800ac7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2220      	movs	r2, #32
 800ac84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ac90:	2303      	movs	r3, #3
 800ac92:	e010      	b.n	800acb6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	69da      	ldr	r2, [r3, #28]
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	68ba      	ldr	r2, [r7, #8]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	bf0c      	ite	eq
 800aca4:	2301      	moveq	r3, #1
 800aca6:	2300      	movne	r3, #0
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	461a      	mov	r2, r3
 800acac:	79fb      	ldrb	r3, [r7, #7]
 800acae:	429a      	cmp	r2, r3
 800acb0:	f43f af4a 	beq.w	800ab48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3770      	adds	r7, #112	; 0x70
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b095      	sub	sp, #84	; 0x54
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800accc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acce:	e853 3f00 	ldrex	r3, [r3]
 800acd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800acd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acda:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	461a      	mov	r2, r3
 800ace2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ace4:	643b      	str	r3, [r7, #64]	; 0x40
 800ace6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800acea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acec:	e841 2300 	strex	r3, r2, [r1]
 800acf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800acf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1e6      	bne.n	800acc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3308      	adds	r3, #8
 800acfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad00:	6a3b      	ldr	r3, [r7, #32]
 800ad02:	e853 3f00 	ldrex	r3, [r3]
 800ad06:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	f023 0301 	bic.w	r3, r3, #1
 800ad0e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	3308      	adds	r3, #8
 800ad16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad18:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad20:	e841 2300 	strex	r3, r2, [r1]
 800ad24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1e5      	bne.n	800acf8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d118      	bne.n	800ad66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	e853 3f00 	ldrex	r3, [r3]
 800ad40:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	f023 0310 	bic.w	r3, r3, #16
 800ad48:	647b      	str	r3, [r7, #68]	; 0x44
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad52:	61bb      	str	r3, [r7, #24]
 800ad54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad56:	6979      	ldr	r1, [r7, #20]
 800ad58:	69ba      	ldr	r2, [r7, #24]
 800ad5a:	e841 2300 	strex	r3, r2, [r1]
 800ad5e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1e6      	bne.n	800ad34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2220      	movs	r2, #32
 800ad6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ad78:	bf00      	nop
 800ad7a:	3754      	adds	r7, #84	; 0x54
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f7ff fb7a 	bl	800a49c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ada8:	bf00      	nop
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	e853 3f00 	ldrex	r3, [r3]
 800adc4:	60bb      	str	r3, [r7, #8]
   return(result);
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adcc:	61fb      	str	r3, [r7, #28]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	461a      	mov	r2, r3
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	61bb      	str	r3, [r7, #24]
 800add8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adda:	6979      	ldr	r1, [r7, #20]
 800addc:	69ba      	ldr	r2, [r7, #24]
 800adde:	e841 2300 	strex	r3, r2, [r1]
 800ade2:	613b      	str	r3, [r7, #16]
   return(result);
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1e6      	bne.n	800adb8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2220      	movs	r2, #32
 800adee:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7ff fb46 	bl	800a488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adfc:	bf00      	nop
 800adfe:	3720      	adds	r7, #32
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d121      	bne.n	800ae5a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	4b27      	ldr	r3, [pc, #156]	; (800aeb8 <FMC_SDRAM_Init+0xb4>)
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	683a      	ldr	r2, [r7, #0]
 800ae20:	6851      	ldr	r1, [r2, #4]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	6892      	ldr	r2, [r2, #8]
 800ae26:	4311      	orrs	r1, r2
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	68d2      	ldr	r2, [r2, #12]
 800ae2c:	4311      	orrs	r1, r2
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	6912      	ldr	r2, [r2, #16]
 800ae32:	4311      	orrs	r1, r2
 800ae34:	683a      	ldr	r2, [r7, #0]
 800ae36:	6952      	ldr	r2, [r2, #20]
 800ae38:	4311      	orrs	r1, r2
 800ae3a:	683a      	ldr	r2, [r7, #0]
 800ae3c:	6992      	ldr	r2, [r2, #24]
 800ae3e:	4311      	orrs	r1, r2
 800ae40:	683a      	ldr	r2, [r7, #0]
 800ae42:	69d2      	ldr	r2, [r2, #28]
 800ae44:	4311      	orrs	r1, r2
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	6a12      	ldr	r2, [r2, #32]
 800ae4a:	4311      	orrs	r1, r2
 800ae4c:	683a      	ldr	r2, [r7, #0]
 800ae4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae50:	430a      	orrs	r2, r1
 800ae52:	431a      	orrs	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	e026      	b.n	800aea8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	69d9      	ldr	r1, [r3, #28]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	4319      	orrs	r1, r3
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae70:	430b      	orrs	r3, r1
 800ae72:	431a      	orrs	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	4b0e      	ldr	r3, [pc, #56]	; (800aeb8 <FMC_SDRAM_Init+0xb4>)
 800ae7e:	4013      	ands	r3, r2
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	6851      	ldr	r1, [r2, #4]
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	6892      	ldr	r2, [r2, #8]
 800ae88:	4311      	orrs	r1, r2
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	68d2      	ldr	r2, [r2, #12]
 800ae8e:	4311      	orrs	r1, r2
 800ae90:	683a      	ldr	r2, [r7, #0]
 800ae92:	6912      	ldr	r2, [r2, #16]
 800ae94:	4311      	orrs	r1, r2
 800ae96:	683a      	ldr	r2, [r7, #0]
 800ae98:	6952      	ldr	r2, [r2, #20]
 800ae9a:	4311      	orrs	r1, r2
 800ae9c:	683a      	ldr	r2, [r7, #0]
 800ae9e:	6992      	ldr	r2, [r2, #24]
 800aea0:	430a      	orrs	r2, r1
 800aea2:	431a      	orrs	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	ffff8000 	.word	0xffff8000

0800aebc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d128      	bne.n	800af20 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	1e59      	subs	r1, r3, #1
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	3b01      	subs	r3, #1
 800aee2:	011b      	lsls	r3, r3, #4
 800aee4:	4319      	orrs	r1, r3
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	021b      	lsls	r3, r3, #8
 800aeee:	4319      	orrs	r1, r3
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	3b01      	subs	r3, #1
 800aef6:	031b      	lsls	r3, r3, #12
 800aef8:	4319      	orrs	r1, r3
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	3b01      	subs	r3, #1
 800af00:	041b      	lsls	r3, r3, #16
 800af02:	4319      	orrs	r1, r3
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	695b      	ldr	r3, [r3, #20]
 800af08:	3b01      	subs	r3, #1
 800af0a:	051b      	lsls	r3, r3, #20
 800af0c:	4319      	orrs	r1, r3
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	3b01      	subs	r3, #1
 800af14:	061b      	lsls	r3, r3, #24
 800af16:	430b      	orrs	r3, r1
 800af18:	431a      	orrs	r2, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	609a      	str	r2, [r3, #8]
 800af1e:	e02d      	b.n	800af7c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	689a      	ldr	r2, [r3, #8]
 800af24:	4b19      	ldr	r3, [pc, #100]	; (800af8c <FMC_SDRAM_Timing_Init+0xd0>)
 800af26:	4013      	ands	r3, r2
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	68d2      	ldr	r2, [r2, #12]
 800af2c:	3a01      	subs	r2, #1
 800af2e:	0311      	lsls	r1, r2, #12
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	6952      	ldr	r2, [r2, #20]
 800af34:	3a01      	subs	r2, #1
 800af36:	0512      	lsls	r2, r2, #20
 800af38:	430a      	orrs	r2, r1
 800af3a:	431a      	orrs	r2, r3
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	1e59      	subs	r1, r3, #1
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	3b01      	subs	r3, #1
 800af54:	011b      	lsls	r3, r3, #4
 800af56:	4319      	orrs	r1, r3
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	3b01      	subs	r3, #1
 800af5e:	021b      	lsls	r3, r3, #8
 800af60:	4319      	orrs	r1, r3
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	3b01      	subs	r3, #1
 800af68:	041b      	lsls	r3, r3, #16
 800af6a:	4319      	orrs	r1, r3
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	699b      	ldr	r3, [r3, #24]
 800af70:	3b01      	subs	r3, #1
 800af72:	061b      	lsls	r3, r3, #24
 800af74:	430b      	orrs	r3, r1
 800af76:	431a      	orrs	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	ff0f0fff 	.word	0xff0f0fff

0800af90 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800af90:	b480      	push	{r7}
 800af92:	b085      	sub	sp, #20
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	691a      	ldr	r2, [r3, #16]
 800afa0:	4b0c      	ldr	r3, [pc, #48]	; (800afd4 <FMC_SDRAM_SendCommand+0x44>)
 800afa2:	4013      	ands	r3, r2
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	6811      	ldr	r1, [r2, #0]
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	6852      	ldr	r2, [r2, #4]
 800afac:	4311      	orrs	r1, r2
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	6892      	ldr	r2, [r2, #8]
 800afb2:	3a01      	subs	r2, #1
 800afb4:	0152      	lsls	r2, r2, #5
 800afb6:	4311      	orrs	r1, r2
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	68d2      	ldr	r2, [r2, #12]
 800afbc:	0252      	lsls	r2, r2, #9
 800afbe:	430a      	orrs	r2, r1
 800afc0:	431a      	orrs	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3714      	adds	r7, #20
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr
 800afd4:	ffc00000 	.word	0xffc00000

0800afd8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	695a      	ldr	r2, [r3, #20]
 800afe6:	4b07      	ldr	r3, [pc, #28]	; (800b004 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800afe8:	4013      	ands	r3, r2
 800afea:	683a      	ldr	r2, [r7, #0]
 800afec:	0052      	lsls	r2, r2, #1
 800afee:	431a      	orrs	r2, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	ffffc001 	.word	0xffffc001

0800b008 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b008:	b480      	push	{r7}
 800b00a:	b085      	sub	sp, #20
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	4603      	mov	r3, r0
 800b010:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b012:	2300      	movs	r3, #0
 800b014:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b01a:	2b84      	cmp	r3, #132	; 0x84
 800b01c:	d005      	beq.n	800b02a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b01e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	4413      	add	r3, r2
 800b026:	3303      	adds	r3, #3
 800b028:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b02a:	68fb      	ldr	r3, [r7, #12]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3714      	adds	r7, #20
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b03c:	f001 f8c6 	bl	800c1cc <vTaskStartScheduler>
  
  return osOK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	bd80      	pop	{r7, pc}

0800b046 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b046:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b048:	b089      	sub	sp, #36	; 0x24
 800b04a:	af04      	add	r7, sp, #16
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d020      	beq.n	800b09a <osThreadCreate+0x54>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	699b      	ldr	r3, [r3, #24]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d01c      	beq.n	800b09a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685c      	ldr	r4, [r3, #4]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681d      	ldr	r5, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	691e      	ldr	r6, [r3, #16]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b072:	4618      	mov	r0, r3
 800b074:	f7ff ffc8 	bl	800b008 <makeFreeRtosPriority>
 800b078:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b082:	9202      	str	r2, [sp, #8]
 800b084:	9301      	str	r3, [sp, #4]
 800b086:	9100      	str	r1, [sp, #0]
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	4632      	mov	r2, r6
 800b08c:	4629      	mov	r1, r5
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 fd9e 	bl	800bbd0 <xTaskCreateStatic>
 800b094:	4603      	mov	r3, r0
 800b096:	60fb      	str	r3, [r7, #12]
 800b098:	e01c      	b.n	800b0d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685c      	ldr	r4, [r3, #4]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b0a6:	b29e      	uxth	r6, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7ff ffaa 	bl	800b008 <makeFreeRtosPriority>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	f107 030c 	add.w	r3, r7, #12
 800b0ba:	9301      	str	r3, [sp, #4]
 800b0bc:	9200      	str	r2, [sp, #0]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	4632      	mov	r2, r6
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	f000 fde6 	bl	800bc96 <xTaskCreate>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d001      	beq.n	800b0d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	e000      	b.n	800b0d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b0de <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b0de:	b590      	push	{r4, r7, lr}
 800b0e0:	b085      	sub	sp, #20
 800b0e2:	af02      	add	r7, sp, #8
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d011      	beq.n	800b114 <osMessageCreate+0x36>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	68db      	ldr	r3, [r3, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00d      	beq.n	800b114 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6818      	ldr	r0, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6859      	ldr	r1, [r3, #4]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	689a      	ldr	r2, [r3, #8]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	2400      	movs	r4, #0
 800b10a:	9400      	str	r4, [sp, #0]
 800b10c:	f000 f92e 	bl	800b36c <xQueueGenericCreateStatic>
 800b110:	4603      	mov	r3, r0
 800b112:	e008      	b.n	800b126 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6818      	ldr	r0, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	2200      	movs	r2, #0
 800b11e:	4619      	mov	r1, r3
 800b120:	f000 f9a6 	bl	800b470 <xQueueGenericCreate>
 800b124:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b126:	4618      	mov	r0, r3
 800b128:	370c      	adds	r7, #12
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd90      	pop	{r4, r7, pc}

0800b12e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b12e:	b480      	push	{r7}
 800b130:	b083      	sub	sp, #12
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f103 0208 	add.w	r2, r3, #8
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f04f 32ff 	mov.w	r2, #4294967295
 800b146:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f103 0208 	add.w	r2, r3, #8
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f103 0208 	add.w	r2, r3, #8
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b162:	bf00      	nop
 800b164:	370c      	adds	r7, #12
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr

0800b16e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b16e:	b480      	push	{r7}
 800b170:	b083      	sub	sp, #12
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	689a      	ldr	r2, [r3, #8]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	683a      	ldr	r2, [r7, #0]
 800b1ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	1c5a      	adds	r2, r3, #1
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	601a      	str	r2, [r3, #0]
}
 800b1c4:	bf00      	nop
 800b1c6:	3714      	adds	r7, #20
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr

0800b1d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b085      	sub	sp, #20
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e6:	d103      	bne.n	800b1f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	60fb      	str	r3, [r7, #12]
 800b1ee:	e00c      	b.n	800b20a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	3308      	adds	r3, #8
 800b1f4:	60fb      	str	r3, [r7, #12]
 800b1f6:	e002      	b.n	800b1fe <vListInsert+0x2e>
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	60fb      	str	r3, [r7, #12]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	429a      	cmp	r2, r3
 800b208:	d2f6      	bcs.n	800b1f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	601a      	str	r2, [r3, #0]
}
 800b236:	bf00      	nop
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b242:	b480      	push	{r7}
 800b244:	b085      	sub	sp, #20
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	6892      	ldr	r2, [r2, #8]
 800b258:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	6852      	ldr	r2, [r2, #4]
 800b262:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d103      	bne.n	800b276 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	689a      	ldr	r2, [r3, #8]
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	1e5a      	subs	r2, r3, #1
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
	...

0800b298 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d10c      	bne.n	800b2c6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b0:	b672      	cpsid	i
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	b662      	cpsie	i
 800b2c0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b2c2:	bf00      	nop
 800b2c4:	e7fe      	b.n	800b2c4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b2c6:	f001 fef1 	bl	800d0ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2d2:	68f9      	ldr	r1, [r7, #12]
 800b2d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2d6:	fb01 f303 	mul.w	r3, r1, r3
 800b2da:	441a      	add	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	68f9      	ldr	r1, [r7, #12]
 800b2fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b2fc:	fb01 f303 	mul.w	r3, r1, r3
 800b300:	441a      	add	r2, r3
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	22ff      	movs	r2, #255	; 0xff
 800b30a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	22ff      	movs	r2, #255	; 0xff
 800b312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d114      	bne.n	800b346 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d01a      	beq.n	800b35a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	3310      	adds	r3, #16
 800b328:	4618      	mov	r0, r3
 800b32a:	f001 f9ad 	bl	800c688 <xTaskRemoveFromEventList>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d012      	beq.n	800b35a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b334:	4b0c      	ldr	r3, [pc, #48]	; (800b368 <xQueueGenericReset+0xd0>)
 800b336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b33a:	601a      	str	r2, [r3, #0]
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	f3bf 8f6f 	isb	sy
 800b344:	e009      	b.n	800b35a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3310      	adds	r3, #16
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7ff feef 	bl	800b12e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	3324      	adds	r3, #36	; 0x24
 800b354:	4618      	mov	r0, r3
 800b356:	f7ff feea 	bl	800b12e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b35a:	f001 fedb 	bl	800d114 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b35e:	2301      	movs	r3, #1
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	e000ed04 	.word	0xe000ed04

0800b36c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b08e      	sub	sp, #56	; 0x38
 800b370:	af02      	add	r7, sp, #8
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
 800b378:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10c      	bne.n	800b39a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	b672      	cpsid	i
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	b662      	cpsie	i
 800b394:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b396:	bf00      	nop
 800b398:	e7fe      	b.n	800b398 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10c      	bne.n	800b3ba <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a4:	b672      	cpsid	i
 800b3a6:	f383 8811 	msr	BASEPRI, r3
 800b3aa:	f3bf 8f6f 	isb	sy
 800b3ae:	f3bf 8f4f 	dsb	sy
 800b3b2:	b662      	cpsie	i
 800b3b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b3b6:	bf00      	nop
 800b3b8:	e7fe      	b.n	800b3b8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d002      	beq.n	800b3c6 <xQueueGenericCreateStatic+0x5a>
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d001      	beq.n	800b3ca <xQueueGenericCreateStatic+0x5e>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e000      	b.n	800b3cc <xQueueGenericCreateStatic+0x60>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d10c      	bne.n	800b3ea <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	b672      	cpsid	i
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	b662      	cpsie	i
 800b3e4:	623b      	str	r3, [r7, #32]
}
 800b3e6:	bf00      	nop
 800b3e8:	e7fe      	b.n	800b3e8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d102      	bne.n	800b3f6 <xQueueGenericCreateStatic+0x8a>
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d101      	bne.n	800b3fa <xQueueGenericCreateStatic+0x8e>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e000      	b.n	800b3fc <xQueueGenericCreateStatic+0x90>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d10c      	bne.n	800b41a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b404:	b672      	cpsid	i
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	b662      	cpsie	i
 800b414:	61fb      	str	r3, [r7, #28]
}
 800b416:	bf00      	nop
 800b418:	e7fe      	b.n	800b418 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b41a:	2348      	movs	r3, #72	; 0x48
 800b41c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	2b48      	cmp	r3, #72	; 0x48
 800b422:	d00c      	beq.n	800b43e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	b672      	cpsid	i
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	b662      	cpsie	i
 800b438:	61bb      	str	r3, [r7, #24]
}
 800b43a:	bf00      	nop
 800b43c:	e7fe      	b.n	800b43c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b43e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00d      	beq.n	800b466 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44c:	2201      	movs	r2, #1
 800b44e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b452:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	4613      	mov	r3, r2
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	68b9      	ldr	r1, [r7, #8]
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f000 f847 	bl	800b4f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b468:	4618      	mov	r0, r3
 800b46a:	3730      	adds	r7, #48	; 0x30
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b470:	b580      	push	{r7, lr}
 800b472:	b08a      	sub	sp, #40	; 0x28
 800b474:	af02      	add	r7, sp, #8
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	4613      	mov	r3, r2
 800b47c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10c      	bne.n	800b49e <xQueueGenericCreate+0x2e>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b488:	b672      	cpsid	i
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	b662      	cpsie	i
 800b498:	613b      	str	r3, [r7, #16]
}
 800b49a:	bf00      	nop
 800b49c:	e7fe      	b.n	800b49c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d102      	bne.n	800b4aa <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	61fb      	str	r3, [r7, #28]
 800b4a8:	e004      	b.n	800b4b4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	fb02 f303 	mul.w	r3, r2, r3
 800b4b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	3348      	adds	r3, #72	; 0x48
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f001 fedf 	bl	800d27c <pvPortMalloc>
 800b4be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d011      	beq.n	800b4ea <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b4c6:	69bb      	ldr	r3, [r7, #24]
 800b4c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	3348      	adds	r3, #72	; 0x48
 800b4ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4d8:	79fa      	ldrb	r2, [r7, #7]
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	4613      	mov	r3, r2
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	68b9      	ldr	r1, [r7, #8]
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 f805 	bl	800b4f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b4ea:	69bb      	ldr	r3, [r7, #24]
	}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3720      	adds	r7, #32
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d103      	bne.n	800b510 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	601a      	str	r2, [r3, #0]
 800b50e:	e002      	b.n	800b516 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b522:	2101      	movs	r1, #1
 800b524:	69b8      	ldr	r0, [r7, #24]
 800b526:	f7ff feb7 	bl	800b298 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b52a:	bf00      	nop
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b532:	b580      	push	{r7, lr}
 800b534:	b082      	sub	sp, #8
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00e      	beq.n	800b55e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b552:	2300      	movs	r3, #0
 800b554:	2200      	movs	r2, #0
 800b556:	2100      	movs	r1, #0
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f81d 	bl	800b598 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b55e:	bf00      	nop
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b566:	b580      	push	{r7, lr}
 800b568:	b086      	sub	sp, #24
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	4603      	mov	r3, r0
 800b56e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b570:	2301      	movs	r3, #1
 800b572:	617b      	str	r3, [r7, #20]
 800b574:	2300      	movs	r3, #0
 800b576:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b578:	79fb      	ldrb	r3, [r7, #7]
 800b57a:	461a      	mov	r2, r3
 800b57c:	6939      	ldr	r1, [r7, #16]
 800b57e:	6978      	ldr	r0, [r7, #20]
 800b580:	f7ff ff76 	bl	800b470 <xQueueGenericCreate>
 800b584:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f7ff ffd3 	bl	800b532 <prvInitialiseMutex>

		return xNewQueue;
 800b58c:	68fb      	ldr	r3, [r7, #12]
	}
 800b58e:	4618      	mov	r0, r3
 800b590:	3718      	adds	r7, #24
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b08e      	sub	sp, #56	; 0x38
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
 800b5a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10c      	bne.n	800b5ce <xQueueGenericSend+0x36>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b8:	b672      	cpsid	i
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	b662      	cpsie	i
 800b5c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b5ca:	bf00      	nop
 800b5cc:	e7fe      	b.n	800b5cc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d103      	bne.n	800b5dc <xQueueGenericSend+0x44>
 800b5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d101      	bne.n	800b5e0 <xQueueGenericSend+0x48>
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e000      	b.n	800b5e2 <xQueueGenericSend+0x4a>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10c      	bne.n	800b600 <xQueueGenericSend+0x68>
	__asm volatile
 800b5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ea:	b672      	cpsid	i
 800b5ec:	f383 8811 	msr	BASEPRI, r3
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	b662      	cpsie	i
 800b5fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5fc:	bf00      	nop
 800b5fe:	e7fe      	b.n	800b5fe <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	2b02      	cmp	r3, #2
 800b604:	d103      	bne.n	800b60e <xQueueGenericSend+0x76>
 800b606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d101      	bne.n	800b612 <xQueueGenericSend+0x7a>
 800b60e:	2301      	movs	r3, #1
 800b610:	e000      	b.n	800b614 <xQueueGenericSend+0x7c>
 800b612:	2300      	movs	r3, #0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10c      	bne.n	800b632 <xQueueGenericSend+0x9a>
	__asm volatile
 800b618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61c:	b672      	cpsid	i
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	b662      	cpsie	i
 800b62c:	623b      	str	r3, [r7, #32]
}
 800b62e:	bf00      	nop
 800b630:	e7fe      	b.n	800b630 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b632:	f001 f9f1 	bl	800ca18 <xTaskGetSchedulerState>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d102      	bne.n	800b642 <xQueueGenericSend+0xaa>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d101      	bne.n	800b646 <xQueueGenericSend+0xae>
 800b642:	2301      	movs	r3, #1
 800b644:	e000      	b.n	800b648 <xQueueGenericSend+0xb0>
 800b646:	2300      	movs	r3, #0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d10c      	bne.n	800b666 <xQueueGenericSend+0xce>
	__asm volatile
 800b64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b650:	b672      	cpsid	i
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	b662      	cpsie	i
 800b660:	61fb      	str	r3, [r7, #28]
}
 800b662:	bf00      	nop
 800b664:	e7fe      	b.n	800b664 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b666:	f001 fd21 	bl	800d0ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b672:	429a      	cmp	r2, r3
 800b674:	d302      	bcc.n	800b67c <xQueueGenericSend+0xe4>
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	2b02      	cmp	r3, #2
 800b67a:	d129      	bne.n	800b6d0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b67c:	683a      	ldr	r2, [r7, #0]
 800b67e:	68b9      	ldr	r1, [r7, #8]
 800b680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b682:	f000 f9bb 	bl	800b9fc <prvCopyDataToQueue>
 800b686:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d010      	beq.n	800b6b2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b692:	3324      	adds	r3, #36	; 0x24
 800b694:	4618      	mov	r0, r3
 800b696:	f000 fff7 	bl	800c688 <xTaskRemoveFromEventList>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d013      	beq.n	800b6c8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b6a0:	4b3f      	ldr	r3, [pc, #252]	; (800b7a0 <xQueueGenericSend+0x208>)
 800b6a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6a6:	601a      	str	r2, [r3, #0]
 800b6a8:	f3bf 8f4f 	dsb	sy
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	e00a      	b.n	800b6c8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d007      	beq.n	800b6c8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b6b8:	4b39      	ldr	r3, [pc, #228]	; (800b7a0 <xQueueGenericSend+0x208>)
 800b6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6be:	601a      	str	r2, [r3, #0]
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b6c8:	f001 fd24 	bl	800d114 <vPortExitCritical>
				return pdPASS;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e063      	b.n	800b798 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d103      	bne.n	800b6de <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b6d6:	f001 fd1d 	bl	800d114 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	e05c      	b.n	800b798 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d106      	bne.n	800b6f2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6e4:	f107 0314 	add.w	r3, r7, #20
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f001 f831 	bl	800c750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6f2:	f001 fd0f 	bl	800d114 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6f6:	f000 fdd7 	bl	800c2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6fa:	f001 fcd7 	bl	800d0ac <vPortEnterCritical>
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b704:	b25b      	sxtb	r3, r3
 800b706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70a:	d103      	bne.n	800b714 <xQueueGenericSend+0x17c>
 800b70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70e:	2200      	movs	r2, #0
 800b710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b71a:	b25b      	sxtb	r3, r3
 800b71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b720:	d103      	bne.n	800b72a <xQueueGenericSend+0x192>
 800b722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b724:	2200      	movs	r2, #0
 800b726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b72a:	f001 fcf3 	bl	800d114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b72e:	1d3a      	adds	r2, r7, #4
 800b730:	f107 0314 	add.w	r3, r7, #20
 800b734:	4611      	mov	r1, r2
 800b736:	4618      	mov	r0, r3
 800b738:	f001 f820 	bl	800c77c <xTaskCheckForTimeOut>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d124      	bne.n	800b78c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b744:	f000 fa2c 	bl	800bba0 <prvIsQueueFull>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d018      	beq.n	800b780 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b750:	3310      	adds	r3, #16
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	4611      	mov	r1, r2
 800b756:	4618      	mov	r0, r3
 800b758:	f000 ff70 	bl	800c63c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b75c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b75e:	f000 f9b7 	bl	800bad0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b762:	f000 fdaf 	bl	800c2c4 <xTaskResumeAll>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f47f af7c 	bne.w	800b666 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b76e:	4b0c      	ldr	r3, [pc, #48]	; (800b7a0 <xQueueGenericSend+0x208>)
 800b770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b774:	601a      	str	r2, [r3, #0]
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	e772      	b.n	800b666 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b782:	f000 f9a5 	bl	800bad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b786:	f000 fd9d 	bl	800c2c4 <xTaskResumeAll>
 800b78a:	e76c      	b.n	800b666 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b78c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b78e:	f000 f99f 	bl	800bad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b792:	f000 fd97 	bl	800c2c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b796:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3738      	adds	r7, #56	; 0x38
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	e000ed04 	.word	0xe000ed04

0800b7a4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b08e      	sub	sp, #56	; 0x38
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10c      	bne.n	800b7da <xQueueSemaphoreTake+0x36>
	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c4:	b672      	cpsid	i
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	b662      	cpsie	i
 800b7d4:	623b      	str	r3, [r7, #32]
}
 800b7d6:	bf00      	nop
 800b7d8:	e7fe      	b.n	800b7d8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00c      	beq.n	800b7fc <xQueueSemaphoreTake+0x58>
	__asm volatile
 800b7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e6:	b672      	cpsid	i
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	b662      	cpsie	i
 800b7f6:	61fb      	str	r3, [r7, #28]
}
 800b7f8:	bf00      	nop
 800b7fa:	e7fe      	b.n	800b7fa <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7fc:	f001 f90c 	bl	800ca18 <xTaskGetSchedulerState>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d102      	bne.n	800b80c <xQueueSemaphoreTake+0x68>
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d101      	bne.n	800b810 <xQueueSemaphoreTake+0x6c>
 800b80c:	2301      	movs	r3, #1
 800b80e:	e000      	b.n	800b812 <xQueueSemaphoreTake+0x6e>
 800b810:	2300      	movs	r3, #0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10c      	bne.n	800b830 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800b816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81a:	b672      	cpsid	i
 800b81c:	f383 8811 	msr	BASEPRI, r3
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	b662      	cpsie	i
 800b82a:	61bb      	str	r3, [r7, #24]
}
 800b82c:	bf00      	nop
 800b82e:	e7fe      	b.n	800b82e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b830:	f001 fc3c 	bl	800d0ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b838:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d024      	beq.n	800b88a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b842:	1e5a      	subs	r2, r3, #1
 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b846:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d104      	bne.n	800b85a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b850:	f001 faa8 	bl	800cda4 <pvTaskIncrementMutexHeldCount>
 800b854:	4602      	mov	r2, r0
 800b856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b858:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00f      	beq.n	800b882 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b864:	3310      	adds	r3, #16
 800b866:	4618      	mov	r0, r3
 800b868:	f000 ff0e 	bl	800c688 <xTaskRemoveFromEventList>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d007      	beq.n	800b882 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b872:	4b55      	ldr	r3, [pc, #340]	; (800b9c8 <xQueueSemaphoreTake+0x224>)
 800b874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b878:	601a      	str	r2, [r3, #0]
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b882:	f001 fc47 	bl	800d114 <vPortExitCritical>
				return pdPASS;
 800b886:	2301      	movs	r3, #1
 800b888:	e099      	b.n	800b9be <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d113      	bne.n	800b8b8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00c      	beq.n	800b8b0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	b672      	cpsid	i
 800b89c:	f383 8811 	msr	BASEPRI, r3
 800b8a0:	f3bf 8f6f 	isb	sy
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	b662      	cpsie	i
 800b8aa:	617b      	str	r3, [r7, #20]
}
 800b8ac:	bf00      	nop
 800b8ae:	e7fe      	b.n	800b8ae <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b8b0:	f001 fc30 	bl	800d114 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	e082      	b.n	800b9be <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d106      	bne.n	800b8cc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8be:	f107 030c 	add.w	r3, r7, #12
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 ff44 	bl	800c750 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8cc:	f001 fc22 	bl	800d114 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8d0:	f000 fcea 	bl	800c2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8d4:	f001 fbea 	bl	800d0ac <vPortEnterCritical>
 800b8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8de:	b25b      	sxtb	r3, r3
 800b8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e4:	d103      	bne.n	800b8ee <xQueueSemaphoreTake+0x14a>
 800b8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8f4:	b25b      	sxtb	r3, r3
 800b8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fa:	d103      	bne.n	800b904 <xQueueSemaphoreTake+0x160>
 800b8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fe:	2200      	movs	r2, #0
 800b900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b904:	f001 fc06 	bl	800d114 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b908:	463a      	mov	r2, r7
 800b90a:	f107 030c 	add.w	r3, r7, #12
 800b90e:	4611      	mov	r1, r2
 800b910:	4618      	mov	r0, r3
 800b912:	f000 ff33 	bl	800c77c <xTaskCheckForTimeOut>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d132      	bne.n	800b982 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b91c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b91e:	f000 f929 	bl	800bb74 <prvIsQueueEmpty>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d026      	beq.n	800b976 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d109      	bne.n	800b944 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800b930:	f001 fbbc 	bl	800d0ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	4618      	mov	r0, r3
 800b93a:	f001 f88b 	bl	800ca54 <xTaskPriorityInherit>
 800b93e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b940:	f001 fbe8 	bl	800d114 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b946:	3324      	adds	r3, #36	; 0x24
 800b948:	683a      	ldr	r2, [r7, #0]
 800b94a:	4611      	mov	r1, r2
 800b94c:	4618      	mov	r0, r3
 800b94e:	f000 fe75 	bl	800c63c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b954:	f000 f8bc 	bl	800bad0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b958:	f000 fcb4 	bl	800c2c4 <xTaskResumeAll>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f47f af66 	bne.w	800b830 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800b964:	4b18      	ldr	r3, [pc, #96]	; (800b9c8 <xQueueSemaphoreTake+0x224>)
 800b966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b96a:	601a      	str	r2, [r3, #0]
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	f3bf 8f6f 	isb	sy
 800b974:	e75c      	b.n	800b830 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b978:	f000 f8aa 	bl	800bad0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b97c:	f000 fca2 	bl	800c2c4 <xTaskResumeAll>
 800b980:	e756      	b.n	800b830 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b984:	f000 f8a4 	bl	800bad0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b988:	f000 fc9c 	bl	800c2c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b98c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b98e:	f000 f8f1 	bl	800bb74 <prvIsQueueEmpty>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	f43f af4b 	beq.w	800b830 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d00d      	beq.n	800b9bc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800b9a0:	f001 fb84 	bl	800d0ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b9a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9a6:	f000 f811 	bl	800b9cc <prvGetDisinheritPriorityAfterTimeout>
 800b9aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ae:	689b      	ldr	r3, [r3, #8]
 800b9b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f001 f958 	bl	800cc68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b9b8:	f001 fbac 	bl	800d114 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b9bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3738      	adds	r7, #56	; 0x38
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	e000ed04 	.word	0xe000ed04

0800b9cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d006      	beq.n	800b9ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f1c3 0307 	rsb	r3, r3, #7
 800b9e6:	60fb      	str	r3, [r7, #12]
 800b9e8:	e001      	b.n	800b9ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
	}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3714      	adds	r7, #20
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b086      	sub	sp, #24
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10d      	bne.n	800ba36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d14d      	bne.n	800babe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	4618      	mov	r0, r3
 800ba28:	f001 f894 	bl	800cb54 <xTaskPriorityDisinherit>
 800ba2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	609a      	str	r2, [r3, #8]
 800ba34:	e043      	b.n	800babe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d119      	bne.n	800ba70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	6858      	ldr	r0, [r3, #4]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba44:	461a      	mov	r2, r3
 800ba46:	68b9      	ldr	r1, [r7, #8]
 800ba48:	f001 fe22 	bl	800d690 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	685a      	ldr	r2, [r3, #4]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba54:	441a      	add	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	685a      	ldr	r2, [r3, #4]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d32b      	bcc.n	800babe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	605a      	str	r2, [r3, #4]
 800ba6e:	e026      	b.n	800babe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	68d8      	ldr	r0, [r3, #12]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba78:	461a      	mov	r2, r3
 800ba7a:	68b9      	ldr	r1, [r7, #8]
 800ba7c:	f001 fe08 	bl	800d690 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	68da      	ldr	r2, [r3, #12]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba88:	425b      	negs	r3, r3
 800ba8a:	441a      	add	r2, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	68da      	ldr	r2, [r3, #12]
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d207      	bcs.n	800baac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	689a      	ldr	r2, [r3, #8]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa4:	425b      	negs	r3, r3
 800baa6:	441a      	add	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d105      	bne.n	800babe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	3b01      	subs	r3, #1
 800babc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	1c5a      	adds	r2, r3, #1
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bac6:	697b      	ldr	r3, [r7, #20]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3718      	adds	r7, #24
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bad8:	f001 fae8 	bl	800d0ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bae2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bae4:	e011      	b.n	800bb0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baea:	2b00      	cmp	r3, #0
 800baec:	d012      	beq.n	800bb14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	3324      	adds	r3, #36	; 0x24
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 fdc8 	bl	800c688 <xTaskRemoveFromEventList>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d001      	beq.n	800bb02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bafe:	f000 fea3 	bl	800c848 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	3b01      	subs	r3, #1
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bb0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	dce9      	bgt.n	800bae6 <prvUnlockQueue+0x16>
 800bb12:	e000      	b.n	800bb16 <prvUnlockQueue+0x46>
					break;
 800bb14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	22ff      	movs	r2, #255	; 0xff
 800bb1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bb1e:	f001 faf9 	bl	800d114 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bb22:	f001 fac3 	bl	800d0ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb2e:	e011      	b.n	800bb54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	691b      	ldr	r3, [r3, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d012      	beq.n	800bb5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	3310      	adds	r3, #16
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f000 fda3 	bl	800c688 <xTaskRemoveFromEventList>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d001      	beq.n	800bb4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bb48:	f000 fe7e 	bl	800c848 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bb4c:	7bbb      	ldrb	r3, [r7, #14]
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bb54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	dce9      	bgt.n	800bb30 <prvUnlockQueue+0x60>
 800bb5c:	e000      	b.n	800bb60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bb5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	22ff      	movs	r2, #255	; 0xff
 800bb64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bb68:	f001 fad4 	bl	800d114 <vPortExitCritical>
}
 800bb6c:	bf00      	nop
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb7c:	f001 fa96 	bl	800d0ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d102      	bne.n	800bb8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	60fb      	str	r3, [r7, #12]
 800bb8c:	e001      	b.n	800bb92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb92:	f001 fabf 	bl	800d114 <vPortExitCritical>

	return xReturn;
 800bb96:	68fb      	ldr	r3, [r7, #12]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bba8:	f001 fa80 	bl	800d0ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d102      	bne.n	800bbbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	60fb      	str	r3, [r7, #12]
 800bbbc:	e001      	b.n	800bbc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bbc2:	f001 faa7 	bl	800d114 <vPortExitCritical>

	return xReturn;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b08e      	sub	sp, #56	; 0x38
 800bbd4:	af04      	add	r7, sp, #16
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
 800bbdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10c      	bne.n	800bbfe <xTaskCreateStatic+0x2e>
	__asm volatile
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	b672      	cpsid	i
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	b662      	cpsie	i
 800bbf8:	623b      	str	r3, [r7, #32]
}
 800bbfa:	bf00      	nop
 800bbfc:	e7fe      	b.n	800bbfc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10c      	bne.n	800bc1e <xTaskCreateStatic+0x4e>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc08:	b672      	cpsid	i
 800bc0a:	f383 8811 	msr	BASEPRI, r3
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f3bf 8f4f 	dsb	sy
 800bc16:	b662      	cpsie	i
 800bc18:	61fb      	str	r3, [r7, #28]
}
 800bc1a:	bf00      	nop
 800bc1c:	e7fe      	b.n	800bc1c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc1e:	23b4      	movs	r3, #180	; 0xb4
 800bc20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	2bb4      	cmp	r3, #180	; 0xb4
 800bc26:	d00c      	beq.n	800bc42 <xTaskCreateStatic+0x72>
	__asm volatile
 800bc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2c:	b672      	cpsid	i
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	b662      	cpsie	i
 800bc3c:	61bb      	str	r3, [r7, #24]
}
 800bc3e:	bf00      	nop
 800bc40:	e7fe      	b.n	800bc40 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bc42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d01e      	beq.n	800bc88 <xTaskCreateStatic+0xb8>
 800bc4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d01b      	beq.n	800bc88 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5c:	2202      	movs	r2, #2
 800bc5e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bc62:	2300      	movs	r3, #0
 800bc64:	9303      	str	r3, [sp, #12]
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	9302      	str	r3, [sp, #8]
 800bc6a:	f107 0314 	add.w	r3, r7, #20
 800bc6e:	9301      	str	r3, [sp, #4]
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	68b9      	ldr	r1, [r7, #8]
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f000 f850 	bl	800bd20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc82:	f000 f8ed 	bl	800be60 <prvAddNewTaskToReadyList>
 800bc86:	e001      	b.n	800bc8c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc8c:	697b      	ldr	r3, [r7, #20]
	}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3728      	adds	r7, #40	; 0x28
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc96:	b580      	push	{r7, lr}
 800bc98:	b08c      	sub	sp, #48	; 0x30
 800bc9a:	af04      	add	r7, sp, #16
 800bc9c:	60f8      	str	r0, [r7, #12]
 800bc9e:	60b9      	str	r1, [r7, #8]
 800bca0:	603b      	str	r3, [r7, #0]
 800bca2:	4613      	mov	r3, r2
 800bca4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bca6:	88fb      	ldrh	r3, [r7, #6]
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f001 fae6 	bl	800d27c <pvPortMalloc>
 800bcb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00e      	beq.n	800bcd6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bcb8:	20b4      	movs	r0, #180	; 0xb4
 800bcba:	f001 fadf 	bl	800d27c <pvPortMalloc>
 800bcbe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d003      	beq.n	800bcce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	697a      	ldr	r2, [r7, #20]
 800bcca:	631a      	str	r2, [r3, #48]	; 0x30
 800bccc:	e005      	b.n	800bcda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bcce:	6978      	ldr	r0, [r7, #20]
 800bcd0:	f001 fb9e 	bl	800d410 <vPortFree>
 800bcd4:	e001      	b.n	800bcda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d017      	beq.n	800bd10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bce8:	88fa      	ldrh	r2, [r7, #6]
 800bcea:	2300      	movs	r3, #0
 800bcec:	9303      	str	r3, [sp, #12]
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	9302      	str	r3, [sp, #8]
 800bcf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf4:	9301      	str	r3, [sp, #4]
 800bcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf8:	9300      	str	r3, [sp, #0]
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	68b9      	ldr	r1, [r7, #8]
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f000 f80e 	bl	800bd20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd04:	69f8      	ldr	r0, [r7, #28]
 800bd06:	f000 f8ab 	bl	800be60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	61bb      	str	r3, [r7, #24]
 800bd0e:	e002      	b.n	800bd16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd10:	f04f 33ff 	mov.w	r3, #4294967295
 800bd14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd16:	69bb      	ldr	r3, [r7, #24]
	}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3720      	adds	r7, #32
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b088      	sub	sp, #32
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	607a      	str	r2, [r7, #4]
 800bd2c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd32:	6879      	ldr	r1, [r7, #4]
 800bd34:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800bd38:	440b      	add	r3, r1
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4413      	add	r3, r2
 800bd3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bd40:	69bb      	ldr	r3, [r7, #24]
 800bd42:	f023 0307 	bic.w	r3, r3, #7
 800bd46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	f003 0307 	and.w	r3, r3, #7
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00c      	beq.n	800bd6c <prvInitialiseNewTask+0x4c>
	__asm volatile
 800bd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd56:	b672      	cpsid	i
 800bd58:	f383 8811 	msr	BASEPRI, r3
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	b662      	cpsie	i
 800bd66:	617b      	str	r3, [r7, #20]
}
 800bd68:	bf00      	nop
 800bd6a:	e7fe      	b.n	800bd6a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d01f      	beq.n	800bdb2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd72:	2300      	movs	r3, #0
 800bd74:	61fb      	str	r3, [r7, #28]
 800bd76:	e012      	b.n	800bd9e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd78:	68ba      	ldr	r2, [r7, #8]
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	7819      	ldrb	r1, [r3, #0]
 800bd80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	4413      	add	r3, r2
 800bd86:	3334      	adds	r3, #52	; 0x34
 800bd88:	460a      	mov	r2, r1
 800bd8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	4413      	add	r3, r2
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d006      	beq.n	800bda6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	61fb      	str	r3, [r7, #28]
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	2b0f      	cmp	r3, #15
 800bda2:	d9e9      	bls.n	800bd78 <prvInitialiseNewTask+0x58>
 800bda4:	e000      	b.n	800bda8 <prvInitialiseNewTask+0x88>
			{
				break;
 800bda6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bdb0:	e003      	b.n	800bdba <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbc:	2b06      	cmp	r3, #6
 800bdbe:	d901      	bls.n	800bdc4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bdc0:	2306      	movs	r3, #6
 800bdc2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdc8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd8:	3304      	adds	r3, #4
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff f9c7 	bl	800b16e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde2:	3318      	adds	r3, #24
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7ff f9c2 	bl	800b16e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	f1c3 0207 	rsb	r2, r3, #7
 800bdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdfe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be02:	2200      	movs	r2, #0
 800be04:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800be10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be12:	334c      	adds	r3, #76	; 0x4c
 800be14:	2260      	movs	r2, #96	; 0x60
 800be16:	2100      	movs	r1, #0
 800be18:	4618      	mov	r0, r3
 800be1a:	f001 fc47 	bl	800d6ac <memset>
 800be1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be20:	4a0c      	ldr	r2, [pc, #48]	; (800be54 <prvInitialiseNewTask+0x134>)
 800be22:	651a      	str	r2, [r3, #80]	; 0x50
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	4a0c      	ldr	r2, [pc, #48]	; (800be58 <prvInitialiseNewTask+0x138>)
 800be28:	655a      	str	r2, [r3, #84]	; 0x54
 800be2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2c:	4a0b      	ldr	r2, [pc, #44]	; (800be5c <prvInitialiseNewTask+0x13c>)
 800be2e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be30:	683a      	ldr	r2, [r7, #0]
 800be32:	68f9      	ldr	r1, [r7, #12]
 800be34:	69b8      	ldr	r0, [r7, #24]
 800be36:	f001 f82f 	bl	800ce98 <pxPortInitialiseStack>
 800be3a:	4602      	mov	r2, r0
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800be40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be42:	2b00      	cmp	r3, #0
 800be44:	d002      	beq.n	800be4c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be4a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be4c:	bf00      	nop
 800be4e:	3720      	adds	r7, #32
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	08033ae0 	.word	0x08033ae0
 800be58:	08033b00 	.word	0x08033b00
 800be5c:	08033ac0 	.word	0x08033ac0

0800be60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be68:	f001 f920 	bl	800d0ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800be6c:	4b2a      	ldr	r3, [pc, #168]	; (800bf18 <prvAddNewTaskToReadyList+0xb8>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	3301      	adds	r3, #1
 800be72:	4a29      	ldr	r2, [pc, #164]	; (800bf18 <prvAddNewTaskToReadyList+0xb8>)
 800be74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800be76:	4b29      	ldr	r3, [pc, #164]	; (800bf1c <prvAddNewTaskToReadyList+0xbc>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d109      	bne.n	800be92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800be7e:	4a27      	ldr	r2, [pc, #156]	; (800bf1c <prvAddNewTaskToReadyList+0xbc>)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be84:	4b24      	ldr	r3, [pc, #144]	; (800bf18 <prvAddNewTaskToReadyList+0xb8>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d110      	bne.n	800beae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be8c:	f000 fd00 	bl	800c890 <prvInitialiseTaskLists>
 800be90:	e00d      	b.n	800beae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be92:	4b23      	ldr	r3, [pc, #140]	; (800bf20 <prvAddNewTaskToReadyList+0xc0>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d109      	bne.n	800beae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be9a:	4b20      	ldr	r3, [pc, #128]	; (800bf1c <prvAddNewTaskToReadyList+0xbc>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d802      	bhi.n	800beae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bea8:	4a1c      	ldr	r2, [pc, #112]	; (800bf1c <prvAddNewTaskToReadyList+0xbc>)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800beae:	4b1d      	ldr	r3, [pc, #116]	; (800bf24 <prvAddNewTaskToReadyList+0xc4>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	3301      	adds	r3, #1
 800beb4:	4a1b      	ldr	r2, [pc, #108]	; (800bf24 <prvAddNewTaskToReadyList+0xc4>)
 800beb6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bebc:	2201      	movs	r2, #1
 800bebe:	409a      	lsls	r2, r3
 800bec0:	4b19      	ldr	r3, [pc, #100]	; (800bf28 <prvAddNewTaskToReadyList+0xc8>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	4a18      	ldr	r2, [pc, #96]	; (800bf28 <prvAddNewTaskToReadyList+0xc8>)
 800bec8:	6013      	str	r3, [r2, #0]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bece:	4613      	mov	r3, r2
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	4413      	add	r3, r2
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	4a15      	ldr	r2, [pc, #84]	; (800bf2c <prvAddNewTaskToReadyList+0xcc>)
 800bed8:	441a      	add	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	3304      	adds	r3, #4
 800bede:	4619      	mov	r1, r3
 800bee0:	4610      	mov	r0, r2
 800bee2:	f7ff f951 	bl	800b188 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bee6:	f001 f915 	bl	800d114 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800beea:	4b0d      	ldr	r3, [pc, #52]	; (800bf20 <prvAddNewTaskToReadyList+0xc0>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00e      	beq.n	800bf10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bef2:	4b0a      	ldr	r3, [pc, #40]	; (800bf1c <prvAddNewTaskToReadyList+0xbc>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befc:	429a      	cmp	r2, r3
 800befe:	d207      	bcs.n	800bf10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf00:	4b0b      	ldr	r3, [pc, #44]	; (800bf30 <prvAddNewTaskToReadyList+0xd0>)
 800bf02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf06:	601a      	str	r2, [r3, #0]
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf10:	bf00      	nop
 800bf12:	3708      	adds	r7, #8
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	200006a8 	.word	0x200006a8
 800bf1c:	200005a8 	.word	0x200005a8
 800bf20:	200006b4 	.word	0x200006b4
 800bf24:	200006c4 	.word	0x200006c4
 800bf28:	200006b0 	.word	0x200006b0
 800bf2c:	200005ac 	.word	0x200005ac
 800bf30:	e000ed04 	.word	0xe000ed04

0800bf34 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bf3c:	f001 f8b6 	bl	800d0ac <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d102      	bne.n	800bf4c <vTaskDelete+0x18>
 800bf46:	4b3a      	ldr	r3, [pc, #232]	; (800c030 <vTaskDelete+0xfc>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	e000      	b.n	800bf4e <vTaskDelete+0x1a>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	3304      	adds	r3, #4
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7ff f974 	bl	800b242 <uxListRemove>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d115      	bne.n	800bf8c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf64:	4933      	ldr	r1, [pc, #204]	; (800c034 <vTaskDelete+0x100>)
 800bf66:	4613      	mov	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	440b      	add	r3, r1
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10a      	bne.n	800bf8c <vTaskDelete+0x58>
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf80:	43da      	mvns	r2, r3
 800bf82:	4b2d      	ldr	r3, [pc, #180]	; (800c038 <vTaskDelete+0x104>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4013      	ands	r3, r2
 800bf88:	4a2b      	ldr	r2, [pc, #172]	; (800c038 <vTaskDelete+0x104>)
 800bf8a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d004      	beq.n	800bf9e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	3318      	adds	r3, #24
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7ff f952 	bl	800b242 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800bf9e:	4b27      	ldr	r3, [pc, #156]	; (800c03c <vTaskDelete+0x108>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	4a25      	ldr	r2, [pc, #148]	; (800c03c <vTaskDelete+0x108>)
 800bfa6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800bfa8:	4b21      	ldr	r3, [pc, #132]	; (800c030 <vTaskDelete+0xfc>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d10b      	bne.n	800bfca <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	4821      	ldr	r0, [pc, #132]	; (800c040 <vTaskDelete+0x10c>)
 800bfba:	f7ff f8e5 	bl	800b188 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800bfbe:	4b21      	ldr	r3, [pc, #132]	; (800c044 <vTaskDelete+0x110>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	4a1f      	ldr	r2, [pc, #124]	; (800c044 <vTaskDelete+0x110>)
 800bfc6:	6013      	str	r3, [r2, #0]
 800bfc8:	e009      	b.n	800bfde <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800bfca:	4b1f      	ldr	r3, [pc, #124]	; (800c048 <vTaskDelete+0x114>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	4a1d      	ldr	r2, [pc, #116]	; (800c048 <vTaskDelete+0x114>)
 800bfd2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800bfd4:	68f8      	ldr	r0, [r7, #12]
 800bfd6:	f000 fcc9 	bl	800c96c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800bfda:	f000 fcfd 	bl	800c9d8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800bfde:	f001 f899 	bl	800d114 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800bfe2:	4b1a      	ldr	r3, [pc, #104]	; (800c04c <vTaskDelete+0x118>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d01d      	beq.n	800c026 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800bfea:	4b11      	ldr	r3, [pc, #68]	; (800c030 <vTaskDelete+0xfc>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d118      	bne.n	800c026 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800bff4:	4b16      	ldr	r3, [pc, #88]	; (800c050 <vTaskDelete+0x11c>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00c      	beq.n	800c016 <vTaskDelete+0xe2>
	__asm volatile
 800bffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c000:	b672      	cpsid	i
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	b662      	cpsie	i
 800c010:	60bb      	str	r3, [r7, #8]
}
 800c012:	bf00      	nop
 800c014:	e7fe      	b.n	800c014 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800c016:	4b0f      	ldr	r3, [pc, #60]	; (800c054 <vTaskDelete+0x120>)
 800c018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01c:	601a      	str	r2, [r3, #0]
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c026:	bf00      	nop
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop
 800c030:	200005a8 	.word	0x200005a8
 800c034:	200005ac 	.word	0x200005ac
 800c038:	200006b0 	.word	0x200006b0
 800c03c:	200006c4 	.word	0x200006c4
 800c040:	2000067c 	.word	0x2000067c
 800c044:	20000690 	.word	0x20000690
 800c048:	200006a8 	.word	0x200006a8
 800c04c:	200006b4 	.word	0x200006b4
 800c050:	200006d0 	.word	0x200006d0
 800c054:	e000ed04 	.word	0xe000ed04

0800c058 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b08a      	sub	sp, #40	; 0x28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c062:	2300      	movs	r3, #0
 800c064:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10c      	bne.n	800c086 <vTaskDelayUntil+0x2e>
	__asm volatile
 800c06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c070:	b672      	cpsid	i
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	b662      	cpsie	i
 800c080:	617b      	str	r3, [r7, #20]
}
 800c082:	bf00      	nop
 800c084:	e7fe      	b.n	800c084 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d10c      	bne.n	800c0a6 <vTaskDelayUntil+0x4e>
	__asm volatile
 800c08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c090:	b672      	cpsid	i
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	b662      	cpsie	i
 800c0a0:	613b      	str	r3, [r7, #16]
}
 800c0a2:	bf00      	nop
 800c0a4:	e7fe      	b.n	800c0a4 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800c0a6:	4b2b      	ldr	r3, [pc, #172]	; (800c154 <vTaskDelayUntil+0xfc>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00c      	beq.n	800c0c8 <vTaskDelayUntil+0x70>
	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b2:	b672      	cpsid	i
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	b662      	cpsie	i
 800c0c2:	60fb      	str	r3, [r7, #12]
}
 800c0c4:	bf00      	nop
 800c0c6:	e7fe      	b.n	800c0c6 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800c0c8:	f000 f8ee 	bl	800c2a8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c0cc:	4b22      	ldr	r3, [pc, #136]	; (800c158 <vTaskDelayUntil+0x100>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	683a      	ldr	r2, [r7, #0]
 800c0d8:	4413      	add	r3, r2
 800c0da:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6a3a      	ldr	r2, [r7, #32]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d20b      	bcs.n	800c0fe <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	69fa      	ldr	r2, [r7, #28]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d211      	bcs.n	800c114 <vTaskDelayUntil+0xbc>
 800c0f0:	69fa      	ldr	r2, [r7, #28]
 800c0f2:	6a3b      	ldr	r3, [r7, #32]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d90d      	bls.n	800c114 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	627b      	str	r3, [r7, #36]	; 0x24
 800c0fc:	e00a      	b.n	800c114 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	69fa      	ldr	r2, [r7, #28]
 800c104:	429a      	cmp	r2, r3
 800c106:	d303      	bcc.n	800c110 <vTaskDelayUntil+0xb8>
 800c108:	69fa      	ldr	r2, [r7, #28]
 800c10a:	6a3b      	ldr	r3, [r7, #32]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d901      	bls.n	800c114 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c110:	2301      	movs	r3, #1
 800c112:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	69fa      	ldr	r2, [r7, #28]
 800c118:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d006      	beq.n	800c12e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c120:	69fa      	ldr	r2, [r7, #28]
 800c122:	6a3b      	ldr	r3, [r7, #32]
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	2100      	movs	r1, #0
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 fe4f 	bl	800cdcc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c12e:	f000 f8c9 	bl	800c2c4 <xTaskResumeAll>
 800c132:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d107      	bne.n	800c14a <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800c13a:	4b08      	ldr	r3, [pc, #32]	; (800c15c <vTaskDelayUntil+0x104>)
 800c13c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c140:	601a      	str	r2, [r3, #0]
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c14a:	bf00      	nop
 800c14c:	3728      	adds	r7, #40	; 0x28
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	200006d0 	.word	0x200006d0
 800c158:	200006ac 	.word	0x200006ac
 800c15c:	e000ed04 	.word	0xe000ed04

0800c160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c168:	2300      	movs	r3, #0
 800c16a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d019      	beq.n	800c1a6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c172:	4b14      	ldr	r3, [pc, #80]	; (800c1c4 <vTaskDelay+0x64>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00c      	beq.n	800c194 <vTaskDelay+0x34>
	__asm volatile
 800c17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17e:	b672      	cpsid	i
 800c180:	f383 8811 	msr	BASEPRI, r3
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	f3bf 8f4f 	dsb	sy
 800c18c:	b662      	cpsie	i
 800c18e:	60bb      	str	r3, [r7, #8]
}
 800c190:	bf00      	nop
 800c192:	e7fe      	b.n	800c192 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c194:	f000 f888 	bl	800c2a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c198:	2100      	movs	r1, #0
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fe16 	bl	800cdcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c1a0:	f000 f890 	bl	800c2c4 <xTaskResumeAll>
 800c1a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d107      	bne.n	800c1bc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c1ac:	4b06      	ldr	r3, [pc, #24]	; (800c1c8 <vTaskDelay+0x68>)
 800c1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1b2:	601a      	str	r2, [r3, #0]
 800c1b4:	f3bf 8f4f 	dsb	sy
 800c1b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1bc:	bf00      	nop
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	200006d0 	.word	0x200006d0
 800c1c8:	e000ed04 	.word	0xe000ed04

0800c1cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08a      	sub	sp, #40	; 0x28
 800c1d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c1da:	463a      	mov	r2, r7
 800c1dc:	1d39      	adds	r1, r7, #4
 800c1de:	f107 0308 	add.w	r3, r7, #8
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7f4 f990 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	9202      	str	r2, [sp, #8]
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	460a      	mov	r2, r1
 800c1fa:	4923      	ldr	r1, [pc, #140]	; (800c288 <vTaskStartScheduler+0xbc>)
 800c1fc:	4823      	ldr	r0, [pc, #140]	; (800c28c <vTaskStartScheduler+0xc0>)
 800c1fe:	f7ff fce7 	bl	800bbd0 <xTaskCreateStatic>
 800c202:	4603      	mov	r3, r0
 800c204:	4a22      	ldr	r2, [pc, #136]	; (800c290 <vTaskStartScheduler+0xc4>)
 800c206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c208:	4b21      	ldr	r3, [pc, #132]	; (800c290 <vTaskStartScheduler+0xc4>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d002      	beq.n	800c216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c210:	2301      	movs	r3, #1
 800c212:	617b      	str	r3, [r7, #20]
 800c214:	e001      	b.n	800c21a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c216:	2300      	movs	r3, #0
 800c218:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d11d      	bne.n	800c25c <vTaskStartScheduler+0x90>
	__asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c224:	b672      	cpsid	i
 800c226:	f383 8811 	msr	BASEPRI, r3
 800c22a:	f3bf 8f6f 	isb	sy
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	b662      	cpsie	i
 800c234:	613b      	str	r3, [r7, #16]
}
 800c236:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c238:	4b16      	ldr	r3, [pc, #88]	; (800c294 <vTaskStartScheduler+0xc8>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	334c      	adds	r3, #76	; 0x4c
 800c23e:	4a16      	ldr	r2, [pc, #88]	; (800c298 <vTaskStartScheduler+0xcc>)
 800c240:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c242:	4b16      	ldr	r3, [pc, #88]	; (800c29c <vTaskStartScheduler+0xd0>)
 800c244:	f04f 32ff 	mov.w	r2, #4294967295
 800c248:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c24a:	4b15      	ldr	r3, [pc, #84]	; (800c2a0 <vTaskStartScheduler+0xd4>)
 800c24c:	2201      	movs	r2, #1
 800c24e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c250:	4b14      	ldr	r3, [pc, #80]	; (800c2a4 <vTaskStartScheduler+0xd8>)
 800c252:	2200      	movs	r2, #0
 800c254:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c256:	f000 feab 	bl	800cfb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c25a:	e010      	b.n	800c27e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c262:	d10c      	bne.n	800c27e <vTaskStartScheduler+0xb2>
	__asm volatile
 800c264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c268:	b672      	cpsid	i
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	b662      	cpsie	i
 800c278:	60fb      	str	r3, [r7, #12]
}
 800c27a:	bf00      	nop
 800c27c:	e7fe      	b.n	800c27c <vTaskStartScheduler+0xb0>
}
 800c27e:	bf00      	nop
 800c280:	3718      	adds	r7, #24
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	0800d924 	.word	0x0800d924
 800c28c:	0800c861 	.word	0x0800c861
 800c290:	200006cc 	.word	0x200006cc
 800c294:	200005a8 	.word	0x200005a8
 800c298:	20000050 	.word	0x20000050
 800c29c:	200006c8 	.word	0x200006c8
 800c2a0:	200006b4 	.word	0x200006b4
 800c2a4:	200006ac 	.word	0x200006ac

0800c2a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c2ac:	4b04      	ldr	r3, [pc, #16]	; (800c2c0 <vTaskSuspendAll+0x18>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	4a03      	ldr	r2, [pc, #12]	; (800c2c0 <vTaskSuspendAll+0x18>)
 800c2b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c2b6:	bf00      	nop
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr
 800c2c0:	200006d0 	.word	0x200006d0

0800c2c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c2d2:	4b42      	ldr	r3, [pc, #264]	; (800c3dc <xTaskResumeAll+0x118>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10c      	bne.n	800c2f4 <xTaskResumeAll+0x30>
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2de:	b672      	cpsid	i
 800c2e0:	f383 8811 	msr	BASEPRI, r3
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	b662      	cpsie	i
 800c2ee:	603b      	str	r3, [r7, #0]
}
 800c2f0:	bf00      	nop
 800c2f2:	e7fe      	b.n	800c2f2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c2f4:	f000 feda 	bl	800d0ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c2f8:	4b38      	ldr	r3, [pc, #224]	; (800c3dc <xTaskResumeAll+0x118>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	4a37      	ldr	r2, [pc, #220]	; (800c3dc <xTaskResumeAll+0x118>)
 800c300:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c302:	4b36      	ldr	r3, [pc, #216]	; (800c3dc <xTaskResumeAll+0x118>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d161      	bne.n	800c3ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c30a:	4b35      	ldr	r3, [pc, #212]	; (800c3e0 <xTaskResumeAll+0x11c>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d05d      	beq.n	800c3ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c312:	e02e      	b.n	800c372 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c314:	4b33      	ldr	r3, [pc, #204]	; (800c3e4 <xTaskResumeAll+0x120>)
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	3318      	adds	r3, #24
 800c320:	4618      	mov	r0, r3
 800c322:	f7fe ff8e 	bl	800b242 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	3304      	adds	r3, #4
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fe ff89 	bl	800b242 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c334:	2201      	movs	r2, #1
 800c336:	409a      	lsls	r2, r3
 800c338:	4b2b      	ldr	r3, [pc, #172]	; (800c3e8 <xTaskResumeAll+0x124>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	4313      	orrs	r3, r2
 800c33e:	4a2a      	ldr	r2, [pc, #168]	; (800c3e8 <xTaskResumeAll+0x124>)
 800c340:	6013      	str	r3, [r2, #0]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c346:	4613      	mov	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4413      	add	r3, r2
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	4a27      	ldr	r2, [pc, #156]	; (800c3ec <xTaskResumeAll+0x128>)
 800c350:	441a      	add	r2, r3
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3304      	adds	r3, #4
 800c356:	4619      	mov	r1, r3
 800c358:	4610      	mov	r0, r2
 800c35a:	f7fe ff15 	bl	800b188 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c362:	4b23      	ldr	r3, [pc, #140]	; (800c3f0 <xTaskResumeAll+0x12c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c368:	429a      	cmp	r2, r3
 800c36a:	d302      	bcc.n	800c372 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c36c:	4b21      	ldr	r3, [pc, #132]	; (800c3f4 <xTaskResumeAll+0x130>)
 800c36e:	2201      	movs	r2, #1
 800c370:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c372:	4b1c      	ldr	r3, [pc, #112]	; (800c3e4 <xTaskResumeAll+0x120>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d1cc      	bne.n	800c314 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d001      	beq.n	800c384 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c380:	f000 fb2a 	bl	800c9d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c384:	4b1c      	ldr	r3, [pc, #112]	; (800c3f8 <xTaskResumeAll+0x134>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d010      	beq.n	800c3b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c390:	f000 f836 	bl	800c400 <xTaskIncrementTick>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c39a:	4b16      	ldr	r3, [pc, #88]	; (800c3f4 <xTaskResumeAll+0x130>)
 800c39c:	2201      	movs	r2, #1
 800c39e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	3b01      	subs	r3, #1
 800c3a4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d1f1      	bne.n	800c390 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800c3ac:	4b12      	ldr	r3, [pc, #72]	; (800c3f8 <xTaskResumeAll+0x134>)
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c3b2:	4b10      	ldr	r3, [pc, #64]	; (800c3f4 <xTaskResumeAll+0x130>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d009      	beq.n	800c3ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c3be:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <xTaskResumeAll+0x138>)
 800c3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3c4:	601a      	str	r2, [r3, #0]
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3ce:	f000 fea1 	bl	800d114 <vPortExitCritical>

	return xAlreadyYielded;
 800c3d2:	68bb      	ldr	r3, [r7, #8]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	200006d0 	.word	0x200006d0
 800c3e0:	200006a8 	.word	0x200006a8
 800c3e4:	20000668 	.word	0x20000668
 800c3e8:	200006b0 	.word	0x200006b0
 800c3ec:	200005ac 	.word	0x200005ac
 800c3f0:	200005a8 	.word	0x200005a8
 800c3f4:	200006bc 	.word	0x200006bc
 800c3f8:	200006b8 	.word	0x200006b8
 800c3fc:	e000ed04 	.word	0xe000ed04

0800c400 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c406:	2300      	movs	r3, #0
 800c408:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c40a:	4b4f      	ldr	r3, [pc, #316]	; (800c548 <xTaskIncrementTick+0x148>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f040 808a 	bne.w	800c528 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c414:	4b4d      	ldr	r3, [pc, #308]	; (800c54c <xTaskIncrementTick+0x14c>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	3301      	adds	r3, #1
 800c41a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c41c:	4a4b      	ldr	r2, [pc, #300]	; (800c54c <xTaskIncrementTick+0x14c>)
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d122      	bne.n	800c46e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c428:	4b49      	ldr	r3, [pc, #292]	; (800c550 <xTaskIncrementTick+0x150>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d00c      	beq.n	800c44c <xTaskIncrementTick+0x4c>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c436:	b672      	cpsid	i
 800c438:	f383 8811 	msr	BASEPRI, r3
 800c43c:	f3bf 8f6f 	isb	sy
 800c440:	f3bf 8f4f 	dsb	sy
 800c444:	b662      	cpsie	i
 800c446:	603b      	str	r3, [r7, #0]
}
 800c448:	bf00      	nop
 800c44a:	e7fe      	b.n	800c44a <xTaskIncrementTick+0x4a>
 800c44c:	4b40      	ldr	r3, [pc, #256]	; (800c550 <xTaskIncrementTick+0x150>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	60fb      	str	r3, [r7, #12]
 800c452:	4b40      	ldr	r3, [pc, #256]	; (800c554 <xTaskIncrementTick+0x154>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a3e      	ldr	r2, [pc, #248]	; (800c550 <xTaskIncrementTick+0x150>)
 800c458:	6013      	str	r3, [r2, #0]
 800c45a:	4a3e      	ldr	r2, [pc, #248]	; (800c554 <xTaskIncrementTick+0x154>)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	4b3d      	ldr	r3, [pc, #244]	; (800c558 <xTaskIncrementTick+0x158>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3301      	adds	r3, #1
 800c466:	4a3c      	ldr	r2, [pc, #240]	; (800c558 <xTaskIncrementTick+0x158>)
 800c468:	6013      	str	r3, [r2, #0]
 800c46a:	f000 fab5 	bl	800c9d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c46e:	4b3b      	ldr	r3, [pc, #236]	; (800c55c <xTaskIncrementTick+0x15c>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	429a      	cmp	r2, r3
 800c476:	d348      	bcc.n	800c50a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c478:	4b35      	ldr	r3, [pc, #212]	; (800c550 <xTaskIncrementTick+0x150>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d104      	bne.n	800c48c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c482:	4b36      	ldr	r3, [pc, #216]	; (800c55c <xTaskIncrementTick+0x15c>)
 800c484:	f04f 32ff 	mov.w	r2, #4294967295
 800c488:	601a      	str	r2, [r3, #0]
					break;
 800c48a:	e03e      	b.n	800c50a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c48c:	4b30      	ldr	r3, [pc, #192]	; (800c550 <xTaskIncrementTick+0x150>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d203      	bcs.n	800c4ac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c4a4:	4a2d      	ldr	r2, [pc, #180]	; (800c55c <xTaskIncrementTick+0x15c>)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c4aa:	e02e      	b.n	800c50a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	3304      	adds	r3, #4
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fe fec6 	bl	800b242 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d004      	beq.n	800c4c8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	3318      	adds	r3, #24
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fe febd 	bl	800b242 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	409a      	lsls	r2, r3
 800c4d0:	4b23      	ldr	r3, [pc, #140]	; (800c560 <xTaskIncrementTick+0x160>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	4a22      	ldr	r2, [pc, #136]	; (800c560 <xTaskIncrementTick+0x160>)
 800c4d8:	6013      	str	r3, [r2, #0]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4de:	4613      	mov	r3, r2
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	4413      	add	r3, r2
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	4a1f      	ldr	r2, [pc, #124]	; (800c564 <xTaskIncrementTick+0x164>)
 800c4e8:	441a      	add	r2, r3
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	f7fe fe49 	bl	800b188 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4fa:	4b1b      	ldr	r3, [pc, #108]	; (800c568 <xTaskIncrementTick+0x168>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c500:	429a      	cmp	r2, r3
 800c502:	d3b9      	bcc.n	800c478 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c504:	2301      	movs	r3, #1
 800c506:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c508:	e7b6      	b.n	800c478 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c50a:	4b17      	ldr	r3, [pc, #92]	; (800c568 <xTaskIncrementTick+0x168>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c510:	4914      	ldr	r1, [pc, #80]	; (800c564 <xTaskIncrementTick+0x164>)
 800c512:	4613      	mov	r3, r2
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	4413      	add	r3, r2
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	440b      	add	r3, r1
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d907      	bls.n	800c532 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800c522:	2301      	movs	r3, #1
 800c524:	617b      	str	r3, [r7, #20]
 800c526:	e004      	b.n	800c532 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c528:	4b10      	ldr	r3, [pc, #64]	; (800c56c <xTaskIncrementTick+0x16c>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	3301      	adds	r3, #1
 800c52e:	4a0f      	ldr	r2, [pc, #60]	; (800c56c <xTaskIncrementTick+0x16c>)
 800c530:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c532:	4b0f      	ldr	r3, [pc, #60]	; (800c570 <xTaskIncrementTick+0x170>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d001      	beq.n	800c53e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800c53a:	2301      	movs	r3, #1
 800c53c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c53e:	697b      	ldr	r3, [r7, #20]
}
 800c540:	4618      	mov	r0, r3
 800c542:	3718      	adds	r7, #24
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	200006d0 	.word	0x200006d0
 800c54c:	200006ac 	.word	0x200006ac
 800c550:	20000660 	.word	0x20000660
 800c554:	20000664 	.word	0x20000664
 800c558:	200006c0 	.word	0x200006c0
 800c55c:	200006c8 	.word	0x200006c8
 800c560:	200006b0 	.word	0x200006b0
 800c564:	200005ac 	.word	0x200005ac
 800c568:	200005a8 	.word	0x200005a8
 800c56c:	200006b8 	.word	0x200006b8
 800c570:	200006bc 	.word	0x200006bc

0800c574 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c574:	b480      	push	{r7}
 800c576:	b087      	sub	sp, #28
 800c578:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c57a:	4b2a      	ldr	r3, [pc, #168]	; (800c624 <vTaskSwitchContext+0xb0>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d003      	beq.n	800c58a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c582:	4b29      	ldr	r3, [pc, #164]	; (800c628 <vTaskSwitchContext+0xb4>)
 800c584:	2201      	movs	r2, #1
 800c586:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c588:	e046      	b.n	800c618 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c58a:	4b27      	ldr	r3, [pc, #156]	; (800c628 <vTaskSwitchContext+0xb4>)
 800c58c:	2200      	movs	r2, #0
 800c58e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c590:	4b26      	ldr	r3, [pc, #152]	; (800c62c <vTaskSwitchContext+0xb8>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	fab3 f383 	clz	r3, r3
 800c59c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c59e:	7afb      	ldrb	r3, [r7, #11]
 800c5a0:	f1c3 031f 	rsb	r3, r3, #31
 800c5a4:	617b      	str	r3, [r7, #20]
 800c5a6:	4922      	ldr	r1, [pc, #136]	; (800c630 <vTaskSwitchContext+0xbc>)
 800c5a8:	697a      	ldr	r2, [r7, #20]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	009b      	lsls	r3, r3, #2
 800c5b2:	440b      	add	r3, r1
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10c      	bne.n	800c5d4 <vTaskSwitchContext+0x60>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	b672      	cpsid	i
 800c5c0:	f383 8811 	msr	BASEPRI, r3
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	f3bf 8f4f 	dsb	sy
 800c5cc:	b662      	cpsie	i
 800c5ce:	607b      	str	r3, [r7, #4]
}
 800c5d0:	bf00      	nop
 800c5d2:	e7fe      	b.n	800c5d2 <vTaskSwitchContext+0x5e>
 800c5d4:	697a      	ldr	r2, [r7, #20]
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4a14      	ldr	r2, [pc, #80]	; (800c630 <vTaskSwitchContext+0xbc>)
 800c5e0:	4413      	add	r3, r2
 800c5e2:	613b      	str	r3, [r7, #16]
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	685a      	ldr	r2, [r3, #4]
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	605a      	str	r2, [r3, #4]
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	3308      	adds	r3, #8
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d104      	bne.n	800c604 <vTaskSwitchContext+0x90>
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	685a      	ldr	r2, [r3, #4]
 800c600:	693b      	ldr	r3, [r7, #16]
 800c602:	605a      	str	r2, [r3, #4]
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	4a0a      	ldr	r2, [pc, #40]	; (800c634 <vTaskSwitchContext+0xc0>)
 800c60c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c60e:	4b09      	ldr	r3, [pc, #36]	; (800c634 <vTaskSwitchContext+0xc0>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	334c      	adds	r3, #76	; 0x4c
 800c614:	4a08      	ldr	r2, [pc, #32]	; (800c638 <vTaskSwitchContext+0xc4>)
 800c616:	6013      	str	r3, [r2, #0]
}
 800c618:	bf00      	nop
 800c61a:	371c      	adds	r7, #28
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr
 800c624:	200006d0 	.word	0x200006d0
 800c628:	200006bc 	.word	0x200006bc
 800c62c:	200006b0 	.word	0x200006b0
 800c630:	200005ac 	.word	0x200005ac
 800c634:	200005a8 	.word	0x200005a8
 800c638:	20000050 	.word	0x20000050

0800c63c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d10c      	bne.n	800c666 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c650:	b672      	cpsid	i
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	b662      	cpsie	i
 800c660:	60fb      	str	r3, [r7, #12]
}
 800c662:	bf00      	nop
 800c664:	e7fe      	b.n	800c664 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c666:	4b07      	ldr	r3, [pc, #28]	; (800c684 <vTaskPlaceOnEventList+0x48>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	3318      	adds	r3, #24
 800c66c:	4619      	mov	r1, r3
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7fe fdae 	bl	800b1d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c674:	2101      	movs	r1, #1
 800c676:	6838      	ldr	r0, [r7, #0]
 800c678:	f000 fba8 	bl	800cdcc <prvAddCurrentTaskToDelayedList>
}
 800c67c:	bf00      	nop
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	200005a8 	.word	0x200005a8

0800c688 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d10c      	bne.n	800c6b8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	b672      	cpsid	i
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	b662      	cpsie	i
 800c6b2:	60fb      	str	r3, [r7, #12]
}
 800c6b4:	bf00      	nop
 800c6b6:	e7fe      	b.n	800c6b6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	3318      	adds	r3, #24
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7fe fdc0 	bl	800b242 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6c2:	4b1d      	ldr	r3, [pc, #116]	; (800c738 <xTaskRemoveFromEventList+0xb0>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d11c      	bne.n	800c704 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	3304      	adds	r3, #4
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fe fdb7 	bl	800b242 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d8:	2201      	movs	r2, #1
 800c6da:	409a      	lsls	r2, r3
 800c6dc:	4b17      	ldr	r3, [pc, #92]	; (800c73c <xTaskRemoveFromEventList+0xb4>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	4a16      	ldr	r2, [pc, #88]	; (800c73c <xTaskRemoveFromEventList+0xb4>)
 800c6e4:	6013      	str	r3, [r2, #0]
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	4413      	add	r3, r2
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	4a13      	ldr	r2, [pc, #76]	; (800c740 <xTaskRemoveFromEventList+0xb8>)
 800c6f4:	441a      	add	r2, r3
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	3304      	adds	r3, #4
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	4610      	mov	r0, r2
 800c6fe:	f7fe fd43 	bl	800b188 <vListInsertEnd>
 800c702:	e005      	b.n	800c710 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	3318      	adds	r3, #24
 800c708:	4619      	mov	r1, r3
 800c70a:	480e      	ldr	r0, [pc, #56]	; (800c744 <xTaskRemoveFromEventList+0xbc>)
 800c70c:	f7fe fd3c 	bl	800b188 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c714:	4b0c      	ldr	r3, [pc, #48]	; (800c748 <xTaskRemoveFromEventList+0xc0>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d905      	bls.n	800c72a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c71e:	2301      	movs	r3, #1
 800c720:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c722:	4b0a      	ldr	r3, [pc, #40]	; (800c74c <xTaskRemoveFromEventList+0xc4>)
 800c724:	2201      	movs	r2, #1
 800c726:	601a      	str	r2, [r3, #0]
 800c728:	e001      	b.n	800c72e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c72a:	2300      	movs	r3, #0
 800c72c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c72e:	697b      	ldr	r3, [r7, #20]
}
 800c730:	4618      	mov	r0, r3
 800c732:	3718      	adds	r7, #24
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	200006d0 	.word	0x200006d0
 800c73c:	200006b0 	.word	0x200006b0
 800c740:	200005ac 	.word	0x200005ac
 800c744:	20000668 	.word	0x20000668
 800c748:	200005a8 	.word	0x200005a8
 800c74c:	200006bc 	.word	0x200006bc

0800c750 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c758:	4b06      	ldr	r3, [pc, #24]	; (800c774 <vTaskInternalSetTimeOutState+0x24>)
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c760:	4b05      	ldr	r3, [pc, #20]	; (800c778 <vTaskInternalSetTimeOutState+0x28>)
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	605a      	str	r2, [r3, #4]
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr
 800c774:	200006c0 	.word	0x200006c0
 800c778:	200006ac 	.word	0x200006ac

0800c77c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b088      	sub	sp, #32
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10c      	bne.n	800c7a6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c790:	b672      	cpsid	i
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	b662      	cpsie	i
 800c7a0:	613b      	str	r3, [r7, #16]
}
 800c7a2:	bf00      	nop
 800c7a4:	e7fe      	b.n	800c7a4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10c      	bne.n	800c7c6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b0:	b672      	cpsid	i
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	b662      	cpsie	i
 800c7c0:	60fb      	str	r3, [r7, #12]
}
 800c7c2:	bf00      	nop
 800c7c4:	e7fe      	b.n	800c7c4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c7c6:	f000 fc71 	bl	800d0ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c7ca:	4b1d      	ldr	r3, [pc, #116]	; (800c840 <xTaskCheckForTimeOut+0xc4>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	69ba      	ldr	r2, [r7, #24]
 800c7d6:	1ad3      	subs	r3, r2, r3
 800c7d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e2:	d102      	bne.n	800c7ea <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	61fb      	str	r3, [r7, #28]
 800c7e8:	e023      	b.n	800c832 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681a      	ldr	r2, [r3, #0]
 800c7ee:	4b15      	ldr	r3, [pc, #84]	; (800c844 <xTaskCheckForTimeOut+0xc8>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d007      	beq.n	800c806 <xTaskCheckForTimeOut+0x8a>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	69ba      	ldr	r2, [r7, #24]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d302      	bcc.n	800c806 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c800:	2301      	movs	r3, #1
 800c802:	61fb      	str	r3, [r7, #28]
 800c804:	e015      	b.n	800c832 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	697a      	ldr	r2, [r7, #20]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d20b      	bcs.n	800c828 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	1ad2      	subs	r2, r2, r3
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f7ff ff97 	bl	800c750 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c822:	2300      	movs	r3, #0
 800c824:	61fb      	str	r3, [r7, #28]
 800c826:	e004      	b.n	800c832 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	2200      	movs	r2, #0
 800c82c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c82e:	2301      	movs	r3, #1
 800c830:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c832:	f000 fc6f 	bl	800d114 <vPortExitCritical>

	return xReturn;
 800c836:	69fb      	ldr	r3, [r7, #28]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3720      	adds	r7, #32
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	200006ac 	.word	0x200006ac
 800c844:	200006c0 	.word	0x200006c0

0800c848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c848:	b480      	push	{r7}
 800c84a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c84c:	4b03      	ldr	r3, [pc, #12]	; (800c85c <vTaskMissedYield+0x14>)
 800c84e:	2201      	movs	r2, #1
 800c850:	601a      	str	r2, [r3, #0]
}
 800c852:	bf00      	nop
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	200006bc 	.word	0x200006bc

0800c860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c868:	f000 f852 	bl	800c910 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c86c:	4b06      	ldr	r3, [pc, #24]	; (800c888 <prvIdleTask+0x28>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d9f9      	bls.n	800c868 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c874:	4b05      	ldr	r3, [pc, #20]	; (800c88c <prvIdleTask+0x2c>)
 800c876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c87a:	601a      	str	r2, [r3, #0]
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c884:	e7f0      	b.n	800c868 <prvIdleTask+0x8>
 800c886:	bf00      	nop
 800c888:	200005ac 	.word	0x200005ac
 800c88c:	e000ed04 	.word	0xe000ed04

0800c890 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c896:	2300      	movs	r3, #0
 800c898:	607b      	str	r3, [r7, #4]
 800c89a:	e00c      	b.n	800c8b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	4413      	add	r3, r2
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	4a12      	ldr	r2, [pc, #72]	; (800c8f0 <prvInitialiseTaskLists+0x60>)
 800c8a8:	4413      	add	r3, r2
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fe fc3f 	bl	800b12e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	607b      	str	r3, [r7, #4]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2b06      	cmp	r3, #6
 800c8ba:	d9ef      	bls.n	800c89c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c8bc:	480d      	ldr	r0, [pc, #52]	; (800c8f4 <prvInitialiseTaskLists+0x64>)
 800c8be:	f7fe fc36 	bl	800b12e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8c2:	480d      	ldr	r0, [pc, #52]	; (800c8f8 <prvInitialiseTaskLists+0x68>)
 800c8c4:	f7fe fc33 	bl	800b12e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8c8:	480c      	ldr	r0, [pc, #48]	; (800c8fc <prvInitialiseTaskLists+0x6c>)
 800c8ca:	f7fe fc30 	bl	800b12e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8ce:	480c      	ldr	r0, [pc, #48]	; (800c900 <prvInitialiseTaskLists+0x70>)
 800c8d0:	f7fe fc2d 	bl	800b12e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c8d4:	480b      	ldr	r0, [pc, #44]	; (800c904 <prvInitialiseTaskLists+0x74>)
 800c8d6:	f7fe fc2a 	bl	800b12e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c8da:	4b0b      	ldr	r3, [pc, #44]	; (800c908 <prvInitialiseTaskLists+0x78>)
 800c8dc:	4a05      	ldr	r2, [pc, #20]	; (800c8f4 <prvInitialiseTaskLists+0x64>)
 800c8de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c8e0:	4b0a      	ldr	r3, [pc, #40]	; (800c90c <prvInitialiseTaskLists+0x7c>)
 800c8e2:	4a05      	ldr	r2, [pc, #20]	; (800c8f8 <prvInitialiseTaskLists+0x68>)
 800c8e4:	601a      	str	r2, [r3, #0]
}
 800c8e6:	bf00      	nop
 800c8e8:	3708      	adds	r7, #8
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	200005ac 	.word	0x200005ac
 800c8f4:	20000638 	.word	0x20000638
 800c8f8:	2000064c 	.word	0x2000064c
 800c8fc:	20000668 	.word	0x20000668
 800c900:	2000067c 	.word	0x2000067c
 800c904:	20000694 	.word	0x20000694
 800c908:	20000660 	.word	0x20000660
 800c90c:	20000664 	.word	0x20000664

0800c910 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c916:	e019      	b.n	800c94c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c918:	f000 fbc8 	bl	800d0ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c91c:	4b10      	ldr	r3, [pc, #64]	; (800c960 <prvCheckTasksWaitingTermination+0x50>)
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	3304      	adds	r3, #4
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fe fc8a 	bl	800b242 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c92e:	4b0d      	ldr	r3, [pc, #52]	; (800c964 <prvCheckTasksWaitingTermination+0x54>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	3b01      	subs	r3, #1
 800c934:	4a0b      	ldr	r2, [pc, #44]	; (800c964 <prvCheckTasksWaitingTermination+0x54>)
 800c936:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c938:	4b0b      	ldr	r3, [pc, #44]	; (800c968 <prvCheckTasksWaitingTermination+0x58>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	3b01      	subs	r3, #1
 800c93e:	4a0a      	ldr	r2, [pc, #40]	; (800c968 <prvCheckTasksWaitingTermination+0x58>)
 800c940:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c942:	f000 fbe7 	bl	800d114 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 f810 	bl	800c96c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c94c:	4b06      	ldr	r3, [pc, #24]	; (800c968 <prvCheckTasksWaitingTermination+0x58>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d1e1      	bne.n	800c918 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c954:	bf00      	nop
 800c956:	bf00      	nop
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	2000067c 	.word	0x2000067c
 800c964:	200006a8 	.word	0x200006a8
 800c968:	20000690 	.word	0x20000690

0800c96c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	334c      	adds	r3, #76	; 0x4c
 800c978:	4618      	mov	r0, r3
 800c97a:	f000 fead 	bl	800d6d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c984:	2b00      	cmp	r3, #0
 800c986:	d108      	bne.n	800c99a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c98c:	4618      	mov	r0, r3
 800c98e:	f000 fd3f 	bl	800d410 <vPortFree>
				vPortFree( pxTCB );
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 fd3c 	bl	800d410 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c998:	e01a      	b.n	800c9d0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d103      	bne.n	800c9ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fd33 	bl	800d410 <vPortFree>
	}
 800c9aa:	e011      	b.n	800c9d0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d00c      	beq.n	800c9d0 <prvDeleteTCB+0x64>
	__asm volatile
 800c9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ba:	b672      	cpsid	i
 800c9bc:	f383 8811 	msr	BASEPRI, r3
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	b662      	cpsie	i
 800c9ca:	60fb      	str	r3, [r7, #12]
}
 800c9cc:	bf00      	nop
 800c9ce:	e7fe      	b.n	800c9ce <prvDeleteTCB+0x62>
	}
 800c9d0:	bf00      	nop
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9de:	4b0c      	ldr	r3, [pc, #48]	; (800ca10 <prvResetNextTaskUnblockTime+0x38>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d104      	bne.n	800c9f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9e8:	4b0a      	ldr	r3, [pc, #40]	; (800ca14 <prvResetNextTaskUnblockTime+0x3c>)
 800c9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c9f0:	e008      	b.n	800ca04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9f2:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <prvResetNextTaskUnblockTime+0x38>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	68db      	ldr	r3, [r3, #12]
 800c9fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	4a04      	ldr	r2, [pc, #16]	; (800ca14 <prvResetNextTaskUnblockTime+0x3c>)
 800ca02:	6013      	str	r3, [r2, #0]
}
 800ca04:	bf00      	nop
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr
 800ca10:	20000660 	.word	0x20000660
 800ca14:	200006c8 	.word	0x200006c8

0800ca18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca1e:	4b0b      	ldr	r3, [pc, #44]	; (800ca4c <xTaskGetSchedulerState+0x34>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d102      	bne.n	800ca2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca26:	2301      	movs	r3, #1
 800ca28:	607b      	str	r3, [r7, #4]
 800ca2a:	e008      	b.n	800ca3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca2c:	4b08      	ldr	r3, [pc, #32]	; (800ca50 <xTaskGetSchedulerState+0x38>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d102      	bne.n	800ca3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca34:	2302      	movs	r3, #2
 800ca36:	607b      	str	r3, [r7, #4]
 800ca38:	e001      	b.n	800ca3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca3e:	687b      	ldr	r3, [r7, #4]
	}
 800ca40:	4618      	mov	r0, r3
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr
 800ca4c:	200006b4 	.word	0x200006b4
 800ca50:	200006d0 	.word	0x200006d0

0800ca54 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b084      	sub	sp, #16
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ca60:	2300      	movs	r3, #0
 800ca62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d069      	beq.n	800cb3e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6e:	4b36      	ldr	r3, [pc, #216]	; (800cb48 <xTaskPriorityInherit+0xf4>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d259      	bcs.n	800cb2c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	699b      	ldr	r3, [r3, #24]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	db06      	blt.n	800ca8e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca80:	4b31      	ldr	r3, [pc, #196]	; (800cb48 <xTaskPriorityInherit+0xf4>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca86:	f1c3 0207 	rsb	r2, r3, #7
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	6959      	ldr	r1, [r3, #20]
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca96:	4613      	mov	r3, r2
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	4413      	add	r3, r2
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4a2b      	ldr	r2, [pc, #172]	; (800cb4c <xTaskPriorityInherit+0xf8>)
 800caa0:	4413      	add	r3, r2
 800caa2:	4299      	cmp	r1, r3
 800caa4:	d13a      	bne.n	800cb1c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	3304      	adds	r3, #4
 800caaa:	4618      	mov	r0, r3
 800caac:	f7fe fbc9 	bl	800b242 <uxListRemove>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d115      	bne.n	800cae2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caba:	4924      	ldr	r1, [pc, #144]	; (800cb4c <xTaskPriorityInherit+0xf8>)
 800cabc:	4613      	mov	r3, r2
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	4413      	add	r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	440b      	add	r3, r1
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d10a      	bne.n	800cae2 <xTaskPriorityInherit+0x8e>
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad0:	2201      	movs	r2, #1
 800cad2:	fa02 f303 	lsl.w	r3, r2, r3
 800cad6:	43da      	mvns	r2, r3
 800cad8:	4b1d      	ldr	r3, [pc, #116]	; (800cb50 <xTaskPriorityInherit+0xfc>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4013      	ands	r3, r2
 800cade:	4a1c      	ldr	r2, [pc, #112]	; (800cb50 <xTaskPriorityInherit+0xfc>)
 800cae0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cae2:	4b19      	ldr	r3, [pc, #100]	; (800cb48 <xTaskPriorityInherit+0xf4>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caf0:	2201      	movs	r2, #1
 800caf2:	409a      	lsls	r2, r3
 800caf4:	4b16      	ldr	r3, [pc, #88]	; (800cb50 <xTaskPriorityInherit+0xfc>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	4a15      	ldr	r2, [pc, #84]	; (800cb50 <xTaskPriorityInherit+0xfc>)
 800cafc:	6013      	str	r3, [r2, #0]
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb02:	4613      	mov	r3, r2
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	4413      	add	r3, r2
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	4a10      	ldr	r2, [pc, #64]	; (800cb4c <xTaskPriorityInherit+0xf8>)
 800cb0c:	441a      	add	r2, r3
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	3304      	adds	r3, #4
 800cb12:	4619      	mov	r1, r3
 800cb14:	4610      	mov	r0, r2
 800cb16:	f7fe fb37 	bl	800b188 <vListInsertEnd>
 800cb1a:	e004      	b.n	800cb26 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cb1c:	4b0a      	ldr	r3, [pc, #40]	; (800cb48 <xTaskPriorityInherit+0xf4>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cb26:	2301      	movs	r3, #1
 800cb28:	60fb      	str	r3, [r7, #12]
 800cb2a:	e008      	b.n	800cb3e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb30:	4b05      	ldr	r3, [pc, #20]	; (800cb48 <xTaskPriorityInherit+0xf4>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d201      	bcs.n	800cb3e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
	}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3710      	adds	r7, #16
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	200005a8 	.word	0x200005a8
 800cb4c:	200005ac 	.word	0x200005ac
 800cb50:	200006b0 	.word	0x200006b0

0800cb54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb60:	2300      	movs	r3, #0
 800cb62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d072      	beq.n	800cc50 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb6a:	4b3c      	ldr	r3, [pc, #240]	; (800cc5c <xTaskPriorityDisinherit+0x108>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	693a      	ldr	r2, [r7, #16]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d00c      	beq.n	800cb8e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800cb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb78:	b672      	cpsid	i
 800cb7a:	f383 8811 	msr	BASEPRI, r3
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	b662      	cpsie	i
 800cb88:	60fb      	str	r3, [r7, #12]
}
 800cb8a:	bf00      	nop
 800cb8c:	e7fe      	b.n	800cb8c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10c      	bne.n	800cbb0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800cb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9a:	b672      	cpsid	i
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	b662      	cpsie	i
 800cbaa:	60bb      	str	r3, [r7, #8]
}
 800cbac:	bf00      	nop
 800cbae:	e7fe      	b.n	800cbae <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbb4:	1e5a      	subs	r2, r3, #1
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d044      	beq.n	800cc50 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d140      	bne.n	800cc50 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	3304      	adds	r3, #4
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fe fb35 	bl	800b242 <uxListRemove>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d115      	bne.n	800cc0a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe2:	491f      	ldr	r1, [pc, #124]	; (800cc60 <xTaskPriorityDisinherit+0x10c>)
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4413      	add	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	440b      	add	r3, r1
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10a      	bne.n	800cc0a <xTaskPriorityDisinherit+0xb6>
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	fa02 f303 	lsl.w	r3, r2, r3
 800cbfe:	43da      	mvns	r2, r3
 800cc00:	4b18      	ldr	r3, [pc, #96]	; (800cc64 <xTaskPriorityDisinherit+0x110>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4013      	ands	r3, r2
 800cc06:	4a17      	ldr	r2, [pc, #92]	; (800cc64 <xTaskPriorityDisinherit+0x110>)
 800cc08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc0a:	693b      	ldr	r3, [r7, #16]
 800cc0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc16:	f1c3 0207 	rsb	r2, r3, #7
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc22:	2201      	movs	r2, #1
 800cc24:	409a      	lsls	r2, r3
 800cc26:	4b0f      	ldr	r3, [pc, #60]	; (800cc64 <xTaskPriorityDisinherit+0x110>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4313      	orrs	r3, r2
 800cc2c:	4a0d      	ldr	r2, [pc, #52]	; (800cc64 <xTaskPriorityDisinherit+0x110>)
 800cc2e:	6013      	str	r3, [r2, #0]
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc34:	4613      	mov	r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	4413      	add	r3, r2
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	4a08      	ldr	r2, [pc, #32]	; (800cc60 <xTaskPriorityDisinherit+0x10c>)
 800cc3e:	441a      	add	r2, r3
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	3304      	adds	r3, #4
 800cc44:	4619      	mov	r1, r3
 800cc46:	4610      	mov	r0, r2
 800cc48:	f7fe fa9e 	bl	800b188 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc50:	697b      	ldr	r3, [r7, #20]
	}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3718      	adds	r7, #24
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	200005a8 	.word	0x200005a8
 800cc60:	200005ac 	.word	0x200005ac
 800cc64:	200006b0 	.word	0x200006b0

0800cc68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b088      	sub	sp, #32
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cc76:	2301      	movs	r3, #1
 800cc78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f000 8087 	beq.w	800cd90 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d10c      	bne.n	800cca4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800cc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8e:	b672      	cpsid	i
 800cc90:	f383 8811 	msr	BASEPRI, r3
 800cc94:	f3bf 8f6f 	isb	sy
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	b662      	cpsie	i
 800cc9e:	60fb      	str	r3, [r7, #12]
}
 800cca0:	bf00      	nop
 800cca2:	e7fe      	b.n	800cca2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cca4:	69bb      	ldr	r3, [r7, #24]
 800cca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cca8:	683a      	ldr	r2, [r7, #0]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d902      	bls.n	800ccb4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	61fb      	str	r3, [r7, #28]
 800ccb2:	e002      	b.n	800ccba <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccb8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ccba:	69bb      	ldr	r3, [r7, #24]
 800ccbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccbe:	69fa      	ldr	r2, [r7, #28]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d065      	beq.n	800cd90 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ccc4:	69bb      	ldr	r3, [r7, #24]
 800ccc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccc8:	697a      	ldr	r2, [r7, #20]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d160      	bne.n	800cd90 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ccce:	4b32      	ldr	r3, [pc, #200]	; (800cd98 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	69ba      	ldr	r2, [r7, #24]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d10c      	bne.n	800ccf2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800ccd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccdc:	b672      	cpsid	i
 800ccde:	f383 8811 	msr	BASEPRI, r3
 800cce2:	f3bf 8f6f 	isb	sy
 800cce6:	f3bf 8f4f 	dsb	sy
 800ccea:	b662      	cpsie	i
 800ccec:	60bb      	str	r3, [r7, #8]
}
 800ccee:	bf00      	nop
 800ccf0:	e7fe      	b.n	800ccf0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	69fa      	ldr	r2, [r7, #28]
 800ccfc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	699b      	ldr	r3, [r3, #24]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	db04      	blt.n	800cd10 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	f1c3 0207 	rsb	r2, r3, #7
 800cd0c:	69bb      	ldr	r3, [r7, #24]
 800cd0e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	6959      	ldr	r1, [r3, #20]
 800cd14:	693a      	ldr	r2, [r7, #16]
 800cd16:	4613      	mov	r3, r2
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	4413      	add	r3, r2
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4a1f      	ldr	r2, [pc, #124]	; (800cd9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cd20:	4413      	add	r3, r2
 800cd22:	4299      	cmp	r1, r3
 800cd24:	d134      	bne.n	800cd90 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd26:	69bb      	ldr	r3, [r7, #24]
 800cd28:	3304      	adds	r3, #4
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7fe fa89 	bl	800b242 <uxListRemove>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d115      	bne.n	800cd62 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd3a:	4918      	ldr	r1, [pc, #96]	; (800cd9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	440b      	add	r3, r1
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d10a      	bne.n	800cd62 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd50:	2201      	movs	r2, #1
 800cd52:	fa02 f303 	lsl.w	r3, r2, r3
 800cd56:	43da      	mvns	r2, r3
 800cd58:	4b11      	ldr	r3, [pc, #68]	; (800cda0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	4a10      	ldr	r2, [pc, #64]	; (800cda0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cd60:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd66:	2201      	movs	r2, #1
 800cd68:	409a      	lsls	r2, r3
 800cd6a:	4b0d      	ldr	r3, [pc, #52]	; (800cda0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4313      	orrs	r3, r2
 800cd70:	4a0b      	ldr	r2, [pc, #44]	; (800cda0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800cd72:	6013      	str	r3, [r2, #0]
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd78:	4613      	mov	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	4a06      	ldr	r2, [pc, #24]	; (800cd9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cd82:	441a      	add	r2, r3
 800cd84:	69bb      	ldr	r3, [r7, #24]
 800cd86:	3304      	adds	r3, #4
 800cd88:	4619      	mov	r1, r3
 800cd8a:	4610      	mov	r0, r2
 800cd8c:	f7fe f9fc 	bl	800b188 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd90:	bf00      	nop
 800cd92:	3720      	adds	r7, #32
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	200005a8 	.word	0x200005a8
 800cd9c:	200005ac 	.word	0x200005ac
 800cda0:	200006b0 	.word	0x200006b0

0800cda4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cda4:	b480      	push	{r7}
 800cda6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cda8:	4b07      	ldr	r3, [pc, #28]	; (800cdc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d004      	beq.n	800cdba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cdb0:	4b05      	ldr	r3, [pc, #20]	; (800cdc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdb6:	3201      	adds	r2, #1
 800cdb8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800cdba:	4b03      	ldr	r3, [pc, #12]	; (800cdc8 <pvTaskIncrementMutexHeldCount+0x24>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
	}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr
 800cdc8:	200005a8 	.word	0x200005a8

0800cdcc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cdd6:	4b29      	ldr	r3, [pc, #164]	; (800ce7c <prvAddCurrentTaskToDelayedList+0xb0>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cddc:	4b28      	ldr	r3, [pc, #160]	; (800ce80 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3304      	adds	r3, #4
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7fe fa2d 	bl	800b242 <uxListRemove>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d10b      	bne.n	800ce06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cdee:	4b24      	ldr	r3, [pc, #144]	; (800ce80 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	fa02 f303 	lsl.w	r3, r2, r3
 800cdfa:	43da      	mvns	r2, r3
 800cdfc:	4b21      	ldr	r3, [pc, #132]	; (800ce84 <prvAddCurrentTaskToDelayedList+0xb8>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4013      	ands	r3, r2
 800ce02:	4a20      	ldr	r2, [pc, #128]	; (800ce84 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ce04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce0c:	d10a      	bne.n	800ce24 <prvAddCurrentTaskToDelayedList+0x58>
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d007      	beq.n	800ce24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce14:	4b1a      	ldr	r3, [pc, #104]	; (800ce80 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	3304      	adds	r3, #4
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	481a      	ldr	r0, [pc, #104]	; (800ce88 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ce1e:	f7fe f9b3 	bl	800b188 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ce22:	e026      	b.n	800ce72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	4413      	add	r3, r2
 800ce2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ce2c:	4b14      	ldr	r3, [pc, #80]	; (800ce80 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	68ba      	ldr	r2, [r7, #8]
 800ce32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d209      	bcs.n	800ce50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce3c:	4b13      	ldr	r3, [pc, #76]	; (800ce8c <prvAddCurrentTaskToDelayedList+0xc0>)
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	4b0f      	ldr	r3, [pc, #60]	; (800ce80 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3304      	adds	r3, #4
 800ce46:	4619      	mov	r1, r3
 800ce48:	4610      	mov	r0, r2
 800ce4a:	f7fe f9c1 	bl	800b1d0 <vListInsert>
}
 800ce4e:	e010      	b.n	800ce72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce50:	4b0f      	ldr	r3, [pc, #60]	; (800ce90 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	4b0a      	ldr	r3, [pc, #40]	; (800ce80 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	3304      	adds	r3, #4
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	f7fe f9b7 	bl	800b1d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ce62:	4b0c      	ldr	r3, [pc, #48]	; (800ce94 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d202      	bcs.n	800ce72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ce6c:	4a09      	ldr	r2, [pc, #36]	; (800ce94 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	6013      	str	r3, [r2, #0]
}
 800ce72:	bf00      	nop
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	200006ac 	.word	0x200006ac
 800ce80:	200005a8 	.word	0x200005a8
 800ce84:	200006b0 	.word	0x200006b0
 800ce88:	20000694 	.word	0x20000694
 800ce8c:	20000664 	.word	0x20000664
 800ce90:	20000660 	.word	0x20000660
 800ce94:	200006c8 	.word	0x200006c8

0800ce98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	60f8      	str	r0, [r7, #12]
 800cea0:	60b9      	str	r1, [r7, #8]
 800cea2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	3b04      	subs	r3, #4
 800cea8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ceb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	3b04      	subs	r3, #4
 800ceb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	f023 0201 	bic.w	r2, r3, #1
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	3b04      	subs	r3, #4
 800cec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cec8:	4a0c      	ldr	r2, [pc, #48]	; (800cefc <pxPortInitialiseStack+0x64>)
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	3b14      	subs	r3, #20
 800ced2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	3b04      	subs	r3, #4
 800cede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f06f 0202 	mvn.w	r2, #2
 800cee6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	3b20      	subs	r3, #32
 800ceec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ceee:	68fb      	ldr	r3, [r7, #12]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3714      	adds	r7, #20
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr
 800cefc:	0800cf01 	.word	0x0800cf01

0800cf00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cf06:	2300      	movs	r3, #0
 800cf08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cf0a:	4b14      	ldr	r3, [pc, #80]	; (800cf5c <prvTaskExitError+0x5c>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf12:	d00c      	beq.n	800cf2e <prvTaskExitError+0x2e>
	__asm volatile
 800cf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf18:	b672      	cpsid	i
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	b662      	cpsie	i
 800cf28:	60fb      	str	r3, [r7, #12]
}
 800cf2a:	bf00      	nop
 800cf2c:	e7fe      	b.n	800cf2c <prvTaskExitError+0x2c>
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf32:	b672      	cpsid	i
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	b662      	cpsie	i
 800cf42:	60bb      	str	r3, [r7, #8]
}
 800cf44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cf46:	bf00      	nop
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d0fc      	beq.n	800cf48 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf4e:	bf00      	nop
 800cf50:	bf00      	nop
 800cf52:	3714      	adds	r7, #20
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr
 800cf5c:	2000004c 	.word	0x2000004c

0800cf60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cf60:	4b07      	ldr	r3, [pc, #28]	; (800cf80 <pxCurrentTCBConst2>)
 800cf62:	6819      	ldr	r1, [r3, #0]
 800cf64:	6808      	ldr	r0, [r1, #0]
 800cf66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6a:	f380 8809 	msr	PSP, r0
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f04f 0000 	mov.w	r0, #0
 800cf76:	f380 8811 	msr	BASEPRI, r0
 800cf7a:	4770      	bx	lr
 800cf7c:	f3af 8000 	nop.w

0800cf80 <pxCurrentTCBConst2>:
 800cf80:	200005a8 	.word	0x200005a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cf84:	bf00      	nop
 800cf86:	bf00      	nop

0800cf88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cf88:	4808      	ldr	r0, [pc, #32]	; (800cfac <prvPortStartFirstTask+0x24>)
 800cf8a:	6800      	ldr	r0, [r0, #0]
 800cf8c:	6800      	ldr	r0, [r0, #0]
 800cf8e:	f380 8808 	msr	MSP, r0
 800cf92:	f04f 0000 	mov.w	r0, #0
 800cf96:	f380 8814 	msr	CONTROL, r0
 800cf9a:	b662      	cpsie	i
 800cf9c:	b661      	cpsie	f
 800cf9e:	f3bf 8f4f 	dsb	sy
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	df00      	svc	0
 800cfa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cfaa:	bf00      	nop
 800cfac:	e000ed08 	.word	0xe000ed08

0800cfb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cfb6:	4b37      	ldr	r3, [pc, #220]	; (800d094 <xPortStartScheduler+0xe4>)
 800cfb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	22ff      	movs	r2, #255	; 0xff
 800cfc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cfd0:	78fb      	ldrb	r3, [r7, #3]
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cfd8:	b2da      	uxtb	r2, r3
 800cfda:	4b2f      	ldr	r3, [pc, #188]	; (800d098 <xPortStartScheduler+0xe8>)
 800cfdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cfde:	4b2f      	ldr	r3, [pc, #188]	; (800d09c <xPortStartScheduler+0xec>)
 800cfe0:	2207      	movs	r2, #7
 800cfe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cfe4:	e009      	b.n	800cffa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cfe6:	4b2d      	ldr	r3, [pc, #180]	; (800d09c <xPortStartScheduler+0xec>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	3b01      	subs	r3, #1
 800cfec:	4a2b      	ldr	r2, [pc, #172]	; (800d09c <xPortStartScheduler+0xec>)
 800cfee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cff0:	78fb      	ldrb	r3, [r7, #3]
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	005b      	lsls	r3, r3, #1
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cffa:	78fb      	ldrb	r3, [r7, #3]
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d002:	2b80      	cmp	r3, #128	; 0x80
 800d004:	d0ef      	beq.n	800cfe6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d006:	4b25      	ldr	r3, [pc, #148]	; (800d09c <xPortStartScheduler+0xec>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f1c3 0307 	rsb	r3, r3, #7
 800d00e:	2b04      	cmp	r3, #4
 800d010:	d00c      	beq.n	800d02c <xPortStartScheduler+0x7c>
	__asm volatile
 800d012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d016:	b672      	cpsid	i
 800d018:	f383 8811 	msr	BASEPRI, r3
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f3bf 8f4f 	dsb	sy
 800d024:	b662      	cpsie	i
 800d026:	60bb      	str	r3, [r7, #8]
}
 800d028:	bf00      	nop
 800d02a:	e7fe      	b.n	800d02a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d02c:	4b1b      	ldr	r3, [pc, #108]	; (800d09c <xPortStartScheduler+0xec>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	021b      	lsls	r3, r3, #8
 800d032:	4a1a      	ldr	r2, [pc, #104]	; (800d09c <xPortStartScheduler+0xec>)
 800d034:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d036:	4b19      	ldr	r3, [pc, #100]	; (800d09c <xPortStartScheduler+0xec>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d03e:	4a17      	ldr	r2, [pc, #92]	; (800d09c <xPortStartScheduler+0xec>)
 800d040:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	b2da      	uxtb	r2, r3
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d04a:	4b15      	ldr	r3, [pc, #84]	; (800d0a0 <xPortStartScheduler+0xf0>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4a14      	ldr	r2, [pc, #80]	; (800d0a0 <xPortStartScheduler+0xf0>)
 800d050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d054:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d056:	4b12      	ldr	r3, [pc, #72]	; (800d0a0 <xPortStartScheduler+0xf0>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a11      	ldr	r2, [pc, #68]	; (800d0a0 <xPortStartScheduler+0xf0>)
 800d05c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d060:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d062:	f000 f8dd 	bl	800d220 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d066:	4b0f      	ldr	r3, [pc, #60]	; (800d0a4 <xPortStartScheduler+0xf4>)
 800d068:	2200      	movs	r2, #0
 800d06a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d06c:	f000 f8fc 	bl	800d268 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d070:	4b0d      	ldr	r3, [pc, #52]	; (800d0a8 <xPortStartScheduler+0xf8>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a0c      	ldr	r2, [pc, #48]	; (800d0a8 <xPortStartScheduler+0xf8>)
 800d076:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d07a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d07c:	f7ff ff84 	bl	800cf88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d080:	f7ff fa78 	bl	800c574 <vTaskSwitchContext>
	prvTaskExitError();
 800d084:	f7ff ff3c 	bl	800cf00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d088:	2300      	movs	r3, #0
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	e000e400 	.word	0xe000e400
 800d098:	200006d4 	.word	0x200006d4
 800d09c:	200006d8 	.word	0x200006d8
 800d0a0:	e000ed20 	.word	0xe000ed20
 800d0a4:	2000004c 	.word	0x2000004c
 800d0a8:	e000ef34 	.word	0xe000ef34

0800d0ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
	__asm volatile
 800d0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b6:	b672      	cpsid	i
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	b662      	cpsie	i
 800d0c6:	607b      	str	r3, [r7, #4]
}
 800d0c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d0ca:	4b10      	ldr	r3, [pc, #64]	; (800d10c <vPortEnterCritical+0x60>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	4a0e      	ldr	r2, [pc, #56]	; (800d10c <vPortEnterCritical+0x60>)
 800d0d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d0d4:	4b0d      	ldr	r3, [pc, #52]	; (800d10c <vPortEnterCritical+0x60>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d111      	bne.n	800d100 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d0dc:	4b0c      	ldr	r3, [pc, #48]	; (800d110 <vPortEnterCritical+0x64>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	b2db      	uxtb	r3, r3
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00c      	beq.n	800d100 <vPortEnterCritical+0x54>
	__asm volatile
 800d0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ea:	b672      	cpsid	i
 800d0ec:	f383 8811 	msr	BASEPRI, r3
 800d0f0:	f3bf 8f6f 	isb	sy
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	b662      	cpsie	i
 800d0fa:	603b      	str	r3, [r7, #0]
}
 800d0fc:	bf00      	nop
 800d0fe:	e7fe      	b.n	800d0fe <vPortEnterCritical+0x52>
	}
}
 800d100:	bf00      	nop
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr
 800d10c:	2000004c 	.word	0x2000004c
 800d110:	e000ed04 	.word	0xe000ed04

0800d114 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d11a:	4b13      	ldr	r3, [pc, #76]	; (800d168 <vPortExitCritical+0x54>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d10c      	bne.n	800d13c <vPortExitCritical+0x28>
	__asm volatile
 800d122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d126:	b672      	cpsid	i
 800d128:	f383 8811 	msr	BASEPRI, r3
 800d12c:	f3bf 8f6f 	isb	sy
 800d130:	f3bf 8f4f 	dsb	sy
 800d134:	b662      	cpsie	i
 800d136:	607b      	str	r3, [r7, #4]
}
 800d138:	bf00      	nop
 800d13a:	e7fe      	b.n	800d13a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d13c:	4b0a      	ldr	r3, [pc, #40]	; (800d168 <vPortExitCritical+0x54>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	3b01      	subs	r3, #1
 800d142:	4a09      	ldr	r2, [pc, #36]	; (800d168 <vPortExitCritical+0x54>)
 800d144:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d146:	4b08      	ldr	r3, [pc, #32]	; (800d168 <vPortExitCritical+0x54>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d105      	bne.n	800d15a <vPortExitCritical+0x46>
 800d14e:	2300      	movs	r3, #0
 800d150:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d158:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d15a:	bf00      	nop
 800d15c:	370c      	adds	r7, #12
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr
 800d166:	bf00      	nop
 800d168:	2000004c 	.word	0x2000004c
 800d16c:	00000000 	.word	0x00000000

0800d170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d170:	f3ef 8009 	mrs	r0, PSP
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	4b15      	ldr	r3, [pc, #84]	; (800d1d0 <pxCurrentTCBConst>)
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	f01e 0f10 	tst.w	lr, #16
 800d180:	bf08      	it	eq
 800d182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18a:	6010      	str	r0, [r2, #0]
 800d18c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d190:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d194:	b672      	cpsid	i
 800d196:	f380 8811 	msr	BASEPRI, r0
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	b662      	cpsie	i
 800d1a4:	f7ff f9e6 	bl	800c574 <vTaskSwitchContext>
 800d1a8:	f04f 0000 	mov.w	r0, #0
 800d1ac:	f380 8811 	msr	BASEPRI, r0
 800d1b0:	bc09      	pop	{r0, r3}
 800d1b2:	6819      	ldr	r1, [r3, #0]
 800d1b4:	6808      	ldr	r0, [r1, #0]
 800d1b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1ba:	f01e 0f10 	tst.w	lr, #16
 800d1be:	bf08      	it	eq
 800d1c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d1c4:	f380 8809 	msr	PSP, r0
 800d1c8:	f3bf 8f6f 	isb	sy
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop

0800d1d0 <pxCurrentTCBConst>:
 800d1d0:	200005a8 	.word	0x200005a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d1d4:	bf00      	nop
 800d1d6:	bf00      	nop

0800d1d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e2:	b672      	cpsid	i
 800d1e4:	f383 8811 	msr	BASEPRI, r3
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	b662      	cpsie	i
 800d1f2:	607b      	str	r3, [r7, #4]
}
 800d1f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d1f6:	f7ff f903 	bl	800c400 <xTaskIncrementTick>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d003      	beq.n	800d208 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d200:	4b06      	ldr	r3, [pc, #24]	; (800d21c <SysTick_Handler+0x44>)
 800d202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d206:	601a      	str	r2, [r3, #0]
 800d208:	2300      	movs	r3, #0
 800d20a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	f383 8811 	msr	BASEPRI, r3
}
 800d212:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d214:	bf00      	nop
 800d216:	3708      	adds	r7, #8
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	e000ed04 	.word	0xe000ed04

0800d220 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d220:	b480      	push	{r7}
 800d222:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d224:	4b0b      	ldr	r3, [pc, #44]	; (800d254 <vPortSetupTimerInterrupt+0x34>)
 800d226:	2200      	movs	r2, #0
 800d228:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d22a:	4b0b      	ldr	r3, [pc, #44]	; (800d258 <vPortSetupTimerInterrupt+0x38>)
 800d22c:	2200      	movs	r2, #0
 800d22e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d230:	4b0a      	ldr	r3, [pc, #40]	; (800d25c <vPortSetupTimerInterrupt+0x3c>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a0a      	ldr	r2, [pc, #40]	; (800d260 <vPortSetupTimerInterrupt+0x40>)
 800d236:	fba2 2303 	umull	r2, r3, r2, r3
 800d23a:	099b      	lsrs	r3, r3, #6
 800d23c:	4a09      	ldr	r2, [pc, #36]	; (800d264 <vPortSetupTimerInterrupt+0x44>)
 800d23e:	3b01      	subs	r3, #1
 800d240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d242:	4b04      	ldr	r3, [pc, #16]	; (800d254 <vPortSetupTimerInterrupt+0x34>)
 800d244:	2207      	movs	r2, #7
 800d246:	601a      	str	r2, [r3, #0]
}
 800d248:	bf00      	nop
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	e000e010 	.word	0xe000e010
 800d258:	e000e018 	.word	0xe000e018
 800d25c:	20000040 	.word	0x20000040
 800d260:	10624dd3 	.word	0x10624dd3
 800d264:	e000e014 	.word	0xe000e014

0800d268 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d268:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d278 <vPortEnableVFP+0x10>
 800d26c:	6801      	ldr	r1, [r0, #0]
 800d26e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d272:	6001      	str	r1, [r0, #0]
 800d274:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d276:	bf00      	nop
 800d278:	e000ed88 	.word	0xe000ed88

0800d27c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b08a      	sub	sp, #40	; 0x28
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d284:	2300      	movs	r3, #0
 800d286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d288:	f7ff f80e 	bl	800c2a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d28c:	4b5b      	ldr	r3, [pc, #364]	; (800d3fc <pvPortMalloc+0x180>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d101      	bne.n	800d298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d294:	f000 f91a 	bl	800d4cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d298:	4b59      	ldr	r3, [pc, #356]	; (800d400 <pvPortMalloc+0x184>)
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4013      	ands	r3, r2
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	f040 8092 	bne.w	800d3ca <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d01f      	beq.n	800d2ec <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d2ac:	2208      	movs	r2, #8
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f003 0307 	and.w	r3, r3, #7
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d016      	beq.n	800d2ec <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f023 0307 	bic.w	r3, r3, #7
 800d2c4:	3308      	adds	r3, #8
 800d2c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f003 0307 	and.w	r3, r3, #7
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d00c      	beq.n	800d2ec <pvPortMalloc+0x70>
	__asm volatile
 800d2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d6:	b672      	cpsid	i
 800d2d8:	f383 8811 	msr	BASEPRI, r3
 800d2dc:	f3bf 8f6f 	isb	sy
 800d2e0:	f3bf 8f4f 	dsb	sy
 800d2e4:	b662      	cpsie	i
 800d2e6:	617b      	str	r3, [r7, #20]
}
 800d2e8:	bf00      	nop
 800d2ea:	e7fe      	b.n	800d2ea <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d06b      	beq.n	800d3ca <pvPortMalloc+0x14e>
 800d2f2:	4b44      	ldr	r3, [pc, #272]	; (800d404 <pvPortMalloc+0x188>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	687a      	ldr	r2, [r7, #4]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d866      	bhi.n	800d3ca <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d2fc:	4b42      	ldr	r3, [pc, #264]	; (800d408 <pvPortMalloc+0x18c>)
 800d2fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d300:	4b41      	ldr	r3, [pc, #260]	; (800d408 <pvPortMalloc+0x18c>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d306:	e004      	b.n	800d312 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d903      	bls.n	800d324 <pvPortMalloc+0xa8>
 800d31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d1f1      	bne.n	800d308 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d324:	4b35      	ldr	r3, [pc, #212]	; (800d3fc <pvPortMalloc+0x180>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d04d      	beq.n	800d3ca <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d32e:	6a3b      	ldr	r3, [r7, #32]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2208      	movs	r2, #8
 800d334:	4413      	add	r3, r2
 800d336:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	6a3b      	ldr	r3, [r7, #32]
 800d33e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d342:	685a      	ldr	r2, [r3, #4]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	1ad2      	subs	r2, r2, r3
 800d348:	2308      	movs	r3, #8
 800d34a:	005b      	lsls	r3, r3, #1
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d921      	bls.n	800d394 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4413      	add	r3, r2
 800d356:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	f003 0307 	and.w	r3, r3, #7
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d00c      	beq.n	800d37c <pvPortMalloc+0x100>
	__asm volatile
 800d362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d366:	b672      	cpsid	i
 800d368:	f383 8811 	msr	BASEPRI, r3
 800d36c:	f3bf 8f6f 	isb	sy
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	b662      	cpsie	i
 800d376:	613b      	str	r3, [r7, #16]
}
 800d378:	bf00      	nop
 800d37a:	e7fe      	b.n	800d37a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d37e:	685a      	ldr	r2, [r3, #4]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	1ad2      	subs	r2, r2, r3
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d38e:	69b8      	ldr	r0, [r7, #24]
 800d390:	f000 f8fe 	bl	800d590 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d394:	4b1b      	ldr	r3, [pc, #108]	; (800d404 <pvPortMalloc+0x188>)
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	1ad3      	subs	r3, r2, r3
 800d39e:	4a19      	ldr	r2, [pc, #100]	; (800d404 <pvPortMalloc+0x188>)
 800d3a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d3a2:	4b18      	ldr	r3, [pc, #96]	; (800d404 <pvPortMalloc+0x188>)
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	4b19      	ldr	r3, [pc, #100]	; (800d40c <pvPortMalloc+0x190>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d203      	bcs.n	800d3b6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d3ae:	4b15      	ldr	r3, [pc, #84]	; (800d404 <pvPortMalloc+0x188>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4a16      	ldr	r2, [pc, #88]	; (800d40c <pvPortMalloc+0x190>)
 800d3b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b8:	685a      	ldr	r2, [r3, #4]
 800d3ba:	4b11      	ldr	r3, [pc, #68]	; (800d400 <pvPortMalloc+0x184>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	431a      	orrs	r2, r3
 800d3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d3ca:	f7fe ff7b 	bl	800c2c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	f003 0307 	and.w	r3, r3, #7
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d00c      	beq.n	800d3f2 <pvPortMalloc+0x176>
	__asm volatile
 800d3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3dc:	b672      	cpsid	i
 800d3de:	f383 8811 	msr	BASEPRI, r3
 800d3e2:	f3bf 8f6f 	isb	sy
 800d3e6:	f3bf 8f4f 	dsb	sy
 800d3ea:	b662      	cpsie	i
 800d3ec:	60fb      	str	r3, [r7, #12]
}
 800d3ee:	bf00      	nop
 800d3f0:	e7fe      	b.n	800d3f0 <pvPortMalloc+0x174>
	return pvReturn;
 800d3f2:	69fb      	ldr	r3, [r7, #28]
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3728      	adds	r7, #40	; 0x28
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	20007ee4 	.word	0x20007ee4
 800d400:	20007ef0 	.word	0x20007ef0
 800d404:	20007ee8 	.word	0x20007ee8
 800d408:	20007edc 	.word	0x20007edc
 800d40c:	20007eec 	.word	0x20007eec

0800d410 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b086      	sub	sp, #24
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d04c      	beq.n	800d4bc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d422:	2308      	movs	r3, #8
 800d424:	425b      	negs	r3, r3
 800d426:	697a      	ldr	r2, [r7, #20]
 800d428:	4413      	add	r3, r2
 800d42a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	685a      	ldr	r2, [r3, #4]
 800d434:	4b23      	ldr	r3, [pc, #140]	; (800d4c4 <vPortFree+0xb4>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4013      	ands	r3, r2
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d10c      	bne.n	800d458 <vPortFree+0x48>
	__asm volatile
 800d43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d442:	b672      	cpsid	i
 800d444:	f383 8811 	msr	BASEPRI, r3
 800d448:	f3bf 8f6f 	isb	sy
 800d44c:	f3bf 8f4f 	dsb	sy
 800d450:	b662      	cpsie	i
 800d452:	60fb      	str	r3, [r7, #12]
}
 800d454:	bf00      	nop
 800d456:	e7fe      	b.n	800d456 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d00c      	beq.n	800d47a <vPortFree+0x6a>
	__asm volatile
 800d460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d464:	b672      	cpsid	i
 800d466:	f383 8811 	msr	BASEPRI, r3
 800d46a:	f3bf 8f6f 	isb	sy
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	b662      	cpsie	i
 800d474:	60bb      	str	r3, [r7, #8]
}
 800d476:	bf00      	nop
 800d478:	e7fe      	b.n	800d478 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	685a      	ldr	r2, [r3, #4]
 800d47e:	4b11      	ldr	r3, [pc, #68]	; (800d4c4 <vPortFree+0xb4>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	4013      	ands	r3, r2
 800d484:	2b00      	cmp	r3, #0
 800d486:	d019      	beq.n	800d4bc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d115      	bne.n	800d4bc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	685a      	ldr	r2, [r3, #4]
 800d494:	4b0b      	ldr	r3, [pc, #44]	; (800d4c4 <vPortFree+0xb4>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	43db      	mvns	r3, r3
 800d49a:	401a      	ands	r2, r3
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d4a0:	f7fe ff02 	bl	800c2a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	685a      	ldr	r2, [r3, #4]
 800d4a8:	4b07      	ldr	r3, [pc, #28]	; (800d4c8 <vPortFree+0xb8>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	4a06      	ldr	r2, [pc, #24]	; (800d4c8 <vPortFree+0xb8>)
 800d4b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d4b2:	6938      	ldr	r0, [r7, #16]
 800d4b4:	f000 f86c 	bl	800d590 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d4b8:	f7fe ff04 	bl	800c2c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d4bc:	bf00      	nop
 800d4be:	3718      	adds	r7, #24
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	20007ef0 	.word	0x20007ef0
 800d4c8:	20007ee8 	.word	0x20007ee8

0800d4cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d4d2:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800d4d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d4d8:	4b27      	ldr	r3, [pc, #156]	; (800d578 <prvHeapInit+0xac>)
 800d4da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f003 0307 	and.w	r3, r3, #7
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00c      	beq.n	800d500 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	3307      	adds	r3, #7
 800d4ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f023 0307 	bic.w	r3, r3, #7
 800d4f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d4f4:	68ba      	ldr	r2, [r7, #8]
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	1ad3      	subs	r3, r2, r3
 800d4fa:	4a1f      	ldr	r2, [pc, #124]	; (800d578 <prvHeapInit+0xac>)
 800d4fc:	4413      	add	r3, r2
 800d4fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d504:	4a1d      	ldr	r2, [pc, #116]	; (800d57c <prvHeapInit+0xb0>)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d50a:	4b1c      	ldr	r3, [pc, #112]	; (800d57c <prvHeapInit+0xb0>)
 800d50c:	2200      	movs	r2, #0
 800d50e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	68ba      	ldr	r2, [r7, #8]
 800d514:	4413      	add	r3, r2
 800d516:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d518:	2208      	movs	r2, #8
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	1a9b      	subs	r3, r3, r2
 800d51e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f023 0307 	bic.w	r3, r3, #7
 800d526:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	4a15      	ldr	r2, [pc, #84]	; (800d580 <prvHeapInit+0xb4>)
 800d52c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d52e:	4b14      	ldr	r3, [pc, #80]	; (800d580 <prvHeapInit+0xb4>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2200      	movs	r2, #0
 800d534:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d536:	4b12      	ldr	r3, [pc, #72]	; (800d580 <prvHeapInit+0xb4>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2200      	movs	r2, #0
 800d53c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	1ad2      	subs	r2, r2, r3
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d54c:	4b0c      	ldr	r3, [pc, #48]	; (800d580 <prvHeapInit+0xb4>)
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	4a0a      	ldr	r2, [pc, #40]	; (800d584 <prvHeapInit+0xb8>)
 800d55a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	4a09      	ldr	r2, [pc, #36]	; (800d588 <prvHeapInit+0xbc>)
 800d562:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d564:	4b09      	ldr	r3, [pc, #36]	; (800d58c <prvHeapInit+0xc0>)
 800d566:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d56a:	601a      	str	r2, [r3, #0]
}
 800d56c:	bf00      	nop
 800d56e:	3714      	adds	r7, #20
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr
 800d578:	200006dc 	.word	0x200006dc
 800d57c:	20007edc 	.word	0x20007edc
 800d580:	20007ee4 	.word	0x20007ee4
 800d584:	20007eec 	.word	0x20007eec
 800d588:	20007ee8 	.word	0x20007ee8
 800d58c:	20007ef0 	.word	0x20007ef0

0800d590 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d590:	b480      	push	{r7}
 800d592:	b085      	sub	sp, #20
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d598:	4b28      	ldr	r3, [pc, #160]	; (800d63c <prvInsertBlockIntoFreeList+0xac>)
 800d59a:	60fb      	str	r3, [r7, #12]
 800d59c:	e002      	b.n	800d5a4 <prvInsertBlockIntoFreeList+0x14>
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	60fb      	str	r3, [r7, #12]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d8f7      	bhi.n	800d59e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	68ba      	ldr	r2, [r7, #8]
 800d5b8:	4413      	add	r3, r2
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d108      	bne.n	800d5d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	685a      	ldr	r2, [r3, #4]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	441a      	add	r2, r3
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	441a      	add	r2, r3
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d118      	bne.n	800d618 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	4b15      	ldr	r3, [pc, #84]	; (800d640 <prvInsertBlockIntoFreeList+0xb0>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d00d      	beq.n	800d60e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	685a      	ldr	r2, [r3, #4]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	441a      	add	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	601a      	str	r2, [r3, #0]
 800d60c:	e008      	b.n	800d620 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d60e:	4b0c      	ldr	r3, [pc, #48]	; (800d640 <prvInsertBlockIntoFreeList+0xb0>)
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	601a      	str	r2, [r3, #0]
 800d616:	e003      	b.n	800d620 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d620:	68fa      	ldr	r2, [r7, #12]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	429a      	cmp	r2, r3
 800d626:	d002      	beq.n	800d62e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d62e:	bf00      	nop
 800d630:	3714      	adds	r7, #20
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	20007edc 	.word	0x20007edc
 800d640:	20007ee4 	.word	0x20007ee4

0800d644 <__libc_init_array>:
 800d644:	b570      	push	{r4, r5, r6, lr}
 800d646:	4d0d      	ldr	r5, [pc, #52]	; (800d67c <__libc_init_array+0x38>)
 800d648:	4c0d      	ldr	r4, [pc, #52]	; (800d680 <__libc_init_array+0x3c>)
 800d64a:	1b64      	subs	r4, r4, r5
 800d64c:	10a4      	asrs	r4, r4, #2
 800d64e:	2600      	movs	r6, #0
 800d650:	42a6      	cmp	r6, r4
 800d652:	d109      	bne.n	800d668 <__libc_init_array+0x24>
 800d654:	4d0b      	ldr	r5, [pc, #44]	; (800d684 <__libc_init_array+0x40>)
 800d656:	4c0c      	ldr	r4, [pc, #48]	; (800d688 <__libc_init_array+0x44>)
 800d658:	f000 f8f6 	bl	800d848 <_init>
 800d65c:	1b64      	subs	r4, r4, r5
 800d65e:	10a4      	asrs	r4, r4, #2
 800d660:	2600      	movs	r6, #0
 800d662:	42a6      	cmp	r6, r4
 800d664:	d105      	bne.n	800d672 <__libc_init_array+0x2e>
 800d666:	bd70      	pop	{r4, r5, r6, pc}
 800d668:	f855 3b04 	ldr.w	r3, [r5], #4
 800d66c:	4798      	blx	r3
 800d66e:	3601      	adds	r6, #1
 800d670:	e7ee      	b.n	800d650 <__libc_init_array+0xc>
 800d672:	f855 3b04 	ldr.w	r3, [r5], #4
 800d676:	4798      	blx	r3
 800d678:	3601      	adds	r6, #1
 800d67a:	e7f2      	b.n	800d662 <__libc_init_array+0x1e>
 800d67c:	08033b28 	.word	0x08033b28
 800d680:	08033b28 	.word	0x08033b28
 800d684:	08033b28 	.word	0x08033b28
 800d688:	08033b2c 	.word	0x08033b2c

0800d68c <__retarget_lock_acquire_recursive>:
 800d68c:	4770      	bx	lr

0800d68e <__retarget_lock_release_recursive>:
 800d68e:	4770      	bx	lr

0800d690 <memcpy>:
 800d690:	440a      	add	r2, r1
 800d692:	4291      	cmp	r1, r2
 800d694:	f100 33ff 	add.w	r3, r0, #4294967295
 800d698:	d100      	bne.n	800d69c <memcpy+0xc>
 800d69a:	4770      	bx	lr
 800d69c:	b510      	push	{r4, lr}
 800d69e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6a6:	4291      	cmp	r1, r2
 800d6a8:	d1f9      	bne.n	800d69e <memcpy+0xe>
 800d6aa:	bd10      	pop	{r4, pc}

0800d6ac <memset>:
 800d6ac:	4402      	add	r2, r0
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d100      	bne.n	800d6b6 <memset+0xa>
 800d6b4:	4770      	bx	lr
 800d6b6:	f803 1b01 	strb.w	r1, [r3], #1
 800d6ba:	e7f9      	b.n	800d6b0 <memset+0x4>

0800d6bc <cleanup_glue>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	460c      	mov	r4, r1
 800d6c0:	6809      	ldr	r1, [r1, #0]
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	b109      	cbz	r1, 800d6ca <cleanup_glue+0xe>
 800d6c6:	f7ff fff9 	bl	800d6bc <cleanup_glue>
 800d6ca:	4621      	mov	r1, r4
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6d2:	f000 b869 	b.w	800d7a8 <_free_r>
	...

0800d6d8 <_reclaim_reent>:
 800d6d8:	4b2c      	ldr	r3, [pc, #176]	; (800d78c <_reclaim_reent+0xb4>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4283      	cmp	r3, r0
 800d6de:	b570      	push	{r4, r5, r6, lr}
 800d6e0:	4604      	mov	r4, r0
 800d6e2:	d051      	beq.n	800d788 <_reclaim_reent+0xb0>
 800d6e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d6e6:	b143      	cbz	r3, 800d6fa <_reclaim_reent+0x22>
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d14a      	bne.n	800d784 <_reclaim_reent+0xac>
 800d6ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6f0:	6819      	ldr	r1, [r3, #0]
 800d6f2:	b111      	cbz	r1, 800d6fa <_reclaim_reent+0x22>
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f000 f857 	bl	800d7a8 <_free_r>
 800d6fa:	6961      	ldr	r1, [r4, #20]
 800d6fc:	b111      	cbz	r1, 800d704 <_reclaim_reent+0x2c>
 800d6fe:	4620      	mov	r0, r4
 800d700:	f000 f852 	bl	800d7a8 <_free_r>
 800d704:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d706:	b111      	cbz	r1, 800d70e <_reclaim_reent+0x36>
 800d708:	4620      	mov	r0, r4
 800d70a:	f000 f84d 	bl	800d7a8 <_free_r>
 800d70e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d710:	b111      	cbz	r1, 800d718 <_reclaim_reent+0x40>
 800d712:	4620      	mov	r0, r4
 800d714:	f000 f848 	bl	800d7a8 <_free_r>
 800d718:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d71a:	b111      	cbz	r1, 800d722 <_reclaim_reent+0x4a>
 800d71c:	4620      	mov	r0, r4
 800d71e:	f000 f843 	bl	800d7a8 <_free_r>
 800d722:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d724:	b111      	cbz	r1, 800d72c <_reclaim_reent+0x54>
 800d726:	4620      	mov	r0, r4
 800d728:	f000 f83e 	bl	800d7a8 <_free_r>
 800d72c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d72e:	b111      	cbz	r1, 800d736 <_reclaim_reent+0x5e>
 800d730:	4620      	mov	r0, r4
 800d732:	f000 f839 	bl	800d7a8 <_free_r>
 800d736:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d738:	b111      	cbz	r1, 800d740 <_reclaim_reent+0x68>
 800d73a:	4620      	mov	r0, r4
 800d73c:	f000 f834 	bl	800d7a8 <_free_r>
 800d740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d742:	b111      	cbz	r1, 800d74a <_reclaim_reent+0x72>
 800d744:	4620      	mov	r0, r4
 800d746:	f000 f82f 	bl	800d7a8 <_free_r>
 800d74a:	69a3      	ldr	r3, [r4, #24]
 800d74c:	b1e3      	cbz	r3, 800d788 <_reclaim_reent+0xb0>
 800d74e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d750:	4620      	mov	r0, r4
 800d752:	4798      	blx	r3
 800d754:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d756:	b1b9      	cbz	r1, 800d788 <_reclaim_reent+0xb0>
 800d758:	4620      	mov	r0, r4
 800d75a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d75e:	f7ff bfad 	b.w	800d6bc <cleanup_glue>
 800d762:	5949      	ldr	r1, [r1, r5]
 800d764:	b941      	cbnz	r1, 800d778 <_reclaim_reent+0xa0>
 800d766:	3504      	adds	r5, #4
 800d768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d76a:	2d80      	cmp	r5, #128	; 0x80
 800d76c:	68d9      	ldr	r1, [r3, #12]
 800d76e:	d1f8      	bne.n	800d762 <_reclaim_reent+0x8a>
 800d770:	4620      	mov	r0, r4
 800d772:	f000 f819 	bl	800d7a8 <_free_r>
 800d776:	e7ba      	b.n	800d6ee <_reclaim_reent+0x16>
 800d778:	680e      	ldr	r6, [r1, #0]
 800d77a:	4620      	mov	r0, r4
 800d77c:	f000 f814 	bl	800d7a8 <_free_r>
 800d780:	4631      	mov	r1, r6
 800d782:	e7ef      	b.n	800d764 <_reclaim_reent+0x8c>
 800d784:	2500      	movs	r5, #0
 800d786:	e7ef      	b.n	800d768 <_reclaim_reent+0x90>
 800d788:	bd70      	pop	{r4, r5, r6, pc}
 800d78a:	bf00      	nop
 800d78c:	20000050 	.word	0x20000050

0800d790 <__malloc_lock>:
 800d790:	4801      	ldr	r0, [pc, #4]	; (800d798 <__malloc_lock+0x8>)
 800d792:	f7ff bf7b 	b.w	800d68c <__retarget_lock_acquire_recursive>
 800d796:	bf00      	nop
 800d798:	20008828 	.word	0x20008828

0800d79c <__malloc_unlock>:
 800d79c:	4801      	ldr	r0, [pc, #4]	; (800d7a4 <__malloc_unlock+0x8>)
 800d79e:	f7ff bf76 	b.w	800d68e <__retarget_lock_release_recursive>
 800d7a2:	bf00      	nop
 800d7a4:	20008828 	.word	0x20008828

0800d7a8 <_free_r>:
 800d7a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7aa:	2900      	cmp	r1, #0
 800d7ac:	d048      	beq.n	800d840 <_free_r+0x98>
 800d7ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7b2:	9001      	str	r0, [sp, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	f1a1 0404 	sub.w	r4, r1, #4
 800d7ba:	bfb8      	it	lt
 800d7bc:	18e4      	addlt	r4, r4, r3
 800d7be:	f7ff ffe7 	bl	800d790 <__malloc_lock>
 800d7c2:	4a20      	ldr	r2, [pc, #128]	; (800d844 <_free_r+0x9c>)
 800d7c4:	9801      	ldr	r0, [sp, #4]
 800d7c6:	6813      	ldr	r3, [r2, #0]
 800d7c8:	4615      	mov	r5, r2
 800d7ca:	b933      	cbnz	r3, 800d7da <_free_r+0x32>
 800d7cc:	6063      	str	r3, [r4, #4]
 800d7ce:	6014      	str	r4, [r2, #0]
 800d7d0:	b003      	add	sp, #12
 800d7d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d7d6:	f7ff bfe1 	b.w	800d79c <__malloc_unlock>
 800d7da:	42a3      	cmp	r3, r4
 800d7dc:	d90b      	bls.n	800d7f6 <_free_r+0x4e>
 800d7de:	6821      	ldr	r1, [r4, #0]
 800d7e0:	1862      	adds	r2, r4, r1
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	bf04      	itt	eq
 800d7e6:	681a      	ldreq	r2, [r3, #0]
 800d7e8:	685b      	ldreq	r3, [r3, #4]
 800d7ea:	6063      	str	r3, [r4, #4]
 800d7ec:	bf04      	itt	eq
 800d7ee:	1852      	addeq	r2, r2, r1
 800d7f0:	6022      	streq	r2, [r4, #0]
 800d7f2:	602c      	str	r4, [r5, #0]
 800d7f4:	e7ec      	b.n	800d7d0 <_free_r+0x28>
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	b10b      	cbz	r3, 800d800 <_free_r+0x58>
 800d7fc:	42a3      	cmp	r3, r4
 800d7fe:	d9fa      	bls.n	800d7f6 <_free_r+0x4e>
 800d800:	6811      	ldr	r1, [r2, #0]
 800d802:	1855      	adds	r5, r2, r1
 800d804:	42a5      	cmp	r5, r4
 800d806:	d10b      	bne.n	800d820 <_free_r+0x78>
 800d808:	6824      	ldr	r4, [r4, #0]
 800d80a:	4421      	add	r1, r4
 800d80c:	1854      	adds	r4, r2, r1
 800d80e:	42a3      	cmp	r3, r4
 800d810:	6011      	str	r1, [r2, #0]
 800d812:	d1dd      	bne.n	800d7d0 <_free_r+0x28>
 800d814:	681c      	ldr	r4, [r3, #0]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	6053      	str	r3, [r2, #4]
 800d81a:	4421      	add	r1, r4
 800d81c:	6011      	str	r1, [r2, #0]
 800d81e:	e7d7      	b.n	800d7d0 <_free_r+0x28>
 800d820:	d902      	bls.n	800d828 <_free_r+0x80>
 800d822:	230c      	movs	r3, #12
 800d824:	6003      	str	r3, [r0, #0]
 800d826:	e7d3      	b.n	800d7d0 <_free_r+0x28>
 800d828:	6825      	ldr	r5, [r4, #0]
 800d82a:	1961      	adds	r1, r4, r5
 800d82c:	428b      	cmp	r3, r1
 800d82e:	bf04      	itt	eq
 800d830:	6819      	ldreq	r1, [r3, #0]
 800d832:	685b      	ldreq	r3, [r3, #4]
 800d834:	6063      	str	r3, [r4, #4]
 800d836:	bf04      	itt	eq
 800d838:	1949      	addeq	r1, r1, r5
 800d83a:	6021      	streq	r1, [r4, #0]
 800d83c:	6054      	str	r4, [r2, #4]
 800d83e:	e7c7      	b.n	800d7d0 <_free_r+0x28>
 800d840:	b003      	add	sp, #12
 800d842:	bd30      	pop	{r4, r5, pc}
 800d844:	20007ef4 	.word	0x20007ef4

0800d848 <_init>:
 800d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84a:	bf00      	nop
 800d84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d84e:	bc08      	pop	{r3}
 800d850:	469e      	mov	lr, r3
 800d852:	4770      	bx	lr

0800d854 <_fini>:
 800d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d856:	bf00      	nop
 800d858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d85a:	bc08      	pop	{r3}
 800d85c:	469e      	mov	lr, r3
 800d85e:	4770      	bx	lr
