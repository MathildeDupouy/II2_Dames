
II2_Dames.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00026380  0800f980  0800f980  0001f980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08035d00  08035d00  000500b4  2**0
                  CONTENTS
  4 .ARM          00000008  08035d00  08035d00  00045d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08035d08  08035d08  000500b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08035d08  08035d08  00045d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08035d0c  08035d0c  00045d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08035d10  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008e2c  200000b4  08035dc4  000500b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008ee0  08035dc4  00058ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033933  00000000  00000000  000500e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005db3  00000000  00000000  00083a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002678  00000000  00000000  000897d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002420  00000000  00000000  0008be48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e830  00000000  00000000  0008e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003000c  00000000  00000000  000bca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117a32  00000000  00000000  000ecaa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002044d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a694  00000000  00000000  0020452c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f968 	.word	0x0800f968

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800f968 	.word	0x0800f968

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000d0 	.word	0x200000d0
 8000538:	20000184 	.word	0x20000184

0800053c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000546:	20c8      	movs	r0, #200	; 0xc8
 8000548:	f003 fd56 	bl	8003ff8 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800054c:	f000 fa7a 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000580:	2300      	movs	r3, #0
 8000582:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000584:	f000 fa5e 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e010      	b.n	80005b0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	21a8      	movs	r1, #168	; 0xa8
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fd11 	bl	8003fbc <TS_IO_Read>
 800059a:	4603      	mov	r3, r0
 800059c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b51      	cmp	r3, #81	; 0x51
 80005a4:	d101      	bne.n	80005aa <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d802      	bhi.n	80005bc <ft5336_ReadID+0x4e>
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e8      	beq.n	800058e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fa44 	bl	8000a64 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f932 	bl	8000848 <ft5336_TS_DisableIT>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f003 fcdb 	bl	8003fbc <TS_IO_Read>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b05      	cmp	r3, #5
 800061c:	d901      	bls.n	8000622 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 8000628:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	b2db      	uxtb	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000384 	.word	0x20000384

08000640 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000664:	789a      	ldrb	r2, [r3, #2]
 8000666:	4b6c      	ldr	r3, [pc, #432]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	429a      	cmp	r2, r3
 800066c:	f080 80cf 	bcs.w	800080e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000670:	4b69      	ldr	r3, [pc, #420]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d871      	bhi.n	800075c <ft5336_TS_GetXY+0x11c>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <ft5336_TS_GetXY+0x40>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	080006a9 	.word	0x080006a9
 8000684:	080006bb 	.word	0x080006bb
 8000688:	080006cd 	.word	0x080006cd
 800068c:	080006df 	.word	0x080006df
 8000690:	080006f1 	.word	0x080006f1
 8000694:	08000703 	.word	0x08000703
 8000698:	08000715 	.word	0x08000715
 800069c:	08000727 	.word	0x08000727
 80006a0:	08000739 	.word	0x08000739
 80006a4:	0800074b 	.word	0x0800074b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006a8:	2304      	movs	r3, #4
 80006aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006ac:	2303      	movs	r3, #3
 80006ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b0:	2306      	movs	r3, #6
 80006b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006b4:	2305      	movs	r3, #5
 80006b6:	753b      	strb	r3, [r7, #20]
      break;
 80006b8:	e051      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ba:	230a      	movs	r3, #10
 80006bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006be:	2309      	movs	r3, #9
 80006c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006c2:	230c      	movs	r3, #12
 80006c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006c6:	230b      	movs	r3, #11
 80006c8:	753b      	strb	r3, [r7, #20]
      break;
 80006ca:	e048      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006cc:	2310      	movs	r3, #16
 80006ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d0:	230f      	movs	r3, #15
 80006d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006d4:	2312      	movs	r3, #18
 80006d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006d8:	2311      	movs	r3, #17
 80006da:	753b      	strb	r3, [r7, #20]
      break;
 80006dc:	e03f      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006de:	2316      	movs	r3, #22
 80006e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006e2:	2315      	movs	r3, #21
 80006e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006e6:	2318      	movs	r3, #24
 80006e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006ea:	2317      	movs	r3, #23
 80006ec:	753b      	strb	r3, [r7, #20]
      break;
 80006ee:	e036      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f0:	231c      	movs	r3, #28
 80006f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006f4:	231b      	movs	r3, #27
 80006f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006f8:	231e      	movs	r3, #30
 80006fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006fc:	231d      	movs	r3, #29
 80006fe:	753b      	strb	r3, [r7, #20]
      break;
 8000700:	e02d      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000702:	2322      	movs	r3, #34	; 0x22
 8000704:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000706:	2321      	movs	r3, #33	; 0x21
 8000708:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800070a:	2324      	movs	r3, #36	; 0x24
 800070c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800070e:	2323      	movs	r3, #35	; 0x23
 8000710:	753b      	strb	r3, [r7, #20]
      break;
 8000712:	e024      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000714:	2328      	movs	r3, #40	; 0x28
 8000716:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000718:	2327      	movs	r3, #39	; 0x27
 800071a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800071c:	232a      	movs	r3, #42	; 0x2a
 800071e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000720:	2329      	movs	r3, #41	; 0x29
 8000722:	753b      	strb	r3, [r7, #20]
      break;
 8000724:	e01b      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000726:	232e      	movs	r3, #46	; 0x2e
 8000728:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800072a:	232d      	movs	r3, #45	; 0x2d
 800072c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800072e:	2330      	movs	r3, #48	; 0x30
 8000730:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000732:	232f      	movs	r3, #47	; 0x2f
 8000734:	753b      	strb	r3, [r7, #20]
      break;
 8000736:	e012      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000738:	2334      	movs	r3, #52	; 0x34
 800073a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800073c:	2333      	movs	r3, #51	; 0x33
 800073e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000740:	2336      	movs	r3, #54	; 0x36
 8000742:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000744:	2335      	movs	r3, #53	; 0x35
 8000746:	753b      	strb	r3, [r7, #20]
      break;
 8000748:	e009      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800074a:	233a      	movs	r3, #58	; 0x3a
 800074c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800074e:	2339      	movs	r3, #57	; 0x39
 8000750:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000752:	233c      	movs	r3, #60	; 0x3c
 8000754:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000756:	233b      	movs	r3, #59	; 0x3b
 8000758:	753b      	strb	r3, [r7, #20]
      break;
 800075a:	e000      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800075c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	7dfa      	ldrb	r2, [r7, #23]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fc28 	bl	8003fbc <TS_IO_Read>
 800076c:	4603      	mov	r3, r0
 800076e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 8000778:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	7dba      	ldrb	r2, [r7, #22]
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f003 fc1a 	bl	8003fbc <TS_IO_Read>
 8000788:	4603      	mov	r3, r0
 800078a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007a6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	7d7a      	ldrb	r2, [r7, #21]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fbff 	bl	8003fbc <TS_IO_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007c2:	7cfb      	ldrb	r3, [r7, #19]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ca:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	7d3a      	ldrb	r2, [r7, #20]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 fbf1 	bl	8003fbc <TS_IO_Read>
 80007da:	4603      	mov	r3, r0
 80007dc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007de:	7cfb      	ldrb	r3, [r7, #19]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007f8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007fc:	881a      	ldrh	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	3301      	adds	r3, #1
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 800080c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000384 	.word	0x20000384
 800081c:	20000388 	.word	0x20000388

08000820 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	21a4      	movs	r1, #164	; 0xa4
 800083a:	4618      	mov	r0, r3
 800083c:	f003 fba4 	bl	8003f88 <TS_IO_Write>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	21a4      	movs	r1, #164	; 0xa4
 8000862:	4618      	mov	r0, r3
 8000864:	f003 fb90 	bl	8003f88 <TS_IO_Write>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	6039      	str	r1, [r7, #0]
 80008a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2101      	movs	r1, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 fb81 	bl	8003fbc <TS_IO_Read>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	4603      	mov	r3, r0
 80008de:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80008f0:	4b4d      	ldr	r3, [pc, #308]	; (8000a28 <ft5336_TS_GetTouchInfo+0x158>)
 80008f2:	785b      	ldrb	r3, [r3, #1]
 80008f4:	461a      	mov	r2, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4293      	cmp	r3, r2
 80008fa:	f080 8090 	bcs.w	8000a1e <ft5336_TS_GetTouchInfo+0x14e>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b09      	cmp	r3, #9
 8000902:	d85d      	bhi.n	80009c0 <ft5336_TS_GetTouchInfo+0xf0>
 8000904:	a201      	add	r2, pc, #4	; (adr r2, 800090c <ft5336_TS_GetTouchInfo+0x3c>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	08000935 	.word	0x08000935
 8000910:	08000943 	.word	0x08000943
 8000914:	08000951 	.word	0x08000951
 8000918:	0800095f 	.word	0x0800095f
 800091c:	0800096d 	.word	0x0800096d
 8000920:	0800097b 	.word	0x0800097b
 8000924:	08000989 	.word	0x08000989
 8000928:	08000997 	.word	0x08000997
 800092c:	080009a5 	.word	0x080009a5
 8000930:	080009b3 	.word	0x080009b3
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000934:	2303      	movs	r3, #3
 8000936:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000938:	2307      	movs	r3, #7
 800093a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800093c:	2308      	movs	r3, #8
 800093e:	757b      	strb	r3, [r7, #21]
      break;
 8000940:	e03f      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000942:	2309      	movs	r3, #9
 8000944:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000946:	230d      	movs	r3, #13
 8000948:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800094a:	230e      	movs	r3, #14
 800094c:	757b      	strb	r3, [r7, #21]
      break;
 800094e:	e038      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000950:	230f      	movs	r3, #15
 8000952:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000954:	2313      	movs	r3, #19
 8000956:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000958:	2314      	movs	r3, #20
 800095a:	757b      	strb	r3, [r7, #21]
      break;
 800095c:	e031      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800095e:	2315      	movs	r3, #21
 8000960:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000962:	2319      	movs	r3, #25
 8000964:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000966:	231a      	movs	r3, #26
 8000968:	757b      	strb	r3, [r7, #21]
      break;
 800096a:	e02a      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 800096c:	231b      	movs	r3, #27
 800096e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000970:	231f      	movs	r3, #31
 8000972:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000974:	2320      	movs	r3, #32
 8000976:	757b      	strb	r3, [r7, #21]
      break;
 8000978:	e023      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800097a:	2321      	movs	r3, #33	; 0x21
 800097c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800097e:	2325      	movs	r3, #37	; 0x25
 8000980:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000982:	2326      	movs	r3, #38	; 0x26
 8000984:	757b      	strb	r3, [r7, #21]
      break;
 8000986:	e01c      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000988:	2327      	movs	r3, #39	; 0x27
 800098a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 800098c:	232b      	movs	r3, #43	; 0x2b
 800098e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000990:	232c      	movs	r3, #44	; 0x2c
 8000992:	757b      	strb	r3, [r7, #21]
      break;
 8000994:	e015      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000996:	232d      	movs	r3, #45	; 0x2d
 8000998:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800099a:	2331      	movs	r3, #49	; 0x31
 800099c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800099e:	2332      	movs	r3, #50	; 0x32
 80009a0:	757b      	strb	r3, [r7, #21]
      break;
 80009a2:	e00e      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80009a4:	2333      	movs	r3, #51	; 0x33
 80009a6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80009a8:	2337      	movs	r3, #55	; 0x37
 80009aa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80009ac:	2338      	movs	r3, #56	; 0x38
 80009ae:	757b      	strb	r3, [r7, #21]
      break;
 80009b0:	e007      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80009b2:	2339      	movs	r3, #57	; 0x39
 80009b4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80009b6:	233d      	movs	r3, #61	; 0x3d
 80009b8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80009ba:	233e      	movs	r3, #62	; 0x3e
 80009bc:	757b      	strb	r3, [r7, #21]
      break;
 80009be:	e000      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80009c0:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80009c2:	89fb      	ldrh	r3, [r7, #14]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	7dfa      	ldrb	r2, [r7, #23]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f003 faf6 	bl	8003fbc <TS_IO_Read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80009d4:	7d3b      	ldrb	r3, [r7, #20]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	119b      	asrs	r3, r3, #6
 80009da:	f003 0203 	and.w	r2, r3, #3
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	7dba      	ldrb	r2, [r7, #22]
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f003 fae6 	bl	8003fbc <TS_IO_Read>
 80009f0:	4603      	mov	r3, r0
 80009f2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80009f4:	7d3b      	ldrb	r3, [r7, #20]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	7d7a      	ldrb	r2, [r7, #21]
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f003 fad8 	bl	8003fbc <TS_IO_Read>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a10:	7d3b      	ldrb	r3, [r7, #20]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	111b      	asrs	r3, r3, #4
 8000a16:	f003 0204 	and.w	r2, r3, #4
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000384 	.word	0x20000384

08000a2c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000384 	.word	0x20000384

08000a44 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000a48:	f7ff fff0 	bl	8000a2c <ft5336_Get_I2C_InitializedStatus>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d104      	bne.n	8000a5c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000a52:	f003 fa8f 	bl	8003f74 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000a56:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000384 	.word	0x20000384

08000a64 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a8a:	f3bf 8f6f 	isb	sy
}
 8000a8e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a98:	f3bf 8f4f 	dsb	sy
}
 8000a9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a9e:	f3bf 8f6f 	isb	sy
}
 8000aa2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab0:	f3bf 8f4f 	dsb	sy
}
 8000ab4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab6:	f3bf 8f6f 	isb	sy
}
 8000aba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ada:	f3bf 8f4f 	dsb	sy
}
 8000ade:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ae6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	0b5b      	lsrs	r3, r3, #13
 8000aec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000af0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000afa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	015a      	lsls	r2, r3, #5
 8000b00:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b04:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b0a:	4911      	ldr	r1, [pc, #68]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1e5a      	subs	r2, r3, #1
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1ef      	bne.n	8000afc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	60fa      	str	r2, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1e5      	bne.n	8000af2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b26:	f3bf 8f4f 	dsb	sy
}
 8000b2a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b36:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b38:	f3bf 8f4f 	dsb	sy
}
 8000b3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b3e:	f3bf 8f6f 	isb	sy
}
 8000b42:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <calculPossibilitesRec>:
 * nb_eaten		: donne le nombre de pieces mangees jusqu'à cette possible case (init a 0)
 *
 * retour		: indice de la prochaine case vide du tableau
 */
uint8_t calculPossibilitesRec(uint16_t line, uint16_t col, uint8_t color, struct cell *possibilites, uint8_t index, uint8_t nb_eaten)
{
 8000b54:	b5b0      	push	{r4, r5, r7, lr}
 8000b56:	b092      	sub	sp, #72	; 0x48
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	81fb      	strh	r3, [r7, #14]
 8000b60:	460b      	mov	r3, r1
 8000b62:	81bb      	strh	r3, [r7, #12]
 8000b64:	4613      	mov	r3, r2
 8000b66:	72fb      	strb	r3, [r7, #11]
	int8_t pas   = (color == 0) ? 1 : -1; // en fonction couleur on regarde lignes croissantes ou decroissantes
 8000b68:	7afb      	ldrb	r3, [r7, #11]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <calculPossibilitesRec+0x1e>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e001      	b.n	8000b76 <calculPossibilitesRec+0x22>
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t fin   = (color == 0) ? 7 : 0; // en fonction couleur pas meme arrivee
 8000b7a:	7afb      	ldrb	r3, [r7, #11]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <calculPossibilitesRec+0x30>
 8000b80:	2307      	movs	r3, #7
 8000b82:	e000      	b.n	8000b86 <calculPossibilitesRec+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t debut = (color == 0) ? 0 : 7; // en fonction couleur pas meme debut
 8000b8a:	7afb      	ldrb	r3, [r7, #11]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <calculPossibilitesRec+0x40>
 8000b90:	2300      	movs	r3, #0
 8000b92:	e000      	b.n	8000b96 <calculPossibilitesRec+0x42>
 8000b94:	2307      	movs	r3, #7
 8000b96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// Controle de la colonne de droite en avant :
	if(col < 7 && line != fin)
 8000b9a:	89bb      	ldrh	r3, [r7, #12]
 8000b9c:	2b06      	cmp	r3, #6
 8000b9e:	f200 8157 	bhi.w	8000e50 <calculPossibilitesRec+0x2fc>
 8000ba2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	89fa      	ldrh	r2, [r7, #14]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	f000 8150 	beq.w	8000e50 <calculPossibilitesRec+0x2fc>
	{
		// Controle colonne de droite en avant : piece presente
		if(chessboard[line + pas][col + 1].isFilled == 1)
 8000bb0:	89fa      	ldrh	r2, [r7, #14]
 8000bb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000bb6:	18d1      	adds	r1, r2, r3
 8000bb8:	89bb      	ldrh	r3, [r7, #12]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	4893      	ldr	r0, [pc, #588]	; (8000e0c <calculPossibilitesRec+0x2b8>)
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	441a      	add	r2, r3
 8000bc4:	0053      	lsls	r3, r2, #1
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	460b      	mov	r3, r1
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	440b      	add	r3, r1
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4403      	add	r3, r0
 8000bd4:	3305      	adds	r3, #5
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	f040 811b 	bne.w	8000e14 <calculPossibilitesRec+0x2c0>
		{
			if(chessboard[line + pas][col + 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000bde:	89fa      	ldrh	r2, [r7, #14]
 8000be0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000be4:	18d1      	adds	r1, r2, r3
 8000be6:	89bb      	ldrh	r3, [r7, #12]
 8000be8:	3301      	adds	r3, #1
 8000bea:	4888      	ldr	r0, [pc, #544]	; (8000e0c <calculPossibilitesRec+0x2b8>)
 8000bec:	461a      	mov	r2, r3
 8000bee:	0092      	lsls	r2, r2, #2
 8000bf0:	441a      	add	r2, r3
 8000bf2:	0053      	lsls	r3, r2, #1
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	4413      	add	r3, r2
 8000c00:	4403      	add	r3, r0
 8000c02:	3307      	adds	r3, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	7afa      	ldrb	r2, [r7, #11]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	f000 8121 	beq.w	8000e50 <calculPossibilitesRec+0x2fc>
			else if((col <= 5) && (line + pas != fin)) // Assez de cases pour sauter
 8000c0e:	89bb      	ldrh	r3, [r7, #12]
 8000c10:	2b05      	cmp	r3, #5
 8000c12:	f200 811d 	bhi.w	8000e50 <calculPossibilitesRec+0x2fc>
 8000c16:	89fa      	ldrh	r2, [r7, #14]
 8000c18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c1c:	441a      	add	r2, r3
 8000c1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c22:	429a      	cmp	r2, r3
 8000c24:	f000 8114 	beq.w	8000e50 <calculPossibilitesRec+0x2fc>
			{
				if(chessboard[line + 2 * pas][col + 2].isFilled == 0) // Pas de piece apres le saut
 8000c28:	89fa      	ldrh	r2, [r7, #14]
 8000c2a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	18d1      	adds	r1, r2, r3
 8000c32:	89bb      	ldrh	r3, [r7, #12]
 8000c34:	3302      	adds	r3, #2
 8000c36:	4875      	ldr	r0, [pc, #468]	; (8000e0c <calculPossibilitesRec+0x2b8>)
 8000c38:	461a      	mov	r2, r3
 8000c3a:	0092      	lsls	r2, r2, #2
 8000c3c:	441a      	add	r2, r3
 8000c3e:	0053      	lsls	r3, r2, #1
 8000c40:	461a      	mov	r2, r3
 8000c42:	460b      	mov	r3, r1
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	440b      	add	r3, r1
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4403      	add	r3, r0
 8000c4e:	3305      	adds	r3, #5
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f040 80fc 	bne.w	8000e50 <calculPossibilitesRec+0x2fc>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line + 2 * pas, col + 2};
 8000c58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	89fb      	ldrh	r3, [r7, #14]
 8000c64:	4413      	add	r3, r2
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	853b      	strh	r3, [r7, #40]	; 0x28
 8000c6a:	89bb      	ldrh	r3, [r7, #12]
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	857b      	strh	r3, [r7, #42]	; 0x2a
					possibilites[index] = possible;
 8000c72:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line + pas;
 8000c86:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c8a:	b298      	uxth	r0, r3
 8000c8c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000c90:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 8000c94:	89fb      	ldrh	r3, [r7, #14]
 8000c96:	4403      	add	r3, r0
 8000c98:	b29c      	uxth	r4, r3
 8000c9a:	485d      	ldr	r0, [pc, #372]	; (8000e10 <calculPossibilitesRec+0x2bc>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	4622      	mov	r2, r4
 8000ca8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col + 1;
 8000cac:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000cb0:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 8000cb4:	89bb      	ldrh	r3, [r7, #12]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b29c      	uxth	r4, r3
 8000cba:	4855      	ldr	r0, [pc, #340]	; (8000e10 <calculPossibilitesRec+0x2bc>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4403      	add	r3, r0
 8000cca:	4622      	mov	r2, r4
 8000ccc:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 8000cce:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000cd2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cda:	e048      	b.n	8000d6e <calculPossibilitesRec+0x21a>
					{
						possible_eaten[index][i - index + nb_eaten].ligne = possible_eaten[i][i - index + nb_eaten].ligne;
 8000cdc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000ce0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ce2:	1ad2      	subs	r2, r2, r3
 8000ce4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000ce8:	18d4      	adds	r4, r2, r3
 8000cea:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000cee:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000cf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000cf4:	1ac9      	subs	r1, r1, r3
 8000cf6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000cfa:	18c8      	adds	r0, r1, r3
 8000cfc:	4d44      	ldr	r5, [pc, #272]	; (8000e10 <calculPossibilitesRec+0x2bc>)
 8000cfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d00:	460b      	mov	r3, r1
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	440b      	add	r3, r1
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4423      	add	r3, r4
 8000d0a:	f835 4023 	ldrh.w	r4, [r5, r3, lsl #2]
 8000d0e:	4940      	ldr	r1, [pc, #256]	; (8000e10 <calculPossibilitesRec+0x2bc>)
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4403      	add	r3, r0
 8000d1a:	4622      	mov	r2, r4
 8000d1c:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
						possible_eaten[index][i - index + nb_eaten].colonne = possible_eaten[i][i - index + nb_eaten].colonne;
 8000d20:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d26:	1ad2      	subs	r2, r2, r3
 8000d28:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000d2c:	18d4      	adds	r4, r2, r3
 8000d2e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000d32:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d38:	1ac9      	subs	r1, r1, r3
 8000d3a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000d3e:	18c8      	adds	r0, r1, r3
 8000d40:	4d33      	ldr	r5, [pc, #204]	; (8000e10 <calculPossibilitesRec+0x2bc>)
 8000d42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d44:	460b      	mov	r3, r1
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	440b      	add	r3, r1
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4423      	add	r3, r4
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	442b      	add	r3, r5
 8000d52:	885c      	ldrh	r4, [r3, #2]
 8000d54:	492e      	ldr	r1, [pc, #184]	; (8000e10 <calculPossibilitesRec+0x2bc>)
 8000d56:	4613      	mov	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4403      	add	r3, r0
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	440b      	add	r3, r1
 8000d64:	4622      	mov	r2, r4
 8000d66:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 8000d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d6e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbb1      	blt.n	8000cdc <calculPossibilitesRec+0x188>
					}
					index++;
 8000d78:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line + pas][col + 1].isFilled = 0; //On enleve la piece pour la recurrence
 8000d82:	89fa      	ldrh	r2, [r7, #14]
 8000d84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d88:	18d1      	adds	r1, r2, r3
 8000d8a:	89bb      	ldrh	r3, [r7, #12]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	481f      	ldr	r0, [pc, #124]	; (8000e0c <calculPossibilitesRec+0x2b8>)
 8000d90:	461a      	mov	r2, r3
 8000d92:	0092      	lsls	r2, r2, #2
 8000d94:	441a      	add	r2, r3
 8000d96:	0053      	lsls	r3, r2, #1
 8000d98:	461a      	mov	r2, r3
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	440b      	add	r3, r1
 8000da0:	011b      	lsls	r3, r3, #4
 8000da2:	4413      	add	r3, r2
 8000da4:	4403      	add	r3, r0
 8000da6:	3305      	adds	r3, #5
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
					index = calculPossibilitesRec(line + 2 * pas, col + 2, color, possibilites, index, nb_eaten+1);
 8000dac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	89fb      	ldrh	r3, [r7, #14]
 8000db8:	4413      	add	r3, r2
 8000dba:	b298      	uxth	r0, r3
 8000dbc:	89bb      	ldrh	r3, [r7, #12]
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	b299      	uxth	r1, r3
 8000dc2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	7afa      	ldrb	r2, [r7, #11]
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f7ff febd 	bl	8000b54 <calculPossibilitesRec>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line + pas][col + 1].isFilled = 1; //On enleve la piece pour la recurrence
 8000de0:	89fa      	ldrh	r2, [r7, #14]
 8000de2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000de6:	18d1      	adds	r1, r2, r3
 8000de8:	89bb      	ldrh	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <calculPossibilitesRec+0x2b8>)
 8000dee:	461a      	mov	r2, r3
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	441a      	add	r2, r3
 8000df4:	0053      	lsls	r3, r2, #1
 8000df6:	461a      	mov	r2, r3
 8000df8:	460b      	mov	r3, r1
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	4413      	add	r3, r2
 8000e02:	4403      	add	r3, r0
 8000e04:	3305      	adds	r3, #5
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	e021      	b.n	8000e50 <calculPossibilitesRec+0x2fc>
 8000e0c:	200080f8 	.word	0x200080f8
 8000e10:	20008614 	.word	0x20008614
				}
			}
		}
		// Controle colonne de droite : pas de piece et pas en train de manger
		else if (nb_eaten == 0)
 8000e14:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d119      	bne.n	8000e50 <calculPossibilitesRec+0x2fc>
		{
			struct cell possible = {line + pas, col + 1};
 8000e1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	89fb      	ldrh	r3, [r7, #14]
 8000e24:	4413      	add	r3, r2
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000e2a:	89bb      	ldrh	r3, [r7, #12]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	84fb      	strh	r3, [r7, #38]	; 0x26
			possibilites[index] = possible;
 8000e32:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	6818      	ldr	r0, [r3, #0]
 8000e44:	6010      	str	r0, [r2, #0]
			index++;
 8000e46:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		}
	}
	// Controle colonne de droite en arriere : piece presente
	if(col < 7 && line != debut)
 8000e50:	89bb      	ldrh	r3, [r7, #12]
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	f200 8139 	bhi.w	80010ca <calculPossibilitesRec+0x576>
 8000e58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	89fa      	ldrh	r2, [r7, #14]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f000 8132 	beq.w	80010ca <calculPossibilitesRec+0x576>
	{
		if(chessboard[line - pas][col + 1].isFilled == 1)
 8000e66:	89fa      	ldrh	r2, [r7, #14]
 8000e68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e6c:	1ad1      	subs	r1, r2, r3
 8000e6e:	89bb      	ldrh	r3, [r7, #12]
 8000e70:	3301      	adds	r3, #1
 8000e72:	4848      	ldr	r0, [pc, #288]	; (8000f94 <calculPossibilitesRec+0x440>)
 8000e74:	461a      	mov	r2, r3
 8000e76:	0092      	lsls	r2, r2, #2
 8000e78:	441a      	add	r2, r3
 8000e7a:	0053      	lsls	r3, r2, #1
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	460b      	mov	r3, r1
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	4413      	add	r3, r2
 8000e88:	4403      	add	r3, r0
 8000e8a:	3305      	adds	r3, #5
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	f040 811b 	bne.w	80010ca <calculPossibilitesRec+0x576>
		{
			if(chessboard[line - pas][col + 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000e94:	89fa      	ldrh	r2, [r7, #14]
 8000e96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e9a:	1ad1      	subs	r1, r2, r3
 8000e9c:	89bb      	ldrh	r3, [r7, #12]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	483c      	ldr	r0, [pc, #240]	; (8000f94 <calculPossibilitesRec+0x440>)
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	441a      	add	r2, r3
 8000ea8:	0053      	lsls	r3, r2, #1
 8000eaa:	461a      	mov	r2, r3
 8000eac:	460b      	mov	r3, r1
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4403      	add	r3, r0
 8000eb8:	3307      	adds	r3, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	7afa      	ldrb	r2, [r7, #11]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	f000 8103 	beq.w	80010ca <calculPossibilitesRec+0x576>
			else if((col <= 5) && (line - pas != debut)) // Assez de cases pour sauter
 8000ec4:	89bb      	ldrh	r3, [r7, #12]
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	f200 80ff 	bhi.w	80010ca <calculPossibilitesRec+0x576>
 8000ecc:	89fa      	ldrh	r2, [r7, #14]
 8000ece:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ed2:	1ad2      	subs	r2, r2, r3
 8000ed4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	f000 80f6 	beq.w	80010ca <calculPossibilitesRec+0x576>
			{
				if(chessboard[line - 2 * pas][col + 2].isFilled == 0) // Pas de piece apres le saut
 8000ede:	89fa      	ldrh	r2, [r7, #14]
 8000ee0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	1ad1      	subs	r1, r2, r3
 8000ee8:	89bb      	ldrh	r3, [r7, #12]
 8000eea:	3302      	adds	r3, #2
 8000eec:	4829      	ldr	r0, [pc, #164]	; (8000f94 <calculPossibilitesRec+0x440>)
 8000eee:	461a      	mov	r2, r3
 8000ef0:	0092      	lsls	r2, r2, #2
 8000ef2:	441a      	add	r2, r3
 8000ef4:	0053      	lsls	r3, r2, #1
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	460b      	mov	r3, r1
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	440b      	add	r3, r1
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	4413      	add	r3, r2
 8000f02:	4403      	add	r3, r0
 8000f04:	3305      	adds	r3, #5
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f040 80de 	bne.w	80010ca <calculPossibilitesRec+0x576>
				{
					//=> Piece de l'autre couleur, place pour manger
					struct cell possible = {line - 2 * pas, col + 2};
 8000f0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	89fa      	ldrh	r2, [r7, #14]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	843b      	strh	r3, [r7, #32]
 8000f20:	89bb      	ldrh	r3, [r7, #12]
 8000f22:	3302      	adds	r3, #2
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	847b      	strh	r3, [r7, #34]	; 0x22
					possibilites[index] = possible;
 8000f28:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	461a      	mov	r2, r3
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line - pas;
 8000f3c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000f46:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 8000f4a:	89f8      	ldrh	r0, [r7, #14]
 8000f4c:	1ac3      	subs	r3, r0, r3
 8000f4e:	b29c      	uxth	r4, r3
 8000f50:	4811      	ldr	r0, [pc, #68]	; (8000f98 <calculPossibilitesRec+0x444>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	4622      	mov	r2, r4
 8000f5e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col + 1;
 8000f62:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000f66:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 8000f6a:	89bb      	ldrh	r3, [r7, #12]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	b29c      	uxth	r4, r3
 8000f70:	4809      	ldr	r0, [pc, #36]	; (8000f98 <calculPossibilitesRec+0x444>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4403      	add	r3, r0
 8000f80:	4622      	mov	r2, r4
 8000f82:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 8000f84:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000f88:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f90:	e04d      	b.n	800102e <calculPossibilitesRec+0x4da>
 8000f92:	bf00      	nop
 8000f94:	200080f8 	.word	0x200080f8
 8000f98:	20008614 	.word	0x20008614
					{
						possible_eaten[index][i - index + nb_eaten].ligne = possible_eaten[i][i - index + nb_eaten].ligne;
 8000f9c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fa2:	1ad2      	subs	r2, r2, r3
 8000fa4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000fa8:	18d4      	adds	r4, r2, r3
 8000faa:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000fae:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000fb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fb4:	1ac9      	subs	r1, r1, r3
 8000fb6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000fba:	18c8      	adds	r0, r1, r3
 8000fbc:	4d93      	ldr	r5, [pc, #588]	; (800120c <calculPossibilitesRec+0x6b8>)
 8000fbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	440b      	add	r3, r1
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	4423      	add	r3, r4
 8000fca:	f835 4023 	ldrh.w	r4, [r5, r3, lsl #2]
 8000fce:	498f      	ldr	r1, [pc, #572]	; (800120c <calculPossibilitesRec+0x6b8>)
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4403      	add	r3, r0
 8000fda:	4622      	mov	r2, r4
 8000fdc:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
						possible_eaten[index][i - index + nb_eaten].colonne = possible_eaten[i][i - index + nb_eaten].colonne;
 8000fe0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fe6:	1ad2      	subs	r2, r2, r3
 8000fe8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000fec:	18d4      	adds	r4, r2, r3
 8000fee:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000ff2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000ff6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000ff8:	1ac9      	subs	r1, r1, r3
 8000ffa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8000ffe:	18c8      	adds	r0, r1, r3
 8001000:	4d82      	ldr	r5, [pc, #520]	; (800120c <calculPossibilitesRec+0x6b8>)
 8001002:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001004:	460b      	mov	r3, r1
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	440b      	add	r3, r1
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4423      	add	r3, r4
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	442b      	add	r3, r5
 8001012:	885c      	ldrh	r4, [r3, #2]
 8001014:	497d      	ldr	r1, [pc, #500]	; (800120c <calculPossibilitesRec+0x6b8>)
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4403      	add	r3, r0
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	440b      	add	r3, r1
 8001024:	4622      	mov	r2, r4
 8001026:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 8001028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102a:	3301      	adds	r3, #1
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
 800102e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001034:	429a      	cmp	r2, r3
 8001036:	dbb1      	blt.n	8000f9c <calculPossibilitesRec+0x448>
					}
					index++;
 8001038:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800103c:	3301      	adds	r3, #1
 800103e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line - pas][col + 1].isFilled = 0; //On enleve la piece pour la recurrence
 8001042:	89fa      	ldrh	r2, [r7, #14]
 8001044:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001048:	1ad1      	subs	r1, r2, r3
 800104a:	89bb      	ldrh	r3, [r7, #12]
 800104c:	3301      	adds	r3, #1
 800104e:	4870      	ldr	r0, [pc, #448]	; (8001210 <calculPossibilitesRec+0x6bc>)
 8001050:	461a      	mov	r2, r3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	441a      	add	r2, r3
 8001056:	0053      	lsls	r3, r2, #1
 8001058:	461a      	mov	r2, r3
 800105a:	460b      	mov	r3, r1
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	440b      	add	r3, r1
 8001060:	011b      	lsls	r3, r3, #4
 8001062:	4413      	add	r3, r2
 8001064:	4403      	add	r3, r0
 8001066:	3305      	adds	r3, #5
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
					index = calculPossibilitesRec(line - 2 * pas, col + 2, color, possibilites, index, nb_eaten+1);
 800106c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001070:	b29b      	uxth	r3, r3
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	b29b      	uxth	r3, r3
 8001076:	89fa      	ldrh	r2, [r7, #14]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	b298      	uxth	r0, r3
 800107c:	89bb      	ldrh	r3, [r7, #12]
 800107e:	3302      	adds	r3, #2
 8001080:	b299      	uxth	r1, r3
 8001082:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001086:	3301      	adds	r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	7afa      	ldrb	r2, [r7, #11]
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f7ff fd5d 	bl	8000b54 <calculPossibilitesRec>
 800109a:	4603      	mov	r3, r0
 800109c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line - pas][col + 1].isFilled = 1;
 80010a0:	89fa      	ldrh	r2, [r7, #14]
 80010a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010a6:	1ad1      	subs	r1, r2, r3
 80010a8:	89bb      	ldrh	r3, [r7, #12]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4858      	ldr	r0, [pc, #352]	; (8001210 <calculPossibilitesRec+0x6bc>)
 80010ae:	461a      	mov	r2, r3
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	441a      	add	r2, r3
 80010b4:	0053      	lsls	r3, r2, #1
 80010b6:	461a      	mov	r2, r3
 80010b8:	460b      	mov	r3, r1
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4413      	add	r3, r2
 80010c2:	4403      	add	r3, r0
 80010c4:	3305      	adds	r3, #5
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
			possibilites[index] = possible;
			index++;
		}*/
	}
	// Controle de la colonne de gauche en avant :
	if(col > 0 && line != fin)
 80010ca:	89bb      	ldrh	r3, [r7, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f000 8157 	beq.w	8001380 <calculPossibilitesRec+0x82c>
 80010d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	89fa      	ldrh	r2, [r7, #14]
 80010da:	429a      	cmp	r2, r3
 80010dc:	f000 8150 	beq.w	8001380 <calculPossibilitesRec+0x82c>
	{
		// Controle colonne de gauche : piece presente
		if(chessboard[line + pas][col - 1].isFilled == 1)
 80010e0:	89fa      	ldrh	r2, [r7, #14]
 80010e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010e6:	18d1      	adds	r1, r2, r3
 80010e8:	89bb      	ldrh	r3, [r7, #12]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	4848      	ldr	r0, [pc, #288]	; (8001210 <calculPossibilitesRec+0x6bc>)
 80010ee:	461a      	mov	r2, r3
 80010f0:	0092      	lsls	r2, r2, #2
 80010f2:	441a      	add	r2, r3
 80010f4:	0053      	lsls	r3, r2, #1
 80010f6:	461a      	mov	r2, r3
 80010f8:	460b      	mov	r3, r1
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	440b      	add	r3, r1
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	4413      	add	r3, r2
 8001102:	4403      	add	r3, r0
 8001104:	3305      	adds	r3, #5
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	f040 811b 	bne.w	8001344 <calculPossibilitesRec+0x7f0>
		{
			if(chessboard[line + pas][col - 1].piece_color == color) ;//Une piece de sa couleur bloque
 800110e:	89fa      	ldrh	r2, [r7, #14]
 8001110:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001114:	18d1      	adds	r1, r2, r3
 8001116:	89bb      	ldrh	r3, [r7, #12]
 8001118:	3b01      	subs	r3, #1
 800111a:	483d      	ldr	r0, [pc, #244]	; (8001210 <calculPossibilitesRec+0x6bc>)
 800111c:	461a      	mov	r2, r3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	441a      	add	r2, r3
 8001122:	0053      	lsls	r3, r2, #1
 8001124:	461a      	mov	r2, r3
 8001126:	460b      	mov	r3, r1
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	4413      	add	r3, r2
 8001130:	4403      	add	r3, r0
 8001132:	3307      	adds	r3, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	7afa      	ldrb	r2, [r7, #11]
 8001138:	429a      	cmp	r2, r3
 800113a:	f000 8121 	beq.w	8001380 <calculPossibilitesRec+0x82c>
			else if((col >= 2) && (line + pas != fin)) // Assez de cases pour sauter
 800113e:	89bb      	ldrh	r3, [r7, #12]
 8001140:	2b01      	cmp	r3, #1
 8001142:	f240 811d 	bls.w	8001380 <calculPossibilitesRec+0x82c>
 8001146:	89fa      	ldrh	r2, [r7, #14]
 8001148:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800114c:	441a      	add	r2, r3
 800114e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001152:	429a      	cmp	r2, r3
 8001154:	f000 8114 	beq.w	8001380 <calculPossibilitesRec+0x82c>
			{
				if(chessboard[line + 2 * pas][col - 2].isFilled == 0) // Pas de piece apres le saut
 8001158:	89fa      	ldrh	r2, [r7, #14]
 800115a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	18d1      	adds	r1, r2, r3
 8001162:	89bb      	ldrh	r3, [r7, #12]
 8001164:	3b02      	subs	r3, #2
 8001166:	482a      	ldr	r0, [pc, #168]	; (8001210 <calculPossibilitesRec+0x6bc>)
 8001168:	461a      	mov	r2, r3
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	441a      	add	r2, r3
 800116e:	0053      	lsls	r3, r2, #1
 8001170:	461a      	mov	r2, r3
 8001172:	460b      	mov	r3, r1
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	440b      	add	r3, r1
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	4403      	add	r3, r0
 800117e:	3305      	adds	r3, #5
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f040 80fc 	bne.w	8001380 <calculPossibilitesRec+0x82c>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line + 2 * pas, col - 2};
 8001188:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800118c:	b29b      	uxth	r3, r3
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	b29a      	uxth	r2, r3
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	4413      	add	r3, r2
 8001196:	b29b      	uxth	r3, r3
 8001198:	83bb      	strh	r3, [r7, #28]
 800119a:	89bb      	ldrh	r3, [r7, #12]
 800119c:	3b02      	subs	r3, #2
 800119e:	b29b      	uxth	r3, r3
 80011a0:	83fb      	strh	r3, [r7, #30]
					possibilites[index] = possible;
 80011a2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	4413      	add	r3, r2
 80011ac:	461a      	mov	r2, r3
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line + pas;
 80011b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80011ba:	b298      	uxth	r0, r3
 80011bc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80011c0:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 80011c4:	89fb      	ldrh	r3, [r7, #14]
 80011c6:	4403      	add	r3, r0
 80011c8:	b29c      	uxth	r4, r3
 80011ca:	4810      	ldr	r0, [pc, #64]	; (800120c <calculPossibilitesRec+0x6b8>)
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	4622      	mov	r2, r4
 80011d8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col - 1;
 80011dc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80011e0:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 80011e4:	89bb      	ldrh	r3, [r7, #12]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	b29c      	uxth	r4, r3
 80011ea:	4808      	ldr	r0, [pc, #32]	; (800120c <calculPossibilitesRec+0x6b8>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4403      	add	r3, r0
 80011fa:	4622      	mov	r2, r4
 80011fc:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 80011fe:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001202:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
 800120a:	e04c      	b.n	80012a6 <calculPossibilitesRec+0x752>
 800120c:	20008614 	.word	0x20008614
 8001210:	200080f8 	.word	0x200080f8
					{
						possible_eaten[index][i - index + nb_eaten].ligne = possible_eaten[i][i - index + nb_eaten].ligne;
 8001214:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800121a:	1ad2      	subs	r2, r2, r3
 800121c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001220:	18d4      	adds	r4, r2, r3
 8001222:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001226:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800122a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800122c:	1ac9      	subs	r1, r1, r3
 800122e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001232:	18c8      	adds	r0, r1, r3
 8001234:	4da3      	ldr	r5, [pc, #652]	; (80014c4 <calculPossibilitesRec+0x970>)
 8001236:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001238:	460b      	mov	r3, r1
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	440b      	add	r3, r1
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4423      	add	r3, r4
 8001242:	f835 4023 	ldrh.w	r4, [r5, r3, lsl #2]
 8001246:	499f      	ldr	r1, [pc, #636]	; (80014c4 <calculPossibilitesRec+0x970>)
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4403      	add	r3, r0
 8001252:	4622      	mov	r2, r4
 8001254:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
						possible_eaten[index][i - index + nb_eaten].colonne = possible_eaten[i][i - index + nb_eaten].colonne;
 8001258:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800125c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800125e:	1ad2      	subs	r2, r2, r3
 8001260:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001264:	18d4      	adds	r4, r2, r3
 8001266:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800126a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800126e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001270:	1ac9      	subs	r1, r1, r3
 8001272:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001276:	18c8      	adds	r0, r1, r3
 8001278:	4d92      	ldr	r5, [pc, #584]	; (80014c4 <calculPossibilitesRec+0x970>)
 800127a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800127c:	460b      	mov	r3, r1
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	440b      	add	r3, r1
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4423      	add	r3, r4
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	442b      	add	r3, r5
 800128a:	885c      	ldrh	r4, [r3, #2]
 800128c:	498d      	ldr	r1, [pc, #564]	; (80014c4 <calculPossibilitesRec+0x970>)
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4403      	add	r3, r0
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	4622      	mov	r2, r4
 800129e:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 80012a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a2:	3301      	adds	r3, #1
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
 80012a6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80012aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbb1      	blt.n	8001214 <calculPossibilitesRec+0x6c0>
					}
					index++;
 80012b0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80012b4:	3301      	adds	r3, #1
 80012b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line + pas][col - 1].isFilled = 0; //On enleve la piece pour la recurrence
 80012ba:	89fa      	ldrh	r2, [r7, #14]
 80012bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80012c0:	18d1      	adds	r1, r2, r3
 80012c2:	89bb      	ldrh	r3, [r7, #12]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	4880      	ldr	r0, [pc, #512]	; (80014c8 <calculPossibilitesRec+0x974>)
 80012c8:	461a      	mov	r2, r3
 80012ca:	0092      	lsls	r2, r2, #2
 80012cc:	441a      	add	r2, r3
 80012ce:	0053      	lsls	r3, r2, #1
 80012d0:	461a      	mov	r2, r3
 80012d2:	460b      	mov	r3, r1
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	4403      	add	r3, r0
 80012de:	3305      	adds	r3, #5
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
					index = calculPossibilitesRec(line + 2 * pas, col - 2, color, possibilites, index, nb_eaten+1);
 80012e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	89fb      	ldrh	r3, [r7, #14]
 80012f0:	4413      	add	r3, r2
 80012f2:	b298      	uxth	r0, r3
 80012f4:	89bb      	ldrh	r3, [r7, #12]
 80012f6:	3b02      	subs	r3, #2
 80012f8:	b299      	uxth	r1, r3
 80012fa:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80012fe:	3301      	adds	r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	7afa      	ldrb	r2, [r7, #11]
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f7ff fc21 	bl	8000b54 <calculPossibilitesRec>
 8001312:	4603      	mov	r3, r0
 8001314:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line + pas][col - 1].isFilled = 1; //On la remet
 8001318:	89fa      	ldrh	r2, [r7, #14]
 800131a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800131e:	18d1      	adds	r1, r2, r3
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	3b01      	subs	r3, #1
 8001324:	4868      	ldr	r0, [pc, #416]	; (80014c8 <calculPossibilitesRec+0x974>)
 8001326:	461a      	mov	r2, r3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	441a      	add	r2, r3
 800132c:	0053      	lsls	r3, r2, #1
 800132e:	461a      	mov	r2, r3
 8001330:	460b      	mov	r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	4403      	add	r3, r0
 800133c:	3305      	adds	r3, #5
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
 8001342:	e01d      	b.n	8001380 <calculPossibilitesRec+0x82c>
				}
			}
		}
		// Controle colonne de gauche : pas de piece et pas en train de manger
		else if (nb_eaten == 0)
 8001344:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001348:	2b00      	cmp	r3, #0
 800134a:	d119      	bne.n	8001380 <calculPossibilitesRec+0x82c>
		{
			struct cell possible = {line + pas, col - 1};
 800134c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001350:	b29a      	uxth	r2, r3
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	833b      	strh	r3, [r7, #24]
 800135a:	89bb      	ldrh	r3, [r7, #12]
 800135c:	3b01      	subs	r3, #1
 800135e:	b29b      	uxth	r3, r3
 8001360:	837b      	strh	r3, [r7, #26]
			possibilites[index] = possible;
 8001362:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	461a      	mov	r2, r3
 800136e:	f107 0318 	add.w	r3, r7, #24
 8001372:	6818      	ldr	r0, [r3, #0]
 8001374:	6010      	str	r0, [r2, #0]
			index++;
 8001376:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800137a:	3301      	adds	r3, #1
 800137c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
		}
	}
	// Controle colonne de gauche en arriere : piece presente
	if(col > 0 && line != debut)
 8001380:	89bb      	ldrh	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8139 	beq.w	80015fa <calculPossibilitesRec+0xaa6>
 8001388:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800138c:	b29b      	uxth	r3, r3
 800138e:	89fa      	ldrh	r2, [r7, #14]
 8001390:	429a      	cmp	r2, r3
 8001392:	f000 8132 	beq.w	80015fa <calculPossibilitesRec+0xaa6>
	{
		if(chessboard[line - pas][col - 1].isFilled == 1)
 8001396:	89fa      	ldrh	r2, [r7, #14]
 8001398:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800139c:	1ad1      	subs	r1, r2, r3
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4849      	ldr	r0, [pc, #292]	; (80014c8 <calculPossibilitesRec+0x974>)
 80013a4:	461a      	mov	r2, r3
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	441a      	add	r2, r3
 80013aa:	0053      	lsls	r3, r2, #1
 80013ac:	461a      	mov	r2, r3
 80013ae:	460b      	mov	r3, r1
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	4413      	add	r3, r2
 80013b8:	4403      	add	r3, r0
 80013ba:	3305      	adds	r3, #5
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	f040 811b 	bne.w	80015fa <calculPossibilitesRec+0xaa6>
		{
			if(chessboard[line - pas][col - 1].piece_color == color) ;//Une piece de sa couleur bloque
 80013c4:	89fa      	ldrh	r2, [r7, #14]
 80013c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80013ca:	1ad1      	subs	r1, r2, r3
 80013cc:	89bb      	ldrh	r3, [r7, #12]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	483d      	ldr	r0, [pc, #244]	; (80014c8 <calculPossibilitesRec+0x974>)
 80013d2:	461a      	mov	r2, r3
 80013d4:	0092      	lsls	r2, r2, #2
 80013d6:	441a      	add	r2, r3
 80013d8:	0053      	lsls	r3, r2, #1
 80013da:	461a      	mov	r2, r3
 80013dc:	460b      	mov	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	4413      	add	r3, r2
 80013e6:	4403      	add	r3, r0
 80013e8:	3307      	adds	r3, #7
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	7afa      	ldrb	r2, [r7, #11]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	f000 8103 	beq.w	80015fa <calculPossibilitesRec+0xaa6>
			else if((col >= 2) && (line - pas != debut)) // Assez de cases pour sauter
 80013f4:	89bb      	ldrh	r3, [r7, #12]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	f240 80ff 	bls.w	80015fa <calculPossibilitesRec+0xaa6>
 80013fc:	89fa      	ldrh	r2, [r7, #14]
 80013fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001402:	1ad2      	subs	r2, r2, r3
 8001404:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001408:	429a      	cmp	r2, r3
 800140a:	f000 80f6 	beq.w	80015fa <calculPossibilitesRec+0xaa6>
			{
				if(chessboard[line - 2 * pas][col - 2].isFilled == 0) // Pas de piece apres le saut
 800140e:	89fa      	ldrh	r2, [r7, #14]
 8001410:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	1ad1      	subs	r1, r2, r3
 8001418:	89bb      	ldrh	r3, [r7, #12]
 800141a:	3b02      	subs	r3, #2
 800141c:	482a      	ldr	r0, [pc, #168]	; (80014c8 <calculPossibilitesRec+0x974>)
 800141e:	461a      	mov	r2, r3
 8001420:	0092      	lsls	r2, r2, #2
 8001422:	441a      	add	r2, r3
 8001424:	0053      	lsls	r3, r2, #1
 8001426:	461a      	mov	r2, r3
 8001428:	460b      	mov	r3, r1
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	4413      	add	r3, r2
 8001432:	4403      	add	r3, r0
 8001434:	3305      	adds	r3, #5
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	f040 80de 	bne.w	80015fa <calculPossibilitesRec+0xaa6>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line - 2 * pas, col - 2};
 800143e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001442:	b29b      	uxth	r3, r3
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	b29b      	uxth	r3, r3
 8001448:	89fa      	ldrh	r2, [r7, #14]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	b29b      	uxth	r3, r3
 800144e:	82bb      	strh	r3, [r7, #20]
 8001450:	89bb      	ldrh	r3, [r7, #12]
 8001452:	3b02      	subs	r3, #2
 8001454:	b29b      	uxth	r3, r3
 8001456:	82fb      	strh	r3, [r7, #22]
					possibilites[index] = possible;
 8001458:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	461a      	mov	r2, r3
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	6010      	str	r0, [r2, #0]
					possible_eaten[index][nb_eaten].ligne = line - pas;
 800146c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001470:	b29b      	uxth	r3, r3
 8001472:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001476:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 800147a:	89f8      	ldrh	r0, [r7, #14]
 800147c:	1ac3      	subs	r3, r0, r3
 800147e:	b29c      	uxth	r4, r3
 8001480:	4810      	ldr	r0, [pc, #64]	; (80014c4 <calculPossibilitesRec+0x970>)
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	4622      	mov	r2, r4
 800148e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
					possible_eaten[index][nb_eaten].colonne = col - 1;
 8001492:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001496:	f897 1054 	ldrb.w	r1, [r7, #84]	; 0x54
 800149a:	89bb      	ldrh	r3, [r7, #12]
 800149c:	3b01      	subs	r3, #1
 800149e:	b29c      	uxth	r4, r3
 80014a0:	4808      	ldr	r0, [pc, #32]	; (80014c4 <calculPossibilitesRec+0x970>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4403      	add	r3, r0
 80014b0:	4622      	mov	r2, r4
 80014b2:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 80014b4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80014b8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
 80014c0:	e04d      	b.n	800155e <calculPossibilitesRec+0xa0a>
 80014c2:	bf00      	nop
 80014c4:	20008614 	.word	0x20008614
 80014c8:	200080f8 	.word	0x200080f8
					{
						possible_eaten[index][i - index + nb_eaten].ligne = possible_eaten[i][i - index + nb_eaten].ligne;
 80014cc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80014d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014d2:	1ad2      	subs	r2, r2, r3
 80014d4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80014d8:	18d4      	adds	r4, r2, r3
 80014da:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80014de:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80014e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014e4:	1ac9      	subs	r1, r1, r3
 80014e6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80014ea:	18c8      	adds	r0, r1, r3
 80014ec:	4d46      	ldr	r5, [pc, #280]	; (8001608 <calculPossibilitesRec+0xab4>)
 80014ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014f0:	460b      	mov	r3, r1
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	440b      	add	r3, r1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4423      	add	r3, r4
 80014fa:	f835 4023 	ldrh.w	r4, [r5, r3, lsl #2]
 80014fe:	4942      	ldr	r1, [pc, #264]	; (8001608 <calculPossibilitesRec+0xab4>)
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4403      	add	r3, r0
 800150a:	4622      	mov	r2, r4
 800150c:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
						possible_eaten[index][i - index + nb_eaten].colonne = possible_eaten[i][i - index + nb_eaten].colonne;
 8001510:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001516:	1ad2      	subs	r2, r2, r3
 8001518:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800151c:	18d4      	adds	r4, r2, r3
 800151e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8001522:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001526:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001528:	1ac9      	subs	r1, r1, r3
 800152a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800152e:	18c8      	adds	r0, r1, r3
 8001530:	4d35      	ldr	r5, [pc, #212]	; (8001608 <calculPossibilitesRec+0xab4>)
 8001532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001534:	460b      	mov	r3, r1
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	440b      	add	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4423      	add	r3, r4
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	442b      	add	r3, r5
 8001542:	885c      	ldrh	r4, [r3, #2]
 8001544:	4930      	ldr	r1, [pc, #192]	; (8001608 <calculPossibilitesRec+0xab4>)
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4403      	add	r3, r0
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	4622      	mov	r2, r4
 8001556:	805a      	strh	r2, [r3, #2]
					for (int i = index - nb_eaten; i < index; i++)
 8001558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155a:	3301      	adds	r3, #1
 800155c:	633b      	str	r3, [r7, #48]	; 0x30
 800155e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001564:	429a      	cmp	r2, r3
 8001566:	dbb1      	blt.n	80014cc <calculPossibilitesRec+0x978>
					}
					index++;
 8001568:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800156c:	3301      	adds	r3, #1
 800156e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line - pas][col - 1].isFilled = 0;
 8001572:	89fa      	ldrh	r2, [r7, #14]
 8001574:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001578:	1ad1      	subs	r1, r2, r3
 800157a:	89bb      	ldrh	r3, [r7, #12]
 800157c:	3b01      	subs	r3, #1
 800157e:	4823      	ldr	r0, [pc, #140]	; (800160c <calculPossibilitesRec+0xab8>)
 8001580:	461a      	mov	r2, r3
 8001582:	0092      	lsls	r2, r2, #2
 8001584:	441a      	add	r2, r3
 8001586:	0053      	lsls	r3, r2, #1
 8001588:	461a      	mov	r2, r3
 800158a:	460b      	mov	r3, r1
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	4413      	add	r3, r2
 8001594:	4403      	add	r3, r0
 8001596:	3305      	adds	r3, #5
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
					index = calculPossibilitesRec(line - 2 * pas, col - 2, color, possibilites, index, nb_eaten+1);
 800159c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	89fa      	ldrh	r2, [r7, #14]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	b298      	uxth	r0, r3
 80015ac:	89bb      	ldrh	r3, [r7, #12]
 80015ae:	3b02      	subs	r3, #2
 80015b0:	b299      	uxth	r1, r3
 80015b2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80015b6:	3301      	adds	r3, #1
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	7afa      	ldrb	r2, [r7, #11]
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f7ff fac5 	bl	8000b54 <calculPossibilitesRec>
 80015ca:	4603      	mov	r3, r0
 80015cc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
					chessboard[line - pas][col - 1].isFilled = 1;
 80015d0:	89fa      	ldrh	r2, [r7, #14]
 80015d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80015d6:	1ad1      	subs	r1, r2, r3
 80015d8:	89bb      	ldrh	r3, [r7, #12]
 80015da:	3b01      	subs	r3, #1
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <calculPossibilitesRec+0xab8>)
 80015de:	461a      	mov	r2, r3
 80015e0:	0092      	lsls	r2, r2, #2
 80015e2:	441a      	add	r2, r3
 80015e4:	0053      	lsls	r3, r2, #1
 80015e6:	461a      	mov	r2, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	4403      	add	r3, r0
 80015f4:	3305      	adds	r3, #5
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	return index;
 80015fa:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50

}
 80015fe:	4618      	mov	r0, r3
 8001600:	3740      	adds	r7, #64	; 0x40
 8001602:	46bd      	mov	sp, r7
 8001604:	bdb0      	pop	{r4, r5, r7, pc}
 8001606:	bf00      	nop
 8001608:	20008614 	.word	0x20008614
 800160c:	200080f8 	.word	0x200080f8

08001610 <calculPossibilitesDame>:
 * nb_eaten		: donne le nombre de pieces mangees jusqu'à cette possible case (init a 0)
 *
 * retour		: indice de la prochaine case vide du tableau
 */
uint8_t calculPossibilitesDame(uint16_t line, uint16_t col, uint8_t color, struct cell *possibilites)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b090      	sub	sp, #64	; 0x40
 8001614:	af02      	add	r7, sp, #8
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	4603      	mov	r3, r0
 800161a:	81fb      	strh	r3, [r7, #14]
 800161c:	460b      	mov	r3, r1
 800161e:	81bb      	strh	r3, [r7, #12]
 8001620:	4613      	mov	r3, r2
 8001622:	72fb      	strb	r3, [r7, #11]
	uint8_t index = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int pas_l_tab[] = {-1, 1};
 800162a:	4ab5      	ldr	r2, [pc, #724]	; (8001900 <calculPossibilitesDame+0x2f0>)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001634:	e883 0003 	stmia.w	r3, {r0, r1}
	int pas_c_tab[] = {-1, 1};
 8001638:	4ab1      	ldr	r2, [pc, #708]	; (8001900 <calculPossibilitesDame+0x2f0>)
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001642:	e883 0003 	stmia.w	r3, {r0, r1}
	int pas_l, pas_c;
	uint8_t fin = 7, debut = 0;
 8001646:	2307      	movs	r3, #7
 8001648:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800164c:	2300      	movs	r3, #0
 800164e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	int8_t d_l, d_c;

	for (uint8_t i = 0; i < 2; i++)
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001658:	e146      	b.n	80018e8 <calculPossibilitesDame+0x2d8>
	{
		for (uint8_t j = 0; j < 2; j++)
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001660:	e138      	b.n	80018d4 <calculPossibilitesDame+0x2c4>
		{
			// Initialisation pas et fin de la diagonale observee
			pas_l = pas_l_tab[i];
 8001662:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800166c:	4413      	add	r3, r2
 800166e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
			pas_c = pas_c_tab[j];
 8001674:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800167e:	4413      	add	r3, r2
 8001680:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
			d_l = line + pas_l;
 8001686:	89fb      	ldrh	r3, [r7, #14]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4413      	add	r3, r2
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			d_c = col + pas_c;
 8001696:	89bb      	ldrh	r3, [r7, #12]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4413      	add	r3, r2
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			while (d_l <= fin && d_l >= debut && d_c >= debut && d_c <= fin)
 80016a6:	e0f5      	b.n	8001894 <calculPossibilitesDame+0x284>
			{
				// place pour se mettre
				if (chessboard[d_l][d_c].isFilled == 0)
 80016a8:	f997 1036 	ldrsb.w	r1, [r7, #54]	; 0x36
 80016ac:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80016b0:	4894      	ldr	r0, [pc, #592]	; (8001904 <calculPossibilitesDame+0x2f4>)
 80016b2:	461a      	mov	r2, r3
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	441a      	add	r2, r3
 80016b8:	0053      	lsls	r3, r2, #1
 80016ba:	461a      	mov	r2, r3
 80016bc:	460b      	mov	r3, r1
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	4413      	add	r3, r2
 80016c6:	4403      	add	r3, r0
 80016c8:	3305      	adds	r3, #5
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d127      	bne.n	8001720 <calculPossibilitesDame+0x110>
				{
					struct cell possible = {d_l, d_c};
 80016d0:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	82bb      	strh	r3, [r7, #20]
 80016d8:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80016dc:	b29b      	uxth	r3, r3
 80016de:	82fb      	strh	r3, [r7, #22]
					possibilites[index] = possible;
 80016e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	461a      	mov	r2, r3
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	6010      	str	r0, [r2, #0]
					index++;
 80016f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016f8:	3301      	adds	r3, #1
 80016fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					d_l = d_l + pas_l;
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	b2da      	uxtb	r2, r3
 8001702:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001706:	4413      	add	r3, r2
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					d_c = d_c + pas_c;
 800170e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001710:	b2da      	uxtb	r2, r3
 8001712:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001716:	4413      	add	r3, r2
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800171e:	e0b9      	b.n	8001894 <calculPossibilitesDame+0x284>
				}
				// un pion est present
				else
				{
					// On peut sauter
					if((d_l + pas_l) <= fin && (d_l + pas_l) >= debut && (d_c + pas_c) <= fin && (d_c + 2 * pas_c) >= debut)
 8001720:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001726:	441a      	add	r2, r3
 8001728:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800172c:	429a      	cmp	r2, r3
 800172e:	f300 80cb 	bgt.w	80018c8 <calculPossibilitesDame+0x2b8>
 8001732:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001738:	441a      	add	r2, r3
 800173a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800173e:	429a      	cmp	r2, r3
 8001740:	f2c0 80c2 	blt.w	80018c8 <calculPossibilitesDame+0x2b8>
 8001744:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8001748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174a:	441a      	add	r2, r3
 800174c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001750:	429a      	cmp	r2, r3
 8001752:	f300 80b9 	bgt.w	80018c8 <calculPossibilitesDame+0x2b8>
 8001756:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 800175a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	441a      	add	r2, r3
 8001760:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001764:	429a      	cmp	r2, r3
 8001766:	f2c0 80af 	blt.w	80018c8 <calculPossibilitesDame+0x2b8>
					{
						// Pas de piece genante
						if(chessboard[d_l + 2 * pas_l][d_c + pas_c].isFilled == 0)
 800176a:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	18d1      	adds	r1, r2, r3
 8001774:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8001778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177a:	4413      	add	r3, r2
 800177c:	4861      	ldr	r0, [pc, #388]	; (8001904 <calculPossibilitesDame+0x2f4>)
 800177e:	461a      	mov	r2, r3
 8001780:	0092      	lsls	r2, r2, #2
 8001782:	441a      	add	r2, r3
 8001784:	0053      	lsls	r3, r2, #1
 8001786:	461a      	mov	r2, r3
 8001788:	460b      	mov	r3, r1
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	4413      	add	r3, r2
 8001792:	4403      	add	r3, r0
 8001794:	3305      	adds	r3, #5
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f040 8095 	bne.w	80018c8 <calculPossibilitesDame+0x2b8>
						{
							struct cell possible = {d_l + pas_l, d_c + pas_c};
 800179e:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	823b      	strh	r3, [r7, #16]
 80017ae:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	827b      	strh	r3, [r7, #18]
							possibilites[index] = possible;
 80017be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	461a      	mov	r2, r3
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	6010      	str	r0, [r2, #0]
							possible_eaten[index][0].ligne = d_l;
 80017d2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80017d6:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80017da:	b298      	uxth	r0, r3
 80017dc:	494a      	ldr	r1, [pc, #296]	; (8001908 <calculPossibilitesDame+0x2f8>)
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	440b      	add	r3, r1
 80017e8:	4602      	mov	r2, r0
 80017ea:	801a      	strh	r2, [r3, #0]
							possible_eaten[index][0].colonne = d_c;
 80017ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80017f0:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 80017f4:	b298      	uxth	r0, r3
 80017f6:	4944      	ldr	r1, [pc, #272]	; (8001908 <calculPossibilitesDame+0x2f8>)
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	440b      	add	r3, r1
 8001802:	3302      	adds	r3, #2
 8001804:	4602      	mov	r2, r0
 8001806:	801a      	strh	r2, [r3, #0]
							index++;
 8001808:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800180c:	3301      	adds	r3, #1
 800180e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							chessboard[d_l][d_c].isFilled = 0; //On enleve la piece pour la recurrence
 8001812:	f997 1036 	ldrsb.w	r1, [r7, #54]	; 0x36
 8001816:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 800181a:	483a      	ldr	r0, [pc, #232]	; (8001904 <calculPossibilitesDame+0x2f4>)
 800181c:	461a      	mov	r2, r3
 800181e:	0092      	lsls	r2, r2, #2
 8001820:	441a      	add	r2, r3
 8001822:	0053      	lsls	r3, r2, #1
 8001824:	461a      	mov	r2, r3
 8001826:	460b      	mov	r3, r1
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4413      	add	r3, r2
 8001830:	4403      	add	r3, r0
 8001832:	3305      	adds	r3, #5
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
							index = calculPossibilitesRec(d_l + pas_l, d_c + pas_c, color, possibilites, index, 1);
 8001838:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 800183c:	b29a      	uxth	r2, r3
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	b29b      	uxth	r3, r3
 8001842:	4413      	add	r3, r2
 8001844:	b298      	uxth	r0, r3
 8001846:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 800184a:	b29a      	uxth	r2, r3
 800184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184e:	b29b      	uxth	r3, r3
 8001850:	4413      	add	r3, r2
 8001852:	b299      	uxth	r1, r3
 8001854:	7afa      	ldrb	r2, [r7, #11]
 8001856:	2301      	movs	r3, #1
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f7ff f977 	bl	8000b54 <calculPossibilitesRec>
 8001866:	4603      	mov	r3, r0
 8001868:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							chessboard[d_l][d_c].isFilled = 1; //On la remet
 800186c:	f997 1036 	ldrsb.w	r1, [r7, #54]	; 0x36
 8001870:	f997 3035 	ldrsb.w	r3, [r7, #53]	; 0x35
 8001874:	4823      	ldr	r0, [pc, #140]	; (8001904 <calculPossibilitesDame+0x2f4>)
 8001876:	461a      	mov	r2, r3
 8001878:	0092      	lsls	r2, r2, #2
 800187a:	441a      	add	r2, r3
 800187c:	0053      	lsls	r3, r2, #1
 800187e:	461a      	mov	r2, r3
 8001880:	460b      	mov	r3, r1
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	4413      	add	r3, r2
 800188a:	4403      	add	r3, r0
 800188c:	3305      	adds	r3, #5
 800188e:	2201      	movs	r2, #1
 8001890:	701a      	strb	r2, [r3, #0]
						}
					}
					break;
 8001892:	e019      	b.n	80018c8 <calculPossibilitesDame+0x2b8>
			while (d_l <= fin && d_l >= debut && d_c >= debut && d_c <= fin)
 8001894:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 8001898:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800189c:	429a      	cmp	r2, r3
 800189e:	dc14      	bgt.n	80018ca <calculPossibilitesDame+0x2ba>
 80018a0:	f997 2036 	ldrsb.w	r2, [r7, #54]	; 0x36
 80018a4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80018a8:	429a      	cmp	r2, r3
 80018aa:	db0e      	blt.n	80018ca <calculPossibilitesDame+0x2ba>
 80018ac:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 80018b0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80018b4:	429a      	cmp	r2, r3
 80018b6:	db08      	blt.n	80018ca <calculPossibilitesDame+0x2ba>
 80018b8:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 80018bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f77f aef1 	ble.w	80016a8 <calculPossibilitesDame+0x98>
 80018c6:	e000      	b.n	80018ca <calculPossibilitesDame+0x2ba>
					break;
 80018c8:	bf00      	nop
		for (uint8_t j = 0; j < 2; j++)
 80018ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018ce:	3301      	adds	r3, #1
 80018d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80018d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018d8:	2b01      	cmp	r3, #1
 80018da:	f67f aec2 	bls.w	8001662 <calculPossibilitesDame+0x52>
	for (uint8_t i = 0; i < 2; i++)
 80018de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018e2:	3301      	adds	r3, #1
 80018e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80018e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	f67f aeb4 	bls.w	800165a <calculPossibilitesDame+0x4a>
				}
			}
		}
	}

	return index;
 80018f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3738      	adds	r7, #56	; 0x38
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	0800f9c4 	.word	0x0800f9c4
 8001904:	200080f8 	.word	0x200080f8
 8001908:	20008614 	.word	0x20008614

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b5b0      	push	{r4, r5, r7, lr}
 800190e:	b0ac      	sub	sp, #176	; 0xb0
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8001912:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001920:	2301      	movs	r3, #1
 8001922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800192c:	f7ff f8a8 	bl	8000a80 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001930:	f7ff f8cc 	bl	8000acc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001934:	f004 fef8 	bl	8006728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001938:	f000 f914 	bl	8001b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193c:	f000 fedc 	bl	80026f8 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001940:	f000 f9d4 	bl	8001cec <MX_ADC3_Init>
  MX_DMA2D_Init();
 8001944:	f000 fa4e 	bl	8001de4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001948:	f000 fe86 	bl	8002658 <MX_FMC_Init>
  MX_I2C1_Init();
 800194c:	f000 fa7c 	bl	8001e48 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001950:	f000 faba 	bl	8001ec8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001954:	f000 faf8 	bl	8001f48 <MX_LTDC_Init>
  MX_RTC_Init();
 8001958:	f000 fb78 	bl	800204c <MX_RTC_Init>
  MX_SPI2_Init();
 800195c:	f000 fc1c 	bl	8002198 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001960:	f000 fc58 	bl	8002214 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001964:	f000 fcaa 	bl	80022bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001968:	f000 fcf6 	bl	8002358 <MX_TIM3_Init>
  MX_TIM5_Init();
 800196c:	f000 fd42 	bl	80023f4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001970:	f000 fd8e 	bl	8002490 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001974:	f000 fe10 	bl	8002598 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001978:	f000 fe3e 	bl	80025f8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800197c:	f000 f964 	bl	8001c48 <MX_ADC1_Init>
  MX_DAC_Init();
 8001980:	f000 fa06 	bl	8001d90 <MX_DAC_Init>
  MX_UART7_Init();
 8001984:	f000 fdd8 	bl	8002538 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001988:	f002 fb42 	bl	8004010 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800198c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001990:	2000      	movs	r0, #0
 8001992:	f002 fbd5 	bl	8004140 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8001996:	f002 fbab 	bl	80040f0 <BSP_LCD_GetXSize>
 800199a:	4604      	mov	r4, r0
 800199c:	f002 fbbc 	bl	8004118 <BSP_LCD_GetYSize>
 80019a0:	4603      	mov	r3, r0
 80019a2:	fb03 f304 	mul.w	r3, r3, r4
 80019a6:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4619      	mov	r1, r3
 80019ae:	2001      	movs	r0, #1
 80019b0:	f002 fbc6 	bl	8004140 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 80019b4:	f003 f93e 	bl	8004c34 <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 80019b8:	2000      	movs	r0, #0
 80019ba:	f002 fc21 	bl	8004200 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80019be:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80019c2:	f002 fc8f 	bl	80042e4 <BSP_LCD_Clear>
    //BSP_LCD_DrawBitmap(0,0,(uint8_t*)HorombeRGB565_bmp);
    BSP_LCD_DrawBitmap(0,0,(uint8_t*)damier_bmp);
 80019c6:	4a55      	ldr	r2, [pc, #340]	; (8001b1c <main+0x210>)
 80019c8:	2100      	movs	r1, #0
 80019ca:	2000      	movs	r0, #0
 80019cc:	f002 ff66 	bl	800489c <BSP_LCD_DrawBitmap>
    BSP_LCD_SelectLayer(1);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f002 fc15 	bl	8004200 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(0);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f002 fc84 	bl	80042e4 <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font12);
 80019dc:	4850      	ldr	r0, [pc, #320]	; (8001b20 <main+0x214>)
 80019de:	f002 fc51 	bl	8004284 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80019e2:	f04f 30ff 	mov.w	r0, #4294967295
 80019e6:	f002 fc1b 	bl	8004220 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80019ea:	484e      	ldr	r0, [pc, #312]	; (8001b24 <main+0x218>)
 80019ec:	f002 fc30 	bl	8004250 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80019f0:	f002 fb7e 	bl	80040f0 <BSP_LCD_GetXSize>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b29c      	uxth	r4, r3
 80019f8:	f002 fb8e 	bl	8004118 <BSP_LCD_GetYSize>
 80019fc:	4603      	mov	r3, r0
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4619      	mov	r1, r3
 8001a02:	4620      	mov	r0, r4
 8001a04:	f003 fd28 	bl	8005458 <BSP_TS_Init>
    BSP_TS_ITConfig();
 8001a08:	f003 fd66 	bl	80054d8 <BSP_TS_ITConfig>

	// Init potentiometre
	  sConfig.Channel = ADC_CHANNEL_6;
 8001a0c:	2306      	movs	r3, #6
 8001a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001a12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a16:	4619      	mov	r1, r3
 8001a18:	4843      	ldr	r0, [pc, #268]	; (8001b28 <main+0x21c>)
 8001a1a:	f004 fff1 	bl	8006a00 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8001a1e:	4842      	ldr	r0, [pc, #264]	; (8001b28 <main+0x21c>)
 8001a20:	f004 ff20 	bl	8006864 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
    mutexEcran = xSemaphoreCreateMutex();
 8001a24:	2001      	movs	r0, #1
 8001a26:	f00b fd1e 	bl	800d466 <xQueueCreateMutex>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a3f      	ldr	r2, [pc, #252]	; (8001b2c <main+0x220>)
 8001a2e:	6013      	str	r3, [r2, #0]
    mutexChessboard = xSemaphoreCreateMutex();
 8001a30:	2001      	movs	r0, #1
 8001a32:	f00b fd18 	bl	800d466 <xQueueCreateMutex>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a3d      	ldr	r2, [pc, #244]	; (8001b30 <main+0x224>)
 8001a3a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of queueSel */
  osMessageQDef(queueSel, 16, uint16_t);
 8001a3c:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <main+0x228>)
 8001a3e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001a42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queueSelHandle = osMessageCreate(osMessageQ(queueSel), NULL);
 8001a48:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f00b fac5 	bl	800cfde <osMessageCreate>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4a38      	ldr	r2, [pc, #224]	; (8001b38 <main+0x22c>)
 8001a58:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task_init */
  osThreadDef(task_init, fonction_init, osPriorityHigh, 0, 1024);
 8001a5a:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <main+0x230>)
 8001a5c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001a60:	461d      	mov	r5, r3
 8001a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_initHandle = osThreadCreate(osThread(task_init), NULL);
 8001a6e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00b fa46 	bl	800cf06 <osThreadCreate>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a30      	ldr	r2, [pc, #192]	; (8001b40 <main+0x234>)
 8001a7e:	6013      	str	r3, [r2, #0]

  /* definition and creation of affichage */
  osThreadDef(affichage, fonction_affichage, osPriorityNormal, 0, 1024);
 8001a80:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <main+0x238>)
 8001a82:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001a86:	461d      	mov	r5, r3
 8001a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  affichageHandle = osThreadCreate(osThread(affichage), NULL);
 8001a94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00b fa33 	bl	800cf06 <osThreadCreate>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a29      	ldr	r2, [pc, #164]	; (8001b48 <main+0x23c>)
 8001aa4:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_select */
  osThreadDef(task_select, fonction_select, osPriorityAboveNormal, 0, 256);
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <main+0x240>)
 8001aa8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001aac:	461d      	mov	r5, r3
 8001aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ab6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_selectHandle = osThreadCreate(osThread(task_select), NULL);
 8001aba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00b fa20 	bl	800cf06 <osThreadCreate>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <main+0x244>)
 8001aca:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_calculPoss */
  osThreadDef(task_calculPoss, fonction_calculPossibilites, osPriorityBelowNormal, 0, 4096);
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <main+0x248>)
 8001ace:	f107 0420 	add.w	r4, r7, #32
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001adc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_calculPossHandle = osThreadCreate(osThread(task_calculPoss), NULL);
 8001ae0:	f107 0320 	add.w	r3, r7, #32
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f00b fa0d 	bl	800cf06 <osThreadCreate>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4a1a      	ldr	r2, [pc, #104]	; (8001b58 <main+0x24c>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_victory */
  osThreadDef(task_victory, fonctionVictory, osPriorityNormal, 0, 1024);
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <main+0x250>)
 8001af4:	1d3c      	adds	r4, r7, #4
 8001af6:	461d      	mov	r5, r3
 8001af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001afc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_victoryHandle = osThreadCreate(osThread(task_victory), NULL);
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f00b f9fc 	bl	800cf06 <osThreadCreate>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <main+0x254>)
 8001b12:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001b14:	f00b f9f0 	bl	800cef8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <main+0x20c>
 8001b1a:	bf00      	nop
 8001b1c:	0800fb0c 	.word	0x0800fb0c
 8001b20:	20000034 	.word	0x20000034
 8001b24:	ff0000ff 	.word	0xff0000ff
 8001b28:	2000850c 	.word	0x2000850c
 8001b2c:	200085d8 	.word	0x200085d8
 8001b30:	20008da4 	.word	0x20008da4
 8001b34:	0800f9cc 	.word	0x0800f9cc
 8001b38:	200080a8 	.word	0x200080a8
 8001b3c:	0800f9dc 	.word	0x0800f9dc
 8001b40:	20008058 	.word	0x20008058
 8001b44:	0800f9f8 	.word	0x0800f9f8
 8001b48:	20008508 	.word	0x20008508
 8001b4c:	0800fa14 	.word	0x0800fa14
 8001b50:	200083c4 	.word	0x200083c4
 8001b54:	0800fa30 	.word	0x0800fa30
 8001b58:	200084bc 	.word	0x200084bc
 8001b5c:	0800fa4c 	.word	0x0800fa4c
 8001b60:	200085f0 	.word	0x200085f0

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b094      	sub	sp, #80	; 0x50
 8001b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6a:	f107 0320 	add.w	r3, r7, #32
 8001b6e:	2230      	movs	r2, #48	; 0x30
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00d fe2a 	bl	800f7cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b88:	f007 fdee 	bl	8009768 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <SystemClock_Config+0xdc>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	4a2b      	ldr	r2, [pc, #172]	; (8001c40 <SystemClock_Config+0xdc>)
 8001b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b96:	6413      	str	r3, [r2, #64]	; 0x40
 8001b98:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <SystemClock_Config+0xdc>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <SystemClock_Config+0xe0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a26      	ldr	r2, [pc, #152]	; (8001c44 <SystemClock_Config+0xe0>)
 8001baa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <SystemClock_Config+0xe0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001bbc:	2309      	movs	r3, #9
 8001bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001bd4:	2319      	movs	r3, #25
 8001bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001bd8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001bdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bde:	2302      	movs	r3, #2
 8001be0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001be2:	2309      	movs	r3, #9
 8001be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be6:	f107 0320 	add.w	r3, r7, #32
 8001bea:	4618      	mov	r0, r3
 8001bec:	f007 fe1c 	bl	8009828 <HAL_RCC_OscConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001bf6:	f002 f861 	bl	8003cbc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bfa:	f007 fdc5 	bl	8009788 <HAL_PWREx_EnableOverDrive>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001c04:	f002 f85a 	bl	8003cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c08:	230f      	movs	r3, #15
 8001c0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	2106      	movs	r1, #6
 8001c26:	4618      	mov	r0, r3
 8001c28:	f008 f8a2 	bl	8009d70 <HAL_RCC_ClockConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c32:	f002 f843 	bl	8003cbc <Error_Handler>
  }
}
 8001c36:	bf00      	nop
 8001c38:	3750      	adds	r7, #80	; 0x50
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40007000 	.word	0x40007000

08001c48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c4e:	463b      	mov	r3, r7
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c5c:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <MX_ADC1_Init+0x9c>)
 8001c5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c8a:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <MX_ADC1_Init+0xa0>)
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ca8:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001caa:	f004 fd97 	bl	80067dc <HAL_ADC_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001cb4:	f002 f802 	bl	8003cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_ADC1_Init+0x98>)
 8001cca:	f004 fe99 	bl	8006a00 <HAL_ADC_ConfigChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001cd4:	f001 fff2 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200084c0 	.word	0x200084c0
 8001ce4:	40012000 	.word	0x40012000
 8001ce8:	0f000001 	.word	0x0f000001

08001cec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d00:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <MX_ADC3_Init+0x9c>)
 8001d02:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d0a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d2e:	4a17      	ldr	r2, [pc, #92]	; (8001d8c <MX_ADC3_Init+0xa0>)
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d4e:	f004 fd45 	bl	80067dc <HAL_ADC_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001d58:	f001 ffb0 	bl	8003cbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d5c:	2306      	movs	r3, #6
 8001d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d60:	2301      	movs	r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d68:	463b      	mov	r3, r7
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_ADC3_Init+0x98>)
 8001d6e:	f004 fe47 	bl	8006a00 <HAL_ADC_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001d78:	f001 ffa0 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2000850c 	.word	0x2000850c
 8001d88:	40012200 	.word	0x40012200
 8001d8c:	0f000001 	.word	0x0f000001

08001d90 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d96:	463b      	mov	r3, r7
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_DAC_Init+0x4c>)
 8001da0:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <MX_DAC_Init+0x50>)
 8001da2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001da4:	480d      	ldr	r0, [pc, #52]	; (8001ddc <MX_DAC_Init+0x4c>)
 8001da6:	f005 f95d 	bl	8007064 <HAL_DAC_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001db0:	f001 ff84 	bl	8003cbc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <MX_DAC_Init+0x4c>)
 8001dc4:	f005 f9d4 	bl	8007170 <HAL_DAC_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001dce:	f001 ff75 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200085dc 	.word	0x200085dc
 8001de0:	40007400 	.word	0x40007400

08001de4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001dea:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <MX_DMA2D_Init+0x60>)
 8001dec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001e18:	4809      	ldr	r0, [pc, #36]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001e1a:	f005 fc53 	bl	80076c4 <HAL_DMA2D_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001e24:	f001 ff4a 	bl	8003cbc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_DMA2D_Init+0x5c>)
 8001e2c:	f005 feb8 	bl	8007ba0 <HAL_DMA2D_ConfigLayer>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001e36:	f001 ff41 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20008ce4 	.word	0x20008ce4
 8001e44:	4002b000 	.word	0x4002b000

08001e48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <MX_I2C1_Init+0x78>)
 8001e50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <MX_I2C1_Init+0x7c>)
 8001e56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e82:	480e      	ldr	r0, [pc, #56]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e84:	f006 fabe 	bl	8008404 <HAL_I2C_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e8e:	f001 ff15 	bl	8003cbc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e92:	2100      	movs	r1, #0
 8001e94:	4809      	ldr	r0, [pc, #36]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001e96:	f007 f857 	bl	8008f48 <HAL_I2CEx_ConfigAnalogFilter>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ea0:	f001 ff0c 	bl	8003cbc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_I2C1_Init+0x74>)
 8001ea8:	f007 f899 	bl	8008fde <HAL_I2CEx_ConfigDigitalFilter>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001eb2:	f001 ff03 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200080ac 	.word	0x200080ac
 8001ec0:	40005400 	.word	0x40005400
 8001ec4:	00c0eaff 	.word	0x00c0eaff

08001ec8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001ece:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <MX_I2C3_Init+0x78>)
 8001ed0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001ed4:	4a1b      	ldr	r2, [pc, #108]	; (8001f44 <MX_I2C3_Init+0x7c>)
 8001ed6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f02:	480e      	ldr	r0, [pc, #56]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001f04:	f006 fa7e 	bl	8008404 <HAL_I2C_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001f0e:	f001 fed5 	bl	8003cbc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f12:	2100      	movs	r1, #0
 8001f14:	4809      	ldr	r0, [pc, #36]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001f16:	f007 f817 	bl	8008f48 <HAL_I2CEx_ConfigAnalogFilter>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001f20:	f001 fecc 	bl	8003cbc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001f24:	2100      	movs	r1, #0
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_I2C3_Init+0x74>)
 8001f28:	f007 f859 	bl	8008fde <HAL_I2CEx_ConfigDigitalFilter>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001f32:	f001 fec3 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20007f24 	.word	0x20007f24
 8001f40:	40005c00 	.word	0x40005c00
 8001f44:	00c0eaff 	.word	0x00c0eaff

08001f48 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	; 0x38
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	2234      	movs	r2, #52	; 0x34
 8001f52:	2100      	movs	r1, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00d fc39 	bl	800f7cc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001f5a:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f5c:	4a3a      	ldr	r2, [pc, #232]	; (8002048 <MX_LTDC_Init+0x100>)
 8001f5e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001f60:	4b38      	ldr	r3, [pc, #224]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001f66:	4b37      	ldr	r3, [pc, #220]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f6c:	4b35      	ldr	r3, [pc, #212]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f72:	4b34      	ldr	r3, [pc, #208]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f7a:	2228      	movs	r2, #40	; 0x28
 8001f7c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001f7e:	4b31      	ldr	r3, [pc, #196]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f80:	2209      	movs	r2, #9
 8001f82:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001f84:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f86:	2235      	movs	r2, #53	; 0x35
 8001f88:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001f8a:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f8c:	220b      	movs	r2, #11
 8001f8e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001f90:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f92:	f240 2215 	movw	r2, #533	; 0x215
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001f98:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001f9a:	f240 121b 	movw	r2, #283	; 0x11b
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001fa2:	f240 2235 	movw	r2, #565	; 0x235
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001fa8:	4b26      	ldr	r3, [pc, #152]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001faa:	f240 121d 	movw	r2, #285	; 0x11d
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001fc8:	481e      	ldr	r0, [pc, #120]	; (8002044 <MX_LTDC_Init+0xfc>)
 8001fca:	f007 f855 	bl	8009078 <HAL_LTDC_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001fd4:	f001 fe72 	bl	8003cbc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001fdc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001fe0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001fe6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001fea:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001fec:	2302      	movs	r3, #2
 8001fee:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001ff0:	23ff      	movs	r3, #255	; 0xff
 8001ff2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001ff8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ffc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001ffe:	2307      	movs	r3, #7
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002002:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8002008:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800200c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800200e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2200      	movs	r2, #0
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_LTDC_Init+0xfc>)
 800202e:	f007 f9b5 	bl	800939c <HAL_LTDC_ConfigLayer>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002038:	f001 fe40 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	3738      	adds	r7, #56	; 0x38
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20008414 	.word	0x20008414
 8002048:	40016800 	.word	0x40016800

0800204c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b092      	sub	sp, #72	; 0x48
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002052:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	611a      	str	r2, [r3, #16]
 8002062:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8002068:	463b      	mov	r3, r7
 800206a:	222c      	movs	r2, #44	; 0x2c
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f00d fbac 	bl	800f7cc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002074:	4b46      	ldr	r3, [pc, #280]	; (8002190 <MX_RTC_Init+0x144>)
 8002076:	4a47      	ldr	r2, [pc, #284]	; (8002194 <MX_RTC_Init+0x148>)
 8002078:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800207a:	4b45      	ldr	r3, [pc, #276]	; (8002190 <MX_RTC_Init+0x144>)
 800207c:	2200      	movs	r2, #0
 800207e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002080:	4b43      	ldr	r3, [pc, #268]	; (8002190 <MX_RTC_Init+0x144>)
 8002082:	227f      	movs	r2, #127	; 0x7f
 8002084:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002086:	4b42      	ldr	r3, [pc, #264]	; (8002190 <MX_RTC_Init+0x144>)
 8002088:	22ff      	movs	r2, #255	; 0xff
 800208a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800208c:	4b40      	ldr	r3, [pc, #256]	; (8002190 <MX_RTC_Init+0x144>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002092:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <MX_RTC_Init+0x144>)
 8002094:	2200      	movs	r2, #0
 8002096:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002098:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <MX_RTC_Init+0x144>)
 800209a:	2200      	movs	r2, #0
 800209c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800209e:	483c      	ldr	r0, [pc, #240]	; (8002190 <MX_RTC_Init+0x144>)
 80020a0:	f008 fc5e 	bl	800a960 <HAL_RTC_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80020aa:	f001 fe07 	bl	8003cbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80020c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020cc:	2201      	movs	r2, #1
 80020ce:	4619      	mov	r1, r3
 80020d0:	482f      	ldr	r0, [pc, #188]	; (8002190 <MX_RTC_Init+0x144>)
 80020d2:	f008 fcd7 	bl	800aa84 <HAL_RTC_SetTime>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80020dc:	f001 fdee 	bl	8003cbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80020e0:	2301      	movs	r3, #1
 80020e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80020f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020fc:	2201      	movs	r2, #1
 80020fe:	4619      	mov	r1, r3
 8002100:	4823      	ldr	r0, [pc, #140]	; (8002190 <MX_RTC_Init+0x144>)
 8002102:	f008 fd7d 	bl	800ac00 <HAL_RTC_SetDate>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800210c:	f001 fdd6 	bl	8003cbc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002110:	2300      	movs	r3, #0
 8002112:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002114:	2300      	movs	r3, #0
 8002116:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002118:	2300      	movs	r3, #0
 800211a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800211c:	2300      	movs	r3, #0
 800211e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002134:	2301      	movs	r3, #1
 8002136:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800213a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002140:	463b      	mov	r3, r7
 8002142:	2201      	movs	r2, #1
 8002144:	4619      	mov	r1, r3
 8002146:	4812      	ldr	r0, [pc, #72]	; (8002190 <MX_RTC_Init+0x144>)
 8002148:	f008 fe02 	bl	800ad50 <HAL_RTC_SetAlarm>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8002152:	f001 fdb3 	bl	8003cbc <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800215c:	463b      	mov	r3, r7
 800215e:	2201      	movs	r2, #1
 8002160:	4619      	mov	r1, r3
 8002162:	480b      	ldr	r0, [pc, #44]	; (8002190 <MX_RTC_Init+0x144>)
 8002164:	f008 fdf4 	bl	800ad50 <HAL_RTC_SetAlarm>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800216e:	f001 fda5 	bl	8003cbc <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002172:	2202      	movs	r2, #2
 8002174:	2100      	movs	r1, #0
 8002176:	4806      	ldr	r0, [pc, #24]	; (8002190 <MX_RTC_Init+0x144>)
 8002178:	f008 ff74 	bl	800b064 <HAL_RTCEx_SetTimeStamp>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8002182:	f001 fd9b 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	3748      	adds	r7, #72	; 0x48
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200085f4 	.word	0x200085f4
 8002194:	40002800 	.word	0x40002800

08002198 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <MX_SPI2_Init+0x74>)
 800219e:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <MX_SPI2_Init+0x78>)
 80021a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021a2:	4b1a      	ldr	r3, [pc, #104]	; (800220c <MX_SPI2_Init+0x74>)
 80021a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021aa:	4b18      	ldr	r3, [pc, #96]	; (800220c <MX_SPI2_Init+0x74>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <MX_SPI2_Init+0x74>)
 80021b2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80021b6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <MX_SPI2_Init+0x74>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <MX_SPI2_Init+0x74>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <MX_SPI2_Init+0x74>)
 80021c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80021ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <MX_SPI2_Init+0x74>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MX_SPI2_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <MX_SPI2_Init+0x74>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <MX_SPI2_Init+0x74>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <MX_SPI2_Init+0x74>)
 80021e6:	2207      	movs	r2, #7
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <MX_SPI2_Init+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <MX_SPI2_Init+0x74>)
 80021f2:	2208      	movs	r2, #8
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_SPI2_Init+0x74>)
 80021f8:	f009 f81b 	bl	800b232 <HAL_SPI_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002202:	f001 fd5b 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20007f70 	.word	0x20007f70
 8002210:	40003800 	.word	0x40003800

08002214 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221a:	f107 0310 	add.w	r3, r7, #16
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <MX_TIM1_Init+0xa0>)
 8002234:	4a20      	ldr	r2, [pc, #128]	; (80022b8 <MX_TIM1_Init+0xa4>)
 8002236:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002238:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <MX_TIM1_Init+0xa0>)
 800223a:	2200      	movs	r2, #0
 800223c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <MX_TIM1_Init+0xa0>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <MX_TIM1_Init+0xa0>)
 8002246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224c:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <MX_TIM1_Init+0xa0>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <MX_TIM1_Init+0xa0>)
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002258:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <MX_TIM1_Init+0xa0>)
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800225e:	4815      	ldr	r0, [pc, #84]	; (80022b4 <MX_TIM1_Init+0xa0>)
 8002260:	f009 f892 	bl	800b388 <HAL_TIM_Base_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800226a:	f001 fd27 	bl	8003cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002272:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	4619      	mov	r1, r3
 800227a:	480e      	ldr	r0, [pc, #56]	; (80022b4 <MX_TIM1_Init+0xa0>)
 800227c:	f009 fa74 	bl	800b768 <HAL_TIM_ConfigClockSource>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002286:	f001 fd19 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	4619      	mov	r1, r3
 800229a:	4806      	ldr	r0, [pc, #24]	; (80022b4 <MX_TIM1_Init+0xa0>)
 800229c:	f009 fc90 	bl	800bbc0 <HAL_TIMEx_MasterConfigSynchronization>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022a6:	f001 fd09 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20008c14 	.word	0x20008c14
 80022b8:	40010000 	.word	0x40010000

080022bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c2:	f107 0310 	add.w	r3, r7, #16
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022da:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <MX_TIM2_Init+0x98>)
 80022dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022e2:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <MX_TIM2_Init+0x98>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <MX_TIM2_Init+0x98>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <MX_TIM2_Init+0x98>)
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <MX_TIM2_Init+0x98>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <MX_TIM2_Init+0x98>)
 80022fe:	2200      	movs	r2, #0
 8002300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002302:	4814      	ldr	r0, [pc, #80]	; (8002354 <MX_TIM2_Init+0x98>)
 8002304:	f009 f840 	bl	800b388 <HAL_TIM_Base_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800230e:	f001 fcd5 	bl	8003cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002316:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	4619      	mov	r1, r3
 800231e:	480d      	ldr	r0, [pc, #52]	; (8002354 <MX_TIM2_Init+0x98>)
 8002320:	f009 fa22 	bl	800b768 <HAL_TIM_ConfigClockSource>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800232a:	f001 fcc7 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4806      	ldr	r0, [pc, #24]	; (8002354 <MX_TIM2_Init+0x98>)
 800233c:	f009 fc40 	bl	800bbc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002346:	f001 fcb9 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20008d24 	.word	0x20008d24

08002358 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235e:	f107 0310 	add.w	r3, r7, #16
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
 8002374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002376:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <MX_TIM3_Init+0x94>)
 8002378:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <MX_TIM3_Init+0x98>)
 800237a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <MX_TIM3_Init+0x94>)
 800237e:	2200      	movs	r2, #0
 8002380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <MX_TIM3_Init+0x94>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002388:	4b18      	ldr	r3, [pc, #96]	; (80023ec <MX_TIM3_Init+0x94>)
 800238a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800238e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002390:	4b16      	ldr	r3, [pc, #88]	; (80023ec <MX_TIM3_Init+0x94>)
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <MX_TIM3_Init+0x94>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800239c:	4813      	ldr	r0, [pc, #76]	; (80023ec <MX_TIM3_Init+0x94>)
 800239e:	f008 fff3 	bl	800b388 <HAL_TIM_Base_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80023a8:	f001 fc88 	bl	8003cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	4619      	mov	r1, r3
 80023b8:	480c      	ldr	r0, [pc, #48]	; (80023ec <MX_TIM3_Init+0x94>)
 80023ba:	f009 f9d5 	bl	800b768 <HAL_TIM_ConfigClockSource>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80023c4:	f001 fc7a 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c8:	2300      	movs	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	4619      	mov	r1, r3
 80023d4:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_TIM3_Init+0x94>)
 80023d6:	f009 fbf3 	bl	800bbc0 <HAL_TIMEx_MasterConfigSynchronization>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80023e0:	f001 fc6c 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023e4:	bf00      	nop
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200083c8 	.word	0x200083c8
 80023f0:	40000400 	.word	0x40000400

080023f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]
 8002406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <MX_TIM5_Init+0x94>)
 8002414:	4a1d      	ldr	r2, [pc, #116]	; (800248c <MX_TIM5_Init+0x98>)
 8002416:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <MX_TIM5_Init+0x94>)
 800241a:	2200      	movs	r2, #0
 800241c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800241e:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <MX_TIM5_Init+0x94>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002424:	4b18      	ldr	r3, [pc, #96]	; (8002488 <MX_TIM5_Init+0x94>)
 8002426:	f04f 32ff 	mov.w	r2, #4294967295
 800242a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242c:	4b16      	ldr	r3, [pc, #88]	; (8002488 <MX_TIM5_Init+0x94>)
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <MX_TIM5_Init+0x94>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002438:	4813      	ldr	r0, [pc, #76]	; (8002488 <MX_TIM5_Init+0x94>)
 800243a:	f008 ffa5 	bl	800b388 <HAL_TIM_Base_Init>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002444:	f001 fc3a 	bl	8003cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	4619      	mov	r1, r3
 8002454:	480c      	ldr	r0, [pc, #48]	; (8002488 <MX_TIM5_Init+0x94>)
 8002456:	f009 f987 	bl	800b768 <HAL_TIM_ConfigClockSource>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002460:	f001 fc2c 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002464:	2300      	movs	r3, #0
 8002466:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	4619      	mov	r1, r3
 8002470:	4805      	ldr	r0, [pc, #20]	; (8002488 <MX_TIM5_Init+0x94>)
 8002472:	f009 fba5 	bl	800bbc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800247c:	f001 fc1e 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002480:	bf00      	nop
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20008378 	.word	0x20008378
 800248c:	40000c00 	.word	0x40000c00

08002490 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002496:	f107 0310 	add.w	r3, r7, #16
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a4:	1d3b      	adds	r3, r7, #4
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80024ae:	4b20      	ldr	r3, [pc, #128]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024b0:	4a20      	ldr	r2, [pc, #128]	; (8002534 <MX_TIM8_Init+0xa4>)
 80024b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c8:	4b19      	ldr	r3, [pc, #100]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80024da:	4815      	ldr	r0, [pc, #84]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024dc:	f008 ff54 	bl	800b388 <HAL_TIM_Base_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80024e6:	f001 fbe9 	bl	8003cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80024f0:	f107 0310 	add.w	r3, r7, #16
 80024f4:	4619      	mov	r1, r3
 80024f6:	480e      	ldr	r0, [pc, #56]	; (8002530 <MX_TIM8_Init+0xa0>)
 80024f8:	f009 f936 	bl	800b768 <HAL_TIM_ConfigClockSource>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002502:	f001 fbdb 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	4619      	mov	r1, r3
 8002516:	4806      	ldr	r0, [pc, #24]	; (8002530 <MX_TIM8_Init+0xa0>)
 8002518:	f009 fb52 	bl	800bbc0 <HAL_TIMEx_MasterConfigSynchronization>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002522:	f001 fbcb 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2000805c 	.word	0x2000805c
 8002534:	40010400 	.word	0x40010400

08002538 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800253c:	4b14      	ldr	r3, [pc, #80]	; (8002590 <MX_UART7_Init+0x58>)
 800253e:	4a15      	ldr	r2, [pc, #84]	; (8002594 <MX_UART7_Init+0x5c>)
 8002540:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <MX_UART7_Init+0x58>)
 8002544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002548:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <MX_UART7_Init+0x58>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <MX_UART7_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002556:	4b0e      	ldr	r3, [pc, #56]	; (8002590 <MX_UART7_Init+0x58>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <MX_UART7_Init+0x58>)
 800255e:	220c      	movs	r2, #12
 8002560:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <MX_UART7_Init+0x58>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <MX_UART7_Init+0x58>)
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <MX_UART7_Init+0x58>)
 8002570:	2200      	movs	r2, #0
 8002572:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <MX_UART7_Init+0x58>)
 8002576:	2200      	movs	r2, #0
 8002578:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800257a:	4805      	ldr	r0, [pc, #20]	; (8002590 <MX_UART7_Init+0x58>)
 800257c:	f009 fbcc 	bl	800bd18 <HAL_UART_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8002586:	f001 fb99 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20007fd4 	.word	0x20007fd4
 8002594:	40007800 	.word	0x40007800

08002598 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 800259e:	4a15      	ldr	r2, [pc, #84]	; (80025f4 <MX_USART1_UART_Init+0x5c>)
 80025a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025b6:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025be:	220c      	movs	r2, #12
 80025c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025da:	4805      	ldr	r0, [pc, #20]	; (80025f0 <MX_USART1_UART_Init+0x58>)
 80025dc:	f009 fb9c 	bl	800bd18 <HAL_UART_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025e6:	f001 fb69 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20008554 	.word	0x20008554
 80025f4:	40011000 	.word	0x40011000

080025f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80025fc:	4b14      	ldr	r3, [pc, #80]	; (8002650 <MX_USART6_UART_Init+0x58>)
 80025fe:	4a15      	ldr	r2, [pc, #84]	; (8002654 <MX_USART6_UART_Init+0x5c>)
 8002600:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <MX_USART6_UART_Init+0x58>)
 8002604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002608:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <MX_USART6_UART_Init+0x58>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <MX_USART6_UART_Init+0x58>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <MX_USART6_UART_Init+0x58>)
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800261c:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <MX_USART6_UART_Init+0x58>)
 800261e:	220c      	movs	r2, #12
 8002620:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002622:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <MX_USART6_UART_Init+0x58>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <MX_USART6_UART_Init+0x58>)
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <MX_USART6_UART_Init+0x58>)
 8002630:	2200      	movs	r2, #0
 8002632:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <MX_USART6_UART_Init+0x58>)
 8002636:	2200      	movs	r2, #0
 8002638:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <MX_USART6_UART_Init+0x58>)
 800263c:	f009 fb6c 	bl	800bd18 <HAL_UART_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002646:	f001 fb39 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20008c60 	.word	0x20008c60
 8002654:	40011400 	.word	0x40011400

08002658 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
 800266c:	615a      	str	r2, [r3, #20]
 800266e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002670:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <MX_FMC_Init+0x98>)
 8002672:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <MX_FMC_Init+0x9c>)
 8002674:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <MX_FMC_Init+0x98>)
 8002678:	2200      	movs	r2, #0
 800267a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800267c:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <MX_FMC_Init+0x98>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002682:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <MX_FMC_Init+0x98>)
 8002684:	2204      	movs	r2, #4
 8002686:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <MX_FMC_Init+0x98>)
 800268a:	2210      	movs	r2, #16
 800268c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800268e:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <MX_FMC_Init+0x98>)
 8002690:	2240      	movs	r2, #64	; 0x40
 8002692:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002694:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <MX_FMC_Init+0x98>)
 8002696:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800269a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <MX_FMC_Init+0x98>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <MX_FMC_Init+0x98>)
 80026a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <MX_FMC_Init+0x98>)
 80026ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026b0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80026b2:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <MX_FMC_Init+0x98>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80026b8:	2302      	movs	r3, #2
 80026ba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80026bc:	2307      	movs	r3, #7
 80026be:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80026c0:	2304      	movs	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80026c4:	2307      	movs	r3, #7
 80026c6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80026c8:	2303      	movs	r3, #3
 80026ca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80026cc:	2302      	movs	r3, #2
 80026ce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80026d0:	2302      	movs	r3, #2
 80026d2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_FMC_Init+0x98>)
 80026da:	f008 fd19 	bl	800b110 <HAL_SDRAM_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80026e4:	f001 faea 	bl	8003cbc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80026e8:	bf00      	nop
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20008d70 	.word	0x20008d70
 80026f4:	a0000140 	.word	0xa0000140

080026f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b090      	sub	sp, #64	; 0x40
 80026fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800270e:	4baf      	ldr	r3, [pc, #700]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4aae      	ldr	r2, [pc, #696]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002714:	f043 0310 	orr.w	r3, r3, #16
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4bac      	ldr	r3, [pc, #688]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002726:	4ba9      	ldr	r3, [pc, #676]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4aa8      	ldr	r2, [pc, #672]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800272c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4ba6      	ldr	r3, [pc, #664]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	4ba3      	ldr	r3, [pc, #652]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4aa2      	ldr	r2, [pc, #648]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002744:	f043 0302 	orr.w	r3, r3, #2
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4ba0      	ldr	r3, [pc, #640]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002756:	4b9d      	ldr	r3, [pc, #628]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a9c      	ldr	r2, [pc, #624]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b9a      	ldr	r3, [pc, #616]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800276e:	4b97      	ldr	r3, [pc, #604]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a96      	ldr	r2, [pc, #600]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b94      	ldr	r3, [pc, #592]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	4b91      	ldr	r3, [pc, #580]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a90      	ldr	r2, [pc, #576]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b8e      	ldr	r3, [pc, #568]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800279e:	4b8b      	ldr	r3, [pc, #556]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a8a      	ldr	r2, [pc, #552]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b88      	ldr	r3, [pc, #544]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80027b6:	4b85      	ldr	r3, [pc, #532]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a84      	ldr	r2, [pc, #528]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b82      	ldr	r3, [pc, #520]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80027ce:	4b7f      	ldr	r3, [pc, #508]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a7e      	ldr	r2, [pc, #504]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b7c      	ldr	r3, [pc, #496]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027e6:	4b79      	ldr	r3, [pc, #484]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a78      	ldr	r2, [pc, #480]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027ec:	f043 0320 	orr.w	r3, r3, #32
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b76      	ldr	r3, [pc, #472]	; (80029cc <MX_GPIO_Init+0x2d4>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027fe:	4b73      	ldr	r3, [pc, #460]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a72      	ldr	r2, [pc, #456]	; (80029cc <MX_GPIO_Init+0x2d4>)
 8002804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b70      	ldr	r3, [pc, #448]	; (80029cc <MX_GPIO_Init+0x2d4>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002816:	2200      	movs	r2, #0
 8002818:	2160      	movs	r1, #96	; 0x60
 800281a:	486d      	ldr	r0, [pc, #436]	; (80029d0 <MX_GPIO_Init+0x2d8>)
 800281c:	f005 fda6 	bl	800836c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002820:	2201      	movs	r2, #1
 8002822:	2120      	movs	r1, #32
 8002824:	486b      	ldr	r0, [pc, #428]	; (80029d4 <MX_GPIO_Init+0x2dc>)
 8002826:	f005 fda1 	bl	800836c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800282a:	2200      	movs	r2, #0
 800282c:	2108      	movs	r1, #8
 800282e:	4869      	ldr	r0, [pc, #420]	; (80029d4 <MX_GPIO_Init+0x2dc>)
 8002830:	f005 fd9c 	bl	800836c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002834:	2201      	movs	r2, #1
 8002836:	2108      	movs	r1, #8
 8002838:	4867      	ldr	r0, [pc, #412]	; (80029d8 <MX_GPIO_Init+0x2e0>)
 800283a:	f005 fd97 	bl	800836c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800283e:	2201      	movs	r2, #1
 8002840:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002844:	4865      	ldr	r0, [pc, #404]	; (80029dc <MX_GPIO_Init+0x2e4>)
 8002846:	f005 fd91 	bl	800836c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800284a:	2200      	movs	r2, #0
 800284c:	f645 6140 	movw	r1, #24128	; 0x5e40
 8002850:	4863      	ldr	r0, [pc, #396]	; (80029e0 <MX_GPIO_Init+0x2e8>)
 8002852:	f005 fd8b 	bl	800836c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002856:	2200      	movs	r2, #0
 8002858:	21c8      	movs	r1, #200	; 0xc8
 800285a:	4862      	ldr	r0, [pc, #392]	; (80029e4 <MX_GPIO_Init+0x2ec>)
 800285c:	f005 fd86 	bl	800836c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002860:	2308      	movs	r3, #8
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002864:	2300      	movs	r3, #0
 8002866:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800286c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002870:	4619      	mov	r1, r3
 8002872:	4857      	ldr	r0, [pc, #348]	; (80029d0 <MX_GPIO_Init+0x2d8>)
 8002874:	f005 fac2 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002878:	2304      	movs	r3, #4
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002888:	2309      	movs	r3, #9
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800288c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002890:	4619      	mov	r1, r3
 8002892:	484f      	ldr	r0, [pc, #316]	; (80029d0 <MX_GPIO_Init+0x2d8>)
 8002894:	f005 fab2 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002898:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028aa:	230b      	movs	r3, #11
 80028ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b2:	4619      	mov	r1, r3
 80028b4:	484b      	ldr	r0, [pc, #300]	; (80029e4 <MX_GPIO_Init+0x2ec>)
 80028b6:	f005 faa1 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80028ba:	f643 0323 	movw	r3, #14371	; 0x3823
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c8:	2303      	movs	r3, #3
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80028cc:	230a      	movs	r3, #10
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d4:	4619      	mov	r1, r3
 80028d6:	4844      	ldr	r0, [pc, #272]	; (80029e8 <MX_GPIO_Init+0x2f0>)
 80028d8:	f005 fa90 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e8:	2300      	movs	r3, #0
 80028ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80028ec:	2308      	movs	r3, #8
 80028ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80028f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f4:	4619      	mov	r1, r3
 80028f6:	4837      	ldr	r0, [pc, #220]	; (80029d4 <MX_GPIO_Init+0x2dc>)
 80028f8:	f005 fa80 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80028fc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290a:	2303      	movs	r3, #3
 800290c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800290e:	230c      	movs	r3, #12
 8002910:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002916:	4619      	mov	r1, r3
 8002918:	4834      	ldr	r0, [pc, #208]	; (80029ec <MX_GPIO_Init+0x2f4>)
 800291a:	f005 fa6f 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_6;
 800291e:	f248 1340 	movw	r3, #33088	; 0x8140
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002930:	4619      	mov	r1, r3
 8002932:	482f      	ldr	r0, [pc, #188]	; (80029f0 <MX_GPIO_Init+0x2f8>)
 8002934:	f005 fa62 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002938:	2360      	movs	r3, #96	; 0x60
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294c:	4619      	mov	r1, r3
 800294e:	4820      	ldr	r0, [pc, #128]	; (80029d0 <MX_GPIO_Init+0x2d8>)
 8002950:	f005 fa54 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002954:	2340      	movs	r3, #64	; 0x40
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002960:	2303      	movs	r3, #3
 8002962:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002964:	230a      	movs	r3, #10
 8002966:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800296c:	4619      	mov	r1, r3
 800296e:	481e      	ldr	r0, [pc, #120]	; (80029e8 <MX_GPIO_Init+0x2f0>)
 8002970:	f005 fa44 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002978:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800297a:	2300      	movs	r3, #0
 800297c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002986:	4619      	mov	r1, r3
 8002988:	481a      	ldr	r0, [pc, #104]	; (80029f4 <MX_GPIO_Init+0x2fc>)
 800298a:	f005 fa37 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800298e:	2340      	movs	r3, #64	; 0x40
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002992:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800299c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a0:	4619      	mov	r1, r3
 80029a2:	480c      	ldr	r0, [pc, #48]	; (80029d4 <MX_GPIO_Init+0x2dc>)
 80029a4:	f005 fa2a 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 80029a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b6:	2303      	movs	r3, #3
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029ba:	230a      	movs	r3, #10
 80029bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029c2:	4619      	mov	r1, r3
 80029c4:	480a      	ldr	r0, [pc, #40]	; (80029f0 <MX_GPIO_Init+0x2f8>)
 80029c6:	f005 fa19 	bl	8007dfc <HAL_GPIO_Init>
 80029ca:	e015      	b.n	80029f8 <MX_GPIO_Init+0x300>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40020c00 	.word	0x40020c00
 80029d8:	40022800 	.word	0x40022800
 80029dc:	40022000 	.word	0x40022000
 80029e0:	40021c00 	.word	0x40021c00
 80029e4:	40021800 	.word	0x40021800
 80029e8:	40020400 	.word	0x40020400
 80029ec:	40020800 	.word	0x40020800
 80029f0:	40020000 	.word	0x40020000
 80029f4:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80029f8:	23f0      	movs	r3, #240	; 0xf0
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a04:	2300      	movs	r3, #0
 8002a06:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002a08:	230a      	movs	r3, #10
 8002a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002a0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a10:	4619      	mov	r1, r3
 8002a12:	4895      	ldr	r0, [pc, #596]	; (8002c68 <MX_GPIO_Init+0x570>)
 8002a14:	f005 f9f2 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a26:	2300      	movs	r3, #0
 8002a28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002a2a:	230a      	movs	r3, #10
 8002a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a32:	4619      	mov	r1, r3
 8002a34:	488d      	ldr	r0, [pc, #564]	; (8002c6c <MX_GPIO_Init+0x574>)
 8002a36:	f005 f9e1 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8002a3a:	2328      	movs	r3, #40	; 0x28
 8002a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a46:	2300      	movs	r3, #0
 8002a48:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4887      	ldr	r0, [pc, #540]	; (8002c70 <MX_GPIO_Init+0x578>)
 8002a52:	f005 f9d3 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002a56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4882      	ldr	r0, [pc, #520]	; (8002c74 <MX_GPIO_Init+0x57c>)
 8002a6c:	f005 f9c6 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002a70:	2308      	movs	r3, #8
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a74:	2301      	movs	r3, #1
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a84:	4619      	mov	r1, r3
 8002a86:	487c      	ldr	r0, [pc, #496]	; (8002c78 <MX_GPIO_Init+0x580>)
 8002a88:	f005 f9b8 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002a8c:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a92:	2300      	movs	r3, #0
 8002a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4872      	ldr	r0, [pc, #456]	; (8002c6c <MX_GPIO_Init+0x574>)
 8002aa2:	f005 f9ab 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002aa6:	2310      	movs	r3, #16
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	486d      	ldr	r0, [pc, #436]	; (8002c70 <MX_GPIO_Init+0x578>)
 8002aba:	f005 f99f 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002abe:	2304      	movs	r3, #4
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aca:	2303      	movs	r3, #3
 8002acc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002ace:	230c      	movs	r3, #12
 8002ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4865      	ldr	r0, [pc, #404]	; (8002c70 <MX_GPIO_Init+0x578>)
 8002ada:	f005 f98f 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002ade:	f24a 0304 	movw	r3, #40964	; 0xa004
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af0:	4619      	mov	r1, r3
 8002af2:	4862      	ldr	r0, [pc, #392]	; (8002c7c <MX_GPIO_Init+0x584>)
 8002af4:	f005 f982 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4855      	ldr	r0, [pc, #340]	; (8002c68 <MX_GPIO_Init+0x570>)
 8002b12:	f005 f973 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002b16:	f645 6340 	movw	r3, #24128	; 0x5e40
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4853      	ldr	r0, [pc, #332]	; (8002c7c <MX_GPIO_Init+0x584>)
 8002b30:	f005 f964 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4847      	ldr	r0, [pc, #284]	; (8002c68 <MX_GPIO_Init+0x570>)
 8002b4c:	f005 f956 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002b50:	2310      	movs	r3, #16
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b60:	230a      	movs	r3, #10
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4844      	ldr	r0, [pc, #272]	; (8002c7c <MX_GPIO_Init+0x584>)
 8002b6c:	f005 f946 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002b70:	23c8      	movs	r3, #200	; 0xc8
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b74:	2301      	movs	r3, #1
 8002b76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b84:	4619      	mov	r1, r3
 8002b86:	4839      	ldr	r0, [pc, #228]	; (8002c6c <MX_GPIO_Init+0x574>)
 8002b88:	f005 f938 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002b8c:	2305      	movs	r3, #5
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b9c:	230a      	movs	r3, #10
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4833      	ldr	r0, [pc, #204]	; (8002c74 <MX_GPIO_Init+0x57c>)
 8002ba8:	f005 f928 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002bac:	2332      	movs	r3, #50	; 0x32
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bbc:	230b      	movs	r3, #11
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	482b      	ldr	r0, [pc, #172]	; (8002c74 <MX_GPIO_Init+0x57c>)
 8002bc8:	f005 f918 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bcc:	2304      	movs	r3, #4
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002bdc:	2309      	movs	r3, #9
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002be4:	4619      	mov	r1, r3
 8002be6:	4826      	ldr	r0, [pc, #152]	; (8002c80 <MX_GPIO_Init+0x588>)
 8002be8:	f005 f908 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002bec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002bfe:	2309      	movs	r3, #9
 8002c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c06:	4619      	mov	r1, r3
 8002c08:	4819      	ldr	r0, [pc, #100]	; (8002c70 <MX_GPIO_Init+0x578>)
 8002c0a:	f005 f8f7 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002c0e:	2386      	movs	r3, #134	; 0x86
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c1e:	230b      	movs	r3, #11
 8002c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c26:	4619      	mov	r1, r3
 8002c28:	4816      	ldr	r0, [pc, #88]	; (8002c84 <MX_GPIO_Init+0x58c>)
 8002c2a:	f005 f8e7 	bl	8007dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002c2e:	2328      	movs	r3, #40	; 0x28
 8002c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c32:	2302      	movs	r3, #2
 8002c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002c3e:	230a      	movs	r3, #10
 8002c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c46:	4619      	mov	r1, r3
 8002c48:	480e      	ldr	r0, [pc, #56]	; (8002c84 <MX_GPIO_Init+0x58c>)
 8002c4a:	f005 f8d7 	bl	8007dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2105      	movs	r1, #5
 8002c52:	2028      	movs	r0, #40	; 0x28
 8002c54:	f004 f9dc 	bl	8007010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c58:	2028      	movs	r0, #40	; 0x28
 8002c5a:	f004 f9f5 	bl	8007048 <HAL_NVIC_EnableIRQ>

}
 8002c5e:	bf00      	nop
 8002c60:	3740      	adds	r7, #64	; 0x40
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40022000 	.word	0x40022000
 8002c6c:	40021800 	.word	0x40021800
 8002c70:	40020c00 	.word	0x40020c00
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40022800 	.word	0x40022800
 8002c7c:	40021c00 	.word	0x40021c00
 8002c80:	40020400 	.word	0x40020400
 8002c84:	40020000 	.word	0x40020000

08002c88 <HAL_GPIO_EXTI_Callback>:
		HAL_UART_Receive_IT(&huart1,rxbuffer,1); // Rappel (callback) de l'interruption
		*/
	}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{	/**
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80fb      	strh	r3, [r7, #6]
 		flag = 1;
	}
	//xQueueSendFromISR(myQueueTempoHandle, &MessageTempo, 0);
	 *
	 */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <fonction_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fonction_init */
void fonction_init(void const * argument)
{
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b08e      	sub	sp, #56	; 0x38
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 20;
 8002ca8:	2314      	movs	r3, #20
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
    uint8_t i, j, cpt_lignesw = 0, cpt_colonnesw = 1, cpt_lignesb, cpt_colonnesb;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    if(victory == 1)
 8002cb8:	4ba5      	ldr	r3, [pc, #660]	; (8002f50 <fonction_init+0x2b0>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d11a      	bne.n	8002cf6 <fonction_init+0x56>
    {
    	osThreadTerminate(task_victoryHandle);
 8002cc0:	4ba4      	ldr	r3, [pc, #656]	; (8002f54 <fonction_init+0x2b4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f00a f96a 	bl	800cf9e <osThreadTerminate>
    	osThreadDef(affichage, fonction_affichage, osPriorityNormal, 0, 1024);
 8002cca:	4ba3      	ldr	r3, [pc, #652]	; (8002f58 <fonction_init+0x2b8>)
 8002ccc:	f107 040c 	add.w	r4, r7, #12
 8002cd0:	461d      	mov	r5, r3
 8002cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002cda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	affichageHandle = osThreadCreate(osThread(affichage), NULL);
 8002cde:	f107 030c 	add.w	r3, r7, #12
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f00a f90e 	bl	800cf06 <osThreadCreate>
 8002cea:	4603      	mov	r3, r0
 8002cec:	4a9b      	ldr	r2, [pc, #620]	; (8002f5c <fonction_init+0x2bc>)
 8002cee:	6013      	str	r3, [r2, #0]
    	victory = 0;
 8002cf0:	4b97      	ldr	r3, [pc, #604]	; (8002f50 <fonction_init+0x2b0>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
    }
  /* Infinite loop */
  for(;;)
  {
	  cpt_lignesw = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  cpt_colonnesw = 1;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	  for (i = 0; i < 3; i++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002d08:	e115      	b.n	8002f36 <fonction_init+0x296>
	  {
		  for (j = 0; j < 4; j++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002d10:	e0f6      	b.n	8002f00 <fonction_init+0x260>
		  {
			  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 8002d12:	4b93      	ldr	r3, [pc, #588]	; (8002f60 <fonction_init+0x2c0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f04f 31ff 	mov.w	r1, #4294967295
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f00a fda8 	bl	800d870 <xQueueSemaphoreTake>
			  	 // init white pieces
			  chessboard[cpt_lignesw][cpt_colonnesw].ligne = cpt_lignesw;
 8002d20:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002d24:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d28:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002d2c:	b294      	uxth	r4, r2
 8002d2e:	488d      	ldr	r0, [pc, #564]	; (8002f64 <fonction_init+0x2c4>)
 8002d30:	461a      	mov	r2, r3
 8002d32:	0092      	lsls	r2, r2, #2
 8002d34:	441a      	add	r2, r3
 8002d36:	0053      	lsls	r3, r2, #1
 8002d38:	461a      	mov	r2, r3
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	4413      	add	r3, r2
 8002d44:	4403      	add	r3, r0
 8002d46:	4622      	mov	r2, r4
 8002d48:	801a      	strh	r2, [r3, #0]
			  chessboard[cpt_lignesw][cpt_colonnesw].colonne = cpt_colonnesw;
 8002d4a:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002d4e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d52:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002d56:	b294      	uxth	r4, r2
 8002d58:	4882      	ldr	r0, [pc, #520]	; (8002f64 <fonction_init+0x2c4>)
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	0092      	lsls	r2, r2, #2
 8002d5e:	441a      	add	r2, r3
 8002d60:	0053      	lsls	r3, r2, #1
 8002d62:	461a      	mov	r2, r3
 8002d64:	460b      	mov	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4403      	add	r3, r0
 8002d70:	3302      	adds	r3, #2
 8002d72:	4622      	mov	r2, r4
 8002d74:	801a      	strh	r2, [r3, #0]
			  chessboard[cpt_lignesw][cpt_colonnesw].isFilled = 1;
 8002d76:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002d7a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d7e:	4879      	ldr	r0, [pc, #484]	; (8002f64 <fonction_init+0x2c4>)
 8002d80:	461a      	mov	r2, r3
 8002d82:	0092      	lsls	r2, r2, #2
 8002d84:	441a      	add	r2, r3
 8002d86:	0053      	lsls	r3, r2, #1
 8002d88:	461a      	mov	r2, r3
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	4413      	add	r3, r2
 8002d94:	4403      	add	r3, r0
 8002d96:	3305      	adds	r3, #5
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
			  chessboard[cpt_lignesw][cpt_colonnesw].rayon = 9;
 8002d9c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002da0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002da4:	486f      	ldr	r0, [pc, #444]	; (8002f64 <fonction_init+0x2c4>)
 8002da6:	461a      	mov	r2, r3
 8002da8:	0092      	lsls	r2, r2, #2
 8002daa:	441a      	add	r2, r3
 8002dac:	0053      	lsls	r3, r2, #1
 8002dae:	461a      	mov	r2, r3
 8002db0:	460b      	mov	r3, r1
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	4413      	add	r3, r2
 8002dba:	4403      	add	r3, r0
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	2209      	movs	r2, #9
 8002dc0:	701a      	strb	r2, [r3, #0]
			  chessboard[cpt_lignesw][cpt_colonnesw].piece_color = 0;
 8002dc2:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002dc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002dca:	4866      	ldr	r0, [pc, #408]	; (8002f64 <fonction_init+0x2c4>)
 8002dcc:	461a      	mov	r2, r3
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	441a      	add	r2, r3
 8002dd2:	0053      	lsls	r3, r2, #1
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	4413      	add	r3, r2
 8002de0:	4403      	add	r3, r0
 8002de2:	3307      	adds	r3, #7
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
			  // init blue pieces
			  cpt_lignesb = cpt_lignesw + 5;
 8002de8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002dec:	3305      	adds	r3, #5
 8002dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			  cpt_colonnesb = (cpt_colonnesw % 2 == 0) ? cpt_colonnesw + 1 : cpt_colonnesw - 1;
 8002df2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d104      	bne.n	8002e0a <fonction_init+0x16a>
 8002e00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e04:	3301      	adds	r3, #1
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	e003      	b.n	8002e12 <fonction_init+0x172>
 8002e0a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			  chessboard[cpt_lignesb][cpt_colonnesb].ligne = cpt_lignesb;
 8002e16:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002e1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e1e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002e22:	b294      	uxth	r4, r2
 8002e24:	484f      	ldr	r0, [pc, #316]	; (8002f64 <fonction_init+0x2c4>)
 8002e26:	461a      	mov	r2, r3
 8002e28:	0092      	lsls	r2, r2, #2
 8002e2a:	441a      	add	r2, r3
 8002e2c:	0053      	lsls	r3, r2, #1
 8002e2e:	461a      	mov	r2, r3
 8002e30:	460b      	mov	r3, r1
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	4413      	add	r3, r2
 8002e3a:	4403      	add	r3, r0
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	801a      	strh	r2, [r3, #0]
			  chessboard[cpt_lignesb][cpt_colonnesb].colonne = cpt_colonnesb;
 8002e40:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002e44:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e48:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002e4c:	b294      	uxth	r4, r2
 8002e4e:	4845      	ldr	r0, [pc, #276]	; (8002f64 <fonction_init+0x2c4>)
 8002e50:	461a      	mov	r2, r3
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	0053      	lsls	r3, r2, #1
 8002e58:	461a      	mov	r2, r3
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	4413      	add	r3, r2
 8002e64:	4403      	add	r3, r0
 8002e66:	3302      	adds	r3, #2
 8002e68:	4622      	mov	r2, r4
 8002e6a:	801a      	strh	r2, [r3, #0]
			  chessboard[cpt_lignesb][cpt_colonnesb].isFilled = 1;
 8002e6c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002e70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e74:	483b      	ldr	r0, [pc, #236]	; (8002f64 <fonction_init+0x2c4>)
 8002e76:	461a      	mov	r2, r3
 8002e78:	0092      	lsls	r2, r2, #2
 8002e7a:	441a      	add	r2, r3
 8002e7c:	0053      	lsls	r3, r2, #1
 8002e7e:	461a      	mov	r2, r3
 8002e80:	460b      	mov	r3, r1
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	4413      	add	r3, r2
 8002e8a:	4403      	add	r3, r0
 8002e8c:	3305      	adds	r3, #5
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
			  chessboard[cpt_lignesb][cpt_colonnesb].rayon = 9;
 8002e92:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002e96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002e9a:	4832      	ldr	r0, [pc, #200]	; (8002f64 <fonction_init+0x2c4>)
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	0053      	lsls	r3, r2, #1
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	4413      	add	r3, r2
 8002eb0:	4403      	add	r3, r0
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	2209      	movs	r2, #9
 8002eb6:	701a      	strb	r2, [r3, #0]
			  chessboard[cpt_lignesb][cpt_colonnesb].piece_color = 1;
 8002eb8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002ebc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ec0:	4828      	ldr	r0, [pc, #160]	; (8002f64 <fonction_init+0x2c4>)
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	0092      	lsls	r2, r2, #2
 8002ec6:	441a      	add	r2, r3
 8002ec8:	0053      	lsls	r3, r2, #1
 8002eca:	461a      	mov	r2, r3
 8002ecc:	460b      	mov	r3, r1
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4403      	add	r3, r0
 8002ed8:	3307      	adds	r3, #7
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
			  xSemaphoreGive(mutexChessboard);
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <fonction_init+0x2c0>)
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	f00a fad6 	bl	800d498 <xQueueGenericSend>
			  cpt_colonnesw += 2;
 8002eec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		  for (j = 0; j < 4; j++)
 8002ef6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002efa:	3301      	adds	r3, #1
 8002efc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002f00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	f67f af04 	bls.w	8002d12 <fonction_init+0x72>
		  }
		  cpt_colonnesw = (cpt_colonnesw % 2 == 0) ? 1 : 0;
 8002f0a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		  cpt_lignesw++;
 8002f22:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f26:	3301      	adds	r3, #1
 8002f28:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	  for (i = 0; i < 3; i++)
 8002f2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f30:	3301      	adds	r3, #1
 8002f32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002f36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	f67f aee5 	bls.w	8002d0a <fonction_init+0x6a>
	  }

      vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002f40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f46:	4618      	mov	r0, r3
 8002f48:	f00b f912 	bl	800e170 <vTaskDelayUntil>
	  cpt_lignesw = 0;
 8002f4c:	e6d3      	b.n	8002cf6 <fonction_init+0x56>
 8002f4e:	bf00      	nop
 8002f50:	2000038b 	.word	0x2000038b
 8002f54:	200085f0 	.word	0x200085f0
 8002f58:	0800f9f8 	.word	0x0800f9f8
 8002f5c:	20008508 	.word	0x20008508
 8002f60:	20008da4 	.word	0x20008da4
 8002f64:	200080f8 	.word	0x200080f8

08002f68 <fonction_affichage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_affichage */
void fonction_affichage(void const * argument)
{
 8002f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6a:	b089      	sub	sp, #36	; 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_affichage */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;
 8002f70:	2332      	movs	r3, #50	; 0x32
 8002f72:	61bb      	str	r3, [r7, #24]
	const uint8_t pasX 			= 30;
 8002f74:	231e      	movs	r3, #30
 8002f76:	75fb      	strb	r3, [r7, #23]
	const uint8_t pasY 			= 30;
 8002f78:	231e      	movs	r3, #30
 8002f7a:	75bb      	strb	r3, [r7, #22]
	const uint8_t margeX		= 14;
 8002f7c:	230e      	movs	r3, #14
 8002f7e:	757b      	strb	r3, [r7, #21]
	const uint8_t margeY		= 14;
 8002f80:	230e      	movs	r3, #14
 8002f82:	753b      	strb	r3, [r7, #20]
	uint16_t pointeurX 			= margeX + pasX / 2;
 8002f84:	7d7b      	ldrb	r3, [r7, #21]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	827b      	strh	r3, [r7, #18]
	uint16_t pointeurY 			= margeY + pasY / 2;
 8002f94:	7d3b      	ldrb	r3, [r7, #20]
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	7dbb      	ldrb	r3, [r7, #22]
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	823b      	strh	r3, [r7, #16]
	uint8_t color				= 2;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	73fb      	strb	r3, [r7, #15]
	uint8_t i, j;
	uint8_t filled = 0, possible = 0, dame = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73bb      	strb	r3, [r7, #14]
 8002fac:	2300      	movs	r3, #0
 8002fae:	737b      	strb	r3, [r7, #13]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	733b      	strb	r3, [r7, #12]
	osThreadTerminate(task_initHandle);
 8002fb4:	4b92      	ldr	r3, [pc, #584]	; (8003200 <fonction_affichage+0x298>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f009 fff0 	bl	800cf9e <osThreadTerminate>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 8002fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fc2:	4890      	ldr	r0, [pc, #576]	; (8003204 <fonction_affichage+0x29c>)
 8002fc4:	f005 f9eb 	bl	800839e <HAL_GPIO_TogglePin>
	  // Clear que pour certains changements
	  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 8002fc8:	4b8f      	ldr	r3, [pc, #572]	; (8003208 <fonction_affichage+0x2a0>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f00a fc4d 	bl	800d870 <xQueueSemaphoreTake>
	  if(change == 1)
 8002fd6:	4b8d      	ldr	r3, [pc, #564]	; (800320c <fonction_affichage+0x2a4>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d102      	bne.n	8002fe4 <fonction_affichage+0x7c>
	  {
		  BSP_LCD_Clear(0);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f001 f980 	bl	80042e4 <BSP_LCD_Clear>
	  }
	  xSemaphoreGive(mutexChessboard);
 8002fe4:	4b88      	ldr	r3, [pc, #544]	; (8003208 <fonction_affichage+0x2a0>)
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	2200      	movs	r2, #0
 8002fec:	2100      	movs	r1, #0
 8002fee:	f00a fa53 	bl	800d498 <xQueueGenericSend>
	  BSP_LCD_FillCircle(margeX, margeY, 3);
 8002ff2:	7d7b      	ldrb	r3, [r7, #21]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	7d3a      	ldrb	r2, [r7, #20]
 8002ff8:	b291      	uxth	r1, r2
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f001 fd79 	bl	8004af4 <BSP_LCD_FillCircle>
	  BSP_LCD_FillCircle(margeX + pasX, margeY, 3);
 8003002:	7d7b      	ldrb	r3, [r7, #21]
 8003004:	b29a      	uxth	r2, r3
 8003006:	7dfb      	ldrb	r3, [r7, #23]
 8003008:	b29b      	uxth	r3, r3
 800300a:	4413      	add	r3, r2
 800300c:	b29b      	uxth	r3, r3
 800300e:	7d3a      	ldrb	r2, [r7, #20]
 8003010:	b291      	uxth	r1, r2
 8003012:	2203      	movs	r2, #3
 8003014:	4618      	mov	r0, r3
 8003016:	f001 fd6d 	bl	8004af4 <BSP_LCD_FillCircle>
	  BSP_LCD_FillCircle(margeX, margeY  + pasY, 3);
 800301a:	7d7b      	ldrb	r3, [r7, #21]
 800301c:	b298      	uxth	r0, r3
 800301e:	7d3b      	ldrb	r3, [r7, #20]
 8003020:	b29a      	uxth	r2, r3
 8003022:	7dbb      	ldrb	r3, [r7, #22]
 8003024:	b29b      	uxth	r3, r3
 8003026:	4413      	add	r3, r2
 8003028:	b29b      	uxth	r3, r3
 800302a:	2203      	movs	r2, #3
 800302c:	4619      	mov	r1, r3
 800302e:	f001 fd61 	bl	8004af4 <BSP_LCD_FillCircle>
	  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003032:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003036:	f001 f90b 	bl	8004250 <BSP_LCD_SetBackColor>
	  if(isTurn == 0)
 800303a:	4b75      	ldr	r3, [pc, #468]	; (8003210 <fonction_affichage+0x2a8>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d116      	bne.n	8003070 <fonction_affichage+0x108>
	  {
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003042:	f04f 30ff 	mov.w	r0, #4294967295
 8003046:	f001 f8eb 	bl	8004220 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAt(3 * margeX + 8 * pasX, margeY, (uint8_t *) "Au tour du joueur blanc", LEFT_MODE);
 800304a:	7d7b      	ldrb	r3, [r7, #21]
 800304c:	b29b      	uxth	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	0052      	lsls	r2, r2, #1
 8003052:	4413      	add	r3, r2
 8003054:	b29a      	uxth	r2, r3
 8003056:	7dfb      	ldrb	r3, [r7, #23]
 8003058:	b29b      	uxth	r3, r3
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	b29b      	uxth	r3, r3
 800305e:	4413      	add	r3, r2
 8003060:	b298      	uxth	r0, r3
 8003062:	7d3b      	ldrb	r3, [r7, #20]
 8003064:	b299      	uxth	r1, r3
 8003066:	2303      	movs	r3, #3
 8003068:	4a6a      	ldr	r2, [pc, #424]	; (8003214 <fonction_affichage+0x2ac>)
 800306a:	f001 f9a7 	bl	80043bc <BSP_LCD_DisplayStringAt>
 800306e:	e01a      	b.n	80030a6 <fonction_affichage+0x13e>
	  }
	  else
	  {
		  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8003070:	4869      	ldr	r0, [pc, #420]	; (8003218 <fonction_affichage+0x2b0>)
 8003072:	f001 f8d5 	bl	8004220 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAt(3 * margeX + 8 * pasX, margeY + 8 * pasY, (uint8_t *) "Au tour du joueur bleu", LEFT_MODE);
 8003076:	7d7b      	ldrb	r3, [r7, #21]
 8003078:	b29b      	uxth	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	0052      	lsls	r2, r2, #1
 800307e:	4413      	add	r3, r2
 8003080:	b29a      	uxth	r2, r3
 8003082:	7dfb      	ldrb	r3, [r7, #23]
 8003084:	b29b      	uxth	r3, r3
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	b29b      	uxth	r3, r3
 800308a:	4413      	add	r3, r2
 800308c:	b298      	uxth	r0, r3
 800308e:	7d3b      	ldrb	r3, [r7, #20]
 8003090:	b29a      	uxth	r2, r3
 8003092:	7dbb      	ldrb	r3, [r7, #22]
 8003094:	b29b      	uxth	r3, r3
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	b29b      	uxth	r3, r3
 800309a:	4413      	add	r3, r2
 800309c:	b299      	uxth	r1, r3
 800309e:	2303      	movs	r3, #3
 80030a0:	4a5e      	ldr	r2, [pc, #376]	; (800321c <fonction_affichage+0x2b4>)
 80030a2:	f001 f98b 	bl	80043bc <BSP_LCD_DisplayStringAt>
	  }
	  for (i = 0; i < 8; i++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	77fb      	strb	r3, [r7, #31]
 80030aa:	e181      	b.n	80033b0 <fonction_affichage+0x448>
	  {
		  for (j = 0; j < 8; j++)
 80030ac:	2300      	movs	r3, #0
 80030ae:	77bb      	strb	r3, [r7, #30]
 80030b0:	e177      	b.n	80033a2 <fonction_affichage+0x43a>
		  {
			  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 80030b2:	4b55      	ldr	r3, [pc, #340]	; (8003208 <fonction_affichage+0x2a0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f04f 31ff 	mov.w	r1, #4294967295
 80030ba:	4618      	mov	r0, r3
 80030bc:	f00a fbd8 	bl	800d870 <xQueueSemaphoreTake>
			  filled = chessboard[i][j].isFilled;
 80030c0:	7ff9      	ldrb	r1, [r7, #31]
 80030c2:	7fbb      	ldrb	r3, [r7, #30]
 80030c4:	4856      	ldr	r0, [pc, #344]	; (8003220 <fonction_affichage+0x2b8>)
 80030c6:	461a      	mov	r2, r3
 80030c8:	0092      	lsls	r2, r2, #2
 80030ca:	441a      	add	r2, r3
 80030cc:	0053      	lsls	r3, r2, #1
 80030ce:	461a      	mov	r2, r3
 80030d0:	460b      	mov	r3, r1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	4413      	add	r3, r2
 80030da:	4403      	add	r3, r0
 80030dc:	3305      	adds	r3, #5
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	73bb      	strb	r3, [r7, #14]
			  possible = chessboard[i][j].isPossible;
 80030e2:	7ff9      	ldrb	r1, [r7, #31]
 80030e4:	7fbb      	ldrb	r3, [r7, #30]
 80030e6:	484e      	ldr	r0, [pc, #312]	; (8003220 <fonction_affichage+0x2b8>)
 80030e8:	461a      	mov	r2, r3
 80030ea:	0092      	lsls	r2, r2, #2
 80030ec:	441a      	add	r2, r3
 80030ee:	0053      	lsls	r3, r2, #1
 80030f0:	461a      	mov	r2, r3
 80030f2:	460b      	mov	r3, r1
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	4413      	add	r3, r2
 80030fc:	4403      	add	r3, r0
 80030fe:	3304      	adds	r3, #4
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	737b      	strb	r3, [r7, #13]
			  dame = chessboard[i][j].isDame;
 8003104:	7ff9      	ldrb	r1, [r7, #31]
 8003106:	7fbb      	ldrb	r3, [r7, #30]
 8003108:	4845      	ldr	r0, [pc, #276]	; (8003220 <fonction_affichage+0x2b8>)
 800310a:	461a      	mov	r2, r3
 800310c:	0092      	lsls	r2, r2, #2
 800310e:	441a      	add	r2, r3
 8003110:	0053      	lsls	r3, r2, #1
 8003112:	461a      	mov	r2, r3
 8003114:	460b      	mov	r3, r1
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	4413      	add	r3, r2
 800311e:	4403      	add	r3, r0
 8003120:	3306      	adds	r3, #6
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	733b      	strb	r3, [r7, #12]
			  xSemaphoreGive(mutexChessboard);
 8003126:	4b38      	ldr	r3, [pc, #224]	; (8003208 <fonction_affichage+0x2a0>)
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	2200      	movs	r2, #0
 800312e:	2100      	movs	r1, #0
 8003130:	f00a f9b2 	bl	800d498 <xQueueGenericSend>
			  // Case avec un pion
			  if ( filled != 0)
 8003134:	7bbb      	ldrb	r3, [r7, #14]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80d0 	beq.w	80032dc <fonction_affichage+0x374>
			  {
				  color = chessboard[i][j].piece_color;
 800313c:	7ff9      	ldrb	r1, [r7, #31]
 800313e:	7fbb      	ldrb	r3, [r7, #30]
 8003140:	4837      	ldr	r0, [pc, #220]	; (8003220 <fonction_affichage+0x2b8>)
 8003142:	461a      	mov	r2, r3
 8003144:	0092      	lsls	r2, r2, #2
 8003146:	441a      	add	r2, r3
 8003148:	0053      	lsls	r3, r2, #1
 800314a:	461a      	mov	r2, r3
 800314c:	460b      	mov	r3, r1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	4413      	add	r3, r2
 8003156:	4403      	add	r3, r0
 8003158:	3307      	adds	r3, #7
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	73fb      	strb	r3, [r7, #15]
				  xSemaphoreTake(mutexEcran, portMAX_DELAY);
 800315e:	4b31      	ldr	r3, [pc, #196]	; (8003224 <fonction_affichage+0x2bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f04f 31ff 	mov.w	r1, #4294967295
 8003166:	4618      	mov	r0, r3
 8003168:	f00a fb82 	bl	800d870 <xQueueSemaphoreTake>
				  if (color == 1) BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d103      	bne.n	800317a <fonction_affichage+0x212>
 8003172:	4829      	ldr	r0, [pc, #164]	; (8003218 <fonction_affichage+0x2b0>)
 8003174:	f001 f854 	bl	8004220 <BSP_LCD_SetTextColor>
 8003178:	e006      	b.n	8003188 <fonction_affichage+0x220>
				  else if (color == 0) BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d103      	bne.n	8003188 <fonction_affichage+0x220>
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	f001 f84c 	bl	8004220 <BSP_LCD_SetTextColor>
			      pointeurX = margeX + pasX / 2 + j * pasX;
 8003188:	7d7b      	ldrb	r3, [r7, #21]
 800318a:	b29a      	uxth	r2, r3
 800318c:	7dfb      	ldrb	r3, [r7, #23]
 800318e:	085b      	lsrs	r3, r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	b29b      	uxth	r3, r3
 8003194:	4413      	add	r3, r2
 8003196:	b29a      	uxth	r2, r3
 8003198:	7fbb      	ldrb	r3, [r7, #30]
 800319a:	b299      	uxth	r1, r3
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	fb11 f303 	smulbb	r3, r1, r3
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	827b      	strh	r3, [r7, #18]
			      pointeurY = margeY + pasY / 2 + i * pasY;
 80031aa:	7d3b      	ldrb	r3, [r7, #20]
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	7dbb      	ldrb	r3, [r7, #22]
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	7ffb      	ldrb	r3, [r7, #31]
 80031bc:	b299      	uxth	r1, r3
 80031be:	7dbb      	ldrb	r3, [r7, #22]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	fb11 f303 	smulbb	r3, r1, r3
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	823b      	strh	r3, [r7, #16]
			      if (dame == 0) BSP_LCD_FillCircle(pointeurX, pointeurY, chessboard[i][j].rayon);
 80031cc:	7b3b      	ldrb	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d12a      	bne.n	8003228 <fonction_affichage+0x2c0>
 80031d2:	7ff9      	ldrb	r1, [r7, #31]
 80031d4:	7fbb      	ldrb	r3, [r7, #30]
 80031d6:	4812      	ldr	r0, [pc, #72]	; (8003220 <fonction_affichage+0x2b8>)
 80031d8:	461a      	mov	r2, r3
 80031da:	0092      	lsls	r2, r2, #2
 80031dc:	441a      	add	r2, r3
 80031de:	0053      	lsls	r3, r2, #1
 80031e0:	461a      	mov	r2, r3
 80031e2:	460b      	mov	r3, r1
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	4413      	add	r3, r2
 80031ec:	4403      	add	r3, r0
 80031ee:	3308      	adds	r3, #8
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	8a39      	ldrh	r1, [r7, #16]
 80031f6:	8a7b      	ldrh	r3, [r7, #18]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f001 fc7b 	bl	8004af4 <BSP_LCD_FillCircle>
 80031fe:	e065      	b.n	80032cc <fonction_affichage+0x364>
 8003200:	20008058 	.word	0x20008058
 8003204:	40021c00 	.word	0x40021c00
 8003208:	20008da4 	.word	0x20008da4
 800320c:	20000028 	.word	0x20000028
 8003210:	2000038a 	.word	0x2000038a
 8003214:	0800fa68 	.word	0x0800fa68
 8003218:	ff0000ff 	.word	0xff0000ff
 800321c:	0800fa80 	.word	0x0800fa80
 8003220:	200080f8 	.word	0x200080f8
 8003224:	200085d8 	.word	0x200085d8
			      else BSP_LCD_FillRect(pointeurX - chessboard[i][j].rayon, pointeurY - chessboard[i][j].rayon, chessboard[i][j].rayon * 2, chessboard[i][j].rayon * 2);
 8003228:	7ff9      	ldrb	r1, [r7, #31]
 800322a:	7fbb      	ldrb	r3, [r7, #30]
 800322c:	486e      	ldr	r0, [pc, #440]	; (80033e8 <fonction_affichage+0x480>)
 800322e:	461a      	mov	r2, r3
 8003230:	0092      	lsls	r2, r2, #2
 8003232:	441a      	add	r2, r3
 8003234:	0053      	lsls	r3, r2, #1
 8003236:	461a      	mov	r2, r3
 8003238:	460b      	mov	r3, r1
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	4413      	add	r3, r2
 8003242:	4403      	add	r3, r0
 8003244:	3308      	adds	r3, #8
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	8a7a      	ldrh	r2, [r7, #18]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	b298      	uxth	r0, r3
 8003250:	7ff9      	ldrb	r1, [r7, #31]
 8003252:	7fbb      	ldrb	r3, [r7, #30]
 8003254:	4c64      	ldr	r4, [pc, #400]	; (80033e8 <fonction_affichage+0x480>)
 8003256:	461a      	mov	r2, r3
 8003258:	0092      	lsls	r2, r2, #2
 800325a:	441a      	add	r2, r3
 800325c:	0053      	lsls	r3, r2, #1
 800325e:	461a      	mov	r2, r3
 8003260:	460b      	mov	r3, r1
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	4413      	add	r3, r2
 800326a:	4423      	add	r3, r4
 800326c:	3308      	adds	r3, #8
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	8a3a      	ldrh	r2, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	b29c      	uxth	r4, r3
 8003278:	7ff9      	ldrb	r1, [r7, #31]
 800327a:	7fbb      	ldrb	r3, [r7, #30]
 800327c:	4d5a      	ldr	r5, [pc, #360]	; (80033e8 <fonction_affichage+0x480>)
 800327e:	461a      	mov	r2, r3
 8003280:	0092      	lsls	r2, r2, #2
 8003282:	441a      	add	r2, r3
 8003284:	0053      	lsls	r3, r2, #1
 8003286:	461a      	mov	r2, r3
 8003288:	460b      	mov	r3, r1
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4413      	add	r3, r2
 8003292:	442b      	add	r3, r5
 8003294:	3308      	adds	r3, #8
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	b29b      	uxth	r3, r3
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	b29d      	uxth	r5, r3
 800329e:	7ff9      	ldrb	r1, [r7, #31]
 80032a0:	7fbb      	ldrb	r3, [r7, #30]
 80032a2:	4e51      	ldr	r6, [pc, #324]	; (80033e8 <fonction_affichage+0x480>)
 80032a4:	461a      	mov	r2, r3
 80032a6:	0092      	lsls	r2, r2, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	0053      	lsls	r3, r2, #1
 80032ac:	461a      	mov	r2, r3
 80032ae:	460b      	mov	r3, r1
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	4413      	add	r3, r2
 80032b8:	4433      	add	r3, r6
 80032ba:	3308      	adds	r3, #8
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	462a      	mov	r2, r5
 80032c6:	4621      	mov	r1, r4
 80032c8:	f001 fb9a 	bl	8004a00 <BSP_LCD_FillRect>
				  xSemaphoreGive(mutexEcran);
 80032cc:	4b47      	ldr	r3, [pc, #284]	; (80033ec <fonction_affichage+0x484>)
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	2300      	movs	r3, #0
 80032d2:	2200      	movs	r2, #0
 80032d4:	2100      	movs	r1, #0
 80032d6:	f00a f8df 	bl	800d498 <xQueueGenericSend>
 80032da:	e05f      	b.n	800339c <fonction_affichage+0x434>
			  }
			  //Case possible
			  else if (possible != 0)
 80032dc:	7b7b      	ldrb	r3, [r7, #13]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d05c      	beq.n	800339c <fonction_affichage+0x434>
			  {
				  if (change == 1) // Il y a eu une deselection, reinitialisation des possibles et pas d'affichage
 80032e2:	4b43      	ldr	r3, [pc, #268]	; (80033f0 <fonction_affichage+0x488>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d11f      	bne.n	800332a <fonction_affichage+0x3c2>
				  {
					  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 80032ea:	4b42      	ldr	r3, [pc, #264]	; (80033f4 <fonction_affichage+0x48c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f04f 31ff 	mov.w	r1, #4294967295
 80032f2:	4618      	mov	r0, r3
 80032f4:	f00a fabc 	bl	800d870 <xQueueSemaphoreTake>
					  chessboard[i][j].isPossible = 0;
 80032f8:	7ff9      	ldrb	r1, [r7, #31]
 80032fa:	7fbb      	ldrb	r3, [r7, #30]
 80032fc:	483a      	ldr	r0, [pc, #232]	; (80033e8 <fonction_affichage+0x480>)
 80032fe:	461a      	mov	r2, r3
 8003300:	0092      	lsls	r2, r2, #2
 8003302:	441a      	add	r2, r3
 8003304:	0053      	lsls	r3, r2, #1
 8003306:	461a      	mov	r2, r3
 8003308:	460b      	mov	r3, r1
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	4413      	add	r3, r2
 8003312:	4403      	add	r3, r0
 8003314:	3304      	adds	r3, #4
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
					  xSemaphoreGive(mutexChessboard);
 800331a:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <fonction_affichage+0x48c>)
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	2300      	movs	r3, #0
 8003320:	2200      	movs	r2, #0
 8003322:	2100      	movs	r1, #0
 8003324:	f00a f8b8 	bl	800d498 <xQueueGenericSend>
 8003328:	e038      	b.n	800339c <fonction_affichage+0x434>
				  }
				  else
				  {
					  xSemaphoreTake(mutexEcran, portMAX_DELAY);
 800332a:	4b30      	ldr	r3, [pc, #192]	; (80033ec <fonction_affichage+0x484>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f04f 31ff 	mov.w	r1, #4294967295
 8003332:	4618      	mov	r0, r3
 8003334:	f00a fa9c 	bl	800d870 <xQueueSemaphoreTake>
					  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003338:	482f      	ldr	r0, [pc, #188]	; (80033f8 <fonction_affichage+0x490>)
 800333a:	f000 ff71 	bl	8004220 <BSP_LCD_SetTextColor>
				      pointeurX = margeX + pasX / 2 + j * pasX;
 800333e:	7d7b      	ldrb	r3, [r7, #21]
 8003340:	b29a      	uxth	r2, r3
 8003342:	7dfb      	ldrb	r3, [r7, #23]
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	b2db      	uxtb	r3, r3
 8003348:	b29b      	uxth	r3, r3
 800334a:	4413      	add	r3, r2
 800334c:	b29a      	uxth	r2, r3
 800334e:	7fbb      	ldrb	r3, [r7, #30]
 8003350:	b299      	uxth	r1, r3
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	b29b      	uxth	r3, r3
 8003356:	fb11 f303 	smulbb	r3, r1, r3
 800335a:	b29b      	uxth	r3, r3
 800335c:	4413      	add	r3, r2
 800335e:	827b      	strh	r3, [r7, #18]
				      pointeurY = margeY + pasY / 2 + i * pasY;
 8003360:	7d3b      	ldrb	r3, [r7, #20]
 8003362:	b29a      	uxth	r2, r3
 8003364:	7dbb      	ldrb	r3, [r7, #22]
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	b2db      	uxtb	r3, r3
 800336a:	b29b      	uxth	r3, r3
 800336c:	4413      	add	r3, r2
 800336e:	b29a      	uxth	r2, r3
 8003370:	7ffb      	ldrb	r3, [r7, #31]
 8003372:	b299      	uxth	r1, r3
 8003374:	7dbb      	ldrb	r3, [r7, #22]
 8003376:	b29b      	uxth	r3, r3
 8003378:	fb11 f303 	smulbb	r3, r1, r3
 800337c:	b29b      	uxth	r3, r3
 800337e:	4413      	add	r3, r2
 8003380:	823b      	strh	r3, [r7, #16]
					  BSP_LCD_FillCircle(pointeurX, pointeurY, 9);
 8003382:	8a39      	ldrh	r1, [r7, #16]
 8003384:	8a7b      	ldrh	r3, [r7, #18]
 8003386:	2209      	movs	r2, #9
 8003388:	4618      	mov	r0, r3
 800338a:	f001 fbb3 	bl	8004af4 <BSP_LCD_FillCircle>
					  xSemaphoreGive(mutexEcran);
 800338e:	4b17      	ldr	r3, [pc, #92]	; (80033ec <fonction_affichage+0x484>)
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	2300      	movs	r3, #0
 8003394:	2200      	movs	r2, #0
 8003396:	2100      	movs	r1, #0
 8003398:	f00a f87e 	bl	800d498 <xQueueGenericSend>
		  for (j = 0; j < 8; j++)
 800339c:	7fbb      	ldrb	r3, [r7, #30]
 800339e:	3301      	adds	r3, #1
 80033a0:	77bb      	strb	r3, [r7, #30]
 80033a2:	7fbb      	ldrb	r3, [r7, #30]
 80033a4:	2b07      	cmp	r3, #7
 80033a6:	f67f ae84 	bls.w	80030b2 <fonction_affichage+0x14a>
	  for (i = 0; i < 8; i++)
 80033aa:	7ffb      	ldrb	r3, [r7, #31]
 80033ac:	3301      	adds	r3, #1
 80033ae:	77fb      	strb	r3, [r7, #31]
 80033b0:	7ffb      	ldrb	r3, [r7, #31]
 80033b2:	2b07      	cmp	r3, #7
 80033b4:	f67f ae7a 	bls.w	80030ac <fonction_affichage+0x144>
				  }

			  }
		  }
	  }
	xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <fonction_affichage+0x48c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f04f 31ff 	mov.w	r1, #4294967295
 80033c0:	4618      	mov	r0, r3
 80033c2:	f00a fa55 	bl	800d870 <xQueueSemaphoreTake>
	change = 0; // S'il y avait des changements, ils on ete pris en compte
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <fonction_affichage+0x488>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
	 xSemaphoreGive(mutexChessboard);
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <fonction_affichage+0x48c>)
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	2300      	movs	r3, #0
 80033d2:	2200      	movs	r2, #0
 80033d4:	2100      	movs	r1, #0
 80033d6:	f00a f85f 	bl	800d498 <xQueueGenericSend>

    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 80033da:	f107 0308 	add.w	r3, r7, #8
 80033de:	69b9      	ldr	r1, [r7, #24]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f00a fec5 	bl	800e170 <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 80033e6:	e5ea      	b.n	8002fbe <fonction_affichage+0x56>
 80033e8:	200080f8 	.word	0x200080f8
 80033ec:	200085d8 	.word	0x200085d8
 80033f0:	20000028 	.word	0x20000028
 80033f4:	20008da4 	.word	0x20008da4
 80033f8:	ffff0000 	.word	0xffff0000

080033fc <fonction_select>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_select */
void fonction_select(void const * argument)
{
 80033fc:	b5b0      	push	{r4, r5, r7, lr}
 80033fe:	b090      	sub	sp, #64	; 0x40
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_select */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 8003404:	2364      	movs	r3, #100	; 0x64
 8003406:	63bb      	str	r3, [r7, #56]	; 0x38
	static TS_StateTypeDef TS_State;
	//flag = 0;
	uint8_t posx = 0, posy = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800340e:	2300      	movs	r3, #0
 8003410:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t line = 0, col = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800341a:	2300      	movs	r3, #0
 800341c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	const uint8_t pas 			= 30;
 8003420:	231e      	movs	r3, #30
 8003422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	const uint8_t marge			= 15;
 8003426:	230f      	movs	r3, #15
 8003428:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t selected 			= 0;
 800342c:	2300      	movs	r3, #0
 800342e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t line_selected		= 8;
 8003432:	2308      	movs	r3, #8
 8003434:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint8_t col_selected		= 8;
 8003438:	2308      	movs	r3, #8
 800343a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint16_t message[1];
  /* Infinite loop */
  for(;;)
  {

	  BSP_TS_GetState(&TS_State);
 800343e:	489e      	ldr	r0, [pc, #632]	; (80036b8 <fonction_select+0x2bc>)
 8003440:	f002 f878 	bl	8005534 <BSP_TS_GetState>
	  if(TS_State.touchDetected)
 8003444:	4b9c      	ldr	r3, [pc, #624]	; (80036b8 <fonction_select+0x2bc>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8247 	beq.w	80038dc <fonction_select+0x4e0>
	  {
		  posx = TS_State.touchX[0];
 800344e:	4b9a      	ldr	r3, [pc, #616]	; (80036b8 <fonction_select+0x2bc>)
 8003450:	885b      	ldrh	r3, [r3, #2]
 8003452:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  posy = TS_State.touchY[0];
 8003456:	4b98      	ldr	r3, [pc, #608]	; (80036b8 <fonction_select+0x2bc>)
 8003458:	899b      	ldrh	r3, [r3, #12]
 800345a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

		  col = (posx - marge) / pas;
 800345e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003462:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003466:	1ad2      	subs	r2, r2, r3
 8003468:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800346c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003470:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		  line = (posy - marge) / pas;
 8003474:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003478:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800347c:	1ad2      	subs	r2, r2, r3
 800347e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003482:	fb92 f3f3 	sdiv	r3, r2, r3
 8003486:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 800348a:	4b8c      	ldr	r3, [pc, #560]	; (80036bc <fonction_select+0x2c0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f04f 31ff 	mov.w	r1, #4294967295
 8003492:	4618      	mov	r0, r3
 8003494:	f00a f9ec 	bl	800d870 <xQueueSemaphoreTake>
		  // Selection d'un pion
		  if(chessboard[line][col].isFilled && (chessboard[line][col].piece_color == isTurn))
 8003498:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800349c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80034a0:	4887      	ldr	r0, [pc, #540]	; (80036c0 <fonction_select+0x2c4>)
 80034a2:	461a      	mov	r2, r3
 80034a4:	0092      	lsls	r2, r2, #2
 80034a6:	441a      	add	r2, r3
 80034a8:	0053      	lsls	r3, r2, #1
 80034aa:	461a      	mov	r2, r3
 80034ac:	460b      	mov	r3, r1
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	4413      	add	r3, r2
 80034b6:	4403      	add	r3, r0
 80034b8:	3305      	adds	r3, #5
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 808d 	beq.w	80035dc <fonction_select+0x1e0>
 80034c2:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80034c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80034ca:	487d      	ldr	r0, [pc, #500]	; (80036c0 <fonction_select+0x2c4>)
 80034cc:	461a      	mov	r2, r3
 80034ce:	0092      	lsls	r2, r2, #2
 80034d0:	441a      	add	r2, r3
 80034d2:	0053      	lsls	r3, r2, #1
 80034d4:	461a      	mov	r2, r3
 80034d6:	460b      	mov	r3, r1
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	4413      	add	r3, r2
 80034e0:	4403      	add	r3, r0
 80034e2:	3307      	adds	r3, #7
 80034e4:	781a      	ldrb	r2, [r3, #0]
 80034e6:	4b77      	ldr	r3, [pc, #476]	; (80036c4 <fonction_select+0x2c8>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d176      	bne.n	80035dc <fonction_select+0x1e0>
		  {
			  // Aucun pion n'etait selectionne
			  if(chessboard[line][col].rayon < 12 && selected == 0)
 80034ee:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80034f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80034f6:	4872      	ldr	r0, [pc, #456]	; (80036c0 <fonction_select+0x2c4>)
 80034f8:	461a      	mov	r2, r3
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	441a      	add	r2, r3
 80034fe:	0053      	lsls	r3, r2, #1
 8003500:	461a      	mov	r2, r3
 8003502:	460b      	mov	r3, r1
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	4413      	add	r3, r2
 800350c:	4403      	add	r3, r0
 800350e:	3308      	adds	r3, #8
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b0b      	cmp	r3, #11
 8003514:	d835      	bhi.n	8003582 <fonction_select+0x186>
 8003516:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800351a:	2b00      	cmp	r3, #0
 800351c:	d131      	bne.n	8003582 <fonction_select+0x186>
			  {
				  chessboard[line][col].rayon = 12;
 800351e:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003522:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003526:	4866      	ldr	r0, [pc, #408]	; (80036c0 <fonction_select+0x2c4>)
 8003528:	461a      	mov	r2, r3
 800352a:	0092      	lsls	r2, r2, #2
 800352c:	441a      	add	r2, r3
 800352e:	0053      	lsls	r3, r2, #1
 8003530:	461a      	mov	r2, r3
 8003532:	460b      	mov	r3, r1
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	4413      	add	r3, r2
 800353c:	4403      	add	r3, r0
 800353e:	3308      	adds	r3, #8
 8003540:	220c      	movs	r2, #12
 8003542:	701a      	strb	r2, [r3, #0]
				  selected = 1;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				  line_selected = line;
 800354a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800354e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				  col_selected = col;
 8003552:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003556:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				  message[0] = (line << 8) + col;
 800355a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800355e:	b29b      	uxth	r3, r3
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	b29a      	uxth	r2, r3
 8003564:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003568:	b29b      	uxth	r3, r3
 800356a:	4413      	add	r3, r2
 800356c:	b29b      	uxth	r3, r3
 800356e:	84bb      	strh	r3, [r7, #36]	; 0x24
				  xQueueSend(queueSelHandle, &message, 0);
 8003570:	4b55      	ldr	r3, [pc, #340]	; (80036c8 <fonction_select+0x2cc>)
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003578:	2300      	movs	r3, #0
 800357a:	2200      	movs	r2, #0
 800357c:	f009 ff8c 	bl	800d498 <xQueueGenericSend>
 8003580:	e02c      	b.n	80035dc <fonction_select+0x1e0>
			  }
			  /// Ce pion etait selectionne
			  else if (chessboard[line][col].rayon == 12)
 8003582:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003586:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800358a:	484d      	ldr	r0, [pc, #308]	; (80036c0 <fonction_select+0x2c4>)
 800358c:	461a      	mov	r2, r3
 800358e:	0092      	lsls	r2, r2, #2
 8003590:	441a      	add	r2, r3
 8003592:	0053      	lsls	r3, r2, #1
 8003594:	461a      	mov	r2, r3
 8003596:	460b      	mov	r3, r1
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	4413      	add	r3, r2
 80035a0:	4403      	add	r3, r0
 80035a2:	3308      	adds	r3, #8
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	d118      	bne.n	80035dc <fonction_select+0x1e0>
			  {
				  chessboard[line][col].rayon = 9;
 80035aa:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80035ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80035b2:	4843      	ldr	r0, [pc, #268]	; (80036c0 <fonction_select+0x2c4>)
 80035b4:	461a      	mov	r2, r3
 80035b6:	0092      	lsls	r2, r2, #2
 80035b8:	441a      	add	r2, r3
 80035ba:	0053      	lsls	r3, r2, #1
 80035bc:	461a      	mov	r2, r3
 80035be:	460b      	mov	r3, r1
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	4413      	add	r3, r2
 80035c8:	4403      	add	r3, r0
 80035ca:	3308      	adds	r3, #8
 80035cc:	2209      	movs	r2, #9
 80035ce:	701a      	strb	r2, [r3, #0]
				  change = 1;
 80035d0:	4b3e      	ldr	r3, [pc, #248]	; (80036cc <fonction_select+0x2d0>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
				  selected = 0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  }
		  }

		  // Case pour un deplacement
		  if(chessboard[line][col].isPossible > 0)
 80035dc:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80035e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80035e4:	4836      	ldr	r0, [pc, #216]	; (80036c0 <fonction_select+0x2c4>)
 80035e6:	461a      	mov	r2, r3
 80035e8:	0092      	lsls	r2, r2, #2
 80035ea:	441a      	add	r2, r3
 80035ec:	0053      	lsls	r3, r2, #1
 80035ee:	461a      	mov	r2, r3
 80035f0:	460b      	mov	r3, r1
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	4413      	add	r3, r2
 80035fa:	4403      	add	r3, r0
 80035fc:	3304      	adds	r3, #4
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8164 	beq.w	80038ce <fonction_select+0x4d2>
		  {
			  chessboard[line_selected][col_selected].isFilled = 0;
 8003606:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 800360a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800360e:	482c      	ldr	r0, [pc, #176]	; (80036c0 <fonction_select+0x2c4>)
 8003610:	461a      	mov	r2, r3
 8003612:	0092      	lsls	r2, r2, #2
 8003614:	441a      	add	r2, r3
 8003616:	0053      	lsls	r3, r2, #1
 8003618:	461a      	mov	r2, r3
 800361a:	460b      	mov	r3, r1
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4413      	add	r3, r2
 8003624:	4403      	add	r3, r0
 8003626:	3305      	adds	r3, #5
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
			  // Suppression des pions manges
			  for (p = 0; p < 12; p++)
 800362c:	2300      	movs	r3, #0
 800362e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8003632:	e05c      	b.n	80036ee <fonction_select+0x2f2>
			  {
				  eaten_piece = possible_eaten[chessboard[line][col].isPossible - 1][p];
 8003634:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003638:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800363c:	4820      	ldr	r0, [pc, #128]	; (80036c0 <fonction_select+0x2c4>)
 800363e:	461a      	mov	r2, r3
 8003640:	0092      	lsls	r2, r2, #2
 8003642:	441a      	add	r2, r3
 8003644:	0053      	lsls	r3, r2, #1
 8003646:	461a      	mov	r2, r3
 8003648:	460b      	mov	r3, r1
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	4413      	add	r3, r2
 8003652:	4403      	add	r3, r0
 8003654:	3304      	adds	r3, #4
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	1e5a      	subs	r2, r3, #1
 800365a:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800365e:	481c      	ldr	r0, [pc, #112]	; (80036d0 <fonction_select+0x2d4>)
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4403      	add	r3, r0
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	6010      	str	r0, [r2, #0]
				  if(eaten_piece.ligne != 8)
 8003676:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003678:	2b08      	cmp	r3, #8
 800367a:	d033      	beq.n	80036e4 <fonction_select+0x2e8>
				  {
					  chessboard[eaten_piece.ligne][eaten_piece.colonne].isFilled = 0;
 800367c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800367e:	4618      	mov	r0, r3
 8003680:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003682:	490f      	ldr	r1, [pc, #60]	; (80036c0 <fonction_select+0x2c4>)
 8003684:	461a      	mov	r2, r3
 8003686:	0092      	lsls	r2, r2, #2
 8003688:	441a      	add	r2, r3
 800368a:	0053      	lsls	r3, r2, #1
 800368c:	461a      	mov	r2, r3
 800368e:	4603      	mov	r3, r0
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4403      	add	r3, r0
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	4413      	add	r3, r2
 8003698:	440b      	add	r3, r1
 800369a:	3305      	adds	r3, #5
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
			          if(isTurn == 0)
 80036a0:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <fonction_select+0x2c8>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d117      	bne.n	80036d8 <fonction_select+0x2dc>
			              nb_blue--;
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <fonction_select+0x2d8>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <fonction_select+0x2d8>)
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e016      	b.n	80036e4 <fonction_select+0x2e8>
 80036b6:	bf00      	nop
 80036b8:	2000038c 	.word	0x2000038c
 80036bc:	20008da4 	.word	0x20008da4
 80036c0:	200080f8 	.word	0x200080f8
 80036c4:	2000038a 	.word	0x2000038a
 80036c8:	200080a8 	.word	0x200080a8
 80036cc:	20000028 	.word	0x20000028
 80036d0:	20008614 	.word	0x20008614
 80036d4:	20000029 	.word	0x20000029
			          else
			              nb_white--;
 80036d8:	4b84      	ldr	r3, [pc, #528]	; (80038ec <fonction_select+0x4f0>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	3b01      	subs	r3, #1
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	4b82      	ldr	r3, [pc, #520]	; (80038ec <fonction_select+0x4f0>)
 80036e2:	701a      	strb	r2, [r3, #0]
			  for (p = 0; p < 12; p++)
 80036e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80036e8:	3301      	adds	r3, #1
 80036ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80036ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80036f2:	2b0b      	cmp	r3, #11
 80036f4:	d99e      	bls.n	8003634 <fonction_select+0x238>
				  }
			  }

			  chessboard[line][col].isFilled = 1;
 80036f6:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80036fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80036fe:	487c      	ldr	r0, [pc, #496]	; (80038f0 <fonction_select+0x4f4>)
 8003700:	461a      	mov	r2, r3
 8003702:	0092      	lsls	r2, r2, #2
 8003704:	441a      	add	r2, r3
 8003706:	0053      	lsls	r3, r2, #1
 8003708:	461a      	mov	r2, r3
 800370a:	460b      	mov	r3, r1
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	4413      	add	r3, r2
 8003714:	4403      	add	r3, r0
 8003716:	3305      	adds	r3, #5
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
			  chessboard[line][col].isPossible = 0;
 800371c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003720:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003724:	4872      	ldr	r0, [pc, #456]	; (80038f0 <fonction_select+0x4f4>)
 8003726:	461a      	mov	r2, r3
 8003728:	0092      	lsls	r2, r2, #2
 800372a:	441a      	add	r2, r3
 800372c:	0053      	lsls	r3, r2, #1
 800372e:	461a      	mov	r2, r3
 8003730:	460b      	mov	r3, r1
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	4413      	add	r3, r2
 800373a:	4403      	add	r3, r0
 800373c:	3304      	adds	r3, #4
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
			  chessboard[line][col].piece_color = chessboard[line_selected][col_selected].piece_color;
 8003742:	f897 403e 	ldrb.w	r4, [r7, #62]	; 0x3e
 8003746:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800374a:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800374e:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8003752:	4d67      	ldr	r5, [pc, #412]	; (80038f0 <fonction_select+0x4f4>)
 8003754:	461a      	mov	r2, r3
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	441a      	add	r2, r3
 800375a:	0053      	lsls	r3, r2, #1
 800375c:	461a      	mov	r2, r3
 800375e:	4623      	mov	r3, r4
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4423      	add	r3, r4
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	4413      	add	r3, r2
 8003768:	442b      	add	r3, r5
 800376a:	3307      	adds	r3, #7
 800376c:	781d      	ldrb	r5, [r3, #0]
 800376e:	4c60      	ldr	r4, [pc, #384]	; (80038f0 <fonction_select+0x4f4>)
 8003770:	4602      	mov	r2, r0
 8003772:	0092      	lsls	r2, r2, #2
 8003774:	4402      	add	r2, r0
 8003776:	0053      	lsls	r3, r2, #1
 8003778:	461a      	mov	r2, r3
 800377a:	460b      	mov	r3, r1
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	4413      	add	r3, r2
 8003784:	4423      	add	r3, r4
 8003786:	3307      	adds	r3, #7
 8003788:	462a      	mov	r2, r5
 800378a:	701a      	strb	r2, [r3, #0]
			  chessboard[line][col].rayon = 9;
 800378c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003790:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003794:	4856      	ldr	r0, [pc, #344]	; (80038f0 <fonction_select+0x4f4>)
 8003796:	461a      	mov	r2, r3
 8003798:	0092      	lsls	r2, r2, #2
 800379a:	441a      	add	r2, r3
 800379c:	0053      	lsls	r3, r2, #1
 800379e:	461a      	mov	r2, r3
 80037a0:	460b      	mov	r3, r1
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	4413      	add	r3, r2
 80037aa:	4403      	add	r3, r0
 80037ac:	3308      	adds	r3, #8
 80037ae:	2209      	movs	r2, #9
 80037b0:	701a      	strb	r2, [r3, #0]
			  // La ligne de la dame est atteinte !
			  if((isTurn == 0 && line == 7) || (isTurn == 1 && line == 0)) chessboard[line][col].isDame = 1;
 80037b2:	4b50      	ldr	r3, [pc, #320]	; (80038f4 <fonction_select+0x4f8>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <fonction_select+0x3c6>
 80037ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80037be:	2b07      	cmp	r3, #7
 80037c0:	d007      	beq.n	80037d2 <fonction_select+0x3d6>
 80037c2:	4b4c      	ldr	r3, [pc, #304]	; (80038f4 <fonction_select+0x4f8>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d116      	bne.n	80037f8 <fonction_select+0x3fc>
 80037ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d112      	bne.n	80037f8 <fonction_select+0x3fc>
 80037d2:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80037d6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80037da:	4845      	ldr	r0, [pc, #276]	; (80038f0 <fonction_select+0x4f4>)
 80037dc:	461a      	mov	r2, r3
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	441a      	add	r2, r3
 80037e2:	0053      	lsls	r3, r2, #1
 80037e4:	461a      	mov	r2, r3
 80037e6:	460b      	mov	r3, r1
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	4413      	add	r3, r2
 80037f0:	4403      	add	r3, r0
 80037f2:	3306      	adds	r3, #6
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
			  // Si le pion etait une dame, il le reste
			  if(chessboard[line_selected][col_selected].isDame == 1)
 80037f8:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 80037fc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003800:	483b      	ldr	r0, [pc, #236]	; (80038f0 <fonction_select+0x4f4>)
 8003802:	461a      	mov	r2, r3
 8003804:	0092      	lsls	r2, r2, #2
 8003806:	441a      	add	r2, r3
 8003808:	0053      	lsls	r3, r2, #1
 800380a:	461a      	mov	r2, r3
 800380c:	460b      	mov	r3, r1
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	4413      	add	r3, r2
 8003816:	4403      	add	r3, r0
 8003818:	3306      	adds	r3, #6
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d125      	bne.n	800386c <fonction_select+0x470>
			  {
				  chessboard[line][col].isDame = 1;
 8003820:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003824:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003828:	4831      	ldr	r0, [pc, #196]	; (80038f0 <fonction_select+0x4f4>)
 800382a:	461a      	mov	r2, r3
 800382c:	0092      	lsls	r2, r2, #2
 800382e:	441a      	add	r2, r3
 8003830:	0053      	lsls	r3, r2, #1
 8003832:	461a      	mov	r2, r3
 8003834:	460b      	mov	r3, r1
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	4413      	add	r3, r2
 800383e:	4403      	add	r3, r0
 8003840:	3306      	adds	r3, #6
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
				  chessboard[line_selected][col_selected].isDame = 0;
 8003846:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 800384a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800384e:	4828      	ldr	r0, [pc, #160]	; (80038f0 <fonction_select+0x4f4>)
 8003850:	461a      	mov	r2, r3
 8003852:	0092      	lsls	r2, r2, #2
 8003854:	441a      	add	r2, r3
 8003856:	0053      	lsls	r3, r2, #1
 8003858:	461a      	mov	r2, r3
 800385a:	460b      	mov	r3, r1
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	4413      	add	r3, r2
 8003864:	4403      	add	r3, r0
 8003866:	3306      	adds	r3, #6
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
			  }
			  selected = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			  change = 1;
 8003872:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <fonction_select+0x4fc>)
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]

	          // Check la fin de jeu
	          if(nb_blue == 0 || nb_white == 0)
 8003878:	4b20      	ldr	r3, [pc, #128]	; (80038fc <fonction_select+0x500>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <fonction_select+0x48c>
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <fonction_select+0x4f0>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d118      	bne.n	80038ba <fonction_select+0x4be>
	          {

	        	  osThreadDef(task_victory, fonctionVictory, osPriorityNormal, 0, 1024);
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <fonction_select+0x504>)
 800388a:	f107 0408 	add.w	r4, r7, #8
 800388e:	461d      	mov	r5, r3
 8003890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003894:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003898:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	        	  task_victoryHandle = osThreadCreate(osThread(task_victory), NULL);
 800389c:	f107 0308 	add.w	r3, r7, #8
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f009 fb2f 	bl	800cf06 <osThreadCreate>
 80038a8:	4603      	mov	r3, r0
 80038aa:	4a16      	ldr	r2, [pc, #88]	; (8003904 <fonction_select+0x508>)
 80038ac:	6013      	str	r3, [r2, #0]
				  nb_blue = 12;
 80038ae:	4b13      	ldr	r3, [pc, #76]	; (80038fc <fonction_select+0x500>)
 80038b0:	220c      	movs	r2, #12
 80038b2:	701a      	strb	r2, [r3, #0]
				  nb_white = 12;
 80038b4:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <fonction_select+0x4f0>)
 80038b6:	220c      	movs	r2, #12
 80038b8:	701a      	strb	r2, [r3, #0]
				  }
*/
	          }

			  // Changement de tour
			  isTurn = (isTurn == 0) ? 1 : 0;
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <fonction_select+0x4f8>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <fonction_select+0x4f8>)
 80038cc:	701a      	strb	r2, [r3, #0]
		  }

		  xSemaphoreGive(mutexChessboard);
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <fonction_select+0x50c>)
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	2300      	movs	r3, #0
 80038d4:	2200      	movs	r2, #0
 80038d6:	2100      	movs	r1, #0
 80038d8:	f009 fdde 	bl	800d498 <xQueueGenericSend>

	  }

    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 80038dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038e2:	4618      	mov	r0, r3
 80038e4:	f00a fc44 	bl	800e170 <vTaskDelayUntil>
	  BSP_TS_GetState(&TS_State);
 80038e8:	e5a9      	b.n	800343e <fonction_select+0x42>
 80038ea:	bf00      	nop
 80038ec:	2000002a 	.word	0x2000002a
 80038f0:	200080f8 	.word	0x200080f8
 80038f4:	2000038a 	.word	0x2000038a
 80038f8:	20000028 	.word	0x20000028
 80038fc:	20000029 	.word	0x20000029
 8003900:	0800fa4c 	.word	0x0800fa4c
 8003904:	200085f0 	.word	0x200085f0
 8003908:	20008da4 	.word	0x20008da4

0800390c <fonction_calculPossibilites>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_calculPossibilites */
void fonction_calculPossibilites(void const * argument)
{
 800390c:	b5b0      	push	{r4, r5, r7, lr}
 800390e:	b0a8      	sub	sp, #160	; 0xa0
 8003910:	af02      	add	r7, sp, #8
 8003912:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  // Recuperation information selection
	  xQueueReceive(queueSelHandle, &message, portMAX_DELAY);
 8003914:	4b84      	ldr	r3, [pc, #528]	; (8003b28 <fonction_calculPossibilites+0x21c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	4618      	mov	r0, r3
 8003922:	f009 febf 	bl	800d6a4 <xQueueReceive>
	  line = (uint8_t) (message[0] >> 8);
 8003926:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	b29b      	uxth	r3, r3
 800392e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	  col  = (uint8_t)  message[0];
 8003932:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003936:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 800393a:	4b7c      	ldr	r3, [pc, #496]	; (8003b2c <fonction_calculPossibilites+0x220>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f04f 31ff 	mov.w	r1, #4294967295
 8003942:	4618      	mov	r0, r3
 8003944:	f009 ff94 	bl	800d870 <xQueueSemaphoreTake>
	  color  = chessboard[line][col].piece_color;
 8003948:	f897 1093 	ldrb.w	r1, [r7, #147]	; 0x93
 800394c:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8003950:	4877      	ldr	r0, [pc, #476]	; (8003b30 <fonction_calculPossibilites+0x224>)
 8003952:	461a      	mov	r2, r3
 8003954:	0092      	lsls	r2, r2, #2
 8003956:	441a      	add	r2, r3
 8003958:	0053      	lsls	r3, r2, #1
 800395a:	461a      	mov	r2, r3
 800395c:	460b      	mov	r3, r1
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	4413      	add	r3, r2
 8003966:	4403      	add	r3, r0
 8003968:	3307      	adds	r3, #7
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	  isDame = chessboard[line][col].isDame;
 8003970:	f897 1093 	ldrb.w	r1, [r7, #147]	; 0x93
 8003974:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8003978:	486d      	ldr	r0, [pc, #436]	; (8003b30 <fonction_calculPossibilites+0x224>)
 800397a:	461a      	mov	r2, r3
 800397c:	0092      	lsls	r2, r2, #2
 800397e:	441a      	add	r2, r3
 8003980:	0053      	lsls	r3, r2, #1
 8003982:	461a      	mov	r2, r3
 8003984:	460b      	mov	r3, r1
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	4413      	add	r3, r2
 800398e:	4403      	add	r3, r0
 8003990:	3306      	adds	r3, #6
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  xSemaphoreGive(mutexChessboard);
 8003998:	4b64      	ldr	r3, [pc, #400]	; (8003b2c <fonction_calculPossibilites+0x220>)
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	2300      	movs	r3, #0
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	f009 fd79 	bl	800d498 <xQueueGenericSend>

	  // Calcul des possibilites
	  	  // Reinitialisation des cases mangees possibles
	  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 80039a6:	4b61      	ldr	r3, [pc, #388]	; (8003b2c <fonction_calculPossibilites+0x220>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f04f 31ff 	mov.w	r1, #4294967295
 80039ae:	4618      	mov	r0, r3
 80039b0:	f009 ff5e 	bl	800d870 <xQueueSemaphoreTake>
	  for(m = 0; m < 32; m++)
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80039ba:	e02c      	b.n	8003a16 <fonction_calculPossibilites+0x10a>
	  {
		  for(n = 0; n < 12; n++)
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 80039c2:	e01f      	b.n	8003a04 <fonction_calculPossibilites+0xf8>
		  {
			  possible_eaten[m][n].colonne = 8;
 80039c4:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 80039c8:	f897 1094 	ldrb.w	r1, [r7, #148]	; 0x94
 80039cc:	4859      	ldr	r0, [pc, #356]	; (8003b34 <fonction_calculPossibilites+0x228>)
 80039ce:	4613      	mov	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4403      	add	r3, r0
 80039dc:	2208      	movs	r2, #8
 80039de:	805a      	strh	r2, [r3, #2]
			  possible_eaten[m][n].ligne   = 8;
 80039e0:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 80039e4:	f897 1094 	ldrb.w	r1, [r7, #148]	; 0x94
 80039e8:	4852      	ldr	r0, [pc, #328]	; (8003b34 <fonction_calculPossibilites+0x228>)
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	2208      	movs	r2, #8
 80039f6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
		  for(n = 0; n < 12; n++)
 80039fa:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80039fe:	3301      	adds	r3, #1
 8003a00:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8003a04:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8003a08:	2b0b      	cmp	r3, #11
 8003a0a:	d9db      	bls.n	80039c4 <fonction_calculPossibilites+0xb8>
	  for(m = 0; m < 32; m++)
 8003a0c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003a10:	3301      	adds	r3, #1
 8003a12:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8003a16:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003a1a:	2b1f      	cmp	r3, #31
 8003a1c:	d9ce      	bls.n	80039bc <fonction_calculPossibilites+0xb0>
		  }
	  }
	  xSemaphoreGive(mutexChessboard);
 8003a1e:	4b43      	ldr	r3, [pc, #268]	; (8003b2c <fonction_calculPossibilites+0x220>)
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	2300      	movs	r3, #0
 8003a24:	2200      	movs	r2, #0
 8003a26:	2100      	movs	r1, #0
 8003a28:	f009 fd36 	bl	800d498 <xQueueGenericSend>
	  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 8003a2c:	4b3f      	ldr	r3, [pc, #252]	; (8003b2c <fonction_calculPossibilites+0x220>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f04f 31ff 	mov.w	r1, #4294967295
 8003a34:	4618      	mov	r0, r3
 8003a36:	f009 ff1b 	bl	800d870 <xQueueSemaphoreTake>
	  	  // Calcul des possibilites
	  if(isDame == 0) length = calculPossibilitesRec(line, col, color, possibilites, 0, 0);
 8003a3a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d114      	bne.n	8003a6c <fonction_calculPossibilites+0x160>
 8003a42:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8003a46:	b298      	uxth	r0, r3
 8003a48:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8003a4c:	b299      	uxth	r1, r3
 8003a4e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	f107 030c 	add.w	r3, r7, #12
 8003a58:	2400      	movs	r4, #0
 8003a5a:	9401      	str	r4, [sp, #4]
 8003a5c:	2400      	movs	r4, #0
 8003a5e:	9400      	str	r4, [sp, #0]
 8003a60:	f7fd f878 	bl	8000b54 <calculPossibilitesRec>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003a6a:	e00f      	b.n	8003a8c <fonction_calculPossibilites+0x180>
	  else 			  length = calculPossibilitesDame(line, col, color, possibilites);
 8003a6c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8003a70:	b298      	uxth	r0, r3
 8003a72:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8003a76:	b299      	uxth	r1, r3
 8003a78:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	f107 030c 	add.w	r3, r7, #12
 8003a82:	f7fd fdc5 	bl	8001610 <calculPossibilitesDame>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	  xSemaphoreGive(mutexChessboard);
 8003a8c:	4b27      	ldr	r3, [pc, #156]	; (8003b2c <fonction_calculPossibilites+0x220>)
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	2300      	movs	r3, #0
 8003a92:	2200      	movs	r2, #0
 8003a94:	2100      	movs	r1, #0
 8003a96:	f009 fcff 	bl	800d498 <xQueueGenericSend>

	  // Modification de l'echiquier avec cases possibles
	  xSemaphoreTake(mutexChessboard, portMAX_DELAY);
 8003a9a:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <fonction_calculPossibilites+0x220>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f009 fee4 	bl	800d870 <xQueueSemaphoreTake>
	  for(i = 0; i < length; i++)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003aae:	e029      	b.n	8003b04 <fonction_calculPossibilites+0x1f8>
	  {
		  chessboard[possibilites[i].ligne][possibilites[i].colonne].isPossible = i + 1;
 8003ab0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003aba:	4413      	add	r3, r2
 8003abc:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003acc:	4413      	add	r3, r2
 8003ace:	f833 3c8a 	ldrh.w	r3, [r3, #-138]
 8003ad2:	461c      	mov	r4, r3
 8003ad4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003ad8:	3301      	adds	r3, #1
 8003ada:	b2dd      	uxtb	r5, r3
 8003adc:	4914      	ldr	r1, [pc, #80]	; (8003b30 <fonction_calculPossibilites+0x224>)
 8003ade:	4622      	mov	r2, r4
 8003ae0:	0092      	lsls	r2, r2, #2
 8003ae2:	4422      	add	r2, r4
 8003ae4:	0053      	lsls	r3, r2, #1
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	4603      	mov	r3, r0
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4403      	add	r3, r0
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	4413      	add	r3, r2
 8003af2:	440b      	add	r3, r1
 8003af4:	3304      	adds	r3, #4
 8003af6:	462a      	mov	r2, r5
 8003af8:	701a      	strb	r2, [r3, #0]
	  for(i = 0; i < length; i++)
 8003afa:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8003afe:	3301      	adds	r3, #1
 8003b00:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8003b04:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8003b08:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d3cf      	bcc.n	8003ab0 <fonction_calculPossibilites+0x1a4>
	  }
	  xSemaphoreGive(mutexChessboard);
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <fonction_calculPossibilites+0x220>)
 8003b12:	6818      	ldr	r0, [r3, #0]
 8003b14:	2300      	movs	r3, #0
 8003b16:	2200      	movs	r2, #0
 8003b18:	2100      	movs	r1, #0
 8003b1a:	f009 fcbd 	bl	800d498 <xQueueGenericSend>
      osDelay(1);
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f009 fa49 	bl	800cfb6 <osDelay>
	  xQueueReceive(queueSelHandle, &message, portMAX_DELAY);
 8003b24:	e6f6      	b.n	8003914 <fonction_calculPossibilites+0x8>
 8003b26:	bf00      	nop
 8003b28:	200080a8 	.word	0x200080a8
 8003b2c:	20008da4 	.word	0x20008da4
 8003b30:	200080f8 	.word	0x200080f8
 8003b34:	20008614 	.word	0x20008614

08003b38 <fonctionVictory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonctionVictory */
void fonctionVictory(void const * argument)
{
 8003b38:	b5b0      	push	{r4, r5, r7, lr}
 8003b3a:	b08c      	sub	sp, #48	; 0x30
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonctionVictory */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 8003b40:	2364      	movs	r3, #100	; 0x64
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t init = 1;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	static TS_StateTypeDef TS_State;
  /* Infinite loop */
  for(;;)
  {
	  if (init == 1)
 8003b4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d107      	bne.n	8003b62 <fonctionVictory+0x2a>
	  {
		  osThreadTerminate(affichageHandle);
 8003b52:	4b43      	ldr	r3, [pc, #268]	; (8003c60 <fonctionVictory+0x128>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f009 fa21 	bl	800cf9e <osThreadTerminate>
		  init = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  }
	  BSP_LCD_SelectLayer(0);
 8003b62:	2000      	movs	r0, #0
 8003b64:	f000 fb4c 	bl	8004200 <BSP_LCD_SelectLayer>
	  if (isTurn == 1)
 8003b68:	4b3e      	ldr	r3, [pc, #248]	; (8003c64 <fonctionVictory+0x12c>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d121      	bne.n	8003bb4 <fonctionVictory+0x7c>
	  {
		  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003b70:	f04f 30ff 	mov.w	r0, #4294967295
 8003b74:	f000 fbb6 	bl	80042e4 <BSP_LCD_Clear>
		  BSP_LCD_SelectLayer(1);
 8003b78:	2001      	movs	r0, #1
 8003b7a:	f000 fb41 	bl	8004200 <BSP_LCD_SelectLayer>
		  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b82:	f000 fbaf 	bl	80042e4 <BSP_LCD_Clear>
		  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003b86:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8003b8a:	f000 fb49 	bl	8004220 <BSP_LCD_SetTextColor>
		  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b92:	f000 fb5d 	bl	8004250 <BSP_LCD_SetBackColor>
		  BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"VICTOIRE des BLANCS !");
 8003b96:	4934      	ldr	r1, [pc, #208]	; (8003c68 <fonctionVictory+0x130>)
 8003b98:	200a      	movs	r0, #10
 8003b9a:	f000 fcd7 	bl	800454c <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine(12, (uint8_t *)"Felicitations au gagnant !");
 8003b9e:	4933      	ldr	r1, [pc, #204]	; (8003c6c <fonctionVictory+0x134>)
 8003ba0:	200c      	movs	r0, #12
 8003ba2:	f000 fcd3 	bl	800454c <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003ba6:	4832      	ldr	r0, [pc, #200]	; (8003c70 <fonctionVictory+0x138>)
 8003ba8:	f000 fb3a 	bl	8004220 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"Touchez l'ecran pour rejouer");
 8003bac:	4931      	ldr	r1, [pc, #196]	; (8003c74 <fonctionVictory+0x13c>)
 8003bae:	200e      	movs	r0, #14
 8003bb0:	f000 fccc 	bl	800454c <BSP_LCD_DisplayStringAtLine>
	  }
	  if (isTurn == 0)
 8003bb4:	4b2b      	ldr	r3, [pc, #172]	; (8003c64 <fonctionVictory+0x12c>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d12d      	bne.n	8003c18 <fonctionVictory+0xe0>
	  {
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8003bbc:	482e      	ldr	r0, [pc, #184]	; (8003c78 <fonctionVictory+0x140>)
 8003bbe:	f000 fb91 	bl	80042e4 <BSP_LCD_Clear>
		  BSP_LCD_SelectLayer(1);
 8003bc2:	2001      	movs	r0, #1
 8003bc4:	f000 fb1c 	bl	8004200 <BSP_LCD_SelectLayer>
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8003bc8:	482b      	ldr	r0, [pc, #172]	; (8003c78 <fonctionVictory+0x140>)
 8003bca:	f000 fb8b 	bl	80042e4 <BSP_LCD_Clear>
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8003bce:	482a      	ldr	r0, [pc, #168]	; (8003c78 <fonctionVictory+0x140>)
 8003bd0:	f000 fb88 	bl	80042e4 <BSP_LCD_Clear>
		  BSP_LCD_SelectLayer(1);
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f000 fb13 	bl	8004200 <BSP_LCD_SelectLayer>
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8003bda:	4827      	ldr	r0, [pc, #156]	; (8003c78 <fonctionVictory+0x140>)
 8003bdc:	f000 fb82 	bl	80042e4 <BSP_LCD_Clear>
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	f000 fb1c 	bl	8004220 <BSP_LCD_SetTextColor>
		  BSP_LCD_DisplayStringAtLine(10, (uint8_t *)"VICTOIRE des BLEUS !");
 8003be8:	4924      	ldr	r1, [pc, #144]	; (8003c7c <fonctionVictory+0x144>)
 8003bea:	200a      	movs	r0, #10
 8003bec:	f000 fcae 	bl	800454c <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine(12, (uint8_t *)"Felicitations au gagnant !");
 8003bf0:	491e      	ldr	r1, [pc, #120]	; (8003c6c <fonctionVictory+0x134>)
 8003bf2:	200c      	movs	r0, #12
 8003bf4:	f000 fcaa 	bl	800454c <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8003bf8:	481d      	ldr	r0, [pc, #116]	; (8003c70 <fonctionVictory+0x138>)
 8003bfa:	f000 fb11 	bl	8004220 <BSP_LCD_SetTextColor>
		  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8003bfe:	481e      	ldr	r0, [pc, #120]	; (8003c78 <fonctionVictory+0x140>)
 8003c00:	f000 fb26 	bl	8004250 <BSP_LCD_SetBackColor>
		  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"Touchez l'ecran pour rejouer");
 8003c04:	491b      	ldr	r1, [pc, #108]	; (8003c74 <fonctionVictory+0x13c>)
 8003c06:	200e      	movs	r0, #14
 8003c08:	f000 fca0 	bl	800454c <BSP_LCD_DisplayStringAtLine>
		  nb_blue = 1;
 8003c0c:	4b1c      	ldr	r3, [pc, #112]	; (8003c80 <fonctionVictory+0x148>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
		  nb_white = 1;
 8003c12:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <fonctionVictory+0x14c>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
	  }
	  BSP_TS_GetState(&TS_State);
 8003c18:	481b      	ldr	r0, [pc, #108]	; (8003c88 <fonctionVictory+0x150>)
 8003c1a:	f001 fc8b 	bl	8005534 <BSP_TS_GetState>
	  if(TS_State.touchDetected)
 8003c1e:	4b1a      	ldr	r3, [pc, #104]	; (8003c88 <fonctionVictory+0x150>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d015      	beq.n	8003c52 <fonctionVictory+0x11a>
	  {
		  victory = 1;
 8003c26:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <fonctionVictory+0x154>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	701a      	strb	r2, [r3, #0]
		  osThreadDef(task_init, fonction_init, osPriorityHigh, 0, 1024);
 8003c2c:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <fonctionVictory+0x158>)
 8003c2e:	f107 0408 	add.w	r4, r7, #8
 8003c32:	461d      	mov	r5, r3
 8003c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  task_initHandle = osThreadCreate(osThread(task_init), NULL);
 8003c40:	f107 0308 	add.w	r3, r7, #8
 8003c44:	2100      	movs	r1, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f009 f95d 	bl	800cf06 <osThreadCreate>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4a11      	ldr	r2, [pc, #68]	; (8003c94 <fonctionVictory+0x15c>)
 8003c50:	6013      	str	r3, [r2, #0]
	  }
	  vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 8003c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f00a fa89 	bl	800e170 <vTaskDelayUntil>
	  if (init == 1)
 8003c5e:	e774      	b.n	8003b4a <fonctionVictory+0x12>
 8003c60:	20008508 	.word	0x20008508
 8003c64:	2000038a 	.word	0x2000038a
 8003c68:	0800fa98 	.word	0x0800fa98
 8003c6c:	0800fab0 	.word	0x0800fab0
 8003c70:	ffff0000 	.word	0xffff0000
 8003c74:	0800facc 	.word	0x0800facc
 8003c78:	ff0000ff 	.word	0xff0000ff
 8003c7c:	0800faec 	.word	0x0800faec
 8003c80:	20000029 	.word	0x20000029
 8003c84:	2000002a 	.word	0x2000002a
 8003c88:	200003b8 	.word	0x200003b8
 8003c8c:	2000038b 	.word	0x2000038b
 8003c90:	0800f9dc 	.word	0x0800f9dc
 8003c94:	20008058 	.word	0x20008058

08003c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003caa:	f002 fd53 	bl	8006754 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40001000 	.word	0x40001000

08003cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc0:	b672      	cpsid	i
}
 8003cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cc4:	e7fe      	b.n	8003cc4 <Error_Handler+0x8>
	...

08003cc8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08c      	sub	sp, #48	; 0x30
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a51      	ldr	r2, [pc, #324]	; (8003e18 <I2Cx_MspInit+0x150>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d14d      	bne.n	8003d74 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003cd8:	4b50      	ldr	r3, [pc, #320]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	4a4f      	ldr	r2, [pc, #316]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce4:	4b4d      	ldr	r3, [pc, #308]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003cf0:	2380      	movs	r3, #128	; 0x80
 8003cf2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003cf4:	2312      	movs	r3, #18
 8003cf6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003d00:	2304      	movs	r3, #4
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003d04:	f107 031c 	add.w	r3, r7, #28
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4845      	ldr	r0, [pc, #276]	; (8003e20 <I2Cx_MspInit+0x158>)
 8003d0c:	f004 f876 	bl	8007dfc <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003d16:	f107 031c 	add.w	r3, r7, #28
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4840      	ldr	r0, [pc, #256]	; (8003e20 <I2Cx_MspInit+0x158>)
 8003d1e:	f004 f86d 	bl	8007dfc <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003d22:	4b3e      	ldr	r3, [pc, #248]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	4a3d      	ldr	r2, [pc, #244]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003d28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2e:	4b3b      	ldr	r3, [pc, #236]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003d3a:	4b38      	ldr	r3, [pc, #224]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	4a37      	ldr	r2, [pc, #220]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003d40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d44:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003d46:	4b35      	ldr	r3, [pc, #212]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	4a34      	ldr	r2, [pc, #208]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003d4c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d50:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003d52:	2200      	movs	r2, #0
 8003d54:	210f      	movs	r1, #15
 8003d56:	2048      	movs	r0, #72	; 0x48
 8003d58:	f003 f95a 	bl	8007010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003d5c:	2048      	movs	r0, #72	; 0x48
 8003d5e:	f003 f973 	bl	8007048 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003d62:	2200      	movs	r2, #0
 8003d64:	210f      	movs	r1, #15
 8003d66:	2049      	movs	r0, #73	; 0x49
 8003d68:	f003 f952 	bl	8007010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003d6c:	2049      	movs	r0, #73	; 0x49
 8003d6e:	f003 f96b 	bl	8007048 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003d72:	e04d      	b.n	8003e10 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003d74:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	4a28      	ldr	r2, [pc, #160]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003d7a:	f043 0302 	orr.w	r3, r3, #2
 8003d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d80:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d90:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003d92:	2312      	movs	r3, #18
 8003d94:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003d9e:	2304      	movs	r3, #4
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003da2:	f107 031c 	add.w	r3, r7, #28
 8003da6:	4619      	mov	r1, r3
 8003da8:	481e      	ldr	r0, [pc, #120]	; (8003e24 <I2Cx_MspInit+0x15c>)
 8003daa:	f004 f827 	bl	8007dfc <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003db4:	f107 031c 	add.w	r3, r7, #28
 8003db8:	4619      	mov	r1, r3
 8003dba:	481a      	ldr	r0, [pc, #104]	; (8003e24 <I2Cx_MspInit+0x15c>)
 8003dbc:	f004 f81e 	bl	8007dfc <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003dc0:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	4a15      	ldr	r2, [pc, #84]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003dc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dca:	6413      	str	r3, [r2, #64]	; 0x40
 8003dcc:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	4a0f      	ldr	r2, [pc, #60]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003dde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003de2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003de4:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	4a0c      	ldr	r2, [pc, #48]	; (8003e1c <I2Cx_MspInit+0x154>)
 8003dea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dee:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003df0:	2200      	movs	r2, #0
 8003df2:	210f      	movs	r1, #15
 8003df4:	201f      	movs	r0, #31
 8003df6:	f003 f90b 	bl	8007010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003dfa:	201f      	movs	r0, #31
 8003dfc:	f003 f924 	bl	8007048 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003e00:	2200      	movs	r2, #0
 8003e02:	210f      	movs	r1, #15
 8003e04:	2020      	movs	r0, #32
 8003e06:	f003 f903 	bl	8007010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003e0a:	2020      	movs	r0, #32
 8003e0c:	f003 f91c 	bl	8007048 <HAL_NVIC_EnableIRQ>
}
 8003e10:	bf00      	nop
 8003e12:	3730      	adds	r7, #48	; 0x30
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	200003e4 	.word	0x200003e4
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	40021c00 	.word	0x40021c00
 8003e24:	40020400 	.word	0x40020400

08003e28 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f004 fdd5 	bl	80089e0 <HAL_I2C_GetState>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d125      	bne.n	8003e88 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <I2Cx_Init+0x68>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d103      	bne.n	8003e4c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <I2Cx_Init+0x6c>)
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e002      	b.n	8003e52 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <I2Cx_Init+0x70>)
 8003e50:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <I2Cx_Init+0x74>)
 8003e56:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ff23 	bl	8003cc8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f004 fabe 	bl	8008404 <HAL_I2C_Init>
  }
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	200003e4 	.word	0x200003e4
 8003e94:	40005c00 	.word	0x40005c00
 8003e98:	40005400 	.word	0x40005400
 8003e9c:	40912732 	.word	0x40912732

08003ea0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	; 0x28
 8003ea4:	af04      	add	r7, sp, #16
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	72fb      	strb	r3, [r7, #11]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	813b      	strh	r3, [r7, #8]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003ebe:	7afb      	ldrb	r3, [r7, #11]
 8003ec0:	b299      	uxth	r1, r3
 8003ec2:	88f8      	ldrh	r0, [r7, #6]
 8003ec4:	893a      	ldrh	r2, [r7, #8]
 8003ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eca:	9302      	str	r3, [sp, #8]
 8003ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f004 fc68 	bl	80087ac <HAL_I2C_Mem_Read>
 8003edc:	4603      	mov	r3, r0
 8003ede:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d004      	beq.n	8003ef0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f832 	bl	8003f54 <I2Cx_Error>
  }
  return status;    
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b08a      	sub	sp, #40	; 0x28
 8003efe:	af04      	add	r7, sp, #16
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	4608      	mov	r0, r1
 8003f04:	4611      	mov	r1, r2
 8003f06:	461a      	mov	r2, r3
 8003f08:	4603      	mov	r3, r0
 8003f0a:	72fb      	strb	r3, [r7, #11]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	813b      	strh	r3, [r7, #8]
 8003f10:	4613      	mov	r3, r2
 8003f12:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003f18:	7afb      	ldrb	r3, [r7, #11]
 8003f1a:	b299      	uxth	r1, r3
 8003f1c:	88f8      	ldrh	r0, [r7, #6]
 8003f1e:	893a      	ldrh	r2, [r7, #8]
 8003f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f24:	9302      	str	r3, [sp, #8]
 8003f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	4603      	mov	r3, r0
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f004 fb27 	bl	8008584 <HAL_I2C_Mem_Write>
 8003f36:	4603      	mov	r3, r0
 8003f38:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d004      	beq.n	8003f4a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003f40:	7afb      	ldrb	r3, [r7, #11]
 8003f42:	4619      	mov	r1, r3
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f805 	bl	8003f54 <I2Cx_Error>
  }
  return status;
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f004 fadf 	bl	8008524 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ff5e 	bl	8003e28 <I2Cx_Init>
}
 8003f6c:	bf00      	nop
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003f78:	4802      	ldr	r0, [pc, #8]	; (8003f84 <TS_IO_Init+0x10>)
 8003f7a:	f7ff ff55 	bl	8003e28 <I2Cx_Init>
}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200003e4 	.word	0x200003e4

08003f88 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	4603      	mov	r3, r0
 8003f90:	71fb      	strb	r3, [r7, #7]
 8003f92:	460b      	mov	r3, r1
 8003f94:	71bb      	strb	r3, [r7, #6]
 8003f96:	4613      	mov	r3, r2
 8003f98:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003f9a:	79bb      	ldrb	r3, [r7, #6]
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	79f9      	ldrb	r1, [r7, #7]
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	1d7b      	adds	r3, r7, #5
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	2301      	movs	r3, #1
 8003faa:	4803      	ldr	r0, [pc, #12]	; (8003fb8 <TS_IO_Write+0x30>)
 8003fac:	f7ff ffa5 	bl	8003efa <I2Cx_WriteMultiple>
}
 8003fb0:	bf00      	nop
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	200003e4 	.word	0x200003e4

08003fbc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	460a      	mov	r2, r1
 8003fc6:	71fb      	strb	r3, [r7, #7]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003fd0:	79bb      	ldrb	r3, [r7, #6]
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	79f9      	ldrb	r1, [r7, #7]
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	f107 030f 	add.w	r3, r7, #15
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	4804      	ldr	r0, [pc, #16]	; (8003ff4 <TS_IO_Read+0x38>)
 8003fe4:	f7ff ff5c 	bl	8003ea0 <I2Cx_ReadMultiple>

  return read_value;
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	200003e4 	.word	0x200003e4

08003ff8 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f002 fbc7 	bl	8006794 <HAL_Delay>
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8004014:	4b31      	ldr	r3, [pc, #196]	; (80040dc <BSP_LCD_Init+0xcc>)
 8004016:	2228      	movs	r2, #40	; 0x28
 8004018:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800401a:	4b30      	ldr	r3, [pc, #192]	; (80040dc <BSP_LCD_Init+0xcc>)
 800401c:	2209      	movs	r2, #9
 800401e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004020:	4b2e      	ldr	r3, [pc, #184]	; (80040dc <BSP_LCD_Init+0xcc>)
 8004022:	2235      	movs	r2, #53	; 0x35
 8004024:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8004026:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <BSP_LCD_Init+0xcc>)
 8004028:	220b      	movs	r2, #11
 800402a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800402c:	4b2b      	ldr	r3, [pc, #172]	; (80040dc <BSP_LCD_Init+0xcc>)
 800402e:	f240 121b 	movw	r2, #283	; 0x11b
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8004034:	4b29      	ldr	r3, [pc, #164]	; (80040dc <BSP_LCD_Init+0xcc>)
 8004036:	f240 2215 	movw	r2, #533	; 0x215
 800403a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800403c:	4b27      	ldr	r3, [pc, #156]	; (80040dc <BSP_LCD_Init+0xcc>)
 800403e:	f240 121d 	movw	r2, #285	; 0x11d
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8004044:	4b25      	ldr	r3, [pc, #148]	; (80040dc <BSP_LCD_Init+0xcc>)
 8004046:	f240 2235 	movw	r2, #565	; 0x235
 800404a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800404c:	2100      	movs	r1, #0
 800404e:	4823      	ldr	r0, [pc, #140]	; (80040dc <BSP_LCD_Init+0xcc>)
 8004050:	f000 fee8 	bl	8004e24 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8004054:	4b21      	ldr	r3, [pc, #132]	; (80040dc <BSP_LCD_Init+0xcc>)
 8004056:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800405a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800405c:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <BSP_LCD_Init+0xcc>)
 800405e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8004062:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8004064:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <BSP_LCD_Init+0xcc>)
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800406c:	4b1b      	ldr	r3, [pc, #108]	; (80040dc <BSP_LCD_Init+0xcc>)
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8004074:	4b19      	ldr	r3, [pc, #100]	; (80040dc <BSP_LCD_Init+0xcc>)
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800407c:	4b17      	ldr	r3, [pc, #92]	; (80040dc <BSP_LCD_Init+0xcc>)
 800407e:	2200      	movs	r2, #0
 8004080:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8004082:	4b16      	ldr	r3, [pc, #88]	; (80040dc <BSP_LCD_Init+0xcc>)
 8004084:	2200      	movs	r2, #0
 8004086:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8004088:	4b14      	ldr	r3, [pc, #80]	; (80040dc <BSP_LCD_Init+0xcc>)
 800408a:	2200      	movs	r2, #0
 800408c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800408e:	4b13      	ldr	r3, [pc, #76]	; (80040dc <BSP_LCD_Init+0xcc>)
 8004090:	2200      	movs	r2, #0
 8004092:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8004094:	4b11      	ldr	r3, [pc, #68]	; (80040dc <BSP_LCD_Init+0xcc>)
 8004096:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <BSP_LCD_Init+0xd0>)
 8004098:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800409a:	4810      	ldr	r0, [pc, #64]	; (80040dc <BSP_LCD_Init+0xcc>)
 800409c:	f005 f9bc 	bl	8009418 <HAL_LTDC_GetState>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d103      	bne.n	80040ae <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80040a6:	2100      	movs	r1, #0
 80040a8:	480c      	ldr	r0, [pc, #48]	; (80040dc <BSP_LCD_Init+0xcc>)
 80040aa:	f000 fde1 	bl	8004c70 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80040ae:	480b      	ldr	r0, [pc, #44]	; (80040dc <BSP_LCD_Init+0xcc>)
 80040b0:	f004 ffe2 	bl	8009078 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80040b4:	2201      	movs	r2, #1
 80040b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040ba:	480a      	ldr	r0, [pc, #40]	; (80040e4 <BSP_LCD_Init+0xd4>)
 80040bc:	f004 f956 	bl	800836c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80040c0:	2201      	movs	r2, #1
 80040c2:	2108      	movs	r1, #8
 80040c4:	4808      	ldr	r0, [pc, #32]	; (80040e8 <BSP_LCD_Init+0xd8>)
 80040c6:	f004 f951 	bl	800836c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80040ca:	f001 f80f 	bl	80050ec <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80040ce:	4807      	ldr	r0, [pc, #28]	; (80040ec <BSP_LCD_Init+0xdc>)
 80040d0:	f000 f8d8 	bl	8004284 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20008da8 	.word	0x20008da8
 80040e0:	40016800 	.word	0x40016800
 80040e4:	40022000 	.word	0x40022000
 80040e8:	40022800 	.word	0x40022800
 80040ec:	2000002c 	.word	0x2000002c

080040f0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <BSP_LCD_GetXSize+0x20>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a06      	ldr	r2, [pc, #24]	; (8004114 <BSP_LCD_GetXSize+0x24>)
 80040fa:	2134      	movs	r1, #52	; 0x34
 80040fc:	fb01 f303 	mul.w	r3, r1, r3
 8004100:	4413      	add	r3, r2
 8004102:	3360      	adds	r3, #96	; 0x60
 8004104:	681b      	ldr	r3, [r3, #0]
}
 8004106:	4618      	mov	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	20000470 	.word	0x20000470
 8004114:	20008da8 	.word	0x20008da8

08004118 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <BSP_LCD_GetYSize+0x20>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a06      	ldr	r2, [pc, #24]	; (800413c <BSP_LCD_GetYSize+0x24>)
 8004122:	2134      	movs	r1, #52	; 0x34
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	4413      	add	r3, r2
 800412a:	3364      	adds	r3, #100	; 0x64
 800412c:	681b      	ldr	r3, [r3, #0]
}
 800412e:	4618      	mov	r0, r3
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	20000470 	.word	0x20000470
 800413c:	20008da8 	.word	0x20008da8

08004140 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8004140:	b580      	push	{r7, lr}
 8004142:	b090      	sub	sp, #64	; 0x40
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	6039      	str	r1, [r7, #0]
 800414a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8004150:	f7ff ffce 	bl	80040f0 <BSP_LCD_GetXSize>
 8004154:	4603      	mov	r3, r0
 8004156:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800415c:	f7ff ffdc 	bl	8004118 <BSP_LCD_GetYSize>
 8004160:	4603      	mov	r3, r0
 8004162:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800416c:	23ff      	movs	r3, #255	; 0xff
 800416e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8004170:	2300      	movs	r3, #0
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8004174:	2300      	movs	r3, #0
 8004176:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8004180:	2300      	movs	r3, #0
 8004182:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8004186:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800418c:	2307      	movs	r3, #7
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8004190:	f7ff ffae 	bl	80040f0 <BSP_LCD_GetXSize>
 8004194:	4603      	mov	r3, r0
 8004196:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8004198:	f7ff ffbe 	bl	8004118 <BSP_LCD_GetYSize>
 800419c:	4603      	mov	r3, r0
 800419e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80041a0:	88fa      	ldrh	r2, [r7, #6]
 80041a2:	f107 030c 	add.w	r3, r7, #12
 80041a6:	4619      	mov	r1, r3
 80041a8:	4812      	ldr	r0, [pc, #72]	; (80041f4 <BSP_LCD_LayerDefaultInit+0xb4>)
 80041aa:	f005 f8f7 	bl	800939c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80041ae:	88fa      	ldrh	r2, [r7, #6]
 80041b0:	4911      	ldr	r1, [pc, #68]	; (80041f8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80041b2:	4613      	mov	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	3304      	adds	r3, #4
 80041be:	f04f 32ff 	mov.w	r2, #4294967295
 80041c2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80041c4:	88fa      	ldrh	r2, [r7, #6]
 80041c6:	490c      	ldr	r1, [pc, #48]	; (80041f8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	3308      	adds	r3, #8
 80041d4:	4a09      	ldr	r2, [pc, #36]	; (80041fc <BSP_LCD_LayerDefaultInit+0xbc>)
 80041d6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80041d8:	88fa      	ldrh	r2, [r7, #6]
 80041da:	4907      	ldr	r1, [pc, #28]	; (80041f8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80041dc:	4613      	mov	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80041ea:	601a      	str	r2, [r3, #0]
}
 80041ec:	bf00      	nop
 80041ee:	3740      	adds	r7, #64	; 0x40
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20008da8 	.word	0x20008da8
 80041f8:	20000474 	.word	0x20000474
 80041fc:	2000002c 	.word	0x2000002c

08004200 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004208:	4a04      	ldr	r2, [pc, #16]	; (800421c <BSP_LCD_SelectLayer+0x1c>)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6013      	str	r3, [r2, #0]
} 
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000470 	.word	0x20000470

08004220 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <BSP_LCD_SetTextColor+0x28>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4907      	ldr	r1, [pc, #28]	; (800424c <BSP_LCD_SetTextColor+0x2c>)
 800422e:	4613      	mov	r3, r2
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	601a      	str	r2, [r3, #0]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	20000470 	.word	0x20000470
 800424c:	20000474 	.word	0x20000474

08004250 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004258:	4b08      	ldr	r3, [pc, #32]	; (800427c <BSP_LCD_SetBackColor+0x2c>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4908      	ldr	r1, [pc, #32]	; (8004280 <BSP_LCD_SetBackColor+0x30>)
 800425e:	4613      	mov	r3, r2
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	3304      	adds	r3, #4
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	601a      	str	r2, [r3, #0]
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000470 	.word	0x20000470
 8004280:	20000474 	.word	0x20000474

08004284 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800428c:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <BSP_LCD_SetFont+0x2c>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4908      	ldr	r1, [pc, #32]	; (80042b4 <BSP_LCD_SetFont+0x30>)
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	3308      	adds	r3, #8
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	601a      	str	r2, [r3, #0]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000470 	.word	0x20000470
 80042b4:	20000474 	.word	0x20000474

080042b8 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80042bc:	4b07      	ldr	r3, [pc, #28]	; (80042dc <BSP_LCD_GetFont+0x24>)
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4907      	ldr	r1, [pc, #28]	; (80042e0 <BSP_LCD_GetFont+0x28>)
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	3308      	adds	r3, #8
 80042ce:	681b      	ldr	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20000470 	.word	0x20000470
 80042e0:	20000474 	.word	0x20000474

080042e4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80042e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <BSP_LCD_Clear+0x48>)
 80042ee:	681c      	ldr	r4, [r3, #0]
 80042f0:	4b0e      	ldr	r3, [pc, #56]	; (800432c <BSP_LCD_Clear+0x48>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a0e      	ldr	r2, [pc, #56]	; (8004330 <BSP_LCD_Clear+0x4c>)
 80042f6:	2134      	movs	r1, #52	; 0x34
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	4413      	add	r3, r2
 80042fe:	335c      	adds	r3, #92	; 0x5c
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	461e      	mov	r6, r3
 8004304:	f7ff fef4 	bl	80040f0 <BSP_LCD_GetXSize>
 8004308:	4605      	mov	r5, r0
 800430a:	f7ff ff05 	bl	8004118 <BSP_LCD_GetYSize>
 800430e:	4602      	mov	r2, r0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	2300      	movs	r3, #0
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	4613      	mov	r3, r2
 800431a:	462a      	mov	r2, r5
 800431c:	4631      	mov	r1, r6
 800431e:	4620      	mov	r0, r4
 8004320:	f000 fe54 	bl	8004fcc <LL_FillBuffer>
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800432c:	20000470 	.word	0x20000470
 8004330:	20008da8 	.word	0x20008da8

08004334 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004334:	b590      	push	{r4, r7, lr}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	80fb      	strh	r3, [r7, #6]
 800433e:	460b      	mov	r3, r1
 8004340:	80bb      	strh	r3, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004346:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <BSP_LCD_DisplayChar+0x80>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	491b      	ldr	r1, [pc, #108]	; (80043b8 <BSP_LCD_DisplayChar+0x84>)
 800434c:	4613      	mov	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	3308      	adds	r3, #8
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004362:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <BSP_LCD_DisplayChar+0x80>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4c14      	ldr	r4, [pc, #80]	; (80043b8 <BSP_LCD_DisplayChar+0x84>)
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4423      	add	r3, r4
 8004372:	3308      	adds	r3, #8
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004378:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800437c:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <BSP_LCD_DisplayChar+0x80>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4c0d      	ldr	r4, [pc, #52]	; (80043b8 <BSP_LCD_DisplayChar+0x84>)
 8004382:	4613      	mov	r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	4413      	add	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4423      	add	r3, r4
 800438c:	3308      	adds	r3, #8
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	889b      	ldrh	r3, [r3, #4]
 8004392:	3307      	adds	r3, #7
 8004394:	2b00      	cmp	r3, #0
 8004396:	da00      	bge.n	800439a <BSP_LCD_DisplayChar+0x66>
 8004398:	3307      	adds	r3, #7
 800439a:	10db      	asrs	r3, r3, #3
 800439c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80043a0:	18ca      	adds	r2, r1, r3
 80043a2:	88b9      	ldrh	r1, [r7, #4]
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fd58 	bl	8004e5c <DrawChar>
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd90      	pop	{r4, r7, pc}
 80043b4:	20000470 	.word	0x20000470
 80043b8:	20000474 	.word	0x20000474

080043bc <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80043bc:	b5b0      	push	{r4, r5, r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60ba      	str	r2, [r7, #8]
 80043c4:	461a      	mov	r2, r3
 80043c6:	4603      	mov	r3, r0
 80043c8:	81fb      	strh	r3, [r7, #14]
 80043ca:	460b      	mov	r3, r1
 80043cc:	81bb      	strh	r3, [r7, #12]
 80043ce:	4613      	mov	r3, r2
 80043d0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80043d2:	2301      	movs	r3, #1
 80043d4:	83fb      	strh	r3, [r7, #30]
 80043d6:	2300      	movs	r3, #0
 80043d8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80043da:	2300      	movs	r3, #0
 80043dc:	61bb      	str	r3, [r7, #24]
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80043e6:	e002      	b.n	80043ee <BSP_LCD_DisplayStringAt+0x32>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	3301      	adds	r3, #1
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	617a      	str	r2, [r7, #20]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f6      	bne.n	80043e8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80043fa:	f7ff fe79 	bl	80040f0 <BSP_LCD_GetXSize>
 80043fe:	4601      	mov	r1, r0
 8004400:	4b50      	ldr	r3, [pc, #320]	; (8004544 <BSP_LCD_DisplayStringAt+0x188>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4850      	ldr	r0, [pc, #320]	; (8004548 <BSP_LCD_DisplayStringAt+0x18c>)
 8004406:	4613      	mov	r3, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4403      	add	r3, r0
 8004410:	3308      	adds	r3, #8
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	889b      	ldrh	r3, [r3, #4]
 8004416:	fbb1 f3f3 	udiv	r3, r1, r3
 800441a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	2b03      	cmp	r3, #3
 8004420:	d01c      	beq.n	800445c <BSP_LCD_DisplayStringAt+0xa0>
 8004422:	2b03      	cmp	r3, #3
 8004424:	dc33      	bgt.n	800448e <BSP_LCD_DisplayStringAt+0xd2>
 8004426:	2b01      	cmp	r3, #1
 8004428:	d002      	beq.n	8004430 <BSP_LCD_DisplayStringAt+0x74>
 800442a:	2b02      	cmp	r3, #2
 800442c:	d019      	beq.n	8004462 <BSP_LCD_DisplayStringAt+0xa6>
 800442e:	e02e      	b.n	800448e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	1ad1      	subs	r1, r2, r3
 8004436:	4b43      	ldr	r3, [pc, #268]	; (8004544 <BSP_LCD_DisplayStringAt+0x188>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4843      	ldr	r0, [pc, #268]	; (8004548 <BSP_LCD_DisplayStringAt+0x18c>)
 800443c:	4613      	mov	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4403      	add	r3, r0
 8004446:	3308      	adds	r3, #8
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	889b      	ldrh	r3, [r3, #4]
 800444c:	fb03 f301 	mul.w	r3, r3, r1
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	89fb      	ldrh	r3, [r7, #14]
 8004456:	4413      	add	r3, r2
 8004458:	83fb      	strh	r3, [r7, #30]
      break;
 800445a:	e01b      	b.n	8004494 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800445c:	89fb      	ldrh	r3, [r7, #14]
 800445e:	83fb      	strh	r3, [r7, #30]
      break;
 8004460:	e018      	b.n	8004494 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	b299      	uxth	r1, r3
 800446a:	4b36      	ldr	r3, [pc, #216]	; (8004544 <BSP_LCD_DisplayStringAt+0x188>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4836      	ldr	r0, [pc, #216]	; (8004548 <BSP_LCD_DisplayStringAt+0x18c>)
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4403      	add	r3, r0
 800447a:	3308      	adds	r3, #8
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	889b      	ldrh	r3, [r3, #4]
 8004480:	fb11 f303 	smulbb	r3, r1, r3
 8004484:	b29a      	uxth	r2, r3
 8004486:	89fb      	ldrh	r3, [r7, #14]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	83fb      	strh	r3, [r7, #30]
      break;
 800448c:	e002      	b.n	8004494 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800448e:	89fb      	ldrh	r3, [r7, #14]
 8004490:	83fb      	strh	r3, [r7, #30]
      break;
 8004492:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8004494:	8bfb      	ldrh	r3, [r7, #30]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <BSP_LCD_DisplayStringAt+0xe6>
 800449a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	da1d      	bge.n	80044de <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80044a6:	e01a      	b.n	80044de <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	781a      	ldrb	r2, [r3, #0]
 80044ac:	89b9      	ldrh	r1, [r7, #12]
 80044ae:	8bfb      	ldrh	r3, [r7, #30]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff3f 	bl	8004334 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80044b6:	4b23      	ldr	r3, [pc, #140]	; (8004544 <BSP_LCD_DisplayStringAt+0x188>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4923      	ldr	r1, [pc, #140]	; (8004548 <BSP_LCD_DisplayStringAt+0x18c>)
 80044bc:	4613      	mov	r3, r2
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	4413      	add	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	3308      	adds	r3, #8
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	889a      	ldrh	r2, [r3, #4]
 80044cc:	8bfb      	ldrh	r3, [r7, #30]
 80044ce:	4413      	add	r3, r2
 80044d0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3301      	adds	r3, #1
 80044d6:	60bb      	str	r3, [r7, #8]
    i++;
 80044d8:	8bbb      	ldrh	r3, [r7, #28]
 80044da:	3301      	adds	r3, #1
 80044dc:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bf14      	ite	ne
 80044e6:	2301      	movne	r3, #1
 80044e8:	2300      	moveq	r3, #0
 80044ea:	b2dc      	uxtb	r4, r3
 80044ec:	f7ff fe00 	bl	80040f0 <BSP_LCD_GetXSize>
 80044f0:	8bb9      	ldrh	r1, [r7, #28]
 80044f2:	4b14      	ldr	r3, [pc, #80]	; (8004544 <BSP_LCD_DisplayStringAt+0x188>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	4d14      	ldr	r5, [pc, #80]	; (8004548 <BSP_LCD_DisplayStringAt+0x18c>)
 80044f8:	4613      	mov	r3, r2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	4413      	add	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	442b      	add	r3, r5
 8004502:	3308      	adds	r3, #8
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	889b      	ldrh	r3, [r3, #4]
 8004508:	fb03 f301 	mul.w	r3, r3, r1
 800450c:	1ac3      	subs	r3, r0, r3
 800450e:	b299      	uxth	r1, r3
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <BSP_LCD_DisplayStringAt+0x188>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	480c      	ldr	r0, [pc, #48]	; (8004548 <BSP_LCD_DisplayStringAt+0x18c>)
 8004516:	4613      	mov	r3, r2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4403      	add	r3, r0
 8004520:	3308      	adds	r3, #8
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	889b      	ldrh	r3, [r3, #4]
 8004526:	4299      	cmp	r1, r3
 8004528:	bf2c      	ite	cs
 800452a:	2301      	movcs	r3, #1
 800452c:	2300      	movcc	r3, #0
 800452e:	b2db      	uxtb	r3, r3
 8004530:	4023      	ands	r3, r4
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1b7      	bne.n	80044a8 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8004538:	bf00      	nop
 800453a:	bf00      	nop
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bdb0      	pop	{r4, r5, r7, pc}
 8004542:	bf00      	nop
 8004544:	20000470 	.word	0x20000470
 8004548:	20000474 	.word	0x20000474

0800454c <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	4603      	mov	r3, r0
 8004554:	6039      	str	r1, [r7, #0]
 8004556:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8004558:	f7ff feae 	bl	80042b8 <BSP_LCD_GetFont>
 800455c:	4603      	mov	r3, r0
 800455e:	88db      	ldrh	r3, [r3, #6]
 8004560:	88fa      	ldrh	r2, [r7, #6]
 8004562:	fb12 f303 	smulbb	r3, r2, r3
 8004566:	b299      	uxth	r1, r3
 8004568:	2303      	movs	r3, #3
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	2000      	movs	r0, #0
 800456e:	f7ff ff25 	bl	80043bc <BSP_LCD_DisplayStringAt>
}
 8004572:	bf00      	nop
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800457c:	b5b0      	push	{r4, r5, r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af02      	add	r7, sp, #8
 8004582:	4603      	mov	r3, r0
 8004584:	80fb      	strh	r3, [r7, #6]
 8004586:	460b      	mov	r3, r1
 8004588:	80bb      	strh	r3, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004592:	4b26      	ldr	r3, [pc, #152]	; (800462c <BSP_LCD_DrawHLine+0xb0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a26      	ldr	r2, [pc, #152]	; (8004630 <BSP_LCD_DrawHLine+0xb4>)
 8004598:	2134      	movs	r1, #52	; 0x34
 800459a:	fb01 f303 	mul.w	r3, r1, r3
 800459e:	4413      	add	r3, r2
 80045a0:	3348      	adds	r3, #72	; 0x48
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d114      	bne.n	80045d2 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <BSP_LCD_DrawHLine+0xb0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a20      	ldr	r2, [pc, #128]	; (8004630 <BSP_LCD_DrawHLine+0xb4>)
 80045ae:	2134      	movs	r1, #52	; 0x34
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	335c      	adds	r3, #92	; 0x5c
 80045b8:	681c      	ldr	r4, [r3, #0]
 80045ba:	f7ff fd99 	bl	80040f0 <BSP_LCD_GetXSize>
 80045be:	4602      	mov	r2, r0
 80045c0:	88bb      	ldrh	r3, [r7, #4]
 80045c2:	fb03 f202 	mul.w	r2, r3, r2
 80045c6:	88fb      	ldrh	r3, [r7, #6]
 80045c8:	4413      	add	r3, r2
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	4423      	add	r3, r4
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e013      	b.n	80045fa <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80045d2:	4b16      	ldr	r3, [pc, #88]	; (800462c <BSP_LCD_DrawHLine+0xb0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a16      	ldr	r2, [pc, #88]	; (8004630 <BSP_LCD_DrawHLine+0xb4>)
 80045d8:	2134      	movs	r1, #52	; 0x34
 80045da:	fb01 f303 	mul.w	r3, r1, r3
 80045de:	4413      	add	r3, r2
 80045e0:	335c      	adds	r3, #92	; 0x5c
 80045e2:	681c      	ldr	r4, [r3, #0]
 80045e4:	f7ff fd84 	bl	80040f0 <BSP_LCD_GetXSize>
 80045e8:	4602      	mov	r2, r0
 80045ea:	88bb      	ldrh	r3, [r7, #4]
 80045ec:	fb03 f202 	mul.w	r2, r3, r2
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4423      	add	r3, r4
 80045f8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80045fa:	4b0c      	ldr	r3, [pc, #48]	; (800462c <BSP_LCD_DrawHLine+0xb0>)
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	68f9      	ldr	r1, [r7, #12]
 8004600:	887c      	ldrh	r4, [r7, #2]
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <BSP_LCD_DrawHLine+0xb0>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	4d0b      	ldr	r5, [pc, #44]	; (8004634 <BSP_LCD_DrawHLine+0xb8>)
 8004608:	4613      	mov	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	442b      	add	r3, r5
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	2300      	movs	r3, #0
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	2301      	movs	r3, #1
 800461c:	4622      	mov	r2, r4
 800461e:	f000 fcd5 	bl	8004fcc <LL_FillBuffer>
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bdb0      	pop	{r4, r5, r7, pc}
 800462a:	bf00      	nop
 800462c:	20000470 	.word	0x20000470
 8004630:	20008da8 	.word	0x20008da8
 8004634:	20000474 	.word	0x20000474

08004638 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	80fb      	strh	r3, [r7, #6]
 8004642:	460b      	mov	r3, r1
 8004644:	80bb      	strh	r3, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800464a:	887b      	ldrh	r3, [r7, #2]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	f1c3 0303 	rsb	r3, r3, #3
 8004652:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004658:	887b      	ldrh	r3, [r7, #2]
 800465a:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 800465c:	e0c7      	b.n	80047ee <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	b29a      	uxth	r2, r3
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	4413      	add	r3, r2
 8004666:	b298      	uxth	r0, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	b29b      	uxth	r3, r3
 800466c:	88ba      	ldrh	r2, [r7, #4]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	b299      	uxth	r1, r3
 8004672:	4b64      	ldr	r3, [pc, #400]	; (8004804 <BSP_LCD_DrawCircle+0x1cc>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4c64      	ldr	r4, [pc, #400]	; (8004808 <BSP_LCD_DrawCircle+0x1d0>)
 8004678:	4613      	mov	r3, r2
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4423      	add	r3, r4
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	f000 f8c1 	bl	800480c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	b29b      	uxth	r3, r3
 800468e:	88fa      	ldrh	r2, [r7, #6]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	b298      	uxth	r0, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	b29b      	uxth	r3, r3
 8004698:	88ba      	ldrh	r2, [r7, #4]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	b299      	uxth	r1, r3
 800469e:	4b59      	ldr	r3, [pc, #356]	; (8004804 <BSP_LCD_DrawCircle+0x1cc>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4c59      	ldr	r4, [pc, #356]	; (8004808 <BSP_LCD_DrawCircle+0x1d0>)
 80046a4:	4613      	mov	r3, r2
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4423      	add	r3, r4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	f000 f8ab 	bl	800480c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	4413      	add	r3, r2
 80046be:	b298      	uxth	r0, r3
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	88ba      	ldrh	r2, [r7, #4]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	b299      	uxth	r1, r3
 80046ca:	4b4e      	ldr	r3, [pc, #312]	; (8004804 <BSP_LCD_DrawCircle+0x1cc>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4c4e      	ldr	r4, [pc, #312]	; (8004808 <BSP_LCD_DrawCircle+0x1d0>)
 80046d0:	4613      	mov	r3, r2
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4423      	add	r3, r4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461a      	mov	r2, r3
 80046de:	f000 f895 	bl	800480c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	b298      	uxth	r0, r3
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	88ba      	ldrh	r2, [r7, #4]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	b299      	uxth	r1, r3
 80046f6:	4b43      	ldr	r3, [pc, #268]	; (8004804 <BSP_LCD_DrawCircle+0x1cc>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4c43      	ldr	r4, [pc, #268]	; (8004808 <BSP_LCD_DrawCircle+0x1d0>)
 80046fc:	4613      	mov	r3, r2
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4423      	add	r3, r4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	f000 f87f 	bl	800480c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	b29a      	uxth	r2, r3
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	4413      	add	r3, r2
 8004716:	b298      	uxth	r0, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	b29a      	uxth	r2, r3
 800471c:	88bb      	ldrh	r3, [r7, #4]
 800471e:	4413      	add	r3, r2
 8004720:	b299      	uxth	r1, r3
 8004722:	4b38      	ldr	r3, [pc, #224]	; (8004804 <BSP_LCD_DrawCircle+0x1cc>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4c38      	ldr	r4, [pc, #224]	; (8004808 <BSP_LCD_DrawCircle+0x1d0>)
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4423      	add	r3, r4
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	f000 f869 	bl	800480c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	b29b      	uxth	r3, r3
 800473e:	88fa      	ldrh	r2, [r7, #6]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	b298      	uxth	r0, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	b29a      	uxth	r2, r3
 8004748:	88bb      	ldrh	r3, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	b299      	uxth	r1, r3
 800474e:	4b2d      	ldr	r3, [pc, #180]	; (8004804 <BSP_LCD_DrawCircle+0x1cc>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4c2d      	ldr	r4, [pc, #180]	; (8004808 <BSP_LCD_DrawCircle+0x1d0>)
 8004754:	4613      	mov	r3, r2
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4423      	add	r3, r4
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	f000 f853 	bl	800480c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	b29a      	uxth	r2, r3
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	4413      	add	r3, r2
 800476e:	b298      	uxth	r0, r3
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	b29a      	uxth	r2, r3
 8004774:	88bb      	ldrh	r3, [r7, #4]
 8004776:	4413      	add	r3, r2
 8004778:	b299      	uxth	r1, r3
 800477a:	4b22      	ldr	r3, [pc, #136]	; (8004804 <BSP_LCD_DrawCircle+0x1cc>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	4c22      	ldr	r4, [pc, #136]	; (8004808 <BSP_LCD_DrawCircle+0x1d0>)
 8004780:	4613      	mov	r3, r2
 8004782:	005b      	lsls	r3, r3, #1
 8004784:	4413      	add	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4423      	add	r3, r4
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	f000 f83d 	bl	800480c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	b29b      	uxth	r3, r3
 8004796:	88fa      	ldrh	r2, [r7, #6]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	b298      	uxth	r0, r3
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	b29a      	uxth	r2, r3
 80047a0:	88bb      	ldrh	r3, [r7, #4]
 80047a2:	4413      	add	r3, r2
 80047a4:	b299      	uxth	r1, r3
 80047a6:	4b17      	ldr	r3, [pc, #92]	; (8004804 <BSP_LCD_DrawCircle+0x1cc>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4c17      	ldr	r4, [pc, #92]	; (8004808 <BSP_LCD_DrawCircle+0x1d0>)
 80047ac:	4613      	mov	r3, r2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4423      	add	r3, r4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	f000 f827 	bl	800480c <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	da06      	bge.n	80047d2 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	009a      	lsls	r2, r3, #2
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	4413      	add	r3, r2
 80047cc:	3306      	adds	r3, #6
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e00a      	b.n	80047e8 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	009a      	lsls	r2, r3, #2
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	4413      	add	r3, r2
 80047de:	330a      	adds	r3, #10
 80047e0:	617b      	str	r3, [r7, #20]
      current_y--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	3301      	adds	r3, #1
 80047ec:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	f67f af33 	bls.w	800465e <BSP_LCD_DrawCircle+0x26>
  } 
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd90      	pop	{r4, r7, pc}
 8004802:	bf00      	nop
 8004804:	20000470 	.word	0x20000470
 8004808:	20000474 	.word	0x20000474

0800480c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800480c:	b5b0      	push	{r4, r5, r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	603a      	str	r2, [r7, #0]
 8004816:	80fb      	strh	r3, [r7, #6]
 8004818:	460b      	mov	r3, r1
 800481a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800481c:	4b1d      	ldr	r3, [pc, #116]	; (8004894 <BSP_LCD_DrawPixel+0x88>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1d      	ldr	r2, [pc, #116]	; (8004898 <BSP_LCD_DrawPixel+0x8c>)
 8004822:	2134      	movs	r1, #52	; 0x34
 8004824:	fb01 f303 	mul.w	r3, r1, r3
 8004828:	4413      	add	r3, r2
 800482a:	3348      	adds	r3, #72	; 0x48
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d116      	bne.n	8004860 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8004832:	4b18      	ldr	r3, [pc, #96]	; (8004894 <BSP_LCD_DrawPixel+0x88>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a18      	ldr	r2, [pc, #96]	; (8004898 <BSP_LCD_DrawPixel+0x8c>)
 8004838:	2134      	movs	r1, #52	; 0x34
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	4413      	add	r3, r2
 8004840:	335c      	adds	r3, #92	; 0x5c
 8004842:	681c      	ldr	r4, [r3, #0]
 8004844:	88bd      	ldrh	r5, [r7, #4]
 8004846:	f7ff fc53 	bl	80040f0 <BSP_LCD_GetXSize>
 800484a:	4603      	mov	r3, r0
 800484c:	fb03 f205 	mul.w	r2, r3, r5
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	4413      	add	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4423      	add	r3, r4
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	b292      	uxth	r2, r2
 800485c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800485e:	e015      	b.n	800488c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <BSP_LCD_DrawPixel+0x88>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0c      	ldr	r2, [pc, #48]	; (8004898 <BSP_LCD_DrawPixel+0x8c>)
 8004866:	2134      	movs	r1, #52	; 0x34
 8004868:	fb01 f303 	mul.w	r3, r1, r3
 800486c:	4413      	add	r3, r2
 800486e:	335c      	adds	r3, #92	; 0x5c
 8004870:	681c      	ldr	r4, [r3, #0]
 8004872:	88bd      	ldrh	r5, [r7, #4]
 8004874:	f7ff fc3c 	bl	80040f0 <BSP_LCD_GetXSize>
 8004878:	4603      	mov	r3, r0
 800487a:	fb03 f205 	mul.w	r2, r3, r5
 800487e:	88fb      	ldrh	r3, [r7, #6]
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4423      	add	r3, r4
 8004886:	461a      	mov	r2, r3
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	6013      	str	r3, [r2, #0]
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bdb0      	pop	{r4, r5, r7, pc}
 8004894:	20000470 	.word	0x20000470
 8004898:	20008da8 	.word	0x20008da8

0800489c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 800489c:	b590      	push	{r4, r7, lr}
 800489e:	b08b      	sub	sp, #44	; 0x2c
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
 80048ac:	2300      	movs	r3, #0
 80048ae:	61bb      	str	r3, [r7, #24]
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	2300      	movs	r3, #0
 80048b6:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	330a      	adds	r3, #10
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	330b      	adds	r3, #11
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	021b      	lsls	r3, r3, #8
 80048cc:	441a      	add	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	330c      	adds	r3, #12
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	041b      	lsls	r3, r3, #16
 80048d6:	441a      	add	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	330d      	adds	r3, #13
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	061b      	lsls	r3, r3, #24
 80048e0:	4413      	add	r3, r2
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3312      	adds	r3, #18
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3313      	adds	r3, #19
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	441a      	add	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3314      	adds	r3, #20
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3315      	adds	r3, #21
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	061b      	lsls	r3, r3, #24
 8004908:	4413      	add	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3316      	adds	r3, #22
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3317      	adds	r3, #23
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	021b      	lsls	r3, r3, #8
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3318      	adds	r3, #24
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	441a      	add	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3319      	adds	r3, #25
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	061b      	lsls	r3, r3, #24
 8004930:	4413      	add	r3, r2
 8004932:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	331c      	adds	r3, #28
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	331d      	adds	r3, #29
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	4413      	add	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8004948:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <BSP_LCD_DrawBitmap+0x15c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2b      	ldr	r2, [pc, #172]	; (80049fc <BSP_LCD_DrawBitmap+0x160>)
 800494e:	2134      	movs	r1, #52	; 0x34
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	4413      	add	r3, r2
 8004956:	335c      	adds	r3, #92	; 0x5c
 8004958:	681c      	ldr	r4, [r3, #0]
 800495a:	f7ff fbc9 	bl	80040f0 <BSP_LCD_GetXSize>
 800495e:	4602      	mov	r2, r0
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	fb03 f202 	mul.w	r2, r3, r2
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4423      	add	r3, r4
 800496e:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	3b20      	subs	r3, #32
 8004974:	2b07      	cmp	r3, #7
 8004976:	d802      	bhi.n	800497e <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8004978:	2300      	movs	r3, #0
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	e008      	b.n	8004990 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	3b10      	subs	r3, #16
 8004982:	2b07      	cmp	r3, #7
 8004984:	d802      	bhi.n	800498c <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8004986:	2302      	movs	r3, #2
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e001      	b.n	8004990 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 800498c:	2301      	movs	r3, #1
 800498e:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	3b01      	subs	r3, #1
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	08d2      	lsrs	r2, r2, #3
 800499e:	fb02 f203 	mul.w	r2, r2, r3
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	4413      	add	r3, r2
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	4413      	add	r3, r2
 80049aa:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80049ac:	2300      	movs	r3, #0
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
 80049b0:	e018      	b.n	80049e4 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80049b2:	6a39      	ldr	r1, [r7, #32]
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fb53 	bl	8005064 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80049be:	f7ff fb97 	bl	80040f0 <BSP_LCD_GetXSize>
 80049c2:	4603      	mov	r3, r0
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	6a3a      	ldr	r2, [r7, #32]
 80049c8:	4413      	add	r3, r2
 80049ca:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	08db      	lsrs	r3, r3, #3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	fb02 f303 	mul.w	r3, r2, r3
 80049d6:	425b      	negs	r3, r3
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	4413      	add	r3, r2
 80049dc:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	3301      	adds	r3, #1
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
 80049e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d3e2      	bcc.n	80049b2 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	372c      	adds	r7, #44	; 0x2c
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd90      	pop	{r4, r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000470 	.word	0x20000470
 80049fc:	20008da8 	.word	0x20008da8

08004a00 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af02      	add	r7, sp, #8
 8004a08:	4604      	mov	r4, r0
 8004a0a:	4608      	mov	r0, r1
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	461a      	mov	r2, r3
 8004a10:	4623      	mov	r3, r4
 8004a12:	80fb      	strh	r3, [r7, #6]
 8004a14:	4603      	mov	r3, r0
 8004a16:	80bb      	strh	r3, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	807b      	strh	r3, [r7, #2]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004a24:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <BSP_LCD_FillRect+0xe8>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4930      	ldr	r1, [pc, #192]	; (8004aec <BSP_LCD_FillRect+0xec>)
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff fbf2 	bl	8004220 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004a3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <BSP_LCD_FillRect+0xe8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a2b      	ldr	r2, [pc, #172]	; (8004af0 <BSP_LCD_FillRect+0xf0>)
 8004a42:	2134      	movs	r1, #52	; 0x34
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	3348      	adds	r3, #72	; 0x48
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d114      	bne.n	8004a7c <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004a52:	4b25      	ldr	r3, [pc, #148]	; (8004ae8 <BSP_LCD_FillRect+0xe8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a26      	ldr	r2, [pc, #152]	; (8004af0 <BSP_LCD_FillRect+0xf0>)
 8004a58:	2134      	movs	r1, #52	; 0x34
 8004a5a:	fb01 f303 	mul.w	r3, r1, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	335c      	adds	r3, #92	; 0x5c
 8004a62:	681c      	ldr	r4, [r3, #0]
 8004a64:	f7ff fb44 	bl	80040f0 <BSP_LCD_GetXSize>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	88bb      	ldrh	r3, [r7, #4]
 8004a6c:	fb03 f202 	mul.w	r2, r3, r2
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	4413      	add	r3, r2
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	4423      	add	r3, r4
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	e013      	b.n	8004aa4 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <BSP_LCD_FillRect+0xe8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1b      	ldr	r2, [pc, #108]	; (8004af0 <BSP_LCD_FillRect+0xf0>)
 8004a82:	2134      	movs	r1, #52	; 0x34
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	4413      	add	r3, r2
 8004a8a:	335c      	adds	r3, #92	; 0x5c
 8004a8c:	681c      	ldr	r4, [r3, #0]
 8004a8e:	f7ff fb2f 	bl	80040f0 <BSP_LCD_GetXSize>
 8004a92:	4602      	mov	r2, r0
 8004a94:	88bb      	ldrh	r3, [r7, #4]
 8004a96:	fb03 f202 	mul.w	r2, r3, r2
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4423      	add	r3, r4
 8004aa2:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004aa4:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <BSP_LCD_FillRect+0xe8>)
 8004aa6:	681c      	ldr	r4, [r3, #0]
 8004aa8:	68fd      	ldr	r5, [r7, #12]
 8004aaa:	887e      	ldrh	r6, [r7, #2]
 8004aac:	f8b7 8000 	ldrh.w	r8, [r7]
 8004ab0:	f7ff fb1e 	bl	80040f0 <BSP_LCD_GetXSize>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	887b      	ldrh	r3, [r7, #2]
 8004ab8:	1ad1      	subs	r1, r2, r3
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <BSP_LCD_FillRect+0xe8>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	480b      	ldr	r0, [pc, #44]	; (8004aec <BSP_LCD_FillRect+0xec>)
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4403      	add	r3, r0
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	9301      	str	r3, [sp, #4]
 8004ace:	9100      	str	r1, [sp, #0]
 8004ad0:	4643      	mov	r3, r8
 8004ad2:	4632      	mov	r2, r6
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f000 fa78 	bl	8004fcc <LL_FillBuffer>
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000470 	.word	0x20000470
 8004aec:	20000474 	.word	0x20000474
 8004af0:	20008da8 	.word	0x20008da8

08004af4 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	4603      	mov	r3, r0
 8004afc:	80fb      	strh	r3, [r7, #6]
 8004afe:	460b      	mov	r3, r1
 8004b00:	80bb      	strh	r3, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8004b06:	887b      	ldrh	r3, [r7, #2]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	f1c3 0303 	rsb	r3, r3, #3
 8004b0e:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004b14:	887b      	ldrh	r3, [r7, #2]
 8004b16:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004b18:	4b44      	ldr	r3, [pc, #272]	; (8004c2c <BSP_LCD_FillCircle+0x138>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	4944      	ldr	r1, [pc, #272]	; (8004c30 <BSP_LCD_FillCircle+0x13c>)
 8004b1e:	4613      	mov	r3, r2
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	440b      	add	r3, r1
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fb78 	bl	8004220 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8004b30:	e061      	b.n	8004bf6 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d021      	beq.n	8004b7c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	88fa      	ldrh	r2, [r7, #6]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	b298      	uxth	r0, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	88bb      	ldrh	r3, [r7, #4]
 8004b48:	4413      	add	r3, r2
 8004b4a:	b299      	uxth	r1, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	f7ff fd11 	bl	800457c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	88fa      	ldrh	r2, [r7, #6]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	b298      	uxth	r0, r3
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	88ba      	ldrh	r2, [r7, #4]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	b299      	uxth	r1, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	461a      	mov	r2, r3
 8004b78:	f7ff fd00 	bl	800457c <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d021      	beq.n	8004bc6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	b298      	uxth	r0, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	88ba      	ldrh	r2, [r7, #4]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	b299      	uxth	r1, r3
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f7ff fcec 	bl	800457c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	88fa      	ldrh	r2, [r7, #6]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	b298      	uxth	r0, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	88bb      	ldrh	r3, [r7, #4]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	b299      	uxth	r1, r3
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f7ff fcdb 	bl	800457c <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	da06      	bge.n	8004bda <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	009a      	lsls	r2, r3, #2
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3306      	adds	r3, #6
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	e00a      	b.n	8004bf0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	009a      	lsls	r2, r3, #2
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	4413      	add	r3, r2
 8004be6:	330a      	adds	r3, #10
 8004be8:	617b      	str	r3, [r7, #20]
      current_y--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d999      	bls.n	8004b32 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004bfe:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <BSP_LCD_FillCircle+0x138>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	490b      	ldr	r1, [pc, #44]	; (8004c30 <BSP_LCD_FillCircle+0x13c>)
 8004c04:	4613      	mov	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fb05 	bl	8004220 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8004c16:	887a      	ldrh	r2, [r7, #2]
 8004c18:	88b9      	ldrh	r1, [r7, #4]
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fd0b 	bl	8004638 <BSP_LCD_DrawCircle>
}
 8004c22:	bf00      	nop
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000470 	.word	0x20000470
 8004c30:	20000474 	.word	0x20000474

08004c34 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <BSP_LCD_DisplayOn+0x30>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	4b09      	ldr	r3, [pc, #36]	; (8004c64 <BSP_LCD_DisplayOn+0x30>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0201 	orr.w	r2, r2, #1
 8004c46:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004c4e:	4806      	ldr	r0, [pc, #24]	; (8004c68 <BSP_LCD_DisplayOn+0x34>)
 8004c50:	f003 fb8c 	bl	800836c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004c54:	2201      	movs	r2, #1
 8004c56:	2108      	movs	r1, #8
 8004c58:	4804      	ldr	r0, [pc, #16]	; (8004c6c <BSP_LCD_DisplayOn+0x38>)
 8004c5a:	f003 fb87 	bl	800836c <HAL_GPIO_WritePin>
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20008da8 	.word	0x20008da8
 8004c68:	40022000 	.word	0x40022000
 8004c6c:	40022800 	.word	0x40022800

08004c70 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b090      	sub	sp, #64	; 0x40
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004c7a:	4b64      	ldr	r3, [pc, #400]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	4a63      	ldr	r2, [pc, #396]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004c80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c84:	6453      	str	r3, [r2, #68]	; 0x44
 8004c86:	4b61      	ldr	r3, [pc, #388]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004c92:	4b5e      	ldr	r3, [pc, #376]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	4a5d      	ldr	r2, [pc, #372]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004c98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c9e:	4b5b      	ldr	r3, [pc, #364]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004caa:	4b58      	ldr	r3, [pc, #352]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	4a57      	ldr	r2, [pc, #348]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004cb0:	f043 0310 	orr.w	r3, r3, #16
 8004cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb6:	4b55      	ldr	r3, [pc, #340]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	623b      	str	r3, [r7, #32]
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004cc2:	4b52      	ldr	r3, [pc, #328]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	4a51      	ldr	r2, [pc, #324]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cce:	4b4f      	ldr	r3, [pc, #316]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004cda:	4b4c      	ldr	r3, [pc, #304]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	4a4b      	ldr	r2, [pc, #300]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce6:	4b49      	ldr	r3, [pc, #292]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004cf2:	4b46      	ldr	r3, [pc, #280]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	4a45      	ldr	r2, [pc, #276]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cfe:	4b43      	ldr	r3, [pc, #268]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8004d0a:	4b40      	ldr	r3, [pc, #256]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	4a3f      	ldr	r2, [pc, #252]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004d10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d14:	6313      	str	r3, [r2, #48]	; 0x30
 8004d16:	4b3d      	ldr	r3, [pc, #244]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8004d22:	4b3a      	ldr	r3, [pc, #232]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	4a39      	ldr	r2, [pc, #228]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d2e:	4b37      	ldr	r3, [pc, #220]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004d3a:	4b34      	ldr	r3, [pc, #208]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	4a33      	ldr	r2, [pc, #204]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004d40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d44:	6313      	str	r3, [r2, #48]	; 0x30
 8004d46:	4b31      	ldr	r3, [pc, #196]	; (8004e0c <BSP_LCD_MspInit+0x19c>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4e:	60bb      	str	r3, [r7, #8]
 8004d50:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004d52:	2310      	movs	r3, #16
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004d56:	2302      	movs	r3, #2
 8004d58:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004d5e:	2302      	movs	r3, #2
 8004d60:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004d62:	230e      	movs	r3, #14
 8004d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4828      	ldr	r0, [pc, #160]	; (8004e10 <BSP_LCD_MspInit+0x1a0>)
 8004d6e:	f003 f845 	bl	8007dfc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8004d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004d7c:	2309      	movs	r3, #9
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d84:	4619      	mov	r1, r3
 8004d86:	4823      	ldr	r0, [pc, #140]	; (8004e14 <BSP_LCD_MspInit+0x1a4>)
 8004d88:	f003 f838 	bl	8007dfc <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8004d8c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8004d90:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004d92:	2302      	movs	r3, #2
 8004d94:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004d96:	230e      	movs	r3, #14
 8004d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d9e:	4619      	mov	r1, r3
 8004da0:	481d      	ldr	r0, [pc, #116]	; (8004e18 <BSP_LCD_MspInit+0x1a8>)
 8004da2:	f003 f82b 	bl	8007dfc <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004da6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004dac:	2302      	movs	r3, #2
 8004dae:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004db0:	230e      	movs	r3, #14
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8004db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004db8:	4619      	mov	r1, r3
 8004dba:	4818      	ldr	r0, [pc, #96]	; (8004e1c <BSP_LCD_MspInit+0x1ac>)
 8004dbc:	f003 f81e 	bl	8007dfc <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8004dc0:	23f7      	movs	r3, #247	; 0xf7
 8004dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004dc8:	230e      	movs	r3, #14
 8004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4813      	ldr	r0, [pc, #76]	; (8004e20 <BSP_LCD_MspInit+0x1b0>)
 8004dd4:	f003 f812 	bl	8007dfc <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004dde:	2301      	movs	r3, #1
 8004de0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8004de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004de6:	4619      	mov	r1, r3
 8004de8:	480b      	ldr	r0, [pc, #44]	; (8004e18 <BSP_LCD_MspInit+0x1a8>)
 8004dea:	f003 f807 	bl	8007dfc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8004dee:	2308      	movs	r3, #8
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004df2:	2301      	movs	r3, #1
 8004df4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8004df6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4808      	ldr	r0, [pc, #32]	; (8004e20 <BSP_LCD_MspInit+0x1b0>)
 8004dfe:	f002 fffd 	bl	8007dfc <HAL_GPIO_Init>
}
 8004e02:	bf00      	nop
 8004e04:	3740      	adds	r7, #64	; 0x40
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	40021000 	.word	0x40021000
 8004e14:	40021800 	.word	0x40021800
 8004e18:	40022000 	.word	0x40022000
 8004e1c:	40022400 	.word	0x40022400
 8004e20:	40022800 	.word	0x40022800

08004e24 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004e2e:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <BSP_LCD_ClockConfig+0x34>)
 8004e30:	2208      	movs	r2, #8
 8004e32:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004e34:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <BSP_LCD_ClockConfig+0x34>)
 8004e36:	22c0      	movs	r2, #192	; 0xc0
 8004e38:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8004e3a:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <BSP_LCD_ClockConfig+0x34>)
 8004e3c:	2205      	movs	r2, #5
 8004e3e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <BSP_LCD_ClockConfig+0x34>)
 8004e42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e46:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004e48:	4803      	ldr	r0, [pc, #12]	; (8004e58 <BSP_LCD_ClockConfig+0x34>)
 8004e4a:	f005 f999 	bl	800a180 <HAL_RCCEx_PeriphCLKConfig>
}
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	2000048c 	.word	0x2000048c

08004e5c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	603a      	str	r2, [r7, #0]
 8004e66:	80fb      	strh	r3, [r7, #6]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	61fb      	str	r3, [r7, #28]
 8004e70:	2300      	movs	r3, #0
 8004e72:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004e74:	4b53      	ldr	r3, [pc, #332]	; (8004fc4 <DrawChar+0x168>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4953      	ldr	r1, [pc, #332]	; (8004fc8 <DrawChar+0x16c>)
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	3308      	adds	r3, #8
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	88db      	ldrh	r3, [r3, #6]
 8004e8a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004e8c:	4b4d      	ldr	r3, [pc, #308]	; (8004fc4 <DrawChar+0x168>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	494d      	ldr	r1, [pc, #308]	; (8004fc8 <DrawChar+0x16c>)
 8004e92:	4613      	mov	r3, r2
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	889b      	ldrh	r3, [r3, #4]
 8004ea2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004ea4:	8a3b      	ldrh	r3, [r7, #16]
 8004ea6:	3307      	adds	r3, #7
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	da00      	bge.n	8004eae <DrawChar+0x52>
 8004eac:	3307      	adds	r3, #7
 8004eae:	10db      	asrs	r3, r3, #3
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	8a3b      	ldrh	r3, [r7, #16]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	e076      	b.n	8004fb2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004ec4:	8a3b      	ldrh	r3, [r7, #16]
 8004ec6:	3307      	adds	r3, #7
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	da00      	bge.n	8004ece <DrawChar+0x72>
 8004ecc:	3307      	adds	r3, #7
 8004ece:	10db      	asrs	r3, r3, #3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	fb03 f302 	mul.w	r3, r3, r2
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	4413      	add	r3, r2
 8004edc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8004ede:	8a3b      	ldrh	r3, [r7, #16]
 8004ee0:	3307      	adds	r3, #7
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	da00      	bge.n	8004ee8 <DrawChar+0x8c>
 8004ee6:	3307      	adds	r3, #7
 8004ee8:	10db      	asrs	r3, r3, #3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d002      	beq.n	8004ef4 <DrawChar+0x98>
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d004      	beq.n	8004efc <DrawChar+0xa0>
 8004ef2:	e00c      	b.n	8004f0e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	617b      	str	r3, [r7, #20]
      break;
 8004efa:	e016      	b.n	8004f2a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	3201      	adds	r2, #1
 8004f06:	7812      	ldrb	r2, [r2, #0]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
      break;
 8004f0c:	e00d      	b.n	8004f2a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	041a      	lsls	r2, r3, #16
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	3301      	adds	r3, #1
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	021b      	lsls	r3, r3, #8
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	3202      	adds	r2, #2
 8004f22:	7812      	ldrb	r2, [r2, #0]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
      break;
 8004f28:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	e036      	b.n	8004f9e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004f30:	8a3a      	ldrh	r2, [r7, #16]
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	1ad2      	subs	r2, r2, r3
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	4413      	add	r3, r2
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	461a      	mov	r2, r3
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d012      	beq.n	8004f72 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	88fb      	ldrh	r3, [r7, #6]
 8004f52:	4413      	add	r3, r2
 8004f54:	b298      	uxth	r0, r3
 8004f56:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <DrawChar+0x168>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	491b      	ldr	r1, [pc, #108]	; (8004fc8 <DrawChar+0x16c>)
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	88bb      	ldrh	r3, [r7, #4]
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	f7ff fc4e 	bl	800480c <BSP_LCD_DrawPixel>
 8004f70:	e012      	b.n	8004f98 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	88fb      	ldrh	r3, [r7, #6]
 8004f78:	4413      	add	r3, r2
 8004f7a:	b298      	uxth	r0, r3
 8004f7c:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <DrawChar+0x168>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4911      	ldr	r1, [pc, #68]	; (8004fc8 <DrawChar+0x16c>)
 8004f82:	4613      	mov	r3, r2
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	88bb      	ldrh	r3, [r7, #4]
 8004f92:	4619      	mov	r1, r3
 8004f94:	f7ff fc3a 	bl	800480c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	8a3b      	ldrh	r3, [r7, #16]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d3c4      	bcc.n	8004f30 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004fa6:	88bb      	ldrh	r3, [r7, #4]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	8a7b      	ldrh	r3, [r7, #18]
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d384      	bcc.n	8004ec4 <DrawChar+0x68>
  }
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	3720      	adds	r7, #32
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000470 	.word	0x20000470
 8004fc8:	20000474 	.word	0x20000474

08004fcc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8004fda:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <LL_FillBuffer+0x88>)
 8004fdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004fe0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004fe2:	4b1d      	ldr	r3, [pc, #116]	; (8005058 <LL_FillBuffer+0x8c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1d      	ldr	r2, [pc, #116]	; (800505c <LL_FillBuffer+0x90>)
 8004fe8:	2134      	movs	r1, #52	; 0x34
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
 8004fee:	4413      	add	r3, r2
 8004ff0:	3348      	adds	r3, #72	; 0x48
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d103      	bne.n	8005000 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004ff8:	4b16      	ldr	r3, [pc, #88]	; (8005054 <LL_FillBuffer+0x88>)
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	609a      	str	r2, [r3, #8]
 8004ffe:	e002      	b.n	8005006 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8005000:	4b14      	ldr	r3, [pc, #80]	; (8005054 <LL_FillBuffer+0x88>)
 8005002:	2200      	movs	r2, #0
 8005004:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8005006:	4a13      	ldr	r2, [pc, #76]	; (8005054 <LL_FillBuffer+0x88>)
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800500c:	4b11      	ldr	r3, [pc, #68]	; (8005054 <LL_FillBuffer+0x88>)
 800500e:	4a14      	ldr	r2, [pc, #80]	; (8005060 <LL_FillBuffer+0x94>)
 8005010:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8005012:	4810      	ldr	r0, [pc, #64]	; (8005054 <LL_FillBuffer+0x88>)
 8005014:	f002 fb56 	bl	80076c4 <HAL_DMA2D_Init>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d115      	bne.n	800504a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800501e:	68f9      	ldr	r1, [r7, #12]
 8005020:	480c      	ldr	r0, [pc, #48]	; (8005054 <LL_FillBuffer+0x88>)
 8005022:	f002 fdbd 	bl	8007ba0 <HAL_DMA2D_ConfigLayer>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10e      	bne.n	800504a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69f9      	ldr	r1, [r7, #28]
 8005036:	4807      	ldr	r0, [pc, #28]	; (8005054 <LL_FillBuffer+0x88>)
 8005038:	f002 fb8e 	bl	8007758 <HAL_DMA2D_Start>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8005042:	210a      	movs	r1, #10
 8005044:	4803      	ldr	r0, [pc, #12]	; (8005054 <LL_FillBuffer+0x88>)
 8005046:	f002 fbb2 	bl	80077ae <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000430 	.word	0x20000430
 8005058:	20000470 	.word	0x20000470
 800505c:	20008da8 	.word	0x20008da8
 8005060:	4002b000 	.word	0x4002b000

08005064 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8005072:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <LL_ConvertLineToARGB8888+0x80>)
 8005074:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005078:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800507a:	4b1a      	ldr	r3, [pc, #104]	; (80050e4 <LL_ConvertLineToARGB8888+0x80>)
 800507c:	2200      	movs	r2, #0
 800507e:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8005080:	4b18      	ldr	r3, [pc, #96]	; (80050e4 <LL_ConvertLineToARGB8888+0x80>)
 8005082:	2200      	movs	r2, #0
 8005084:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005086:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <LL_ConvertLineToARGB8888+0x80>)
 8005088:	2200      	movs	r2, #0
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 800508c:	4b15      	ldr	r3, [pc, #84]	; (80050e4 <LL_ConvertLineToARGB8888+0x80>)
 800508e:	22ff      	movs	r2, #255	; 0xff
 8005090:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8005092:	4a14      	ldr	r2, [pc, #80]	; (80050e4 <LL_ConvertLineToARGB8888+0x80>)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8005098:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <LL_ConvertLineToARGB8888+0x80>)
 800509a:	2200      	movs	r2, #0
 800509c:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800509e:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <LL_ConvertLineToARGB8888+0x80>)
 80050a0:	4a11      	ldr	r2, [pc, #68]	; (80050e8 <LL_ConvertLineToARGB8888+0x84>)
 80050a2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80050a4:	480f      	ldr	r0, [pc, #60]	; (80050e4 <LL_ConvertLineToARGB8888+0x80>)
 80050a6:	f002 fb0d 	bl	80076c4 <HAL_DMA2D_Init>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d115      	bne.n	80050dc <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80050b0:	2101      	movs	r1, #1
 80050b2:	480c      	ldr	r0, [pc, #48]	; (80050e4 <LL_ConvertLineToARGB8888+0x80>)
 80050b4:	f002 fd74 	bl	8007ba0 <HAL_DMA2D_ConfigLayer>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10e      	bne.n	80050dc <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80050be:	68f9      	ldr	r1, [r7, #12]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	2301      	movs	r3, #1
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4806      	ldr	r0, [pc, #24]	; (80050e4 <LL_ConvertLineToARGB8888+0x80>)
 80050ca:	f002 fb45 	bl	8007758 <HAL_DMA2D_Start>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d103      	bne.n	80050dc <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80050d4:	210a      	movs	r1, #10
 80050d6:	4803      	ldr	r0, [pc, #12]	; (80050e4 <LL_ConvertLineToARGB8888+0x80>)
 80050d8:	f002 fb69 	bl	80077ae <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80050dc:	bf00      	nop
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000430 	.word	0x20000430
 80050e8:	4002b000 	.word	0x4002b000

080050ec <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80050f0:	4b29      	ldr	r3, [pc, #164]	; (8005198 <BSP_SDRAM_Init+0xac>)
 80050f2:	4a2a      	ldr	r2, [pc, #168]	; (800519c <BSP_SDRAM_Init+0xb0>)
 80050f4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80050f6:	4b2a      	ldr	r3, [pc, #168]	; (80051a0 <BSP_SDRAM_Init+0xb4>)
 80050f8:	2202      	movs	r2, #2
 80050fa:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80050fc:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <BSP_SDRAM_Init+0xb4>)
 80050fe:	2207      	movs	r2, #7
 8005100:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8005102:	4b27      	ldr	r3, [pc, #156]	; (80051a0 <BSP_SDRAM_Init+0xb4>)
 8005104:	2204      	movs	r2, #4
 8005106:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005108:	4b25      	ldr	r3, [pc, #148]	; (80051a0 <BSP_SDRAM_Init+0xb4>)
 800510a:	2207      	movs	r2, #7
 800510c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800510e:	4b24      	ldr	r3, [pc, #144]	; (80051a0 <BSP_SDRAM_Init+0xb4>)
 8005110:	2202      	movs	r2, #2
 8005112:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8005114:	4b22      	ldr	r3, [pc, #136]	; (80051a0 <BSP_SDRAM_Init+0xb4>)
 8005116:	2202      	movs	r2, #2
 8005118:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800511a:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <BSP_SDRAM_Init+0xb4>)
 800511c:	2202      	movs	r2, #2
 800511e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8005120:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <BSP_SDRAM_Init+0xac>)
 8005122:	2200      	movs	r2, #0
 8005124:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005126:	4b1c      	ldr	r3, [pc, #112]	; (8005198 <BSP_SDRAM_Init+0xac>)
 8005128:	2200      	movs	r2, #0
 800512a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800512c:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <BSP_SDRAM_Init+0xac>)
 800512e:	2204      	movs	r2, #4
 8005130:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8005132:	4b19      	ldr	r3, [pc, #100]	; (8005198 <BSP_SDRAM_Init+0xac>)
 8005134:	2210      	movs	r2, #16
 8005136:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005138:	4b17      	ldr	r3, [pc, #92]	; (8005198 <BSP_SDRAM_Init+0xac>)
 800513a:	2240      	movs	r2, #64	; 0x40
 800513c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800513e:	4b16      	ldr	r3, [pc, #88]	; (8005198 <BSP_SDRAM_Init+0xac>)
 8005140:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005144:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005146:	4b14      	ldr	r3, [pc, #80]	; (8005198 <BSP_SDRAM_Init+0xac>)
 8005148:	2200      	movs	r2, #0
 800514a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800514c:	4b12      	ldr	r3, [pc, #72]	; (8005198 <BSP_SDRAM_Init+0xac>)
 800514e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005152:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005154:	4b10      	ldr	r3, [pc, #64]	; (8005198 <BSP_SDRAM_Init+0xac>)
 8005156:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800515a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800515c:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <BSP_SDRAM_Init+0xac>)
 800515e:	2200      	movs	r2, #0
 8005160:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8005162:	2100      	movs	r1, #0
 8005164:	480c      	ldr	r0, [pc, #48]	; (8005198 <BSP_SDRAM_Init+0xac>)
 8005166:	f000 f87f 	bl	8005268 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800516a:	490d      	ldr	r1, [pc, #52]	; (80051a0 <BSP_SDRAM_Init+0xb4>)
 800516c:	480a      	ldr	r0, [pc, #40]	; (8005198 <BSP_SDRAM_Init+0xac>)
 800516e:	f005 ffcf 	bl	800b110 <HAL_SDRAM_Init>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <BSP_SDRAM_Init+0xb8>)
 800517a:	2201      	movs	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	e002      	b.n	8005186 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005180:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <BSP_SDRAM_Init+0xb8>)
 8005182:	2200      	movs	r2, #0
 8005184:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8005186:	f240 6003 	movw	r0, #1539	; 0x603
 800518a:	f000 f80d 	bl	80051a8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800518e:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <BSP_SDRAM_Init+0xb8>)
 8005190:	781b      	ldrb	r3, [r3, #0]
}
 8005192:	4618      	mov	r0, r3
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20008e50 	.word	0x20008e50
 800519c:	a0000140 	.word	0xa0000140
 80051a0:	20000510 	.word	0x20000510
 80051a4:	2000003c 	.word	0x2000003c

080051a8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80051b4:	4b2a      	ldr	r3, [pc, #168]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80051ba:	4b29      	ldr	r3, [pc, #164]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051bc:	2210      	movs	r2, #16
 80051be:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80051c0:	4b27      	ldr	r3, [pc, #156]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80051c6:	4b26      	ldr	r3, [pc, #152]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80051cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051d0:	4923      	ldr	r1, [pc, #140]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051d2:	4824      	ldr	r0, [pc, #144]	; (8005264 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80051d4:	f005 ffd0 	bl	800b178 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80051d8:	2001      	movs	r0, #1
 80051da:	f001 fadb 	bl	8006794 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80051de:	4b20      	ldr	r3, [pc, #128]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051e0:	2202      	movs	r2, #2
 80051e2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80051e4:	4b1e      	ldr	r3, [pc, #120]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051e6:	2210      	movs	r2, #16
 80051e8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80051ea:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80051f0:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80051f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051fa:	4919      	ldr	r1, [pc, #100]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80051fc:	4819      	ldr	r0, [pc, #100]	; (8005264 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80051fe:	f005 ffbb 	bl	800b178 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005202:	4b17      	ldr	r3, [pc, #92]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005204:	2203      	movs	r2, #3
 8005206:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005208:	4b15      	ldr	r3, [pc, #84]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800520a:	2210      	movs	r2, #16
 800520c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800520e:	4b14      	ldr	r3, [pc, #80]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005210:	2208      	movs	r2, #8
 8005212:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005214:	4b12      	ldr	r3, [pc, #72]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005216:	2200      	movs	r2, #0
 8005218:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800521a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800521e:	4910      	ldr	r1, [pc, #64]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005220:	4810      	ldr	r0, [pc, #64]	; (8005264 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005222:	f005 ffa9 	bl	800b178 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005226:	f44f 7308 	mov.w	r3, #544	; 0x220
 800522a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800522c:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800522e:	2204      	movs	r2, #4
 8005230:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005232:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005234:	2210      	movs	r2, #16
 8005236:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005238:	4b09      	ldr	r3, [pc, #36]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800523a:	2201      	movs	r2, #1
 800523c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4a07      	ldr	r2, [pc, #28]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005242:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005248:	4905      	ldr	r1, [pc, #20]	; (8005260 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800524a:	4806      	ldr	r0, [pc, #24]	; (8005264 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800524c:	f005 ff94 	bl	800b178 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4804      	ldr	r0, [pc, #16]	; (8005264 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005254:	f005 ffc5 	bl	800b1e2 <HAL_SDRAM_ProgramRefreshRate>
}
 8005258:	bf00      	nop
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	2000052c 	.word	0x2000052c
 8005264:	20008e50 	.word	0x20008e50

08005268 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8005268:	b580      	push	{r7, lr}
 800526a:	b090      	sub	sp, #64	; 0x40
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005272:	4b70      	ldr	r3, [pc, #448]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	4a6f      	ldr	r2, [pc, #444]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	6393      	str	r3, [r2, #56]	; 0x38
 800527e:	4b6d      	ldr	r3, [pc, #436]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800528a:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	4a69      	ldr	r2, [pc, #420]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 8005290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005294:	6313      	str	r3, [r2, #48]	; 0x30
 8005296:	4b67      	ldr	r3, [pc, #412]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80052a2:	4b64      	ldr	r3, [pc, #400]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	4a63      	ldr	r2, [pc, #396]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 80052a8:	f043 0304 	orr.w	r3, r3, #4
 80052ac:	6313      	str	r3, [r2, #48]	; 0x30
 80052ae:	4b61      	ldr	r3, [pc, #388]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	623b      	str	r3, [r7, #32]
 80052b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80052ba:	4b5e      	ldr	r3, [pc, #376]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	4a5d      	ldr	r2, [pc, #372]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 80052c0:	f043 0308 	orr.w	r3, r3, #8
 80052c4:	6313      	str	r3, [r2, #48]	; 0x30
 80052c6:	4b5b      	ldr	r3, [pc, #364]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	f003 0308 	and.w	r3, r3, #8
 80052ce:	61fb      	str	r3, [r7, #28]
 80052d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80052d2:	4b58      	ldr	r3, [pc, #352]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	4a57      	ldr	r2, [pc, #348]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 80052d8:	f043 0310 	orr.w	r3, r3, #16
 80052dc:	6313      	str	r3, [r2, #48]	; 0x30
 80052de:	4b55      	ldr	r3, [pc, #340]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80052ea:	4b52      	ldr	r3, [pc, #328]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	4a51      	ldr	r2, [pc, #324]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 80052f0:	f043 0320 	orr.w	r3, r3, #32
 80052f4:	6313      	str	r3, [r2, #48]	; 0x30
 80052f6:	4b4f      	ldr	r3, [pc, #316]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005302:	4b4c      	ldr	r3, [pc, #304]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	4a4b      	ldr	r2, [pc, #300]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 8005308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800530c:	6313      	str	r3, [r2, #48]	; 0x30
 800530e:	4b49      	ldr	r3, [pc, #292]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800531a:	4b46      	ldr	r3, [pc, #280]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	4a45      	ldr	r2, [pc, #276]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 8005320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005324:	6313      	str	r3, [r2, #48]	; 0x30
 8005326:	4b43      	ldr	r3, [pc, #268]	; (8005434 <BSP_SDRAM_MspInit+0x1cc>)
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005332:	2302      	movs	r3, #2
 8005334:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005336:	2301      	movs	r3, #1
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800533a:	2302      	movs	r3, #2
 800533c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800533e:	230c      	movs	r3, #12
 8005340:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8005342:	2308      	movs	r3, #8
 8005344:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800534a:	4619      	mov	r1, r3
 800534c:	483a      	ldr	r0, [pc, #232]	; (8005438 <BSP_SDRAM_MspInit+0x1d0>)
 800534e:	f002 fd55 	bl	8007dfc <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8005352:	f24c 7303 	movw	r3, #50947	; 0xc703
 8005356:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005358:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800535c:	4619      	mov	r1, r3
 800535e:	4837      	ldr	r0, [pc, #220]	; (800543c <BSP_SDRAM_MspInit+0x1d4>)
 8005360:	f002 fd4c 	bl	8007dfc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005364:	f64f 7383 	movw	r3, #65411	; 0xff83
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800536a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800536e:	4619      	mov	r1, r3
 8005370:	4833      	ldr	r0, [pc, #204]	; (8005440 <BSP_SDRAM_MspInit+0x1d8>)
 8005372:	f002 fd43 	bl	8007dfc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005376:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800537a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800537c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005380:	4619      	mov	r1, r3
 8005382:	4830      	ldr	r0, [pc, #192]	; (8005444 <BSP_SDRAM_MspInit+0x1dc>)
 8005384:	f002 fd3a 	bl	8007dfc <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8005388:	f248 1333 	movw	r3, #33075	; 0x8133
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800538e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005392:	4619      	mov	r1, r3
 8005394:	482c      	ldr	r0, [pc, #176]	; (8005448 <BSP_SDRAM_MspInit+0x1e0>)
 8005396:	f002 fd31 	bl	8007dfc <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800539a:	2328      	movs	r3, #40	; 0x28
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800539e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053a2:	4619      	mov	r1, r3
 80053a4:	4829      	ldr	r0, [pc, #164]	; (800544c <BSP_SDRAM_MspInit+0x1e4>)
 80053a6:	f002 fd29 	bl	8007dfc <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80053aa:	4b29      	ldr	r3, [pc, #164]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80053b0:	4b27      	ldr	r3, [pc, #156]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 80053b2:	2280      	movs	r2, #128	; 0x80
 80053b4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80053b6:	4b26      	ldr	r3, [pc, #152]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 80053b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053bc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80053be:	4b24      	ldr	r3, [pc, #144]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 80053c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053c4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80053c6:	4b22      	ldr	r3, [pc, #136]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 80053c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053cc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80053ce:	4b20      	ldr	r3, [pc, #128]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 80053d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053d4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80053d6:	4b1e      	ldr	r3, [pc, #120]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 80053d8:	2200      	movs	r2, #0
 80053da:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80053dc:	4b1c      	ldr	r3, [pc, #112]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 80053de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053e2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80053e4:	4b1a      	ldr	r3, [pc, #104]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80053ea:	4b19      	ldr	r3, [pc, #100]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 80053ec:	2203      	movs	r2, #3
 80053ee:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80053f0:	4b17      	ldr	r3, [pc, #92]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80053f6:	4b16      	ldr	r3, [pc, #88]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80053fc:	4b14      	ldr	r3, [pc, #80]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 80053fe:	4a15      	ldr	r2, [pc, #84]	; (8005454 <BSP_SDRAM_MspInit+0x1ec>)
 8005400:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a12      	ldr	r2, [pc, #72]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
 8005408:	4a11      	ldr	r2, [pc, #68]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800540e:	4810      	ldr	r0, [pc, #64]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 8005410:	f001 ffb6 	bl	8007380 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005414:	480e      	ldr	r0, [pc, #56]	; (8005450 <BSP_SDRAM_MspInit+0x1e8>)
 8005416:	f001 ff05 	bl	8007224 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800541a:	2200      	movs	r2, #0
 800541c:	210f      	movs	r1, #15
 800541e:	2038      	movs	r0, #56	; 0x38
 8005420:	f001 fdf6 	bl	8007010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005424:	2038      	movs	r0, #56	; 0x38
 8005426:	f001 fe0f 	bl	8007048 <HAL_NVIC_EnableIRQ>
}
 800542a:	bf00      	nop
 800542c:	3740      	adds	r7, #64	; 0x40
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40023800 	.word	0x40023800
 8005438:	40020800 	.word	0x40020800
 800543c:	40020c00 	.word	0x40020c00
 8005440:	40021000 	.word	0x40021000
 8005444:	40021400 	.word	0x40021400
 8005448:	40021800 	.word	0x40021800
 800544c:	40021c00 	.word	0x40021c00
 8005450:	2000053c 	.word	0x2000053c
 8005454:	40026410 	.word	0x40026410

08005458 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	460a      	mov	r2, r1
 8005462:	80fb      	strh	r3, [r7, #6]
 8005464:	4613      	mov	r3, r2
 8005466:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800546c:	4a14      	ldr	r2, [pc, #80]	; (80054c0 <BSP_TS_Init+0x68>)
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8005472:	4a14      	ldr	r2, [pc, #80]	; (80054c4 <BSP_TS_Init+0x6c>)
 8005474:	88bb      	ldrh	r3, [r7, #4]
 8005476:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8005478:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <BSP_TS_Init+0x70>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2070      	movs	r0, #112	; 0x70
 800547e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8005480:	4b11      	ldr	r3, [pc, #68]	; (80054c8 <BSP_TS_Init+0x70>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2070      	movs	r0, #112	; 0x70
 8005486:	4798      	blx	r3
 8005488:	4603      	mov	r3, r0
 800548a:	2b51      	cmp	r3, #81	; 0x51
 800548c:	d111      	bne.n	80054b2 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800548e:	4b0f      	ldr	r3, [pc, #60]	; (80054cc <BSP_TS_Init+0x74>)
 8005490:	4a0d      	ldr	r2, [pc, #52]	; (80054c8 <BSP_TS_Init+0x70>)
 8005492:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8005494:	4b0e      	ldr	r3, [pc, #56]	; (80054d0 <BSP_TS_Init+0x78>)
 8005496:	2270      	movs	r2, #112	; 0x70
 8005498:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800549a:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <BSP_TS_Init+0x7c>)
 800549c:	2208      	movs	r2, #8
 800549e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <BSP_TS_Init+0x74>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	4a0a      	ldr	r2, [pc, #40]	; (80054d0 <BSP_TS_Init+0x78>)
 80054a8:	7812      	ldrb	r2, [r2, #0]
 80054aa:	b292      	uxth	r2, r2
 80054ac:	4610      	mov	r0, r2
 80054ae:	4798      	blx	r3
 80054b0:	e001      	b.n	80054b6 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80054b2:	2303      	movs	r3, #3
 80054b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80054b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	200005a0 	.word	0x200005a0
 80054c4:	200005a2 	.word	0x200005a2
 80054c8:	20000000 	.word	0x20000000
 80054cc:	2000059c 	.word	0x2000059c
 80054d0:	200005a5 	.word	0x200005a5
 80054d4:	200005a4 	.word	0x200005a4

080054d8 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Configure Interrupt mode for SD detection pin */
  gpio_init_structure.Pin = TS_INT_PIN;
 80054de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054e2:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80054e8:	2302      	movs	r3, #2
 80054ea:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80054ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80054f0:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 80054f2:	1d3b      	adds	r3, r7, #4
 80054f4:	4619      	mov	r1, r3
 80054f6:	480c      	ldr	r0, [pc, #48]	; (8005528 <BSP_TS_ITConfig+0x50>)
 80054f8:	f002 fc80 	bl	8007dfc <HAL_GPIO_Init>

  /* Enable and set Touch screen EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 80054fc:	2200      	movs	r2, #0
 80054fe:	210f      	movs	r1, #15
 8005500:	2028      	movs	r0, #40	; 0x28
 8005502:	f001 fd85 	bl	8007010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8005506:	2028      	movs	r0, #40	; 0x28
 8005508:	f001 fd9e 	bl	8007048 <HAL_NVIC_EnableIRQ>

  /* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 800550c:	4b07      	ldr	r3, [pc, #28]	; (800552c <BSP_TS_ITConfig+0x54>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	4a07      	ldr	r2, [pc, #28]	; (8005530 <BSP_TS_ITConfig+0x58>)
 8005514:	7812      	ldrb	r2, [r2, #0]
 8005516:	b292      	uxth	r2, r2
 8005518:	4610      	mov	r0, r2
 800551a:	4798      	blx	r3

  return TS_OK;  
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40022000 	.word	0x40022000
 800552c:	2000059c 	.word	0x2000059c
 8005530:	200005a5 	.word	0x200005a5

08005534 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8005534:	b590      	push	{r4, r7, lr}
 8005536:	b097      	sub	sp, #92	; 0x5c
 8005538:	af02      	add	r7, sp, #8
 800553a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8005542:	2300      	movs	r3, #0
 8005544:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800554e:	4b97      	ldr	r3, [pc, #604]	; (80057ac <BSP_TS_GetState+0x278>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	4a96      	ldr	r2, [pc, #600]	; (80057b0 <BSP_TS_GetState+0x27c>)
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	b292      	uxth	r2, r2
 800555a:	4610      	mov	r0, r2
 800555c:	4798      	blx	r3
 800555e:	4603      	mov	r3, r0
 8005560:	461a      	mov	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 81a8 	beq.w	80058c0 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8005570:	2300      	movs	r3, #0
 8005572:	64bb      	str	r3, [r7, #72]	; 0x48
 8005574:	e197      	b.n	80058a6 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8005576:	4b8d      	ldr	r3, [pc, #564]	; (80057ac <BSP_TS_GetState+0x278>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	4a8c      	ldr	r2, [pc, #560]	; (80057b0 <BSP_TS_GetState+0x27c>)
 800557e:	7812      	ldrb	r2, [r2, #0]
 8005580:	b290      	uxth	r0, r2
 8005582:	f107 0120 	add.w	r1, r7, #32
 8005586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005588:	0052      	lsls	r2, r2, #1
 800558a:	188c      	adds	r4, r1, r2
 800558c:	f107 0114 	add.w	r1, r7, #20
 8005590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005592:	0052      	lsls	r2, r2, #1
 8005594:	440a      	add	r2, r1
 8005596:	4621      	mov	r1, r4
 8005598:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800559a:	4b86      	ldr	r3, [pc, #536]	; (80057b4 <BSP_TS_GetState+0x280>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d11b      	bne.n	80055da <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 80055a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80055aa:	4413      	add	r3, r2
 80055ac:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80055b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80055b8:	440b      	add	r3, r1
 80055ba:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80055be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80055c6:	4413      	add	r3, r2
 80055c8:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80055cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80055d4:	440b      	add	r3, r1
 80055d6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80055da:	4b76      	ldr	r3, [pc, #472]	; (80057b4 <BSP_TS_GetState+0x280>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d010      	beq.n	8005608 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 80055e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80055ee:	4413      	add	r3, r2
 80055f0:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80055f4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005602:	440b      	add	r3, r1
 8005604:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8005608:	4b6a      	ldr	r3, [pc, #424]	; (80057b4 <BSP_TS_GetState+0x280>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d010      	beq.n	8005636 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8005614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800561c:	4413      	add	r3, r2
 800561e:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8005622:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8005626:	b29a      	uxth	r2, r3
 8005628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005630:	440b      	add	r3, r1
 8005632:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8005636:	4b5f      	ldr	r3, [pc, #380]	; (80057b4 <BSP_TS_GetState+0x280>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01b      	beq.n	800567a <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8005642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800564a:	4413      	add	r3, r2
 800564c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8005650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005658:	440b      	add	r3, r1
 800565a:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800565e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005666:	4413      	add	r3, r2
 8005668:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800566c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005674:	440b      	add	r3, r1
 8005676:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800567a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005682:	4413      	add	r3, r2
 8005684:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005688:	4619      	mov	r1, r3
 800568a:	4a4b      	ldr	r2, [pc, #300]	; (80057b8 <BSP_TS_GetState+0x284>)
 800568c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800568e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005692:	4299      	cmp	r1, r3
 8005694:	d90e      	bls.n	80056b4 <BSP_TS_GetState+0x180>
 8005696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800569e:	4413      	add	r3, r2
 80056a0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80056a4:	4944      	ldr	r1, [pc, #272]	; (80057b8 <BSP_TS_GetState+0x284>)
 80056a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	e00d      	b.n	80056d0 <BSP_TS_GetState+0x19c>
 80056b4:	4a40      	ldr	r2, [pc, #256]	; (80057b8 <BSP_TS_GetState+0x284>)
 80056b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056bc:	b29a      	uxth	r2, r3
 80056be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80056c6:	440b      	add	r3, r1
 80056c8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80056d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80056dc:	4413      	add	r3, r2
 80056de:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80056e2:	4619      	mov	r1, r3
 80056e4:	4a35      	ldr	r2, [pc, #212]	; (80057bc <BSP_TS_GetState+0x288>)
 80056e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ec:	4299      	cmp	r1, r3
 80056ee:	d90e      	bls.n	800570e <BSP_TS_GetState+0x1da>
 80056f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80056f8:	4413      	add	r3, r2
 80056fa:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80056fe:	492f      	ldr	r1, [pc, #188]	; (80057bc <BSP_TS_GetState+0x288>)
 8005700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005702:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005706:	b29b      	uxth	r3, r3
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	b29b      	uxth	r3, r3
 800570c:	e00d      	b.n	800572a <BSP_TS_GetState+0x1f6>
 800570e:	4a2b      	ldr	r2, [pc, #172]	; (80057bc <BSP_TS_GetState+0x288>)
 8005710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005716:	b29a      	uxth	r2, r3
 8005718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8005720:	440b      	add	r3, r1
 8005722:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	b29b      	uxth	r3, r3
 800572a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800572e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8005732:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005736:	4413      	add	r3, r2
 8005738:	2b05      	cmp	r3, #5
 800573a:	dd17      	ble.n	800576c <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 800573c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005744:	4413      	add	r3, r2
 8005746:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800574a:	4619      	mov	r1, r3
 800574c:	4a1a      	ldr	r2, [pc, #104]	; (80057b8 <BSP_TS_GetState+0x284>)
 800574e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005750:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8005754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800575c:	4413      	add	r3, r2
 800575e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005762:	4619      	mov	r1, r3
 8005764:	4a15      	ldr	r2, [pc, #84]	; (80057bc <BSP_TS_GetState+0x288>)
 8005766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005768:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800576c:	4b10      	ldr	r3, [pc, #64]	; (80057b0 <BSP_TS_GetState+0x27c>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b70      	cmp	r3, #112	; 0x70
 8005772:	d125      	bne.n	80057c0 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8005774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800577c:	4413      	add	r3, r2
 800577e:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4413      	add	r3, r2
 800578a:	460a      	mov	r2, r1
 800578c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800578e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005796:	4413      	add	r3, r2
 8005798:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a0:	3304      	adds	r3, #4
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	4413      	add	r3, r2
 80057a6:	460a      	mov	r2, r1
 80057a8:	809a      	strh	r2, [r3, #4]
 80057aa:	e02c      	b.n	8005806 <BSP_TS_GetState+0x2d2>
 80057ac:	2000059c 	.word	0x2000059c
 80057b0:	200005a5 	.word	0x200005a5
 80057b4:	200005a4 	.word	0x200005a4
 80057b8:	200005a8 	.word	0x200005a8
 80057bc:	200005bc 	.word	0x200005bc
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80057c0:	4b42      	ldr	r3, [pc, #264]	; (80058cc <BSP_TS_GetState+0x398>)
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	4619      	mov	r1, r3
 80057c6:	4a42      	ldr	r2, [pc, #264]	; (80058d0 <BSP_TS_GetState+0x39c>)
 80057c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ce:	fb03 f301 	mul.w	r3, r3, r1
 80057d2:	0b1b      	lsrs	r3, r3, #12
 80057d4:	b299      	uxth	r1, r3
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	4413      	add	r3, r2
 80057de:	460a      	mov	r2, r1
 80057e0:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80057e2:	4b3c      	ldr	r3, [pc, #240]	; (80058d4 <BSP_TS_GetState+0x3a0>)
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	4619      	mov	r1, r3
 80057e8:	4a3b      	ldr	r2, [pc, #236]	; (80058d8 <BSP_TS_GetState+0x3a4>)
 80057ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f0:	fb03 f301 	mul.w	r3, r3, r1
 80057f4:	0b1b      	lsrs	r3, r3, #12
 80057f6:	b299      	uxth	r1, r3
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057fc:	3304      	adds	r3, #4
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	4413      	add	r3, r2
 8005802:	460a      	mov	r2, r1
 8005804:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8005806:	4b35      	ldr	r3, [pc, #212]	; (80058dc <BSP_TS_GetState+0x3a8>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	b298      	uxth	r0, r3
 800580c:	f107 010c 	add.w	r1, r7, #12
 8005810:	f107 0210 	add.w	r2, r7, #16
 8005814:	f107 0308 	add.w	r3, r7, #8
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	460b      	mov	r3, r1
 800581c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800581e:	f7fb f857 	bl	80008d0 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	b2d9      	uxtb	r1, r3
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800582a:	4413      	add	r3, r2
 800582c:	3316      	adds	r3, #22
 800582e:	460a      	mov	r2, r1
 8005830:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	b2d9      	uxtb	r1, r3
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800583a:	4413      	add	r3, r2
 800583c:	3320      	adds	r3, #32
 800583e:	460a      	mov	r2, r1
 8005840:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b03      	cmp	r3, #3
 8005846:	d827      	bhi.n	8005898 <BSP_TS_GetState+0x364>
 8005848:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <BSP_TS_GetState+0x31c>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	08005861 	.word	0x08005861
 8005854:	0800586f 	.word	0x0800586f
 8005858:	0800587d 	.word	0x0800587d
 800585c:	0800588b 	.word	0x0800588b
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005864:	4413      	add	r3, r2
 8005866:	331b      	adds	r3, #27
 8005868:	2201      	movs	r2, #1
 800586a:	701a      	strb	r2, [r3, #0]
          break;
 800586c:	e018      	b.n	80058a0 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005872:	4413      	add	r3, r2
 8005874:	331b      	adds	r3, #27
 8005876:	2202      	movs	r2, #2
 8005878:	701a      	strb	r2, [r3, #0]
          break;
 800587a:	e011      	b.n	80058a0 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005880:	4413      	add	r3, r2
 8005882:	331b      	adds	r3, #27
 8005884:	2203      	movs	r2, #3
 8005886:	701a      	strb	r2, [r3, #0]
          break;
 8005888:	e00a      	b.n	80058a0 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800588e:	4413      	add	r3, r2
 8005890:	331b      	adds	r3, #27
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
          break;
 8005896:	e003      	b.n	80058a0 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800589e:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80058a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a2:	3301      	adds	r3, #1
 80058a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ae:	4293      	cmp	r3, r2
 80058b0:	f4ff ae61 	bcc.w	8005576 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f813 	bl	80058e0 <BSP_TS_Get_GestureId>
 80058ba:	4603      	mov	r3, r0
 80058bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80058c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3754      	adds	r7, #84	; 0x54
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd90      	pop	{r4, r7, pc}
 80058cc:	200005a0 	.word	0x200005a0
 80058d0:	200005a8 	.word	0x200005a8
 80058d4:	200005a2 	.word	0x200005a2
 80058d8:	200005bc 	.word	0x200005bc
 80058dc:	200005a5 	.word	0x200005a5

080058e0 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80058f0:	4b3b      	ldr	r3, [pc, #236]	; (80059e0 <BSP_TS_Get_GestureId+0x100>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f107 0208 	add.w	r2, r7, #8
 80058fa:	4611      	mov	r1, r2
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fa ffce 	bl	800089e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b49      	cmp	r3, #73	; 0x49
 8005906:	d05e      	beq.n	80059c6 <BSP_TS_Get_GestureId+0xe6>
 8005908:	2b49      	cmp	r3, #73	; 0x49
 800590a:	d860      	bhi.n	80059ce <BSP_TS_Get_GestureId+0xee>
 800590c:	2b1c      	cmp	r3, #28
 800590e:	d83f      	bhi.n	8005990 <BSP_TS_Get_GestureId+0xb0>
 8005910:	2b1c      	cmp	r3, #28
 8005912:	d85c      	bhi.n	80059ce <BSP_TS_Get_GestureId+0xee>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <BSP_TS_Get_GestureId+0x3c>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	08005997 	.word	0x08005997
 8005920:	080059cf 	.word	0x080059cf
 8005924:	080059cf 	.word	0x080059cf
 8005928:	080059cf 	.word	0x080059cf
 800592c:	080059cf 	.word	0x080059cf
 8005930:	080059cf 	.word	0x080059cf
 8005934:	080059cf 	.word	0x080059cf
 8005938:	080059cf 	.word	0x080059cf
 800593c:	080059cf 	.word	0x080059cf
 8005940:	080059cf 	.word	0x080059cf
 8005944:	080059cf 	.word	0x080059cf
 8005948:	080059cf 	.word	0x080059cf
 800594c:	080059cf 	.word	0x080059cf
 8005950:	080059cf 	.word	0x080059cf
 8005954:	080059cf 	.word	0x080059cf
 8005958:	080059cf 	.word	0x080059cf
 800595c:	0800599f 	.word	0x0800599f
 8005960:	080059cf 	.word	0x080059cf
 8005964:	080059cf 	.word	0x080059cf
 8005968:	080059cf 	.word	0x080059cf
 800596c:	080059a7 	.word	0x080059a7
 8005970:	080059cf 	.word	0x080059cf
 8005974:	080059cf 	.word	0x080059cf
 8005978:	080059cf 	.word	0x080059cf
 800597c:	080059af 	.word	0x080059af
 8005980:	080059cf 	.word	0x080059cf
 8005984:	080059cf 	.word	0x080059cf
 8005988:	080059cf 	.word	0x080059cf
 800598c:	080059b7 	.word	0x080059b7
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d014      	beq.n	80059be <BSP_TS_Get_GestureId+0xde>
 8005994:	e01b      	b.n	80059ce <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800599c:	e01a      	b.n	80059d4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80059a4:	e016      	b.n	80059d4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2202      	movs	r2, #2
 80059aa:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80059ac:	e012      	b.n	80059d4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2203      	movs	r2, #3
 80059b2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80059b4:	e00e      	b.n	80059d4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2204      	movs	r2, #4
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80059bc:	e00a      	b.n	80059d4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2205      	movs	r2, #5
 80059c2:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80059c4:	e006      	b.n	80059d4 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2206      	movs	r2, #6
 80059ca:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80059cc:	e002      	b.n	80059d4 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
      break;
 80059d2:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	200005a5 	.word	0x200005a5

080059e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80059ea:	4b11      	ldr	r3, [pc, #68]	; (8005a30 <HAL_MspInit+0x4c>)
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	4a10      	ldr	r2, [pc, #64]	; (8005a30 <HAL_MspInit+0x4c>)
 80059f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f4:	6413      	str	r3, [r2, #64]	; 0x40
 80059f6:	4b0e      	ldr	r3, [pc, #56]	; (8005a30 <HAL_MspInit+0x4c>)
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fe:	607b      	str	r3, [r7, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a02:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <HAL_MspInit+0x4c>)
 8005a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a06:	4a0a      	ldr	r2, [pc, #40]	; (8005a30 <HAL_MspInit+0x4c>)
 8005a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a0e:	4b08      	ldr	r3, [pc, #32]	; (8005a30 <HAL_MspInit+0x4c>)
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	210f      	movs	r1, #15
 8005a1e:	f06f 0001 	mvn.w	r0, #1
 8005a22:	f001 faf5 	bl	8007010 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40023800 	.word	0x40023800

08005a34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08c      	sub	sp, #48	; 0x30
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a3c:	f107 031c 	add.w	r3, r7, #28
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	605a      	str	r2, [r3, #4]
 8005a46:	609a      	str	r2, [r3, #8]
 8005a48:	60da      	str	r2, [r3, #12]
 8005a4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2a      	ldr	r2, [pc, #168]	; (8005afc <HAL_ADC_MspInit+0xc8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d124      	bne.n	8005aa0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005a56:	4b2a      	ldr	r3, [pc, #168]	; (8005b00 <HAL_ADC_MspInit+0xcc>)
 8005a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5a:	4a29      	ldr	r2, [pc, #164]	; (8005b00 <HAL_ADC_MspInit+0xcc>)
 8005a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a60:	6453      	str	r3, [r2, #68]	; 0x44
 8005a62:	4b27      	ldr	r3, [pc, #156]	; (8005b00 <HAL_ADC_MspInit+0xcc>)
 8005a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <HAL_ADC_MspInit+0xcc>)
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	4a23      	ldr	r2, [pc, #140]	; (8005b00 <HAL_ADC_MspInit+0xcc>)
 8005a74:	f043 0301 	orr.w	r3, r3, #1
 8005a78:	6313      	str	r3, [r2, #48]	; 0x30
 8005a7a:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <HAL_ADC_MspInit+0xcc>)
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a86:	2301      	movs	r3, #1
 8005a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a92:	f107 031c 	add.w	r3, r7, #28
 8005a96:	4619      	mov	r1, r3
 8005a98:	481a      	ldr	r0, [pc, #104]	; (8005b04 <HAL_ADC_MspInit+0xd0>)
 8005a9a:	f002 f9af 	bl	8007dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005a9e:	e029      	b.n	8005af4 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a18      	ldr	r2, [pc, #96]	; (8005b08 <HAL_ADC_MspInit+0xd4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d124      	bne.n	8005af4 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005aaa:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <HAL_ADC_MspInit+0xcc>)
 8005aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aae:	4a14      	ldr	r2, [pc, #80]	; (8005b00 <HAL_ADC_MspInit+0xcc>)
 8005ab0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ab6:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <HAL_ADC_MspInit+0xcc>)
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005ac2:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <HAL_ADC_MspInit+0xcc>)
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	4a0e      	ldr	r2, [pc, #56]	; (8005b00 <HAL_ADC_MspInit+0xcc>)
 8005ac8:	f043 0320 	orr.w	r3, r3, #32
 8005acc:	6313      	str	r3, [r2, #48]	; 0x30
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <HAL_ADC_MspInit+0xcc>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8005ada:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005ae8:	f107 031c 	add.w	r3, r7, #28
 8005aec:	4619      	mov	r1, r3
 8005aee:	4807      	ldr	r0, [pc, #28]	; (8005b0c <HAL_ADC_MspInit+0xd8>)
 8005af0:	f002 f984 	bl	8007dfc <HAL_GPIO_Init>
}
 8005af4:	bf00      	nop
 8005af6:	3730      	adds	r7, #48	; 0x30
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	40012000 	.word	0x40012000
 8005b00:	40023800 	.word	0x40023800
 8005b04:	40020000 	.word	0x40020000
 8005b08:	40012200 	.word	0x40012200
 8005b0c:	40021400 	.word	0x40021400

08005b10 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	; 0x28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b18:	f107 0314 	add.w	r3, r7, #20
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	609a      	str	r2, [r3, #8]
 8005b24:	60da      	str	r2, [r3, #12]
 8005b26:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a19      	ldr	r2, [pc, #100]	; (8005b94 <HAL_DAC_MspInit+0x84>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d12b      	bne.n	8005b8a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8005b32:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <HAL_DAC_MspInit+0x88>)
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	4a18      	ldr	r2, [pc, #96]	; (8005b98 <HAL_DAC_MspInit+0x88>)
 8005b38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b3e:	4b16      	ldr	r3, [pc, #88]	; (8005b98 <HAL_DAC_MspInit+0x88>)
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b4a:	4b13      	ldr	r3, [pc, #76]	; (8005b98 <HAL_DAC_MspInit+0x88>)
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	4a12      	ldr	r2, [pc, #72]	; (8005b98 <HAL_DAC_MspInit+0x88>)
 8005b50:	f043 0301 	orr.w	r3, r3, #1
 8005b54:	6313      	str	r3, [r2, #48]	; 0x30
 8005b56:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <HAL_DAC_MspInit+0x88>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005b62:	2310      	movs	r3, #16
 8005b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005b66:	2303      	movs	r3, #3
 8005b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b6e:	f107 0314 	add.w	r3, r7, #20
 8005b72:	4619      	mov	r1, r3
 8005b74:	4809      	ldr	r0, [pc, #36]	; (8005b9c <HAL_DAC_MspInit+0x8c>)
 8005b76:	f002 f941 	bl	8007dfc <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	210f      	movs	r1, #15
 8005b7e:	2036      	movs	r0, #54	; 0x36
 8005b80:	f001 fa46 	bl	8007010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005b84:	2036      	movs	r0, #54	; 0x36
 8005b86:	f001 fa5f 	bl	8007048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005b8a:	bf00      	nop
 8005b8c:	3728      	adds	r7, #40	; 0x28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	40007400 	.word	0x40007400
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	40020000 	.word	0x40020000

08005ba0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a0d      	ldr	r2, [pc, #52]	; (8005be4 <HAL_DMA2D_MspInit+0x44>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d113      	bne.n	8005bda <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	; (8005be8 <HAL_DMA2D_MspInit+0x48>)
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	4a0c      	ldr	r2, [pc, #48]	; (8005be8 <HAL_DMA2D_MspInit+0x48>)
 8005bb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8005bbe:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <HAL_DMA2D_MspInit+0x48>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2105      	movs	r1, #5
 8005bce:	205a      	movs	r0, #90	; 0x5a
 8005bd0:	f001 fa1e 	bl	8007010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8005bd4:	205a      	movs	r0, #90	; 0x5a
 8005bd6:	f001 fa37 	bl	8007048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	4002b000 	.word	0x4002b000
 8005be8:	40023800 	.word	0x40023800

08005bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b0ac      	sub	sp, #176	; 0xb0
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	609a      	str	r2, [r3, #8]
 8005c00:	60da      	str	r2, [r3, #12]
 8005c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c04:	f107 0318 	add.w	r3, r7, #24
 8005c08:	2284      	movs	r2, #132	; 0x84
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f009 fddd 	bl	800f7cc <memset>
  if(hi2c->Instance==I2C1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a44      	ldr	r2, [pc, #272]	; (8005d28 <HAL_I2C_MspInit+0x13c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d13d      	bne.n	8005c98 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005c1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c20:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005c22:	2300      	movs	r3, #0
 8005c24:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c26:	f107 0318 	add.w	r3, r7, #24
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f004 faa8 	bl	800a180 <HAL_RCCEx_PeriphCLKConfig>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005c36:	f7fe f841 	bl	8003cbc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c3a:	4b3c      	ldr	r3, [pc, #240]	; (8005d2c <HAL_I2C_MspInit+0x140>)
 8005c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3e:	4a3b      	ldr	r2, [pc, #236]	; (8005d2c <HAL_I2C_MspInit+0x140>)
 8005c40:	f043 0302 	orr.w	r3, r3, #2
 8005c44:	6313      	str	r3, [r2, #48]	; 0x30
 8005c46:	4b39      	ldr	r3, [pc, #228]	; (8005d2c <HAL_I2C_MspInit+0x140>)
 8005c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005c52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005c56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c5a:	2312      	movs	r3, #18
 8005c5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c66:	2303      	movs	r3, #3
 8005c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005c6c:	2304      	movs	r3, #4
 8005c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005c76:	4619      	mov	r1, r3
 8005c78:	482d      	ldr	r0, [pc, #180]	; (8005d30 <HAL_I2C_MspInit+0x144>)
 8005c7a:	f002 f8bf 	bl	8007dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c7e:	4b2b      	ldr	r3, [pc, #172]	; (8005d2c <HAL_I2C_MspInit+0x140>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	4a2a      	ldr	r2, [pc, #168]	; (8005d2c <HAL_I2C_MspInit+0x140>)
 8005c84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c88:	6413      	str	r3, [r2, #64]	; 0x40
 8005c8a:	4b28      	ldr	r3, [pc, #160]	; (8005d2c <HAL_I2C_MspInit+0x140>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005c96:	e042      	b.n	8005d1e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a25      	ldr	r2, [pc, #148]	; (8005d34 <HAL_I2C_MspInit+0x148>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d13d      	bne.n	8005d1e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8005ca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ca6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cae:	f107 0318 	add.w	r3, r7, #24
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f004 fa64 	bl	800a180 <HAL_RCCEx_PeriphCLKConfig>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8005cbe:	f7fd fffd 	bl	8003cbc <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005cc2:	4b1a      	ldr	r3, [pc, #104]	; (8005d2c <HAL_I2C_MspInit+0x140>)
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc6:	4a19      	ldr	r2, [pc, #100]	; (8005d2c <HAL_I2C_MspInit+0x140>)
 8005cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8005cce:	4b17      	ldr	r3, [pc, #92]	; (8005d2c <HAL_I2C_MspInit+0x140>)
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8005cda:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005cde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ce2:	2312      	movs	r3, #18
 8005ce4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005cf4:	2304      	movs	r3, #4
 8005cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005cfa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005cfe:	4619      	mov	r1, r3
 8005d00:	480d      	ldr	r0, [pc, #52]	; (8005d38 <HAL_I2C_MspInit+0x14c>)
 8005d02:	f002 f87b 	bl	8007dfc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005d06:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <HAL_I2C_MspInit+0x140>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	4a08      	ldr	r2, [pc, #32]	; (8005d2c <HAL_I2C_MspInit+0x140>)
 8005d0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d10:	6413      	str	r3, [r2, #64]	; 0x40
 8005d12:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <HAL_I2C_MspInit+0x140>)
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d1a:	60bb      	str	r3, [r7, #8]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
}
 8005d1e:	bf00      	nop
 8005d20:	37b0      	adds	r7, #176	; 0xb0
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40005400 	.word	0x40005400
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	40020400 	.word	0x40020400
 8005d34:	40005c00 	.word	0x40005c00
 8005d38:	40021c00 	.word	0x40021c00

08005d3c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a15      	ldr	r2, [pc, #84]	; (8005da0 <HAL_I2C_MspDeInit+0x64>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d110      	bne.n	8005d70 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005d4e:	4b15      	ldr	r3, [pc, #84]	; (8005da4 <HAL_I2C_MspDeInit+0x68>)
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	4a14      	ldr	r2, [pc, #80]	; (8005da4 <HAL_I2C_MspDeInit+0x68>)
 8005d54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d58:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8005d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d5e:	4812      	ldr	r0, [pc, #72]	; (8005da8 <HAL_I2C_MspDeInit+0x6c>)
 8005d60:	f002 f9f8 	bl	8008154 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8005d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d68:	480f      	ldr	r0, [pc, #60]	; (8005da8 <HAL_I2C_MspDeInit+0x6c>)
 8005d6a:	f002 f9f3 	bl	8008154 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005d6e:	e013      	b.n	8005d98 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a0d      	ldr	r2, [pc, #52]	; (8005dac <HAL_I2C_MspDeInit+0x70>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d10e      	bne.n	8005d98 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005d7a:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <HAL_I2C_MspDeInit+0x68>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <HAL_I2C_MspDeInit+0x68>)
 8005d80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005d84:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8005d86:	2180      	movs	r1, #128	; 0x80
 8005d88:	4809      	ldr	r0, [pc, #36]	; (8005db0 <HAL_I2C_MspDeInit+0x74>)
 8005d8a:	f002 f9e3 	bl	8008154 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8005d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d92:	4807      	ldr	r0, [pc, #28]	; (8005db0 <HAL_I2C_MspDeInit+0x74>)
 8005d94:	f002 f9de 	bl	8008154 <HAL_GPIO_DeInit>
}
 8005d98:	bf00      	nop
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40005400 	.word	0x40005400
 8005da4:	40023800 	.word	0x40023800
 8005da8:	40020400 	.word	0x40020400
 8005dac:	40005c00 	.word	0x40005c00
 8005db0:	40021c00 	.word	0x40021c00

08005db4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b0ae      	sub	sp, #184	; 0xb8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	605a      	str	r2, [r3, #4]
 8005dc6:	609a      	str	r2, [r3, #8]
 8005dc8:	60da      	str	r2, [r3, #12]
 8005dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005dcc:	f107 0320 	add.w	r3, r7, #32
 8005dd0:	2284      	movs	r2, #132	; 0x84
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f009 fcf9 	bl	800f7cc <memset>
  if(hltdc->Instance==LTDC)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a6f      	ldr	r2, [pc, #444]	; (8005f9c <HAL_LTDC_MspInit+0x1e8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	f040 80d6 	bne.w	8005f92 <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005de6:	2308      	movs	r3, #8
 8005de8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8005dea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005dee:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8005df0:	2305      	movs	r3, #5
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8005df4:	2302      	movs	r3, #2
 8005df6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8005e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e04:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e06:	f107 0320 	add.w	r3, r7, #32
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f004 f9b8 	bl	800a180 <HAL_RCCEx_PeriphCLKConfig>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8005e16:	f7fd ff51 	bl	8003cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005e1a:	4b61      	ldr	r3, [pc, #388]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1e:	4a60      	ldr	r2, [pc, #384]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e24:	6453      	str	r3, [r2, #68]	; 0x44
 8005e26:	4b5e      	ldr	r3, [pc, #376]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e32:	4b5b      	ldr	r3, [pc, #364]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	4a5a      	ldr	r2, [pc, #360]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e38:	f043 0310 	orr.w	r3, r3, #16
 8005e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e3e:	4b58      	ldr	r3, [pc, #352]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	f003 0310 	and.w	r3, r3, #16
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005e4a:	4b55      	ldr	r3, [pc, #340]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	4a54      	ldr	r2, [pc, #336]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e54:	6313      	str	r3, [r2, #48]	; 0x30
 8005e56:	4b52      	ldr	r3, [pc, #328]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8005e62:	4b4f      	ldr	r3, [pc, #316]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	4a4e      	ldr	r2, [pc, #312]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e6e:	4b4c      	ldr	r3, [pc, #304]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e7a:	4b49      	ldr	r3, [pc, #292]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	4a48      	ldr	r2, [pc, #288]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e84:	6313      	str	r3, [r2, #48]	; 0x30
 8005e86:	4b46      	ldr	r3, [pc, #280]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005e92:	4b43      	ldr	r3, [pc, #268]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	4a42      	ldr	r2, [pc, #264]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e9e:	4b40      	ldr	r3, [pc, #256]	; (8005fa0 <HAL_LTDC_MspInit+0x1ec>)
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea6:	60bb      	str	r3, [r7, #8]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8005eaa:	2310      	movs	r3, #16
 8005eac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005ec2:	230e      	movs	r3, #14
 8005ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8005ec8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4835      	ldr	r0, [pc, #212]	; (8005fa4 <HAL_LTDC_MspInit+0x1f0>)
 8005ed0:	f001 ff94 	bl	8007dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8005ed4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8005ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005edc:	2302      	movs	r3, #2
 8005ede:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005eee:	230e      	movs	r3, #14
 8005ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8005ef4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	482b      	ldr	r0, [pc, #172]	; (8005fa8 <HAL_LTDC_MspInit+0x1f4>)
 8005efc:	f001 ff7e 	bl	8007dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8005f00:	23f7      	movs	r3, #247	; 0xf7
 8005f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f06:	2302      	movs	r3, #2
 8005f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f12:	2300      	movs	r3, #0
 8005f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005f18:	230e      	movs	r3, #14
 8005f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8005f1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005f22:	4619      	mov	r1, r3
 8005f24:	4821      	ldr	r0, [pc, #132]	; (8005fac <HAL_LTDC_MspInit+0x1f8>)
 8005f26:	f001 ff69 	bl	8007dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8005f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f32:	2302      	movs	r3, #2
 8005f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005f44:	2309      	movs	r3, #9
 8005f46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8005f4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4817      	ldr	r0, [pc, #92]	; (8005fb0 <HAL_LTDC_MspInit+0x1fc>)
 8005f52:	f001 ff53 	bl	8007dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8005f56:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8005f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f64:	2300      	movs	r3, #0
 8005f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005f70:	230e      	movs	r3, #14
 8005f72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005f76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	480d      	ldr	r0, [pc, #52]	; (8005fb4 <HAL_LTDC_MspInit+0x200>)
 8005f7e:	f001 ff3d 	bl	8007dfc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8005f82:	2200      	movs	r2, #0
 8005f84:	2105      	movs	r1, #5
 8005f86:	2058      	movs	r0, #88	; 0x58
 8005f88:	f001 f842 	bl	8007010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005f8c:	2058      	movs	r0, #88	; 0x58
 8005f8e:	f001 f85b 	bl	8007048 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8005f92:	bf00      	nop
 8005f94:	37b8      	adds	r7, #184	; 0xb8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	40016800 	.word	0x40016800
 8005fa0:	40023800 	.word	0x40023800
 8005fa4:	40021000 	.word	0x40021000
 8005fa8:	40022400 	.word	0x40022400
 8005fac:	40022800 	.word	0x40022800
 8005fb0:	40021800 	.word	0x40021800
 8005fb4:	40022000 	.word	0x40022000

08005fb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b0a4      	sub	sp, #144	; 0x90
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fc0:	f107 030c 	add.w	r3, r7, #12
 8005fc4:	2284      	movs	r2, #132	; 0x84
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f009 fbff 	bl	800f7cc <memset>
  if(hrtc->Instance==RTC)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a0e      	ldr	r2, [pc, #56]	; (800600c <HAL_RTC_MspInit+0x54>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d114      	bne.n	8006002 <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005fd8:	2320      	movs	r3, #32
 8005fda:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fe2:	f107 030c 	add.w	r3, r7, #12
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f004 f8ca 	bl	800a180 <HAL_RCCEx_PeriphCLKConfig>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005ff2:	f7fd fe63 	bl	8003cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005ff6:	4b06      	ldr	r3, [pc, #24]	; (8006010 <HAL_RTC_MspInit+0x58>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	4a05      	ldr	r2, [pc, #20]	; (8006010 <HAL_RTC_MspInit+0x58>)
 8005ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006000:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006002:	bf00      	nop
 8006004:	3790      	adds	r7, #144	; 0x90
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40002800 	.word	0x40002800
 8006010:	40023800 	.word	0x40023800

08006014 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800601c:	f107 0314 	add.w	r3, r7, #20
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	605a      	str	r2, [r3, #4]
 8006026:	609a      	str	r2, [r3, #8]
 8006028:	60da      	str	r2, [r3, #12]
 800602a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a25      	ldr	r2, [pc, #148]	; (80060c8 <HAL_SPI_MspInit+0xb4>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d144      	bne.n	80060c0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006036:	4b25      	ldr	r3, [pc, #148]	; (80060cc <HAL_SPI_MspInit+0xb8>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	4a24      	ldr	r2, [pc, #144]	; (80060cc <HAL_SPI_MspInit+0xb8>)
 800603c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006040:	6413      	str	r3, [r2, #64]	; 0x40
 8006042:	4b22      	ldr	r3, [pc, #136]	; (80060cc <HAL_SPI_MspInit+0xb8>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800604a:	613b      	str	r3, [r7, #16]
 800604c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800604e:	4b1f      	ldr	r3, [pc, #124]	; (80060cc <HAL_SPI_MspInit+0xb8>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	4a1e      	ldr	r2, [pc, #120]	; (80060cc <HAL_SPI_MspInit+0xb8>)
 8006054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006058:	6313      	str	r3, [r2, #48]	; 0x30
 800605a:	4b1c      	ldr	r3, [pc, #112]	; (80060cc <HAL_SPI_MspInit+0xb8>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006066:	4b19      	ldr	r3, [pc, #100]	; (80060cc <HAL_SPI_MspInit+0xb8>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	4a18      	ldr	r2, [pc, #96]	; (80060cc <HAL_SPI_MspInit+0xb8>)
 800606c:	f043 0302 	orr.w	r3, r3, #2
 8006070:	6313      	str	r3, [r2, #48]	; 0x30
 8006072:	4b16      	ldr	r3, [pc, #88]	; (80060cc <HAL_SPI_MspInit+0xb8>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	60bb      	str	r3, [r7, #8]
 800607c:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800607e:	2303      	movs	r3, #3
 8006080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006082:	2302      	movs	r3, #2
 8006084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006086:	2300      	movs	r3, #0
 8006088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800608a:	2303      	movs	r3, #3
 800608c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800608e:	2305      	movs	r3, #5
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006092:	f107 0314 	add.w	r3, r7, #20
 8006096:	4619      	mov	r1, r3
 8006098:	480d      	ldr	r0, [pc, #52]	; (80060d0 <HAL_SPI_MspInit+0xbc>)
 800609a:	f001 feaf 	bl	8007dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800609e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80060a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060a4:	2302      	movs	r3, #2
 80060a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060ac:	2300      	movs	r3, #0
 80060ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80060b0:	2305      	movs	r3, #5
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060b4:	f107 0314 	add.w	r3, r7, #20
 80060b8:	4619      	mov	r1, r3
 80060ba:	4806      	ldr	r0, [pc, #24]	; (80060d4 <HAL_SPI_MspInit+0xc0>)
 80060bc:	f001 fe9e 	bl	8007dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80060c0:	bf00      	nop
 80060c2:	3728      	adds	r7, #40	; 0x28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40003800 	.word	0x40003800
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40022000 	.word	0x40022000
 80060d4:	40020400 	.word	0x40020400

080060d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08e      	sub	sp, #56	; 0x38
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a3b      	ldr	r2, [pc, #236]	; (80061e4 <HAL_TIM_Base_MspInit+0x10c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d10c      	bne.n	8006114 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80060fa:	4b3b      	ldr	r3, [pc, #236]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 80060fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fe:	4a3a      	ldr	r2, [pc, #232]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 8006100:	f043 0301 	orr.w	r3, r3, #1
 8006104:	6453      	str	r3, [r2, #68]	; 0x44
 8006106:	4b38      	ldr	r3, [pc, #224]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 8006108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	623b      	str	r3, [r7, #32]
 8006110:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006112:	e062      	b.n	80061da <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611c:	d10c      	bne.n	8006138 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800611e:	4b32      	ldr	r3, [pc, #200]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	4a31      	ldr	r2, [pc, #196]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 8006124:	f043 0301 	orr.w	r3, r3, #1
 8006128:	6413      	str	r3, [r2, #64]	; 0x40
 800612a:	4b2f      	ldr	r3, [pc, #188]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	61fb      	str	r3, [r7, #28]
 8006134:	69fb      	ldr	r3, [r7, #28]
}
 8006136:	e050      	b.n	80061da <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a2b      	ldr	r2, [pc, #172]	; (80061ec <HAL_TIM_Base_MspInit+0x114>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d10c      	bne.n	800615c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006142:	4b29      	ldr	r3, [pc, #164]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	4a28      	ldr	r2, [pc, #160]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 8006148:	f043 0302 	orr.w	r3, r3, #2
 800614c:	6413      	str	r3, [r2, #64]	; 0x40
 800614e:	4b26      	ldr	r3, [pc, #152]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	61bb      	str	r3, [r7, #24]
 8006158:	69bb      	ldr	r3, [r7, #24]
}
 800615a:	e03e      	b.n	80061da <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a23      	ldr	r2, [pc, #140]	; (80061f0 <HAL_TIM_Base_MspInit+0x118>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d10c      	bne.n	8006180 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006166:	4b20      	ldr	r3, [pc, #128]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	4a1f      	ldr	r2, [pc, #124]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 800616c:	f043 0308 	orr.w	r3, r3, #8
 8006170:	6413      	str	r3, [r2, #64]	; 0x40
 8006172:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	f003 0308 	and.w	r3, r3, #8
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	697b      	ldr	r3, [r7, #20]
}
 800617e:	e02c      	b.n	80061da <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1b      	ldr	r2, [pc, #108]	; (80061f4 <HAL_TIM_Base_MspInit+0x11c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d127      	bne.n	80061da <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800618a:	4b17      	ldr	r3, [pc, #92]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 800618c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618e:	4a16      	ldr	r2, [pc, #88]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 8006190:	f043 0302 	orr.w	r3, r3, #2
 8006194:	6453      	str	r3, [r2, #68]	; 0x44
 8006196:	4b14      	ldr	r3, [pc, #80]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 8006198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619a:	f003 0302 	and.w	r3, r3, #2
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80061a2:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	4a10      	ldr	r2, [pc, #64]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 80061a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ac:	6313      	str	r3, [r2, #48]	; 0x30
 80061ae:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <HAL_TIM_Base_MspInit+0x110>)
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80061ba:	2304      	movs	r3, #4
 80061bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061be:	2302      	movs	r3, #2
 80061c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061c6:	2300      	movs	r3, #0
 80061c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80061ca:	2303      	movs	r3, #3
 80061cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80061ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061d2:	4619      	mov	r1, r3
 80061d4:	4808      	ldr	r0, [pc, #32]	; (80061f8 <HAL_TIM_Base_MspInit+0x120>)
 80061d6:	f001 fe11 	bl	8007dfc <HAL_GPIO_Init>
}
 80061da:	bf00      	nop
 80061dc:	3738      	adds	r7, #56	; 0x38
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40023800 	.word	0x40023800
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40000c00 	.word	0x40000c00
 80061f4:	40010400 	.word	0x40010400
 80061f8:	40022000 	.word	0x40022000

080061fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b0b0      	sub	sp, #192	; 0xc0
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006204:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	609a      	str	r2, [r3, #8]
 8006210:	60da      	str	r2, [r3, #12]
 8006212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006214:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006218:	2284      	movs	r2, #132	; 0x84
 800621a:	2100      	movs	r1, #0
 800621c:	4618      	mov	r0, r3
 800621e:	f009 fad5 	bl	800f7cc <memset>
  if(huart->Instance==UART7)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a79      	ldr	r2, [pc, #484]	; (800640c <HAL_UART_MspInit+0x210>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d13d      	bne.n	80062a8 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800622c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006230:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8006232:	2300      	movs	r3, #0
 8006234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800623c:	4618      	mov	r0, r3
 800623e:	f003 ff9f 	bl	800a180 <HAL_RCCEx_PeriphCLKConfig>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006248:	f7fd fd38 	bl	8003cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800624c:	4b70      	ldr	r3, [pc, #448]	; (8006410 <HAL_UART_MspInit+0x214>)
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	4a6f      	ldr	r2, [pc, #444]	; (8006410 <HAL_UART_MspInit+0x214>)
 8006252:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006256:	6413      	str	r3, [r2, #64]	; 0x40
 8006258:	4b6d      	ldr	r3, [pc, #436]	; (8006410 <HAL_UART_MspInit+0x214>)
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006260:	627b      	str	r3, [r7, #36]	; 0x24
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006264:	4b6a      	ldr	r3, [pc, #424]	; (8006410 <HAL_UART_MspInit+0x214>)
 8006266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006268:	4a69      	ldr	r2, [pc, #420]	; (8006410 <HAL_UART_MspInit+0x214>)
 800626a:	f043 0320 	orr.w	r3, r3, #32
 800626e:	6313      	str	r3, [r2, #48]	; 0x30
 8006270:	4b67      	ldr	r3, [pc, #412]	; (8006410 <HAL_UART_MspInit+0x214>)
 8006272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006274:	f003 0320 	and.w	r3, r3, #32
 8006278:	623b      	str	r3, [r7, #32]
 800627a:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800627c:	23c0      	movs	r3, #192	; 0xc0
 800627e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006282:	2302      	movs	r3, #2
 8006284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006288:	2300      	movs	r3, #0
 800628a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800628e:	2303      	movs	r3, #3
 8006290:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006294:	2308      	movs	r3, #8
 8006296:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800629a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800629e:	4619      	mov	r1, r3
 80062a0:	485c      	ldr	r0, [pc, #368]	; (8006414 <HAL_UART_MspInit+0x218>)
 80062a2:	f001 fdab 	bl	8007dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80062a6:	e0ac      	b.n	8006402 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a5a      	ldr	r2, [pc, #360]	; (8006418 <HAL_UART_MspInit+0x21c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d165      	bne.n	800637e <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80062b2:	2340      	movs	r3, #64	; 0x40
 80062b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80062b6:	2300      	movs	r3, #0
 80062b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062be:	4618      	mov	r0, r3
 80062c0:	f003 ff5e 	bl	800a180 <HAL_RCCEx_PeriphCLKConfig>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80062ca:	f7fd fcf7 	bl	8003cbc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80062ce:	4b50      	ldr	r3, [pc, #320]	; (8006410 <HAL_UART_MspInit+0x214>)
 80062d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d2:	4a4f      	ldr	r2, [pc, #316]	; (8006410 <HAL_UART_MspInit+0x214>)
 80062d4:	f043 0310 	orr.w	r3, r3, #16
 80062d8:	6453      	str	r3, [r2, #68]	; 0x44
 80062da:	4b4d      	ldr	r3, [pc, #308]	; (8006410 <HAL_UART_MspInit+0x214>)
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062e6:	4b4a      	ldr	r3, [pc, #296]	; (8006410 <HAL_UART_MspInit+0x214>)
 80062e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ea:	4a49      	ldr	r2, [pc, #292]	; (8006410 <HAL_UART_MspInit+0x214>)
 80062ec:	f043 0302 	orr.w	r3, r3, #2
 80062f0:	6313      	str	r3, [r2, #48]	; 0x30
 80062f2:	4b47      	ldr	r3, [pc, #284]	; (8006410 <HAL_UART_MspInit+0x214>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062fe:	4b44      	ldr	r3, [pc, #272]	; (8006410 <HAL_UART_MspInit+0x214>)
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	4a43      	ldr	r2, [pc, #268]	; (8006410 <HAL_UART_MspInit+0x214>)
 8006304:	f043 0301 	orr.w	r3, r3, #1
 8006308:	6313      	str	r3, [r2, #48]	; 0x30
 800630a:	4b41      	ldr	r3, [pc, #260]	; (8006410 <HAL_UART_MspInit+0x214>)
 800630c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8006316:	2380      	movs	r3, #128	; 0x80
 8006318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800631c:	2302      	movs	r3, #2
 800631e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006322:	2300      	movs	r3, #0
 8006324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006328:	2300      	movs	r3, #0
 800632a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800632e:	2307      	movs	r3, #7
 8006330:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8006334:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006338:	4619      	mov	r1, r3
 800633a:	4838      	ldr	r0, [pc, #224]	; (800641c <HAL_UART_MspInit+0x220>)
 800633c:	f001 fd5e 	bl	8007dfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8006340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006344:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006348:	2302      	movs	r3, #2
 800634a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800634e:	2300      	movs	r3, #0
 8006350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006354:	2300      	movs	r3, #0
 8006356:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800635a:	2307      	movs	r3, #7
 800635c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8006360:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006364:	4619      	mov	r1, r3
 8006366:	482e      	ldr	r0, [pc, #184]	; (8006420 <HAL_UART_MspInit+0x224>)
 8006368:	f001 fd48 	bl	8007dfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800636c:	2200      	movs	r2, #0
 800636e:	2105      	movs	r1, #5
 8006370:	2025      	movs	r0, #37	; 0x25
 8006372:	f000 fe4d 	bl	8007010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006376:	2025      	movs	r0, #37	; 0x25
 8006378:	f000 fe66 	bl	8007048 <HAL_NVIC_EnableIRQ>
}
 800637c:	e041      	b.n	8006402 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a28      	ldr	r2, [pc, #160]	; (8006424 <HAL_UART_MspInit+0x228>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d13c      	bne.n	8006402 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8006388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800638e:	2300      	movs	r3, #0
 8006390:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006398:	4618      	mov	r0, r3
 800639a:	f003 fef1 	bl	800a180 <HAL_RCCEx_PeriphCLKConfig>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 80063a4:	f7fd fc8a 	bl	8003cbc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80063a8:	4b19      	ldr	r3, [pc, #100]	; (8006410 <HAL_UART_MspInit+0x214>)
 80063aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ac:	4a18      	ldr	r2, [pc, #96]	; (8006410 <HAL_UART_MspInit+0x214>)
 80063ae:	f043 0320 	orr.w	r3, r3, #32
 80063b2:	6453      	str	r3, [r2, #68]	; 0x44
 80063b4:	4b16      	ldr	r3, [pc, #88]	; (8006410 <HAL_UART_MspInit+0x214>)
 80063b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80063c0:	4b13      	ldr	r3, [pc, #76]	; (8006410 <HAL_UART_MspInit+0x214>)
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	4a12      	ldr	r2, [pc, #72]	; (8006410 <HAL_UART_MspInit+0x214>)
 80063c6:	f043 0304 	orr.w	r3, r3, #4
 80063ca:	6313      	str	r3, [r2, #48]	; 0x30
 80063cc:	4b10      	ldr	r3, [pc, #64]	; (8006410 <HAL_UART_MspInit+0x214>)
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80063d8:	23c0      	movs	r3, #192	; 0xc0
 80063da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063de:	2302      	movs	r3, #2
 80063e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063ea:	2303      	movs	r3, #3
 80063ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80063f0:	2308      	movs	r3, #8
 80063f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80063fa:	4619      	mov	r1, r3
 80063fc:	480a      	ldr	r0, [pc, #40]	; (8006428 <HAL_UART_MspInit+0x22c>)
 80063fe:	f001 fcfd 	bl	8007dfc <HAL_GPIO_Init>
}
 8006402:	bf00      	nop
 8006404:	37c0      	adds	r7, #192	; 0xc0
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	40007800 	.word	0x40007800
 8006410:	40023800 	.word	0x40023800
 8006414:	40021400 	.word	0x40021400
 8006418:	40011000 	.word	0x40011000
 800641c:	40020400 	.word	0x40020400
 8006420:	40020000 	.word	0x40020000
 8006424:	40011400 	.word	0x40011400
 8006428:	40020800 	.word	0x40020800

0800642c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8006432:	1d3b      	adds	r3, r7, #4
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	605a      	str	r2, [r3, #4]
 800643a:	609a      	str	r2, [r3, #8]
 800643c:	60da      	str	r2, [r3, #12]
 800643e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8006440:	4b3a      	ldr	r3, [pc, #232]	; (800652c <HAL_FMC_MspInit+0x100>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d16d      	bne.n	8006524 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8006448:	4b38      	ldr	r3, [pc, #224]	; (800652c <HAL_FMC_MspInit+0x100>)
 800644a:	2201      	movs	r2, #1
 800644c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800644e:	4b38      	ldr	r3, [pc, #224]	; (8006530 <HAL_FMC_MspInit+0x104>)
 8006450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006452:	4a37      	ldr	r2, [pc, #220]	; (8006530 <HAL_FMC_MspInit+0x104>)
 8006454:	f043 0301 	orr.w	r3, r3, #1
 8006458:	6393      	str	r3, [r2, #56]	; 0x38
 800645a:	4b35      	ldr	r3, [pc, #212]	; (8006530 <HAL_FMC_MspInit+0x104>)
 800645c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8006466:	f64f 7383 	movw	r3, #65411	; 0xff83
 800646a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800646c:	2302      	movs	r3, #2
 800646e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006474:	2303      	movs	r3, #3
 8006476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006478:	230c      	movs	r3, #12
 800647a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800647c:	1d3b      	adds	r3, r7, #4
 800647e:	4619      	mov	r1, r3
 8006480:	482c      	ldr	r0, [pc, #176]	; (8006534 <HAL_FMC_MspInit+0x108>)
 8006482:	f001 fcbb 	bl	8007dfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8006486:	f248 1333 	movw	r3, #33075	; 0x8133
 800648a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800648c:	2302      	movs	r3, #2
 800648e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006494:	2303      	movs	r3, #3
 8006496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006498:	230c      	movs	r3, #12
 800649a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	4619      	mov	r1, r3
 80064a0:	4825      	ldr	r0, [pc, #148]	; (8006538 <HAL_FMC_MspInit+0x10c>)
 80064a2:	f001 fcab 	bl	8007dfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80064a6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80064aa:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ac:	2302      	movs	r3, #2
 80064ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064b4:	2303      	movs	r3, #3
 80064b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80064b8:	230c      	movs	r3, #12
 80064ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064bc:	1d3b      	adds	r3, r7, #4
 80064be:	4619      	mov	r1, r3
 80064c0:	481e      	ldr	r0, [pc, #120]	; (800653c <HAL_FMC_MspInit+0x110>)
 80064c2:	f001 fc9b 	bl	8007dfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80064c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80064ca:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064cc:	2302      	movs	r3, #2
 80064ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064d0:	2300      	movs	r3, #0
 80064d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064d4:	2303      	movs	r3, #3
 80064d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80064d8:	230c      	movs	r3, #12
 80064da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80064dc:	1d3b      	adds	r3, r7, #4
 80064de:	4619      	mov	r1, r3
 80064e0:	4817      	ldr	r0, [pc, #92]	; (8006540 <HAL_FMC_MspInit+0x114>)
 80064e2:	f001 fc8b 	bl	8007dfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80064e6:	2328      	movs	r3, #40	; 0x28
 80064e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ea:	2302      	movs	r3, #2
 80064ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064f2:	2303      	movs	r3, #3
 80064f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80064f6:	230c      	movs	r3, #12
 80064f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80064fa:	1d3b      	adds	r3, r7, #4
 80064fc:	4619      	mov	r1, r3
 80064fe:	4811      	ldr	r0, [pc, #68]	; (8006544 <HAL_FMC_MspInit+0x118>)
 8006500:	f001 fc7c 	bl	8007dfc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8006504:	2308      	movs	r3, #8
 8006506:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006508:	2302      	movs	r3, #2
 800650a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006510:	2303      	movs	r3, #3
 8006512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006514:	230c      	movs	r3, #12
 8006516:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8006518:	1d3b      	adds	r3, r7, #4
 800651a:	4619      	mov	r1, r3
 800651c:	480a      	ldr	r0, [pc, #40]	; (8006548 <HAL_FMC_MspInit+0x11c>)
 800651e:	f001 fc6d 	bl	8007dfc <HAL_GPIO_Init>
 8006522:	e000      	b.n	8006526 <HAL_FMC_MspInit+0xfa>
    return;
 8006524:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	200005d0 	.word	0x200005d0
 8006530:	40023800 	.word	0x40023800
 8006534:	40021000 	.word	0x40021000
 8006538:	40021800 	.word	0x40021800
 800653c:	40020c00 	.word	0x40020c00
 8006540:	40021400 	.word	0x40021400
 8006544:	40021c00 	.word	0x40021c00
 8006548:	40020800 	.word	0x40020800

0800654c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006554:	f7ff ff6a 	bl	800642c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006558:	bf00      	nop
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08c      	sub	sp, #48	; 0x30
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006570:	2200      	movs	r2, #0
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	2036      	movs	r0, #54	; 0x36
 8006576:	f000 fd4b 	bl	8007010 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800657a:	2036      	movs	r0, #54	; 0x36
 800657c:	f000 fd64 	bl	8007048 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006580:	4b1f      	ldr	r3, [pc, #124]	; (8006600 <HAL_InitTick+0xa0>)
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <HAL_InitTick+0xa0>)
 8006586:	f043 0310 	orr.w	r3, r3, #16
 800658a:	6413      	str	r3, [r2, #64]	; 0x40
 800658c:	4b1c      	ldr	r3, [pc, #112]	; (8006600 <HAL_InitTick+0xa0>)
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006598:	f107 0210 	add.w	r2, r7, #16
 800659c:	f107 0314 	add.w	r3, r7, #20
 80065a0:	4611      	mov	r1, r2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f003 fdba 	bl	800a11c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80065a8:	f003 fd90 	bl	800a0cc <HAL_RCC_GetPCLK1Freq>
 80065ac:	4603      	mov	r3, r0
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80065b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b4:	4a13      	ldr	r2, [pc, #76]	; (8006604 <HAL_InitTick+0xa4>)
 80065b6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ba:	0c9b      	lsrs	r3, r3, #18
 80065bc:	3b01      	subs	r3, #1
 80065be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80065c0:	4b11      	ldr	r3, [pc, #68]	; (8006608 <HAL_InitTick+0xa8>)
 80065c2:	4a12      	ldr	r2, [pc, #72]	; (800660c <HAL_InitTick+0xac>)
 80065c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80065c6:	4b10      	ldr	r3, [pc, #64]	; (8006608 <HAL_InitTick+0xa8>)
 80065c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80065cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80065ce:	4a0e      	ldr	r2, [pc, #56]	; (8006608 <HAL_InitTick+0xa8>)
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80065d4:	4b0c      	ldr	r3, [pc, #48]	; (8006608 <HAL_InitTick+0xa8>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065da:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <HAL_InitTick+0xa8>)
 80065dc:	2200      	movs	r2, #0
 80065de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80065e0:	4809      	ldr	r0, [pc, #36]	; (8006608 <HAL_InitTick+0xa8>)
 80065e2:	f004 fed1 	bl	800b388 <HAL_TIM_Base_Init>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d104      	bne.n	80065f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80065ec:	4806      	ldr	r0, [pc, #24]	; (8006608 <HAL_InitTick+0xa8>)
 80065ee:	f004 ff23 	bl	800b438 <HAL_TIM_Base_Start_IT>
 80065f2:	4603      	mov	r3, r0
 80065f4:	e000      	b.n	80065f8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3730      	adds	r7, #48	; 0x30
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	40023800 	.word	0x40023800
 8006604:	431bde83 	.word	0x431bde83
 8006608:	20008e84 	.word	0x20008e84
 800660c:	40001000 	.word	0x40001000

08006610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006614:	e7fe      	b.n	8006614 <NMI_Handler+0x4>

08006616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006616:	b480      	push	{r7}
 8006618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800661a:	e7fe      	b.n	800661a <HardFault_Handler+0x4>

0800661c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006620:	e7fe      	b.n	8006620 <MemManage_Handler+0x4>

08006622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006622:	b480      	push	{r7}
 8006624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006626:	e7fe      	b.n	8006626 <BusFault_Handler+0x4>

08006628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006628:	b480      	push	{r7}
 800662a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800662c:	e7fe      	b.n	800662c <UsageFault_Handler+0x4>

0800662e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800662e:	b480      	push	{r7}
 8006630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006632:	bf00      	nop
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006640:	4802      	ldr	r0, [pc, #8]	; (800664c <USART1_IRQHandler+0x10>)
 8006642:	f005 fbb7 	bl	800bdb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006646:	bf00      	nop
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20008554 	.word	0x20008554

08006650 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWDIO_Pin);
 8006654:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006658:	f001 febc 	bl	80083d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800665c:	bf00      	nop
 800665e:	bd80      	pop	{r7, pc}

08006660 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8006664:	4b06      	ldr	r3, [pc, #24]	; (8006680 <TIM6_DAC_IRQHandler+0x20>)
 8006666:	791b      	ldrb	r3, [r3, #4]
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800666e:	4804      	ldr	r0, [pc, #16]	; (8006680 <TIM6_DAC_IRQHandler+0x20>)
 8006670:	f000 fd1a 	bl	80070a8 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8006674:	4803      	ldr	r0, [pc, #12]	; (8006684 <TIM6_DAC_IRQHandler+0x24>)
 8006676:	f004 ff57 	bl	800b528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800667a:	bf00      	nop
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	200085dc 	.word	0x200085dc
 8006684:	20008e84 	.word	0x20008e84

08006688 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800668c:	4802      	ldr	r0, [pc, #8]	; (8006698 <LTDC_IRQHandler+0x10>)
 800668e:	f002 fdc3 	bl	8009218 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8006692:	bf00      	nop
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	20008414 	.word	0x20008414

0800669c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80066a0:	4802      	ldr	r0, [pc, #8]	; (80066ac <DMA2D_IRQHandler+0x10>)
 80066a2:	f001 f96d 	bl	8007980 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80066a6:	bf00      	nop
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20008ce4 	.word	0x20008ce4

080066b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80066b0:	b480      	push	{r7}
 80066b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80066b4:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <SystemInit+0x20>)
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ba:	4a05      	ldr	r2, [pc, #20]	; (80066d0 <SystemInit+0x20>)
 80066bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80066c4:	bf00      	nop
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	e000ed00 	.word	0xe000ed00

080066d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80066d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800670c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80066d8:	480d      	ldr	r0, [pc, #52]	; (8006710 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80066da:	490e      	ldr	r1, [pc, #56]	; (8006714 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80066dc:	4a0e      	ldr	r2, [pc, #56]	; (8006718 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80066de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066e0:	e002      	b.n	80066e8 <LoopCopyDataInit>

080066e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066e6:	3304      	adds	r3, #4

080066e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066ec:	d3f9      	bcc.n	80066e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066ee:	4a0b      	ldr	r2, [pc, #44]	; (800671c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80066f0:	4c0b      	ldr	r4, [pc, #44]	; (8006720 <LoopFillZerobss+0x26>)
  movs r3, #0
 80066f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066f4:	e001      	b.n	80066fa <LoopFillZerobss>

080066f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066f8:	3204      	adds	r2, #4

080066fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066fc:	d3fb      	bcc.n	80066f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80066fe:	f7ff ffd7 	bl	80066b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006702:	f009 f82f 	bl	800f764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006706:	f7fb f901 	bl	800190c <main>
  bx  lr    
 800670a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800670c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006714:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8006718:	08035d10 	.word	0x08035d10
  ldr r2, =_sbss
 800671c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8006720:	20008ee0 	.word	0x20008ee0

08006724 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006724:	e7fe      	b.n	8006724 <ADC_IRQHandler>
	...

08006728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800672c:	4b08      	ldr	r3, [pc, #32]	; (8006750 <HAL_Init+0x28>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a07      	ldr	r2, [pc, #28]	; (8006750 <HAL_Init+0x28>)
 8006732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006738:	2003      	movs	r0, #3
 800673a:	f000 fc5e 	bl	8006ffa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800673e:	200f      	movs	r0, #15
 8006740:	f7ff ff0e 	bl	8006560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006744:	f7ff f94e 	bl	80059e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40023c00 	.word	0x40023c00

08006754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006754:	b480      	push	{r7}
 8006756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006758:	4b06      	ldr	r3, [pc, #24]	; (8006774 <HAL_IncTick+0x20>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	4b06      	ldr	r3, [pc, #24]	; (8006778 <HAL_IncTick+0x24>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4413      	add	r3, r2
 8006764:	4a04      	ldr	r2, [pc, #16]	; (8006778 <HAL_IncTick+0x24>)
 8006766:	6013      	str	r3, [r2, #0]
}
 8006768:	bf00      	nop
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	20000048 	.word	0x20000048
 8006778:	20008ed0 	.word	0x20008ed0

0800677c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  return uwTick;
 8006780:	4b03      	ldr	r3, [pc, #12]	; (8006790 <HAL_GetTick+0x14>)
 8006782:	681b      	ldr	r3, [r3, #0]
}
 8006784:	4618      	mov	r0, r3
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20008ed0 	.word	0x20008ed0

08006794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800679c:	f7ff ffee 	bl	800677c <HAL_GetTick>
 80067a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ac:	d005      	beq.n	80067ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80067ae:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <HAL_Delay+0x44>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80067ba:	bf00      	nop
 80067bc:	f7ff ffde 	bl	800677c <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d8f7      	bhi.n	80067bc <HAL_Delay+0x28>
  {
  }
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000048 	.word	0x20000048

080067dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e031      	b.n	8006856 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d109      	bne.n	800680e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff f91a 	bl	8005a34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	f003 0310 	and.w	r3, r3, #16
 8006816:	2b00      	cmp	r3, #0
 8006818:	d116      	bne.n	8006848 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800681e:	4b10      	ldr	r3, [pc, #64]	; (8006860 <HAL_ADC_Init+0x84>)
 8006820:	4013      	ands	r3, r2
 8006822:	f043 0202 	orr.w	r2, r3, #2
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fa3e 	bl	8006cac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	f023 0303 	bic.w	r3, r3, #3
 800683e:	f043 0201 	orr.w	r2, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	641a      	str	r2, [r3, #64]	; 0x40
 8006846:	e001      	b.n	800684c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	ffffeefd 	.word	0xffffeefd

08006864 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <HAL_ADC_Start+0x1a>
 800687a:	2302      	movs	r3, #2
 800687c:	e0ad      	b.n	80069da <HAL_ADC_Start+0x176>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b01      	cmp	r3, #1
 8006892:	d018      	beq.n	80068c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80068a4:	4b50      	ldr	r3, [pc, #320]	; (80069e8 <HAL_ADC_Start+0x184>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a50      	ldr	r2, [pc, #320]	; (80069ec <HAL_ADC_Start+0x188>)
 80068aa:	fba2 2303 	umull	r2, r3, r2, r3
 80068ae:	0c9a      	lsrs	r2, r3, #18
 80068b0:	4613      	mov	r3, r2
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	4413      	add	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80068b8:	e002      	b.n	80068c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3b01      	subs	r3, #1
 80068be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f9      	bne.n	80068ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d175      	bne.n	80069c0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068d8:	4b45      	ldr	r3, [pc, #276]	; (80069f0 <HAL_ADC_Start+0x18c>)
 80068da:	4013      	ands	r3, r2
 80068dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d007      	beq.n	8006902 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80068fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800690a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690e:	d106      	bne.n	800691e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006914:	f023 0206 	bic.w	r2, r3, #6
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	645a      	str	r2, [r3, #68]	; 0x44
 800691c:	e002      	b.n	8006924 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006934:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006936:	4b2f      	ldr	r3, [pc, #188]	; (80069f4 <HAL_ADC_Start+0x190>)
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f003 031f 	and.w	r3, r3, #31
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10f      	bne.n	8006962 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d143      	bne.n	80069d8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800695e:	609a      	str	r2, [r3, #8]
 8006960:	e03a      	b.n	80069d8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a24      	ldr	r2, [pc, #144]	; (80069f8 <HAL_ADC_Start+0x194>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d10e      	bne.n	800698a <HAL_ADC_Start+0x126>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d107      	bne.n	800698a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006988:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800698a:	4b1a      	ldr	r3, [pc, #104]	; (80069f4 <HAL_ADC_Start+0x190>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b00      	cmp	r3, #0
 8006994:	d120      	bne.n	80069d8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a18      	ldr	r2, [pc, #96]	; (80069fc <HAL_ADC_Start+0x198>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d11b      	bne.n	80069d8 <HAL_ADC_Start+0x174>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d114      	bne.n	80069d8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80069bc:	609a      	str	r2, [r3, #8]
 80069be:	e00b      	b.n	80069d8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c4:	f043 0210 	orr.w	r2, r3, #16
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d0:	f043 0201 	orr.w	r2, r3, #1
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	20000040 	.word	0x20000040
 80069ec:	431bde83 	.word	0x431bde83
 80069f0:	fffff8fe 	.word	0xfffff8fe
 80069f4:	40012300 	.word	0x40012300
 80069f8:	40012000 	.word	0x40012000
 80069fc:	40012200 	.word	0x40012200

08006a00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d101      	bne.n	8006a1c <HAL_ADC_ConfigChannel+0x1c>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	e136      	b.n	8006c8a <HAL_ADC_ConfigChannel+0x28a>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b09      	cmp	r3, #9
 8006a2a:	d93a      	bls.n	8006aa2 <HAL_ADC_ConfigChannel+0xa2>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a34:	d035      	beq.n	8006aa2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68d9      	ldr	r1, [r3, #12]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	461a      	mov	r2, r3
 8006a44:	4613      	mov	r3, r2
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	4413      	add	r3, r2
 8006a4a:	3b1e      	subs	r3, #30
 8006a4c:	2207      	movs	r2, #7
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	43da      	mvns	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	400a      	ands	r2, r1
 8006a5a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a8d      	ldr	r2, [pc, #564]	; (8006c98 <HAL_ADC_ConfigChannel+0x298>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d10a      	bne.n	8006a7c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68d9      	ldr	r1, [r3, #12]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	061a      	lsls	r2, r3, #24
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a7a:	e035      	b.n	8006ae8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68d9      	ldr	r1, [r3, #12]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	4603      	mov	r3, r0
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	4403      	add	r3, r0
 8006a94:	3b1e      	subs	r3, #30
 8006a96:	409a      	lsls	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006aa0:	e022      	b.n	8006ae8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6919      	ldr	r1, [r3, #16]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	4413      	add	r3, r2
 8006ab6:	2207      	movs	r2, #7
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	43da      	mvns	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	400a      	ands	r2, r1
 8006ac4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6919      	ldr	r1, [r3, #16]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689a      	ldr	r2, [r3, #8]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	4603      	mov	r3, r0
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	4403      	add	r3, r0
 8006ade:	409a      	lsls	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2b06      	cmp	r3, #6
 8006aee:	d824      	bhi.n	8006b3a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	3b05      	subs	r3, #5
 8006b02:	221f      	movs	r2, #31
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	43da      	mvns	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	400a      	ands	r2, r1
 8006b10:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	4618      	mov	r0, r3
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	3b05      	subs	r3, #5
 8006b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	635a      	str	r2, [r3, #52]	; 0x34
 8006b38:	e04c      	b.n	8006bd4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b0c      	cmp	r3, #12
 8006b40:	d824      	bhi.n	8006b8c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	3b23      	subs	r3, #35	; 0x23
 8006b54:	221f      	movs	r2, #31
 8006b56:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5a:	43da      	mvns	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	400a      	ands	r2, r1
 8006b62:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	4618      	mov	r0, r3
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	3b23      	subs	r3, #35	; 0x23
 8006b7e:	fa00 f203 	lsl.w	r2, r0, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	631a      	str	r2, [r3, #48]	; 0x30
 8006b8a:	e023      	b.n	8006bd4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	4613      	mov	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	3b41      	subs	r3, #65	; 0x41
 8006b9e:	221f      	movs	r2, #31
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	43da      	mvns	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	400a      	ands	r2, r1
 8006bac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	4618      	mov	r0, r3
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3b41      	subs	r3, #65	; 0x41
 8006bc8:	fa00 f203 	lsl.w	r2, r0, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a30      	ldr	r2, [pc, #192]	; (8006c9c <HAL_ADC_ConfigChannel+0x29c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d10a      	bne.n	8006bf4 <HAL_ADC_ConfigChannel+0x1f4>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006be6:	d105      	bne.n	8006bf4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006be8:	4b2d      	ldr	r3, [pc, #180]	; (8006ca0 <HAL_ADC_ConfigChannel+0x2a0>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	4a2c      	ldr	r2, [pc, #176]	; (8006ca0 <HAL_ADC_ConfigChannel+0x2a0>)
 8006bee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006bf2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a28      	ldr	r2, [pc, #160]	; (8006c9c <HAL_ADC_ConfigChannel+0x29c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d10f      	bne.n	8006c1e <HAL_ADC_ConfigChannel+0x21e>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b12      	cmp	r3, #18
 8006c04:	d10b      	bne.n	8006c1e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8006c06:	4b26      	ldr	r3, [pc, #152]	; (8006ca0 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	4a25      	ldr	r2, [pc, #148]	; (8006ca0 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006c10:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8006c12:	4b23      	ldr	r3, [pc, #140]	; (8006ca0 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	4a22      	ldr	r2, [pc, #136]	; (8006ca0 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c1c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a1e      	ldr	r2, [pc, #120]	; (8006c9c <HAL_ADC_ConfigChannel+0x29c>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d12b      	bne.n	8006c80 <HAL_ADC_ConfigChannel+0x280>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a1a      	ldr	r2, [pc, #104]	; (8006c98 <HAL_ADC_ConfigChannel+0x298>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d003      	beq.n	8006c3a <HAL_ADC_ConfigChannel+0x23a>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2b11      	cmp	r3, #17
 8006c38:	d122      	bne.n	8006c80 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8006c3a:	4b19      	ldr	r3, [pc, #100]	; (8006ca0 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	4a18      	ldr	r2, [pc, #96]	; (8006ca0 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006c44:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006c46:	4b16      	ldr	r3, [pc, #88]	; (8006ca0 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	4a15      	ldr	r2, [pc, #84]	; (8006ca0 <HAL_ADC_ConfigChannel+0x2a0>)
 8006c4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c50:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a10      	ldr	r2, [pc, #64]	; (8006c98 <HAL_ADC_ConfigChannel+0x298>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d111      	bne.n	8006c80 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006c5c:	4b11      	ldr	r3, [pc, #68]	; (8006ca4 <HAL_ADC_ConfigChannel+0x2a4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a11      	ldr	r2, [pc, #68]	; (8006ca8 <HAL_ADC_ConfigChannel+0x2a8>)
 8006c62:	fba2 2303 	umull	r2, r3, r2, r3
 8006c66:	0c9a      	lsrs	r2, r3, #18
 8006c68:	4613      	mov	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006c72:	e002      	b.n	8006c7a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1f9      	bne.n	8006c74 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	10000012 	.word	0x10000012
 8006c9c:	40012000 	.word	0x40012000
 8006ca0:	40012300 	.word	0x40012300
 8006ca4:	20000040 	.word	0x20000040
 8006ca8:	431bde83 	.word	0x431bde83

08006cac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006cb4:	4b78      	ldr	r3, [pc, #480]	; (8006e98 <ADC_Init+0x1ec>)
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	4a77      	ldr	r2, [pc, #476]	; (8006e98 <ADC_Init+0x1ec>)
 8006cba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006cbe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006cc0:	4b75      	ldr	r3, [pc, #468]	; (8006e98 <ADC_Init+0x1ec>)
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	4973      	ldr	r1, [pc, #460]	; (8006e98 <ADC_Init+0x1ec>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6859      	ldr	r1, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	021a      	lsls	r2, r3, #8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006d00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6859      	ldr	r1, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689a      	ldr	r2, [r3, #8]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6899      	ldr	r1, [r3, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3a:	4a58      	ldr	r2, [pc, #352]	; (8006e9c <ADC_Init+0x1f0>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d022      	beq.n	8006d86 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6899      	ldr	r1, [r3, #8]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6899      	ldr	r1, [r3, #8]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	609a      	str	r2, [r3, #8]
 8006d84:	e00f      	b.n	8006da6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689a      	ldr	r2, [r3, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006da4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0202 	bic.w	r2, r2, #2
 8006db4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6899      	ldr	r1, [r3, #8]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	005a      	lsls	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d01b      	beq.n	8006e0c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006de2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006df2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6859      	ldr	r1, [r3, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	3b01      	subs	r3, #1
 8006e00:	035a      	lsls	r2, r3, #13
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
 8006e0a:	e007      	b.n	8006e1c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	3b01      	subs	r3, #1
 8006e38:	051a      	lsls	r2, r3, #20
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6899      	ldr	r1, [r3, #8]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e5e:	025a      	lsls	r2, r3, #9
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	430a      	orrs	r2, r1
 8006e66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6899      	ldr	r1, [r3, #8]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	029a      	lsls	r2, r3, #10
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	609a      	str	r2, [r3, #8]
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40012300 	.word	0x40012300
 8006e9c:	0f000001 	.word	0x0f000001

08006ea0 <__NVIC_SetPriorityGrouping>:
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f003 0307 	and.w	r3, r3, #7
 8006eae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006ec8:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ece:	4a04      	ldr	r2, [pc, #16]	; (8006ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	60d3      	str	r3, [r2, #12]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	e000ed00 	.word	0xe000ed00
 8006ee4:	05fa0000 	.word	0x05fa0000

08006ee8 <__NVIC_GetPriorityGrouping>:
{
 8006ee8:	b480      	push	{r7}
 8006eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006eec:	4b04      	ldr	r3, [pc, #16]	; (8006f00 <__NVIC_GetPriorityGrouping+0x18>)
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	0a1b      	lsrs	r3, r3, #8
 8006ef2:	f003 0307 	and.w	r3, r3, #7
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	e000ed00 	.word	0xe000ed00

08006f04 <__NVIC_EnableIRQ>:
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	db0b      	blt.n	8006f2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	f003 021f 	and.w	r2, r3, #31
 8006f1c:	4907      	ldr	r1, [pc, #28]	; (8006f3c <__NVIC_EnableIRQ+0x38>)
 8006f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	2001      	movs	r0, #1
 8006f26:	fa00 f202 	lsl.w	r2, r0, r2
 8006f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	e000e100 	.word	0xe000e100

08006f40 <__NVIC_SetPriority>:
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	6039      	str	r1, [r7, #0]
 8006f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	db0a      	blt.n	8006f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	b2da      	uxtb	r2, r3
 8006f58:	490c      	ldr	r1, [pc, #48]	; (8006f8c <__NVIC_SetPriority+0x4c>)
 8006f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f5e:	0112      	lsls	r2, r2, #4
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	440b      	add	r3, r1
 8006f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f68:	e00a      	b.n	8006f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	4908      	ldr	r1, [pc, #32]	; (8006f90 <__NVIC_SetPriority+0x50>)
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	f003 030f 	and.w	r3, r3, #15
 8006f76:	3b04      	subs	r3, #4
 8006f78:	0112      	lsls	r2, r2, #4
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	761a      	strb	r2, [r3, #24]
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	e000e100 	.word	0xe000e100
 8006f90:	e000ed00 	.word	0xe000ed00

08006f94 <NVIC_EncodePriority>:
{
 8006f94:	b480      	push	{r7}
 8006f96:	b089      	sub	sp, #36	; 0x24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	f1c3 0307 	rsb	r3, r3, #7
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	bf28      	it	cs
 8006fb2:	2304      	movcs	r3, #4
 8006fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	2b06      	cmp	r3, #6
 8006fbc:	d902      	bls.n	8006fc4 <NVIC_EncodePriority+0x30>
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	3b03      	subs	r3, #3
 8006fc2:	e000      	b.n	8006fc6 <NVIC_EncodePriority+0x32>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd2:	43da      	mvns	r2, r3
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	401a      	ands	r2, r3
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe6:	43d9      	mvns	r1, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fec:	4313      	orrs	r3, r2
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3724      	adds	r7, #36	; 0x24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7ff ff4c 	bl	8006ea0 <__NVIC_SetPriorityGrouping>
}
 8007008:	bf00      	nop
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007022:	f7ff ff61 	bl	8006ee8 <__NVIC_GetPriorityGrouping>
 8007026:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	68b9      	ldr	r1, [r7, #8]
 800702c:	6978      	ldr	r0, [r7, #20]
 800702e:	f7ff ffb1 	bl	8006f94 <NVIC_EncodePriority>
 8007032:	4602      	mov	r2, r0
 8007034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007038:	4611      	mov	r1, r2
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff ff80 	bl	8006f40 <__NVIC_SetPriority>
}
 8007040:	bf00      	nop
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	4603      	mov	r3, r0
 8007050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff ff54 	bl	8006f04 <__NVIC_EnableIRQ>
}
 800705c:	bf00      	nop
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e014      	b.n	80070a0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	791b      	ldrb	r3, [r3, #4]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d105      	bne.n	800708c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fe fd42 	bl	8005b10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070be:	d120      	bne.n	8007102 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ce:	d118      	bne.n	8007102 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2204      	movs	r2, #4
 80070d4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f043 0201 	orr.w	r2, r3, #1
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80070ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070fa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f82d 	bl	800715c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800710c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007110:	d120      	bne.n	8007154 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800711c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007120:	d118      	bne.n	8007154 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2204      	movs	r2, #4
 8007126:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	f043 0202 	orr.w	r2, r3, #2
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800713c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800714c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f85d 	bl	800720e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8007154:	bf00      	nop
 8007156:	3708      	adds	r7, #8
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	795b      	ldrb	r3, [r3, #5]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_DAC_ConfigChannel+0x18>
 8007184:	2302      	movs	r3, #2
 8007186:	e03c      	b.n	8007202 <HAL_DAC_ConfigChannel+0x92>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2202      	movs	r2, #2
 8007192:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f003 0310 	and.w	r3, r3, #16
 80071a2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80071a6:	fa02 f303 	lsl.w	r3, r2, r3
 80071aa:	43db      	mvns	r3, r3
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4013      	ands	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f003 0310 	and.w	r3, r3, #16
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6819      	ldr	r1, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f003 0310 	and.w	r3, r3, #16
 80071e4:	22c0      	movs	r2, #192	; 0xc0
 80071e6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ea:	43da      	mvns	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	400a      	ands	r2, r1
 80071f2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2201      	movs	r2, #1
 80071f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
	...

08007224 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007230:	f7ff faa4 	bl	800677c <HAL_GetTick>
 8007234:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e099      	b.n	8007374 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0201 	bic.w	r2, r2, #1
 800725e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007260:	e00f      	b.n	8007282 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007262:	f7ff fa8b 	bl	800677c <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b05      	cmp	r3, #5
 800726e:	d908      	bls.n	8007282 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2203      	movs	r2, #3
 800727a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e078      	b.n	8007374 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e8      	bne.n	8007262 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	4b38      	ldr	r3, [pc, #224]	; (800737c <HAL_DMA_Init+0x158>)
 800729c:	4013      	ands	r3, r2
 800729e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d107      	bne.n	80072ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e4:	4313      	orrs	r3, r2
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f023 0307 	bic.w	r3, r3, #7
 8007302:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	4313      	orrs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	2b04      	cmp	r3, #4
 8007314:	d117      	bne.n	8007346 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	4313      	orrs	r3, r2
 800731e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00e      	beq.n	8007346 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f94f 	bl	80075cc <DMA_CheckFifoParam>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d008      	beq.n	8007346 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2240      	movs	r2, #64	; 0x40
 8007338:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007342:	2301      	movs	r3, #1
 8007344:	e016      	b.n	8007374 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f906 	bl	8007560 <DMA_CalcBaseAndBitshift>
 8007354:	4603      	mov	r3, r0
 8007356:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800735c:	223f      	movs	r2, #63	; 0x3f
 800735e:	409a      	lsls	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	f010803f 	.word	0xf010803f

08007380 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e050      	b.n	8007434 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d101      	bne.n	80073a2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800739e:	2302      	movs	r3, #2
 80073a0:	e048      	b.n	8007434 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0201 	bic.w	r2, r2, #1
 80073b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2200      	movs	r2, #0
 80073b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2200      	movs	r2, #0
 80073c0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2200      	movs	r2, #0
 80073c8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2200      	movs	r2, #0
 80073d0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2200      	movs	r2, #0
 80073d8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2221      	movs	r2, #33	; 0x21
 80073e0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f8bc 	bl	8007560 <DMA_CalcBaseAndBitshift>
 80073e8:	4603      	mov	r3, r0
 80073ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f0:	223f      	movs	r2, #63	; 0x3f
 80073f2:	409a      	lsls	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007448:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800744a:	f7ff f997 	bl	800677c <HAL_GetTick>
 800744e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007456:	b2db      	uxtb	r3, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d008      	beq.n	800746e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2280      	movs	r2, #128	; 0x80
 8007460:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e052      	b.n	8007514 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0216 	bic.w	r2, r2, #22
 800747c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	695a      	ldr	r2, [r3, #20]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800748c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	d103      	bne.n	800749e <HAL_DMA_Abort+0x62>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800749a:	2b00      	cmp	r3, #0
 800749c:	d007      	beq.n	80074ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0208 	bic.w	r2, r2, #8
 80074ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0201 	bic.w	r2, r2, #1
 80074bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074be:	e013      	b.n	80074e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80074c0:	f7ff f95c 	bl	800677c <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b05      	cmp	r3, #5
 80074cc:	d90c      	bls.n	80074e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2220      	movs	r2, #32
 80074d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2203      	movs	r2, #3
 80074d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e015      	b.n	8007514 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1e4      	bne.n	80074c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fa:	223f      	movs	r2, #63	; 0x3f
 80074fc:	409a      	lsls	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d004      	beq.n	800753a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2280      	movs	r2, #128	; 0x80
 8007534:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e00c      	b.n	8007554 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2205      	movs	r2, #5
 800753e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0201 	bic.w	r2, r2, #1
 8007550:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	3b10      	subs	r3, #16
 8007570:	4a13      	ldr	r2, [pc, #76]	; (80075c0 <DMA_CalcBaseAndBitshift+0x60>)
 8007572:	fba2 2303 	umull	r2, r3, r2, r3
 8007576:	091b      	lsrs	r3, r3, #4
 8007578:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800757a:	4a12      	ldr	r2, [pc, #72]	; (80075c4 <DMA_CalcBaseAndBitshift+0x64>)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2b03      	cmp	r3, #3
 800758c:	d908      	bls.n	80075a0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <DMA_CalcBaseAndBitshift+0x68>)
 8007596:	4013      	ands	r3, r2
 8007598:	1d1a      	adds	r2, r3, #4
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	659a      	str	r2, [r3, #88]	; 0x58
 800759e:	e006      	b.n	80075ae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	4b08      	ldr	r3, [pc, #32]	; (80075c8 <DMA_CalcBaseAndBitshift+0x68>)
 80075a8:	4013      	ands	r3, r2
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	aaaaaaab 	.word	0xaaaaaaab
 80075c4:	08035c98 	.word	0x08035c98
 80075c8:	fffffc00 	.word	0xfffffc00

080075cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d11f      	bne.n	8007626 <DMA_CheckFifoParam+0x5a>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b03      	cmp	r3, #3
 80075ea:	d856      	bhi.n	800769a <DMA_CheckFifoParam+0xce>
 80075ec:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <DMA_CheckFifoParam+0x28>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	08007605 	.word	0x08007605
 80075f8:	08007617 	.word	0x08007617
 80075fc:	08007605 	.word	0x08007605
 8007600:	0800769b 	.word	0x0800769b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d046      	beq.n	800769e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007614:	e043      	b.n	800769e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800761e:	d140      	bne.n	80076a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007624:	e03d      	b.n	80076a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762e:	d121      	bne.n	8007674 <DMA_CheckFifoParam+0xa8>
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2b03      	cmp	r3, #3
 8007634:	d837      	bhi.n	80076a6 <DMA_CheckFifoParam+0xda>
 8007636:	a201      	add	r2, pc, #4	; (adr r2, 800763c <DMA_CheckFifoParam+0x70>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	0800764d 	.word	0x0800764d
 8007640:	08007653 	.word	0x08007653
 8007644:	0800764d 	.word	0x0800764d
 8007648:	08007665 	.word	0x08007665
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	73fb      	strb	r3, [r7, #15]
      break;
 8007650:	e030      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d025      	beq.n	80076aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007662:	e022      	b.n	80076aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800766c:	d11f      	bne.n	80076ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007672:	e01c      	b.n	80076ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b02      	cmp	r3, #2
 8007678:	d903      	bls.n	8007682 <DMA_CheckFifoParam+0xb6>
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2b03      	cmp	r3, #3
 800767e:	d003      	beq.n	8007688 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007680:	e018      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	73fb      	strb	r3, [r7, #15]
      break;
 8007686:	e015      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00e      	beq.n	80076b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
      break;
 8007698:	e00b      	b.n	80076b2 <DMA_CheckFifoParam+0xe6>
      break;
 800769a:	bf00      	nop
 800769c:	e00a      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
      break;
 800769e:	bf00      	nop
 80076a0:	e008      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
      break;
 80076a2:	bf00      	nop
 80076a4:	e006      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
      break;
 80076a6:	bf00      	nop
 80076a8:	e004      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
      break;
 80076aa:	bf00      	nop
 80076ac:	e002      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80076ae:	bf00      	nop
 80076b0:	e000      	b.n	80076b4 <DMA_CheckFifoParam+0xe8>
      break;
 80076b2:	bf00      	nop
    }
  } 
  
  return status; 
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop

080076c4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e039      	b.n	800774a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d106      	bne.n	80076f0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fe fa58 	bl	8005ba0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007714:	f023 0107 	bic.w	r1, r3, #7
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800772a:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <HAL_DMA2D_Init+0x90>)
 800772c:	4013      	ands	r3, r2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	68d1      	ldr	r1, [r2, #12]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	430b      	orrs	r3, r1
 8007738:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	ffffc000 	.word	0xffffc000

08007758 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af02      	add	r7, sp, #8
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800776c:	2b01      	cmp	r3, #1
 800776e:	d101      	bne.n	8007774 <HAL_DMA2D_Start+0x1c>
 8007770:	2302      	movs	r3, #2
 8007772:	e018      	b.n	80077a6 <HAL_DMA2D_Start+0x4e>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	68b9      	ldr	r1, [r7, #8]
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 fa98 	bl	8007cc4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0201 	orr.w	r2, r2, #1
 80077a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b086      	sub	sp, #24
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d056      	beq.n	8007878 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80077ca:	f7fe ffd7 	bl	800677c <HAL_GetTick>
 80077ce:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80077d0:	e04b      	b.n	800786a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d023      	beq.n	800782c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f003 0320 	and.w	r3, r3, #32
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d005      	beq.n	80077fa <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f2:	f043 0202 	orr.w	r2, r3, #2
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	d005      	beq.n	8007810 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007808:	f043 0201 	orr.w	r2, r3, #1
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2221      	movs	r2, #33	; 0x21
 8007816:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2204      	movs	r2, #4
 800781c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e0a5      	b.n	8007978 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007832:	d01a      	beq.n	800786a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007834:	f7fe ffa2 	bl	800677c <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d302      	bcc.n	800784a <HAL_DMA2D_PollForTransfer+0x9c>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10f      	bne.n	800786a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784e:	f043 0220 	orr.w	r2, r3, #32
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2203      	movs	r2, #3
 800785a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e086      	b.n	8007978 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0ac      	beq.n	80077d2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f003 0320 	and.w	r3, r3, #32
 8007882:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	f003 0320 	and.w	r3, r3, #32
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	4313      	orrs	r3, r2
 8007892:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d061      	beq.n	800795e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800789a:	f7fe ff6f 	bl	800677c <HAL_GetTick>
 800789e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80078a0:	e056      	b.n	8007950 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d02e      	beq.n	8007912 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f003 0308 	and.w	r3, r3, #8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d005      	beq.n	80078ca <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c2:	f043 0204 	orr.w	r2, r3, #4
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d8:	f043 0202 	orr.w	r2, r3, #2
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ee:	f043 0201 	orr.w	r2, r3, #1
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2229      	movs	r2, #41	; 0x29
 80078fc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2204      	movs	r2, #4
 8007902:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e032      	b.n	8007978 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007918:	d01a      	beq.n	8007950 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800791a:	f7fe ff2f 	bl	800677c <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d302      	bcc.n	8007930 <HAL_DMA2D_PollForTransfer+0x182>
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10f      	bne.n	8007950 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007934:	f043 0220 	orr.w	r2, r3, #32
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2203      	movs	r2, #3
 8007940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e013      	b.n	8007978 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f003 0310 	and.w	r3, r3, #16
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0a1      	beq.n	80078a2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2212      	movs	r2, #18
 8007964:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d026      	beq.n	80079f0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d021      	beq.n	80079f0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079ba:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c0:	f043 0201 	orr.w	r2, r3, #1
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2201      	movs	r2, #1
 80079ce:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2204      	movs	r2, #4
 80079d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d003      	beq.n	80079f0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d026      	beq.n	8007a48 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d021      	beq.n	8007a48 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a12:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a20:	f043 0202 	orr.w	r2, r3, #2
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2204      	movs	r2, #4
 8007a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d003      	beq.n	8007a48 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d026      	beq.n	8007aa0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d021      	beq.n	8007aa0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a6a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2208      	movs	r2, #8
 8007a72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a78:	f043 0204 	orr.w	r2, r3, #4
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2204      	movs	r2, #4
 8007a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f003 0304 	and.w	r3, r3, #4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d013      	beq.n	8007ad2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00e      	beq.n	8007ad2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ac2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2204      	movs	r2, #4
 8007aca:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f853 	bl	8007b78 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d024      	beq.n	8007b26 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d01f      	beq.n	8007b26 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007af4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2202      	movs	r2, #2
 8007afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f003 0310 	and.w	r3, r3, #16
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01f      	beq.n	8007b70 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d01a      	beq.n	8007b70 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b48:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2210      	movs	r2, #16
 8007b50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f80e 	bl	8007b8c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007b70:	bf00      	nop
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_DMA2D_ConfigLayer+0x20>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e079      	b.n	8007cb4 <HAL_DMA2D_ConfigLayer+0x114>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	3318      	adds	r3, #24
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	4413      	add	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	041b      	lsls	r3, r3, #16
 8007be6:	4313      	orrs	r3, r2
 8007be8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007bea:	4b35      	ldr	r3, [pc, #212]	; (8007cc0 <HAL_DMA2D_ConfigLayer+0x120>)
 8007bec:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	2b0a      	cmp	r3, #10
 8007bf4:	d003      	beq.n	8007bfe <HAL_DMA2D_ConfigLayer+0x5e>
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	2b09      	cmp	r3, #9
 8007bfc:	d107      	bne.n	8007c0e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	e005      	b.n	8007c1a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	061b      	lsls	r3, r3, #24
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d120      	bne.n	8007c62 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	43db      	mvns	r3, r3
 8007c2a:	ea02 0103 	and.w	r1, r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	6812      	ldr	r2, [r2, #0]
 8007c40:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	2b0a      	cmp	r3, #10
 8007c48:	d003      	beq.n	8007c52 <HAL_DMA2D_ConfigLayer+0xb2>
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	2b09      	cmp	r3, #9
 8007c50:	d127      	bne.n	8007ca2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	68da      	ldr	r2, [r3, #12]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8007c60:	e01f      	b.n	8007ca2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69da      	ldr	r2, [r3, #28]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	ea02 0103 	and.w	r1, r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	430a      	orrs	r2, r1
 8007c78:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	2b0a      	cmp	r3, #10
 8007c8a:	d003      	beq.n	8007c94 <HAL_DMA2D_ConfigLayer+0xf4>
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2b09      	cmp	r3, #9
 8007c92:	d106      	bne.n	8007ca2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007ca0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	ff03000f 	.word	0xff03000f

08007cc4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b08b      	sub	sp, #44	; 0x2c
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	041a      	lsls	r2, r3, #16
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007cfc:	d174      	bne.n	8007de8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007d04:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d0c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d14:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d108      	bne.n	8007d36 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24
 8007d34:	e053      	b.n	8007dde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d106      	bne.n	8007d4c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
 8007d4a:	e048      	b.n	8007dde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d111      	bne.n	8007d78 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	0cdb      	lsrs	r3, r3, #19
 8007d58:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	0a9b      	lsrs	r3, r3, #10
 8007d5e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	08db      	lsrs	r3, r3, #3
 8007d64:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	02db      	lsls	r3, r3, #11
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
 8007d76:	e032      	b.n	8007dde <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	2b03      	cmp	r3, #3
 8007d7e:	d117      	bne.n	8007db0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007d80:	6a3b      	ldr	r3, [r7, #32]
 8007d82:	0fdb      	lsrs	r3, r3, #31
 8007d84:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	0cdb      	lsrs	r3, r3, #19
 8007d8a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	0adb      	lsrs	r3, r3, #11
 8007d90:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	08db      	lsrs	r3, r3, #3
 8007d96:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	029b      	lsls	r3, r3, #10
 8007da0:	431a      	orrs	r2, r3
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	03db      	lsls	r3, r3, #15
 8007da6:	4313      	orrs	r3, r2
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
 8007dae:	e016      	b.n	8007dde <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	0f1b      	lsrs	r3, r3, #28
 8007db4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	0d1b      	lsrs	r3, r3, #20
 8007dba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	0b1b      	lsrs	r3, r3, #12
 8007dc0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	091b      	lsrs	r3, r3, #4
 8007dc6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	011a      	lsls	r2, r3, #4
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	021b      	lsls	r3, r3, #8
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	031b      	lsls	r3, r3, #12
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007de6:	e003      	b.n	8007df0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	60da      	str	r2, [r3, #12]
}
 8007df0:	bf00      	nop
 8007df2:	372c      	adds	r7, #44	; 0x2c
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b089      	sub	sp, #36	; 0x24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007e06:	2300      	movs	r3, #0
 8007e08:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007e16:	2300      	movs	r3, #0
 8007e18:	61fb      	str	r3, [r7, #28]
 8007e1a:	e175      	b.n	8008108 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	fa02 f303 	lsl.w	r3, r2, r3
 8007e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	f040 8164 	bne.w	8008102 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d005      	beq.n	8007e52 <HAL_GPIO_Init+0x56>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d130      	bne.n	8007eb4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	2203      	movs	r2, #3
 8007e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e62:	43db      	mvns	r3, r3
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	4013      	ands	r3, r2
 8007e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68da      	ldr	r2, [r3, #12]
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	fa02 f303 	lsl.w	r3, r2, r3
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e88:	2201      	movs	r2, #1
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e90:	43db      	mvns	r3, r3
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	4013      	ands	r3, r2
 8007e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	091b      	lsrs	r3, r3, #4
 8007e9e:	f003 0201 	and.w	r2, r3, #1
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea8:	69ba      	ldr	r2, [r7, #24]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f003 0303 	and.w	r3, r3, #3
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d017      	beq.n	8007ef0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	2203      	movs	r2, #3
 8007ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee4:	69ba      	ldr	r2, [r7, #24]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f003 0303 	and.w	r3, r3, #3
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d123      	bne.n	8007f44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	08da      	lsrs	r2, r3, #3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3208      	adds	r2, #8
 8007f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	220f      	movs	r2, #15
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	43db      	mvns	r3, r3
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	08da      	lsrs	r2, r3, #3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	3208      	adds	r2, #8
 8007f3e:	69b9      	ldr	r1, [r7, #24]
 8007f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	005b      	lsls	r3, r3, #1
 8007f4e:	2203      	movs	r2, #3
 8007f50:	fa02 f303 	lsl.w	r3, r2, r3
 8007f54:	43db      	mvns	r3, r3
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f003 0203 	and.w	r2, r3, #3
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 80be 	beq.w	8008102 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f86:	4b66      	ldr	r3, [pc, #408]	; (8008120 <HAL_GPIO_Init+0x324>)
 8007f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8a:	4a65      	ldr	r2, [pc, #404]	; (8008120 <HAL_GPIO_Init+0x324>)
 8007f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f90:	6453      	str	r3, [r2, #68]	; 0x44
 8007f92:	4b63      	ldr	r3, [pc, #396]	; (8008120 <HAL_GPIO_Init+0x324>)
 8007f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007f9e:	4a61      	ldr	r2, [pc, #388]	; (8008124 <HAL_GPIO_Init+0x328>)
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	089b      	lsrs	r3, r3, #2
 8007fa4:	3302      	adds	r3, #2
 8007fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	220f      	movs	r2, #15
 8007fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fba:	43db      	mvns	r3, r3
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a58      	ldr	r2, [pc, #352]	; (8008128 <HAL_GPIO_Init+0x32c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d037      	beq.n	800803a <HAL_GPIO_Init+0x23e>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a57      	ldr	r2, [pc, #348]	; (800812c <HAL_GPIO_Init+0x330>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d031      	beq.n	8008036 <HAL_GPIO_Init+0x23a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a56      	ldr	r2, [pc, #344]	; (8008130 <HAL_GPIO_Init+0x334>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d02b      	beq.n	8008032 <HAL_GPIO_Init+0x236>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a55      	ldr	r2, [pc, #340]	; (8008134 <HAL_GPIO_Init+0x338>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d025      	beq.n	800802e <HAL_GPIO_Init+0x232>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a54      	ldr	r2, [pc, #336]	; (8008138 <HAL_GPIO_Init+0x33c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d01f      	beq.n	800802a <HAL_GPIO_Init+0x22e>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a53      	ldr	r2, [pc, #332]	; (800813c <HAL_GPIO_Init+0x340>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d019      	beq.n	8008026 <HAL_GPIO_Init+0x22a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a52      	ldr	r2, [pc, #328]	; (8008140 <HAL_GPIO_Init+0x344>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d013      	beq.n	8008022 <HAL_GPIO_Init+0x226>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a51      	ldr	r2, [pc, #324]	; (8008144 <HAL_GPIO_Init+0x348>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00d      	beq.n	800801e <HAL_GPIO_Init+0x222>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a50      	ldr	r2, [pc, #320]	; (8008148 <HAL_GPIO_Init+0x34c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d007      	beq.n	800801a <HAL_GPIO_Init+0x21e>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a4f      	ldr	r2, [pc, #316]	; (800814c <HAL_GPIO_Init+0x350>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d101      	bne.n	8008016 <HAL_GPIO_Init+0x21a>
 8008012:	2309      	movs	r3, #9
 8008014:	e012      	b.n	800803c <HAL_GPIO_Init+0x240>
 8008016:	230a      	movs	r3, #10
 8008018:	e010      	b.n	800803c <HAL_GPIO_Init+0x240>
 800801a:	2308      	movs	r3, #8
 800801c:	e00e      	b.n	800803c <HAL_GPIO_Init+0x240>
 800801e:	2307      	movs	r3, #7
 8008020:	e00c      	b.n	800803c <HAL_GPIO_Init+0x240>
 8008022:	2306      	movs	r3, #6
 8008024:	e00a      	b.n	800803c <HAL_GPIO_Init+0x240>
 8008026:	2305      	movs	r3, #5
 8008028:	e008      	b.n	800803c <HAL_GPIO_Init+0x240>
 800802a:	2304      	movs	r3, #4
 800802c:	e006      	b.n	800803c <HAL_GPIO_Init+0x240>
 800802e:	2303      	movs	r3, #3
 8008030:	e004      	b.n	800803c <HAL_GPIO_Init+0x240>
 8008032:	2302      	movs	r3, #2
 8008034:	e002      	b.n	800803c <HAL_GPIO_Init+0x240>
 8008036:	2301      	movs	r3, #1
 8008038:	e000      	b.n	800803c <HAL_GPIO_Init+0x240>
 800803a:	2300      	movs	r3, #0
 800803c:	69fa      	ldr	r2, [r7, #28]
 800803e:	f002 0203 	and.w	r2, r2, #3
 8008042:	0092      	lsls	r2, r2, #2
 8008044:	4093      	lsls	r3, r2
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	4313      	orrs	r3, r2
 800804a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800804c:	4935      	ldr	r1, [pc, #212]	; (8008124 <HAL_GPIO_Init+0x328>)
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	089b      	lsrs	r3, r3, #2
 8008052:	3302      	adds	r3, #2
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800805a:	4b3d      	ldr	r3, [pc, #244]	; (8008150 <HAL_GPIO_Init+0x354>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	43db      	mvns	r3, r3
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	4013      	ands	r3, r2
 8008068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	4313      	orrs	r3, r2
 800807c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800807e:	4a34      	ldr	r2, [pc, #208]	; (8008150 <HAL_GPIO_Init+0x354>)
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008084:	4b32      	ldr	r3, [pc, #200]	; (8008150 <HAL_GPIO_Init+0x354>)
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	43db      	mvns	r3, r3
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	4013      	ands	r3, r2
 8008092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80080a8:	4a29      	ldr	r2, [pc, #164]	; (8008150 <HAL_GPIO_Init+0x354>)
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80080ae:	4b28      	ldr	r3, [pc, #160]	; (8008150 <HAL_GPIO_Init+0x354>)
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	43db      	mvns	r3, r3
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	4013      	ands	r3, r2
 80080bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80080d2:	4a1f      	ldr	r2, [pc, #124]	; (8008150 <HAL_GPIO_Init+0x354>)
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80080d8:	4b1d      	ldr	r3, [pc, #116]	; (8008150 <HAL_GPIO_Init+0x354>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	43db      	mvns	r3, r3
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	4013      	ands	r3, r2
 80080e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80080fc:	4a14      	ldr	r2, [pc, #80]	; (8008150 <HAL_GPIO_Init+0x354>)
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	3301      	adds	r3, #1
 8008106:	61fb      	str	r3, [r7, #28]
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	2b0f      	cmp	r3, #15
 800810c:	f67f ae86 	bls.w	8007e1c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	3724      	adds	r7, #36	; 0x24
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	40023800 	.word	0x40023800
 8008124:	40013800 	.word	0x40013800
 8008128:	40020000 	.word	0x40020000
 800812c:	40020400 	.word	0x40020400
 8008130:	40020800 	.word	0x40020800
 8008134:	40020c00 	.word	0x40020c00
 8008138:	40021000 	.word	0x40021000
 800813c:	40021400 	.word	0x40021400
 8008140:	40021800 	.word	0x40021800
 8008144:	40021c00 	.word	0x40021c00
 8008148:	40022000 	.word	0x40022000
 800814c:	40022400 	.word	0x40022400
 8008150:	40013c00 	.word	0x40013c00

08008154 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800815e:	2300      	movs	r3, #0
 8008160:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8008166:	2300      	movs	r3, #0
 8008168:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]
 800816e:	e0d9      	b.n	8008324 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008170:	2201      	movs	r2, #1
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	fa02 f303 	lsl.w	r3, r2, r3
 8008178:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	4013      	ands	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	429a      	cmp	r2, r3
 8008188:	f040 80c9 	bne.w	800831e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800818c:	4a6b      	ldr	r2, [pc, #428]	; (800833c <HAL_GPIO_DeInit+0x1e8>)
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	089b      	lsrs	r3, r3, #2
 8008192:	3302      	adds	r3, #2
 8008194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008198:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	220f      	movs	r2, #15
 80081a4:	fa02 f303 	lsl.w	r3, r2, r3
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	4013      	ands	r3, r2
 80081ac:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a63      	ldr	r2, [pc, #396]	; (8008340 <HAL_GPIO_DeInit+0x1ec>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d037      	beq.n	8008226 <HAL_GPIO_DeInit+0xd2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a62      	ldr	r2, [pc, #392]	; (8008344 <HAL_GPIO_DeInit+0x1f0>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d031      	beq.n	8008222 <HAL_GPIO_DeInit+0xce>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a61      	ldr	r2, [pc, #388]	; (8008348 <HAL_GPIO_DeInit+0x1f4>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d02b      	beq.n	800821e <HAL_GPIO_DeInit+0xca>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a60      	ldr	r2, [pc, #384]	; (800834c <HAL_GPIO_DeInit+0x1f8>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d025      	beq.n	800821a <HAL_GPIO_DeInit+0xc6>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a5f      	ldr	r2, [pc, #380]	; (8008350 <HAL_GPIO_DeInit+0x1fc>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d01f      	beq.n	8008216 <HAL_GPIO_DeInit+0xc2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	4a5e      	ldr	r2, [pc, #376]	; (8008354 <HAL_GPIO_DeInit+0x200>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d019      	beq.n	8008212 <HAL_GPIO_DeInit+0xbe>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	4a5d      	ldr	r2, [pc, #372]	; (8008358 <HAL_GPIO_DeInit+0x204>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <HAL_GPIO_DeInit+0xba>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4a5c      	ldr	r2, [pc, #368]	; (800835c <HAL_GPIO_DeInit+0x208>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00d      	beq.n	800820a <HAL_GPIO_DeInit+0xb6>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a5b      	ldr	r2, [pc, #364]	; (8008360 <HAL_GPIO_DeInit+0x20c>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d007      	beq.n	8008206 <HAL_GPIO_DeInit+0xb2>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a5a      	ldr	r2, [pc, #360]	; (8008364 <HAL_GPIO_DeInit+0x210>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d101      	bne.n	8008202 <HAL_GPIO_DeInit+0xae>
 80081fe:	2309      	movs	r3, #9
 8008200:	e012      	b.n	8008228 <HAL_GPIO_DeInit+0xd4>
 8008202:	230a      	movs	r3, #10
 8008204:	e010      	b.n	8008228 <HAL_GPIO_DeInit+0xd4>
 8008206:	2308      	movs	r3, #8
 8008208:	e00e      	b.n	8008228 <HAL_GPIO_DeInit+0xd4>
 800820a:	2307      	movs	r3, #7
 800820c:	e00c      	b.n	8008228 <HAL_GPIO_DeInit+0xd4>
 800820e:	2306      	movs	r3, #6
 8008210:	e00a      	b.n	8008228 <HAL_GPIO_DeInit+0xd4>
 8008212:	2305      	movs	r3, #5
 8008214:	e008      	b.n	8008228 <HAL_GPIO_DeInit+0xd4>
 8008216:	2304      	movs	r3, #4
 8008218:	e006      	b.n	8008228 <HAL_GPIO_DeInit+0xd4>
 800821a:	2303      	movs	r3, #3
 800821c:	e004      	b.n	8008228 <HAL_GPIO_DeInit+0xd4>
 800821e:	2302      	movs	r3, #2
 8008220:	e002      	b.n	8008228 <HAL_GPIO_DeInit+0xd4>
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <HAL_GPIO_DeInit+0xd4>
 8008226:	2300      	movs	r3, #0
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	f002 0203 	and.w	r2, r2, #3
 800822e:	0092      	lsls	r2, r2, #2
 8008230:	4093      	lsls	r3, r2
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	429a      	cmp	r2, r3
 8008236:	d132      	bne.n	800829e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008238:	4b4b      	ldr	r3, [pc, #300]	; (8008368 <HAL_GPIO_DeInit+0x214>)
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	43db      	mvns	r3, r3
 8008240:	4949      	ldr	r1, [pc, #292]	; (8008368 <HAL_GPIO_DeInit+0x214>)
 8008242:	4013      	ands	r3, r2
 8008244:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008246:	4b48      	ldr	r3, [pc, #288]	; (8008368 <HAL_GPIO_DeInit+0x214>)
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	43db      	mvns	r3, r3
 800824e:	4946      	ldr	r1, [pc, #280]	; (8008368 <HAL_GPIO_DeInit+0x214>)
 8008250:	4013      	ands	r3, r2
 8008252:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008254:	4b44      	ldr	r3, [pc, #272]	; (8008368 <HAL_GPIO_DeInit+0x214>)
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	43db      	mvns	r3, r3
 800825c:	4942      	ldr	r1, [pc, #264]	; (8008368 <HAL_GPIO_DeInit+0x214>)
 800825e:	4013      	ands	r3, r2
 8008260:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008262:	4b41      	ldr	r3, [pc, #260]	; (8008368 <HAL_GPIO_DeInit+0x214>)
 8008264:	689a      	ldr	r2, [r3, #8]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	43db      	mvns	r3, r3
 800826a:	493f      	ldr	r1, [pc, #252]	; (8008368 <HAL_GPIO_DeInit+0x214>)
 800826c:	4013      	ands	r3, r2
 800826e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	220f      	movs	r2, #15
 800827a:	fa02 f303 	lsl.w	r3, r2, r3
 800827e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8008280:	4a2e      	ldr	r2, [pc, #184]	; (800833c <HAL_GPIO_DeInit+0x1e8>)
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	089b      	lsrs	r3, r3, #2
 8008286:	3302      	adds	r3, #2
 8008288:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	43da      	mvns	r2, r3
 8008290:	482a      	ldr	r0, [pc, #168]	; (800833c <HAL_GPIO_DeInit+0x1e8>)
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	089b      	lsrs	r3, r3, #2
 8008296:	400a      	ands	r2, r1
 8008298:	3302      	adds	r3, #2
 800829a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	2103      	movs	r1, #3
 80082a8:	fa01 f303 	lsl.w	r3, r1, r3
 80082ac:	43db      	mvns	r3, r3
 80082ae:	401a      	ands	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	08da      	lsrs	r2, r3, #3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	3208      	adds	r2, #8
 80082bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	220f      	movs	r2, #15
 80082ca:	fa02 f303 	lsl.w	r3, r2, r3
 80082ce:	43db      	mvns	r3, r3
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	08d2      	lsrs	r2, r2, #3
 80082d4:	4019      	ands	r1, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3208      	adds	r2, #8
 80082da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	2103      	movs	r1, #3
 80082e8:	fa01 f303 	lsl.w	r3, r1, r3
 80082ec:	43db      	mvns	r3, r3
 80082ee:	401a      	ands	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	2101      	movs	r1, #1
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008300:	43db      	mvns	r3, r3
 8008302:	401a      	ands	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	2103      	movs	r1, #3
 8008312:	fa01 f303 	lsl.w	r3, r1, r3
 8008316:	43db      	mvns	r3, r3
 8008318:	401a      	ands	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	3301      	adds	r3, #1
 8008322:	617b      	str	r3, [r7, #20]
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2b0f      	cmp	r3, #15
 8008328:	f67f af22 	bls.w	8008170 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800832c:	bf00      	nop
 800832e:	bf00      	nop
 8008330:	371c      	adds	r7, #28
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40013800 	.word	0x40013800
 8008340:	40020000 	.word	0x40020000
 8008344:	40020400 	.word	0x40020400
 8008348:	40020800 	.word	0x40020800
 800834c:	40020c00 	.word	0x40020c00
 8008350:	40021000 	.word	0x40021000
 8008354:	40021400 	.word	0x40021400
 8008358:	40021800 	.word	0x40021800
 800835c:	40021c00 	.word	0x40021c00
 8008360:	40022000 	.word	0x40022000
 8008364:	40022400 	.word	0x40022400
 8008368:	40013c00 	.word	0x40013c00

0800836c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	807b      	strh	r3, [r7, #2]
 8008378:	4613      	mov	r3, r2
 800837a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800837c:	787b      	ldrb	r3, [r7, #1]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008382:	887a      	ldrh	r2, [r7, #2]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008388:	e003      	b.n	8008392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800838a:	887b      	ldrh	r3, [r7, #2]
 800838c:	041a      	lsls	r2, r3, #16
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	619a      	str	r2, [r3, #24]
}
 8008392:	bf00      	nop
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800839e:	b480      	push	{r7}
 80083a0:	b085      	sub	sp, #20
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	460b      	mov	r3, r1
 80083a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80083b0:	887a      	ldrh	r2, [r7, #2]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	4013      	ands	r3, r2
 80083b6:	041a      	lsls	r2, r3, #16
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	43d9      	mvns	r1, r3
 80083bc:	887b      	ldrh	r3, [r7, #2]
 80083be:	400b      	ands	r3, r1
 80083c0:	431a      	orrs	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	619a      	str	r2, [r3, #24]
}
 80083c6:	bf00      	nop
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	4603      	mov	r3, r0
 80083dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80083de:	4b08      	ldr	r3, [pc, #32]	; (8008400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083e0:	695a      	ldr	r2, [r3, #20]
 80083e2:	88fb      	ldrh	r3, [r7, #6]
 80083e4:	4013      	ands	r3, r2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d006      	beq.n	80083f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80083ea:	4a05      	ldr	r2, [pc, #20]	; (8008400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083ec:	88fb      	ldrh	r3, [r7, #6]
 80083ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80083f0:	88fb      	ldrh	r3, [r7, #6]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fa fc48 	bl	8002c88 <HAL_GPIO_EXTI_Callback>
  }
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	40013c00 	.word	0x40013c00

08008404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e07f      	b.n	8008516 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800841c:	b2db      	uxtb	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7fd fbde 	bl	8005bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2224      	movs	r2, #36	; 0x24
 8008434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 0201 	bic.w	r2, r2, #1
 8008446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008454:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008464:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	2b01      	cmp	r3, #1
 800846c:	d107      	bne.n	800847e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	689a      	ldr	r2, [r3, #8]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800847a:	609a      	str	r2, [r3, #8]
 800847c:	e006      	b.n	800848c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689a      	ldr	r2, [r3, #8]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800848a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b02      	cmp	r3, #2
 8008492:	d104      	bne.n	800849e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800849c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6859      	ldr	r1, [r3, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	4b1d      	ldr	r3, [pc, #116]	; (8008520 <HAL_I2C_Init+0x11c>)
 80084aa:	430b      	orrs	r3, r1
 80084ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68da      	ldr	r2, [r3, #12]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	691a      	ldr	r2, [r3, #16]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	69d9      	ldr	r1, [r3, #28]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a1a      	ldr	r2, [r3, #32]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0201 	orr.w	r2, r2, #1
 80084f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2220      	movs	r2, #32
 8008502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	02008000 	.word	0x02008000

08008524 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e021      	b.n	800857a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2224      	movs	r2, #36	; 0x24
 800853a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0201 	bic.w	r2, r2, #1
 800854c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f7fd fbf4 	bl	8005d3c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
	...

08008584 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af02      	add	r7, sp, #8
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	4608      	mov	r0, r1
 800858e:	4611      	mov	r1, r2
 8008590:	461a      	mov	r2, r3
 8008592:	4603      	mov	r3, r0
 8008594:	817b      	strh	r3, [r7, #10]
 8008596:	460b      	mov	r3, r1
 8008598:	813b      	strh	r3, [r7, #8]
 800859a:	4613      	mov	r3, r2
 800859c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	f040 80f9 	bne.w	800879e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <HAL_I2C_Mem_Write+0x34>
 80085b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d105      	bne.n	80085c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e0ed      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d101      	bne.n	80085d2 <HAL_I2C_Mem_Write+0x4e>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e0e6      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085da:	f7fe f8cf 	bl	800677c <HAL_GetTick>
 80085de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	2319      	movs	r3, #25
 80085e6:	2201      	movs	r2, #1
 80085e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 fad1 	bl	8008b94 <I2C_WaitOnFlagUntilTimeout>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e0d1      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2221      	movs	r2, #33	; 0x21
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2240      	movs	r2, #64	; 0x40
 8008608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6a3a      	ldr	r2, [r7, #32]
 8008616:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800861c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008624:	88f8      	ldrh	r0, [r7, #6]
 8008626:	893a      	ldrh	r2, [r7, #8]
 8008628:	8979      	ldrh	r1, [r7, #10]
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	9301      	str	r3, [sp, #4]
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	4603      	mov	r3, r0
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f000 f9e1 	bl	80089fc <I2C_RequestMemoryWrite>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d005      	beq.n	800864c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e0a9      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008650:	b29b      	uxth	r3, r3
 8008652:	2bff      	cmp	r3, #255	; 0xff
 8008654:	d90e      	bls.n	8008674 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	22ff      	movs	r2, #255	; 0xff
 800865a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008660:	b2da      	uxtb	r2, r3
 8008662:	8979      	ldrh	r1, [r7, #10]
 8008664:	2300      	movs	r3, #0
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 fc39 	bl	8008ee4 <I2C_TransferConfig>
 8008672:	e00f      	b.n	8008694 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008678:	b29a      	uxth	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008682:	b2da      	uxtb	r2, r3
 8008684:	8979      	ldrh	r1, [r7, #10]
 8008686:	2300      	movs	r3, #0
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 fc28 	bl	8008ee4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 fabb 	bl	8008c14 <I2C_WaitOnTXISFlagUntilTimeout>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e07b      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	781a      	ldrb	r2, [r3, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	3b01      	subs	r3, #1
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086d0:	3b01      	subs	r3, #1
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d034      	beq.n	800874c <HAL_I2C_Mem_Write+0x1c8>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d130      	bne.n	800874c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	2200      	movs	r2, #0
 80086f2:	2180      	movs	r1, #128	; 0x80
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 fa4d 	bl	8008b94 <I2C_WaitOnFlagUntilTimeout>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d001      	beq.n	8008704 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e04d      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008708:	b29b      	uxth	r3, r3
 800870a:	2bff      	cmp	r3, #255	; 0xff
 800870c:	d90e      	bls.n	800872c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	22ff      	movs	r2, #255	; 0xff
 8008712:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008718:	b2da      	uxtb	r2, r3
 800871a:	8979      	ldrh	r1, [r7, #10]
 800871c:	2300      	movs	r3, #0
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 fbdd 	bl	8008ee4 <I2C_TransferConfig>
 800872a:	e00f      	b.n	800874c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800873a:	b2da      	uxtb	r2, r3
 800873c:	8979      	ldrh	r1, [r7, #10]
 800873e:	2300      	movs	r3, #0
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f000 fbcc 	bl	8008ee4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008750:	b29b      	uxth	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d19e      	bne.n	8008694 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 fa9a 	bl	8008c94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008760:	4603      	mov	r3, r0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d001      	beq.n	800876a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e01a      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2220      	movs	r2, #32
 8008770:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6859      	ldr	r1, [r3, #4]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	4b0a      	ldr	r3, [pc, #40]	; (80087a8 <HAL_I2C_Mem_Write+0x224>)
 800877e:	400b      	ands	r3, r1
 8008780:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2220      	movs	r2, #32
 8008786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	e000      	b.n	80087a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800879e:	2302      	movs	r3, #2
  }
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3718      	adds	r7, #24
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	fe00e800 	.word	0xfe00e800

080087ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af02      	add	r7, sp, #8
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	4608      	mov	r0, r1
 80087b6:	4611      	mov	r1, r2
 80087b8:	461a      	mov	r2, r3
 80087ba:	4603      	mov	r3, r0
 80087bc:	817b      	strh	r3, [r7, #10]
 80087be:	460b      	mov	r3, r1
 80087c0:	813b      	strh	r3, [r7, #8]
 80087c2:	4613      	mov	r3, r2
 80087c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	f040 80fd 	bne.w	80089ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <HAL_I2C_Mem_Read+0x34>
 80087da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d105      	bne.n	80087ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e0f1      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <HAL_I2C_Mem_Read+0x4e>
 80087f6:	2302      	movs	r3, #2
 80087f8:	e0ea      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008802:	f7fd ffbb 	bl	800677c <HAL_GetTick>
 8008806:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	2319      	movs	r3, #25
 800880e:	2201      	movs	r2, #1
 8008810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 f9bd 	bl	8008b94 <I2C_WaitOnFlagUntilTimeout>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e0d5      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2222      	movs	r2, #34	; 0x22
 8008828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2240      	movs	r2, #64	; 0x40
 8008830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a3a      	ldr	r2, [r7, #32]
 800883e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008844:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800884c:	88f8      	ldrh	r0, [r7, #6]
 800884e:	893a      	ldrh	r2, [r7, #8]
 8008850:	8979      	ldrh	r1, [r7, #10]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	9301      	str	r3, [sp, #4]
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	4603      	mov	r3, r0
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 f921 	bl	8008aa4 <I2C_RequestMemoryRead>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e0ad      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008878:	b29b      	uxth	r3, r3
 800887a:	2bff      	cmp	r3, #255	; 0xff
 800887c:	d90e      	bls.n	800889c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	22ff      	movs	r2, #255	; 0xff
 8008882:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008888:	b2da      	uxtb	r2, r3
 800888a:	8979      	ldrh	r1, [r7, #10]
 800888c:	4b52      	ldr	r3, [pc, #328]	; (80089d8 <HAL_I2C_Mem_Read+0x22c>)
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 fb25 	bl	8008ee4 <I2C_TransferConfig>
 800889a:	e00f      	b.n	80088bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	8979      	ldrh	r1, [r7, #10]
 80088ae:	4b4a      	ldr	r3, [pc, #296]	; (80089d8 <HAL_I2C_Mem_Read+0x22c>)
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 fb14 	bl	8008ee4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	2200      	movs	r2, #0
 80088c4:	2104      	movs	r1, #4
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 f964 	bl	8008b94 <I2C_WaitOnFlagUntilTimeout>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e07c      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	b2d2      	uxtb	r2, r2
 80088e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088f2:	3b01      	subs	r3, #1
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fe:	b29b      	uxth	r3, r3
 8008900:	3b01      	subs	r3, #1
 8008902:	b29a      	uxth	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890c:	b29b      	uxth	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d034      	beq.n	800897c <HAL_I2C_Mem_Read+0x1d0>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008916:	2b00      	cmp	r3, #0
 8008918:	d130      	bne.n	800897c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008920:	2200      	movs	r2, #0
 8008922:	2180      	movs	r1, #128	; 0x80
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f000 f935 	bl	8008b94 <I2C_WaitOnFlagUntilTimeout>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e04d      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008938:	b29b      	uxth	r3, r3
 800893a:	2bff      	cmp	r3, #255	; 0xff
 800893c:	d90e      	bls.n	800895c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	22ff      	movs	r2, #255	; 0xff
 8008942:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008948:	b2da      	uxtb	r2, r3
 800894a:	8979      	ldrh	r1, [r7, #10]
 800894c:	2300      	movs	r3, #0
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 fac5 	bl	8008ee4 <I2C_TransferConfig>
 800895a:	e00f      	b.n	800897c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008960:	b29a      	uxth	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800896a:	b2da      	uxtb	r2, r3
 800896c:	8979      	ldrh	r1, [r7, #10]
 800896e:	2300      	movs	r3, #0
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 fab4 	bl	8008ee4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008980:	b29b      	uxth	r3, r3
 8008982:	2b00      	cmp	r3, #0
 8008984:	d19a      	bne.n	80088bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 f982 	bl	8008c94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e01a      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2220      	movs	r2, #32
 80089a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6859      	ldr	r1, [r3, #4]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	4b0b      	ldr	r3, [pc, #44]	; (80089dc <HAL_I2C_Mem_Read+0x230>)
 80089ae:	400b      	ands	r3, r1
 80089b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	e000      	b.n	80089d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80089ce:	2302      	movs	r3, #2
  }
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3718      	adds	r7, #24
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	80002400 	.word	0x80002400
 80089dc:	fe00e800 	.word	0xfe00e800

080089e0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089ee:	b2db      	uxtb	r3, r3
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af02      	add	r7, sp, #8
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	4608      	mov	r0, r1
 8008a06:	4611      	mov	r1, r2
 8008a08:	461a      	mov	r2, r3
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	817b      	strh	r3, [r7, #10]
 8008a0e:	460b      	mov	r3, r1
 8008a10:	813b      	strh	r3, [r7, #8]
 8008a12:	4613      	mov	r3, r2
 8008a14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008a16:	88fb      	ldrh	r3, [r7, #6]
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	8979      	ldrh	r1, [r7, #10]
 8008a1c:	4b20      	ldr	r3, [pc, #128]	; (8008aa0 <I2C_RequestMemoryWrite+0xa4>)
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 fa5d 	bl	8008ee4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a2a:	69fa      	ldr	r2, [r7, #28]
 8008a2c:	69b9      	ldr	r1, [r7, #24]
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 f8f0 	bl	8008c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e02c      	b.n	8008a98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a3e:	88fb      	ldrh	r3, [r7, #6]
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d105      	bne.n	8008a50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a44:	893b      	ldrh	r3, [r7, #8]
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	629a      	str	r2, [r3, #40]	; 0x28
 8008a4e:	e015      	b.n	8008a7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008a50:	893b      	ldrh	r3, [r7, #8]
 8008a52:	0a1b      	lsrs	r3, r3, #8
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	69b9      	ldr	r1, [r7, #24]
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f000 f8d6 	bl	8008c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e012      	b.n	8008a98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a72:	893b      	ldrh	r3, [r7, #8]
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	2200      	movs	r2, #0
 8008a84:	2180      	movs	r1, #128	; 0x80
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f000 f884 	bl	8008b94 <I2C_WaitOnFlagUntilTimeout>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d001      	beq.n	8008a96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e000      	b.n	8008a98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	80002000 	.word	0x80002000

08008aa4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	4608      	mov	r0, r1
 8008aae:	4611      	mov	r1, r2
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	817b      	strh	r3, [r7, #10]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	813b      	strh	r3, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	8979      	ldrh	r1, [r7, #10]
 8008ac4:	4b20      	ldr	r3, [pc, #128]	; (8008b48 <I2C_RequestMemoryRead+0xa4>)
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	2300      	movs	r3, #0
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 fa0a 	bl	8008ee4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ad0:	69fa      	ldr	r2, [r7, #28]
 8008ad2:	69b9      	ldr	r1, [r7, #24]
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f000 f89d 	bl	8008c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e02c      	b.n	8008b3e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ae4:	88fb      	ldrh	r3, [r7, #6]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d105      	bne.n	8008af6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008aea:	893b      	ldrh	r3, [r7, #8]
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	629a      	str	r2, [r3, #40]	; 0x28
 8008af4:	e015      	b.n	8008b22 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008af6:	893b      	ldrh	r3, [r7, #8]
 8008af8:	0a1b      	lsrs	r3, r3, #8
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b04:	69fa      	ldr	r2, [r7, #28]
 8008b06:	69b9      	ldr	r1, [r7, #24]
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 f883 	bl	8008c14 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e012      	b.n	8008b3e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b18:	893b      	ldrh	r3, [r7, #8]
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2140      	movs	r1, #64	; 0x40
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 f831 	bl	8008b94 <I2C_WaitOnFlagUntilTimeout>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e000      	b.n	8008b3e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	80002000 	.word	0x80002000

08008b4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d103      	bne.n	8008b6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2200      	movs	r2, #0
 8008b68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d007      	beq.n	8008b88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	699a      	ldr	r2, [r3, #24]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0201 	orr.w	r2, r2, #1
 8008b86:	619a      	str	r2, [r3, #24]
  }
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	603b      	str	r3, [r7, #0]
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ba4:	e022      	b.n	8008bec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bac:	d01e      	beq.n	8008bec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bae:	f7fd fde5 	bl	800677c <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	683a      	ldr	r2, [r7, #0]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d302      	bcc.n	8008bc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d113      	bne.n	8008bec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc8:	f043 0220 	orr.w	r2, r3, #32
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e00f      	b.n	8008c0c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	699a      	ldr	r2, [r3, #24]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	bf0c      	ite	eq
 8008bfc:	2301      	moveq	r3, #1
 8008bfe:	2300      	movne	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	461a      	mov	r2, r3
 8008c04:	79fb      	ldrb	r3, [r7, #7]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d0cd      	beq.n	8008ba6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c20:	e02c      	b.n	8008c7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	68b9      	ldr	r1, [r7, #8]
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 f870 	bl	8008d0c <I2C_IsErrorOccurred>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e02a      	b.n	8008c8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3c:	d01e      	beq.n	8008c7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c3e:	f7fd fd9d 	bl	800677c <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d302      	bcc.n	8008c54 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d113      	bne.n	8008c7c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c58:	f043 0220 	orr.w	r2, r3, #32
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2220      	movs	r2, #32
 8008c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e007      	b.n	8008c8c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	f003 0302 	and.w	r3, r3, #2
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d1cb      	bne.n	8008c22 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ca0:	e028      	b.n	8008cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	68b9      	ldr	r1, [r7, #8]
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f000 f830 	bl	8008d0c <I2C_IsErrorOccurred>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e026      	b.n	8008d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cb6:	f7fd fd61 	bl	800677c <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d302      	bcc.n	8008ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d113      	bne.n	8008cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd0:	f043 0220 	orr.w	r2, r3, #32
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e007      	b.n	8008d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d1cf      	bne.n	8008ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b08a      	sub	sp, #40	; 0x28
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008d26:	2300      	movs	r3, #0
 8008d28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	f003 0310 	and.w	r3, r3, #16
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d075      	beq.n	8008e24 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2210      	movs	r2, #16
 8008d3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d40:	e056      	b.n	8008df0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d48:	d052      	beq.n	8008df0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d4a:	f7fd fd17 	bl	800677c <HAL_GetTick>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	429a      	cmp	r2, r3
 8008d58:	d302      	bcc.n	8008d60 <I2C_IsErrorOccurred+0x54>
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d147      	bne.n	8008df0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d82:	d12e      	bne.n	8008de2 <I2C_IsErrorOccurred+0xd6>
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d8a:	d02a      	beq.n	8008de2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008d8c:	7cfb      	ldrb	r3, [r7, #19]
 8008d8e:	2b20      	cmp	r3, #32
 8008d90:	d027      	beq.n	8008de2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008da0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008da2:	f7fd fceb 	bl	800677c <HAL_GetTick>
 8008da6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008da8:	e01b      	b.n	8008de2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008daa:	f7fd fce7 	bl	800677c <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	2b19      	cmp	r3, #25
 8008db6:	d914      	bls.n	8008de2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dbc:	f043 0220 	orr.w	r2, r3, #32
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2220      	movs	r2, #32
 8008dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b20      	cmp	r3, #32
 8008dee:	d1dc      	bne.n	8008daa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b20      	cmp	r3, #32
 8008dfc:	d003      	beq.n	8008e06 <I2C_IsErrorOccurred+0xfa>
 8008dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d09d      	beq.n	8008d42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d103      	bne.n	8008e16 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2220      	movs	r2, #32
 8008e14:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	f043 0304 	orr.w	r3, r3, #4
 8008e1c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00b      	beq.n	8008e4e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	f043 0301 	orr.w	r3, r3, #1
 8008e3c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00b      	beq.n	8008e70 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	f043 0308 	orr.w	r3, r3, #8
 8008e5e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008e70:	69bb      	ldr	r3, [r7, #24]
 8008e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00b      	beq.n	8008e92 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008e7a:	6a3b      	ldr	r3, [r7, #32]
 8008e7c:	f043 0302 	orr.w	r3, r3, #2
 8008e80:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d01c      	beq.n	8008ed4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f7ff fe56 	bl	8008b4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6859      	ldr	r1, [r3, #4]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	4b0d      	ldr	r3, [pc, #52]	; (8008ee0 <I2C_IsErrorOccurred+0x1d4>)
 8008eac:	400b      	ands	r3, r1
 8008eae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3728      	adds	r7, #40	; 0x28
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	fe00e800 	.word	0xfe00e800

08008ee4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	607b      	str	r3, [r7, #4]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	817b      	strh	r3, [r7, #10]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ef6:	897b      	ldrh	r3, [r7, #10]
 8008ef8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008efc:	7a7b      	ldrb	r3, [r7, #9]
 8008efe:	041b      	lsls	r3, r3, #16
 8008f00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f04:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f12:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	6a3b      	ldr	r3, [r7, #32]
 8008f1c:	0d5b      	lsrs	r3, r3, #21
 8008f1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008f22:	4b08      	ldr	r3, [pc, #32]	; (8008f44 <I2C_TransferConfig+0x60>)
 8008f24:	430b      	orrs	r3, r1
 8008f26:	43db      	mvns	r3, r3
 8008f28:	ea02 0103 	and.w	r1, r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008f36:	bf00      	nop
 8008f38:	371c      	adds	r7, #28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	03ff63ff 	.word	0x03ff63ff

08008f48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b20      	cmp	r3, #32
 8008f5c:	d138      	bne.n	8008fd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d101      	bne.n	8008f6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	e032      	b.n	8008fd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2224      	movs	r2, #36	; 0x24
 8008f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0201 	bic.w	r2, r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6819      	ldr	r1, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f042 0201 	orr.w	r2, r2, #1
 8008fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	e000      	b.n	8008fd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fd0:	2302      	movs	r3, #2
  }
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b085      	sub	sp, #20
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b20      	cmp	r3, #32
 8008ff2:	d139      	bne.n	8009068 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d101      	bne.n	8009002 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008ffe:	2302      	movs	r3, #2
 8009000:	e033      	b.n	800906a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2224      	movs	r2, #36	; 0x24
 800900e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f022 0201 	bic.w	r2, r2, #1
 8009020:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009030:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	021b      	lsls	r3, r3, #8
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	4313      	orrs	r3, r2
 800903a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2220      	movs	r2, #32
 8009058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	e000      	b.n	800906a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009068:	2302      	movs	r3, #2
  }
}
 800906a:	4618      	mov	r0, r3
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
	...

08009078 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e0bf      	b.n	800920a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009090:	b2db      	uxtb	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d106      	bne.n	80090a4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7fc fe88 	bl	8005db4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2202      	movs	r2, #2
 80090a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	699a      	ldr	r2, [r3, #24]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80090ba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6999      	ldr	r1, [r3, #24]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80090d0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	430a      	orrs	r2, r1
 80090de:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6899      	ldr	r1, [r3, #8]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	4b4a      	ldr	r3, [pc, #296]	; (8009214 <HAL_LTDC_Init+0x19c>)
 80090ec:	400b      	ands	r3, r1
 80090ee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	695b      	ldr	r3, [r3, #20]
 80090f4:	041b      	lsls	r3, r3, #16
 80090f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6899      	ldr	r1, [r3, #8]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	699a      	ldr	r2, [r3, #24]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	431a      	orrs	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	430a      	orrs	r2, r1
 800910c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68d9      	ldr	r1, [r3, #12]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	4b3e      	ldr	r3, [pc, #248]	; (8009214 <HAL_LTDC_Init+0x19c>)
 800911a:	400b      	ands	r3, r1
 800911c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	69db      	ldr	r3, [r3, #28]
 8009122:	041b      	lsls	r3, r3, #16
 8009124:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68d9      	ldr	r1, [r3, #12]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a1a      	ldr	r2, [r3, #32]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	431a      	orrs	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	430a      	orrs	r2, r1
 800913a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	6919      	ldr	r1, [r3, #16]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	4b33      	ldr	r3, [pc, #204]	; (8009214 <HAL_LTDC_Init+0x19c>)
 8009148:	400b      	ands	r3, r1
 800914a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009150:	041b      	lsls	r3, r3, #16
 8009152:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6919      	ldr	r1, [r3, #16]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	431a      	orrs	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	430a      	orrs	r2, r1
 8009168:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	6959      	ldr	r1, [r3, #20]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	4b27      	ldr	r3, [pc, #156]	; (8009214 <HAL_LTDC_Init+0x19c>)
 8009176:	400b      	ands	r3, r1
 8009178:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917e:	041b      	lsls	r3, r3, #16
 8009180:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6959      	ldr	r1, [r3, #20]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	431a      	orrs	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	430a      	orrs	r2, r1
 8009196:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800919e:	021b      	lsls	r3, r3, #8
 80091a0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80091a8:	041b      	lsls	r3, r3, #16
 80091aa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80091ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80091ce:	431a      	orrs	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f042 0206 	orr.w	r2, r2, #6
 80091e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	699a      	ldr	r2, [r3, #24]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f042 0201 	orr.w	r2, r2, #1
 80091f6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	f000f800 	.word	0xf000f800

08009218 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009226:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f003 0304 	and.w	r3, r3, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	d023      	beq.n	8009282 <HAL_LTDC_IRQHandler+0x6a>
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	f003 0304 	and.w	r3, r3, #4
 8009240:	2b00      	cmp	r3, #0
 8009242:	d01e      	beq.n	8009282 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f022 0204 	bic.w	r2, r2, #4
 8009252:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2204      	movs	r2, #4
 800925a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009262:	f043 0201 	orr.w	r2, r3, #1
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2204      	movs	r2, #4
 8009270:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 f86f 	bl	8009360 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d023      	beq.n	80092d4 <HAL_LTDC_IRQHandler+0xbc>
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d01e      	beq.n	80092d4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0202 	bic.w	r2, r2, #2
 80092a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2202      	movs	r2, #2
 80092ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80092b4:	f043 0202 	orr.w	r2, r3, #2
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2204      	movs	r2, #4
 80092c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f846 	bl	8009360 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d01b      	beq.n	8009316 <HAL_LTDC_IRQHandler+0xfe>
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d016      	beq.n	8009316 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0201 	bic.w	r2, r2, #1
 80092f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2201      	movs	r2, #1
 80092fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f82f 	bl	8009374 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f003 0308 	and.w	r3, r3, #8
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01b      	beq.n	8009358 <HAL_LTDC_IRQHandler+0x140>
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	f003 0308 	and.w	r3, r3, #8
 8009326:	2b00      	cmp	r3, #0
 8009328:	d016      	beq.n	8009358 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0208 	bic.w	r2, r2, #8
 8009338:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2208      	movs	r2, #8
 8009340:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f818 	bl	8009388 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009358:	bf00      	nop
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009368:	bf00      	nop
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800939c:	b5b0      	push	{r4, r5, r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d101      	bne.n	80093b6 <HAL_LTDC_ConfigLayer+0x1a>
 80093b2:	2302      	movs	r3, #2
 80093b4:	e02c      	b.n	8009410 <HAL_LTDC_ConfigLayer+0x74>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2202      	movs	r2, #2
 80093c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2134      	movs	r1, #52	; 0x34
 80093cc:	fb01 f303 	mul.w	r3, r1, r3
 80093d0:	4413      	add	r3, r2
 80093d2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	4614      	mov	r4, r2
 80093da:	461d      	mov	r5, r3
 80093dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093e8:	682b      	ldr	r3, [r5, #0]
 80093ea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	68b9      	ldr	r1, [r7, #8]
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 f81f 	bl	8009434 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2201      	movs	r2, #1
 80093fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2201      	movs	r2, #1
 8009402:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bdb0      	pop	{r4, r5, r7, pc}

08009418 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009426:	b2db      	uxtb	r3, r3
}
 8009428:	4618      	mov	r0, r3
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009434:	b480      	push	{r7}
 8009436:	b089      	sub	sp, #36	; 0x24
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	0c1b      	lsrs	r3, r3, #16
 800944c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009450:	4413      	add	r3, r2
 8009452:	041b      	lsls	r3, r3, #16
 8009454:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	01db      	lsls	r3, r3, #7
 8009460:	4413      	add	r3, r2
 8009462:	3384      	adds	r3, #132	; 0x84
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	6812      	ldr	r2, [r2, #0]
 800946a:	4611      	mov	r1, r2
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	01d2      	lsls	r2, r2, #7
 8009470:	440a      	add	r2, r1
 8009472:	3284      	adds	r2, #132	; 0x84
 8009474:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009478:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	0c1b      	lsrs	r3, r3, #16
 8009486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800948a:	4413      	add	r3, r2
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4619      	mov	r1, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	01db      	lsls	r3, r3, #7
 8009498:	440b      	add	r3, r1
 800949a:	3384      	adds	r3, #132	; 0x84
 800949c:	4619      	mov	r1, r3
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	68da      	ldr	r2, [r3, #12]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094b2:	4413      	add	r3, r2
 80094b4:	041b      	lsls	r3, r3, #16
 80094b6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	461a      	mov	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	01db      	lsls	r3, r3, #7
 80094c2:	4413      	add	r3, r2
 80094c4:	3384      	adds	r3, #132	; 0x84
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	6812      	ldr	r2, [r2, #0]
 80094cc:	4611      	mov	r1, r2
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	01d2      	lsls	r2, r2, #7
 80094d2:	440a      	add	r2, r1
 80094d4:	3284      	adds	r2, #132	; 0x84
 80094d6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80094da:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094ea:	4413      	add	r3, r2
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4619      	mov	r1, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	01db      	lsls	r3, r3, #7
 80094f8:	440b      	add	r3, r1
 80094fa:	3384      	adds	r3, #132	; 0x84
 80094fc:	4619      	mov	r1, r3
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	4313      	orrs	r3, r2
 8009502:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	01db      	lsls	r3, r3, #7
 800950e:	4413      	add	r3, r2
 8009510:	3384      	adds	r3, #132	; 0x84
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	6812      	ldr	r2, [r2, #0]
 8009518:	4611      	mov	r1, r2
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	01d2      	lsls	r2, r2, #7
 800951e:	440a      	add	r2, r1
 8009520:	3284      	adds	r2, #132	; 0x84
 8009522:	f023 0307 	bic.w	r3, r3, #7
 8009526:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	461a      	mov	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	01db      	lsls	r3, r3, #7
 8009532:	4413      	add	r3, r2
 8009534:	3384      	adds	r3, #132	; 0x84
 8009536:	461a      	mov	r2, r3
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009544:	021b      	lsls	r3, r3, #8
 8009546:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800954e:	041b      	lsls	r3, r3, #16
 8009550:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	061b      	lsls	r3, r3, #24
 8009558:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	01db      	lsls	r3, r3, #7
 8009564:	4413      	add	r3, r2
 8009566:	3384      	adds	r3, #132	; 0x84
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	461a      	mov	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	01db      	lsls	r3, r3, #7
 8009574:	4413      	add	r3, r2
 8009576:	3384      	adds	r3, #132	; 0x84
 8009578:	461a      	mov	r2, r3
 800957a:	2300      	movs	r3, #0
 800957c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009584:	461a      	mov	r2, r3
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	431a      	orrs	r2, r3
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	431a      	orrs	r2, r3
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4619      	mov	r1, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	01db      	lsls	r3, r3, #7
 8009598:	440b      	add	r3, r1
 800959a:	3384      	adds	r3, #132	; 0x84
 800959c:	4619      	mov	r1, r3
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	461a      	mov	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	01db      	lsls	r3, r3, #7
 80095ae:	4413      	add	r3, r2
 80095b0:	3384      	adds	r3, #132	; 0x84
 80095b2:	695b      	ldr	r3, [r3, #20]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	6812      	ldr	r2, [r2, #0]
 80095b8:	4611      	mov	r1, r2
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	01d2      	lsls	r2, r2, #7
 80095be:	440a      	add	r2, r1
 80095c0:	3284      	adds	r2, #132	; 0x84
 80095c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80095c6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	01db      	lsls	r3, r3, #7
 80095d2:	4413      	add	r3, r2
 80095d4:	3384      	adds	r3, #132	; 0x84
 80095d6:	461a      	mov	r2, r3
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	695b      	ldr	r3, [r3, #20]
 80095dc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	461a      	mov	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	01db      	lsls	r3, r3, #7
 80095e8:	4413      	add	r3, r2
 80095ea:	3384      	adds	r3, #132	; 0x84
 80095ec:	69da      	ldr	r2, [r3, #28]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4619      	mov	r1, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	01db      	lsls	r3, r3, #7
 80095f8:	440b      	add	r3, r1
 80095fa:	3384      	adds	r3, #132	; 0x84
 80095fc:	4619      	mov	r1, r3
 80095fe:	4b58      	ldr	r3, [pc, #352]	; (8009760 <LTDC_SetConfig+0x32c>)
 8009600:	4013      	ands	r3, r2
 8009602:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	69da      	ldr	r2, [r3, #28]
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	6a1b      	ldr	r3, [r3, #32]
 800960c:	68f9      	ldr	r1, [r7, #12]
 800960e:	6809      	ldr	r1, [r1, #0]
 8009610:	4608      	mov	r0, r1
 8009612:	6879      	ldr	r1, [r7, #4]
 8009614:	01c9      	lsls	r1, r1, #7
 8009616:	4401      	add	r1, r0
 8009618:	3184      	adds	r1, #132	; 0x84
 800961a:	4313      	orrs	r3, r2
 800961c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	01db      	lsls	r3, r3, #7
 8009628:	4413      	add	r3, r2
 800962a:	3384      	adds	r3, #132	; 0x84
 800962c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	01db      	lsls	r3, r3, #7
 8009638:	4413      	add	r3, r2
 800963a:	3384      	adds	r3, #132	; 0x84
 800963c:	461a      	mov	r2, r3
 800963e:	2300      	movs	r3, #0
 8009640:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	01db      	lsls	r3, r3, #7
 800964c:	4413      	add	r3, r2
 800964e:	3384      	adds	r3, #132	; 0x84
 8009650:	461a      	mov	r2, r3
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009656:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d102      	bne.n	8009666 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8009660:	2304      	movs	r3, #4
 8009662:	61fb      	str	r3, [r7, #28]
 8009664:	e01b      	b.n	800969e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	691b      	ldr	r3, [r3, #16]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d102      	bne.n	8009674 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800966e:	2303      	movs	r3, #3
 8009670:	61fb      	str	r3, [r7, #28]
 8009672:	e014      	b.n	800969e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	2b04      	cmp	r3, #4
 800967a:	d00b      	beq.n	8009694 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009680:	2b02      	cmp	r3, #2
 8009682:	d007      	beq.n	8009694 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009688:	2b03      	cmp	r3, #3
 800968a:	d003      	beq.n	8009694 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009690:	2b07      	cmp	r3, #7
 8009692:	d102      	bne.n	800969a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8009694:	2302      	movs	r3, #2
 8009696:	61fb      	str	r3, [r7, #28]
 8009698:	e001      	b.n	800969e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800969a:	2301      	movs	r3, #1
 800969c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	01db      	lsls	r3, r3, #7
 80096a8:	4413      	add	r3, r2
 80096aa:	3384      	adds	r3, #132	; 0x84
 80096ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	6812      	ldr	r2, [r2, #0]
 80096b2:	4611      	mov	r1, r2
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	01d2      	lsls	r2, r2, #7
 80096b8:	440a      	add	r2, r1
 80096ba:	3284      	adds	r2, #132	; 0x84
 80096bc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80096c0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	fb02 f303 	mul.w	r3, r2, r3
 80096cc:	041a      	lsls	r2, r3, #16
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6859      	ldr	r1, [r3, #4]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	1acb      	subs	r3, r1, r3
 80096d8:	69f9      	ldr	r1, [r7, #28]
 80096da:	fb01 f303 	mul.w	r3, r1, r3
 80096de:	3303      	adds	r3, #3
 80096e0:	68f9      	ldr	r1, [r7, #12]
 80096e2:	6809      	ldr	r1, [r1, #0]
 80096e4:	4608      	mov	r0, r1
 80096e6:	6879      	ldr	r1, [r7, #4]
 80096e8:	01c9      	lsls	r1, r1, #7
 80096ea:	4401      	add	r1, r0
 80096ec:	3184      	adds	r1, #132	; 0x84
 80096ee:	4313      	orrs	r3, r2
 80096f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	01db      	lsls	r3, r3, #7
 80096fc:	4413      	add	r3, r2
 80096fe:	3384      	adds	r3, #132	; 0x84
 8009700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4619      	mov	r1, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	01db      	lsls	r3, r3, #7
 800970c:	440b      	add	r3, r1
 800970e:	3384      	adds	r3, #132	; 0x84
 8009710:	4619      	mov	r1, r3
 8009712:	4b14      	ldr	r3, [pc, #80]	; (8009764 <LTDC_SetConfig+0x330>)
 8009714:	4013      	ands	r3, r2
 8009716:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	461a      	mov	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	01db      	lsls	r3, r3, #7
 8009722:	4413      	add	r3, r2
 8009724:	3384      	adds	r3, #132	; 0x84
 8009726:	461a      	mov	r2, r3
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	01db      	lsls	r3, r3, #7
 8009738:	4413      	add	r3, r2
 800973a:	3384      	adds	r3, #132	; 0x84
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	6812      	ldr	r2, [r2, #0]
 8009742:	4611      	mov	r1, r2
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	01d2      	lsls	r2, r2, #7
 8009748:	440a      	add	r2, r1
 800974a:	3284      	adds	r2, #132	; 0x84
 800974c:	f043 0301 	orr.w	r3, r3, #1
 8009750:	6013      	str	r3, [r2, #0]
}
 8009752:	bf00      	nop
 8009754:	3724      	adds	r7, #36	; 0x24
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	fffff8f8 	.word	0xfffff8f8
 8009764:	fffff800 	.word	0xfffff800

08009768 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009768:	b480      	push	{r7}
 800976a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800976c:	4b05      	ldr	r3, [pc, #20]	; (8009784 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a04      	ldr	r2, [pc, #16]	; (8009784 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009776:	6013      	str	r3, [r2, #0]
}
 8009778:	bf00      	nop
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr
 8009782:	bf00      	nop
 8009784:	40007000 	.word	0x40007000

08009788 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800978e:	2300      	movs	r3, #0
 8009790:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009792:	4b23      	ldr	r3, [pc, #140]	; (8009820 <HAL_PWREx_EnableOverDrive+0x98>)
 8009794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009796:	4a22      	ldr	r2, [pc, #136]	; (8009820 <HAL_PWREx_EnableOverDrive+0x98>)
 8009798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800979c:	6413      	str	r3, [r2, #64]	; 0x40
 800979e:	4b20      	ldr	r3, [pc, #128]	; (8009820 <HAL_PWREx_EnableOverDrive+0x98>)
 80097a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80097aa:	4b1e      	ldr	r3, [pc, #120]	; (8009824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a1d      	ldr	r2, [pc, #116]	; (8009824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80097b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097b6:	f7fc ffe1 	bl	800677c <HAL_GetTick>
 80097ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80097bc:	e009      	b.n	80097d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80097be:	f7fc ffdd 	bl	800677c <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097cc:	d901      	bls.n	80097d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e022      	b.n	8009818 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80097d2:	4b14      	ldr	r3, [pc, #80]	; (8009824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097de:	d1ee      	bne.n	80097be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80097e0:	4b10      	ldr	r3, [pc, #64]	; (8009824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a0f      	ldr	r2, [pc, #60]	; (8009824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80097e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097ec:	f7fc ffc6 	bl	800677c <HAL_GetTick>
 80097f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80097f2:	e009      	b.n	8009808 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80097f4:	f7fc ffc2 	bl	800677c <HAL_GetTick>
 80097f8:	4602      	mov	r2, r0
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009802:	d901      	bls.n	8009808 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	e007      	b.n	8009818 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009808:	4b06      	ldr	r3, [pc, #24]	; (8009824 <HAL_PWREx_EnableOverDrive+0x9c>)
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009814:	d1ee      	bne.n	80097f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	40023800 	.word	0x40023800
 8009824:	40007000 	.word	0x40007000

08009828 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009830:	2300      	movs	r3, #0
 8009832:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d101      	bne.n	800983e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e291      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	f000 8087 	beq.w	800995a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800984c:	4b96      	ldr	r3, [pc, #600]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f003 030c 	and.w	r3, r3, #12
 8009854:	2b04      	cmp	r3, #4
 8009856:	d00c      	beq.n	8009872 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009858:	4b93      	ldr	r3, [pc, #588]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f003 030c 	and.w	r3, r3, #12
 8009860:	2b08      	cmp	r3, #8
 8009862:	d112      	bne.n	800988a <HAL_RCC_OscConfig+0x62>
 8009864:	4b90      	ldr	r3, [pc, #576]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800986c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009870:	d10b      	bne.n	800988a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009872:	4b8d      	ldr	r3, [pc, #564]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d06c      	beq.n	8009958 <HAL_RCC_OscConfig+0x130>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d168      	bne.n	8009958 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e26b      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009892:	d106      	bne.n	80098a2 <HAL_RCC_OscConfig+0x7a>
 8009894:	4b84      	ldr	r3, [pc, #528]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a83      	ldr	r2, [pc, #524]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 800989a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	e02e      	b.n	8009900 <HAL_RCC_OscConfig+0xd8>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10c      	bne.n	80098c4 <HAL_RCC_OscConfig+0x9c>
 80098aa:	4b7f      	ldr	r3, [pc, #508]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a7e      	ldr	r2, [pc, #504]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80098b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	4b7c      	ldr	r3, [pc, #496]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a7b      	ldr	r2, [pc, #492]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80098bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	e01d      	b.n	8009900 <HAL_RCC_OscConfig+0xd8>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098cc:	d10c      	bne.n	80098e8 <HAL_RCC_OscConfig+0xc0>
 80098ce:	4b76      	ldr	r3, [pc, #472]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a75      	ldr	r2, [pc, #468]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80098d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	4b73      	ldr	r3, [pc, #460]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a72      	ldr	r2, [pc, #456]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80098e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	e00b      	b.n	8009900 <HAL_RCC_OscConfig+0xd8>
 80098e8:	4b6f      	ldr	r3, [pc, #444]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a6e      	ldr	r2, [pc, #440]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80098ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	4b6c      	ldr	r3, [pc, #432]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a6b      	ldr	r2, [pc, #428]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80098fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d013      	beq.n	8009930 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009908:	f7fc ff38 	bl	800677c <HAL_GetTick>
 800990c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800990e:	e008      	b.n	8009922 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009910:	f7fc ff34 	bl	800677c <HAL_GetTick>
 8009914:	4602      	mov	r2, r0
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	2b64      	cmp	r3, #100	; 0x64
 800991c:	d901      	bls.n	8009922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	e21f      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009922:	4b61      	ldr	r3, [pc, #388]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992a:	2b00      	cmp	r3, #0
 800992c:	d0f0      	beq.n	8009910 <HAL_RCC_OscConfig+0xe8>
 800992e:	e014      	b.n	800995a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009930:	f7fc ff24 	bl	800677c <HAL_GetTick>
 8009934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009936:	e008      	b.n	800994a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009938:	f7fc ff20 	bl	800677c <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	2b64      	cmp	r3, #100	; 0x64
 8009944:	d901      	bls.n	800994a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e20b      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800994a:	4b57      	ldr	r3, [pc, #348]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1f0      	bne.n	8009938 <HAL_RCC_OscConfig+0x110>
 8009956:	e000      	b.n	800995a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 0302 	and.w	r3, r3, #2
 8009962:	2b00      	cmp	r3, #0
 8009964:	d069      	beq.n	8009a3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009966:	4b50      	ldr	r3, [pc, #320]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f003 030c 	and.w	r3, r3, #12
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00b      	beq.n	800998a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009972:	4b4d      	ldr	r3, [pc, #308]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	f003 030c 	and.w	r3, r3, #12
 800997a:	2b08      	cmp	r3, #8
 800997c:	d11c      	bne.n	80099b8 <HAL_RCC_OscConfig+0x190>
 800997e:	4b4a      	ldr	r3, [pc, #296]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d116      	bne.n	80099b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800998a:	4b47      	ldr	r3, [pc, #284]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0302 	and.w	r3, r3, #2
 8009992:	2b00      	cmp	r3, #0
 8009994:	d005      	beq.n	80099a2 <HAL_RCC_OscConfig+0x17a>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d001      	beq.n	80099a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e1df      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099a2:	4b41      	ldr	r3, [pc, #260]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	00db      	lsls	r3, r3, #3
 80099b0:	493d      	ldr	r1, [pc, #244]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80099b6:	e040      	b.n	8009a3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d023      	beq.n	8009a08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099c0:	4b39      	ldr	r3, [pc, #228]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a38      	ldr	r2, [pc, #224]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80099c6:	f043 0301 	orr.w	r3, r3, #1
 80099ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099cc:	f7fc fed6 	bl	800677c <HAL_GetTick>
 80099d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099d2:	e008      	b.n	80099e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099d4:	f7fc fed2 	bl	800677c <HAL_GetTick>
 80099d8:	4602      	mov	r2, r0
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d901      	bls.n	80099e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e1bd      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099e6:	4b30      	ldr	r3, [pc, #192]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0f0      	beq.n	80099d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099f2:	4b2d      	ldr	r3, [pc, #180]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691b      	ldr	r3, [r3, #16]
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	4929      	ldr	r1, [pc, #164]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009a02:	4313      	orrs	r3, r2
 8009a04:	600b      	str	r3, [r1, #0]
 8009a06:	e018      	b.n	8009a3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a08:	4b27      	ldr	r3, [pc, #156]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a26      	ldr	r2, [pc, #152]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009a0e:	f023 0301 	bic.w	r3, r3, #1
 8009a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a14:	f7fc feb2 	bl	800677c <HAL_GetTick>
 8009a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a1a:	e008      	b.n	8009a2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a1c:	f7fc feae 	bl	800677c <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d901      	bls.n	8009a2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e199      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009a2e:	4b1e      	ldr	r3, [pc, #120]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 0302 	and.w	r3, r3, #2
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1f0      	bne.n	8009a1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 0308 	and.w	r3, r3, #8
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d038      	beq.n	8009ab8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d019      	beq.n	8009a82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a4e:	4b16      	ldr	r3, [pc, #88]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a52:	4a15      	ldr	r2, [pc, #84]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009a54:	f043 0301 	orr.w	r3, r3, #1
 8009a58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a5a:	f7fc fe8f 	bl	800677c <HAL_GetTick>
 8009a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a60:	e008      	b.n	8009a74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a62:	f7fc fe8b 	bl	800677c <HAL_GetTick>
 8009a66:	4602      	mov	r2, r0
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d901      	bls.n	8009a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e176      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a74:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a78:	f003 0302 	and.w	r3, r3, #2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d0f0      	beq.n	8009a62 <HAL_RCC_OscConfig+0x23a>
 8009a80:	e01a      	b.n	8009ab8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a82:	4b09      	ldr	r3, [pc, #36]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a86:	4a08      	ldr	r2, [pc, #32]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009a88:	f023 0301 	bic.w	r3, r3, #1
 8009a8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a8e:	f7fc fe75 	bl	800677c <HAL_GetTick>
 8009a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a94:	e00a      	b.n	8009aac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a96:	f7fc fe71 	bl	800677c <HAL_GetTick>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d903      	bls.n	8009aac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e15c      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
 8009aa8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009aac:	4b91      	ldr	r3, [pc, #580]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ab0:	f003 0302 	and.w	r3, r3, #2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1ee      	bne.n	8009a96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 80a4 	beq.w	8009c0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009ac6:	4b8b      	ldr	r3, [pc, #556]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10d      	bne.n	8009aee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ad2:	4b88      	ldr	r3, [pc, #544]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad6:	4a87      	ldr	r2, [pc, #540]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009adc:	6413      	str	r3, [r2, #64]	; 0x40
 8009ade:	4b85      	ldr	r3, [pc, #532]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ae6:	60bb      	str	r3, [r7, #8]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009aea:	2301      	movs	r3, #1
 8009aec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009aee:	4b82      	ldr	r3, [pc, #520]	; (8009cf8 <HAL_RCC_OscConfig+0x4d0>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d118      	bne.n	8009b2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8009afa:	4b7f      	ldr	r3, [pc, #508]	; (8009cf8 <HAL_RCC_OscConfig+0x4d0>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a7e      	ldr	r2, [pc, #504]	; (8009cf8 <HAL_RCC_OscConfig+0x4d0>)
 8009b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b06:	f7fc fe39 	bl	800677c <HAL_GetTick>
 8009b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b0c:	e008      	b.n	8009b20 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b0e:	f7fc fe35 	bl	800677c <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	2b64      	cmp	r3, #100	; 0x64
 8009b1a:	d901      	bls.n	8009b20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	e120      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b20:	4b75      	ldr	r3, [pc, #468]	; (8009cf8 <HAL_RCC_OscConfig+0x4d0>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d0f0      	beq.n	8009b0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d106      	bne.n	8009b42 <HAL_RCC_OscConfig+0x31a>
 8009b34:	4b6f      	ldr	r3, [pc, #444]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b38:	4a6e      	ldr	r2, [pc, #440]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b3a:	f043 0301 	orr.w	r3, r3, #1
 8009b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8009b40:	e02d      	b.n	8009b9e <HAL_RCC_OscConfig+0x376>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10c      	bne.n	8009b64 <HAL_RCC_OscConfig+0x33c>
 8009b4a:	4b6a      	ldr	r3, [pc, #424]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b4e:	4a69      	ldr	r2, [pc, #420]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b50:	f023 0301 	bic.w	r3, r3, #1
 8009b54:	6713      	str	r3, [r2, #112]	; 0x70
 8009b56:	4b67      	ldr	r3, [pc, #412]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b5a:	4a66      	ldr	r2, [pc, #408]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b5c:	f023 0304 	bic.w	r3, r3, #4
 8009b60:	6713      	str	r3, [r2, #112]	; 0x70
 8009b62:	e01c      	b.n	8009b9e <HAL_RCC_OscConfig+0x376>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	2b05      	cmp	r3, #5
 8009b6a:	d10c      	bne.n	8009b86 <HAL_RCC_OscConfig+0x35e>
 8009b6c:	4b61      	ldr	r3, [pc, #388]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b70:	4a60      	ldr	r2, [pc, #384]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b72:	f043 0304 	orr.w	r3, r3, #4
 8009b76:	6713      	str	r3, [r2, #112]	; 0x70
 8009b78:	4b5e      	ldr	r3, [pc, #376]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b7c:	4a5d      	ldr	r2, [pc, #372]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b7e:	f043 0301 	orr.w	r3, r3, #1
 8009b82:	6713      	str	r3, [r2, #112]	; 0x70
 8009b84:	e00b      	b.n	8009b9e <HAL_RCC_OscConfig+0x376>
 8009b86:	4b5b      	ldr	r3, [pc, #364]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b8a:	4a5a      	ldr	r2, [pc, #360]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b8c:	f023 0301 	bic.w	r3, r3, #1
 8009b90:	6713      	str	r3, [r2, #112]	; 0x70
 8009b92:	4b58      	ldr	r3, [pc, #352]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b96:	4a57      	ldr	r2, [pc, #348]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009b98:	f023 0304 	bic.w	r3, r3, #4
 8009b9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d015      	beq.n	8009bd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ba6:	f7fc fde9 	bl	800677c <HAL_GetTick>
 8009baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bac:	e00a      	b.n	8009bc4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bae:	f7fc fde5 	bl	800677c <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d901      	bls.n	8009bc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e0ce      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bc4:	4b4b      	ldr	r3, [pc, #300]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc8:	f003 0302 	and.w	r3, r3, #2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0ee      	beq.n	8009bae <HAL_RCC_OscConfig+0x386>
 8009bd0:	e014      	b.n	8009bfc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bd2:	f7fc fdd3 	bl	800677c <HAL_GetTick>
 8009bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bd8:	e00a      	b.n	8009bf0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bda:	f7fc fdcf 	bl	800677c <HAL_GetTick>
 8009bde:	4602      	mov	r2, r0
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d901      	bls.n	8009bf0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8009bec:	2303      	movs	r3, #3
 8009bee:	e0b8      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009bf0:	4b40      	ldr	r3, [pc, #256]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf4:	f003 0302 	and.w	r3, r3, #2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1ee      	bne.n	8009bda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d105      	bne.n	8009c0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c02:	4b3c      	ldr	r3, [pc, #240]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c06:	4a3b      	ldr	r2, [pc, #236]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 80a4 	beq.w	8009d60 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009c18:	4b36      	ldr	r3, [pc, #216]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	f003 030c 	and.w	r3, r3, #12
 8009c20:	2b08      	cmp	r3, #8
 8009c22:	d06b      	beq.n	8009cfc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d149      	bne.n	8009cc0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c2c:	4b31      	ldr	r3, [pc, #196]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a30      	ldr	r2, [pc, #192]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c38:	f7fc fda0 	bl	800677c <HAL_GetTick>
 8009c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c3e:	e008      	b.n	8009c52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c40:	f7fc fd9c 	bl	800677c <HAL_GetTick>
 8009c44:	4602      	mov	r2, r0
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d901      	bls.n	8009c52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e087      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c52:	4b28      	ldr	r3, [pc, #160]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1f0      	bne.n	8009c40 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	69da      	ldr	r2, [r3, #28]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	431a      	orrs	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6c:	019b      	lsls	r3, r3, #6
 8009c6e:	431a      	orrs	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c74:	085b      	lsrs	r3, r3, #1
 8009c76:	3b01      	subs	r3, #1
 8009c78:	041b      	lsls	r3, r3, #16
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c80:	061b      	lsls	r3, r3, #24
 8009c82:	4313      	orrs	r3, r2
 8009c84:	4a1b      	ldr	r2, [pc, #108]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009c86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c8a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c8c:	4b19      	ldr	r3, [pc, #100]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a18      	ldr	r2, [pc, #96]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c98:	f7fc fd70 	bl	800677c <HAL_GetTick>
 8009c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c9e:	e008      	b.n	8009cb2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ca0:	f7fc fd6c 	bl	800677c <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d901      	bls.n	8009cb2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e057      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cb2:	4b10      	ldr	r3, [pc, #64]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d0f0      	beq.n	8009ca0 <HAL_RCC_OscConfig+0x478>
 8009cbe:	e04f      	b.n	8009d60 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cc0:	4b0c      	ldr	r3, [pc, #48]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a0b      	ldr	r2, [pc, #44]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009cc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ccc:	f7fc fd56 	bl	800677c <HAL_GetTick>
 8009cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cd2:	e008      	b.n	8009ce6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cd4:	f7fc fd52 	bl	800677c <HAL_GetTick>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d901      	bls.n	8009ce6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e03d      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ce6:	4b03      	ldr	r3, [pc, #12]	; (8009cf4 <HAL_RCC_OscConfig+0x4cc>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1f0      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x4ac>
 8009cf2:	e035      	b.n	8009d60 <HAL_RCC_OscConfig+0x538>
 8009cf4:	40023800 	.word	0x40023800
 8009cf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8009cfc:	4b1b      	ldr	r3, [pc, #108]	; (8009d6c <HAL_RCC_OscConfig+0x544>)
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d028      	beq.n	8009d5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d121      	bne.n	8009d5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d11a      	bne.n	8009d5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d32:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d111      	bne.n	8009d5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d42:	085b      	lsrs	r3, r3, #1
 8009d44:	3b01      	subs	r3, #1
 8009d46:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d107      	bne.n	8009d5c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d001      	beq.n	8009d60 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e000      	b.n	8009d62 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	40023800 	.word	0x40023800

08009d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	e0d0      	b.n	8009f2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009d88:	4b6a      	ldr	r3, [pc, #424]	; (8009f34 <HAL_RCC_ClockConfig+0x1c4>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 030f 	and.w	r3, r3, #15
 8009d90:	683a      	ldr	r2, [r7, #0]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d910      	bls.n	8009db8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d96:	4b67      	ldr	r3, [pc, #412]	; (8009f34 <HAL_RCC_ClockConfig+0x1c4>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f023 020f 	bic.w	r2, r3, #15
 8009d9e:	4965      	ldr	r1, [pc, #404]	; (8009f34 <HAL_RCC_ClockConfig+0x1c4>)
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009da6:	4b63      	ldr	r3, [pc, #396]	; (8009f34 <HAL_RCC_ClockConfig+0x1c4>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 030f 	and.w	r3, r3, #15
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d001      	beq.n	8009db8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e0b8      	b.n	8009f2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 0302 	and.w	r3, r3, #2
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d020      	beq.n	8009e06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0304 	and.w	r3, r3, #4
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d005      	beq.n	8009ddc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009dd0:	4b59      	ldr	r3, [pc, #356]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	4a58      	ldr	r2, [pc, #352]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009dda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 0308 	and.w	r3, r3, #8
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d005      	beq.n	8009df4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009de8:	4b53      	ldr	r3, [pc, #332]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	4a52      	ldr	r2, [pc, #328]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009df2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009df4:	4b50      	ldr	r3, [pc, #320]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	494d      	ldr	r1, [pc, #308]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009e02:	4313      	orrs	r3, r2
 8009e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d040      	beq.n	8009e94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d107      	bne.n	8009e2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e1a:	4b47      	ldr	r3, [pc, #284]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d115      	bne.n	8009e52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	e07f      	b.n	8009f2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d107      	bne.n	8009e42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e32:	4b41      	ldr	r3, [pc, #260]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d109      	bne.n	8009e52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e073      	b.n	8009f2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e42:	4b3d      	ldr	r3, [pc, #244]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 0302 	and.w	r3, r3, #2
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e06b      	b.n	8009f2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009e52:	4b39      	ldr	r3, [pc, #228]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f023 0203 	bic.w	r2, r3, #3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	4936      	ldr	r1, [pc, #216]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009e60:	4313      	orrs	r3, r2
 8009e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e64:	f7fc fc8a 	bl	800677c <HAL_GetTick>
 8009e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e6a:	e00a      	b.n	8009e82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e6c:	f7fc fc86 	bl	800677c <HAL_GetTick>
 8009e70:	4602      	mov	r2, r0
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d901      	bls.n	8009e82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e053      	b.n	8009f2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e82:	4b2d      	ldr	r3, [pc, #180]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f003 020c 	and.w	r2, r3, #12
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d1eb      	bne.n	8009e6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009e94:	4b27      	ldr	r3, [pc, #156]	; (8009f34 <HAL_RCC_ClockConfig+0x1c4>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f003 030f 	and.w	r3, r3, #15
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d210      	bcs.n	8009ec4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ea2:	4b24      	ldr	r3, [pc, #144]	; (8009f34 <HAL_RCC_ClockConfig+0x1c4>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f023 020f 	bic.w	r2, r3, #15
 8009eaa:	4922      	ldr	r1, [pc, #136]	; (8009f34 <HAL_RCC_ClockConfig+0x1c4>)
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009eb2:	4b20      	ldr	r3, [pc, #128]	; (8009f34 <HAL_RCC_ClockConfig+0x1c4>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 030f 	and.w	r3, r3, #15
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d001      	beq.n	8009ec4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e032      	b.n	8009f2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 0304 	and.w	r3, r3, #4
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d008      	beq.n	8009ee2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ed0:	4b19      	ldr	r3, [pc, #100]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	4916      	ldr	r1, [pc, #88]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 0308 	and.w	r3, r3, #8
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d009      	beq.n	8009f02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009eee:	4b12      	ldr	r3, [pc, #72]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	00db      	lsls	r3, r3, #3
 8009efc:	490e      	ldr	r1, [pc, #56]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009f02:	f000 f821 	bl	8009f48 <HAL_RCC_GetSysClockFreq>
 8009f06:	4602      	mov	r2, r0
 8009f08:	4b0b      	ldr	r3, [pc, #44]	; (8009f38 <HAL_RCC_ClockConfig+0x1c8>)
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	091b      	lsrs	r3, r3, #4
 8009f0e:	f003 030f 	and.w	r3, r3, #15
 8009f12:	490a      	ldr	r1, [pc, #40]	; (8009f3c <HAL_RCC_ClockConfig+0x1cc>)
 8009f14:	5ccb      	ldrb	r3, [r1, r3]
 8009f16:	fa22 f303 	lsr.w	r3, r2, r3
 8009f1a:	4a09      	ldr	r2, [pc, #36]	; (8009f40 <HAL_RCC_ClockConfig+0x1d0>)
 8009f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009f1e:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <HAL_RCC_ClockConfig+0x1d4>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fc fb1c 	bl	8006560 <HAL_InitTick>

  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	40023c00 	.word	0x40023c00
 8009f38:	40023800 	.word	0x40023800
 8009f3c:	08035c80 	.word	0x08035c80
 8009f40:	20000040 	.word	0x20000040
 8009f44:	20000044 	.word	0x20000044

08009f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f48:	b5b0      	push	{r4, r5, r7, lr}
 8009f4a:	b084      	sub	sp, #16
 8009f4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009f4e:	2100      	movs	r1, #0
 8009f50:	6079      	str	r1, [r7, #4]
 8009f52:	2100      	movs	r1, #0
 8009f54:	60f9      	str	r1, [r7, #12]
 8009f56:	2100      	movs	r1, #0
 8009f58:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009f5e:	4952      	ldr	r1, [pc, #328]	; (800a0a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009f60:	6889      	ldr	r1, [r1, #8]
 8009f62:	f001 010c 	and.w	r1, r1, #12
 8009f66:	2908      	cmp	r1, #8
 8009f68:	d00d      	beq.n	8009f86 <HAL_RCC_GetSysClockFreq+0x3e>
 8009f6a:	2908      	cmp	r1, #8
 8009f6c:	f200 8094 	bhi.w	800a098 <HAL_RCC_GetSysClockFreq+0x150>
 8009f70:	2900      	cmp	r1, #0
 8009f72:	d002      	beq.n	8009f7a <HAL_RCC_GetSysClockFreq+0x32>
 8009f74:	2904      	cmp	r1, #4
 8009f76:	d003      	beq.n	8009f80 <HAL_RCC_GetSysClockFreq+0x38>
 8009f78:	e08e      	b.n	800a098 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f7a:	4b4c      	ldr	r3, [pc, #304]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x164>)
 8009f7c:	60bb      	str	r3, [r7, #8]
      break;
 8009f7e:	e08e      	b.n	800a09e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f80:	4b4b      	ldr	r3, [pc, #300]	; (800a0b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8009f82:	60bb      	str	r3, [r7, #8]
      break;
 8009f84:	e08b      	b.n	800a09e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f86:	4948      	ldr	r1, [pc, #288]	; (800a0a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009f88:	6849      	ldr	r1, [r1, #4]
 8009f8a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009f8e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009f90:	4945      	ldr	r1, [pc, #276]	; (800a0a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009f92:	6849      	ldr	r1, [r1, #4]
 8009f94:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009f98:	2900      	cmp	r1, #0
 8009f9a:	d024      	beq.n	8009fe6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f9c:	4942      	ldr	r1, [pc, #264]	; (800a0a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009f9e:	6849      	ldr	r1, [r1, #4]
 8009fa0:	0989      	lsrs	r1, r1, #6
 8009fa2:	4608      	mov	r0, r1
 8009fa4:	f04f 0100 	mov.w	r1, #0
 8009fa8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009fac:	f04f 0500 	mov.w	r5, #0
 8009fb0:	ea00 0204 	and.w	r2, r0, r4
 8009fb4:	ea01 0305 	and.w	r3, r1, r5
 8009fb8:	493d      	ldr	r1, [pc, #244]	; (800a0b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8009fba:	fb01 f003 	mul.w	r0, r1, r3
 8009fbe:	2100      	movs	r1, #0
 8009fc0:	fb01 f102 	mul.w	r1, r1, r2
 8009fc4:	1844      	adds	r4, r0, r1
 8009fc6:	493a      	ldr	r1, [pc, #232]	; (800a0b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8009fc8:	fba2 0101 	umull	r0, r1, r2, r1
 8009fcc:	1863      	adds	r3, r4, r1
 8009fce:	4619      	mov	r1, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f04f 0300 	mov.w	r3, #0
 8009fd8:	f7f6 f91a 	bl	8000210 <__aeabi_uldivmod>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	60fb      	str	r3, [r7, #12]
 8009fe4:	e04a      	b.n	800a07c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fe6:	4b30      	ldr	r3, [pc, #192]	; (800a0a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	099b      	lsrs	r3, r3, #6
 8009fec:	461a      	mov	r2, r3
 8009fee:	f04f 0300 	mov.w	r3, #0
 8009ff2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009ff6:	f04f 0100 	mov.w	r1, #0
 8009ffa:	ea02 0400 	and.w	r4, r2, r0
 8009ffe:	ea03 0501 	and.w	r5, r3, r1
 800a002:	4620      	mov	r0, r4
 800a004:	4629      	mov	r1, r5
 800a006:	f04f 0200 	mov.w	r2, #0
 800a00a:	f04f 0300 	mov.w	r3, #0
 800a00e:	014b      	lsls	r3, r1, #5
 800a010:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a014:	0142      	lsls	r2, r0, #5
 800a016:	4610      	mov	r0, r2
 800a018:	4619      	mov	r1, r3
 800a01a:	1b00      	subs	r0, r0, r4
 800a01c:	eb61 0105 	sbc.w	r1, r1, r5
 800a020:	f04f 0200 	mov.w	r2, #0
 800a024:	f04f 0300 	mov.w	r3, #0
 800a028:	018b      	lsls	r3, r1, #6
 800a02a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a02e:	0182      	lsls	r2, r0, #6
 800a030:	1a12      	subs	r2, r2, r0
 800a032:	eb63 0301 	sbc.w	r3, r3, r1
 800a036:	f04f 0000 	mov.w	r0, #0
 800a03a:	f04f 0100 	mov.w	r1, #0
 800a03e:	00d9      	lsls	r1, r3, #3
 800a040:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a044:	00d0      	lsls	r0, r2, #3
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	1912      	adds	r2, r2, r4
 800a04c:	eb45 0303 	adc.w	r3, r5, r3
 800a050:	f04f 0000 	mov.w	r0, #0
 800a054:	f04f 0100 	mov.w	r1, #0
 800a058:	0299      	lsls	r1, r3, #10
 800a05a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a05e:	0290      	lsls	r0, r2, #10
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4610      	mov	r0, r2
 800a066:	4619      	mov	r1, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	461a      	mov	r2, r3
 800a06c:	f04f 0300 	mov.w	r3, #0
 800a070:	f7f6 f8ce 	bl	8000210 <__aeabi_uldivmod>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4613      	mov	r3, r2
 800a07a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a07c:	4b0a      	ldr	r3, [pc, #40]	; (800a0a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	0c1b      	lsrs	r3, r3, #16
 800a082:	f003 0303 	and.w	r3, r3, #3
 800a086:	3301      	adds	r3, #1
 800a088:	005b      	lsls	r3, r3, #1
 800a08a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	fbb2 f3f3 	udiv	r3, r2, r3
 800a094:	60bb      	str	r3, [r7, #8]
      break;
 800a096:	e002      	b.n	800a09e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a098:	4b04      	ldr	r3, [pc, #16]	; (800a0ac <HAL_RCC_GetSysClockFreq+0x164>)
 800a09a:	60bb      	str	r3, [r7, #8]
      break;
 800a09c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a09e:	68bb      	ldr	r3, [r7, #8]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bdb0      	pop	{r4, r5, r7, pc}
 800a0a8:	40023800 	.word	0x40023800
 800a0ac:	00f42400 	.word	0x00f42400
 800a0b0:	017d7840 	.word	0x017d7840

0800a0b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0b8:	4b03      	ldr	r3, [pc, #12]	; (800a0c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	20000040 	.word	0x20000040

0800a0cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a0d0:	f7ff fff0 	bl	800a0b4 <HAL_RCC_GetHCLKFreq>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	0a9b      	lsrs	r3, r3, #10
 800a0dc:	f003 0307 	and.w	r3, r3, #7
 800a0e0:	4903      	ldr	r1, [pc, #12]	; (800a0f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0e2:	5ccb      	ldrb	r3, [r1, r3]
 800a0e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	40023800 	.word	0x40023800
 800a0f0:	08035c90 	.word	0x08035c90

0800a0f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a0f8:	f7ff ffdc 	bl	800a0b4 <HAL_RCC_GetHCLKFreq>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	4b05      	ldr	r3, [pc, #20]	; (800a114 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	0b5b      	lsrs	r3, r3, #13
 800a104:	f003 0307 	and.w	r3, r3, #7
 800a108:	4903      	ldr	r1, [pc, #12]	; (800a118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a10a:	5ccb      	ldrb	r3, [r1, r3]
 800a10c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a110:	4618      	mov	r0, r3
 800a112:	bd80      	pop	{r7, pc}
 800a114:	40023800 	.word	0x40023800
 800a118:	08035c90 	.word	0x08035c90

0800a11c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	220f      	movs	r2, #15
 800a12a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a12c:	4b12      	ldr	r3, [pc, #72]	; (800a178 <HAL_RCC_GetClockConfig+0x5c>)
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	f003 0203 	and.w	r2, r3, #3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a138:	4b0f      	ldr	r3, [pc, #60]	; (800a178 <HAL_RCC_GetClockConfig+0x5c>)
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a144:	4b0c      	ldr	r3, [pc, #48]	; (800a178 <HAL_RCC_GetClockConfig+0x5c>)
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a150:	4b09      	ldr	r3, [pc, #36]	; (800a178 <HAL_RCC_GetClockConfig+0x5c>)
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	08db      	lsrs	r3, r3, #3
 800a156:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a15e:	4b07      	ldr	r3, [pc, #28]	; (800a17c <HAL_RCC_GetClockConfig+0x60>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 020f 	and.w	r2, r3, #15
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	601a      	str	r2, [r3, #0]
}
 800a16a:	bf00      	nop
 800a16c:	370c      	adds	r7, #12
 800a16e:	46bd      	mov	sp, r7
 800a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	40023800 	.word	0x40023800
 800a17c:	40023c00 	.word	0x40023c00

0800a180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a188:	2300      	movs	r3, #0
 800a18a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a190:	2300      	movs	r3, #0
 800a192:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a194:	2300      	movs	r3, #0
 800a196:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a198:	2300      	movs	r3, #0
 800a19a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 0301 	and.w	r3, r3, #1
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d012      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a1a8:	4b69      	ldr	r3, [pc, #420]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	4a68      	ldr	r2, [pc, #416]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a1b2:	6093      	str	r3, [r2, #8]
 800a1b4:	4b66      	ldr	r3, [pc, #408]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1b6:	689a      	ldr	r2, [r3, #8]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1bc:	4964      	ldr	r1, [pc, #400]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d017      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a1da:	4b5d      	ldr	r3, [pc, #372]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e8:	4959      	ldr	r1, [pc, #356]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1f8:	d101      	bne.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a202:	2b00      	cmp	r3, #0
 800a204:	d101      	bne.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a206:	2301      	movs	r3, #1
 800a208:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a212:	2b00      	cmp	r3, #0
 800a214:	d017      	beq.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a216:	4b4e      	ldr	r3, [pc, #312]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a21c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a224:	494a      	ldr	r1, [pc, #296]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a226:	4313      	orrs	r3, r2
 800a228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a234:	d101      	bne.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a236:	2301      	movs	r3, #1
 800a238:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a242:	2301      	movs	r3, #1
 800a244:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a252:	2301      	movs	r3, #1
 800a254:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 0320 	and.w	r3, r3, #32
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f000 808b 	beq.w	800a37a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a264:	4b3a      	ldr	r3, [pc, #232]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a268:	4a39      	ldr	r2, [pc, #228]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a26a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a26e:	6413      	str	r3, [r2, #64]	; 0x40
 800a270:	4b37      	ldr	r3, [pc, #220]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a278:	60bb      	str	r3, [r7, #8]
 800a27a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a27c:	4b35      	ldr	r3, [pc, #212]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a34      	ldr	r2, [pc, #208]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a288:	f7fc fa78 	bl	800677c <HAL_GetTick>
 800a28c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a28e:	e008      	b.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a290:	f7fc fa74 	bl	800677c <HAL_GetTick>
 800a294:	4602      	mov	r2, r0
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	1ad3      	subs	r3, r2, r3
 800a29a:	2b64      	cmp	r3, #100	; 0x64
 800a29c:	d901      	bls.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	e357      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a2a2:	4b2c      	ldr	r3, [pc, #176]	; (800a354 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d0f0      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a2ae:	4b28      	ldr	r3, [pc, #160]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d035      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d02e      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2cc:	4b20      	ldr	r3, [pc, #128]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a2d6:	4b1e      	ldr	r3, [pc, #120]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2da:	4a1d      	ldr	r2, [pc, #116]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a2e2:	4b1b      	ldr	r3, [pc, #108]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e6:	4a1a      	ldr	r2, [pc, #104]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a2ee:	4a18      	ldr	r2, [pc, #96]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a2f4:	4b16      	ldr	r3, [pc, #88]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a2f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d114      	bne.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a300:	f7fc fa3c 	bl	800677c <HAL_GetTick>
 800a304:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a306:	e00a      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a308:	f7fc fa38 	bl	800677c <HAL_GetTick>
 800a30c:	4602      	mov	r2, r0
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	f241 3288 	movw	r2, #5000	; 0x1388
 800a316:	4293      	cmp	r3, r2
 800a318:	d901      	bls.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a31a:	2303      	movs	r3, #3
 800a31c:	e319      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a31e:	4b0c      	ldr	r3, [pc, #48]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a322:	f003 0302 	and.w	r3, r3, #2
 800a326:	2b00      	cmp	r3, #0
 800a328:	d0ee      	beq.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a336:	d111      	bne.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a338:	4b05      	ldr	r3, [pc, #20]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a344:	4b04      	ldr	r3, [pc, #16]	; (800a358 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a346:	400b      	ands	r3, r1
 800a348:	4901      	ldr	r1, [pc, #4]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	608b      	str	r3, [r1, #8]
 800a34e:	e00b      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a350:	40023800 	.word	0x40023800
 800a354:	40007000 	.word	0x40007000
 800a358:	0ffffcff 	.word	0x0ffffcff
 800a35c:	4bb1      	ldr	r3, [pc, #708]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	4ab0      	ldr	r2, [pc, #704]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a362:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a366:	6093      	str	r3, [r2, #8]
 800a368:	4bae      	ldr	r3, [pc, #696]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a36a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a374:	49ab      	ldr	r1, [pc, #684]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a376:	4313      	orrs	r3, r2
 800a378:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0310 	and.w	r3, r3, #16
 800a382:	2b00      	cmp	r3, #0
 800a384:	d010      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a386:	4ba7      	ldr	r3, [pc, #668]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a38c:	4aa5      	ldr	r2, [pc, #660]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a38e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a392:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800a396:	4ba3      	ldr	r3, [pc, #652]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a398:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3a0:	49a0      	ldr	r1, [pc, #640]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d00a      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a3b4:	4b9b      	ldr	r3, [pc, #620]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3c2:	4998      	ldr	r1, [pc, #608]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00a      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a3d6:	4b93      	ldr	r3, [pc, #588]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3e4:	498f      	ldr	r1, [pc, #572]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00a      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a3f8:	4b8a      	ldr	r3, [pc, #552]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a406:	4987      	ldr	r1, [pc, #540]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a408:	4313      	orrs	r3, r2
 800a40a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00a      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a41a:	4b82      	ldr	r3, [pc, #520]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a41c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a420:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a428:	497e      	ldr	r1, [pc, #504]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a42a:	4313      	orrs	r3, r2
 800a42c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00a      	beq.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a43c:	4b79      	ldr	r3, [pc, #484]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a442:	f023 0203 	bic.w	r2, r3, #3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a44a:	4976      	ldr	r1, [pc, #472]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a44c:	4313      	orrs	r3, r2
 800a44e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00a      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a45e:	4b71      	ldr	r3, [pc, #452]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a464:	f023 020c 	bic.w	r2, r3, #12
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a46c:	496d      	ldr	r1, [pc, #436]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d00a      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a480:	4b68      	ldr	r3, [pc, #416]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a486:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a48e:	4965      	ldr	r1, [pc, #404]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a490:	4313      	orrs	r3, r2
 800a492:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00a      	beq.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a4a2:	4b60      	ldr	r3, [pc, #384]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b0:	495c      	ldr	r1, [pc, #368]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d00a      	beq.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a4c4:	4b57      	ldr	r3, [pc, #348]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d2:	4954      	ldr	r1, [pc, #336]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00a      	beq.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800a4e6:	4b4f      	ldr	r3, [pc, #316]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4f4:	494b      	ldr	r1, [pc, #300]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00a      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800a508:	4b46      	ldr	r3, [pc, #280]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a50a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a50e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a516:	4943      	ldr	r1, [pc, #268]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a518:	4313      	orrs	r3, r2
 800a51a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a526:	2b00      	cmp	r3, #0
 800a528:	d00a      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800a52a:	4b3e      	ldr	r3, [pc, #248]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a52c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a530:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a538:	493a      	ldr	r1, [pc, #232]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a53a:	4313      	orrs	r3, r2
 800a53c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00a      	beq.n	800a562 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a54c:	4b35      	ldr	r3, [pc, #212]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a54e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a552:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a55a:	4932      	ldr	r1, [pc, #200]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a55c:	4313      	orrs	r3, r2
 800a55e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d011      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a56e:	4b2d      	ldr	r3, [pc, #180]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a574:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a57c:	4929      	ldr	r1, [pc, #164]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a57e:	4313      	orrs	r3, r2
 800a580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a58c:	d101      	bne.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800a58e:	2301      	movs	r3, #1
 800a590:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 0308 	and.w	r3, r3, #8
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00a      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a5ae:	4b1d      	ldr	r3, [pc, #116]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5bc:	4919      	ldr	r1, [pc, #100]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00b      	beq.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a5d0:	4b14      	ldr	r3, [pc, #80]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5e0:	4910      	ldr	r1, [pc, #64]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d006      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 80d9 	beq.w	800a7ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a5fc:	4b09      	ldr	r3, [pc, #36]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a08      	ldr	r2, [pc, #32]	; (800a624 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a602:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a608:	f7fc f8b8 	bl	800677c <HAL_GetTick>
 800a60c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a60e:	e00b      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a610:	f7fc f8b4 	bl	800677c <HAL_GetTick>
 800a614:	4602      	mov	r2, r0
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	2b64      	cmp	r3, #100	; 0x64
 800a61c:	d904      	bls.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a61e:	2303      	movs	r3, #3
 800a620:	e197      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a622:	bf00      	nop
 800a624:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a628:	4b6c      	ldr	r3, [pc, #432]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1ed      	bne.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0301 	and.w	r3, r3, #1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d021      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a644:	2b00      	cmp	r3, #0
 800a646:	d11d      	bne.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a648:	4b64      	ldr	r3, [pc, #400]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a64a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a64e:	0c1b      	lsrs	r3, r3, #16
 800a650:	f003 0303 	and.w	r3, r3, #3
 800a654:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a656:	4b61      	ldr	r3, [pc, #388]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a65c:	0e1b      	lsrs	r3, r3, #24
 800a65e:	f003 030f 	and.w	r3, r3, #15
 800a662:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	019a      	lsls	r2, r3, #6
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	041b      	lsls	r3, r3, #16
 800a66e:	431a      	orrs	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	061b      	lsls	r3, r3, #24
 800a674:	431a      	orrs	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	071b      	lsls	r3, r3, #28
 800a67c:	4957      	ldr	r1, [pc, #348]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d004      	beq.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a698:	d00a      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d02e      	beq.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6ae:	d129      	bne.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800a6b0:	4b4a      	ldr	r3, [pc, #296]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6b6:	0c1b      	lsrs	r3, r3, #16
 800a6b8:	f003 0303 	and.w	r3, r3, #3
 800a6bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a6be:	4b47      	ldr	r3, [pc, #284]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6c4:	0f1b      	lsrs	r3, r3, #28
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	019a      	lsls	r2, r3, #6
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	041b      	lsls	r3, r3, #16
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	061b      	lsls	r3, r3, #24
 800a6de:	431a      	orrs	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	071b      	lsls	r3, r3, #28
 800a6e4:	493d      	ldr	r1, [pc, #244]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a6ec:	4b3b      	ldr	r3, [pc, #236]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6f2:	f023 021f 	bic.w	r2, r3, #31
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	4937      	ldr	r1, [pc, #220]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a6fe:	4313      	orrs	r3, r2
 800a700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d01d      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800a710:	4b32      	ldr	r3, [pc, #200]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a716:	0e1b      	lsrs	r3, r3, #24
 800a718:	f003 030f 	and.w	r3, r3, #15
 800a71c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a71e:	4b2f      	ldr	r3, [pc, #188]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a724:	0f1b      	lsrs	r3, r3, #28
 800a726:	f003 0307 	and.w	r3, r3, #7
 800a72a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	019a      	lsls	r2, r3, #6
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	041b      	lsls	r3, r3, #16
 800a738:	431a      	orrs	r2, r3
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	061b      	lsls	r3, r3, #24
 800a73e:	431a      	orrs	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	071b      	lsls	r3, r3, #28
 800a744:	4925      	ldr	r1, [pc, #148]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a746:	4313      	orrs	r3, r2
 800a748:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a754:	2b00      	cmp	r3, #0
 800a756:	d011      	beq.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	019a      	lsls	r2, r3, #6
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	041b      	lsls	r3, r3, #16
 800a764:	431a      	orrs	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	061b      	lsls	r3, r3, #24
 800a76c:	431a      	orrs	r2, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	071b      	lsls	r3, r3, #28
 800a774:	4919      	ldr	r1, [pc, #100]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a776:	4313      	orrs	r3, r2
 800a778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a77c:	4b17      	ldr	r3, [pc, #92]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a16      	ldr	r2, [pc, #88]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a782:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a788:	f7fb fff8 	bl	800677c <HAL_GetTick>
 800a78c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a78e:	e008      	b.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800a790:	f7fb fff4 	bl	800677c <HAL_GetTick>
 800a794:	4602      	mov	r2, r0
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	2b64      	cmp	r3, #100	; 0x64
 800a79c:	d901      	bls.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e0d7      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a7a2:	4b0e      	ldr	r3, [pc, #56]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0f0      	beq.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	f040 80cd 	bne.w	800a950 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a7b6:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a08      	ldr	r2, [pc, #32]	; (800a7dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800a7bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7c2:	f7fb ffdb 	bl	800677c <HAL_GetTick>
 800a7c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a7c8:	e00a      	b.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a7ca:	f7fb ffd7 	bl	800677c <HAL_GetTick>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	2b64      	cmp	r3, #100	; 0x64
 800a7d6:	d903      	bls.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e0ba      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800a7dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a7e0:	4b5e      	ldr	r3, [pc, #376]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7ec:	d0ed      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d009      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d02e      	beq.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a812:	2b00      	cmp	r3, #0
 800a814:	d12a      	bne.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a816:	4b51      	ldr	r3, [pc, #324]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a81c:	0c1b      	lsrs	r3, r3, #16
 800a81e:	f003 0303 	and.w	r3, r3, #3
 800a822:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a824:	4b4d      	ldr	r3, [pc, #308]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a82a:	0f1b      	lsrs	r3, r3, #28
 800a82c:	f003 0307 	and.w	r3, r3, #7
 800a830:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	019a      	lsls	r2, r3, #6
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	041b      	lsls	r3, r3, #16
 800a83c:	431a      	orrs	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	061b      	lsls	r3, r3, #24
 800a844:	431a      	orrs	r2, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	071b      	lsls	r3, r3, #28
 800a84a:	4944      	ldr	r1, [pc, #272]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a84c:	4313      	orrs	r3, r2
 800a84e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a852:	4b42      	ldr	r3, [pc, #264]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a858:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a860:	3b01      	subs	r3, #1
 800a862:	021b      	lsls	r3, r3, #8
 800a864:	493d      	ldr	r1, [pc, #244]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a866:	4313      	orrs	r3, r2
 800a868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a874:	2b00      	cmp	r3, #0
 800a876:	d022      	beq.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a87c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a880:	d11d      	bne.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a882:	4b36      	ldr	r3, [pc, #216]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a888:	0e1b      	lsrs	r3, r3, #24
 800a88a:	f003 030f 	and.w	r3, r3, #15
 800a88e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a890:	4b32      	ldr	r3, [pc, #200]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a896:	0f1b      	lsrs	r3, r3, #28
 800a898:	f003 0307 	and.w	r3, r3, #7
 800a89c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	695b      	ldr	r3, [r3, #20]
 800a8a2:	019a      	lsls	r2, r3, #6
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6a1b      	ldr	r3, [r3, #32]
 800a8a8:	041b      	lsls	r3, r3, #16
 800a8aa:	431a      	orrs	r2, r3
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	061b      	lsls	r3, r3, #24
 800a8b0:	431a      	orrs	r2, r3
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	071b      	lsls	r3, r3, #28
 800a8b6:	4929      	ldr	r1, [pc, #164]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0308 	and.w	r3, r3, #8
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d028      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a8ca:	4b24      	ldr	r3, [pc, #144]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8d0:	0e1b      	lsrs	r3, r3, #24
 800a8d2:	f003 030f 	and.w	r3, r3, #15
 800a8d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a8d8:	4b20      	ldr	r3, [pc, #128]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8de:	0c1b      	lsrs	r3, r3, #16
 800a8e0:	f003 0303 	and.w	r3, r3, #3
 800a8e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	695b      	ldr	r3, [r3, #20]
 800a8ea:	019a      	lsls	r2, r3, #6
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	041b      	lsls	r3, r3, #16
 800a8f0:	431a      	orrs	r2, r3
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	061b      	lsls	r3, r3, #24
 800a8f6:	431a      	orrs	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	69db      	ldr	r3, [r3, #28]
 800a8fc:	071b      	lsls	r3, r3, #28
 800a8fe:	4917      	ldr	r1, [pc, #92]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a900:	4313      	orrs	r3, r2
 800a902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a906:	4b15      	ldr	r3, [pc, #84]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a90c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	4911      	ldr	r1, [pc, #68]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a916:	4313      	orrs	r3, r2
 800a918:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a91c:	4b0f      	ldr	r3, [pc, #60]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a0e      	ldr	r2, [pc, #56]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a928:	f7fb ff28 	bl	800677c <HAL_GetTick>
 800a92c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a92e:	e008      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a930:	f7fb ff24 	bl	800677c <HAL_GetTick>
 800a934:	4602      	mov	r2, r0
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	2b64      	cmp	r3, #100	; 0x64
 800a93c:	d901      	bls.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a93e:	2303      	movs	r3, #3
 800a940:	e007      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a942:	4b06      	ldr	r3, [pc, #24]	; (800a95c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a94a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a94e:	d1ef      	bne.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3720      	adds	r7, #32
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	40023800 	.word	0x40023800

0800a960 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e081      	b.n	800aa76 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	7f5b      	ldrb	r3, [r3, #29]
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d105      	bne.n	800a988 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7fb fb18 	bl	8005fb8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2202      	movs	r2, #2
 800a98c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	22ca      	movs	r2, #202	; 0xca
 800a994:	625a      	str	r2, [r3, #36]	; 0x24
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2253      	movs	r2, #83	; 0x53
 800a99c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 fb16 	bl	800afd0 <RTC_EnterInitMode>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d008      	beq.n	800a9bc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	22ff      	movs	r2, #255	; 0xff
 800a9b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2204      	movs	r2, #4
 800a9b6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e05c      	b.n	800aa76 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6899      	ldr	r1, [r3, #8]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	4b2e      	ldr	r3, [pc, #184]	; (800aa80 <HAL_RTC_Init+0x120>)
 800a9c8:	400b      	ands	r3, r1
 800a9ca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6899      	ldr	r1, [r3, #8]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	685a      	ldr	r2, [r3, #4]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	431a      	orrs	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	695b      	ldr	r3, [r3, #20]
 800a9e0:	431a      	orrs	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	68d2      	ldr	r2, [r2, #12]
 800a9f2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6919      	ldr	r1, [r3, #16]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	041a      	lsls	r2, r3, #16
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	430a      	orrs	r2, r1
 800aa06:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68da      	ldr	r2, [r3, #12]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa16:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	f003 0320 	and.w	r3, r3, #32
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10e      	bne.n	800aa44 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 faaa 	bl	800af80 <HAL_RTC_WaitForSynchro>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d008      	beq.n	800aa44 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	22ff      	movs	r2, #255	; 0xff
 800aa38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2204      	movs	r2, #4
 800aa3e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	e018      	b.n	800aa76 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f022 0208 	bic.w	r2, r2, #8
 800aa52:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	699a      	ldr	r2, [r3, #24]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	430a      	orrs	r2, r1
 800aa64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	22ff      	movs	r2, #255	; 0xff
 800aa6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2201      	movs	r2, #1
 800aa72:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800aa74:	2300      	movs	r3, #0
  }
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3708      	adds	r7, #8
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	ff8fffbf 	.word	0xff8fffbf

0800aa84 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aa84:	b590      	push	{r4, r7, lr}
 800aa86:	b087      	sub	sp, #28
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	7f1b      	ldrb	r3, [r3, #28]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d101      	bne.n	800aaa0 <HAL_RTC_SetTime+0x1c>
 800aa9c:	2302      	movs	r3, #2
 800aa9e:	e0a8      	b.n	800abf2 <HAL_RTC_SetTime+0x16e>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d126      	bne.n	800ab00 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d102      	bne.n	800aac6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	2200      	movs	r2, #0
 800aac4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 faac 	bl	800b028 <RTC_ByteToBcd2>
 800aad0:	4603      	mov	r3, r0
 800aad2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	785b      	ldrb	r3, [r3, #1]
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 faa5 	bl	800b028 <RTC_ByteToBcd2>
 800aade:	4603      	mov	r3, r0
 800aae0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800aae2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	789b      	ldrb	r3, [r3, #2]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 fa9d 	bl	800b028 <RTC_ByteToBcd2>
 800aaee:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800aaf0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	7b1b      	ldrb	r3, [r3, #12]
 800aaf8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800aafa:	4313      	orrs	r3, r2
 800aafc:	617b      	str	r3, [r7, #20]
 800aafe:	e018      	b.n	800ab32 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d102      	bne.n	800ab14 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	2200      	movs	r2, #0
 800ab12:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	785b      	ldrb	r3, [r3, #1]
 800ab1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ab20:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800ab22:	68ba      	ldr	r2, [r7, #8]
 800ab24:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800ab26:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	7b1b      	ldrb	r3, [r3, #12]
 800ab2c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	22ca      	movs	r2, #202	; 0xca
 800ab38:	625a      	str	r2, [r3, #36]	; 0x24
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2253      	movs	r2, #83	; 0x53
 800ab40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f000 fa44 	bl	800afd0 <RTC_EnterInitMode>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00b      	beq.n	800ab66 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	22ff      	movs	r2, #255	; 0xff
 800ab54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2204      	movs	r2, #4
 800ab5a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e045      	b.n	800abf2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	6979      	ldr	r1, [r7, #20]
 800ab6c:	4b23      	ldr	r3, [pc, #140]	; (800abfc <HAL_RTC_SetTime+0x178>)
 800ab6e:	400b      	ands	r3, r1
 800ab70:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	689a      	ldr	r2, [r3, #8]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ab80:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	6899      	ldr	r1, [r3, #8]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	691a      	ldr	r2, [r3, #16]
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	695b      	ldr	r3, [r3, #20]
 800ab90:	431a      	orrs	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68da      	ldr	r2, [r3, #12]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aba8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f003 0320 	and.w	r3, r3, #32
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d111      	bne.n	800abdc <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f000 f9e1 	bl	800af80 <HAL_RTC_WaitForSynchro>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00b      	beq.n	800abdc <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	22ff      	movs	r2, #255	; 0xff
 800abca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2204      	movs	r2, #4
 800abd0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e00a      	b.n	800abf2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	22ff      	movs	r2, #255	; 0xff
 800abe2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2201      	movs	r2, #1
 800abe8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800abf0:	2300      	movs	r3, #0
  }
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	371c      	adds	r7, #28
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd90      	pop	{r4, r7, pc}
 800abfa:	bf00      	nop
 800abfc:	007f7f7f 	.word	0x007f7f7f

0800ac00 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ac00:	b590      	push	{r4, r7, lr}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	7f1b      	ldrb	r3, [r3, #28]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d101      	bne.n	800ac1c <HAL_RTC_SetDate+0x1c>
 800ac18:	2302      	movs	r3, #2
 800ac1a:	e092      	b.n	800ad42 <HAL_RTC_SetDate+0x142>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2202      	movs	r2, #2
 800ac26:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10e      	bne.n	800ac4c <HAL_RTC_SetDate+0x4c>
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	785b      	ldrb	r3, [r3, #1]
 800ac32:	f003 0310 	and.w	r3, r3, #16
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d008      	beq.n	800ac4c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	785b      	ldrb	r3, [r3, #1]
 800ac3e:	f023 0310 	bic.w	r3, r3, #16
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	330a      	adds	r3, #10
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d11c      	bne.n	800ac8c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	78db      	ldrb	r3, [r3, #3]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 f9e6 	bl	800b028 <RTC_ByteToBcd2>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	785b      	ldrb	r3, [r3, #1]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 f9df 	bl	800b028 <RTC_ByteToBcd2>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ac6e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	789b      	ldrb	r3, [r3, #2]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 f9d7 	bl	800b028 <RTC_ByteToBcd2>
 800ac7a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800ac7c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800ac86:	4313      	orrs	r3, r2
 800ac88:	617b      	str	r3, [r7, #20]
 800ac8a:	e00e      	b.n	800acaa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	78db      	ldrb	r3, [r3, #3]
 800ac90:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	785b      	ldrb	r3, [r3, #1]
 800ac96:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800ac98:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800ac9e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800aca6:	4313      	orrs	r3, r2
 800aca8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	22ca      	movs	r2, #202	; 0xca
 800acb0:	625a      	str	r2, [r3, #36]	; 0x24
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2253      	movs	r2, #83	; 0x53
 800acb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 f988 	bl	800afd0 <RTC_EnterInitMode>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00b      	beq.n	800acde <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	22ff      	movs	r2, #255	; 0xff
 800accc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2204      	movs	r2, #4
 800acd2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2200      	movs	r2, #0
 800acd8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e031      	b.n	800ad42 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	6979      	ldr	r1, [r7, #20]
 800ace4:	4b19      	ldr	r3, [pc, #100]	; (800ad4c <HAL_RTC_SetDate+0x14c>)
 800ace6:	400b      	ands	r3, r1
 800ace8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	68da      	ldr	r2, [r3, #12]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acf8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	f003 0320 	and.w	r3, r3, #32
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d111      	bne.n	800ad2c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	f000 f939 	bl	800af80 <HAL_RTC_WaitForSynchro>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00b      	beq.n	800ad2c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	22ff      	movs	r2, #255	; 0xff
 800ad1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2204      	movs	r2, #4
 800ad20:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e00a      	b.n	800ad42 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	22ff      	movs	r2, #255	; 0xff
 800ad32:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2201      	movs	r2, #1
 800ad38:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800ad40:	2300      	movs	r3, #0
  }
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	371c      	adds	r7, #28
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd90      	pop	{r4, r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	00ffff3f 	.word	0x00ffff3f

0800ad50 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800ad50:	b590      	push	{r4, r7, lr}
 800ad52:	b089      	sub	sp, #36	; 0x24
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	61fb      	str	r3, [r7, #28]
 800ad64:	2300      	movs	r3, #0
 800ad66:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	7f1b      	ldrb	r3, [r3, #28]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d101      	bne.n	800ad74 <HAL_RTC_SetAlarm+0x24>
 800ad70:	2302      	movs	r3, #2
 800ad72:	e101      	b.n	800af78 <HAL_RTC_SetAlarm+0x228>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2201      	movs	r2, #1
 800ad78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2202      	movs	r2, #2
 800ad7e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d137      	bne.n	800adf6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d102      	bne.n	800ad9a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	2200      	movs	r2, #0
 800ad98:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 f942 	bl	800b028 <RTC_ByteToBcd2>
 800ada4:	4603      	mov	r3, r0
 800ada6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	785b      	ldrb	r3, [r3, #1]
 800adac:	4618      	mov	r0, r3
 800adae:	f000 f93b 	bl	800b028 <RTC_ByteToBcd2>
 800adb2:	4603      	mov	r3, r0
 800adb4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800adb6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	789b      	ldrb	r3, [r3, #2]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 f933 	bl	800b028 <RTC_ByteToBcd2>
 800adc2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800adc4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	7b1b      	ldrb	r3, [r3, #12]
 800adcc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800adce:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800add8:	4618      	mov	r0, r3
 800adda:	f000 f925 	bl	800b028 <RTC_ByteToBcd2>
 800adde:	4603      	mov	r3, r0
 800ade0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ade2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800adea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800adf0:	4313      	orrs	r3, r2
 800adf2:	61fb      	str	r3, [r7, #28]
 800adf4:	e023      	b.n	800ae3e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	2200      	movs	r2, #0
 800ae08:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	785b      	ldrb	r3, [r3, #1]
 800ae14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800ae16:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800ae1c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	7b1b      	ldrb	r3, [r3, #12]
 800ae22:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ae24:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae2c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800ae2e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800ae34:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	685a      	ldr	r2, [r3, #4]
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	69db      	ldr	r3, [r3, #28]
 800ae46:	4313      	orrs	r3, r2
 800ae48:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	22ca      	movs	r2, #202	; 0xca
 800ae50:	625a      	str	r2, [r3, #36]	; 0x24
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2253      	movs	r2, #83	; 0x53
 800ae58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae62:	d13f      	bne.n	800aee4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	689a      	ldr	r2, [r3, #8]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae72:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	689a      	ldr	r2, [r3, #8]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ae82:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ae84:	f7fb fc7a 	bl	800677c <HAL_GetTick>
 800ae88:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800ae8a:	e013      	b.n	800aeb4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ae8c:	f7fb fc76 	bl	800677c <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae9a:	d90b      	bls.n	800aeb4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	22ff      	movs	r2, #255	; 0xff
 800aea2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2203      	movs	r2, #3
 800aea8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e061      	b.n	800af78 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d0e4      	beq.n	800ae8c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	69fa      	ldr	r2, [r7, #28]
 800aec8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	697a      	ldr	r2, [r7, #20]
 800aed0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	689a      	ldr	r2, [r3, #8]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aee0:	609a      	str	r2, [r3, #8]
 800aee2:	e03e      	b.n	800af62 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	689a      	ldr	r2, [r3, #8]
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800aef2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	689a      	ldr	r2, [r3, #8]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af02:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800af04:	f7fb fc3a 	bl	800677c <HAL_GetTick>
 800af08:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800af0a:	e013      	b.n	800af34 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800af0c:	f7fb fc36 	bl	800677c <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af1a:	d90b      	bls.n	800af34 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	22ff      	movs	r2, #255	; 0xff
 800af22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2203      	movs	r2, #3
 800af28:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2200      	movs	r2, #0
 800af2e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e021      	b.n	800af78 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	f003 0302 	and.w	r3, r3, #2
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d0e4      	beq.n	800af0c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	69fa      	ldr	r2, [r7, #28]
 800af48:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	697a      	ldr	r2, [r7, #20]
 800af50:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	689a      	ldr	r2, [r3, #8]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af60:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	22ff      	movs	r2, #255	; 0xff
 800af68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2201      	movs	r2, #1
 800af6e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3724      	adds	r7, #36	; 0x24
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd90      	pop	{r4, r7, pc}

0800af80 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	68da      	ldr	r2, [r3, #12]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800af9a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800af9c:	f7fb fbee 	bl	800677c <HAL_GetTick>
 800afa0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800afa2:	e009      	b.n	800afb8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800afa4:	f7fb fbea 	bl	800677c <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800afb2:	d901      	bls.n	800afb8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800afb4:	2303      	movs	r3, #3
 800afb6:	e007      	b.n	800afc8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68db      	ldr	r3, [r3, #12]
 800afbe:	f003 0320 	and.w	r3, r3, #32
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d0ee      	beq.n	800afa4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800afd8:	2300      	movs	r3, #0
 800afda:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d119      	bne.n	800b01e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f04f 32ff 	mov.w	r2, #4294967295
 800aff2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aff4:	f7fb fbc2 	bl	800677c <HAL_GetTick>
 800aff8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800affa:	e009      	b.n	800b010 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800affc:	f7fb fbbe 	bl	800677c <HAL_GetTick>
 800b000:	4602      	mov	r2, r0
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	1ad3      	subs	r3, r2, r3
 800b006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b00a:	d901      	bls.n	800b010 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800b00c:	2303      	movs	r3, #3
 800b00e:	e007      	b.n	800b020 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d0ee      	beq.n	800affc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3710      	adds	r7, #16
 800b024:	46bd      	mov	sp, r7
 800b026:	bd80      	pop	{r7, pc}

0800b028 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	4603      	mov	r3, r0
 800b030:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800b032:	2300      	movs	r3, #0
 800b034:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800b036:	e005      	b.n	800b044 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	3301      	adds	r3, #1
 800b03c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800b03e:	79fb      	ldrb	r3, [r7, #7]
 800b040:	3b0a      	subs	r3, #10
 800b042:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800b044:	79fb      	ldrb	r3, [r7, #7]
 800b046:	2b09      	cmp	r3, #9
 800b048:	d8f6      	bhi.n	800b038 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	011b      	lsls	r3, r3, #4
 800b050:	b2da      	uxtb	r2, r3
 800b052:	79fb      	ldrb	r3, [r7, #7]
 800b054:	4313      	orrs	r3, r2
 800b056:	b2db      	uxtb	r3, r3
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3714      	adds	r7, #20
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800b064:	b480      	push	{r7}
 800b066:	b087      	sub	sp, #28
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800b070:	2300      	movs	r3, #0
 800b072:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	7f1b      	ldrb	r3, [r3, #28]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d101      	bne.n	800b080 <HAL_RTCEx_SetTimeStamp+0x1c>
 800b07c:	2302      	movs	r3, #2
 800b07e:	e03e      	b.n	800b0fe <HAL_RTCEx_SetTimeStamp+0x9a>
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2201      	movs	r2, #1
 800b084:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2202      	movs	r2, #2
 800b08a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	689a      	ldr	r2, [r3, #8]
 800b092:	4b1e      	ldr	r3, [pc, #120]	; (800b10c <HAL_RTCEx_SetTimeStamp+0xa8>)
 800b094:	4013      	ands	r3, r2
 800b096:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	22ca      	movs	r2, #202	; 0xca
 800b0a6:	625a      	str	r2, [r3, #36]	; 0x24
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2253      	movs	r2, #83	; 0x53
 800b0ae:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f022 0206 	bic.w	r2, r2, #6
 800b0be:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	430a      	orrs	r2, r1
 800b0ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689a      	ldr	r2, [r3, #8]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0e6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	22ff      	movs	r2, #255	; 0xff
 800b0ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	371c      	adds	r7, #28
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	fffff7f7 	.word	0xfffff7f7

0800b110 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d101      	bne.n	800b124 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b120:	2301      	movs	r3, #1
 800b122:	e025      	b.n	800b170 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d106      	bne.n	800b13e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7fb fa07 	bl	800654c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2202      	movs	r2, #2
 800b142:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	3304      	adds	r3, #4
 800b14e:	4619      	mov	r1, r3
 800b150:	4610      	mov	r0, r2
 800b152:	f001 fdb7 	bl	800ccc4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6818      	ldr	r0, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	461a      	mov	r2, r3
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	f001 fe0b 	bl	800cd7c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b18a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b18c:	7dfb      	ldrb	r3, [r7, #23]
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d101      	bne.n	800b196 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b192:	2302      	movs	r3, #2
 800b194:	e021      	b.n	800b1da <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b196:	7dfb      	ldrb	r3, [r7, #23]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d002      	beq.n	800b1a2 <HAL_SDRAM_SendCommand+0x2a>
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	2b05      	cmp	r3, #5
 800b1a0:	d118      	bne.n	800b1d4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2202      	movs	r2, #2
 800b1a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	68b9      	ldr	r1, [r7, #8]
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f001 fe4c 	bl	800ce50 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d104      	bne.n	800b1ca <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2205      	movs	r2, #5
 800b1c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b1c8:	e006      	b.n	800b1d8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b1d2:	e001      	b.n	800b1d8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e000      	b.n	800b1da <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3718      	adds	r7, #24
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b082      	sub	sp, #8
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d101      	bne.n	800b1fc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	e016      	b.n	800b22a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b202:	b2db      	uxtb	r3, r3
 800b204:	2b01      	cmp	r3, #1
 800b206:	d10f      	bne.n	800b228 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2202      	movs	r2, #2
 800b20c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6839      	ldr	r1, [r7, #0]
 800b216:	4618      	mov	r0, r3
 800b218:	f001 fe3e 	bl	800ce98 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b224:	2300      	movs	r3, #0
 800b226:	e000      	b.n	800b22a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800b228:	2301      	movs	r3, #1
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3708      	adds	r7, #8
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b084      	sub	sp, #16
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d101      	bne.n	800b244 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	e09d      	b.n	800b380 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d108      	bne.n	800b25e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b254:	d009      	beq.n	800b26a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	61da      	str	r2, [r3, #28]
 800b25c:	e005      	b.n	800b26a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d106      	bne.n	800b28a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f7fa fec5 	bl	8006014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2202      	movs	r2, #2
 800b28e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2a0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b2aa:	d902      	bls.n	800b2b2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	e002      	b.n	800b2b8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b2b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b2c0:	d007      	beq.n	800b2d2 <HAL_SPI_Init+0xa0>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b2ca:	d002      	beq.n	800b2d2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b2e2:	431a      	orrs	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	f003 0302 	and.w	r3, r3, #2
 800b2ec:	431a      	orrs	r2, r3
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	f003 0301 	and.w	r3, r3, #1
 800b2f6:	431a      	orrs	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b300:	431a      	orrs	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b30a:	431a      	orrs	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a1b      	ldr	r3, [r3, #32]
 800b310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b314:	ea42 0103 	orr.w	r1, r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b31c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	430a      	orrs	r2, r1
 800b326:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	699b      	ldr	r3, [r3, #24]
 800b32c:	0c1b      	lsrs	r3, r3, #16
 800b32e:	f003 0204 	and.w	r2, r3, #4
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b336:	f003 0310 	and.w	r3, r3, #16
 800b33a:	431a      	orrs	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b340:	f003 0308 	and.w	r3, r3, #8
 800b344:	431a      	orrs	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b34e:	ea42 0103 	orr.w	r1, r2, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	430a      	orrs	r2, r1
 800b35e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	69da      	ldr	r2, [r3, #28]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b36e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2201      	movs	r2, #1
 800b37a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3710      	adds	r7, #16
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	e049      	b.n	800b42e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d106      	bne.n	800b3b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7fa fe92 	bl	80060d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2202      	movs	r2, #2
 800b3b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	3304      	adds	r3, #4
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	f000 fac0 	bl	800b94c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2201      	movs	r2, #1
 800b428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
	...

0800b438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b446:	b2db      	uxtb	r3, r3
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d001      	beq.n	800b450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e054      	b.n	800b4fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2202      	movs	r2, #2
 800b454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68da      	ldr	r2, [r3, #12]
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f042 0201 	orr.w	r2, r2, #1
 800b466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a26      	ldr	r2, [pc, #152]	; (800b508 <HAL_TIM_Base_Start_IT+0xd0>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d022      	beq.n	800b4b8 <HAL_TIM_Base_Start_IT+0x80>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b47a:	d01d      	beq.n	800b4b8 <HAL_TIM_Base_Start_IT+0x80>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a22      	ldr	r2, [pc, #136]	; (800b50c <HAL_TIM_Base_Start_IT+0xd4>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d018      	beq.n	800b4b8 <HAL_TIM_Base_Start_IT+0x80>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a21      	ldr	r2, [pc, #132]	; (800b510 <HAL_TIM_Base_Start_IT+0xd8>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d013      	beq.n	800b4b8 <HAL_TIM_Base_Start_IT+0x80>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a1f      	ldr	r2, [pc, #124]	; (800b514 <HAL_TIM_Base_Start_IT+0xdc>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d00e      	beq.n	800b4b8 <HAL_TIM_Base_Start_IT+0x80>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a1e      	ldr	r2, [pc, #120]	; (800b518 <HAL_TIM_Base_Start_IT+0xe0>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d009      	beq.n	800b4b8 <HAL_TIM_Base_Start_IT+0x80>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a1c      	ldr	r2, [pc, #112]	; (800b51c <HAL_TIM_Base_Start_IT+0xe4>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d004      	beq.n	800b4b8 <HAL_TIM_Base_Start_IT+0x80>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a1b      	ldr	r2, [pc, #108]	; (800b520 <HAL_TIM_Base_Start_IT+0xe8>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d115      	bne.n	800b4e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	689a      	ldr	r2, [r3, #8]
 800b4be:	4b19      	ldr	r3, [pc, #100]	; (800b524 <HAL_TIM_Base_Start_IT+0xec>)
 800b4c0:	4013      	ands	r3, r2
 800b4c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2b06      	cmp	r3, #6
 800b4c8:	d015      	beq.n	800b4f6 <HAL_TIM_Base_Start_IT+0xbe>
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4d0:	d011      	beq.n	800b4f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f042 0201 	orr.w	r2, r2, #1
 800b4e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4e2:	e008      	b.n	800b4f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681a      	ldr	r2, [r3, #0]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f042 0201 	orr.w	r2, r2, #1
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	e000      	b.n	800b4f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	40010000 	.word	0x40010000
 800b50c:	40000400 	.word	0x40000400
 800b510:	40000800 	.word	0x40000800
 800b514:	40000c00 	.word	0x40000c00
 800b518:	40010400 	.word	0x40010400
 800b51c:	40014000 	.word	0x40014000
 800b520:	40001800 	.word	0x40001800
 800b524:	00010007 	.word	0x00010007

0800b528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	f003 0302 	and.w	r3, r3, #2
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	d122      	bne.n	800b584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	f003 0302 	and.w	r3, r3, #2
 800b548:	2b02      	cmp	r3, #2
 800b54a:	d11b      	bne.n	800b584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f06f 0202 	mvn.w	r2, #2
 800b554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	699b      	ldr	r3, [r3, #24]
 800b562:	f003 0303 	and.w	r3, r3, #3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f9d0 	bl	800b910 <HAL_TIM_IC_CaptureCallback>
 800b570:	e005      	b.n	800b57e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f9c2 	bl	800b8fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f9d3 	bl	800b924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	f003 0304 	and.w	r3, r3, #4
 800b58e:	2b04      	cmp	r3, #4
 800b590:	d122      	bne.n	800b5d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	f003 0304 	and.w	r3, r3, #4
 800b59c:	2b04      	cmp	r3, #4
 800b59e:	d11b      	bne.n	800b5d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f06f 0204 	mvn.w	r2, #4
 800b5a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2202      	movs	r2, #2
 800b5ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	699b      	ldr	r3, [r3, #24]
 800b5b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d003      	beq.n	800b5c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 f9a6 	bl	800b910 <HAL_TIM_IC_CaptureCallback>
 800b5c4:	e005      	b.n	800b5d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f998 	bl	800b8fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f9a9 	bl	800b924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	f003 0308 	and.w	r3, r3, #8
 800b5e2:	2b08      	cmp	r3, #8
 800b5e4:	d122      	bne.n	800b62c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	f003 0308 	and.w	r3, r3, #8
 800b5f0:	2b08      	cmp	r3, #8
 800b5f2:	d11b      	bne.n	800b62c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f06f 0208 	mvn.w	r2, #8
 800b5fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2204      	movs	r2, #4
 800b602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	69db      	ldr	r3, [r3, #28]
 800b60a:	f003 0303 	and.w	r3, r3, #3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d003      	beq.n	800b61a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f97c 	bl	800b910 <HAL_TIM_IC_CaptureCallback>
 800b618:	e005      	b.n	800b626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f96e 	bl	800b8fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 f97f 	bl	800b924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	f003 0310 	and.w	r3, r3, #16
 800b636:	2b10      	cmp	r3, #16
 800b638:	d122      	bne.n	800b680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	f003 0310 	and.w	r3, r3, #16
 800b644:	2b10      	cmp	r3, #16
 800b646:	d11b      	bne.n	800b680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f06f 0210 	mvn.w	r2, #16
 800b650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2208      	movs	r2, #8
 800b656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b662:	2b00      	cmp	r3, #0
 800b664:	d003      	beq.n	800b66e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f952 	bl	800b910 <HAL_TIM_IC_CaptureCallback>
 800b66c:	e005      	b.n	800b67a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 f944 	bl	800b8fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f955 	bl	800b924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	f003 0301 	and.w	r3, r3, #1
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d10e      	bne.n	800b6ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	f003 0301 	and.w	r3, r3, #1
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d107      	bne.n	800b6ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f06f 0201 	mvn.w	r2, #1
 800b6a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7f8 faf6 	bl	8003c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	691b      	ldr	r3, [r3, #16]
 800b6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b6:	2b80      	cmp	r3, #128	; 0x80
 800b6b8:	d10e      	bne.n	800b6d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6c4:	2b80      	cmp	r3, #128	; 0x80
 800b6c6:	d107      	bne.n	800b6d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fb0c 	bl	800bcf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6e6:	d10e      	bne.n	800b706 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6f2:	2b80      	cmp	r3, #128	; 0x80
 800b6f4:	d107      	bne.n	800b706 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b6fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 faff 	bl	800bd04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b710:	2b40      	cmp	r3, #64	; 0x40
 800b712:	d10e      	bne.n	800b732 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b71e:	2b40      	cmp	r3, #64	; 0x40
 800b720:	d107      	bne.n	800b732 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b72a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 f903 	bl	800b938 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	691b      	ldr	r3, [r3, #16]
 800b738:	f003 0320 	and.w	r3, r3, #32
 800b73c:	2b20      	cmp	r3, #32
 800b73e:	d10e      	bne.n	800b75e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	f003 0320 	and.w	r3, r3, #32
 800b74a:	2b20      	cmp	r3, #32
 800b74c:	d107      	bne.n	800b75e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f06f 0220 	mvn.w	r2, #32
 800b756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 fabf 	bl	800bcdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b75e:	bf00      	nop
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
	...

0800b768 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b772:	2300      	movs	r3, #0
 800b774:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d101      	bne.n	800b784 <HAL_TIM_ConfigClockSource+0x1c>
 800b780:	2302      	movs	r3, #2
 800b782:	e0b4      	b.n	800b8ee <HAL_TIM_ConfigClockSource+0x186>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2202      	movs	r2, #2
 800b790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	4b56      	ldr	r3, [pc, #344]	; (800b8f8 <HAL_TIM_ConfigClockSource+0x190>)
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7bc:	d03e      	beq.n	800b83c <HAL_TIM_ConfigClockSource+0xd4>
 800b7be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7c2:	f200 8087 	bhi.w	800b8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7ca:	f000 8086 	beq.w	800b8da <HAL_TIM_ConfigClockSource+0x172>
 800b7ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7d2:	d87f      	bhi.n	800b8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7d4:	2b70      	cmp	r3, #112	; 0x70
 800b7d6:	d01a      	beq.n	800b80e <HAL_TIM_ConfigClockSource+0xa6>
 800b7d8:	2b70      	cmp	r3, #112	; 0x70
 800b7da:	d87b      	bhi.n	800b8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7dc:	2b60      	cmp	r3, #96	; 0x60
 800b7de:	d050      	beq.n	800b882 <HAL_TIM_ConfigClockSource+0x11a>
 800b7e0:	2b60      	cmp	r3, #96	; 0x60
 800b7e2:	d877      	bhi.n	800b8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7e4:	2b50      	cmp	r3, #80	; 0x50
 800b7e6:	d03c      	beq.n	800b862 <HAL_TIM_ConfigClockSource+0xfa>
 800b7e8:	2b50      	cmp	r3, #80	; 0x50
 800b7ea:	d873      	bhi.n	800b8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7ec:	2b40      	cmp	r3, #64	; 0x40
 800b7ee:	d058      	beq.n	800b8a2 <HAL_TIM_ConfigClockSource+0x13a>
 800b7f0:	2b40      	cmp	r3, #64	; 0x40
 800b7f2:	d86f      	bhi.n	800b8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7f4:	2b30      	cmp	r3, #48	; 0x30
 800b7f6:	d064      	beq.n	800b8c2 <HAL_TIM_ConfigClockSource+0x15a>
 800b7f8:	2b30      	cmp	r3, #48	; 0x30
 800b7fa:	d86b      	bhi.n	800b8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b7fc:	2b20      	cmp	r3, #32
 800b7fe:	d060      	beq.n	800b8c2 <HAL_TIM_ConfigClockSource+0x15a>
 800b800:	2b20      	cmp	r3, #32
 800b802:	d867      	bhi.n	800b8d4 <HAL_TIM_ConfigClockSource+0x16c>
 800b804:	2b00      	cmp	r3, #0
 800b806:	d05c      	beq.n	800b8c2 <HAL_TIM_ConfigClockSource+0x15a>
 800b808:	2b10      	cmp	r3, #16
 800b80a:	d05a      	beq.n	800b8c2 <HAL_TIM_ConfigClockSource+0x15a>
 800b80c:	e062      	b.n	800b8d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6818      	ldr	r0, [r3, #0]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	6899      	ldr	r1, [r3, #8]
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	f000 f9af 	bl	800bb80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b830:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	68ba      	ldr	r2, [r7, #8]
 800b838:	609a      	str	r2, [r3, #8]
      break;
 800b83a:	e04f      	b.n	800b8dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6818      	ldr	r0, [r3, #0]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	6899      	ldr	r1, [r3, #8]
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	685a      	ldr	r2, [r3, #4]
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	68db      	ldr	r3, [r3, #12]
 800b84c:	f000 f998 	bl	800bb80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	689a      	ldr	r2, [r3, #8]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b85e:	609a      	str	r2, [r3, #8]
      break;
 800b860:	e03c      	b.n	800b8dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6818      	ldr	r0, [r3, #0]
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	6859      	ldr	r1, [r3, #4]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	461a      	mov	r2, r3
 800b870:	f000 f90c 	bl	800ba8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2150      	movs	r1, #80	; 0x50
 800b87a:	4618      	mov	r0, r3
 800b87c:	f000 f965 	bl	800bb4a <TIM_ITRx_SetConfig>
      break;
 800b880:	e02c      	b.n	800b8dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6818      	ldr	r0, [r3, #0]
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	6859      	ldr	r1, [r3, #4]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	461a      	mov	r2, r3
 800b890:	f000 f92b 	bl	800baea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2160      	movs	r1, #96	; 0x60
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 f955 	bl	800bb4a <TIM_ITRx_SetConfig>
      break;
 800b8a0:	e01c      	b.n	800b8dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6818      	ldr	r0, [r3, #0]
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	6859      	ldr	r1, [r3, #4]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	f000 f8ec 	bl	800ba8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	2140      	movs	r1, #64	; 0x40
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f000 f945 	bl	800bb4a <TIM_ITRx_SetConfig>
      break;
 800b8c0:	e00c      	b.n	800b8dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	4610      	mov	r0, r2
 800b8ce:	f000 f93c 	bl	800bb4a <TIM_ITRx_SetConfig>
      break;
 800b8d2:	e003      	b.n	800b8dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	73fb      	strb	r3, [r7, #15]
      break;
 800b8d8:	e000      	b.n	800b8dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b8da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	fffeff88 	.word	0xfffeff88

0800b8fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b904:	bf00      	nop
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a40      	ldr	r2, [pc, #256]	; (800ba60 <TIM_Base_SetConfig+0x114>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d013      	beq.n	800b98c <TIM_Base_SetConfig+0x40>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b96a:	d00f      	beq.n	800b98c <TIM_Base_SetConfig+0x40>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a3d      	ldr	r2, [pc, #244]	; (800ba64 <TIM_Base_SetConfig+0x118>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d00b      	beq.n	800b98c <TIM_Base_SetConfig+0x40>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a3c      	ldr	r2, [pc, #240]	; (800ba68 <TIM_Base_SetConfig+0x11c>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d007      	beq.n	800b98c <TIM_Base_SetConfig+0x40>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a3b      	ldr	r2, [pc, #236]	; (800ba6c <TIM_Base_SetConfig+0x120>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d003      	beq.n	800b98c <TIM_Base_SetConfig+0x40>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a3a      	ldr	r2, [pc, #232]	; (800ba70 <TIM_Base_SetConfig+0x124>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d108      	bne.n	800b99e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4a2f      	ldr	r2, [pc, #188]	; (800ba60 <TIM_Base_SetConfig+0x114>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d02b      	beq.n	800b9fe <TIM_Base_SetConfig+0xb2>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9ac:	d027      	beq.n	800b9fe <TIM_Base_SetConfig+0xb2>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a2c      	ldr	r2, [pc, #176]	; (800ba64 <TIM_Base_SetConfig+0x118>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d023      	beq.n	800b9fe <TIM_Base_SetConfig+0xb2>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4a2b      	ldr	r2, [pc, #172]	; (800ba68 <TIM_Base_SetConfig+0x11c>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d01f      	beq.n	800b9fe <TIM_Base_SetConfig+0xb2>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a2a      	ldr	r2, [pc, #168]	; (800ba6c <TIM_Base_SetConfig+0x120>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d01b      	beq.n	800b9fe <TIM_Base_SetConfig+0xb2>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a29      	ldr	r2, [pc, #164]	; (800ba70 <TIM_Base_SetConfig+0x124>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d017      	beq.n	800b9fe <TIM_Base_SetConfig+0xb2>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a28      	ldr	r2, [pc, #160]	; (800ba74 <TIM_Base_SetConfig+0x128>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d013      	beq.n	800b9fe <TIM_Base_SetConfig+0xb2>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a27      	ldr	r2, [pc, #156]	; (800ba78 <TIM_Base_SetConfig+0x12c>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d00f      	beq.n	800b9fe <TIM_Base_SetConfig+0xb2>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a26      	ldr	r2, [pc, #152]	; (800ba7c <TIM_Base_SetConfig+0x130>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d00b      	beq.n	800b9fe <TIM_Base_SetConfig+0xb2>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a25      	ldr	r2, [pc, #148]	; (800ba80 <TIM_Base_SetConfig+0x134>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d007      	beq.n	800b9fe <TIM_Base_SetConfig+0xb2>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a24      	ldr	r2, [pc, #144]	; (800ba84 <TIM_Base_SetConfig+0x138>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d003      	beq.n	800b9fe <TIM_Base_SetConfig+0xb2>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a23      	ldr	r2, [pc, #140]	; (800ba88 <TIM_Base_SetConfig+0x13c>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d108      	bne.n	800ba10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	689a      	ldr	r2, [r3, #8]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	681a      	ldr	r2, [r3, #0]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	4a0a      	ldr	r2, [pc, #40]	; (800ba60 <TIM_Base_SetConfig+0x114>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d003      	beq.n	800ba44 <TIM_Base_SetConfig+0xf8>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a0c      	ldr	r2, [pc, #48]	; (800ba70 <TIM_Base_SetConfig+0x124>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d103      	bne.n	800ba4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	691a      	ldr	r2, [r3, #16]
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2201      	movs	r2, #1
 800ba50:	615a      	str	r2, [r3, #20]
}
 800ba52:	bf00      	nop
 800ba54:	3714      	adds	r7, #20
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	40010000 	.word	0x40010000
 800ba64:	40000400 	.word	0x40000400
 800ba68:	40000800 	.word	0x40000800
 800ba6c:	40000c00 	.word	0x40000c00
 800ba70:	40010400 	.word	0x40010400
 800ba74:	40014000 	.word	0x40014000
 800ba78:	40014400 	.word	0x40014400
 800ba7c:	40014800 	.word	0x40014800
 800ba80:	40001800 	.word	0x40001800
 800ba84:	40001c00 	.word	0x40001c00
 800ba88:	40002000 	.word	0x40002000

0800ba8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b087      	sub	sp, #28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	6a1b      	ldr	r3, [r3, #32]
 800ba9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6a1b      	ldr	r3, [r3, #32]
 800baa2:	f023 0201 	bic.w	r2, r3, #1
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	699b      	ldr	r3, [r3, #24]
 800baae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	011b      	lsls	r3, r3, #4
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	4313      	orrs	r3, r2
 800bac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f023 030a 	bic.w	r3, r3, #10
 800bac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800baca:	697a      	ldr	r2, [r7, #20]
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	4313      	orrs	r3, r2
 800bad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	693a      	ldr	r2, [r7, #16]
 800bad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	621a      	str	r2, [r3, #32]
}
 800bade:	bf00      	nop
 800bae0:	371c      	adds	r7, #28
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr

0800baea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800baea:	b480      	push	{r7}
 800baec:	b087      	sub	sp, #28
 800baee:	af00      	add	r7, sp, #0
 800baf0:	60f8      	str	r0, [r7, #12]
 800baf2:	60b9      	str	r1, [r7, #8]
 800baf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	f023 0210 	bic.w	r2, r3, #16
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	699b      	ldr	r3, [r3, #24]
 800bb06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6a1b      	ldr	r3, [r3, #32]
 800bb0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	031b      	lsls	r3, r3, #12
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	011b      	lsls	r3, r3, #4
 800bb2c:	693a      	ldr	r2, [r7, #16]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	697a      	ldr	r2, [r7, #20]
 800bb36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	693a      	ldr	r2, [r7, #16]
 800bb3c:	621a      	str	r2, [r3, #32]
}
 800bb3e:	bf00      	nop
 800bb40:	371c      	adds	r7, #28
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb4a:	b480      	push	{r7}
 800bb4c:	b085      	sub	sp, #20
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	6078      	str	r0, [r7, #4]
 800bb52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb62:	683a      	ldr	r2, [r7, #0]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	4313      	orrs	r3, r2
 800bb68:	f043 0307 	orr.w	r3, r3, #7
 800bb6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	68fa      	ldr	r2, [r7, #12]
 800bb72:	609a      	str	r2, [r3, #8]
}
 800bb74:	bf00      	nop
 800bb76:	3714      	adds	r7, #20
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b087      	sub	sp, #28
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
 800bb8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	021a      	lsls	r2, r3, #8
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	431a      	orrs	r2, r3
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	697a      	ldr	r2, [r7, #20]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	697a      	ldr	r2, [r7, #20]
 800bbb2:	609a      	str	r2, [r3, #8]
}
 800bbb4:	bf00      	nop
 800bbb6:	371c      	adds	r7, #28
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d101      	bne.n	800bbd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbd4:	2302      	movs	r3, #2
 800bbd6:	e06d      	b.n	800bcb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2202      	movs	r2, #2
 800bbe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a30      	ldr	r2, [pc, #192]	; (800bcc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d004      	beq.n	800bc0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a2f      	ldr	r2, [pc, #188]	; (800bcc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d108      	bne.n	800bc1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bc12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a20      	ldr	r2, [pc, #128]	; (800bcc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d022      	beq.n	800bc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc4a:	d01d      	beq.n	800bc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a1d      	ldr	r2, [pc, #116]	; (800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d018      	beq.n	800bc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a1c      	ldr	r2, [pc, #112]	; (800bccc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d013      	beq.n	800bc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a1a      	ldr	r2, [pc, #104]	; (800bcd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d00e      	beq.n	800bc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a15      	ldr	r2, [pc, #84]	; (800bcc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d009      	beq.n	800bc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a16      	ldr	r2, [pc, #88]	; (800bcd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d004      	beq.n	800bc88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a15      	ldr	r2, [pc, #84]	; (800bcd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d10c      	bne.n	800bca2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	68ba      	ldr	r2, [r7, #8]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2201      	movs	r2, #1
 800bca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr
 800bcc0:	40010000 	.word	0x40010000
 800bcc4:	40010400 	.word	0x40010400
 800bcc8:	40000400 	.word	0x40000400
 800bccc:	40000800 	.word	0x40000800
 800bcd0:	40000c00 	.word	0x40000c00
 800bcd4:	40014000 	.word	0x40014000
 800bcd8:	40001800 	.word	0x40001800

0800bcdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bd0c:	bf00      	nop
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d101      	bne.n	800bd2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd26:	2301      	movs	r3, #1
 800bd28:	e040      	b.n	800bdac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d106      	bne.n	800bd40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f7fa fa5e 	bl	80061fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2224      	movs	r2, #36	; 0x24
 800bd44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f022 0201 	bic.w	r2, r2, #1
 800bd54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f000 fb16 	bl	800c388 <UART_SetConfig>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d101      	bne.n	800bd66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	e022      	b.n	800bdac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d002      	beq.n	800bd74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fd6c 	bl	800c84c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	685a      	ldr	r2, [r3, #4]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	689a      	ldr	r2, [r3, #8]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f042 0201 	orr.w	r2, r2, #1
 800bda2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 fdf3 	bl	800c990 <UART_CheckIdleState>
 800bdaa:	4603      	mov	r3, r0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b0ba      	sub	sp, #232	; 0xe8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	69db      	ldr	r3, [r3, #28]
 800bdc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bdda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bdde:	f640 030f 	movw	r3, #2063	; 0x80f
 800bde2:	4013      	ands	r3, r2
 800bde4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bde8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d115      	bne.n	800be1c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bdf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdf4:	f003 0320 	and.w	r3, r3, #32
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00f      	beq.n	800be1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bdfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be00:	f003 0320 	and.w	r3, r3, #32
 800be04:	2b00      	cmp	r3, #0
 800be06:	d009      	beq.n	800be1c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 828f 	beq.w	800c330 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	4798      	blx	r3
      }
      return;
 800be1a:	e289      	b.n	800c330 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 8117 	beq.w	800c054 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800be26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be2a:	f003 0301 	and.w	r3, r3, #1
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d106      	bne.n	800be40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800be32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800be36:	4b85      	ldr	r3, [pc, #532]	; (800c04c <HAL_UART_IRQHandler+0x298>)
 800be38:	4013      	ands	r3, r2
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f000 810a 	beq.w	800c054 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be44:	f003 0301 	and.w	r3, r3, #1
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d011      	beq.n	800be70 <HAL_UART_IRQHandler+0xbc>
 800be4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00b      	beq.n	800be70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2201      	movs	r2, #1
 800be5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be66:	f043 0201 	orr.w	r2, r3, #1
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be74:	f003 0302 	and.w	r3, r3, #2
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d011      	beq.n	800bea0 <HAL_UART_IRQHandler+0xec>
 800be7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be80:	f003 0301 	and.w	r3, r3, #1
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00b      	beq.n	800bea0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2202      	movs	r2, #2
 800be8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be96:	f043 0204 	orr.w	r2, r3, #4
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bea4:	f003 0304 	and.w	r3, r3, #4
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d011      	beq.n	800bed0 <HAL_UART_IRQHandler+0x11c>
 800beac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00b      	beq.n	800bed0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2204      	movs	r2, #4
 800bebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bec6:	f043 0202 	orr.w	r2, r3, #2
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bed4:	f003 0308 	and.w	r3, r3, #8
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d017      	beq.n	800bf0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bee0:	f003 0320 	and.w	r3, r3, #32
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d105      	bne.n	800bef4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00b      	beq.n	800bf0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2208      	movs	r2, #8
 800befa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf02:	f043 0208 	orr.w	r2, r3, #8
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bf0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d012      	beq.n	800bf3e <HAL_UART_IRQHandler+0x18a>
 800bf18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00c      	beq.n	800bf3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bf2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf34:	f043 0220 	orr.w	r2, r3, #32
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 81f5 	beq.w	800c334 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bf4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf4e:	f003 0320 	and.w	r3, r3, #32
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00d      	beq.n	800bf72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bf56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf5a:	f003 0320 	and.w	r3, r3, #32
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d007      	beq.n	800bf72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d003      	beq.n	800bf72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf86:	2b40      	cmp	r3, #64	; 0x40
 800bf88:	d005      	beq.n	800bf96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bf8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d04f      	beq.n	800c036 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 fdf1 	bl	800cb7e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfa6:	2b40      	cmp	r3, #64	; 0x40
 800bfa8:	d141      	bne.n	800c02e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3308      	adds	r3, #8
 800bfb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bfb8:	e853 3f00 	ldrex	r3, [r3]
 800bfbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bfc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	3308      	adds	r3, #8
 800bfd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bfd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bfda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bfe2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bfe6:	e841 2300 	strex	r3, r2, [r1]
 800bfea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bfee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d1d9      	bne.n	800bfaa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d013      	beq.n	800c026 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c002:	4a13      	ldr	r2, [pc, #76]	; (800c050 <HAL_UART_IRQHandler+0x29c>)
 800c004:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fb fa86 	bl	800751c <HAL_DMA_Abort_IT>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d017      	beq.n	800c046 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c01a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c020:	4610      	mov	r0, r2
 800c022:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c024:	e00f      	b.n	800c046 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 f998 	bl	800c35c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c02c:	e00b      	b.n	800c046 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f994 	bl	800c35c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c034:	e007      	b.n	800c046 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f990 	bl	800c35c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800c044:	e176      	b.n	800c334 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c046:	bf00      	nop
    return;
 800c048:	e174      	b.n	800c334 <HAL_UART_IRQHandler+0x580>
 800c04a:	bf00      	nop
 800c04c:	04000120 	.word	0x04000120
 800c050:	0800cc45 	.word	0x0800cc45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c058:	2b01      	cmp	r3, #1
 800c05a:	f040 8144 	bne.w	800c2e6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c062:	f003 0310 	and.w	r3, r3, #16
 800c066:	2b00      	cmp	r3, #0
 800c068:	f000 813d 	beq.w	800c2e6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c06c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c070:	f003 0310 	and.w	r3, r3, #16
 800c074:	2b00      	cmp	r3, #0
 800c076:	f000 8136 	beq.w	800c2e6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2210      	movs	r2, #16
 800c080:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c08c:	2b40      	cmp	r3, #64	; 0x40
 800c08e:	f040 80b2 	bne.w	800c1f6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c09e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f000 8148 	beq.w	800c338 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c0ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	f080 8140 	bcs.w	800c338 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c0be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c6:	69db      	ldr	r3, [r3, #28]
 800c0c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0cc:	f000 8085 	beq.w	800c1da <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c0dc:	e853 3f00 	ldrex	r3, [r3]
 800c0e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c0e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c0e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c0fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c0fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c102:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c106:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c10a:	e841 2300 	strex	r3, r2, [r1]
 800c10e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1da      	bne.n	800c0d0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	3308      	adds	r3, #8
 800c120:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c122:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c124:	e853 3f00 	ldrex	r3, [r3]
 800c128:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c12a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c12c:	f023 0301 	bic.w	r3, r3, #1
 800c130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	3308      	adds	r3, #8
 800c13a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c13e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c142:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c144:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c146:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1e1      	bne.n	800c11a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	3308      	adds	r3, #8
 800c15c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c160:	e853 3f00 	ldrex	r3, [r3]
 800c164:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c16c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3308      	adds	r3, #8
 800c176:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c17a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c17c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c180:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c182:	e841 2300 	strex	r3, r2, [r1]
 800c186:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d1e3      	bne.n	800c156 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2220      	movs	r2, #32
 800c192:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1a2:	e853 3f00 	ldrex	r3, [r3]
 800c1a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c1a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1aa:	f023 0310 	bic.w	r3, r3, #16
 800c1ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1c4:	e841 2300 	strex	r3, r2, [r1]
 800c1c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c1ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d1e4      	bne.n	800c19a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fb f931 	bl	800743c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 f8be 	bl	800c370 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c1f4:	e0a0      	b.n	800c338 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c202:	b29b      	uxth	r3, r3
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c210:	b29b      	uxth	r3, r3
 800c212:	2b00      	cmp	r3, #0
 800c214:	f000 8092 	beq.w	800c33c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800c218:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f000 808d 	beq.w	800c33c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22a:	e853 3f00 	ldrex	r3, [r3]
 800c22e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c232:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c236:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	461a      	mov	r2, r3
 800c240:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c244:	647b      	str	r3, [r7, #68]	; 0x44
 800c246:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c248:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c24a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c24c:	e841 2300 	strex	r3, r2, [r1]
 800c250:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c254:	2b00      	cmp	r3, #0
 800c256:	d1e4      	bne.n	800c222 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3308      	adds	r3, #8
 800c25e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c262:	e853 3f00 	ldrex	r3, [r3]
 800c266:	623b      	str	r3, [r7, #32]
   return(result);
 800c268:	6a3b      	ldr	r3, [r7, #32]
 800c26a:	f023 0301 	bic.w	r3, r3, #1
 800c26e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	3308      	adds	r3, #8
 800c278:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c27c:	633a      	str	r2, [r7, #48]	; 0x30
 800c27e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c284:	e841 2300 	strex	r3, r2, [r1]
 800c288:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1e3      	bne.n	800c258 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2220      	movs	r2, #32
 800c294:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	e853 3f00 	ldrex	r3, [r3]
 800c2ae:	60fb      	str	r3, [r7, #12]
   return(result);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f023 0310 	bic.w	r3, r3, #16
 800c2b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c2c4:	61fb      	str	r3, [r7, #28]
 800c2c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c8:	69b9      	ldr	r1, [r7, #24]
 800c2ca:	69fa      	ldr	r2, [r7, #28]
 800c2cc:	e841 2300 	strex	r3, r2, [r1]
 800c2d0:	617b      	str	r3, [r7, #20]
   return(result);
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1e4      	bne.n	800c2a2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c2d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c2dc:	4619      	mov	r1, r3
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 f846 	bl	800c370 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2e4:	e02a      	b.n	800c33c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c2e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d00e      	beq.n	800c310 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c2f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d008      	beq.n	800c310 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c302:	2b00      	cmp	r3, #0
 800c304:	d01c      	beq.n	800c340 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	4798      	blx	r3
    }
    return;
 800c30e:	e017      	b.n	800c340 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d012      	beq.n	800c342 <HAL_UART_IRQHandler+0x58e>
 800c31c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00c      	beq.n	800c342 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 fca1 	bl	800cc70 <UART_EndTransmit_IT>
    return;
 800c32e:	e008      	b.n	800c342 <HAL_UART_IRQHandler+0x58e>
      return;
 800c330:	bf00      	nop
 800c332:	e006      	b.n	800c342 <HAL_UART_IRQHandler+0x58e>
    return;
 800c334:	bf00      	nop
 800c336:	e004      	b.n	800c342 <HAL_UART_IRQHandler+0x58e>
      return;
 800c338:	bf00      	nop
 800c33a:	e002      	b.n	800c342 <HAL_UART_IRQHandler+0x58e>
      return;
 800c33c:	bf00      	nop
 800c33e:	e000      	b.n	800c342 <HAL_UART_IRQHandler+0x58e>
    return;
 800c340:	bf00      	nop
  }

}
 800c342:	37e8      	adds	r7, #232	; 0xe8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c364:	bf00      	nop
 800c366:	370c      	adds	r7, #12
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	460b      	mov	r3, r1
 800c37a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c37c:	bf00      	nop
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b088      	sub	sp, #32
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c390:	2300      	movs	r3, #0
 800c392:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	689a      	ldr	r2, [r3, #8]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	431a      	orrs	r2, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	431a      	orrs	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	69db      	ldr	r3, [r3, #28]
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	4ba7      	ldr	r3, [pc, #668]	; (800c650 <UART_SetConfig+0x2c8>)
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	6812      	ldr	r2, [r2, #0]
 800c3ba:	6979      	ldr	r1, [r7, #20]
 800c3bc:	430b      	orrs	r3, r1
 800c3be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68da      	ldr	r2, [r3, #12]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	699b      	ldr	r3, [r3, #24]
 800c3da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6a1b      	ldr	r3, [r3, #32]
 800c3e0:	697a      	ldr	r2, [r7, #20]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	697a      	ldr	r2, [r7, #20]
 800c3f6:	430a      	orrs	r2, r1
 800c3f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a95      	ldr	r2, [pc, #596]	; (800c654 <UART_SetConfig+0x2cc>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d120      	bne.n	800c446 <UART_SetConfig+0xbe>
 800c404:	4b94      	ldr	r3, [pc, #592]	; (800c658 <UART_SetConfig+0x2d0>)
 800c406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c40a:	f003 0303 	and.w	r3, r3, #3
 800c40e:	2b03      	cmp	r3, #3
 800c410:	d816      	bhi.n	800c440 <UART_SetConfig+0xb8>
 800c412:	a201      	add	r2, pc, #4	; (adr r2, 800c418 <UART_SetConfig+0x90>)
 800c414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c418:	0800c429 	.word	0x0800c429
 800c41c:	0800c435 	.word	0x0800c435
 800c420:	0800c42f 	.word	0x0800c42f
 800c424:	0800c43b 	.word	0x0800c43b
 800c428:	2301      	movs	r3, #1
 800c42a:	77fb      	strb	r3, [r7, #31]
 800c42c:	e14f      	b.n	800c6ce <UART_SetConfig+0x346>
 800c42e:	2302      	movs	r3, #2
 800c430:	77fb      	strb	r3, [r7, #31]
 800c432:	e14c      	b.n	800c6ce <UART_SetConfig+0x346>
 800c434:	2304      	movs	r3, #4
 800c436:	77fb      	strb	r3, [r7, #31]
 800c438:	e149      	b.n	800c6ce <UART_SetConfig+0x346>
 800c43a:	2308      	movs	r3, #8
 800c43c:	77fb      	strb	r3, [r7, #31]
 800c43e:	e146      	b.n	800c6ce <UART_SetConfig+0x346>
 800c440:	2310      	movs	r3, #16
 800c442:	77fb      	strb	r3, [r7, #31]
 800c444:	e143      	b.n	800c6ce <UART_SetConfig+0x346>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	4a84      	ldr	r2, [pc, #528]	; (800c65c <UART_SetConfig+0x2d4>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d132      	bne.n	800c4b6 <UART_SetConfig+0x12e>
 800c450:	4b81      	ldr	r3, [pc, #516]	; (800c658 <UART_SetConfig+0x2d0>)
 800c452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c456:	f003 030c 	and.w	r3, r3, #12
 800c45a:	2b0c      	cmp	r3, #12
 800c45c:	d828      	bhi.n	800c4b0 <UART_SetConfig+0x128>
 800c45e:	a201      	add	r2, pc, #4	; (adr r2, 800c464 <UART_SetConfig+0xdc>)
 800c460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c464:	0800c499 	.word	0x0800c499
 800c468:	0800c4b1 	.word	0x0800c4b1
 800c46c:	0800c4b1 	.word	0x0800c4b1
 800c470:	0800c4b1 	.word	0x0800c4b1
 800c474:	0800c4a5 	.word	0x0800c4a5
 800c478:	0800c4b1 	.word	0x0800c4b1
 800c47c:	0800c4b1 	.word	0x0800c4b1
 800c480:	0800c4b1 	.word	0x0800c4b1
 800c484:	0800c49f 	.word	0x0800c49f
 800c488:	0800c4b1 	.word	0x0800c4b1
 800c48c:	0800c4b1 	.word	0x0800c4b1
 800c490:	0800c4b1 	.word	0x0800c4b1
 800c494:	0800c4ab 	.word	0x0800c4ab
 800c498:	2300      	movs	r3, #0
 800c49a:	77fb      	strb	r3, [r7, #31]
 800c49c:	e117      	b.n	800c6ce <UART_SetConfig+0x346>
 800c49e:	2302      	movs	r3, #2
 800c4a0:	77fb      	strb	r3, [r7, #31]
 800c4a2:	e114      	b.n	800c6ce <UART_SetConfig+0x346>
 800c4a4:	2304      	movs	r3, #4
 800c4a6:	77fb      	strb	r3, [r7, #31]
 800c4a8:	e111      	b.n	800c6ce <UART_SetConfig+0x346>
 800c4aa:	2308      	movs	r3, #8
 800c4ac:	77fb      	strb	r3, [r7, #31]
 800c4ae:	e10e      	b.n	800c6ce <UART_SetConfig+0x346>
 800c4b0:	2310      	movs	r3, #16
 800c4b2:	77fb      	strb	r3, [r7, #31]
 800c4b4:	e10b      	b.n	800c6ce <UART_SetConfig+0x346>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a69      	ldr	r2, [pc, #420]	; (800c660 <UART_SetConfig+0x2d8>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d120      	bne.n	800c502 <UART_SetConfig+0x17a>
 800c4c0:	4b65      	ldr	r3, [pc, #404]	; (800c658 <UART_SetConfig+0x2d0>)
 800c4c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c4ca:	2b30      	cmp	r3, #48	; 0x30
 800c4cc:	d013      	beq.n	800c4f6 <UART_SetConfig+0x16e>
 800c4ce:	2b30      	cmp	r3, #48	; 0x30
 800c4d0:	d814      	bhi.n	800c4fc <UART_SetConfig+0x174>
 800c4d2:	2b20      	cmp	r3, #32
 800c4d4:	d009      	beq.n	800c4ea <UART_SetConfig+0x162>
 800c4d6:	2b20      	cmp	r3, #32
 800c4d8:	d810      	bhi.n	800c4fc <UART_SetConfig+0x174>
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d002      	beq.n	800c4e4 <UART_SetConfig+0x15c>
 800c4de:	2b10      	cmp	r3, #16
 800c4e0:	d006      	beq.n	800c4f0 <UART_SetConfig+0x168>
 800c4e2:	e00b      	b.n	800c4fc <UART_SetConfig+0x174>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	77fb      	strb	r3, [r7, #31]
 800c4e8:	e0f1      	b.n	800c6ce <UART_SetConfig+0x346>
 800c4ea:	2302      	movs	r3, #2
 800c4ec:	77fb      	strb	r3, [r7, #31]
 800c4ee:	e0ee      	b.n	800c6ce <UART_SetConfig+0x346>
 800c4f0:	2304      	movs	r3, #4
 800c4f2:	77fb      	strb	r3, [r7, #31]
 800c4f4:	e0eb      	b.n	800c6ce <UART_SetConfig+0x346>
 800c4f6:	2308      	movs	r3, #8
 800c4f8:	77fb      	strb	r3, [r7, #31]
 800c4fa:	e0e8      	b.n	800c6ce <UART_SetConfig+0x346>
 800c4fc:	2310      	movs	r3, #16
 800c4fe:	77fb      	strb	r3, [r7, #31]
 800c500:	e0e5      	b.n	800c6ce <UART_SetConfig+0x346>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a57      	ldr	r2, [pc, #348]	; (800c664 <UART_SetConfig+0x2dc>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d120      	bne.n	800c54e <UART_SetConfig+0x1c6>
 800c50c:	4b52      	ldr	r3, [pc, #328]	; (800c658 <UART_SetConfig+0x2d0>)
 800c50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c512:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c516:	2bc0      	cmp	r3, #192	; 0xc0
 800c518:	d013      	beq.n	800c542 <UART_SetConfig+0x1ba>
 800c51a:	2bc0      	cmp	r3, #192	; 0xc0
 800c51c:	d814      	bhi.n	800c548 <UART_SetConfig+0x1c0>
 800c51e:	2b80      	cmp	r3, #128	; 0x80
 800c520:	d009      	beq.n	800c536 <UART_SetConfig+0x1ae>
 800c522:	2b80      	cmp	r3, #128	; 0x80
 800c524:	d810      	bhi.n	800c548 <UART_SetConfig+0x1c0>
 800c526:	2b00      	cmp	r3, #0
 800c528:	d002      	beq.n	800c530 <UART_SetConfig+0x1a8>
 800c52a:	2b40      	cmp	r3, #64	; 0x40
 800c52c:	d006      	beq.n	800c53c <UART_SetConfig+0x1b4>
 800c52e:	e00b      	b.n	800c548 <UART_SetConfig+0x1c0>
 800c530:	2300      	movs	r3, #0
 800c532:	77fb      	strb	r3, [r7, #31]
 800c534:	e0cb      	b.n	800c6ce <UART_SetConfig+0x346>
 800c536:	2302      	movs	r3, #2
 800c538:	77fb      	strb	r3, [r7, #31]
 800c53a:	e0c8      	b.n	800c6ce <UART_SetConfig+0x346>
 800c53c:	2304      	movs	r3, #4
 800c53e:	77fb      	strb	r3, [r7, #31]
 800c540:	e0c5      	b.n	800c6ce <UART_SetConfig+0x346>
 800c542:	2308      	movs	r3, #8
 800c544:	77fb      	strb	r3, [r7, #31]
 800c546:	e0c2      	b.n	800c6ce <UART_SetConfig+0x346>
 800c548:	2310      	movs	r3, #16
 800c54a:	77fb      	strb	r3, [r7, #31]
 800c54c:	e0bf      	b.n	800c6ce <UART_SetConfig+0x346>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4a45      	ldr	r2, [pc, #276]	; (800c668 <UART_SetConfig+0x2e0>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d125      	bne.n	800c5a4 <UART_SetConfig+0x21c>
 800c558:	4b3f      	ldr	r3, [pc, #252]	; (800c658 <UART_SetConfig+0x2d0>)
 800c55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c55e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c566:	d017      	beq.n	800c598 <UART_SetConfig+0x210>
 800c568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c56c:	d817      	bhi.n	800c59e <UART_SetConfig+0x216>
 800c56e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c572:	d00b      	beq.n	800c58c <UART_SetConfig+0x204>
 800c574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c578:	d811      	bhi.n	800c59e <UART_SetConfig+0x216>
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d003      	beq.n	800c586 <UART_SetConfig+0x1fe>
 800c57e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c582:	d006      	beq.n	800c592 <UART_SetConfig+0x20a>
 800c584:	e00b      	b.n	800c59e <UART_SetConfig+0x216>
 800c586:	2300      	movs	r3, #0
 800c588:	77fb      	strb	r3, [r7, #31]
 800c58a:	e0a0      	b.n	800c6ce <UART_SetConfig+0x346>
 800c58c:	2302      	movs	r3, #2
 800c58e:	77fb      	strb	r3, [r7, #31]
 800c590:	e09d      	b.n	800c6ce <UART_SetConfig+0x346>
 800c592:	2304      	movs	r3, #4
 800c594:	77fb      	strb	r3, [r7, #31]
 800c596:	e09a      	b.n	800c6ce <UART_SetConfig+0x346>
 800c598:	2308      	movs	r3, #8
 800c59a:	77fb      	strb	r3, [r7, #31]
 800c59c:	e097      	b.n	800c6ce <UART_SetConfig+0x346>
 800c59e:	2310      	movs	r3, #16
 800c5a0:	77fb      	strb	r3, [r7, #31]
 800c5a2:	e094      	b.n	800c6ce <UART_SetConfig+0x346>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	4a30      	ldr	r2, [pc, #192]	; (800c66c <UART_SetConfig+0x2e4>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d125      	bne.n	800c5fa <UART_SetConfig+0x272>
 800c5ae:	4b2a      	ldr	r3, [pc, #168]	; (800c658 <UART_SetConfig+0x2d0>)
 800c5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c5b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c5bc:	d017      	beq.n	800c5ee <UART_SetConfig+0x266>
 800c5be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c5c2:	d817      	bhi.n	800c5f4 <UART_SetConfig+0x26c>
 800c5c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5c8:	d00b      	beq.n	800c5e2 <UART_SetConfig+0x25a>
 800c5ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5ce:	d811      	bhi.n	800c5f4 <UART_SetConfig+0x26c>
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d003      	beq.n	800c5dc <UART_SetConfig+0x254>
 800c5d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5d8:	d006      	beq.n	800c5e8 <UART_SetConfig+0x260>
 800c5da:	e00b      	b.n	800c5f4 <UART_SetConfig+0x26c>
 800c5dc:	2301      	movs	r3, #1
 800c5de:	77fb      	strb	r3, [r7, #31]
 800c5e0:	e075      	b.n	800c6ce <UART_SetConfig+0x346>
 800c5e2:	2302      	movs	r3, #2
 800c5e4:	77fb      	strb	r3, [r7, #31]
 800c5e6:	e072      	b.n	800c6ce <UART_SetConfig+0x346>
 800c5e8:	2304      	movs	r3, #4
 800c5ea:	77fb      	strb	r3, [r7, #31]
 800c5ec:	e06f      	b.n	800c6ce <UART_SetConfig+0x346>
 800c5ee:	2308      	movs	r3, #8
 800c5f0:	77fb      	strb	r3, [r7, #31]
 800c5f2:	e06c      	b.n	800c6ce <UART_SetConfig+0x346>
 800c5f4:	2310      	movs	r3, #16
 800c5f6:	77fb      	strb	r3, [r7, #31]
 800c5f8:	e069      	b.n	800c6ce <UART_SetConfig+0x346>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4a1c      	ldr	r2, [pc, #112]	; (800c670 <UART_SetConfig+0x2e8>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d137      	bne.n	800c674 <UART_SetConfig+0x2ec>
 800c604:	4b14      	ldr	r3, [pc, #80]	; (800c658 <UART_SetConfig+0x2d0>)
 800c606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c60a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c60e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c612:	d017      	beq.n	800c644 <UART_SetConfig+0x2bc>
 800c614:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c618:	d817      	bhi.n	800c64a <UART_SetConfig+0x2c2>
 800c61a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c61e:	d00b      	beq.n	800c638 <UART_SetConfig+0x2b0>
 800c620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c624:	d811      	bhi.n	800c64a <UART_SetConfig+0x2c2>
 800c626:	2b00      	cmp	r3, #0
 800c628:	d003      	beq.n	800c632 <UART_SetConfig+0x2aa>
 800c62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c62e:	d006      	beq.n	800c63e <UART_SetConfig+0x2b6>
 800c630:	e00b      	b.n	800c64a <UART_SetConfig+0x2c2>
 800c632:	2300      	movs	r3, #0
 800c634:	77fb      	strb	r3, [r7, #31]
 800c636:	e04a      	b.n	800c6ce <UART_SetConfig+0x346>
 800c638:	2302      	movs	r3, #2
 800c63a:	77fb      	strb	r3, [r7, #31]
 800c63c:	e047      	b.n	800c6ce <UART_SetConfig+0x346>
 800c63e:	2304      	movs	r3, #4
 800c640:	77fb      	strb	r3, [r7, #31]
 800c642:	e044      	b.n	800c6ce <UART_SetConfig+0x346>
 800c644:	2308      	movs	r3, #8
 800c646:	77fb      	strb	r3, [r7, #31]
 800c648:	e041      	b.n	800c6ce <UART_SetConfig+0x346>
 800c64a:	2310      	movs	r3, #16
 800c64c:	77fb      	strb	r3, [r7, #31]
 800c64e:	e03e      	b.n	800c6ce <UART_SetConfig+0x346>
 800c650:	efff69f3 	.word	0xefff69f3
 800c654:	40011000 	.word	0x40011000
 800c658:	40023800 	.word	0x40023800
 800c65c:	40004400 	.word	0x40004400
 800c660:	40004800 	.word	0x40004800
 800c664:	40004c00 	.word	0x40004c00
 800c668:	40005000 	.word	0x40005000
 800c66c:	40011400 	.word	0x40011400
 800c670:	40007800 	.word	0x40007800
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a71      	ldr	r2, [pc, #452]	; (800c840 <UART_SetConfig+0x4b8>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d125      	bne.n	800c6ca <UART_SetConfig+0x342>
 800c67e:	4b71      	ldr	r3, [pc, #452]	; (800c844 <UART_SetConfig+0x4bc>)
 800c680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c688:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c68c:	d017      	beq.n	800c6be <UART_SetConfig+0x336>
 800c68e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c692:	d817      	bhi.n	800c6c4 <UART_SetConfig+0x33c>
 800c694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c698:	d00b      	beq.n	800c6b2 <UART_SetConfig+0x32a>
 800c69a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c69e:	d811      	bhi.n	800c6c4 <UART_SetConfig+0x33c>
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d003      	beq.n	800c6ac <UART_SetConfig+0x324>
 800c6a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6a8:	d006      	beq.n	800c6b8 <UART_SetConfig+0x330>
 800c6aa:	e00b      	b.n	800c6c4 <UART_SetConfig+0x33c>
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	77fb      	strb	r3, [r7, #31]
 800c6b0:	e00d      	b.n	800c6ce <UART_SetConfig+0x346>
 800c6b2:	2302      	movs	r3, #2
 800c6b4:	77fb      	strb	r3, [r7, #31]
 800c6b6:	e00a      	b.n	800c6ce <UART_SetConfig+0x346>
 800c6b8:	2304      	movs	r3, #4
 800c6ba:	77fb      	strb	r3, [r7, #31]
 800c6bc:	e007      	b.n	800c6ce <UART_SetConfig+0x346>
 800c6be:	2308      	movs	r3, #8
 800c6c0:	77fb      	strb	r3, [r7, #31]
 800c6c2:	e004      	b.n	800c6ce <UART_SetConfig+0x346>
 800c6c4:	2310      	movs	r3, #16
 800c6c6:	77fb      	strb	r3, [r7, #31]
 800c6c8:	e001      	b.n	800c6ce <UART_SetConfig+0x346>
 800c6ca:	2310      	movs	r3, #16
 800c6cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	69db      	ldr	r3, [r3, #28]
 800c6d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6d6:	d15a      	bne.n	800c78e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800c6d8:	7ffb      	ldrb	r3, [r7, #31]
 800c6da:	2b08      	cmp	r3, #8
 800c6dc:	d827      	bhi.n	800c72e <UART_SetConfig+0x3a6>
 800c6de:	a201      	add	r2, pc, #4	; (adr r2, 800c6e4 <UART_SetConfig+0x35c>)
 800c6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e4:	0800c709 	.word	0x0800c709
 800c6e8:	0800c711 	.word	0x0800c711
 800c6ec:	0800c719 	.word	0x0800c719
 800c6f0:	0800c72f 	.word	0x0800c72f
 800c6f4:	0800c71f 	.word	0x0800c71f
 800c6f8:	0800c72f 	.word	0x0800c72f
 800c6fc:	0800c72f 	.word	0x0800c72f
 800c700:	0800c72f 	.word	0x0800c72f
 800c704:	0800c727 	.word	0x0800c727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c708:	f7fd fce0 	bl	800a0cc <HAL_RCC_GetPCLK1Freq>
 800c70c:	61b8      	str	r0, [r7, #24]
        break;
 800c70e:	e013      	b.n	800c738 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c710:	f7fd fcf0 	bl	800a0f4 <HAL_RCC_GetPCLK2Freq>
 800c714:	61b8      	str	r0, [r7, #24]
        break;
 800c716:	e00f      	b.n	800c738 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c718:	4b4b      	ldr	r3, [pc, #300]	; (800c848 <UART_SetConfig+0x4c0>)
 800c71a:	61bb      	str	r3, [r7, #24]
        break;
 800c71c:	e00c      	b.n	800c738 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c71e:	f7fd fc13 	bl	8009f48 <HAL_RCC_GetSysClockFreq>
 800c722:	61b8      	str	r0, [r7, #24]
        break;
 800c724:	e008      	b.n	800c738 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c72a:	61bb      	str	r3, [r7, #24]
        break;
 800c72c:	e004      	b.n	800c738 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800c72e:	2300      	movs	r3, #0
 800c730:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c732:	2301      	movs	r3, #1
 800c734:	77bb      	strb	r3, [r7, #30]
        break;
 800c736:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d074      	beq.n	800c828 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	005a      	lsls	r2, r3, #1
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	085b      	lsrs	r3, r3, #1
 800c748:	441a      	add	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c752:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	2b0f      	cmp	r3, #15
 800c758:	d916      	bls.n	800c788 <UART_SetConfig+0x400>
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c760:	d212      	bcs.n	800c788 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	b29b      	uxth	r3, r3
 800c766:	f023 030f 	bic.w	r3, r3, #15
 800c76a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	085b      	lsrs	r3, r3, #1
 800c770:	b29b      	uxth	r3, r3
 800c772:	f003 0307 	and.w	r3, r3, #7
 800c776:	b29a      	uxth	r2, r3
 800c778:	89fb      	ldrh	r3, [r7, #14]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	89fa      	ldrh	r2, [r7, #14]
 800c784:	60da      	str	r2, [r3, #12]
 800c786:	e04f      	b.n	800c828 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800c788:	2301      	movs	r3, #1
 800c78a:	77bb      	strb	r3, [r7, #30]
 800c78c:	e04c      	b.n	800c828 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c78e:	7ffb      	ldrb	r3, [r7, #31]
 800c790:	2b08      	cmp	r3, #8
 800c792:	d828      	bhi.n	800c7e6 <UART_SetConfig+0x45e>
 800c794:	a201      	add	r2, pc, #4	; (adr r2, 800c79c <UART_SetConfig+0x414>)
 800c796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79a:	bf00      	nop
 800c79c:	0800c7c1 	.word	0x0800c7c1
 800c7a0:	0800c7c9 	.word	0x0800c7c9
 800c7a4:	0800c7d1 	.word	0x0800c7d1
 800c7a8:	0800c7e7 	.word	0x0800c7e7
 800c7ac:	0800c7d7 	.word	0x0800c7d7
 800c7b0:	0800c7e7 	.word	0x0800c7e7
 800c7b4:	0800c7e7 	.word	0x0800c7e7
 800c7b8:	0800c7e7 	.word	0x0800c7e7
 800c7bc:	0800c7df 	.word	0x0800c7df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7c0:	f7fd fc84 	bl	800a0cc <HAL_RCC_GetPCLK1Freq>
 800c7c4:	61b8      	str	r0, [r7, #24]
        break;
 800c7c6:	e013      	b.n	800c7f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c7c8:	f7fd fc94 	bl	800a0f4 <HAL_RCC_GetPCLK2Freq>
 800c7cc:	61b8      	str	r0, [r7, #24]
        break;
 800c7ce:	e00f      	b.n	800c7f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c7d0:	4b1d      	ldr	r3, [pc, #116]	; (800c848 <UART_SetConfig+0x4c0>)
 800c7d2:	61bb      	str	r3, [r7, #24]
        break;
 800c7d4:	e00c      	b.n	800c7f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c7d6:	f7fd fbb7 	bl	8009f48 <HAL_RCC_GetSysClockFreq>
 800c7da:	61b8      	str	r0, [r7, #24]
        break;
 800c7dc:	e008      	b.n	800c7f0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7e2:	61bb      	str	r3, [r7, #24]
        break;
 800c7e4:	e004      	b.n	800c7f0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	77bb      	strb	r3, [r7, #30]
        break;
 800c7ee:	bf00      	nop
    }

    if (pclk != 0U)
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d018      	beq.n	800c828 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	085a      	lsrs	r2, r3, #1
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	441a      	add	r2, r3
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	fbb2 f3f3 	udiv	r3, r2, r3
 800c808:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	2b0f      	cmp	r3, #15
 800c80e:	d909      	bls.n	800c824 <UART_SetConfig+0x49c>
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c816:	d205      	bcs.n	800c824 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	b29a      	uxth	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	60da      	str	r2, [r3, #12]
 800c822:	e001      	b.n	800c828 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c834:	7fbb      	ldrb	r3, [r7, #30]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3720      	adds	r7, #32
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	40007c00 	.word	0x40007c00
 800c844:	40023800 	.word	0x40023800
 800c848:	00f42400 	.word	0x00f42400

0800c84c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c858:	f003 0301 	and.w	r3, r3, #1
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00a      	beq.n	800c876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	685b      	ldr	r3, [r3, #4]
 800c866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	430a      	orrs	r2, r1
 800c874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87a:	f003 0302 	and.w	r3, r3, #2
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00a      	beq.n	800c898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	430a      	orrs	r2, r1
 800c896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89c:	f003 0304 	and.w	r3, r3, #4
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00a      	beq.n	800c8ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	430a      	orrs	r2, r1
 800c8b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8be:	f003 0308 	and.w	r3, r3, #8
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00a      	beq.n	800c8dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	430a      	orrs	r2, r1
 800c8da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e0:	f003 0310 	and.w	r3, r3, #16
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00a      	beq.n	800c8fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	430a      	orrs	r2, r1
 800c8fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c902:	f003 0320 	and.w	r3, r3, #32
 800c906:	2b00      	cmp	r3, #0
 800c908:	d00a      	beq.n	800c920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	430a      	orrs	r2, r1
 800c91e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d01a      	beq.n	800c962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	685b      	ldr	r3, [r3, #4]
 800c932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	430a      	orrs	r2, r1
 800c940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c94a:	d10a      	bne.n	800c962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	430a      	orrs	r2, r1
 800c960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d00a      	beq.n	800c984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	430a      	orrs	r2, r1
 800c982:	605a      	str	r2, [r3, #4]
  }
}
 800c984:	bf00      	nop
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af02      	add	r7, sp, #8
 800c996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c9a0:	f7f9 feec 	bl	800677c <HAL_GetTick>
 800c9a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	f003 0308 	and.w	r3, r3, #8
 800c9b0:	2b08      	cmp	r3, #8
 800c9b2:	d10e      	bne.n	800c9d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c9b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 f817 	bl	800c9f6 <UART_WaitOnFlagUntilTimeout>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d001      	beq.n	800c9d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9ce:	2303      	movs	r3, #3
 800c9d0:	e00d      	b.n	800c9ee <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2220      	movs	r2, #32
 800c9d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2220      	movs	r2, #32
 800c9dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b09c      	sub	sp, #112	; 0x70
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	60f8      	str	r0, [r7, #12]
 800c9fe:	60b9      	str	r1, [r7, #8]
 800ca00:	603b      	str	r3, [r7, #0]
 800ca02:	4613      	mov	r3, r2
 800ca04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca06:	e0a5      	b.n	800cb54 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca0e:	f000 80a1 	beq.w	800cb54 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca12:	f7f9 feb3 	bl	800677c <HAL_GetTick>
 800ca16:	4602      	mov	r2, r0
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	1ad3      	subs	r3, r2, r3
 800ca1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d302      	bcc.n	800ca28 <UART_WaitOnFlagUntilTimeout+0x32>
 800ca22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d13e      	bne.n	800caa6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca30:	e853 3f00 	ldrex	r3, [r3]
 800ca34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ca36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ca3c:	667b      	str	r3, [r7, #100]	; 0x64
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	461a      	mov	r2, r3
 800ca44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca46:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca48:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ca4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ca4e:	e841 2300 	strex	r3, r2, [r1]
 800ca52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ca54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d1e6      	bne.n	800ca28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	3308      	adds	r3, #8
 800ca60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca64:	e853 3f00 	ldrex	r3, [r3]
 800ca68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6c:	f023 0301 	bic.w	r3, r3, #1
 800ca70:	663b      	str	r3, [r7, #96]	; 0x60
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	3308      	adds	r3, #8
 800ca78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ca7a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ca7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ca80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ca82:	e841 2300 	strex	r3, r2, [r1]
 800ca86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ca88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1e5      	bne.n	800ca5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2220      	movs	r2, #32
 800ca92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2220      	movs	r2, #32
 800ca98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800caa2:	2303      	movs	r3, #3
 800caa4:	e067      	b.n	800cb76 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 0304 	and.w	r3, r3, #4
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d04f      	beq.n	800cb54 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	69db      	ldr	r3, [r3, #28]
 800caba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cabe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cac2:	d147      	bne.n	800cb54 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cacc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad6:	e853 3f00 	ldrex	r3, [r3]
 800cada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cade:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cae2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	461a      	mov	r2, r3
 800caea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800caec:	637b      	str	r3, [r7, #52]	; 0x34
 800caee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800caf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800caf4:	e841 2300 	strex	r3, r2, [r1]
 800caf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1e6      	bne.n	800cace <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3308      	adds	r3, #8
 800cb06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	613b      	str	r3, [r7, #16]
   return(result);
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	f023 0301 	bic.w	r3, r3, #1
 800cb16:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cb20:	623a      	str	r2, [r7, #32]
 800cb22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb24:	69f9      	ldr	r1, [r7, #28]
 800cb26:	6a3a      	ldr	r2, [r7, #32]
 800cb28:	e841 2300 	strex	r3, r2, [r1]
 800cb2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e5      	bne.n	800cb00 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2220      	movs	r2, #32
 800cb38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2220      	movs	r2, #32
 800cb3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2220      	movs	r2, #32
 800cb44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800cb50:	2303      	movs	r3, #3
 800cb52:	e010      	b.n	800cb76 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	69da      	ldr	r2, [r3, #28]
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	4013      	ands	r3, r2
 800cb5e:	68ba      	ldr	r2, [r7, #8]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	bf0c      	ite	eq
 800cb64:	2301      	moveq	r3, #1
 800cb66:	2300      	movne	r3, #0
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	79fb      	ldrb	r3, [r7, #7]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	f43f af4a 	beq.w	800ca08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cb74:	2300      	movs	r3, #0
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3770      	adds	r7, #112	; 0x70
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb7e:	b480      	push	{r7}
 800cb80:	b095      	sub	sp, #84	; 0x54
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb8e:	e853 3f00 	ldrex	r3, [r3]
 800cb92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	461a      	mov	r2, r3
 800cba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cba4:	643b      	str	r3, [r7, #64]	; 0x40
 800cba6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cbaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cbac:	e841 2300 	strex	r3, r2, [r1]
 800cbb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d1e6      	bne.n	800cb86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	3308      	adds	r3, #8
 800cbbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc0:	6a3b      	ldr	r3, [r7, #32]
 800cbc2:	e853 3f00 	ldrex	r3, [r3]
 800cbc6:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	f023 0301 	bic.w	r3, r3, #1
 800cbce:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	3308      	adds	r3, #8
 800cbd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cbda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbe0:	e841 2300 	strex	r3, r2, [r1]
 800cbe4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1e5      	bne.n	800cbb8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d118      	bne.n	800cc26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	e853 3f00 	ldrex	r3, [r3]
 800cc00:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	f023 0310 	bic.w	r3, r3, #16
 800cc08:	647b      	str	r3, [r7, #68]	; 0x44
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc12:	61bb      	str	r3, [r7, #24]
 800cc14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc16:	6979      	ldr	r1, [r7, #20]
 800cc18:	69ba      	ldr	r2, [r7, #24]
 800cc1a:	e841 2300 	strex	r3, r2, [r1]
 800cc1e:	613b      	str	r3, [r7, #16]
   return(result);
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1e6      	bne.n	800cbf4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2220      	movs	r2, #32
 800cc2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	665a      	str	r2, [r3, #100]	; 0x64
}
 800cc38:	bf00      	nop
 800cc3a:	3754      	adds	r7, #84	; 0x54
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	2200      	movs	r2, #0
 800cc56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc62:	68f8      	ldr	r0, [r7, #12]
 800cc64:	f7ff fb7a 	bl	800c35c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc68:	bf00      	nop
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b088      	sub	sp, #32
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	e853 3f00 	ldrex	r3, [r3]
 800cc84:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc8c:	61fb      	str	r3, [r7, #28]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	461a      	mov	r2, r3
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	61bb      	str	r3, [r7, #24]
 800cc98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc9a:	6979      	ldr	r1, [r7, #20]
 800cc9c:	69ba      	ldr	r2, [r7, #24]
 800cc9e:	e841 2300 	strex	r3, r2, [r1]
 800cca2:	613b      	str	r3, [r7, #16]
   return(result);
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1e6      	bne.n	800cc78 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2220      	movs	r2, #32
 800ccae:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff fb46 	bl	800c348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccbc:	bf00      	nop
 800ccbe:	3720      	adds	r7, #32
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d121      	bne.n	800cd1a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	4b27      	ldr	r3, [pc, #156]	; (800cd78 <FMC_SDRAM_Init+0xb4>)
 800ccdc:	4013      	ands	r3, r2
 800ccde:	683a      	ldr	r2, [r7, #0]
 800cce0:	6851      	ldr	r1, [r2, #4]
 800cce2:	683a      	ldr	r2, [r7, #0]
 800cce4:	6892      	ldr	r2, [r2, #8]
 800cce6:	4311      	orrs	r1, r2
 800cce8:	683a      	ldr	r2, [r7, #0]
 800ccea:	68d2      	ldr	r2, [r2, #12]
 800ccec:	4311      	orrs	r1, r2
 800ccee:	683a      	ldr	r2, [r7, #0]
 800ccf0:	6912      	ldr	r2, [r2, #16]
 800ccf2:	4311      	orrs	r1, r2
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	6952      	ldr	r2, [r2, #20]
 800ccf8:	4311      	orrs	r1, r2
 800ccfa:	683a      	ldr	r2, [r7, #0]
 800ccfc:	6992      	ldr	r2, [r2, #24]
 800ccfe:	4311      	orrs	r1, r2
 800cd00:	683a      	ldr	r2, [r7, #0]
 800cd02:	69d2      	ldr	r2, [r2, #28]
 800cd04:	4311      	orrs	r1, r2
 800cd06:	683a      	ldr	r2, [r7, #0]
 800cd08:	6a12      	ldr	r2, [r2, #32]
 800cd0a:	4311      	orrs	r1, r2
 800cd0c:	683a      	ldr	r2, [r7, #0]
 800cd0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cd10:	430a      	orrs	r2, r1
 800cd12:	431a      	orrs	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	601a      	str	r2, [r3, #0]
 800cd18:	e026      	b.n	800cd68 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	69d9      	ldr	r1, [r3, #28]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	6a1b      	ldr	r3, [r3, #32]
 800cd2a:	4319      	orrs	r1, r3
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd30:	430b      	orrs	r3, r1
 800cd32:	431a      	orrs	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	685a      	ldr	r2, [r3, #4]
 800cd3c:	4b0e      	ldr	r3, [pc, #56]	; (800cd78 <FMC_SDRAM_Init+0xb4>)
 800cd3e:	4013      	ands	r3, r2
 800cd40:	683a      	ldr	r2, [r7, #0]
 800cd42:	6851      	ldr	r1, [r2, #4]
 800cd44:	683a      	ldr	r2, [r7, #0]
 800cd46:	6892      	ldr	r2, [r2, #8]
 800cd48:	4311      	orrs	r1, r2
 800cd4a:	683a      	ldr	r2, [r7, #0]
 800cd4c:	68d2      	ldr	r2, [r2, #12]
 800cd4e:	4311      	orrs	r1, r2
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	6912      	ldr	r2, [r2, #16]
 800cd54:	4311      	orrs	r1, r2
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	6952      	ldr	r2, [r2, #20]
 800cd5a:	4311      	orrs	r1, r2
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	6992      	ldr	r2, [r2, #24]
 800cd60:	430a      	orrs	r2, r1
 800cd62:	431a      	orrs	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	370c      	adds	r7, #12
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	ffff8000 	.word	0xffff8000

0800cd7c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d128      	bne.n	800cde0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	1e59      	subs	r1, r3, #1
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	3b01      	subs	r3, #1
 800cda2:	011b      	lsls	r3, r3, #4
 800cda4:	4319      	orrs	r1, r3
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	021b      	lsls	r3, r3, #8
 800cdae:	4319      	orrs	r1, r3
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	68db      	ldr	r3, [r3, #12]
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	031b      	lsls	r3, r3, #12
 800cdb8:	4319      	orrs	r1, r3
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	691b      	ldr	r3, [r3, #16]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	041b      	lsls	r3, r3, #16
 800cdc2:	4319      	orrs	r1, r3
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	695b      	ldr	r3, [r3, #20]
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	051b      	lsls	r3, r3, #20
 800cdcc:	4319      	orrs	r1, r3
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	699b      	ldr	r3, [r3, #24]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	061b      	lsls	r3, r3, #24
 800cdd6:	430b      	orrs	r3, r1
 800cdd8:	431a      	orrs	r2, r3
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	609a      	str	r2, [r3, #8]
 800cdde:	e02d      	b.n	800ce3c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	689a      	ldr	r2, [r3, #8]
 800cde4:	4b19      	ldr	r3, [pc, #100]	; (800ce4c <FMC_SDRAM_Timing_Init+0xd0>)
 800cde6:	4013      	ands	r3, r2
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	68d2      	ldr	r2, [r2, #12]
 800cdec:	3a01      	subs	r2, #1
 800cdee:	0311      	lsls	r1, r2, #12
 800cdf0:	68ba      	ldr	r2, [r7, #8]
 800cdf2:	6952      	ldr	r2, [r2, #20]
 800cdf4:	3a01      	subs	r2, #1
 800cdf6:	0512      	lsls	r2, r2, #20
 800cdf8:	430a      	orrs	r2, r1
 800cdfa:	431a      	orrs	r2, r3
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	68db      	ldr	r3, [r3, #12]
 800ce04:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	1e59      	subs	r1, r3, #1
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	3b01      	subs	r3, #1
 800ce14:	011b      	lsls	r3, r3, #4
 800ce16:	4319      	orrs	r1, r3
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	021b      	lsls	r3, r3, #8
 800ce20:	4319      	orrs	r1, r3
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	691b      	ldr	r3, [r3, #16]
 800ce26:	3b01      	subs	r3, #1
 800ce28:	041b      	lsls	r3, r3, #16
 800ce2a:	4319      	orrs	r1, r3
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	699b      	ldr	r3, [r3, #24]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	061b      	lsls	r3, r3, #24
 800ce34:	430b      	orrs	r3, r1
 800ce36:	431a      	orrs	r2, r3
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800ce3c:	2300      	movs	r3, #0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3714      	adds	r7, #20
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	ff0f0fff 	.word	0xff0f0fff

0800ce50 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b085      	sub	sp, #20
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	691a      	ldr	r2, [r3, #16]
 800ce60:	4b0c      	ldr	r3, [pc, #48]	; (800ce94 <FMC_SDRAM_SendCommand+0x44>)
 800ce62:	4013      	ands	r3, r2
 800ce64:	68ba      	ldr	r2, [r7, #8]
 800ce66:	6811      	ldr	r1, [r2, #0]
 800ce68:	68ba      	ldr	r2, [r7, #8]
 800ce6a:	6852      	ldr	r2, [r2, #4]
 800ce6c:	4311      	orrs	r1, r2
 800ce6e:	68ba      	ldr	r2, [r7, #8]
 800ce70:	6892      	ldr	r2, [r2, #8]
 800ce72:	3a01      	subs	r2, #1
 800ce74:	0152      	lsls	r2, r2, #5
 800ce76:	4311      	orrs	r1, r2
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	68d2      	ldr	r2, [r2, #12]
 800ce7c:	0252      	lsls	r2, r2, #9
 800ce7e:	430a      	orrs	r2, r1
 800ce80:	431a      	orrs	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3714      	adds	r7, #20
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr
 800ce94:	ffc00000 	.word	0xffc00000

0800ce98 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	695a      	ldr	r2, [r3, #20]
 800cea6:	4b07      	ldr	r3, [pc, #28]	; (800cec4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800cea8:	4013      	ands	r3, r2
 800ceaa:	683a      	ldr	r2, [r7, #0]
 800ceac:	0052      	lsls	r2, r2, #1
 800ceae:	431a      	orrs	r2, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	ffffc001 	.word	0xffffc001

0800cec8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b085      	sub	sp, #20
 800cecc:	af00      	add	r7, sp, #0
 800cece:	4603      	mov	r3, r0
 800ced0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ced2:	2300      	movs	r3, #0
 800ced4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ced6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ceda:	2b84      	cmp	r3, #132	; 0x84
 800cedc:	d005      	beq.n	800ceea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800cede:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	4413      	add	r3, r2
 800cee6:	3303      	adds	r3, #3
 800cee8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ceea:	68fb      	ldr	r3, [r7, #12]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3714      	adds	r7, #20
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800cefc:	f001 f9f2 	bl	800e2e4 <vTaskStartScheduler>
  
  return osOK;
 800cf00:	2300      	movs	r3, #0
}
 800cf02:	4618      	mov	r0, r3
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800cf06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf08:	b089      	sub	sp, #36	; 0x24
 800cf0a:	af04      	add	r7, sp, #16
 800cf0c:	6078      	str	r0, [r7, #4]
 800cf0e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	695b      	ldr	r3, [r3, #20]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d020      	beq.n	800cf5a <osThreadCreate+0x54>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	699b      	ldr	r3, [r3, #24]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d01c      	beq.n	800cf5a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	685c      	ldr	r4, [r3, #4]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681d      	ldr	r5, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	691e      	ldr	r6, [r3, #16]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7ff ffc8 	bl	800cec8 <makeFreeRtosPriority>
 800cf38:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	695b      	ldr	r3, [r3, #20]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf42:	9202      	str	r2, [sp, #8]
 800cf44:	9301      	str	r3, [sp, #4]
 800cf46:	9100      	str	r1, [sp, #0]
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	4632      	mov	r2, r6
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	4620      	mov	r0, r4
 800cf50:	f000 feca 	bl	800dce8 <xTaskCreateStatic>
 800cf54:	4603      	mov	r3, r0
 800cf56:	60fb      	str	r3, [r7, #12]
 800cf58:	e01c      	b.n	800cf94 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	685c      	ldr	r4, [r3, #4]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800cf66:	b29e      	uxth	r6, r3
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff ffaa 	bl	800cec8 <makeFreeRtosPriority>
 800cf74:	4602      	mov	r2, r0
 800cf76:	f107 030c 	add.w	r3, r7, #12
 800cf7a:	9301      	str	r3, [sp, #4]
 800cf7c:	9200      	str	r2, [sp, #0]
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	4632      	mov	r2, r6
 800cf82:	4629      	mov	r1, r5
 800cf84:	4620      	mov	r0, r4
 800cf86:	f000 ff12 	bl	800ddae <xTaskCreate>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d001      	beq.n	800cf94 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800cf90:	2300      	movs	r3, #0
 800cf92:	e000      	b.n	800cf96 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800cf94:	68fb      	ldr	r3, [r7, #12]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3714      	adds	r7, #20
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf9e <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b082      	sub	sp, #8
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f001 f850 	bl	800e04c <vTaskDelete>
  return osOK;
 800cfac:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b084      	sub	sp, #16
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d001      	beq.n	800cfcc <osDelay+0x16>
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	e000      	b.n	800cfce <osDelay+0x18>
 800cfcc:	2301      	movs	r3, #1
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f001 f952 	bl	800e278 <vTaskDelay>
  
  return osOK;
 800cfd4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3710      	adds	r7, #16
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800cfde:	b590      	push	{r4, r7, lr}
 800cfe0:	b085      	sub	sp, #20
 800cfe2:	af02      	add	r7, sp, #8
 800cfe4:	6078      	str	r0, [r7, #4]
 800cfe6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d011      	beq.n	800d014 <osMessageCreate+0x36>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00d      	beq.n	800d014 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6818      	ldr	r0, [r3, #0]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6859      	ldr	r1, [r3, #4]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	689a      	ldr	r2, [r3, #8]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	2400      	movs	r4, #0
 800d00a:	9400      	str	r4, [sp, #0]
 800d00c:	f000 f92e 	bl	800d26c <xQueueGenericCreateStatic>
 800d010:	4603      	mov	r3, r0
 800d012:	e008      	b.n	800d026 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6818      	ldr	r0, [r3, #0]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	4619      	mov	r1, r3
 800d020:	f000 f9a6 	bl	800d370 <xQueueGenericCreate>
 800d024:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d026:	4618      	mov	r0, r3
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd90      	pop	{r4, r7, pc}

0800d02e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d02e:	b480      	push	{r7}
 800d030:	b083      	sub	sp, #12
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f103 0208 	add.w	r2, r3, #8
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f04f 32ff 	mov.w	r2, #4294967295
 800d046:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f103 0208 	add.w	r2, r3, #8
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f103 0208 	add.w	r2, r3, #8
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d062:	bf00      	nop
 800d064:	370c      	adds	r7, #12
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr

0800d06e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d06e:	b480      	push	{r7}
 800d070:	b083      	sub	sp, #12
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d07c:	bf00      	nop
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	68fa      	ldr	r2, [r7, #12]
 800d09c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	689a      	ldr	r2, [r3, #8]
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	1c5a      	adds	r2, r3, #1
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	601a      	str	r2, [r3, #0]
}
 800d0c4:	bf00      	nop
 800d0c6:	3714      	adds	r7, #20
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e6:	d103      	bne.n	800d0f0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	60fb      	str	r3, [r7, #12]
 800d0ee:	e00c      	b.n	800d10a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	3308      	adds	r3, #8
 800d0f4:	60fb      	str	r3, [r7, #12]
 800d0f6:	e002      	b.n	800d0fe <vListInsert+0x2e>
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	685b      	ldr	r3, [r3, #4]
 800d0fc:	60fb      	str	r3, [r7, #12]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	68ba      	ldr	r2, [r7, #8]
 800d106:	429a      	cmp	r2, r3
 800d108:	d2f6      	bcs.n	800d0f8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	685a      	ldr	r2, [r3, #4]
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	683a      	ldr	r2, [r7, #0]
 800d118:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	683a      	ldr	r2, [r7, #0]
 800d124:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	687a      	ldr	r2, [r7, #4]
 800d12a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	1c5a      	adds	r2, r3, #1
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	601a      	str	r2, [r3, #0]
}
 800d136:	bf00      	nop
 800d138:	3714      	adds	r7, #20
 800d13a:	46bd      	mov	sp, r7
 800d13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d140:	4770      	bx	lr

0800d142 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d142:	b480      	push	{r7}
 800d144:	b085      	sub	sp, #20
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	691b      	ldr	r3, [r3, #16]
 800d14e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	6892      	ldr	r2, [r2, #8]
 800d158:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	6852      	ldr	r2, [r2, #4]
 800d162:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d103      	bne.n	800d176 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	689a      	ldr	r2, [r3, #8]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	1e5a      	subs	r2, r3, #1
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3714      	adds	r7, #20
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
	...

0800d198 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d10c      	bne.n	800d1c6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b0:	b672      	cpsid	i
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	b662      	cpsie	i
 800d1c0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d1c2:	bf00      	nop
 800d1c4:	e7fe      	b.n	800d1c4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d1c6:	f002 f801 	bl	800f1cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d2:	68f9      	ldr	r1, [r7, #12]
 800d1d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1d6:	fb01 f303 	mul.w	r3, r1, r3
 800d1da:	441a      	add	r2, r3
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	68f9      	ldr	r1, [r7, #12]
 800d1fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1fc:	fb01 f303 	mul.w	r3, r1, r3
 800d200:	441a      	add	r2, r3
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	22ff      	movs	r2, #255	; 0xff
 800d20a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	22ff      	movs	r2, #255	; 0xff
 800d212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d114      	bne.n	800d246 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	691b      	ldr	r3, [r3, #16]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d01a      	beq.n	800d25a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	3310      	adds	r3, #16
 800d228:	4618      	mov	r0, r3
 800d22a:	f001 fab9 	bl	800e7a0 <xTaskRemoveFromEventList>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d012      	beq.n	800d25a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d234:	4b0c      	ldr	r3, [pc, #48]	; (800d268 <xQueueGenericReset+0xd0>)
 800d236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d23a:	601a      	str	r2, [r3, #0]
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	e009      	b.n	800d25a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	3310      	adds	r3, #16
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7ff feef 	bl	800d02e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	3324      	adds	r3, #36	; 0x24
 800d254:	4618      	mov	r0, r3
 800d256:	f7ff feea 	bl	800d02e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d25a:	f001 ffeb 	bl	800f234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d25e:	2301      	movs	r3, #1
}
 800d260:	4618      	mov	r0, r3
 800d262:	3710      	adds	r7, #16
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	e000ed04 	.word	0xe000ed04

0800d26c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b08e      	sub	sp, #56	; 0x38
 800d270:	af02      	add	r7, sp, #8
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
 800d278:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d10c      	bne.n	800d29a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800d280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d284:	b672      	cpsid	i
 800d286:	f383 8811 	msr	BASEPRI, r3
 800d28a:	f3bf 8f6f 	isb	sy
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	b662      	cpsie	i
 800d294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d296:	bf00      	nop
 800d298:	e7fe      	b.n	800d298 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10c      	bne.n	800d2ba <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800d2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a4:	b672      	cpsid	i
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	b662      	cpsie	i
 800d2b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d2b6:	bf00      	nop
 800d2b8:	e7fe      	b.n	800d2b8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d002      	beq.n	800d2c6 <xQueueGenericCreateStatic+0x5a>
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <xQueueGenericCreateStatic+0x5e>
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e000      	b.n	800d2cc <xQueueGenericCreateStatic+0x60>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10c      	bne.n	800d2ea <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800d2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d4:	b672      	cpsid	i
 800d2d6:	f383 8811 	msr	BASEPRI, r3
 800d2da:	f3bf 8f6f 	isb	sy
 800d2de:	f3bf 8f4f 	dsb	sy
 800d2e2:	b662      	cpsie	i
 800d2e4:	623b      	str	r3, [r7, #32]
}
 800d2e6:	bf00      	nop
 800d2e8:	e7fe      	b.n	800d2e8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d102      	bne.n	800d2f6 <xQueueGenericCreateStatic+0x8a>
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d101      	bne.n	800d2fa <xQueueGenericCreateStatic+0x8e>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e000      	b.n	800d2fc <xQueueGenericCreateStatic+0x90>
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d10c      	bne.n	800d31a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800d300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d304:	b672      	cpsid	i
 800d306:	f383 8811 	msr	BASEPRI, r3
 800d30a:	f3bf 8f6f 	isb	sy
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	b662      	cpsie	i
 800d314:	61fb      	str	r3, [r7, #28]
}
 800d316:	bf00      	nop
 800d318:	e7fe      	b.n	800d318 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d31a:	2348      	movs	r3, #72	; 0x48
 800d31c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	2b48      	cmp	r3, #72	; 0x48
 800d322:	d00c      	beq.n	800d33e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800d324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d328:	b672      	cpsid	i
 800d32a:	f383 8811 	msr	BASEPRI, r3
 800d32e:	f3bf 8f6f 	isb	sy
 800d332:	f3bf 8f4f 	dsb	sy
 800d336:	b662      	cpsie	i
 800d338:	61bb      	str	r3, [r7, #24]
}
 800d33a:	bf00      	nop
 800d33c:	e7fe      	b.n	800d33c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d33e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d346:	2b00      	cmp	r3, #0
 800d348:	d00d      	beq.n	800d366 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34c:	2201      	movs	r2, #1
 800d34e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d352:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d358:	9300      	str	r3, [sp, #0]
 800d35a:	4613      	mov	r3, r2
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	68b9      	ldr	r1, [r7, #8]
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f000 f847 	bl	800d3f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d368:	4618      	mov	r0, r3
 800d36a:	3730      	adds	r7, #48	; 0x30
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d370:	b580      	push	{r7, lr}
 800d372:	b08a      	sub	sp, #40	; 0x28
 800d374:	af02      	add	r7, sp, #8
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	4613      	mov	r3, r2
 800d37c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10c      	bne.n	800d39e <xQueueGenericCreate+0x2e>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	b672      	cpsid	i
 800d38a:	f383 8811 	msr	BASEPRI, r3
 800d38e:	f3bf 8f6f 	isb	sy
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	b662      	cpsie	i
 800d398:	613b      	str	r3, [r7, #16]
}
 800d39a:	bf00      	nop
 800d39c:	e7fe      	b.n	800d39c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d102      	bne.n	800d3aa <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	61fb      	str	r3, [r7, #28]
 800d3a8:	e004      	b.n	800d3b4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	68ba      	ldr	r2, [r7, #8]
 800d3ae:	fb02 f303 	mul.w	r3, r2, r3
 800d3b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	3348      	adds	r3, #72	; 0x48
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f001 ffef 	bl	800f39c <pvPortMalloc>
 800d3be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d011      	beq.n	800d3ea <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	3348      	adds	r3, #72	; 0x48
 800d3ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d3d8:	79fa      	ldrb	r2, [r7, #7]
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	697a      	ldr	r2, [r7, #20]
 800d3e2:	68b9      	ldr	r1, [r7, #8]
 800d3e4:	68f8      	ldr	r0, [r7, #12]
 800d3e6:	f000 f805 	bl	800d3f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d3ea:	69bb      	ldr	r3, [r7, #24]
	}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3720      	adds	r7, #32
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]
 800d400:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d103      	bne.n	800d410 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	69ba      	ldr	r2, [r7, #24]
 800d40c:	601a      	str	r2, [r3, #0]
 800d40e:	e002      	b.n	800d416 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	68ba      	ldr	r2, [r7, #8]
 800d420:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d422:	2101      	movs	r1, #1
 800d424:	69b8      	ldr	r0, [r7, #24]
 800d426:	f7ff feb7 	bl	800d198 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d42a:	bf00      	nop
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d432:	b580      	push	{r7, lr}
 800d434:	b082      	sub	sp, #8
 800d436:	af00      	add	r7, sp, #0
 800d438:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00e      	beq.n	800d45e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2200      	movs	r2, #0
 800d44a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d452:	2300      	movs	r3, #0
 800d454:	2200      	movs	r2, #0
 800d456:	2100      	movs	r1, #0
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 f81d 	bl	800d498 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d45e:	bf00      	nop
 800d460:	3708      	adds	r7, #8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d466:	b580      	push	{r7, lr}
 800d468:	b086      	sub	sp, #24
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	4603      	mov	r3, r0
 800d46e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d470:	2301      	movs	r3, #1
 800d472:	617b      	str	r3, [r7, #20]
 800d474:	2300      	movs	r3, #0
 800d476:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d478:	79fb      	ldrb	r3, [r7, #7]
 800d47a:	461a      	mov	r2, r3
 800d47c:	6939      	ldr	r1, [r7, #16]
 800d47e:	6978      	ldr	r0, [r7, #20]
 800d480:	f7ff ff76 	bl	800d370 <xQueueGenericCreate>
 800d484:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d486:	68f8      	ldr	r0, [r7, #12]
 800d488:	f7ff ffd3 	bl	800d432 <prvInitialiseMutex>

		return xNewQueue;
 800d48c:	68fb      	ldr	r3, [r7, #12]
	}
 800d48e:	4618      	mov	r0, r3
 800d490:	3718      	adds	r7, #24
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
	...

0800d498 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b08e      	sub	sp, #56	; 0x38
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	607a      	str	r2, [r7, #4]
 800d4a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d10c      	bne.n	800d4ce <xQueueGenericSend+0x36>
	__asm volatile
 800d4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b8:	b672      	cpsid	i
 800d4ba:	f383 8811 	msr	BASEPRI, r3
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	f3bf 8f4f 	dsb	sy
 800d4c6:	b662      	cpsie	i
 800d4c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d4ca:	bf00      	nop
 800d4cc:	e7fe      	b.n	800d4cc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d103      	bne.n	800d4dc <xQueueGenericSend+0x44>
 800d4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d101      	bne.n	800d4e0 <xQueueGenericSend+0x48>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	e000      	b.n	800d4e2 <xQueueGenericSend+0x4a>
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d10c      	bne.n	800d500 <xQueueGenericSend+0x68>
	__asm volatile
 800d4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ea:	b672      	cpsid	i
 800d4ec:	f383 8811 	msr	BASEPRI, r3
 800d4f0:	f3bf 8f6f 	isb	sy
 800d4f4:	f3bf 8f4f 	dsb	sy
 800d4f8:	b662      	cpsie	i
 800d4fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4fc:	bf00      	nop
 800d4fe:	e7fe      	b.n	800d4fe <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	2b02      	cmp	r3, #2
 800d504:	d103      	bne.n	800d50e <xQueueGenericSend+0x76>
 800d506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d101      	bne.n	800d512 <xQueueGenericSend+0x7a>
 800d50e:	2301      	movs	r3, #1
 800d510:	e000      	b.n	800d514 <xQueueGenericSend+0x7c>
 800d512:	2300      	movs	r3, #0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d10c      	bne.n	800d532 <xQueueGenericSend+0x9a>
	__asm volatile
 800d518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51c:	b672      	cpsid	i
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	b662      	cpsie	i
 800d52c:	623b      	str	r3, [r7, #32]
}
 800d52e:	bf00      	nop
 800d530:	e7fe      	b.n	800d530 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d532:	f001 fafd 	bl	800eb30 <xTaskGetSchedulerState>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d102      	bne.n	800d542 <xQueueGenericSend+0xaa>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d101      	bne.n	800d546 <xQueueGenericSend+0xae>
 800d542:	2301      	movs	r3, #1
 800d544:	e000      	b.n	800d548 <xQueueGenericSend+0xb0>
 800d546:	2300      	movs	r3, #0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10c      	bne.n	800d566 <xQueueGenericSend+0xce>
	__asm volatile
 800d54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d550:	b672      	cpsid	i
 800d552:	f383 8811 	msr	BASEPRI, r3
 800d556:	f3bf 8f6f 	isb	sy
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	b662      	cpsie	i
 800d560:	61fb      	str	r3, [r7, #28]
}
 800d562:	bf00      	nop
 800d564:	e7fe      	b.n	800d564 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d566:	f001 fe31 	bl	800f1cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d572:	429a      	cmp	r2, r3
 800d574:	d302      	bcc.n	800d57c <xQueueGenericSend+0xe4>
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	2b02      	cmp	r3, #2
 800d57a:	d129      	bne.n	800d5d0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d57c:	683a      	ldr	r2, [r7, #0]
 800d57e:	68b9      	ldr	r1, [r7, #8]
 800d580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d582:	f000 faa1 	bl	800dac8 <prvCopyDataToQueue>
 800d586:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d010      	beq.n	800d5b2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d592:	3324      	adds	r3, #36	; 0x24
 800d594:	4618      	mov	r0, r3
 800d596:	f001 f903 	bl	800e7a0 <xTaskRemoveFromEventList>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d013      	beq.n	800d5c8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d5a0:	4b3f      	ldr	r3, [pc, #252]	; (800d6a0 <xQueueGenericSend+0x208>)
 800d5a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5a6:	601a      	str	r2, [r3, #0]
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	f3bf 8f6f 	isb	sy
 800d5b0:	e00a      	b.n	800d5c8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d007      	beq.n	800d5c8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d5b8:	4b39      	ldr	r3, [pc, #228]	; (800d6a0 <xQueueGenericSend+0x208>)
 800d5ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5be:	601a      	str	r2, [r3, #0]
 800d5c0:	f3bf 8f4f 	dsb	sy
 800d5c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d5c8:	f001 fe34 	bl	800f234 <vPortExitCritical>
				return pdPASS;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e063      	b.n	800d698 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d103      	bne.n	800d5de <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5d6:	f001 fe2d 	bl	800f234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	e05c      	b.n	800d698 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d106      	bne.n	800d5f2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5e4:	f107 0314 	add.w	r3, r7, #20
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f001 f93d 	bl	800e868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5f2:	f001 fe1f 	bl	800f234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5f6:	f000 fee3 	bl	800e3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5fa:	f001 fde7 	bl	800f1cc <vPortEnterCritical>
 800d5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d604:	b25b      	sxtb	r3, r3
 800d606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60a:	d103      	bne.n	800d614 <xQueueGenericSend+0x17c>
 800d60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60e:	2200      	movs	r2, #0
 800d610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d61a:	b25b      	sxtb	r3, r3
 800d61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d620:	d103      	bne.n	800d62a <xQueueGenericSend+0x192>
 800d622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d624:	2200      	movs	r2, #0
 800d626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d62a:	f001 fe03 	bl	800f234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d62e:	1d3a      	adds	r2, r7, #4
 800d630:	f107 0314 	add.w	r3, r7, #20
 800d634:	4611      	mov	r1, r2
 800d636:	4618      	mov	r0, r3
 800d638:	f001 f92c 	bl	800e894 <xTaskCheckForTimeOut>
 800d63c:	4603      	mov	r3, r0
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d124      	bne.n	800d68c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d642:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d644:	f000 fb38 	bl	800dcb8 <prvIsQueueFull>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d018      	beq.n	800d680 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d650:	3310      	adds	r3, #16
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	4611      	mov	r1, r2
 800d656:	4618      	mov	r0, r3
 800d658:	f001 f87c 	bl	800e754 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d65c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d65e:	f000 fac3 	bl	800dbe8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d662:	f000 febb 	bl	800e3dc <xTaskResumeAll>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f47f af7c 	bne.w	800d566 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d66e:	4b0c      	ldr	r3, [pc, #48]	; (800d6a0 <xQueueGenericSend+0x208>)
 800d670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d674:	601a      	str	r2, [r3, #0]
 800d676:	f3bf 8f4f 	dsb	sy
 800d67a:	f3bf 8f6f 	isb	sy
 800d67e:	e772      	b.n	800d566 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d682:	f000 fab1 	bl	800dbe8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d686:	f000 fea9 	bl	800e3dc <xTaskResumeAll>
 800d68a:	e76c      	b.n	800d566 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d68c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d68e:	f000 faab 	bl	800dbe8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d692:	f000 fea3 	bl	800e3dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d696:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3738      	adds	r7, #56	; 0x38
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	e000ed04 	.word	0xe000ed04

0800d6a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b08c      	sub	sp, #48	; 0x30
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10c      	bne.n	800d6d8 <xQueueReceive+0x34>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	b672      	cpsid	i
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	b662      	cpsie	i
 800d6d2:	623b      	str	r3, [r7, #32]
}
 800d6d4:	bf00      	nop
 800d6d6:	e7fe      	b.n	800d6d6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d103      	bne.n	800d6e6 <xQueueReceive+0x42>
 800d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d101      	bne.n	800d6ea <xQueueReceive+0x46>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e000      	b.n	800d6ec <xQueueReceive+0x48>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d10c      	bne.n	800d70a <xQueueReceive+0x66>
	__asm volatile
 800d6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f4:	b672      	cpsid	i
 800d6f6:	f383 8811 	msr	BASEPRI, r3
 800d6fa:	f3bf 8f6f 	isb	sy
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	b662      	cpsie	i
 800d704:	61fb      	str	r3, [r7, #28]
}
 800d706:	bf00      	nop
 800d708:	e7fe      	b.n	800d708 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d70a:	f001 fa11 	bl	800eb30 <xTaskGetSchedulerState>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d102      	bne.n	800d71a <xQueueReceive+0x76>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d101      	bne.n	800d71e <xQueueReceive+0x7a>
 800d71a:	2301      	movs	r3, #1
 800d71c:	e000      	b.n	800d720 <xQueueReceive+0x7c>
 800d71e:	2300      	movs	r3, #0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10c      	bne.n	800d73e <xQueueReceive+0x9a>
	__asm volatile
 800d724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d728:	b672      	cpsid	i
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	b662      	cpsie	i
 800d738:	61bb      	str	r3, [r7, #24]
}
 800d73a:	bf00      	nop
 800d73c:	e7fe      	b.n	800d73c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d73e:	f001 fd45 	bl	800f1cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d746:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d01f      	beq.n	800d78e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d74e:	68b9      	ldr	r1, [r7, #8]
 800d750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d752:	f000 fa23 	bl	800db9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d758:	1e5a      	subs	r2, r3, #1
 800d75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d760:	691b      	ldr	r3, [r3, #16]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00f      	beq.n	800d786 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d768:	3310      	adds	r3, #16
 800d76a:	4618      	mov	r0, r3
 800d76c:	f001 f818 	bl	800e7a0 <xTaskRemoveFromEventList>
 800d770:	4603      	mov	r3, r0
 800d772:	2b00      	cmp	r3, #0
 800d774:	d007      	beq.n	800d786 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d776:	4b3d      	ldr	r3, [pc, #244]	; (800d86c <xQueueReceive+0x1c8>)
 800d778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d77c:	601a      	str	r2, [r3, #0]
 800d77e:	f3bf 8f4f 	dsb	sy
 800d782:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d786:	f001 fd55 	bl	800f234 <vPortExitCritical>
				return pdPASS;
 800d78a:	2301      	movs	r3, #1
 800d78c:	e069      	b.n	800d862 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d103      	bne.n	800d79c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d794:	f001 fd4e 	bl	800f234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d798:	2300      	movs	r3, #0
 800d79a:	e062      	b.n	800d862 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d106      	bne.n	800d7b0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7a2:	f107 0310 	add.w	r3, r7, #16
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f001 f85e 	bl	800e868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d7b0:	f001 fd40 	bl	800f234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d7b4:	f000 fe04 	bl	800e3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d7b8:	f001 fd08 	bl	800f1cc <vPortEnterCritical>
 800d7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7c2:	b25b      	sxtb	r3, r3
 800d7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7c8:	d103      	bne.n	800d7d2 <xQueueReceive+0x12e>
 800d7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7d8:	b25b      	sxtb	r3, r3
 800d7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7de:	d103      	bne.n	800d7e8 <xQueueReceive+0x144>
 800d7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7e8:	f001 fd24 	bl	800f234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7ec:	1d3a      	adds	r2, r7, #4
 800d7ee:	f107 0310 	add.w	r3, r7, #16
 800d7f2:	4611      	mov	r1, r2
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f001 f84d 	bl	800e894 <xTaskCheckForTimeOut>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d123      	bne.n	800d848 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d802:	f000 fa43 	bl	800dc8c <prvIsQueueEmpty>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d017      	beq.n	800d83c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80e:	3324      	adds	r3, #36	; 0x24
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	4611      	mov	r1, r2
 800d814:	4618      	mov	r0, r3
 800d816:	f000 ff9d 	bl	800e754 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d81a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d81c:	f000 f9e4 	bl	800dbe8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d820:	f000 fddc 	bl	800e3dc <xTaskResumeAll>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d189      	bne.n	800d73e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800d82a:	4b10      	ldr	r3, [pc, #64]	; (800d86c <xQueueReceive+0x1c8>)
 800d82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d830:	601a      	str	r2, [r3, #0]
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	f3bf 8f6f 	isb	sy
 800d83a:	e780      	b.n	800d73e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d83c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d83e:	f000 f9d3 	bl	800dbe8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d842:	f000 fdcb 	bl	800e3dc <xTaskResumeAll>
 800d846:	e77a      	b.n	800d73e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d84a:	f000 f9cd 	bl	800dbe8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d84e:	f000 fdc5 	bl	800e3dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d854:	f000 fa1a 	bl	800dc8c <prvIsQueueEmpty>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	f43f af6f 	beq.w	800d73e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d860:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d862:	4618      	mov	r0, r3
 800d864:	3730      	adds	r7, #48	; 0x30
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	e000ed04 	.word	0xe000ed04

0800d870 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b08e      	sub	sp, #56	; 0x38
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d87a:	2300      	movs	r3, #0
 800d87c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d882:	2300      	movs	r3, #0
 800d884:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d10c      	bne.n	800d8a6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d890:	b672      	cpsid	i
 800d892:	f383 8811 	msr	BASEPRI, r3
 800d896:	f3bf 8f6f 	isb	sy
 800d89a:	f3bf 8f4f 	dsb	sy
 800d89e:	b662      	cpsie	i
 800d8a0:	623b      	str	r3, [r7, #32]
}
 800d8a2:	bf00      	nop
 800d8a4:	e7fe      	b.n	800d8a4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00c      	beq.n	800d8c8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b2:	b672      	cpsid	i
 800d8b4:	f383 8811 	msr	BASEPRI, r3
 800d8b8:	f3bf 8f6f 	isb	sy
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	b662      	cpsie	i
 800d8c2:	61fb      	str	r3, [r7, #28]
}
 800d8c4:	bf00      	nop
 800d8c6:	e7fe      	b.n	800d8c6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8c8:	f001 f932 	bl	800eb30 <xTaskGetSchedulerState>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d102      	bne.n	800d8d8 <xQueueSemaphoreTake+0x68>
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <xQueueSemaphoreTake+0x6c>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	e000      	b.n	800d8de <xQueueSemaphoreTake+0x6e>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d10c      	bne.n	800d8fc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e6:	b672      	cpsid	i
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	b662      	cpsie	i
 800d8f6:	61bb      	str	r3, [r7, #24]
}
 800d8f8:	bf00      	nop
 800d8fa:	e7fe      	b.n	800d8fa <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8fc:	f001 fc66 	bl	800f1cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d904:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d024      	beq.n	800d956 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	1e5a      	subs	r2, r3, #1
 800d910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d912:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d104      	bne.n	800d926 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d91c:	f001 face 	bl	800eebc <pvTaskIncrementMutexHeldCount>
 800d920:	4602      	mov	r2, r0
 800d922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d924:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d928:	691b      	ldr	r3, [r3, #16]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00f      	beq.n	800d94e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d930:	3310      	adds	r3, #16
 800d932:	4618      	mov	r0, r3
 800d934:	f000 ff34 	bl	800e7a0 <xTaskRemoveFromEventList>
 800d938:	4603      	mov	r3, r0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d007      	beq.n	800d94e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d93e:	4b55      	ldr	r3, [pc, #340]	; (800da94 <xQueueSemaphoreTake+0x224>)
 800d940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d944:	601a      	str	r2, [r3, #0]
 800d946:	f3bf 8f4f 	dsb	sy
 800d94a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d94e:	f001 fc71 	bl	800f234 <vPortExitCritical>
				return pdPASS;
 800d952:	2301      	movs	r3, #1
 800d954:	e099      	b.n	800da8a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d113      	bne.n	800d984 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00c      	beq.n	800d97c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d966:	b672      	cpsid	i
 800d968:	f383 8811 	msr	BASEPRI, r3
 800d96c:	f3bf 8f6f 	isb	sy
 800d970:	f3bf 8f4f 	dsb	sy
 800d974:	b662      	cpsie	i
 800d976:	617b      	str	r3, [r7, #20]
}
 800d978:	bf00      	nop
 800d97a:	e7fe      	b.n	800d97a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d97c:	f001 fc5a 	bl	800f234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d980:	2300      	movs	r3, #0
 800d982:	e082      	b.n	800da8a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d986:	2b00      	cmp	r3, #0
 800d988:	d106      	bne.n	800d998 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d98a:	f107 030c 	add.w	r3, r7, #12
 800d98e:	4618      	mov	r0, r3
 800d990:	f000 ff6a 	bl	800e868 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d994:	2301      	movs	r3, #1
 800d996:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d998:	f001 fc4c 	bl	800f234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d99c:	f000 fd10 	bl	800e3c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9a0:	f001 fc14 	bl	800f1cc <vPortEnterCritical>
 800d9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9aa:	b25b      	sxtb	r3, r3
 800d9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b0:	d103      	bne.n	800d9ba <xQueueSemaphoreTake+0x14a>
 800d9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9c0:	b25b      	sxtb	r3, r3
 800d9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9c6:	d103      	bne.n	800d9d0 <xQueueSemaphoreTake+0x160>
 800d9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9d0:	f001 fc30 	bl	800f234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d9d4:	463a      	mov	r2, r7
 800d9d6:	f107 030c 	add.w	r3, r7, #12
 800d9da:	4611      	mov	r1, r2
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f000 ff59 	bl	800e894 <xTaskCheckForTimeOut>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d132      	bne.n	800da4e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9ea:	f000 f94f 	bl	800dc8c <prvIsQueueEmpty>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d026      	beq.n	800da42 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d109      	bne.n	800da10 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800d9fc:	f001 fbe6 	bl	800f1cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800da00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da02:	689b      	ldr	r3, [r3, #8]
 800da04:	4618      	mov	r0, r3
 800da06:	f001 f8b1 	bl	800eb6c <xTaskPriorityInherit>
 800da0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800da0c:	f001 fc12 	bl	800f234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da12:	3324      	adds	r3, #36	; 0x24
 800da14:	683a      	ldr	r2, [r7, #0]
 800da16:	4611      	mov	r1, r2
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 fe9b 	bl	800e754 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da20:	f000 f8e2 	bl	800dbe8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da24:	f000 fcda 	bl	800e3dc <xTaskResumeAll>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f47f af66 	bne.w	800d8fc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800da30:	4b18      	ldr	r3, [pc, #96]	; (800da94 <xQueueSemaphoreTake+0x224>)
 800da32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da36:	601a      	str	r2, [r3, #0]
 800da38:	f3bf 8f4f 	dsb	sy
 800da3c:	f3bf 8f6f 	isb	sy
 800da40:	e75c      	b.n	800d8fc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800da42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da44:	f000 f8d0 	bl	800dbe8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da48:	f000 fcc8 	bl	800e3dc <xTaskResumeAll>
 800da4c:	e756      	b.n	800d8fc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800da4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da50:	f000 f8ca 	bl	800dbe8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da54:	f000 fcc2 	bl	800e3dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da5a:	f000 f917 	bl	800dc8c <prvIsQueueEmpty>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	f43f af4b 	beq.w	800d8fc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800da66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d00d      	beq.n	800da88 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800da6c:	f001 fbae 	bl	800f1cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800da70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da72:	f000 f811 	bl	800da98 <prvGetDisinheritPriorityAfterTimeout>
 800da76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800da78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da7e:	4618      	mov	r0, r3
 800da80:	f001 f97e 	bl	800ed80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800da84:	f001 fbd6 	bl	800f234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3738      	adds	r7, #56	; 0x38
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
 800da92:	bf00      	nop
 800da94:	e000ed04 	.word	0xe000ed04

0800da98 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d006      	beq.n	800dab6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	f1c3 0307 	rsb	r3, r3, #7
 800dab2:	60fb      	str	r3, [r7, #12]
 800dab4:	e001      	b.n	800daba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dab6:	2300      	movs	r3, #0
 800dab8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800daba:	68fb      	ldr	r3, [r7, #12]
	}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3714      	adds	r7, #20
 800dac0:	46bd      	mov	sp, r7
 800dac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac6:	4770      	bx	lr

0800dac8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b086      	sub	sp, #24
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dad4:	2300      	movs	r3, #0
 800dad6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dadc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d10d      	bne.n	800db02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d14d      	bne.n	800db8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	689b      	ldr	r3, [r3, #8]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f001 f8ba 	bl	800ec6c <xTaskPriorityDisinherit>
 800daf8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2200      	movs	r2, #0
 800dafe:	609a      	str	r2, [r3, #8]
 800db00:	e043      	b.n	800db8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d119      	bne.n	800db3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	6858      	ldr	r0, [r3, #4]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db10:	461a      	mov	r2, r3
 800db12:	68b9      	ldr	r1, [r7, #8]
 800db14:	f001 fe4c 	bl	800f7b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	685a      	ldr	r2, [r3, #4]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db20:	441a      	add	r2, r3
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	685a      	ldr	r2, [r3, #4]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	689b      	ldr	r3, [r3, #8]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d32b      	bcc.n	800db8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	605a      	str	r2, [r3, #4]
 800db3a:	e026      	b.n	800db8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	68d8      	ldr	r0, [r3, #12]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db44:	461a      	mov	r2, r3
 800db46:	68b9      	ldr	r1, [r7, #8]
 800db48:	f001 fe32 	bl	800f7b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	68da      	ldr	r2, [r3, #12]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db54:	425b      	negs	r3, r3
 800db56:	441a      	add	r2, r3
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	68da      	ldr	r2, [r3, #12]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	429a      	cmp	r2, r3
 800db66:	d207      	bcs.n	800db78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	689a      	ldr	r2, [r3, #8]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db70:	425b      	negs	r3, r3
 800db72:	441a      	add	r2, r3
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d105      	bne.n	800db8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d002      	beq.n	800db8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	3b01      	subs	r3, #1
 800db88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	1c5a      	adds	r2, r3, #1
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db92:	697b      	ldr	r3, [r7, #20]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3718      	adds	r7, #24
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d018      	beq.n	800dbe0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	68da      	ldr	r2, [r3, #12]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb6:	441a      	add	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	68da      	ldr	r2, [r3, #12]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d303      	bcc.n	800dbd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	68d9      	ldr	r1, [r3, #12]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd8:	461a      	mov	r2, r3
 800dbda:	6838      	ldr	r0, [r7, #0]
 800dbdc:	f001 fde8 	bl	800f7b0 <memcpy>
	}
}
 800dbe0:	bf00      	nop
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dbf0:	f001 faec 	bl	800f1cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbfa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbfc:	e011      	b.n	800dc22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d012      	beq.n	800dc2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	3324      	adds	r3, #36	; 0x24
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f000 fdc8 	bl	800e7a0 <xTaskRemoveFromEventList>
 800dc10:	4603      	mov	r3, r0
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d001      	beq.n	800dc1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dc16:	f000 fea3 	bl	800e960 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dc1a:	7bfb      	ldrb	r3, [r7, #15]
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	dce9      	bgt.n	800dbfe <prvUnlockQueue+0x16>
 800dc2a:	e000      	b.n	800dc2e <prvUnlockQueue+0x46>
					break;
 800dc2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	22ff      	movs	r2, #255	; 0xff
 800dc32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc36:	f001 fafd 	bl	800f234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc3a:	f001 fac7 	bl	800f1cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc46:	e011      	b.n	800dc6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	691b      	ldr	r3, [r3, #16]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d012      	beq.n	800dc76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	3310      	adds	r3, #16
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 fda3 	bl	800e7a0 <xTaskRemoveFromEventList>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d001      	beq.n	800dc64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc60:	f000 fe7e 	bl	800e960 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc64:	7bbb      	ldrb	r3, [r7, #14]
 800dc66:	3b01      	subs	r3, #1
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	dce9      	bgt.n	800dc48 <prvUnlockQueue+0x60>
 800dc74:	e000      	b.n	800dc78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	22ff      	movs	r2, #255	; 0xff
 800dc7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc80:	f001 fad8 	bl	800f234 <vPortExitCritical>
}
 800dc84:	bf00      	nop
 800dc86:	3710      	adds	r7, #16
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc94:	f001 fa9a 	bl	800f1cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d102      	bne.n	800dca6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dca0:	2301      	movs	r3, #1
 800dca2:	60fb      	str	r3, [r7, #12]
 800dca4:	e001      	b.n	800dcaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dca6:	2300      	movs	r3, #0
 800dca8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcaa:	f001 fac3 	bl	800f234 <vPortExitCritical>

	return xReturn;
 800dcae:	68fb      	ldr	r3, [r7, #12]
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcc0:	f001 fa84 	bl	800f1cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d102      	bne.n	800dcd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	60fb      	str	r3, [r7, #12]
 800dcd4:	e001      	b.n	800dcda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcda:	f001 faab 	bl	800f234 <vPortExitCritical>

	return xReturn;
 800dcde:	68fb      	ldr	r3, [r7, #12]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b08e      	sub	sp, #56	; 0x38
 800dcec:	af04      	add	r7, sp, #16
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
 800dcf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dcf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d10c      	bne.n	800dd16 <xTaskCreateStatic+0x2e>
	__asm volatile
 800dcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd00:	b672      	cpsid	i
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	b662      	cpsie	i
 800dd10:	623b      	str	r3, [r7, #32]
}
 800dd12:	bf00      	nop
 800dd14:	e7fe      	b.n	800dd14 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800dd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d10c      	bne.n	800dd36 <xTaskCreateStatic+0x4e>
	__asm volatile
 800dd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd20:	b672      	cpsid	i
 800dd22:	f383 8811 	msr	BASEPRI, r3
 800dd26:	f3bf 8f6f 	isb	sy
 800dd2a:	f3bf 8f4f 	dsb	sy
 800dd2e:	b662      	cpsie	i
 800dd30:	61fb      	str	r3, [r7, #28]
}
 800dd32:	bf00      	nop
 800dd34:	e7fe      	b.n	800dd34 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dd36:	23b4      	movs	r3, #180	; 0xb4
 800dd38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	2bb4      	cmp	r3, #180	; 0xb4
 800dd3e:	d00c      	beq.n	800dd5a <xTaskCreateStatic+0x72>
	__asm volatile
 800dd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd44:	b672      	cpsid	i
 800dd46:	f383 8811 	msr	BASEPRI, r3
 800dd4a:	f3bf 8f6f 	isb	sy
 800dd4e:	f3bf 8f4f 	dsb	sy
 800dd52:	b662      	cpsie	i
 800dd54:	61bb      	str	r3, [r7, #24]
}
 800dd56:	bf00      	nop
 800dd58:	e7fe      	b.n	800dd58 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dd5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d01e      	beq.n	800dda0 <xTaskCreateStatic+0xb8>
 800dd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d01b      	beq.n	800dda0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd74:	2202      	movs	r2, #2
 800dd76:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	9303      	str	r3, [sp, #12]
 800dd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd80:	9302      	str	r3, [sp, #8]
 800dd82:	f107 0314 	add.w	r3, r7, #20
 800dd86:	9301      	str	r3, [sp, #4]
 800dd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8a:	9300      	str	r3, [sp, #0]
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	68b9      	ldr	r1, [r7, #8]
 800dd92:	68f8      	ldr	r0, [r7, #12]
 800dd94:	f000 f850 	bl	800de38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd9a:	f000 f8ed 	bl	800df78 <prvAddNewTaskToReadyList>
 800dd9e:	e001      	b.n	800dda4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800dda0:	2300      	movs	r3, #0
 800dda2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dda4:	697b      	ldr	r3, [r7, #20]
	}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3728      	adds	r7, #40	; 0x28
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}

0800ddae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b08c      	sub	sp, #48	; 0x30
 800ddb2:	af04      	add	r7, sp, #16
 800ddb4:	60f8      	str	r0, [r7, #12]
 800ddb6:	60b9      	str	r1, [r7, #8]
 800ddb8:	603b      	str	r3, [r7, #0]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ddbe:	88fb      	ldrh	r3, [r7, #6]
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f001 faea 	bl	800f39c <pvPortMalloc>
 800ddc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d00e      	beq.n	800ddee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ddd0:	20b4      	movs	r0, #180	; 0xb4
 800ddd2:	f001 fae3 	bl	800f39c <pvPortMalloc>
 800ddd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	631a      	str	r2, [r3, #48]	; 0x30
 800dde4:	e005      	b.n	800ddf2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dde6:	6978      	ldr	r0, [r7, #20]
 800dde8:	f001 fba2 	bl	800f530 <vPortFree>
 800ddec:	e001      	b.n	800ddf2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d017      	beq.n	800de28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800de00:	88fa      	ldrh	r2, [r7, #6]
 800de02:	2300      	movs	r3, #0
 800de04:	9303      	str	r3, [sp, #12]
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	9302      	str	r3, [sp, #8]
 800de0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de10:	9300      	str	r3, [sp, #0]
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	68b9      	ldr	r1, [r7, #8]
 800de16:	68f8      	ldr	r0, [r7, #12]
 800de18:	f000 f80e 	bl	800de38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de1c:	69f8      	ldr	r0, [r7, #28]
 800de1e:	f000 f8ab 	bl	800df78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800de22:	2301      	movs	r3, #1
 800de24:	61bb      	str	r3, [r7, #24]
 800de26:	e002      	b.n	800de2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800de28:	f04f 33ff 	mov.w	r3, #4294967295
 800de2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800de2e:	69bb      	ldr	r3, [r7, #24]
	}
 800de30:	4618      	mov	r0, r3
 800de32:	3720      	adds	r7, #32
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b088      	sub	sp, #32
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	60b9      	str	r1, [r7, #8]
 800de42:	607a      	str	r2, [r7, #4]
 800de44:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800de46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de4a:	6879      	ldr	r1, [r7, #4]
 800de4c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800de50:	440b      	add	r3, r1
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	4413      	add	r3, r2
 800de56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800de58:	69bb      	ldr	r3, [r7, #24]
 800de5a:	f023 0307 	bic.w	r3, r3, #7
 800de5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800de60:	69bb      	ldr	r3, [r7, #24]
 800de62:	f003 0307 	and.w	r3, r3, #7
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00c      	beq.n	800de84 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800de6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6e:	b672      	cpsid	i
 800de70:	f383 8811 	msr	BASEPRI, r3
 800de74:	f3bf 8f6f 	isb	sy
 800de78:	f3bf 8f4f 	dsb	sy
 800de7c:	b662      	cpsie	i
 800de7e:	617b      	str	r3, [r7, #20]
}
 800de80:	bf00      	nop
 800de82:	e7fe      	b.n	800de82 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d01f      	beq.n	800deca <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800de8a:	2300      	movs	r3, #0
 800de8c:	61fb      	str	r3, [r7, #28]
 800de8e:	e012      	b.n	800deb6 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800de90:	68ba      	ldr	r2, [r7, #8]
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	4413      	add	r3, r2
 800de96:	7819      	ldrb	r1, [r3, #0]
 800de98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	4413      	add	r3, r2
 800de9e:	3334      	adds	r3, #52	; 0x34
 800dea0:	460a      	mov	r2, r1
 800dea2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dea4:	68ba      	ldr	r2, [r7, #8]
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	4413      	add	r3, r2
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d006      	beq.n	800debe <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	3301      	adds	r3, #1
 800deb4:	61fb      	str	r3, [r7, #28]
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	2b0f      	cmp	r3, #15
 800deba:	d9e9      	bls.n	800de90 <prvInitialiseNewTask+0x58>
 800debc:	e000      	b.n	800dec0 <prvInitialiseNewTask+0x88>
			{
				break;
 800debe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec2:	2200      	movs	r2, #0
 800dec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dec8:	e003      	b.n	800ded2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800deca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800decc:	2200      	movs	r2, #0
 800dece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ded2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded4:	2b06      	cmp	r3, #6
 800ded6:	d901      	bls.n	800dedc <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ded8:	2306      	movs	r3, #6
 800deda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dee0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dee6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deea:	2200      	movs	r2, #0
 800deec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800deee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def0:	3304      	adds	r3, #4
 800def2:	4618      	mov	r0, r3
 800def4:	f7ff f8bb 	bl	800d06e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800def8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defa:	3318      	adds	r3, #24
 800defc:	4618      	mov	r0, r3
 800defe:	f7ff f8b6 	bl	800d06e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0a:	f1c3 0207 	rsb	r2, r3, #7
 800df0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800df18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1a:	2200      	movs	r2, #0
 800df1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df22:	2200      	movs	r2, #0
 800df24:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df2a:	334c      	adds	r3, #76	; 0x4c
 800df2c:	2260      	movs	r2, #96	; 0x60
 800df2e:	2100      	movs	r1, #0
 800df30:	4618      	mov	r0, r3
 800df32:	f001 fc4b 	bl	800f7cc <memset>
 800df36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df38:	4a0c      	ldr	r2, [pc, #48]	; (800df6c <prvInitialiseNewTask+0x134>)
 800df3a:	651a      	str	r2, [r3, #80]	; 0x50
 800df3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df3e:	4a0c      	ldr	r2, [pc, #48]	; (800df70 <prvInitialiseNewTask+0x138>)
 800df40:	655a      	str	r2, [r3, #84]	; 0x54
 800df42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df44:	4a0b      	ldr	r2, [pc, #44]	; (800df74 <prvInitialiseNewTask+0x13c>)
 800df46:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df48:	683a      	ldr	r2, [r7, #0]
 800df4a:	68f9      	ldr	r1, [r7, #12]
 800df4c:	69b8      	ldr	r0, [r7, #24]
 800df4e:	f001 f82f 	bl	800efb0 <pxPortInitialiseStack>
 800df52:	4602      	mov	r2, r0
 800df54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800df58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d002      	beq.n	800df64 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800df5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df64:	bf00      	nop
 800df66:	3720      	adds	r7, #32
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	08035cc0 	.word	0x08035cc0
 800df70:	08035ce0 	.word	0x08035ce0
 800df74:	08035ca0 	.word	0x08035ca0

0800df78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b082      	sub	sp, #8
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800df80:	f001 f924 	bl	800f1cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800df84:	4b2a      	ldr	r3, [pc, #168]	; (800e030 <prvAddNewTaskToReadyList+0xb8>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	3301      	adds	r3, #1
 800df8a:	4a29      	ldr	r2, [pc, #164]	; (800e030 <prvAddNewTaskToReadyList+0xb8>)
 800df8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800df8e:	4b29      	ldr	r3, [pc, #164]	; (800e034 <prvAddNewTaskToReadyList+0xbc>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d109      	bne.n	800dfaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800df96:	4a27      	ldr	r2, [pc, #156]	; (800e034 <prvAddNewTaskToReadyList+0xbc>)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800df9c:	4b24      	ldr	r3, [pc, #144]	; (800e030 <prvAddNewTaskToReadyList+0xb8>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d110      	bne.n	800dfc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dfa4:	f000 fd00 	bl	800e9a8 <prvInitialiseTaskLists>
 800dfa8:	e00d      	b.n	800dfc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dfaa:	4b23      	ldr	r3, [pc, #140]	; (800e038 <prvAddNewTaskToReadyList+0xc0>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d109      	bne.n	800dfc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dfb2:	4b20      	ldr	r3, [pc, #128]	; (800e034 <prvAddNewTaskToReadyList+0xbc>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d802      	bhi.n	800dfc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dfc0:	4a1c      	ldr	r2, [pc, #112]	; (800e034 <prvAddNewTaskToReadyList+0xbc>)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dfc6:	4b1d      	ldr	r3, [pc, #116]	; (800e03c <prvAddNewTaskToReadyList+0xc4>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	4a1b      	ldr	r2, [pc, #108]	; (800e03c <prvAddNewTaskToReadyList+0xc4>)
 800dfce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	409a      	lsls	r2, r3
 800dfd8:	4b19      	ldr	r3, [pc, #100]	; (800e040 <prvAddNewTaskToReadyList+0xc8>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4313      	orrs	r3, r2
 800dfde:	4a18      	ldr	r2, [pc, #96]	; (800e040 <prvAddNewTaskToReadyList+0xc8>)
 800dfe0:	6013      	str	r3, [r2, #0]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe6:	4613      	mov	r3, r2
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	4413      	add	r3, r2
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	4a15      	ldr	r2, [pc, #84]	; (800e044 <prvAddNewTaskToReadyList+0xcc>)
 800dff0:	441a      	add	r2, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	3304      	adds	r3, #4
 800dff6:	4619      	mov	r1, r3
 800dff8:	4610      	mov	r0, r2
 800dffa:	f7ff f845 	bl	800d088 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dffe:	f001 f919 	bl	800f234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e002:	4b0d      	ldr	r3, [pc, #52]	; (800e038 <prvAddNewTaskToReadyList+0xc0>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d00e      	beq.n	800e028 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e00a:	4b0a      	ldr	r3, [pc, #40]	; (800e034 <prvAddNewTaskToReadyList+0xbc>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e014:	429a      	cmp	r2, r3
 800e016:	d207      	bcs.n	800e028 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e018:	4b0b      	ldr	r3, [pc, #44]	; (800e048 <prvAddNewTaskToReadyList+0xd0>)
 800e01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e01e:	601a      	str	r2, [r3, #0]
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e028:	bf00      	nop
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}
 800e030:	200006d4 	.word	0x200006d4
 800e034:	200005d4 	.word	0x200005d4
 800e038:	200006e0 	.word	0x200006e0
 800e03c:	200006f0 	.word	0x200006f0
 800e040:	200006dc 	.word	0x200006dc
 800e044:	200005d8 	.word	0x200005d8
 800e048:	e000ed04 	.word	0xe000ed04

0800e04c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e054:	f001 f8ba 	bl	800f1cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d102      	bne.n	800e064 <vTaskDelete+0x18>
 800e05e:	4b3a      	ldr	r3, [pc, #232]	; (800e148 <vTaskDelete+0xfc>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	e000      	b.n	800e066 <vTaskDelete+0x1a>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	3304      	adds	r3, #4
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7ff f868 	bl	800d142 <uxListRemove>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d115      	bne.n	800e0a4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e07c:	4933      	ldr	r1, [pc, #204]	; (800e14c <vTaskDelete+0x100>)
 800e07e:	4613      	mov	r3, r2
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	4413      	add	r3, r2
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	440b      	add	r3, r1
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10a      	bne.n	800e0a4 <vTaskDelete+0x58>
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e092:	2201      	movs	r2, #1
 800e094:	fa02 f303 	lsl.w	r3, r2, r3
 800e098:	43da      	mvns	r2, r3
 800e09a:	4b2d      	ldr	r3, [pc, #180]	; (800e150 <vTaskDelete+0x104>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4013      	ands	r3, r2
 800e0a0:	4a2b      	ldr	r2, [pc, #172]	; (800e150 <vTaskDelete+0x104>)
 800e0a2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d004      	beq.n	800e0b6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	3318      	adds	r3, #24
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7ff f846 	bl	800d142 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e0b6:	4b27      	ldr	r3, [pc, #156]	; (800e154 <vTaskDelete+0x108>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	4a25      	ldr	r2, [pc, #148]	; (800e154 <vTaskDelete+0x108>)
 800e0be:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e0c0:	4b21      	ldr	r3, [pc, #132]	; (800e148 <vTaskDelete+0xfc>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d10b      	bne.n	800e0e2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	3304      	adds	r3, #4
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	4821      	ldr	r0, [pc, #132]	; (800e158 <vTaskDelete+0x10c>)
 800e0d2:	f7fe ffd9 	bl	800d088 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e0d6:	4b21      	ldr	r3, [pc, #132]	; (800e15c <vTaskDelete+0x110>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	3301      	adds	r3, #1
 800e0dc:	4a1f      	ldr	r2, [pc, #124]	; (800e15c <vTaskDelete+0x110>)
 800e0de:	6013      	str	r3, [r2, #0]
 800e0e0:	e009      	b.n	800e0f6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e0e2:	4b1f      	ldr	r3, [pc, #124]	; (800e160 <vTaskDelete+0x114>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	4a1d      	ldr	r2, [pc, #116]	; (800e160 <vTaskDelete+0x114>)
 800e0ea:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f000 fcc9 	bl	800ea84 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e0f2:	f000 fcfd 	bl	800eaf0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800e0f6:	f001 f89d 	bl	800f234 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e0fa:	4b1a      	ldr	r3, [pc, #104]	; (800e164 <vTaskDelete+0x118>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d01d      	beq.n	800e13e <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800e102:	4b11      	ldr	r3, [pc, #68]	; (800e148 <vTaskDelete+0xfc>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	68fa      	ldr	r2, [r7, #12]
 800e108:	429a      	cmp	r2, r3
 800e10a:	d118      	bne.n	800e13e <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e10c:	4b16      	ldr	r3, [pc, #88]	; (800e168 <vTaskDelete+0x11c>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00c      	beq.n	800e12e <vTaskDelete+0xe2>
	__asm volatile
 800e114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e118:	b672      	cpsid	i
 800e11a:	f383 8811 	msr	BASEPRI, r3
 800e11e:	f3bf 8f6f 	isb	sy
 800e122:	f3bf 8f4f 	dsb	sy
 800e126:	b662      	cpsie	i
 800e128:	60bb      	str	r3, [r7, #8]
}
 800e12a:	bf00      	nop
 800e12c:	e7fe      	b.n	800e12c <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800e12e:	4b0f      	ldr	r3, [pc, #60]	; (800e16c <vTaskDelete+0x120>)
 800e130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e134:	601a      	str	r2, [r3, #0]
 800e136:	f3bf 8f4f 	dsb	sy
 800e13a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e13e:	bf00      	nop
 800e140:	3710      	adds	r7, #16
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	200005d4 	.word	0x200005d4
 800e14c:	200005d8 	.word	0x200005d8
 800e150:	200006dc 	.word	0x200006dc
 800e154:	200006f0 	.word	0x200006f0
 800e158:	200006a8 	.word	0x200006a8
 800e15c:	200006bc 	.word	0x200006bc
 800e160:	200006d4 	.word	0x200006d4
 800e164:	200006e0 	.word	0x200006e0
 800e168:	200006fc 	.word	0x200006fc
 800e16c:	e000ed04 	.word	0xe000ed04

0800e170 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e170:	b580      	push	{r7, lr}
 800e172:	b08a      	sub	sp, #40	; 0x28
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e17a:	2300      	movs	r3, #0
 800e17c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10c      	bne.n	800e19e <vTaskDelayUntil+0x2e>
	__asm volatile
 800e184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e188:	b672      	cpsid	i
 800e18a:	f383 8811 	msr	BASEPRI, r3
 800e18e:	f3bf 8f6f 	isb	sy
 800e192:	f3bf 8f4f 	dsb	sy
 800e196:	b662      	cpsie	i
 800e198:	617b      	str	r3, [r7, #20]
}
 800e19a:	bf00      	nop
 800e19c:	e7fe      	b.n	800e19c <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d10c      	bne.n	800e1be <vTaskDelayUntil+0x4e>
	__asm volatile
 800e1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a8:	b672      	cpsid	i
 800e1aa:	f383 8811 	msr	BASEPRI, r3
 800e1ae:	f3bf 8f6f 	isb	sy
 800e1b2:	f3bf 8f4f 	dsb	sy
 800e1b6:	b662      	cpsie	i
 800e1b8:	613b      	str	r3, [r7, #16]
}
 800e1ba:	bf00      	nop
 800e1bc:	e7fe      	b.n	800e1bc <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800e1be:	4b2b      	ldr	r3, [pc, #172]	; (800e26c <vTaskDelayUntil+0xfc>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d00c      	beq.n	800e1e0 <vTaskDelayUntil+0x70>
	__asm volatile
 800e1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ca:	b672      	cpsid	i
 800e1cc:	f383 8811 	msr	BASEPRI, r3
 800e1d0:	f3bf 8f6f 	isb	sy
 800e1d4:	f3bf 8f4f 	dsb	sy
 800e1d8:	b662      	cpsie	i
 800e1da:	60fb      	str	r3, [r7, #12]
}
 800e1dc:	bf00      	nop
 800e1de:	e7fe      	b.n	800e1de <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800e1e0:	f000 f8ee 	bl	800e3c0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e1e4:	4b22      	ldr	r3, [pc, #136]	; (800e270 <vTaskDelayUntil+0x100>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	683a      	ldr	r2, [r7, #0]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	6a3a      	ldr	r2, [r7, #32]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d20b      	bcs.n	800e216 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	69fa      	ldr	r2, [r7, #28]
 800e204:	429a      	cmp	r2, r3
 800e206:	d211      	bcs.n	800e22c <vTaskDelayUntil+0xbc>
 800e208:	69fa      	ldr	r2, [r7, #28]
 800e20a:	6a3b      	ldr	r3, [r7, #32]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d90d      	bls.n	800e22c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800e210:	2301      	movs	r3, #1
 800e212:	627b      	str	r3, [r7, #36]	; 0x24
 800e214:	e00a      	b.n	800e22c <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	69fa      	ldr	r2, [r7, #28]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d303      	bcc.n	800e228 <vTaskDelayUntil+0xb8>
 800e220:	69fa      	ldr	r2, [r7, #28]
 800e222:	6a3b      	ldr	r3, [r7, #32]
 800e224:	429a      	cmp	r2, r3
 800e226:	d901      	bls.n	800e22c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800e228:	2301      	movs	r3, #1
 800e22a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	69fa      	ldr	r2, [r7, #28]
 800e230:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e234:	2b00      	cmp	r3, #0
 800e236:	d006      	beq.n	800e246 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e238:	69fa      	ldr	r2, [r7, #28]
 800e23a:	6a3b      	ldr	r3, [r7, #32]
 800e23c:	1ad3      	subs	r3, r2, r3
 800e23e:	2100      	movs	r1, #0
 800e240:	4618      	mov	r0, r3
 800e242:	f000 fe4f 	bl	800eee4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e246:	f000 f8c9 	bl	800e3dc <xTaskResumeAll>
 800e24a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e24c:	69bb      	ldr	r3, [r7, #24]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d107      	bne.n	800e262 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800e252:	4b08      	ldr	r3, [pc, #32]	; (800e274 <vTaskDelayUntil+0x104>)
 800e254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e258:	601a      	str	r2, [r3, #0]
 800e25a:	f3bf 8f4f 	dsb	sy
 800e25e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e262:	bf00      	nop
 800e264:	3728      	adds	r7, #40	; 0x28
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	200006fc 	.word	0x200006fc
 800e270:	200006d8 	.word	0x200006d8
 800e274:	e000ed04 	.word	0xe000ed04

0800e278 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e280:	2300      	movs	r3, #0
 800e282:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d019      	beq.n	800e2be <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e28a:	4b14      	ldr	r3, [pc, #80]	; (800e2dc <vTaskDelay+0x64>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d00c      	beq.n	800e2ac <vTaskDelay+0x34>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e296:	b672      	cpsid	i
 800e298:	f383 8811 	msr	BASEPRI, r3
 800e29c:	f3bf 8f6f 	isb	sy
 800e2a0:	f3bf 8f4f 	dsb	sy
 800e2a4:	b662      	cpsie	i
 800e2a6:	60bb      	str	r3, [r7, #8]
}
 800e2a8:	bf00      	nop
 800e2aa:	e7fe      	b.n	800e2aa <vTaskDelay+0x32>
			vTaskSuspendAll();
 800e2ac:	f000 f888 	bl	800e3c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 fe16 	bl	800eee4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e2b8:	f000 f890 	bl	800e3dc <xTaskResumeAll>
 800e2bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d107      	bne.n	800e2d4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800e2c4:	4b06      	ldr	r3, [pc, #24]	; (800e2e0 <vTaskDelay+0x68>)
 800e2c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2ca:	601a      	str	r2, [r3, #0]
 800e2cc:	f3bf 8f4f 	dsb	sy
 800e2d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2d4:	bf00      	nop
 800e2d6:	3710      	adds	r7, #16
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	200006fc 	.word	0x200006fc
 800e2e0:	e000ed04 	.word	0xe000ed04

0800e2e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b08a      	sub	sp, #40	; 0x28
 800e2e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e2f2:	463a      	mov	r2, r7
 800e2f4:	1d39      	adds	r1, r7, #4
 800e2f6:	f107 0308 	add.w	r3, r7, #8
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f7f2 f904 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e300:	6839      	ldr	r1, [r7, #0]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	68ba      	ldr	r2, [r7, #8]
 800e306:	9202      	str	r2, [sp, #8]
 800e308:	9301      	str	r3, [sp, #4]
 800e30a:	2300      	movs	r3, #0
 800e30c:	9300      	str	r3, [sp, #0]
 800e30e:	2300      	movs	r3, #0
 800e310:	460a      	mov	r2, r1
 800e312:	4923      	ldr	r1, [pc, #140]	; (800e3a0 <vTaskStartScheduler+0xbc>)
 800e314:	4823      	ldr	r0, [pc, #140]	; (800e3a4 <vTaskStartScheduler+0xc0>)
 800e316:	f7ff fce7 	bl	800dce8 <xTaskCreateStatic>
 800e31a:	4603      	mov	r3, r0
 800e31c:	4a22      	ldr	r2, [pc, #136]	; (800e3a8 <vTaskStartScheduler+0xc4>)
 800e31e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e320:	4b21      	ldr	r3, [pc, #132]	; (800e3a8 <vTaskStartScheduler+0xc4>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d002      	beq.n	800e32e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e328:	2301      	movs	r3, #1
 800e32a:	617b      	str	r3, [r7, #20]
 800e32c:	e001      	b.n	800e332 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e32e:	2300      	movs	r3, #0
 800e330:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	2b01      	cmp	r3, #1
 800e336:	d11d      	bne.n	800e374 <vTaskStartScheduler+0x90>
	__asm volatile
 800e338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33c:	b672      	cpsid	i
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	b662      	cpsie	i
 800e34c:	613b      	str	r3, [r7, #16]
}
 800e34e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e350:	4b16      	ldr	r3, [pc, #88]	; (800e3ac <vTaskStartScheduler+0xc8>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	334c      	adds	r3, #76	; 0x4c
 800e356:	4a16      	ldr	r2, [pc, #88]	; (800e3b0 <vTaskStartScheduler+0xcc>)
 800e358:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e35a:	4b16      	ldr	r3, [pc, #88]	; (800e3b4 <vTaskStartScheduler+0xd0>)
 800e35c:	f04f 32ff 	mov.w	r2, #4294967295
 800e360:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e362:	4b15      	ldr	r3, [pc, #84]	; (800e3b8 <vTaskStartScheduler+0xd4>)
 800e364:	2201      	movs	r2, #1
 800e366:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e368:	4b14      	ldr	r3, [pc, #80]	; (800e3bc <vTaskStartScheduler+0xd8>)
 800e36a:	2200      	movs	r2, #0
 800e36c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e36e:	f000 feaf 	bl	800f0d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e372:	e010      	b.n	800e396 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e37a:	d10c      	bne.n	800e396 <vTaskStartScheduler+0xb2>
	__asm volatile
 800e37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e380:	b672      	cpsid	i
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	b662      	cpsie	i
 800e390:	60fb      	str	r3, [r7, #12]
}
 800e392:	bf00      	nop
 800e394:	e7fe      	b.n	800e394 <vTaskStartScheduler+0xb0>
}
 800e396:	bf00      	nop
 800e398:	3718      	adds	r7, #24
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	0800fb04 	.word	0x0800fb04
 800e3a4:	0800e979 	.word	0x0800e979
 800e3a8:	200006f8 	.word	0x200006f8
 800e3ac:	200005d4 	.word	0x200005d4
 800e3b0:	20000050 	.word	0x20000050
 800e3b4:	200006f4 	.word	0x200006f4
 800e3b8:	200006e0 	.word	0x200006e0
 800e3bc:	200006d8 	.word	0x200006d8

0800e3c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e3c4:	4b04      	ldr	r3, [pc, #16]	; (800e3d8 <vTaskSuspendAll+0x18>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	4a03      	ldr	r2, [pc, #12]	; (800e3d8 <vTaskSuspendAll+0x18>)
 800e3cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e3ce:	bf00      	nop
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr
 800e3d8:	200006fc 	.word	0x200006fc

0800e3dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e3ea:	4b42      	ldr	r3, [pc, #264]	; (800e4f4 <xTaskResumeAll+0x118>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d10c      	bne.n	800e40c <xTaskResumeAll+0x30>
	__asm volatile
 800e3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f6:	b672      	cpsid	i
 800e3f8:	f383 8811 	msr	BASEPRI, r3
 800e3fc:	f3bf 8f6f 	isb	sy
 800e400:	f3bf 8f4f 	dsb	sy
 800e404:	b662      	cpsie	i
 800e406:	603b      	str	r3, [r7, #0]
}
 800e408:	bf00      	nop
 800e40a:	e7fe      	b.n	800e40a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e40c:	f000 fede 	bl	800f1cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e410:	4b38      	ldr	r3, [pc, #224]	; (800e4f4 <xTaskResumeAll+0x118>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	3b01      	subs	r3, #1
 800e416:	4a37      	ldr	r2, [pc, #220]	; (800e4f4 <xTaskResumeAll+0x118>)
 800e418:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e41a:	4b36      	ldr	r3, [pc, #216]	; (800e4f4 <xTaskResumeAll+0x118>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d161      	bne.n	800e4e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e422:	4b35      	ldr	r3, [pc, #212]	; (800e4f8 <xTaskResumeAll+0x11c>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d05d      	beq.n	800e4e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e42a:	e02e      	b.n	800e48a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e42c:	4b33      	ldr	r3, [pc, #204]	; (800e4fc <xTaskResumeAll+0x120>)
 800e42e:	68db      	ldr	r3, [r3, #12]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	3318      	adds	r3, #24
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fe fe82 	bl	800d142 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	3304      	adds	r3, #4
 800e442:	4618      	mov	r0, r3
 800e444:	f7fe fe7d 	bl	800d142 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e44c:	2201      	movs	r2, #1
 800e44e:	409a      	lsls	r2, r3
 800e450:	4b2b      	ldr	r3, [pc, #172]	; (800e500 <xTaskResumeAll+0x124>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4313      	orrs	r3, r2
 800e456:	4a2a      	ldr	r2, [pc, #168]	; (800e500 <xTaskResumeAll+0x124>)
 800e458:	6013      	str	r3, [r2, #0]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e45e:	4613      	mov	r3, r2
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	4413      	add	r3, r2
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	4a27      	ldr	r2, [pc, #156]	; (800e504 <xTaskResumeAll+0x128>)
 800e468:	441a      	add	r2, r3
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	3304      	adds	r3, #4
 800e46e:	4619      	mov	r1, r3
 800e470:	4610      	mov	r0, r2
 800e472:	f7fe fe09 	bl	800d088 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e47a:	4b23      	ldr	r3, [pc, #140]	; (800e508 <xTaskResumeAll+0x12c>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e480:	429a      	cmp	r2, r3
 800e482:	d302      	bcc.n	800e48a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e484:	4b21      	ldr	r3, [pc, #132]	; (800e50c <xTaskResumeAll+0x130>)
 800e486:	2201      	movs	r2, #1
 800e488:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e48a:	4b1c      	ldr	r3, [pc, #112]	; (800e4fc <xTaskResumeAll+0x120>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d1cc      	bne.n	800e42c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d001      	beq.n	800e49c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e498:	f000 fb2a 	bl	800eaf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e49c:	4b1c      	ldr	r3, [pc, #112]	; (800e510 <xTaskResumeAll+0x134>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d010      	beq.n	800e4ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e4a8:	f000 f836 	bl	800e518 <xTaskIncrementTick>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d002      	beq.n	800e4b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e4b2:	4b16      	ldr	r3, [pc, #88]	; (800e50c <xTaskResumeAll+0x130>)
 800e4b4:	2201      	movs	r2, #1
 800e4b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1f1      	bne.n	800e4a8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800e4c4:	4b12      	ldr	r3, [pc, #72]	; (800e510 <xTaskResumeAll+0x134>)
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e4ca:	4b10      	ldr	r3, [pc, #64]	; (800e50c <xTaskResumeAll+0x130>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d009      	beq.n	800e4e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e4d6:	4b0f      	ldr	r3, [pc, #60]	; (800e514 <xTaskResumeAll+0x138>)
 800e4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4dc:	601a      	str	r2, [r3, #0]
 800e4de:	f3bf 8f4f 	dsb	sy
 800e4e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4e6:	f000 fea5 	bl	800f234 <vPortExitCritical>

	return xAlreadyYielded;
 800e4ea:	68bb      	ldr	r3, [r7, #8]
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3710      	adds	r7, #16
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	200006fc 	.word	0x200006fc
 800e4f8:	200006d4 	.word	0x200006d4
 800e4fc:	20000694 	.word	0x20000694
 800e500:	200006dc 	.word	0x200006dc
 800e504:	200005d8 	.word	0x200005d8
 800e508:	200005d4 	.word	0x200005d4
 800e50c:	200006e8 	.word	0x200006e8
 800e510:	200006e4 	.word	0x200006e4
 800e514:	e000ed04 	.word	0xe000ed04

0800e518 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b086      	sub	sp, #24
 800e51c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e51e:	2300      	movs	r3, #0
 800e520:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e522:	4b4f      	ldr	r3, [pc, #316]	; (800e660 <xTaskIncrementTick+0x148>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2b00      	cmp	r3, #0
 800e528:	f040 808a 	bne.w	800e640 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e52c:	4b4d      	ldr	r3, [pc, #308]	; (800e664 <xTaskIncrementTick+0x14c>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	3301      	adds	r3, #1
 800e532:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e534:	4a4b      	ldr	r2, [pc, #300]	; (800e664 <xTaskIncrementTick+0x14c>)
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d122      	bne.n	800e586 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800e540:	4b49      	ldr	r3, [pc, #292]	; (800e668 <xTaskIncrementTick+0x150>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00c      	beq.n	800e564 <xTaskIncrementTick+0x4c>
	__asm volatile
 800e54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e54e:	b672      	cpsid	i
 800e550:	f383 8811 	msr	BASEPRI, r3
 800e554:	f3bf 8f6f 	isb	sy
 800e558:	f3bf 8f4f 	dsb	sy
 800e55c:	b662      	cpsie	i
 800e55e:	603b      	str	r3, [r7, #0]
}
 800e560:	bf00      	nop
 800e562:	e7fe      	b.n	800e562 <xTaskIncrementTick+0x4a>
 800e564:	4b40      	ldr	r3, [pc, #256]	; (800e668 <xTaskIncrementTick+0x150>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	60fb      	str	r3, [r7, #12]
 800e56a:	4b40      	ldr	r3, [pc, #256]	; (800e66c <xTaskIncrementTick+0x154>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	4a3e      	ldr	r2, [pc, #248]	; (800e668 <xTaskIncrementTick+0x150>)
 800e570:	6013      	str	r3, [r2, #0]
 800e572:	4a3e      	ldr	r2, [pc, #248]	; (800e66c <xTaskIncrementTick+0x154>)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6013      	str	r3, [r2, #0]
 800e578:	4b3d      	ldr	r3, [pc, #244]	; (800e670 <xTaskIncrementTick+0x158>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	3301      	adds	r3, #1
 800e57e:	4a3c      	ldr	r2, [pc, #240]	; (800e670 <xTaskIncrementTick+0x158>)
 800e580:	6013      	str	r3, [r2, #0]
 800e582:	f000 fab5 	bl	800eaf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e586:	4b3b      	ldr	r3, [pc, #236]	; (800e674 <xTaskIncrementTick+0x15c>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	693a      	ldr	r2, [r7, #16]
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d348      	bcc.n	800e622 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e590:	4b35      	ldr	r3, [pc, #212]	; (800e668 <xTaskIncrementTick+0x150>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d104      	bne.n	800e5a4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e59a:	4b36      	ldr	r3, [pc, #216]	; (800e674 <xTaskIncrementTick+0x15c>)
 800e59c:	f04f 32ff 	mov.w	r2, #4294967295
 800e5a0:	601a      	str	r2, [r3, #0]
					break;
 800e5a2:	e03e      	b.n	800e622 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5a4:	4b30      	ldr	r3, [pc, #192]	; (800e668 <xTaskIncrementTick+0x150>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	68db      	ldr	r3, [r3, #12]
 800e5ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e5b4:	693a      	ldr	r2, [r7, #16]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d203      	bcs.n	800e5c4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e5bc:	4a2d      	ldr	r2, [pc, #180]	; (800e674 <xTaskIncrementTick+0x15c>)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5c2:	e02e      	b.n	800e622 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	3304      	adds	r3, #4
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7fe fdba 	bl	800d142 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d004      	beq.n	800e5e0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	3318      	adds	r3, #24
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fe fdb1 	bl	800d142 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	409a      	lsls	r2, r3
 800e5e8:	4b23      	ldr	r3, [pc, #140]	; (800e678 <xTaskIncrementTick+0x160>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	4a22      	ldr	r2, [pc, #136]	; (800e678 <xTaskIncrementTick+0x160>)
 800e5f0:	6013      	str	r3, [r2, #0]
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	009b      	lsls	r3, r3, #2
 800e5fa:	4413      	add	r3, r2
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	4a1f      	ldr	r2, [pc, #124]	; (800e67c <xTaskIncrementTick+0x164>)
 800e600:	441a      	add	r2, r3
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	3304      	adds	r3, #4
 800e606:	4619      	mov	r1, r3
 800e608:	4610      	mov	r0, r2
 800e60a:	f7fe fd3d 	bl	800d088 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e612:	4b1b      	ldr	r3, [pc, #108]	; (800e680 <xTaskIncrementTick+0x168>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e618:	429a      	cmp	r2, r3
 800e61a:	d3b9      	bcc.n	800e590 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e61c:	2301      	movs	r3, #1
 800e61e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e620:	e7b6      	b.n	800e590 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e622:	4b17      	ldr	r3, [pc, #92]	; (800e680 <xTaskIncrementTick+0x168>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e628:	4914      	ldr	r1, [pc, #80]	; (800e67c <xTaskIncrementTick+0x164>)
 800e62a:	4613      	mov	r3, r2
 800e62c:	009b      	lsls	r3, r3, #2
 800e62e:	4413      	add	r3, r2
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	440b      	add	r3, r1
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2b01      	cmp	r3, #1
 800e638:	d907      	bls.n	800e64a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e63a:	2301      	movs	r3, #1
 800e63c:	617b      	str	r3, [r7, #20]
 800e63e:	e004      	b.n	800e64a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e640:	4b10      	ldr	r3, [pc, #64]	; (800e684 <xTaskIncrementTick+0x16c>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	3301      	adds	r3, #1
 800e646:	4a0f      	ldr	r2, [pc, #60]	; (800e684 <xTaskIncrementTick+0x16c>)
 800e648:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e64a:	4b0f      	ldr	r3, [pc, #60]	; (800e688 <xTaskIncrementTick+0x170>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d001      	beq.n	800e656 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e652:	2301      	movs	r3, #1
 800e654:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e656:	697b      	ldr	r3, [r7, #20]
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3718      	adds	r7, #24
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	200006fc 	.word	0x200006fc
 800e664:	200006d8 	.word	0x200006d8
 800e668:	2000068c 	.word	0x2000068c
 800e66c:	20000690 	.word	0x20000690
 800e670:	200006ec 	.word	0x200006ec
 800e674:	200006f4 	.word	0x200006f4
 800e678:	200006dc 	.word	0x200006dc
 800e67c:	200005d8 	.word	0x200005d8
 800e680:	200005d4 	.word	0x200005d4
 800e684:	200006e4 	.word	0x200006e4
 800e688:	200006e8 	.word	0x200006e8

0800e68c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e68c:	b480      	push	{r7}
 800e68e:	b087      	sub	sp, #28
 800e690:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e692:	4b2a      	ldr	r3, [pc, #168]	; (800e73c <vTaskSwitchContext+0xb0>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d003      	beq.n	800e6a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e69a:	4b29      	ldr	r3, [pc, #164]	; (800e740 <vTaskSwitchContext+0xb4>)
 800e69c:	2201      	movs	r2, #1
 800e69e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e6a0:	e046      	b.n	800e730 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e6a2:	4b27      	ldr	r3, [pc, #156]	; (800e740 <vTaskSwitchContext+0xb4>)
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6a8:	4b26      	ldr	r3, [pc, #152]	; (800e744 <vTaskSwitchContext+0xb8>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	fab3 f383 	clz	r3, r3
 800e6b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e6b6:	7afb      	ldrb	r3, [r7, #11]
 800e6b8:	f1c3 031f 	rsb	r3, r3, #31
 800e6bc:	617b      	str	r3, [r7, #20]
 800e6be:	4922      	ldr	r1, [pc, #136]	; (800e748 <vTaskSwitchContext+0xbc>)
 800e6c0:	697a      	ldr	r2, [r7, #20]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	009b      	lsls	r3, r3, #2
 800e6c6:	4413      	add	r3, r2
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	440b      	add	r3, r1
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d10c      	bne.n	800e6ec <vTaskSwitchContext+0x60>
	__asm volatile
 800e6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d6:	b672      	cpsid	i
 800e6d8:	f383 8811 	msr	BASEPRI, r3
 800e6dc:	f3bf 8f6f 	isb	sy
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	b662      	cpsie	i
 800e6e6:	607b      	str	r3, [r7, #4]
}
 800e6e8:	bf00      	nop
 800e6ea:	e7fe      	b.n	800e6ea <vTaskSwitchContext+0x5e>
 800e6ec:	697a      	ldr	r2, [r7, #20]
 800e6ee:	4613      	mov	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4413      	add	r3, r2
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	4a14      	ldr	r2, [pc, #80]	; (800e748 <vTaskSwitchContext+0xbc>)
 800e6f8:	4413      	add	r3, r2
 800e6fa:	613b      	str	r3, [r7, #16]
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	685a      	ldr	r2, [r3, #4]
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	605a      	str	r2, [r3, #4]
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	685a      	ldr	r2, [r3, #4]
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	3308      	adds	r3, #8
 800e70e:	429a      	cmp	r2, r3
 800e710:	d104      	bne.n	800e71c <vTaskSwitchContext+0x90>
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	685a      	ldr	r2, [r3, #4]
 800e718:	693b      	ldr	r3, [r7, #16]
 800e71a:	605a      	str	r2, [r3, #4]
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	4a0a      	ldr	r2, [pc, #40]	; (800e74c <vTaskSwitchContext+0xc0>)
 800e724:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e726:	4b09      	ldr	r3, [pc, #36]	; (800e74c <vTaskSwitchContext+0xc0>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	334c      	adds	r3, #76	; 0x4c
 800e72c:	4a08      	ldr	r2, [pc, #32]	; (800e750 <vTaskSwitchContext+0xc4>)
 800e72e:	6013      	str	r3, [r2, #0]
}
 800e730:	bf00      	nop
 800e732:	371c      	adds	r7, #28
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr
 800e73c:	200006fc 	.word	0x200006fc
 800e740:	200006e8 	.word	0x200006e8
 800e744:	200006dc 	.word	0x200006dc
 800e748:	200005d8 	.word	0x200005d8
 800e74c:	200005d4 	.word	0x200005d4
 800e750:	20000050 	.word	0x20000050

0800e754 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d10c      	bne.n	800e77e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e768:	b672      	cpsid	i
 800e76a:	f383 8811 	msr	BASEPRI, r3
 800e76e:	f3bf 8f6f 	isb	sy
 800e772:	f3bf 8f4f 	dsb	sy
 800e776:	b662      	cpsie	i
 800e778:	60fb      	str	r3, [r7, #12]
}
 800e77a:	bf00      	nop
 800e77c:	e7fe      	b.n	800e77c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e77e:	4b07      	ldr	r3, [pc, #28]	; (800e79c <vTaskPlaceOnEventList+0x48>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	3318      	adds	r3, #24
 800e784:	4619      	mov	r1, r3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7fe fca2 	bl	800d0d0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e78c:	2101      	movs	r1, #1
 800e78e:	6838      	ldr	r0, [r7, #0]
 800e790:	f000 fba8 	bl	800eee4 <prvAddCurrentTaskToDelayedList>
}
 800e794:	bf00      	nop
 800e796:	3710      	adds	r7, #16
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	200005d4 	.word	0x200005d4

0800e7a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b086      	sub	sp, #24
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d10c      	bne.n	800e7d0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ba:	b672      	cpsid	i
 800e7bc:	f383 8811 	msr	BASEPRI, r3
 800e7c0:	f3bf 8f6f 	isb	sy
 800e7c4:	f3bf 8f4f 	dsb	sy
 800e7c8:	b662      	cpsie	i
 800e7ca:	60fb      	str	r3, [r7, #12]
}
 800e7cc:	bf00      	nop
 800e7ce:	e7fe      	b.n	800e7ce <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	3318      	adds	r3, #24
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fe fcb4 	bl	800d142 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7da:	4b1d      	ldr	r3, [pc, #116]	; (800e850 <xTaskRemoveFromEventList+0xb0>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d11c      	bne.n	800e81c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	3304      	adds	r3, #4
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7fe fcab 	bl	800d142 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	409a      	lsls	r2, r3
 800e7f4:	4b17      	ldr	r3, [pc, #92]	; (800e854 <xTaskRemoveFromEventList+0xb4>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	4a16      	ldr	r2, [pc, #88]	; (800e854 <xTaskRemoveFromEventList+0xb4>)
 800e7fc:	6013      	str	r3, [r2, #0]
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e802:	4613      	mov	r3, r2
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	4413      	add	r3, r2
 800e808:	009b      	lsls	r3, r3, #2
 800e80a:	4a13      	ldr	r2, [pc, #76]	; (800e858 <xTaskRemoveFromEventList+0xb8>)
 800e80c:	441a      	add	r2, r3
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	3304      	adds	r3, #4
 800e812:	4619      	mov	r1, r3
 800e814:	4610      	mov	r0, r2
 800e816:	f7fe fc37 	bl	800d088 <vListInsertEnd>
 800e81a:	e005      	b.n	800e828 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	3318      	adds	r3, #24
 800e820:	4619      	mov	r1, r3
 800e822:	480e      	ldr	r0, [pc, #56]	; (800e85c <xTaskRemoveFromEventList+0xbc>)
 800e824:	f7fe fc30 	bl	800d088 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e82c:	4b0c      	ldr	r3, [pc, #48]	; (800e860 <xTaskRemoveFromEventList+0xc0>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e832:	429a      	cmp	r2, r3
 800e834:	d905      	bls.n	800e842 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e836:	2301      	movs	r3, #1
 800e838:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e83a:	4b0a      	ldr	r3, [pc, #40]	; (800e864 <xTaskRemoveFromEventList+0xc4>)
 800e83c:	2201      	movs	r2, #1
 800e83e:	601a      	str	r2, [r3, #0]
 800e840:	e001      	b.n	800e846 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e842:	2300      	movs	r3, #0
 800e844:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e846:	697b      	ldr	r3, [r7, #20]
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3718      	adds	r7, #24
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	200006fc 	.word	0x200006fc
 800e854:	200006dc 	.word	0x200006dc
 800e858:	200005d8 	.word	0x200005d8
 800e85c:	20000694 	.word	0x20000694
 800e860:	200005d4 	.word	0x200005d4
 800e864:	200006e8 	.word	0x200006e8

0800e868 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e868:	b480      	push	{r7}
 800e86a:	b083      	sub	sp, #12
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e870:	4b06      	ldr	r3, [pc, #24]	; (800e88c <vTaskInternalSetTimeOutState+0x24>)
 800e872:	681a      	ldr	r2, [r3, #0]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e878:	4b05      	ldr	r3, [pc, #20]	; (800e890 <vTaskInternalSetTimeOutState+0x28>)
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	605a      	str	r2, [r3, #4]
}
 800e880:	bf00      	nop
 800e882:	370c      	adds	r7, #12
 800e884:	46bd      	mov	sp, r7
 800e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88a:	4770      	bx	lr
 800e88c:	200006ec 	.word	0x200006ec
 800e890:	200006d8 	.word	0x200006d8

0800e894 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b088      	sub	sp, #32
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d10c      	bne.n	800e8be <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a8:	b672      	cpsid	i
 800e8aa:	f383 8811 	msr	BASEPRI, r3
 800e8ae:	f3bf 8f6f 	isb	sy
 800e8b2:	f3bf 8f4f 	dsb	sy
 800e8b6:	b662      	cpsie	i
 800e8b8:	613b      	str	r3, [r7, #16]
}
 800e8ba:	bf00      	nop
 800e8bc:	e7fe      	b.n	800e8bc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d10c      	bne.n	800e8de <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8c8:	b672      	cpsid	i
 800e8ca:	f383 8811 	msr	BASEPRI, r3
 800e8ce:	f3bf 8f6f 	isb	sy
 800e8d2:	f3bf 8f4f 	dsb	sy
 800e8d6:	b662      	cpsie	i
 800e8d8:	60fb      	str	r3, [r7, #12]
}
 800e8da:	bf00      	nop
 800e8dc:	e7fe      	b.n	800e8dc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e8de:	f000 fc75 	bl	800f1cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e8e2:	4b1d      	ldr	r3, [pc, #116]	; (800e958 <xTaskCheckForTimeOut+0xc4>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	69ba      	ldr	r2, [r7, #24]
 800e8ee:	1ad3      	subs	r3, r2, r3
 800e8f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8fa:	d102      	bne.n	800e902 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	61fb      	str	r3, [r7, #28]
 800e900:	e023      	b.n	800e94a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	4b15      	ldr	r3, [pc, #84]	; (800e95c <xTaskCheckForTimeOut+0xc8>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d007      	beq.n	800e91e <xTaskCheckForTimeOut+0x8a>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	69ba      	ldr	r2, [r7, #24]
 800e914:	429a      	cmp	r2, r3
 800e916:	d302      	bcc.n	800e91e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e918:	2301      	movs	r3, #1
 800e91a:	61fb      	str	r3, [r7, #28]
 800e91c:	e015      	b.n	800e94a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	697a      	ldr	r2, [r7, #20]
 800e924:	429a      	cmp	r2, r3
 800e926:	d20b      	bcs.n	800e940 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	1ad2      	subs	r2, r2, r3
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7ff ff97 	bl	800e868 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e93a:	2300      	movs	r3, #0
 800e93c:	61fb      	str	r3, [r7, #28]
 800e93e:	e004      	b.n	800e94a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	2200      	movs	r2, #0
 800e944:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e946:	2301      	movs	r3, #1
 800e948:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e94a:	f000 fc73 	bl	800f234 <vPortExitCritical>

	return xReturn;
 800e94e:	69fb      	ldr	r3, [r7, #28]
}
 800e950:	4618      	mov	r0, r3
 800e952:	3720      	adds	r7, #32
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}
 800e958:	200006d8 	.word	0x200006d8
 800e95c:	200006ec 	.word	0x200006ec

0800e960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e960:	b480      	push	{r7}
 800e962:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e964:	4b03      	ldr	r3, [pc, #12]	; (800e974 <vTaskMissedYield+0x14>)
 800e966:	2201      	movs	r2, #1
 800e968:	601a      	str	r2, [r3, #0]
}
 800e96a:	bf00      	nop
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr
 800e974:	200006e8 	.word	0x200006e8

0800e978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e980:	f000 f852 	bl	800ea28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e984:	4b06      	ldr	r3, [pc, #24]	; (800e9a0 <prvIdleTask+0x28>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d9f9      	bls.n	800e980 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e98c:	4b05      	ldr	r3, [pc, #20]	; (800e9a4 <prvIdleTask+0x2c>)
 800e98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e992:	601a      	str	r2, [r3, #0]
 800e994:	f3bf 8f4f 	dsb	sy
 800e998:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e99c:	e7f0      	b.n	800e980 <prvIdleTask+0x8>
 800e99e:	bf00      	nop
 800e9a0:	200005d8 	.word	0x200005d8
 800e9a4:	e000ed04 	.word	0xe000ed04

0800e9a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	607b      	str	r3, [r7, #4]
 800e9b2:	e00c      	b.n	800e9ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	4413      	add	r3, r2
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	4a12      	ldr	r2, [pc, #72]	; (800ea08 <prvInitialiseTaskLists+0x60>)
 800e9c0:	4413      	add	r3, r2
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fe fb33 	bl	800d02e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	607b      	str	r3, [r7, #4]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2b06      	cmp	r3, #6
 800e9d2:	d9ef      	bls.n	800e9b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e9d4:	480d      	ldr	r0, [pc, #52]	; (800ea0c <prvInitialiseTaskLists+0x64>)
 800e9d6:	f7fe fb2a 	bl	800d02e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e9da:	480d      	ldr	r0, [pc, #52]	; (800ea10 <prvInitialiseTaskLists+0x68>)
 800e9dc:	f7fe fb27 	bl	800d02e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e9e0:	480c      	ldr	r0, [pc, #48]	; (800ea14 <prvInitialiseTaskLists+0x6c>)
 800e9e2:	f7fe fb24 	bl	800d02e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e9e6:	480c      	ldr	r0, [pc, #48]	; (800ea18 <prvInitialiseTaskLists+0x70>)
 800e9e8:	f7fe fb21 	bl	800d02e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e9ec:	480b      	ldr	r0, [pc, #44]	; (800ea1c <prvInitialiseTaskLists+0x74>)
 800e9ee:	f7fe fb1e 	bl	800d02e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9f2:	4b0b      	ldr	r3, [pc, #44]	; (800ea20 <prvInitialiseTaskLists+0x78>)
 800e9f4:	4a05      	ldr	r2, [pc, #20]	; (800ea0c <prvInitialiseTaskLists+0x64>)
 800e9f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ea24 <prvInitialiseTaskLists+0x7c>)
 800e9fa:	4a05      	ldr	r2, [pc, #20]	; (800ea10 <prvInitialiseTaskLists+0x68>)
 800e9fc:	601a      	str	r2, [r3, #0]
}
 800e9fe:	bf00      	nop
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	200005d8 	.word	0x200005d8
 800ea0c:	20000664 	.word	0x20000664
 800ea10:	20000678 	.word	0x20000678
 800ea14:	20000694 	.word	0x20000694
 800ea18:	200006a8 	.word	0x200006a8
 800ea1c:	200006c0 	.word	0x200006c0
 800ea20:	2000068c 	.word	0x2000068c
 800ea24:	20000690 	.word	0x20000690

0800ea28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea2e:	e019      	b.n	800ea64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea30:	f000 fbcc 	bl	800f1cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea34:	4b10      	ldr	r3, [pc, #64]	; (800ea78 <prvCheckTasksWaitingTermination+0x50>)
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	3304      	adds	r3, #4
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fe fb7e 	bl	800d142 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea46:	4b0d      	ldr	r3, [pc, #52]	; (800ea7c <prvCheckTasksWaitingTermination+0x54>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	4a0b      	ldr	r2, [pc, #44]	; (800ea7c <prvCheckTasksWaitingTermination+0x54>)
 800ea4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea50:	4b0b      	ldr	r3, [pc, #44]	; (800ea80 <prvCheckTasksWaitingTermination+0x58>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	3b01      	subs	r3, #1
 800ea56:	4a0a      	ldr	r2, [pc, #40]	; (800ea80 <prvCheckTasksWaitingTermination+0x58>)
 800ea58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea5a:	f000 fbeb 	bl	800f234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 f810 	bl	800ea84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea64:	4b06      	ldr	r3, [pc, #24]	; (800ea80 <prvCheckTasksWaitingTermination+0x58>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1e1      	bne.n	800ea30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea6c:	bf00      	nop
 800ea6e:	bf00      	nop
 800ea70:	3708      	adds	r7, #8
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	200006a8 	.word	0x200006a8
 800ea7c:	200006d4 	.word	0x200006d4
 800ea80:	200006bc 	.word	0x200006bc

0800ea84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	334c      	adds	r3, #76	; 0x4c
 800ea90:	4618      	mov	r0, r3
 800ea92:	f000 feb1 	bl	800f7f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d108      	bne.n	800eab2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f000 fd43 	bl	800f530 <vPortFree>
				vPortFree( pxTCB );
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 fd40 	bl	800f530 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eab0:	e01a      	b.n	800eae8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d103      	bne.n	800eac4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f000 fd37 	bl	800f530 <vPortFree>
	}
 800eac2:	e011      	b.n	800eae8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800eaca:	2b02      	cmp	r3, #2
 800eacc:	d00c      	beq.n	800eae8 <prvDeleteTCB+0x64>
	__asm volatile
 800eace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead2:	b672      	cpsid	i
 800ead4:	f383 8811 	msr	BASEPRI, r3
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	b662      	cpsie	i
 800eae2:	60fb      	str	r3, [r7, #12]
}
 800eae4:	bf00      	nop
 800eae6:	e7fe      	b.n	800eae6 <prvDeleteTCB+0x62>
	}
 800eae8:	bf00      	nop
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eaf6:	4b0c      	ldr	r3, [pc, #48]	; (800eb28 <prvResetNextTaskUnblockTime+0x38>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d104      	bne.n	800eb0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb00:	4b0a      	ldr	r3, [pc, #40]	; (800eb2c <prvResetNextTaskUnblockTime+0x3c>)
 800eb02:	f04f 32ff 	mov.w	r2, #4294967295
 800eb06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eb08:	e008      	b.n	800eb1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb0a:	4b07      	ldr	r3, [pc, #28]	; (800eb28 <prvResetNextTaskUnblockTime+0x38>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68db      	ldr	r3, [r3, #12]
 800eb10:	68db      	ldr	r3, [r3, #12]
 800eb12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	4a04      	ldr	r2, [pc, #16]	; (800eb2c <prvResetNextTaskUnblockTime+0x3c>)
 800eb1a:	6013      	str	r3, [r2, #0]
}
 800eb1c:	bf00      	nop
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr
 800eb28:	2000068c 	.word	0x2000068c
 800eb2c:	200006f4 	.word	0x200006f4

0800eb30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb36:	4b0b      	ldr	r3, [pc, #44]	; (800eb64 <xTaskGetSchedulerState+0x34>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d102      	bne.n	800eb44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	607b      	str	r3, [r7, #4]
 800eb42:	e008      	b.n	800eb56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb44:	4b08      	ldr	r3, [pc, #32]	; (800eb68 <xTaskGetSchedulerState+0x38>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d102      	bne.n	800eb52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb4c:	2302      	movs	r3, #2
 800eb4e:	607b      	str	r3, [r7, #4]
 800eb50:	e001      	b.n	800eb56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb52:	2300      	movs	r3, #0
 800eb54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb56:	687b      	ldr	r3, [r7, #4]
	}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr
 800eb64:	200006e0 	.word	0x200006e0
 800eb68:	200006fc 	.word	0x200006fc

0800eb6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d069      	beq.n	800ec56 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb86:	4b36      	ldr	r3, [pc, #216]	; (800ec60 <xTaskPriorityInherit+0xf4>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d259      	bcs.n	800ec44 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	699b      	ldr	r3, [r3, #24]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	db06      	blt.n	800eba6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb98:	4b31      	ldr	r3, [pc, #196]	; (800ec60 <xTaskPriorityInherit+0xf4>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb9e:	f1c3 0207 	rsb	r2, r3, #7
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	6959      	ldr	r1, [r3, #20]
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebae:	4613      	mov	r3, r2
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	4413      	add	r3, r2
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	4a2b      	ldr	r2, [pc, #172]	; (800ec64 <xTaskPriorityInherit+0xf8>)
 800ebb8:	4413      	add	r3, r2
 800ebba:	4299      	cmp	r1, r3
 800ebbc:	d13a      	bne.n	800ec34 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	3304      	adds	r3, #4
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7fe fabd 	bl	800d142 <uxListRemove>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d115      	bne.n	800ebfa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebd2:	4924      	ldr	r1, [pc, #144]	; (800ec64 <xTaskPriorityInherit+0xf8>)
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	009b      	lsls	r3, r3, #2
 800ebd8:	4413      	add	r3, r2
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	440b      	add	r3, r1
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d10a      	bne.n	800ebfa <xTaskPriorityInherit+0x8e>
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebe8:	2201      	movs	r2, #1
 800ebea:	fa02 f303 	lsl.w	r3, r2, r3
 800ebee:	43da      	mvns	r2, r3
 800ebf0:	4b1d      	ldr	r3, [pc, #116]	; (800ec68 <xTaskPriorityInherit+0xfc>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4013      	ands	r3, r2
 800ebf6:	4a1c      	ldr	r2, [pc, #112]	; (800ec68 <xTaskPriorityInherit+0xfc>)
 800ebf8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ebfa:	4b19      	ldr	r3, [pc, #100]	; (800ec60 <xTaskPriorityInherit+0xf4>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec08:	2201      	movs	r2, #1
 800ec0a:	409a      	lsls	r2, r3
 800ec0c:	4b16      	ldr	r3, [pc, #88]	; (800ec68 <xTaskPriorityInherit+0xfc>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4313      	orrs	r3, r2
 800ec12:	4a15      	ldr	r2, [pc, #84]	; (800ec68 <xTaskPriorityInherit+0xfc>)
 800ec14:	6013      	str	r3, [r2, #0]
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec1a:	4613      	mov	r3, r2
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	4413      	add	r3, r2
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4a10      	ldr	r2, [pc, #64]	; (800ec64 <xTaskPriorityInherit+0xf8>)
 800ec24:	441a      	add	r2, r3
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	3304      	adds	r3, #4
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	f7fe fa2b 	bl	800d088 <vListInsertEnd>
 800ec32:	e004      	b.n	800ec3e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec34:	4b0a      	ldr	r3, [pc, #40]	; (800ec60 <xTaskPriorityInherit+0xf4>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ec3e:	2301      	movs	r3, #1
 800ec40:	60fb      	str	r3, [r7, #12]
 800ec42:	e008      	b.n	800ec56 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec48:	4b05      	ldr	r3, [pc, #20]	; (800ec60 <xTaskPriorityInherit+0xf4>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d201      	bcs.n	800ec56 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ec52:	2301      	movs	r3, #1
 800ec54:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec56:	68fb      	ldr	r3, [r7, #12]
	}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3710      	adds	r7, #16
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	200005d4 	.word	0x200005d4
 800ec64:	200005d8 	.word	0x200005d8
 800ec68:	200006dc 	.word	0x200006dc

0800ec6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b086      	sub	sp, #24
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d072      	beq.n	800ed68 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ec82:	4b3c      	ldr	r3, [pc, #240]	; (800ed74 <xTaskPriorityDisinherit+0x108>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	693a      	ldr	r2, [r7, #16]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d00c      	beq.n	800eca6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ec8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec90:	b672      	cpsid	i
 800ec92:	f383 8811 	msr	BASEPRI, r3
 800ec96:	f3bf 8f6f 	isb	sy
 800ec9a:	f3bf 8f4f 	dsb	sy
 800ec9e:	b662      	cpsie	i
 800eca0:	60fb      	str	r3, [r7, #12]
}
 800eca2:	bf00      	nop
 800eca4:	e7fe      	b.n	800eca4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d10c      	bne.n	800ecc8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ecae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb2:	b672      	cpsid	i
 800ecb4:	f383 8811 	msr	BASEPRI, r3
 800ecb8:	f3bf 8f6f 	isb	sy
 800ecbc:	f3bf 8f4f 	dsb	sy
 800ecc0:	b662      	cpsie	i
 800ecc2:	60bb      	str	r3, [r7, #8]
}
 800ecc4:	bf00      	nop
 800ecc6:	e7fe      	b.n	800ecc6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eccc:	1e5a      	subs	r2, r3, #1
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d044      	beq.n	800ed68 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d140      	bne.n	800ed68 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	3304      	adds	r3, #4
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fe fa29 	bl	800d142 <uxListRemove>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d115      	bne.n	800ed22 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecfa:	491f      	ldr	r1, [pc, #124]	; (800ed78 <xTaskPriorityDisinherit+0x10c>)
 800ecfc:	4613      	mov	r3, r2
 800ecfe:	009b      	lsls	r3, r3, #2
 800ed00:	4413      	add	r3, r2
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	440b      	add	r3, r1
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d10a      	bne.n	800ed22 <xTaskPriorityDisinherit+0xb6>
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed10:	2201      	movs	r2, #1
 800ed12:	fa02 f303 	lsl.w	r3, r2, r3
 800ed16:	43da      	mvns	r2, r3
 800ed18:	4b18      	ldr	r3, [pc, #96]	; (800ed7c <xTaskPriorityDisinherit+0x110>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4013      	ands	r3, r2
 800ed1e:	4a17      	ldr	r2, [pc, #92]	; (800ed7c <xTaskPriorityDisinherit+0x110>)
 800ed20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2e:	f1c3 0207 	rsb	r2, r3, #7
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	409a      	lsls	r2, r3
 800ed3e:	4b0f      	ldr	r3, [pc, #60]	; (800ed7c <xTaskPriorityDisinherit+0x110>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	4313      	orrs	r3, r2
 800ed44:	4a0d      	ldr	r2, [pc, #52]	; (800ed7c <xTaskPriorityDisinherit+0x110>)
 800ed46:	6013      	str	r3, [r2, #0]
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed4c:	4613      	mov	r3, r2
 800ed4e:	009b      	lsls	r3, r3, #2
 800ed50:	4413      	add	r3, r2
 800ed52:	009b      	lsls	r3, r3, #2
 800ed54:	4a08      	ldr	r2, [pc, #32]	; (800ed78 <xTaskPriorityDisinherit+0x10c>)
 800ed56:	441a      	add	r2, r3
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	3304      	adds	r3, #4
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	4610      	mov	r0, r2
 800ed60:	f7fe f992 	bl	800d088 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ed64:	2301      	movs	r3, #1
 800ed66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed68:	697b      	ldr	r3, [r7, #20]
	}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3718      	adds	r7, #24
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop
 800ed74:	200005d4 	.word	0x200005d4
 800ed78:	200005d8 	.word	0x200005d8
 800ed7c:	200006dc 	.word	0x200006dc

0800ed80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b088      	sub	sp, #32
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f000 8087 	beq.w	800eea8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d10c      	bne.n	800edbc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800eda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda6:	b672      	cpsid	i
 800eda8:	f383 8811 	msr	BASEPRI, r3
 800edac:	f3bf 8f6f 	isb	sy
 800edb0:	f3bf 8f4f 	dsb	sy
 800edb4:	b662      	cpsie	i
 800edb6:	60fb      	str	r3, [r7, #12]
}
 800edb8:	bf00      	nop
 800edba:	e7fe      	b.n	800edba <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edc0:	683a      	ldr	r2, [r7, #0]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d902      	bls.n	800edcc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	61fb      	str	r3, [r7, #28]
 800edca:	e002      	b.n	800edd2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800edcc:	69bb      	ldr	r3, [r7, #24]
 800edce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edd0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800edd2:	69bb      	ldr	r3, [r7, #24]
 800edd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edd6:	69fa      	ldr	r2, [r7, #28]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d065      	beq.n	800eea8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ede0:	697a      	ldr	r2, [r7, #20]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d160      	bne.n	800eea8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ede6:	4b32      	ldr	r3, [pc, #200]	; (800eeb0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	69ba      	ldr	r2, [r7, #24]
 800edec:	429a      	cmp	r2, r3
 800edee:	d10c      	bne.n	800ee0a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800edf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf4:	b672      	cpsid	i
 800edf6:	f383 8811 	msr	BASEPRI, r3
 800edfa:	f3bf 8f6f 	isb	sy
 800edfe:	f3bf 8f4f 	dsb	sy
 800ee02:	b662      	cpsie	i
 800ee04:	60bb      	str	r3, [r7, #8]
}
 800ee06:	bf00      	nop
 800ee08:	e7fe      	b.n	800ee08 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ee0a:	69bb      	ldr	r3, [r7, #24]
 800ee0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee0e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ee10:	69bb      	ldr	r3, [r7, #24]
 800ee12:	69fa      	ldr	r2, [r7, #28]
 800ee14:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	699b      	ldr	r3, [r3, #24]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	db04      	blt.n	800ee28 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee1e:	69fb      	ldr	r3, [r7, #28]
 800ee20:	f1c3 0207 	rsb	r2, r3, #7
 800ee24:	69bb      	ldr	r3, [r7, #24]
 800ee26:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	6959      	ldr	r1, [r3, #20]
 800ee2c:	693a      	ldr	r2, [r7, #16]
 800ee2e:	4613      	mov	r3, r2
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	4413      	add	r3, r2
 800ee34:	009b      	lsls	r3, r3, #2
 800ee36:	4a1f      	ldr	r2, [pc, #124]	; (800eeb4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ee38:	4413      	add	r3, r2
 800ee3a:	4299      	cmp	r1, r3
 800ee3c:	d134      	bne.n	800eea8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee3e:	69bb      	ldr	r3, [r7, #24]
 800ee40:	3304      	adds	r3, #4
 800ee42:	4618      	mov	r0, r3
 800ee44:	f7fe f97d 	bl	800d142 <uxListRemove>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d115      	bne.n	800ee7a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee52:	4918      	ldr	r1, [pc, #96]	; (800eeb4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ee54:	4613      	mov	r3, r2
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	4413      	add	r3, r2
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	440b      	add	r3, r1
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d10a      	bne.n	800ee7a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee68:	2201      	movs	r2, #1
 800ee6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee6e:	43da      	mvns	r2, r3
 800ee70:	4b11      	ldr	r3, [pc, #68]	; (800eeb8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	4013      	ands	r3, r2
 800ee76:	4a10      	ldr	r2, [pc, #64]	; (800eeb8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ee78:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee7e:	2201      	movs	r2, #1
 800ee80:	409a      	lsls	r2, r3
 800ee82:	4b0d      	ldr	r3, [pc, #52]	; (800eeb8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	4313      	orrs	r3, r2
 800ee88:	4a0b      	ldr	r2, [pc, #44]	; (800eeb8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ee8a:	6013      	str	r3, [r2, #0]
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee90:	4613      	mov	r3, r2
 800ee92:	009b      	lsls	r3, r3, #2
 800ee94:	4413      	add	r3, r2
 800ee96:	009b      	lsls	r3, r3, #2
 800ee98:	4a06      	ldr	r2, [pc, #24]	; (800eeb4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ee9a:	441a      	add	r2, r3
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	3304      	adds	r3, #4
 800eea0:	4619      	mov	r1, r3
 800eea2:	4610      	mov	r0, r2
 800eea4:	f7fe f8f0 	bl	800d088 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eea8:	bf00      	nop
 800eeaa:	3720      	adds	r7, #32
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	200005d4 	.word	0x200005d4
 800eeb4:	200005d8 	.word	0x200005d8
 800eeb8:	200006dc 	.word	0x200006dc

0800eebc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eebc:	b480      	push	{r7}
 800eebe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eec0:	4b07      	ldr	r3, [pc, #28]	; (800eee0 <pvTaskIncrementMutexHeldCount+0x24>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d004      	beq.n	800eed2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eec8:	4b05      	ldr	r3, [pc, #20]	; (800eee0 <pvTaskIncrementMutexHeldCount+0x24>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eece:	3201      	adds	r2, #1
 800eed0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800eed2:	4b03      	ldr	r3, [pc, #12]	; (800eee0 <pvTaskIncrementMutexHeldCount+0x24>)
 800eed4:	681b      	ldr	r3, [r3, #0]
	}
 800eed6:	4618      	mov	r0, r3
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr
 800eee0:	200005d4 	.word	0x200005d4

0800eee4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
 800eeec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eeee:	4b29      	ldr	r3, [pc, #164]	; (800ef94 <prvAddCurrentTaskToDelayedList+0xb0>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eef4:	4b28      	ldr	r3, [pc, #160]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	3304      	adds	r3, #4
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7fe f921 	bl	800d142 <uxListRemove>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d10b      	bne.n	800ef1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ef06:	4b24      	ldr	r3, [pc, #144]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ef12:	43da      	mvns	r2, r3
 800ef14:	4b21      	ldr	r3, [pc, #132]	; (800ef9c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4013      	ands	r3, r2
 800ef1a:	4a20      	ldr	r2, [pc, #128]	; (800ef9c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ef1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef24:	d10a      	bne.n	800ef3c <prvAddCurrentTaskToDelayedList+0x58>
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d007      	beq.n	800ef3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef2c:	4b1a      	ldr	r3, [pc, #104]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	3304      	adds	r3, #4
 800ef32:	4619      	mov	r1, r3
 800ef34:	481a      	ldr	r0, [pc, #104]	; (800efa0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ef36:	f7fe f8a7 	bl	800d088 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ef3a:	e026      	b.n	800ef8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4413      	add	r3, r2
 800ef42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef44:	4b14      	ldr	r3, [pc, #80]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	68ba      	ldr	r2, [r7, #8]
 800ef4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef4c:	68ba      	ldr	r2, [r7, #8]
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d209      	bcs.n	800ef68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef54:	4b13      	ldr	r3, [pc, #76]	; (800efa4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ef56:	681a      	ldr	r2, [r3, #0]
 800ef58:	4b0f      	ldr	r3, [pc, #60]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	3304      	adds	r3, #4
 800ef5e:	4619      	mov	r1, r3
 800ef60:	4610      	mov	r0, r2
 800ef62:	f7fe f8b5 	bl	800d0d0 <vListInsert>
}
 800ef66:	e010      	b.n	800ef8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef68:	4b0f      	ldr	r3, [pc, #60]	; (800efa8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	4b0a      	ldr	r3, [pc, #40]	; (800ef98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	3304      	adds	r3, #4
 800ef72:	4619      	mov	r1, r3
 800ef74:	4610      	mov	r0, r2
 800ef76:	f7fe f8ab 	bl	800d0d0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ef7a:	4b0c      	ldr	r3, [pc, #48]	; (800efac <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	68ba      	ldr	r2, [r7, #8]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d202      	bcs.n	800ef8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ef84:	4a09      	ldr	r2, [pc, #36]	; (800efac <prvAddCurrentTaskToDelayedList+0xc8>)
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	6013      	str	r3, [r2, #0]
}
 800ef8a:	bf00      	nop
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	200006d8 	.word	0x200006d8
 800ef98:	200005d4 	.word	0x200005d4
 800ef9c:	200006dc 	.word	0x200006dc
 800efa0:	200006c0 	.word	0x200006c0
 800efa4:	20000690 	.word	0x20000690
 800efa8:	2000068c 	.word	0x2000068c
 800efac:	200006f4 	.word	0x200006f4

0800efb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800efb0:	b480      	push	{r7}
 800efb2:	b085      	sub	sp, #20
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	3b04      	subs	r3, #4
 800efc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800efc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	3b04      	subs	r3, #4
 800efce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	f023 0201 	bic.w	r2, r3, #1
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	3b04      	subs	r3, #4
 800efde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800efe0:	4a0c      	ldr	r2, [pc, #48]	; (800f014 <pxPortInitialiseStack+0x64>)
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	3b14      	subs	r3, #20
 800efea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	3b04      	subs	r3, #4
 800eff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f06f 0202 	mvn.w	r2, #2
 800effe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	3b20      	subs	r3, #32
 800f004:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f006:	68fb      	ldr	r3, [r7, #12]
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3714      	adds	r7, #20
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr
 800f014:	0800f019 	.word	0x0800f019

0800f018 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f018:	b480      	push	{r7}
 800f01a:	b085      	sub	sp, #20
 800f01c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f01e:	2300      	movs	r3, #0
 800f020:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f022:	4b14      	ldr	r3, [pc, #80]	; (800f074 <prvTaskExitError+0x5c>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f02a:	d00c      	beq.n	800f046 <prvTaskExitError+0x2e>
	__asm volatile
 800f02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f030:	b672      	cpsid	i
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	b662      	cpsie	i
 800f040:	60fb      	str	r3, [r7, #12]
}
 800f042:	bf00      	nop
 800f044:	e7fe      	b.n	800f044 <prvTaskExitError+0x2c>
	__asm volatile
 800f046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04a:	b672      	cpsid	i
 800f04c:	f383 8811 	msr	BASEPRI, r3
 800f050:	f3bf 8f6f 	isb	sy
 800f054:	f3bf 8f4f 	dsb	sy
 800f058:	b662      	cpsie	i
 800f05a:	60bb      	str	r3, [r7, #8]
}
 800f05c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f05e:	bf00      	nop
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d0fc      	beq.n	800f060 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f066:	bf00      	nop
 800f068:	bf00      	nop
 800f06a:	3714      	adds	r7, #20
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr
 800f074:	2000004c 	.word	0x2000004c
	...

0800f080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f080:	4b07      	ldr	r3, [pc, #28]	; (800f0a0 <pxCurrentTCBConst2>)
 800f082:	6819      	ldr	r1, [r3, #0]
 800f084:	6808      	ldr	r0, [r1, #0]
 800f086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08a:	f380 8809 	msr	PSP, r0
 800f08e:	f3bf 8f6f 	isb	sy
 800f092:	f04f 0000 	mov.w	r0, #0
 800f096:	f380 8811 	msr	BASEPRI, r0
 800f09a:	4770      	bx	lr
 800f09c:	f3af 8000 	nop.w

0800f0a0 <pxCurrentTCBConst2>:
 800f0a0:	200005d4 	.word	0x200005d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f0a4:	bf00      	nop
 800f0a6:	bf00      	nop

0800f0a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f0a8:	4808      	ldr	r0, [pc, #32]	; (800f0cc <prvPortStartFirstTask+0x24>)
 800f0aa:	6800      	ldr	r0, [r0, #0]
 800f0ac:	6800      	ldr	r0, [r0, #0]
 800f0ae:	f380 8808 	msr	MSP, r0
 800f0b2:	f04f 0000 	mov.w	r0, #0
 800f0b6:	f380 8814 	msr	CONTROL, r0
 800f0ba:	b662      	cpsie	i
 800f0bc:	b661      	cpsie	f
 800f0be:	f3bf 8f4f 	dsb	sy
 800f0c2:	f3bf 8f6f 	isb	sy
 800f0c6:	df00      	svc	0
 800f0c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f0ca:	bf00      	nop
 800f0cc:	e000ed08 	.word	0xe000ed08

0800f0d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f0d6:	4b37      	ldr	r3, [pc, #220]	; (800f1b4 <xPortStartScheduler+0xe4>)
 800f0d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	22ff      	movs	r2, #255	; 0xff
 800f0e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f0f0:	78fb      	ldrb	r3, [r7, #3]
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f0f8:	b2da      	uxtb	r2, r3
 800f0fa:	4b2f      	ldr	r3, [pc, #188]	; (800f1b8 <xPortStartScheduler+0xe8>)
 800f0fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f0fe:	4b2f      	ldr	r3, [pc, #188]	; (800f1bc <xPortStartScheduler+0xec>)
 800f100:	2207      	movs	r2, #7
 800f102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f104:	e009      	b.n	800f11a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f106:	4b2d      	ldr	r3, [pc, #180]	; (800f1bc <xPortStartScheduler+0xec>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	3b01      	subs	r3, #1
 800f10c:	4a2b      	ldr	r2, [pc, #172]	; (800f1bc <xPortStartScheduler+0xec>)
 800f10e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f110:	78fb      	ldrb	r3, [r7, #3]
 800f112:	b2db      	uxtb	r3, r3
 800f114:	005b      	lsls	r3, r3, #1
 800f116:	b2db      	uxtb	r3, r3
 800f118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f11a:	78fb      	ldrb	r3, [r7, #3]
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f122:	2b80      	cmp	r3, #128	; 0x80
 800f124:	d0ef      	beq.n	800f106 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f126:	4b25      	ldr	r3, [pc, #148]	; (800f1bc <xPortStartScheduler+0xec>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f1c3 0307 	rsb	r3, r3, #7
 800f12e:	2b04      	cmp	r3, #4
 800f130:	d00c      	beq.n	800f14c <xPortStartScheduler+0x7c>
	__asm volatile
 800f132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f136:	b672      	cpsid	i
 800f138:	f383 8811 	msr	BASEPRI, r3
 800f13c:	f3bf 8f6f 	isb	sy
 800f140:	f3bf 8f4f 	dsb	sy
 800f144:	b662      	cpsie	i
 800f146:	60bb      	str	r3, [r7, #8]
}
 800f148:	bf00      	nop
 800f14a:	e7fe      	b.n	800f14a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f14c:	4b1b      	ldr	r3, [pc, #108]	; (800f1bc <xPortStartScheduler+0xec>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	021b      	lsls	r3, r3, #8
 800f152:	4a1a      	ldr	r2, [pc, #104]	; (800f1bc <xPortStartScheduler+0xec>)
 800f154:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f156:	4b19      	ldr	r3, [pc, #100]	; (800f1bc <xPortStartScheduler+0xec>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f15e:	4a17      	ldr	r2, [pc, #92]	; (800f1bc <xPortStartScheduler+0xec>)
 800f160:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	b2da      	uxtb	r2, r3
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f16a:	4b15      	ldr	r3, [pc, #84]	; (800f1c0 <xPortStartScheduler+0xf0>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	4a14      	ldr	r2, [pc, #80]	; (800f1c0 <xPortStartScheduler+0xf0>)
 800f170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f174:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f176:	4b12      	ldr	r3, [pc, #72]	; (800f1c0 <xPortStartScheduler+0xf0>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	4a11      	ldr	r2, [pc, #68]	; (800f1c0 <xPortStartScheduler+0xf0>)
 800f17c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f180:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f182:	f000 f8dd 	bl	800f340 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f186:	4b0f      	ldr	r3, [pc, #60]	; (800f1c4 <xPortStartScheduler+0xf4>)
 800f188:	2200      	movs	r2, #0
 800f18a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f18c:	f000 f8fc 	bl	800f388 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f190:	4b0d      	ldr	r3, [pc, #52]	; (800f1c8 <xPortStartScheduler+0xf8>)
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4a0c      	ldr	r2, [pc, #48]	; (800f1c8 <xPortStartScheduler+0xf8>)
 800f196:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f19a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f19c:	f7ff ff84 	bl	800f0a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f1a0:	f7ff fa74 	bl	800e68c <vTaskSwitchContext>
	prvTaskExitError();
 800f1a4:	f7ff ff38 	bl	800f018 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f1a8:	2300      	movs	r3, #0
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	3710      	adds	r7, #16
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	e000e400 	.word	0xe000e400
 800f1b8:	20000700 	.word	0x20000700
 800f1bc:	20000704 	.word	0x20000704
 800f1c0:	e000ed20 	.word	0xe000ed20
 800f1c4:	2000004c 	.word	0x2000004c
 800f1c8:	e000ef34 	.word	0xe000ef34

0800f1cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
	__asm volatile
 800f1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d6:	b672      	cpsid	i
 800f1d8:	f383 8811 	msr	BASEPRI, r3
 800f1dc:	f3bf 8f6f 	isb	sy
 800f1e0:	f3bf 8f4f 	dsb	sy
 800f1e4:	b662      	cpsie	i
 800f1e6:	607b      	str	r3, [r7, #4]
}
 800f1e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f1ea:	4b10      	ldr	r3, [pc, #64]	; (800f22c <vPortEnterCritical+0x60>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	4a0e      	ldr	r2, [pc, #56]	; (800f22c <vPortEnterCritical+0x60>)
 800f1f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f1f4:	4b0d      	ldr	r3, [pc, #52]	; (800f22c <vPortEnterCritical+0x60>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d111      	bne.n	800f220 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f1fc:	4b0c      	ldr	r3, [pc, #48]	; (800f230 <vPortEnterCritical+0x64>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	b2db      	uxtb	r3, r3
 800f202:	2b00      	cmp	r3, #0
 800f204:	d00c      	beq.n	800f220 <vPortEnterCritical+0x54>
	__asm volatile
 800f206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20a:	b672      	cpsid	i
 800f20c:	f383 8811 	msr	BASEPRI, r3
 800f210:	f3bf 8f6f 	isb	sy
 800f214:	f3bf 8f4f 	dsb	sy
 800f218:	b662      	cpsie	i
 800f21a:	603b      	str	r3, [r7, #0]
}
 800f21c:	bf00      	nop
 800f21e:	e7fe      	b.n	800f21e <vPortEnterCritical+0x52>
	}
}
 800f220:	bf00      	nop
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr
 800f22c:	2000004c 	.word	0x2000004c
 800f230:	e000ed04 	.word	0xe000ed04

0800f234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f23a:	4b13      	ldr	r3, [pc, #76]	; (800f288 <vPortExitCritical+0x54>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d10c      	bne.n	800f25c <vPortExitCritical+0x28>
	__asm volatile
 800f242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f246:	b672      	cpsid	i
 800f248:	f383 8811 	msr	BASEPRI, r3
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	b662      	cpsie	i
 800f256:	607b      	str	r3, [r7, #4]
}
 800f258:	bf00      	nop
 800f25a:	e7fe      	b.n	800f25a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f25c:	4b0a      	ldr	r3, [pc, #40]	; (800f288 <vPortExitCritical+0x54>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	3b01      	subs	r3, #1
 800f262:	4a09      	ldr	r2, [pc, #36]	; (800f288 <vPortExitCritical+0x54>)
 800f264:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f266:	4b08      	ldr	r3, [pc, #32]	; (800f288 <vPortExitCritical+0x54>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d105      	bne.n	800f27a <vPortExitCritical+0x46>
 800f26e:	2300      	movs	r3, #0
 800f270:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f278:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f27a:	bf00      	nop
 800f27c:	370c      	adds	r7, #12
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	2000004c 	.word	0x2000004c
 800f28c:	00000000 	.word	0x00000000

0800f290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f290:	f3ef 8009 	mrs	r0, PSP
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	4b15      	ldr	r3, [pc, #84]	; (800f2f0 <pxCurrentTCBConst>)
 800f29a:	681a      	ldr	r2, [r3, #0]
 800f29c:	f01e 0f10 	tst.w	lr, #16
 800f2a0:	bf08      	it	eq
 800f2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2aa:	6010      	str	r0, [r2, #0]
 800f2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f2b4:	b672      	cpsid	i
 800f2b6:	f380 8811 	msr	BASEPRI, r0
 800f2ba:	f3bf 8f4f 	dsb	sy
 800f2be:	f3bf 8f6f 	isb	sy
 800f2c2:	b662      	cpsie	i
 800f2c4:	f7ff f9e2 	bl	800e68c <vTaskSwitchContext>
 800f2c8:	f04f 0000 	mov.w	r0, #0
 800f2cc:	f380 8811 	msr	BASEPRI, r0
 800f2d0:	bc09      	pop	{r0, r3}
 800f2d2:	6819      	ldr	r1, [r3, #0]
 800f2d4:	6808      	ldr	r0, [r1, #0]
 800f2d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2da:	f01e 0f10 	tst.w	lr, #16
 800f2de:	bf08      	it	eq
 800f2e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f2e4:	f380 8809 	msr	PSP, r0
 800f2e8:	f3bf 8f6f 	isb	sy
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop

0800f2f0 <pxCurrentTCBConst>:
 800f2f0:	200005d4 	.word	0x200005d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f2f4:	bf00      	nop
 800f2f6:	bf00      	nop

0800f2f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f302:	b672      	cpsid	i
 800f304:	f383 8811 	msr	BASEPRI, r3
 800f308:	f3bf 8f6f 	isb	sy
 800f30c:	f3bf 8f4f 	dsb	sy
 800f310:	b662      	cpsie	i
 800f312:	607b      	str	r3, [r7, #4]
}
 800f314:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f316:	f7ff f8ff 	bl	800e518 <xTaskIncrementTick>
 800f31a:	4603      	mov	r3, r0
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d003      	beq.n	800f328 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f320:	4b06      	ldr	r3, [pc, #24]	; (800f33c <SysTick_Handler+0x44>)
 800f322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f326:	601a      	str	r2, [r3, #0]
 800f328:	2300      	movs	r3, #0
 800f32a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	f383 8811 	msr	BASEPRI, r3
}
 800f332:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f334:	bf00      	nop
 800f336:	3708      	adds	r7, #8
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	e000ed04 	.word	0xe000ed04

0800f340 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f340:	b480      	push	{r7}
 800f342:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f344:	4b0b      	ldr	r3, [pc, #44]	; (800f374 <vPortSetupTimerInterrupt+0x34>)
 800f346:	2200      	movs	r2, #0
 800f348:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f34a:	4b0b      	ldr	r3, [pc, #44]	; (800f378 <vPortSetupTimerInterrupt+0x38>)
 800f34c:	2200      	movs	r2, #0
 800f34e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f350:	4b0a      	ldr	r3, [pc, #40]	; (800f37c <vPortSetupTimerInterrupt+0x3c>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4a0a      	ldr	r2, [pc, #40]	; (800f380 <vPortSetupTimerInterrupt+0x40>)
 800f356:	fba2 2303 	umull	r2, r3, r2, r3
 800f35a:	099b      	lsrs	r3, r3, #6
 800f35c:	4a09      	ldr	r2, [pc, #36]	; (800f384 <vPortSetupTimerInterrupt+0x44>)
 800f35e:	3b01      	subs	r3, #1
 800f360:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f362:	4b04      	ldr	r3, [pc, #16]	; (800f374 <vPortSetupTimerInterrupt+0x34>)
 800f364:	2207      	movs	r2, #7
 800f366:	601a      	str	r2, [r3, #0]
}
 800f368:	bf00      	nop
 800f36a:	46bd      	mov	sp, r7
 800f36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f370:	4770      	bx	lr
 800f372:	bf00      	nop
 800f374:	e000e010 	.word	0xe000e010
 800f378:	e000e018 	.word	0xe000e018
 800f37c:	20000040 	.word	0x20000040
 800f380:	10624dd3 	.word	0x10624dd3
 800f384:	e000e014 	.word	0xe000e014

0800f388 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f388:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f398 <vPortEnableVFP+0x10>
 800f38c:	6801      	ldr	r1, [r0, #0]
 800f38e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f392:	6001      	str	r1, [r0, #0]
 800f394:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f396:	bf00      	nop
 800f398:	e000ed88 	.word	0xe000ed88

0800f39c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b08a      	sub	sp, #40	; 0x28
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f3a8:	f7ff f80a 	bl	800e3c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f3ac:	4b5b      	ldr	r3, [pc, #364]	; (800f51c <pvPortMalloc+0x180>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d101      	bne.n	800f3b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f3b4:	f000 f91a 	bl	800f5ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f3b8:	4b59      	ldr	r3, [pc, #356]	; (800f520 <pvPortMalloc+0x184>)
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	4013      	ands	r3, r2
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f040 8092 	bne.w	800f4ea <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d01f      	beq.n	800f40c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800f3cc:	2208      	movs	r2, #8
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f003 0307 	and.w	r3, r3, #7
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d016      	beq.n	800f40c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f023 0307 	bic.w	r3, r3, #7
 800f3e4:	3308      	adds	r3, #8
 800f3e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f003 0307 	and.w	r3, r3, #7
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d00c      	beq.n	800f40c <pvPortMalloc+0x70>
	__asm volatile
 800f3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f6:	b672      	cpsid	i
 800f3f8:	f383 8811 	msr	BASEPRI, r3
 800f3fc:	f3bf 8f6f 	isb	sy
 800f400:	f3bf 8f4f 	dsb	sy
 800f404:	b662      	cpsie	i
 800f406:	617b      	str	r3, [r7, #20]
}
 800f408:	bf00      	nop
 800f40a:	e7fe      	b.n	800f40a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d06b      	beq.n	800f4ea <pvPortMalloc+0x14e>
 800f412:	4b44      	ldr	r3, [pc, #272]	; (800f524 <pvPortMalloc+0x188>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	687a      	ldr	r2, [r7, #4]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d866      	bhi.n	800f4ea <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f41c:	4b42      	ldr	r3, [pc, #264]	; (800f528 <pvPortMalloc+0x18c>)
 800f41e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f420:	4b41      	ldr	r3, [pc, #260]	; (800f528 <pvPortMalloc+0x18c>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f426:	e004      	b.n	800f432 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800f428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	429a      	cmp	r2, r3
 800f43a:	d903      	bls.n	800f444 <pvPortMalloc+0xa8>
 800f43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d1f1      	bne.n	800f428 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f444:	4b35      	ldr	r3, [pc, #212]	; (800f51c <pvPortMalloc+0x180>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d04d      	beq.n	800f4ea <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f44e:	6a3b      	ldr	r3, [r7, #32]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2208      	movs	r2, #8
 800f454:	4413      	add	r3, r2
 800f456:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	6a3b      	ldr	r3, [r7, #32]
 800f45e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f462:	685a      	ldr	r2, [r3, #4]
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	1ad2      	subs	r2, r2, r3
 800f468:	2308      	movs	r3, #8
 800f46a:	005b      	lsls	r3, r3, #1
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d921      	bls.n	800f4b4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4413      	add	r3, r2
 800f476:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f478:	69bb      	ldr	r3, [r7, #24]
 800f47a:	f003 0307 	and.w	r3, r3, #7
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d00c      	beq.n	800f49c <pvPortMalloc+0x100>
	__asm volatile
 800f482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f486:	b672      	cpsid	i
 800f488:	f383 8811 	msr	BASEPRI, r3
 800f48c:	f3bf 8f6f 	isb	sy
 800f490:	f3bf 8f4f 	dsb	sy
 800f494:	b662      	cpsie	i
 800f496:	613b      	str	r3, [r7, #16]
}
 800f498:	bf00      	nop
 800f49a:	e7fe      	b.n	800f49a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49e:	685a      	ldr	r2, [r3, #4]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	1ad2      	subs	r2, r2, r3
 800f4a4:	69bb      	ldr	r3, [r7, #24]
 800f4a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4aa:	687a      	ldr	r2, [r7, #4]
 800f4ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f4ae:	69b8      	ldr	r0, [r7, #24]
 800f4b0:	f000 f8fe 	bl	800f6b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f4b4:	4b1b      	ldr	r3, [pc, #108]	; (800f524 <pvPortMalloc+0x188>)
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	1ad3      	subs	r3, r2, r3
 800f4be:	4a19      	ldr	r2, [pc, #100]	; (800f524 <pvPortMalloc+0x188>)
 800f4c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f4c2:	4b18      	ldr	r3, [pc, #96]	; (800f524 <pvPortMalloc+0x188>)
 800f4c4:	681a      	ldr	r2, [r3, #0]
 800f4c6:	4b19      	ldr	r3, [pc, #100]	; (800f52c <pvPortMalloc+0x190>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d203      	bcs.n	800f4d6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f4ce:	4b15      	ldr	r3, [pc, #84]	; (800f524 <pvPortMalloc+0x188>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	4a16      	ldr	r2, [pc, #88]	; (800f52c <pvPortMalloc+0x190>)
 800f4d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d8:	685a      	ldr	r2, [r3, #4]
 800f4da:	4b11      	ldr	r3, [pc, #68]	; (800f520 <pvPortMalloc+0x184>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	431a      	orrs	r2, r3
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f4ea:	f7fe ff77 	bl	800e3dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	f003 0307 	and.w	r3, r3, #7
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d00c      	beq.n	800f512 <pvPortMalloc+0x176>
	__asm volatile
 800f4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fc:	b672      	cpsid	i
 800f4fe:	f383 8811 	msr	BASEPRI, r3
 800f502:	f3bf 8f6f 	isb	sy
 800f506:	f3bf 8f4f 	dsb	sy
 800f50a:	b662      	cpsie	i
 800f50c:	60fb      	str	r3, [r7, #12]
}
 800f50e:	bf00      	nop
 800f510:	e7fe      	b.n	800f510 <pvPortMalloc+0x174>
	return pvReturn;
 800f512:	69fb      	ldr	r3, [r7, #28]
}
 800f514:	4618      	mov	r0, r3
 800f516:	3728      	adds	r7, #40	; 0x28
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	20007f10 	.word	0x20007f10
 800f520:	20007f1c 	.word	0x20007f1c
 800f524:	20007f14 	.word	0x20007f14
 800f528:	20007f08 	.word	0x20007f08
 800f52c:	20007f18 	.word	0x20007f18

0800f530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b086      	sub	sp, #24
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d04c      	beq.n	800f5dc <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f542:	2308      	movs	r3, #8
 800f544:	425b      	negs	r3, r3
 800f546:	697a      	ldr	r2, [r7, #20]
 800f548:	4413      	add	r3, r2
 800f54a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f54c:	697b      	ldr	r3, [r7, #20]
 800f54e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	685a      	ldr	r2, [r3, #4]
 800f554:	4b23      	ldr	r3, [pc, #140]	; (800f5e4 <vPortFree+0xb4>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	4013      	ands	r3, r2
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d10c      	bne.n	800f578 <vPortFree+0x48>
	__asm volatile
 800f55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f562:	b672      	cpsid	i
 800f564:	f383 8811 	msr	BASEPRI, r3
 800f568:	f3bf 8f6f 	isb	sy
 800f56c:	f3bf 8f4f 	dsb	sy
 800f570:	b662      	cpsie	i
 800f572:	60fb      	str	r3, [r7, #12]
}
 800f574:	bf00      	nop
 800f576:	e7fe      	b.n	800f576 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d00c      	beq.n	800f59a <vPortFree+0x6a>
	__asm volatile
 800f580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f584:	b672      	cpsid	i
 800f586:	f383 8811 	msr	BASEPRI, r3
 800f58a:	f3bf 8f6f 	isb	sy
 800f58e:	f3bf 8f4f 	dsb	sy
 800f592:	b662      	cpsie	i
 800f594:	60bb      	str	r3, [r7, #8]
}
 800f596:	bf00      	nop
 800f598:	e7fe      	b.n	800f598 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	685a      	ldr	r2, [r3, #4]
 800f59e:	4b11      	ldr	r3, [pc, #68]	; (800f5e4 <vPortFree+0xb4>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	4013      	ands	r3, r2
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d019      	beq.n	800f5dc <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d115      	bne.n	800f5dc <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	685a      	ldr	r2, [r3, #4]
 800f5b4:	4b0b      	ldr	r3, [pc, #44]	; (800f5e4 <vPortFree+0xb4>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	43db      	mvns	r3, r3
 800f5ba:	401a      	ands	r2, r3
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f5c0:	f7fe fefe 	bl	800e3c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	685a      	ldr	r2, [r3, #4]
 800f5c8:	4b07      	ldr	r3, [pc, #28]	; (800f5e8 <vPortFree+0xb8>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	4a06      	ldr	r2, [pc, #24]	; (800f5e8 <vPortFree+0xb8>)
 800f5d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f5d2:	6938      	ldr	r0, [r7, #16]
 800f5d4:	f000 f86c 	bl	800f6b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f5d8:	f7fe ff00 	bl	800e3dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f5dc:	bf00      	nop
 800f5de:	3718      	adds	r7, #24
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	20007f1c 	.word	0x20007f1c
 800f5e8:	20007f14 	.word	0x20007f14

0800f5ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b085      	sub	sp, #20
 800f5f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f5f2:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800f5f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f5f8:	4b27      	ldr	r3, [pc, #156]	; (800f698 <prvHeapInit+0xac>)
 800f5fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f003 0307 	and.w	r3, r3, #7
 800f602:	2b00      	cmp	r3, #0
 800f604:	d00c      	beq.n	800f620 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	3307      	adds	r3, #7
 800f60a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	f023 0307 	bic.w	r3, r3, #7
 800f612:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f614:	68ba      	ldr	r2, [r7, #8]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	1ad3      	subs	r3, r2, r3
 800f61a:	4a1f      	ldr	r2, [pc, #124]	; (800f698 <prvHeapInit+0xac>)
 800f61c:	4413      	add	r3, r2
 800f61e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f624:	4a1d      	ldr	r2, [pc, #116]	; (800f69c <prvHeapInit+0xb0>)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f62a:	4b1c      	ldr	r3, [pc, #112]	; (800f69c <prvHeapInit+0xb0>)
 800f62c:	2200      	movs	r2, #0
 800f62e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	4413      	add	r3, r2
 800f636:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f638:	2208      	movs	r2, #8
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	1a9b      	subs	r3, r3, r2
 800f63e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f023 0307 	bic.w	r3, r3, #7
 800f646:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	4a15      	ldr	r2, [pc, #84]	; (800f6a0 <prvHeapInit+0xb4>)
 800f64c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f64e:	4b14      	ldr	r3, [pc, #80]	; (800f6a0 <prvHeapInit+0xb4>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2200      	movs	r2, #0
 800f654:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f656:	4b12      	ldr	r3, [pc, #72]	; (800f6a0 <prvHeapInit+0xb4>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	2200      	movs	r2, #0
 800f65c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	68fa      	ldr	r2, [r7, #12]
 800f666:	1ad2      	subs	r2, r2, r3
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f66c:	4b0c      	ldr	r3, [pc, #48]	; (800f6a0 <prvHeapInit+0xb4>)
 800f66e:	681a      	ldr	r2, [r3, #0]
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	685b      	ldr	r3, [r3, #4]
 800f678:	4a0a      	ldr	r2, [pc, #40]	; (800f6a4 <prvHeapInit+0xb8>)
 800f67a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	4a09      	ldr	r2, [pc, #36]	; (800f6a8 <prvHeapInit+0xbc>)
 800f682:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f684:	4b09      	ldr	r3, [pc, #36]	; (800f6ac <prvHeapInit+0xc0>)
 800f686:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f68a:	601a      	str	r2, [r3, #0]
}
 800f68c:	bf00      	nop
 800f68e:	3714      	adds	r7, #20
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr
 800f698:	20000708 	.word	0x20000708
 800f69c:	20007f08 	.word	0x20007f08
 800f6a0:	20007f10 	.word	0x20007f10
 800f6a4:	20007f18 	.word	0x20007f18
 800f6a8:	20007f14 	.word	0x20007f14
 800f6ac:	20007f1c 	.word	0x20007f1c

0800f6b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b085      	sub	sp, #20
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f6b8:	4b28      	ldr	r3, [pc, #160]	; (800f75c <prvInsertBlockIntoFreeList+0xac>)
 800f6ba:	60fb      	str	r3, [r7, #12]
 800f6bc:	e002      	b.n	800f6c4 <prvInsertBlockIntoFreeList+0x14>
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	60fb      	str	r3, [r7, #12]
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	687a      	ldr	r2, [r7, #4]
 800f6ca:	429a      	cmp	r2, r3
 800f6cc:	d8f7      	bhi.n	800f6be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	68ba      	ldr	r2, [r7, #8]
 800f6d8:	4413      	add	r3, r2
 800f6da:	687a      	ldr	r2, [r7, #4]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d108      	bne.n	800f6f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	685a      	ldr	r2, [r3, #4]
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	441a      	add	r2, r3
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	68ba      	ldr	r2, [r7, #8]
 800f6fc:	441a      	add	r2, r3
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	429a      	cmp	r2, r3
 800f704:	d118      	bne.n	800f738 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	4b15      	ldr	r3, [pc, #84]	; (800f760 <prvInsertBlockIntoFreeList+0xb0>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d00d      	beq.n	800f72e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	685a      	ldr	r2, [r3, #4]
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	441a      	add	r2, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	681a      	ldr	r2, [r3, #0]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	601a      	str	r2, [r3, #0]
 800f72c:	e008      	b.n	800f740 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f72e:	4b0c      	ldr	r3, [pc, #48]	; (800f760 <prvInsertBlockIntoFreeList+0xb0>)
 800f730:	681a      	ldr	r2, [r3, #0]
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	601a      	str	r2, [r3, #0]
 800f736:	e003      	b.n	800f740 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f740:	68fa      	ldr	r2, [r7, #12]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	429a      	cmp	r2, r3
 800f746:	d002      	beq.n	800f74e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	687a      	ldr	r2, [r7, #4]
 800f74c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f74e:	bf00      	nop
 800f750:	3714      	adds	r7, #20
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr
 800f75a:	bf00      	nop
 800f75c:	20007f08 	.word	0x20007f08
 800f760:	20007f10 	.word	0x20007f10

0800f764 <__libc_init_array>:
 800f764:	b570      	push	{r4, r5, r6, lr}
 800f766:	4d0d      	ldr	r5, [pc, #52]	; (800f79c <__libc_init_array+0x38>)
 800f768:	4c0d      	ldr	r4, [pc, #52]	; (800f7a0 <__libc_init_array+0x3c>)
 800f76a:	1b64      	subs	r4, r4, r5
 800f76c:	10a4      	asrs	r4, r4, #2
 800f76e:	2600      	movs	r6, #0
 800f770:	42a6      	cmp	r6, r4
 800f772:	d109      	bne.n	800f788 <__libc_init_array+0x24>
 800f774:	4d0b      	ldr	r5, [pc, #44]	; (800f7a4 <__libc_init_array+0x40>)
 800f776:	4c0c      	ldr	r4, [pc, #48]	; (800f7a8 <__libc_init_array+0x44>)
 800f778:	f000 f8f6 	bl	800f968 <_init>
 800f77c:	1b64      	subs	r4, r4, r5
 800f77e:	10a4      	asrs	r4, r4, #2
 800f780:	2600      	movs	r6, #0
 800f782:	42a6      	cmp	r6, r4
 800f784:	d105      	bne.n	800f792 <__libc_init_array+0x2e>
 800f786:	bd70      	pop	{r4, r5, r6, pc}
 800f788:	f855 3b04 	ldr.w	r3, [r5], #4
 800f78c:	4798      	blx	r3
 800f78e:	3601      	adds	r6, #1
 800f790:	e7ee      	b.n	800f770 <__libc_init_array+0xc>
 800f792:	f855 3b04 	ldr.w	r3, [r5], #4
 800f796:	4798      	blx	r3
 800f798:	3601      	adds	r6, #1
 800f79a:	e7f2      	b.n	800f782 <__libc_init_array+0x1e>
 800f79c:	08035d08 	.word	0x08035d08
 800f7a0:	08035d08 	.word	0x08035d08
 800f7a4:	08035d08 	.word	0x08035d08
 800f7a8:	08035d0c 	.word	0x08035d0c

0800f7ac <__retarget_lock_acquire_recursive>:
 800f7ac:	4770      	bx	lr

0800f7ae <__retarget_lock_release_recursive>:
 800f7ae:	4770      	bx	lr

0800f7b0 <memcpy>:
 800f7b0:	440a      	add	r2, r1
 800f7b2:	4291      	cmp	r1, r2
 800f7b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7b8:	d100      	bne.n	800f7bc <memcpy+0xc>
 800f7ba:	4770      	bx	lr
 800f7bc:	b510      	push	{r4, lr}
 800f7be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7c6:	4291      	cmp	r1, r2
 800f7c8:	d1f9      	bne.n	800f7be <memcpy+0xe>
 800f7ca:	bd10      	pop	{r4, pc}

0800f7cc <memset>:
 800f7cc:	4402      	add	r2, r0
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d100      	bne.n	800f7d6 <memset+0xa>
 800f7d4:	4770      	bx	lr
 800f7d6:	f803 1b01 	strb.w	r1, [r3], #1
 800f7da:	e7f9      	b.n	800f7d0 <memset+0x4>

0800f7dc <cleanup_glue>:
 800f7dc:	b538      	push	{r3, r4, r5, lr}
 800f7de:	460c      	mov	r4, r1
 800f7e0:	6809      	ldr	r1, [r1, #0]
 800f7e2:	4605      	mov	r5, r0
 800f7e4:	b109      	cbz	r1, 800f7ea <cleanup_glue+0xe>
 800f7e6:	f7ff fff9 	bl	800f7dc <cleanup_glue>
 800f7ea:	4621      	mov	r1, r4
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7f2:	f000 b869 	b.w	800f8c8 <_free_r>
	...

0800f7f8 <_reclaim_reent>:
 800f7f8:	4b2c      	ldr	r3, [pc, #176]	; (800f8ac <_reclaim_reent+0xb4>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4283      	cmp	r3, r0
 800f7fe:	b570      	push	{r4, r5, r6, lr}
 800f800:	4604      	mov	r4, r0
 800f802:	d051      	beq.n	800f8a8 <_reclaim_reent+0xb0>
 800f804:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f806:	b143      	cbz	r3, 800f81a <_reclaim_reent+0x22>
 800f808:	68db      	ldr	r3, [r3, #12]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d14a      	bne.n	800f8a4 <_reclaim_reent+0xac>
 800f80e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f810:	6819      	ldr	r1, [r3, #0]
 800f812:	b111      	cbz	r1, 800f81a <_reclaim_reent+0x22>
 800f814:	4620      	mov	r0, r4
 800f816:	f000 f857 	bl	800f8c8 <_free_r>
 800f81a:	6961      	ldr	r1, [r4, #20]
 800f81c:	b111      	cbz	r1, 800f824 <_reclaim_reent+0x2c>
 800f81e:	4620      	mov	r0, r4
 800f820:	f000 f852 	bl	800f8c8 <_free_r>
 800f824:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f826:	b111      	cbz	r1, 800f82e <_reclaim_reent+0x36>
 800f828:	4620      	mov	r0, r4
 800f82a:	f000 f84d 	bl	800f8c8 <_free_r>
 800f82e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f830:	b111      	cbz	r1, 800f838 <_reclaim_reent+0x40>
 800f832:	4620      	mov	r0, r4
 800f834:	f000 f848 	bl	800f8c8 <_free_r>
 800f838:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f83a:	b111      	cbz	r1, 800f842 <_reclaim_reent+0x4a>
 800f83c:	4620      	mov	r0, r4
 800f83e:	f000 f843 	bl	800f8c8 <_free_r>
 800f842:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f844:	b111      	cbz	r1, 800f84c <_reclaim_reent+0x54>
 800f846:	4620      	mov	r0, r4
 800f848:	f000 f83e 	bl	800f8c8 <_free_r>
 800f84c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f84e:	b111      	cbz	r1, 800f856 <_reclaim_reent+0x5e>
 800f850:	4620      	mov	r0, r4
 800f852:	f000 f839 	bl	800f8c8 <_free_r>
 800f856:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f858:	b111      	cbz	r1, 800f860 <_reclaim_reent+0x68>
 800f85a:	4620      	mov	r0, r4
 800f85c:	f000 f834 	bl	800f8c8 <_free_r>
 800f860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f862:	b111      	cbz	r1, 800f86a <_reclaim_reent+0x72>
 800f864:	4620      	mov	r0, r4
 800f866:	f000 f82f 	bl	800f8c8 <_free_r>
 800f86a:	69a3      	ldr	r3, [r4, #24]
 800f86c:	b1e3      	cbz	r3, 800f8a8 <_reclaim_reent+0xb0>
 800f86e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f870:	4620      	mov	r0, r4
 800f872:	4798      	blx	r3
 800f874:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f876:	b1b9      	cbz	r1, 800f8a8 <_reclaim_reent+0xb0>
 800f878:	4620      	mov	r0, r4
 800f87a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f87e:	f7ff bfad 	b.w	800f7dc <cleanup_glue>
 800f882:	5949      	ldr	r1, [r1, r5]
 800f884:	b941      	cbnz	r1, 800f898 <_reclaim_reent+0xa0>
 800f886:	3504      	adds	r5, #4
 800f888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f88a:	2d80      	cmp	r5, #128	; 0x80
 800f88c:	68d9      	ldr	r1, [r3, #12]
 800f88e:	d1f8      	bne.n	800f882 <_reclaim_reent+0x8a>
 800f890:	4620      	mov	r0, r4
 800f892:	f000 f819 	bl	800f8c8 <_free_r>
 800f896:	e7ba      	b.n	800f80e <_reclaim_reent+0x16>
 800f898:	680e      	ldr	r6, [r1, #0]
 800f89a:	4620      	mov	r0, r4
 800f89c:	f000 f814 	bl	800f8c8 <_free_r>
 800f8a0:	4631      	mov	r1, r6
 800f8a2:	e7ef      	b.n	800f884 <_reclaim_reent+0x8c>
 800f8a4:	2500      	movs	r5, #0
 800f8a6:	e7ef      	b.n	800f888 <_reclaim_reent+0x90>
 800f8a8:	bd70      	pop	{r4, r5, r6, pc}
 800f8aa:	bf00      	nop
 800f8ac:	20000050 	.word	0x20000050

0800f8b0 <__malloc_lock>:
 800f8b0:	4801      	ldr	r0, [pc, #4]	; (800f8b8 <__malloc_lock+0x8>)
 800f8b2:	f7ff bf7b 	b.w	800f7ac <__retarget_lock_acquire_recursive>
 800f8b6:	bf00      	nop
 800f8b8:	20008ed8 	.word	0x20008ed8

0800f8bc <__malloc_unlock>:
 800f8bc:	4801      	ldr	r0, [pc, #4]	; (800f8c4 <__malloc_unlock+0x8>)
 800f8be:	f7ff bf76 	b.w	800f7ae <__retarget_lock_release_recursive>
 800f8c2:	bf00      	nop
 800f8c4:	20008ed8 	.word	0x20008ed8

0800f8c8 <_free_r>:
 800f8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f8ca:	2900      	cmp	r1, #0
 800f8cc:	d048      	beq.n	800f960 <_free_r+0x98>
 800f8ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8d2:	9001      	str	r0, [sp, #4]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	f1a1 0404 	sub.w	r4, r1, #4
 800f8da:	bfb8      	it	lt
 800f8dc:	18e4      	addlt	r4, r4, r3
 800f8de:	f7ff ffe7 	bl	800f8b0 <__malloc_lock>
 800f8e2:	4a20      	ldr	r2, [pc, #128]	; (800f964 <_free_r+0x9c>)
 800f8e4:	9801      	ldr	r0, [sp, #4]
 800f8e6:	6813      	ldr	r3, [r2, #0]
 800f8e8:	4615      	mov	r5, r2
 800f8ea:	b933      	cbnz	r3, 800f8fa <_free_r+0x32>
 800f8ec:	6063      	str	r3, [r4, #4]
 800f8ee:	6014      	str	r4, [r2, #0]
 800f8f0:	b003      	add	sp, #12
 800f8f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8f6:	f7ff bfe1 	b.w	800f8bc <__malloc_unlock>
 800f8fa:	42a3      	cmp	r3, r4
 800f8fc:	d90b      	bls.n	800f916 <_free_r+0x4e>
 800f8fe:	6821      	ldr	r1, [r4, #0]
 800f900:	1862      	adds	r2, r4, r1
 800f902:	4293      	cmp	r3, r2
 800f904:	bf04      	itt	eq
 800f906:	681a      	ldreq	r2, [r3, #0]
 800f908:	685b      	ldreq	r3, [r3, #4]
 800f90a:	6063      	str	r3, [r4, #4]
 800f90c:	bf04      	itt	eq
 800f90e:	1852      	addeq	r2, r2, r1
 800f910:	6022      	streq	r2, [r4, #0]
 800f912:	602c      	str	r4, [r5, #0]
 800f914:	e7ec      	b.n	800f8f0 <_free_r+0x28>
 800f916:	461a      	mov	r2, r3
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	b10b      	cbz	r3, 800f920 <_free_r+0x58>
 800f91c:	42a3      	cmp	r3, r4
 800f91e:	d9fa      	bls.n	800f916 <_free_r+0x4e>
 800f920:	6811      	ldr	r1, [r2, #0]
 800f922:	1855      	adds	r5, r2, r1
 800f924:	42a5      	cmp	r5, r4
 800f926:	d10b      	bne.n	800f940 <_free_r+0x78>
 800f928:	6824      	ldr	r4, [r4, #0]
 800f92a:	4421      	add	r1, r4
 800f92c:	1854      	adds	r4, r2, r1
 800f92e:	42a3      	cmp	r3, r4
 800f930:	6011      	str	r1, [r2, #0]
 800f932:	d1dd      	bne.n	800f8f0 <_free_r+0x28>
 800f934:	681c      	ldr	r4, [r3, #0]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	6053      	str	r3, [r2, #4]
 800f93a:	4421      	add	r1, r4
 800f93c:	6011      	str	r1, [r2, #0]
 800f93e:	e7d7      	b.n	800f8f0 <_free_r+0x28>
 800f940:	d902      	bls.n	800f948 <_free_r+0x80>
 800f942:	230c      	movs	r3, #12
 800f944:	6003      	str	r3, [r0, #0]
 800f946:	e7d3      	b.n	800f8f0 <_free_r+0x28>
 800f948:	6825      	ldr	r5, [r4, #0]
 800f94a:	1961      	adds	r1, r4, r5
 800f94c:	428b      	cmp	r3, r1
 800f94e:	bf04      	itt	eq
 800f950:	6819      	ldreq	r1, [r3, #0]
 800f952:	685b      	ldreq	r3, [r3, #4]
 800f954:	6063      	str	r3, [r4, #4]
 800f956:	bf04      	itt	eq
 800f958:	1949      	addeq	r1, r1, r5
 800f95a:	6021      	streq	r1, [r4, #0]
 800f95c:	6054      	str	r4, [r2, #4]
 800f95e:	e7c7      	b.n	800f8f0 <_free_r+0x28>
 800f960:	b003      	add	sp, #12
 800f962:	bd30      	pop	{r4, r5, pc}
 800f964:	20007f20 	.word	0x20007f20

0800f968 <_init>:
 800f968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96a:	bf00      	nop
 800f96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f96e:	bc08      	pop	{r3}
 800f970:	469e      	mov	lr, r3
 800f972:	4770      	bx	lr

0800f974 <_fini>:
 800f974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f976:	bf00      	nop
 800f978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f97a:	bc08      	pop	{r3}
 800f97c:	469e      	mov	lr, r3
 800f97e:	4770      	bx	lr
