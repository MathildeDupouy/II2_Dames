
II2_Dames.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfc0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000262b0  0800e190  0800e190  0001e190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08034440  08034440  000500b4  2**0
                  CONTENTS
  4 .ARM          00000008  08034440  08034440  00044440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08034448  08034448  000500b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08034448  08034448  00044448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803444c  0803444c  0004444c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08034450  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008778  200000b4  08034504  000500b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000882c  08034504  0005882c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000335aa  00000000  00000000  000500e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005db1  00000000  00000000  0008368e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002668  00000000  00000000  00089440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002410  00000000  00000000  0008baa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e830  00000000  00000000  0008deb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fa20  00000000  00000000  000bc6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117956  00000000  00000000  000ec108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00203a5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a638  00000000  00000000  00203ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e178 	.word	0x0800e178

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800e178 	.word	0x0800e178

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000d0 	.word	0x200000d0
 8000538:	20000184 	.word	0x20000184

0800053c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000546:	20c8      	movs	r0, #200	; 0xc8
 8000548:	f002 fbd8 	bl	8002cfc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800054c:	f000 fa7a 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000580:	2300      	movs	r3, #0
 8000582:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000584:	f000 fa5e 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e010      	b.n	80005b0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	21a8      	movs	r1, #168	; 0xa8
 8000594:	4618      	mov	r0, r3
 8000596:	f002 fb93 	bl	8002cc0 <TS_IO_Read>
 800059a:	4603      	mov	r3, r0
 800059c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b51      	cmp	r3, #81	; 0x51
 80005a4:	d101      	bne.n	80005aa <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d802      	bhi.n	80005bc <ft5336_ReadID+0x4e>
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e8      	beq.n	800058e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fa44 	bl	8000a64 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f932 	bl	8000848 <ft5336_TS_DisableIT>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fb5d 	bl	8002cc0 <TS_IO_Read>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b05      	cmp	r3, #5
 800061c:	d901      	bls.n	8000622 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 8000628:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	b2db      	uxtb	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000384 	.word	0x20000384

08000640 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000664:	789a      	ldrb	r2, [r3, #2]
 8000666:	4b6c      	ldr	r3, [pc, #432]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	429a      	cmp	r2, r3
 800066c:	f080 80cf 	bcs.w	800080e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000670:	4b69      	ldr	r3, [pc, #420]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d871      	bhi.n	800075c <ft5336_TS_GetXY+0x11c>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <ft5336_TS_GetXY+0x40>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	080006a9 	.word	0x080006a9
 8000684:	080006bb 	.word	0x080006bb
 8000688:	080006cd 	.word	0x080006cd
 800068c:	080006df 	.word	0x080006df
 8000690:	080006f1 	.word	0x080006f1
 8000694:	08000703 	.word	0x08000703
 8000698:	08000715 	.word	0x08000715
 800069c:	08000727 	.word	0x08000727
 80006a0:	08000739 	.word	0x08000739
 80006a4:	0800074b 	.word	0x0800074b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006a8:	2304      	movs	r3, #4
 80006aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006ac:	2303      	movs	r3, #3
 80006ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b0:	2306      	movs	r3, #6
 80006b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006b4:	2305      	movs	r3, #5
 80006b6:	753b      	strb	r3, [r7, #20]
      break;
 80006b8:	e051      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ba:	230a      	movs	r3, #10
 80006bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006be:	2309      	movs	r3, #9
 80006c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006c2:	230c      	movs	r3, #12
 80006c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006c6:	230b      	movs	r3, #11
 80006c8:	753b      	strb	r3, [r7, #20]
      break;
 80006ca:	e048      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006cc:	2310      	movs	r3, #16
 80006ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d0:	230f      	movs	r3, #15
 80006d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006d4:	2312      	movs	r3, #18
 80006d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006d8:	2311      	movs	r3, #17
 80006da:	753b      	strb	r3, [r7, #20]
      break;
 80006dc:	e03f      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006de:	2316      	movs	r3, #22
 80006e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006e2:	2315      	movs	r3, #21
 80006e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006e6:	2318      	movs	r3, #24
 80006e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006ea:	2317      	movs	r3, #23
 80006ec:	753b      	strb	r3, [r7, #20]
      break;
 80006ee:	e036      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f0:	231c      	movs	r3, #28
 80006f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006f4:	231b      	movs	r3, #27
 80006f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006f8:	231e      	movs	r3, #30
 80006fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006fc:	231d      	movs	r3, #29
 80006fe:	753b      	strb	r3, [r7, #20]
      break;
 8000700:	e02d      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000702:	2322      	movs	r3, #34	; 0x22
 8000704:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000706:	2321      	movs	r3, #33	; 0x21
 8000708:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800070a:	2324      	movs	r3, #36	; 0x24
 800070c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800070e:	2323      	movs	r3, #35	; 0x23
 8000710:	753b      	strb	r3, [r7, #20]
      break;
 8000712:	e024      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000714:	2328      	movs	r3, #40	; 0x28
 8000716:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000718:	2327      	movs	r3, #39	; 0x27
 800071a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800071c:	232a      	movs	r3, #42	; 0x2a
 800071e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000720:	2329      	movs	r3, #41	; 0x29
 8000722:	753b      	strb	r3, [r7, #20]
      break;
 8000724:	e01b      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000726:	232e      	movs	r3, #46	; 0x2e
 8000728:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800072a:	232d      	movs	r3, #45	; 0x2d
 800072c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800072e:	2330      	movs	r3, #48	; 0x30
 8000730:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000732:	232f      	movs	r3, #47	; 0x2f
 8000734:	753b      	strb	r3, [r7, #20]
      break;
 8000736:	e012      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000738:	2334      	movs	r3, #52	; 0x34
 800073a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800073c:	2333      	movs	r3, #51	; 0x33
 800073e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000740:	2336      	movs	r3, #54	; 0x36
 8000742:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000744:	2335      	movs	r3, #53	; 0x35
 8000746:	753b      	strb	r3, [r7, #20]
      break;
 8000748:	e009      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800074a:	233a      	movs	r3, #58	; 0x3a
 800074c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800074e:	2339      	movs	r3, #57	; 0x39
 8000750:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000752:	233c      	movs	r3, #60	; 0x3c
 8000754:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000756:	233b      	movs	r3, #59	; 0x3b
 8000758:	753b      	strb	r3, [r7, #20]
      break;
 800075a:	e000      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800075c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	7dfa      	ldrb	r2, [r7, #23]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f002 faaa 	bl	8002cc0 <TS_IO_Read>
 800076c:	4603      	mov	r3, r0
 800076e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 8000778:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	7dba      	ldrb	r2, [r7, #22]
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fa9c 	bl	8002cc0 <TS_IO_Read>
 8000788:	4603      	mov	r3, r0
 800078a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007a6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	7d7a      	ldrb	r2, [r7, #21]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 fa81 	bl	8002cc0 <TS_IO_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007c2:	7cfb      	ldrb	r3, [r7, #19]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ca:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	7d3a      	ldrb	r2, [r7, #20]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 fa73 	bl	8002cc0 <TS_IO_Read>
 80007da:	4603      	mov	r3, r0
 80007dc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007de:	7cfb      	ldrb	r3, [r7, #19]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007f8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007fc:	881a      	ldrh	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	3301      	adds	r3, #1
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 800080c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000384 	.word	0x20000384
 800081c:	20000388 	.word	0x20000388

08000820 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	21a4      	movs	r1, #164	; 0xa4
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fa26 	bl	8002c8c <TS_IO_Write>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	21a4      	movs	r1, #164	; 0xa4
 8000862:	4618      	mov	r0, r3
 8000864:	f002 fa12 	bl	8002c8c <TS_IO_Write>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	6039      	str	r1, [r7, #0]
 80008a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2101      	movs	r1, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 fa03 	bl	8002cc0 <TS_IO_Read>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	4603      	mov	r3, r0
 80008de:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80008f0:	4b4d      	ldr	r3, [pc, #308]	; (8000a28 <ft5336_TS_GetTouchInfo+0x158>)
 80008f2:	785b      	ldrb	r3, [r3, #1]
 80008f4:	461a      	mov	r2, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4293      	cmp	r3, r2
 80008fa:	f080 8090 	bcs.w	8000a1e <ft5336_TS_GetTouchInfo+0x14e>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b09      	cmp	r3, #9
 8000902:	d85d      	bhi.n	80009c0 <ft5336_TS_GetTouchInfo+0xf0>
 8000904:	a201      	add	r2, pc, #4	; (adr r2, 800090c <ft5336_TS_GetTouchInfo+0x3c>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	08000935 	.word	0x08000935
 8000910:	08000943 	.word	0x08000943
 8000914:	08000951 	.word	0x08000951
 8000918:	0800095f 	.word	0x0800095f
 800091c:	0800096d 	.word	0x0800096d
 8000920:	0800097b 	.word	0x0800097b
 8000924:	08000989 	.word	0x08000989
 8000928:	08000997 	.word	0x08000997
 800092c:	080009a5 	.word	0x080009a5
 8000930:	080009b3 	.word	0x080009b3
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000934:	2303      	movs	r3, #3
 8000936:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000938:	2307      	movs	r3, #7
 800093a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800093c:	2308      	movs	r3, #8
 800093e:	757b      	strb	r3, [r7, #21]
      break;
 8000940:	e03f      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000942:	2309      	movs	r3, #9
 8000944:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000946:	230d      	movs	r3, #13
 8000948:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800094a:	230e      	movs	r3, #14
 800094c:	757b      	strb	r3, [r7, #21]
      break;
 800094e:	e038      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000950:	230f      	movs	r3, #15
 8000952:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000954:	2313      	movs	r3, #19
 8000956:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000958:	2314      	movs	r3, #20
 800095a:	757b      	strb	r3, [r7, #21]
      break;
 800095c:	e031      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800095e:	2315      	movs	r3, #21
 8000960:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000962:	2319      	movs	r3, #25
 8000964:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000966:	231a      	movs	r3, #26
 8000968:	757b      	strb	r3, [r7, #21]
      break;
 800096a:	e02a      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 800096c:	231b      	movs	r3, #27
 800096e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000970:	231f      	movs	r3, #31
 8000972:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000974:	2320      	movs	r3, #32
 8000976:	757b      	strb	r3, [r7, #21]
      break;
 8000978:	e023      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800097a:	2321      	movs	r3, #33	; 0x21
 800097c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800097e:	2325      	movs	r3, #37	; 0x25
 8000980:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000982:	2326      	movs	r3, #38	; 0x26
 8000984:	757b      	strb	r3, [r7, #21]
      break;
 8000986:	e01c      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000988:	2327      	movs	r3, #39	; 0x27
 800098a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 800098c:	232b      	movs	r3, #43	; 0x2b
 800098e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000990:	232c      	movs	r3, #44	; 0x2c
 8000992:	757b      	strb	r3, [r7, #21]
      break;
 8000994:	e015      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000996:	232d      	movs	r3, #45	; 0x2d
 8000998:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800099a:	2331      	movs	r3, #49	; 0x31
 800099c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800099e:	2332      	movs	r3, #50	; 0x32
 80009a0:	757b      	strb	r3, [r7, #21]
      break;
 80009a2:	e00e      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80009a4:	2333      	movs	r3, #51	; 0x33
 80009a6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80009a8:	2337      	movs	r3, #55	; 0x37
 80009aa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80009ac:	2338      	movs	r3, #56	; 0x38
 80009ae:	757b      	strb	r3, [r7, #21]
      break;
 80009b0:	e007      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80009b2:	2339      	movs	r3, #57	; 0x39
 80009b4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80009b6:	233d      	movs	r3, #61	; 0x3d
 80009b8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80009ba:	233e      	movs	r3, #62	; 0x3e
 80009bc:	757b      	strb	r3, [r7, #21]
      break;
 80009be:	e000      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80009c0:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80009c2:	89fb      	ldrh	r3, [r7, #14]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	7dfa      	ldrb	r2, [r7, #23]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 f978 	bl	8002cc0 <TS_IO_Read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80009d4:	7d3b      	ldrb	r3, [r7, #20]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	119b      	asrs	r3, r3, #6
 80009da:	f003 0203 	and.w	r2, r3, #3
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	7dba      	ldrb	r2, [r7, #22]
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 f968 	bl	8002cc0 <TS_IO_Read>
 80009f0:	4603      	mov	r3, r0
 80009f2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80009f4:	7d3b      	ldrb	r3, [r7, #20]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	7d7a      	ldrb	r2, [r7, #21]
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f002 f95a 	bl	8002cc0 <TS_IO_Read>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a10:	7d3b      	ldrb	r3, [r7, #20]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	111b      	asrs	r3, r3, #4
 8000a16:	f003 0204 	and.w	r2, r3, #4
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000384 	.word	0x20000384

08000a2c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000384 	.word	0x20000384

08000a44 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000a48:	f7ff fff0 	bl	8000a2c <ft5336_Get_I2C_InitializedStatus>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d104      	bne.n	8000a5c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000a52:	f002 f911 	bl	8002c78 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000a56:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000384 	.word	0x20000384

08000a64 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a8a:	f3bf 8f6f 	isb	sy
}
 8000a8e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a98:	f3bf 8f4f 	dsb	sy
}
 8000a9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a9e:	f3bf 8f6f 	isb	sy
}
 8000aa2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab0:	f3bf 8f4f 	dsb	sy
}
 8000ab4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab6:	f3bf 8f6f 	isb	sy
}
 8000aba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ada:	f3bf 8f4f 	dsb	sy
}
 8000ade:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ae6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	0b5b      	lsrs	r3, r3, #13
 8000aec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000af0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000afa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	015a      	lsls	r2, r3, #5
 8000b00:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b04:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b0a:	4911      	ldr	r1, [pc, #68]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1e5a      	subs	r2, r3, #1
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1ef      	bne.n	8000afc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	60fa      	str	r2, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1e5      	bne.n	8000af2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b26:	f3bf 8f4f 	dsb	sy
}
 8000b2a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b36:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b38:	f3bf 8f4f 	dsb	sy
}
 8000b3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b3e:	f3bf 8f6f 	isb	sy
}
 8000b42:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <calculPossibilitesRec>:
 * nb_eaten		: donne le nombre de pieces mangees jusqu'à cette possible case (init a 0)
 *
 * retour		: indice de la prochaine case vide du tableau
 */
uint8_t calculPossibilitesRec(uint16_t line, uint16_t col, uint8_t color, struct cell *possibilites, struct cell **eaten, uint8_t index, uint8_t nb_eaten)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b090      	sub	sp, #64	; 0x40
 8000b58:	af04      	add	r7, sp, #16
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	81fb      	strh	r3, [r7, #14]
 8000b60:	460b      	mov	r3, r1
 8000b62:	81bb      	strh	r3, [r7, #12]
 8000b64:	4613      	mov	r3, r2
 8000b66:	72fb      	strb	r3, [r7, #11]
	int8_t pas   = (color == 0) ? 1 : -1; // en fonction couleur on regarde lignes croissantes ou decroissantes
 8000b68:	7afb      	ldrb	r3, [r7, #11]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <calculPossibilitesRec+0x1e>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e001      	b.n	8000b76 <calculPossibilitesRec+0x22>
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int8_t fin   = (color == 0) ? 7 : 0; // en fonction couleur pas meme arrivee
 8000b7a:	7afb      	ldrb	r3, [r7, #11]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <calculPossibilitesRec+0x30>
 8000b80:	2307      	movs	r3, #7
 8000b82:	e000      	b.n	8000b86 <calculPossibilitesRec+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int8_t debut = (color == 0) ? 0 : 7; // en fonction couleur pas meme arrivee
 8000b8a:	7afb      	ldrb	r3, [r7, #11]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <calculPossibilitesRec+0x40>
 8000b90:	2300      	movs	r3, #0
 8000b92:	e000      	b.n	8000b96 <calculPossibilitesRec+0x42>
 8000b94:	2307      	movs	r3, #7
 8000b96:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// Controle de la colonne de droite en avant :
	if(col < 7 && line != fin)
 8000b9a:	89bb      	ldrh	r3, [r7, #12]
 8000b9c:	2b06      	cmp	r3, #6
 8000b9e:	f200 8099 	bhi.w	8000cd4 <calculPossibilitesRec+0x180>
 8000ba2:	89fa      	ldrh	r2, [r7, #14]
 8000ba4:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	f000 8093 	beq.w	8000cd4 <calculPossibilitesRec+0x180>
	{
		// Controle colonne de droite en avant : piece presente
		if(chessboard[line + pas][col + 1].isFilled == 1)
 8000bae:	89fa      	ldrh	r2, [r7, #14]
 8000bb0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000bb4:	441a      	add	r2, r3
 8000bb6:	89bb      	ldrh	r3, [r7, #12]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	4936      	ldr	r1, [pc, #216]	; (8000c94 <calculPossibilitesRec+0x140>)
 8000bbc:	00d2      	lsls	r2, r2, #3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	440b      	add	r3, r1
 8000bc4:	795b      	ldrb	r3, [r3, #5]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d166      	bne.n	8000c98 <calculPossibilitesRec+0x144>
		{
			if(chessboard[line + pas][col + 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000bca:	89fa      	ldrh	r2, [r7, #14]
 8000bcc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000bd0:	441a      	add	r2, r3
 8000bd2:	89bb      	ldrh	r3, [r7, #12]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	492f      	ldr	r1, [pc, #188]	; (8000c94 <calculPossibilitesRec+0x140>)
 8000bd8:	00d2      	lsls	r2, r2, #3
 8000bda:	4413      	add	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	440b      	add	r3, r1
 8000be0:	799b      	ldrb	r3, [r3, #6]
 8000be2:	7afa      	ldrb	r2, [r7, #11]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d075      	beq.n	8000cd4 <calculPossibilitesRec+0x180>
			else if((col <= 5) && (line + pas != fin)) // Assez de cases pour sauter
 8000be8:	89bb      	ldrh	r3, [r7, #12]
 8000bea:	2b05      	cmp	r3, #5
 8000bec:	d872      	bhi.n	8000cd4 <calculPossibilitesRec+0x180>
 8000bee:	89fa      	ldrh	r2, [r7, #14]
 8000bf0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000bf4:	441a      	add	r2, r3
 8000bf6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d06a      	beq.n	8000cd4 <calculPossibilitesRec+0x180>
			{
				if(chessboard[line + 2 * pas][col + 2].isFilled == 0) // Pas de piece apres le saut
 8000bfe:	89fa      	ldrh	r2, [r7, #14]
 8000c00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	441a      	add	r2, r3
 8000c08:	89bb      	ldrh	r3, [r7, #12]
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	4921      	ldr	r1, [pc, #132]	; (8000c94 <calculPossibilitesRec+0x140>)
 8000c0e:	00d2      	lsls	r2, r2, #3
 8000c10:	4413      	add	r3, r2
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	440b      	add	r3, r1
 8000c16:	795b      	ldrb	r3, [r3, #5]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d15b      	bne.n	8000cd4 <calculPossibilitesRec+0x180>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line + 2 * pas, col + 2};
 8000c1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	89fb      	ldrh	r3, [r7, #14]
 8000c28:	4413      	add	r3, r2
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	853b      	strh	r3, [r7, #40]	; 0x28
 8000c2e:	89bb      	ldrh	r3, [r7, #12]
 8000c30:	3302      	adds	r3, #2
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	857b      	strh	r3, [r7, #42]	; 0x2a
					possibilites[index] = possible;
 8000c36:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	4413      	add	r3, r2
 8000c40:	461a      	mov	r2, r3
 8000c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c46:	6818      	ldr	r0, [r3, #0]
 8000c48:	6010      	str	r0, [r2, #0]
					index++;
 8000c4a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000c4e:	3301      	adds	r3, #1
 8000c50:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					nb_eaten++;
 8000c54:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000c58:	3301      	adds	r3, #1
 8000c5a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					index = calculPossibilitesRec(line + 2 * pas, col + 2, color, possibilites, eaten, index, nb_eaten);
 8000c5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	89fb      	ldrh	r3, [r7, #14]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b298      	uxth	r0, r3
 8000c6e:	89bb      	ldrh	r3, [r7, #12]
 8000c70:	3302      	adds	r3, #2
 8000c72:	b299      	uxth	r1, r3
 8000c74:	7afa      	ldrb	r2, [r7, #11]
 8000c76:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000c7a:	9302      	str	r3, [sp, #8]
 8000c7c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f7ff ff64 	bl	8000b54 <calculPossibilitesRec>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000c92:	e01f      	b.n	8000cd4 <calculPossibilitesRec+0x180>
 8000c94:	200080cc 	.word	0x200080cc
				}
			}
		}
		// Controle colonne de droite : pas de piece et pas en train de manger
		else if (nb_eaten == 0)
 8000c98:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d119      	bne.n	8000cd4 <calculPossibilitesRec+0x180>
		{
			struct cell possible = {line + pas, col + 1};
 8000ca0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	89fb      	ldrh	r3, [r7, #14]
 8000ca8:	4413      	add	r3, r2
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000cae:	89bb      	ldrh	r3, [r7, #12]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	84fb      	strh	r3, [r7, #38]	; 0x26
			possibilites[index] = possible;
 8000cb6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	6010      	str	r0, [r2, #0]
			index++;
 8000cca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000cce:	3301      	adds	r3, #1
 8000cd0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		}
	}
	// Controle colonne de droite en arriere : piece presente
	if(col < 7 && line != debut)
 8000cd4:	89bb      	ldrh	r3, [r7, #12]
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d876      	bhi.n	8000dc8 <calculPossibilitesRec+0x274>
 8000cda:	89fa      	ldrh	r2, [r7, #14]
 8000cdc:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d071      	beq.n	8000dc8 <calculPossibilitesRec+0x274>
	{
		if(chessboard[line - pas][col + 1].isFilled == 1)
 8000ce4:	89fa      	ldrh	r2, [r7, #14]
 8000ce6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000cea:	1ad2      	subs	r2, r2, r3
 8000cec:	89bb      	ldrh	r3, [r7, #12]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	4974      	ldr	r1, [pc, #464]	; (8000ec4 <calculPossibilitesRec+0x370>)
 8000cf2:	00d2      	lsls	r2, r2, #3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	440b      	add	r3, r1
 8000cfa:	795b      	ldrb	r3, [r3, #5]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d163      	bne.n	8000dc8 <calculPossibilitesRec+0x274>
		{
			if(chessboard[line - pas][col + 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000d00:	89fa      	ldrh	r2, [r7, #14]
 8000d02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d06:	1ad2      	subs	r2, r2, r3
 8000d08:	89bb      	ldrh	r3, [r7, #12]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	496d      	ldr	r1, [pc, #436]	; (8000ec4 <calculPossibilitesRec+0x370>)
 8000d0e:	00d2      	lsls	r2, r2, #3
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	440b      	add	r3, r1
 8000d16:	799b      	ldrb	r3, [r3, #6]
 8000d18:	7afa      	ldrb	r2, [r7, #11]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d054      	beq.n	8000dc8 <calculPossibilitesRec+0x274>
			else if((col <= 5) && (line - pas != debut)) // Assez de cases pour sauter
 8000d1e:	89bb      	ldrh	r3, [r7, #12]
 8000d20:	2b05      	cmp	r3, #5
 8000d22:	d851      	bhi.n	8000dc8 <calculPossibilitesRec+0x274>
 8000d24:	89fa      	ldrh	r2, [r7, #14]
 8000d26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d2a:	1ad2      	subs	r2, r2, r3
 8000d2c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d049      	beq.n	8000dc8 <calculPossibilitesRec+0x274>
			{
				if(chessboard[line - 2 * pas][col + 2].isFilled == 0) // Pas de piece apres le saut
 8000d34:	89fa      	ldrh	r2, [r7, #14]
 8000d36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	1ad2      	subs	r2, r2, r3
 8000d3e:	89bb      	ldrh	r3, [r7, #12]
 8000d40:	3302      	adds	r3, #2
 8000d42:	4960      	ldr	r1, [pc, #384]	; (8000ec4 <calculPossibilitesRec+0x370>)
 8000d44:	00d2      	lsls	r2, r2, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	440b      	add	r3, r1
 8000d4c:	795b      	ldrb	r3, [r3, #5]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d13a      	bne.n	8000dc8 <calculPossibilitesRec+0x274>
				{
					//=> Piece de l'autre couleur, place pour manger
					struct cell possible = {line - 2 * pas, col + 2};
 8000d52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	89fa      	ldrh	r2, [r7, #14]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	843b      	strh	r3, [r7, #32]
 8000d64:	89bb      	ldrh	r3, [r7, #12]
 8000d66:	3302      	adds	r3, #2
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	847b      	strh	r3, [r7, #34]	; 0x22
					possibilites[index] = possible;
 8000d6c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	461a      	mov	r2, r3
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	6818      	ldr	r0, [r3, #0]
 8000d7e:	6010      	str	r0, [r2, #0]
					index++;
 8000d80:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000d84:	3301      	adds	r3, #1
 8000d86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					nb_eaten++;
 8000d8a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000d8e:	3301      	adds	r3, #1
 8000d90:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					index = calculPossibilitesRec(line - 2 * pas, col + 2, color, possibilites, eaten, index, nb_eaten);
 8000d94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	89fa      	ldrh	r2, [r7, #14]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	b298      	uxth	r0, r3
 8000da4:	89bb      	ldrh	r3, [r7, #12]
 8000da6:	3302      	adds	r3, #2
 8000da8:	b299      	uxth	r1, r3
 8000daa:	7afa      	ldrb	r2, [r7, #11]
 8000dac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000db0:	9302      	str	r3, [sp, #8]
 8000db2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f7ff fec9 	bl	8000b54 <calculPossibilitesRec>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				}
			}
		}
	}
	// Controle de la colonne de gauche en avant :
	if(col > 0 && line != fin)
 8000dc8:	89bb      	ldrh	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 809a 	beq.w	8000f04 <calculPossibilitesRec+0x3b0>
 8000dd0:	89fa      	ldrh	r2, [r7, #14]
 8000dd2:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	f000 8094 	beq.w	8000f04 <calculPossibilitesRec+0x3b0>
	{
		// Controle colonne de gauche : piece presente
		if(chessboard[line + pas][col - 1].isFilled == 1)
 8000ddc:	89fa      	ldrh	r2, [r7, #14]
 8000dde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000de2:	441a      	add	r2, r3
 8000de4:	89bb      	ldrh	r3, [r7, #12]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4936      	ldr	r1, [pc, #216]	; (8000ec4 <calculPossibilitesRec+0x370>)
 8000dea:	00d2      	lsls	r2, r2, #3
 8000dec:	4413      	add	r3, r2
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	440b      	add	r3, r1
 8000df2:	795b      	ldrb	r3, [r3, #5]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d167      	bne.n	8000ec8 <calculPossibilitesRec+0x374>
		{
			if(chessboard[line + pas][col - 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000df8:	89fa      	ldrh	r2, [r7, #14]
 8000dfa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000dfe:	441a      	add	r2, r3
 8000e00:	89bb      	ldrh	r3, [r7, #12]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	492f      	ldr	r1, [pc, #188]	; (8000ec4 <calculPossibilitesRec+0x370>)
 8000e06:	00d2      	lsls	r2, r2, #3
 8000e08:	4413      	add	r3, r2
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	440b      	add	r3, r1
 8000e0e:	799b      	ldrb	r3, [r3, #6]
 8000e10:	7afa      	ldrb	r2, [r7, #11]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d076      	beq.n	8000f04 <calculPossibilitesRec+0x3b0>
			else if((col >= 2) && (line + pas != fin)) // Assez de cases pour sauter
 8000e16:	89bb      	ldrh	r3, [r7, #12]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d973      	bls.n	8000f04 <calculPossibilitesRec+0x3b0>
 8000e1c:	89fa      	ldrh	r2, [r7, #14]
 8000e1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e22:	441a      	add	r2, r3
 8000e24:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d06b      	beq.n	8000f04 <calculPossibilitesRec+0x3b0>
			{
				if(chessboard[line + 2 * pas][col - 2].isFilled == 0) // Pas de piece apres le saut
 8000e2c:	89fa      	ldrh	r2, [r7, #14]
 8000e2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	441a      	add	r2, r3
 8000e36:	89bb      	ldrh	r3, [r7, #12]
 8000e38:	3b02      	subs	r3, #2
 8000e3a:	4922      	ldr	r1, [pc, #136]	; (8000ec4 <calculPossibilitesRec+0x370>)
 8000e3c:	00d2      	lsls	r2, r2, #3
 8000e3e:	4413      	add	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	440b      	add	r3, r1
 8000e44:	795b      	ldrb	r3, [r3, #5]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d15c      	bne.n	8000f04 <calculPossibilitesRec+0x3b0>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line + 2 * pas, col - 2};
 8000e4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	89fb      	ldrh	r3, [r7, #14]
 8000e56:	4413      	add	r3, r2
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	83bb      	strh	r3, [r7, #28]
 8000e5c:	89bb      	ldrh	r3, [r7, #12]
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	83fb      	strh	r3, [r7, #30]
					possibilites[index] = possible;
 8000e64:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	461a      	mov	r2, r3
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	6818      	ldr	r0, [r3, #0]
 8000e76:	6010      	str	r0, [r2, #0]
					index++;
 8000e78:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					nb_eaten++;
 8000e82:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000e86:	3301      	adds	r3, #1
 8000e88:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					index = calculPossibilitesRec(line + 2 * pas, col - 2, color, possibilites, eaten, index, nb_eaten);
 8000e8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b298      	uxth	r0, r3
 8000e9c:	89bb      	ldrh	r3, [r7, #12]
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	b299      	uxth	r1, r3
 8000ea2:	7afa      	ldrb	r2, [r7, #11]
 8000ea4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000ea8:	9302      	str	r3, [sp, #8]
 8000eaa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f7ff fe4d 	bl	8000b54 <calculPossibilitesRec>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8000ec0:	e020      	b.n	8000f04 <calculPossibilitesRec+0x3b0>
 8000ec2:	bf00      	nop
 8000ec4:	200080cc 	.word	0x200080cc
				}
			}
		}
		// Controle colonne de gauche : pas de piece et pas en train de manger
		else if (nb_eaten == 0)
 8000ec8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d119      	bne.n	8000f04 <calculPossibilitesRec+0x3b0>
		{
			struct cell possible = {line + pas, col - 1};
 8000ed0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	89fb      	ldrh	r3, [r7, #14]
 8000ed8:	4413      	add	r3, r2
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	833b      	strh	r3, [r7, #24]
 8000ede:	89bb      	ldrh	r3, [r7, #12]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	837b      	strh	r3, [r7, #26]
			possibilites[index] = possible;
 8000ee6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	f107 0318 	add.w	r3, r7, #24
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	6010      	str	r0, [r2, #0]
			index++;
 8000efa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000efe:	3301      	adds	r3, #1
 8000f00:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		}
	}
	// Controle colonne de droite en arriere : piece presente
	if(col > 0 && line != debut)
 8000f04:	89bb      	ldrh	r3, [r7, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d076      	beq.n	8000ff8 <calculPossibilitesRec+0x4a4>
 8000f0a:	89fa      	ldrh	r2, [r7, #14]
 8000f0c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d071      	beq.n	8000ff8 <calculPossibilitesRec+0x4a4>
	{
		if(chessboard[line + pas][col - 1].isFilled == 1)
 8000f14:	89fa      	ldrh	r2, [r7, #14]
 8000f16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f1a:	441a      	add	r2, r3
 8000f1c:	89bb      	ldrh	r3, [r7, #12]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	4938      	ldr	r1, [pc, #224]	; (8001004 <calculPossibilitesRec+0x4b0>)
 8000f22:	00d2      	lsls	r2, r2, #3
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	795b      	ldrb	r3, [r3, #5]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d163      	bne.n	8000ff8 <calculPossibilitesRec+0x4a4>
		{
			if(chessboard[line - pas][col - 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000f30:	89fa      	ldrh	r2, [r7, #14]
 8000f32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f36:	1ad2      	subs	r2, r2, r3
 8000f38:	89bb      	ldrh	r3, [r7, #12]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	4931      	ldr	r1, [pc, #196]	; (8001004 <calculPossibilitesRec+0x4b0>)
 8000f3e:	00d2      	lsls	r2, r2, #3
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	799b      	ldrb	r3, [r3, #6]
 8000f48:	7afa      	ldrb	r2, [r7, #11]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d054      	beq.n	8000ff8 <calculPossibilitesRec+0x4a4>
			else if((col >= 2) && (line - pas != debut)) // Assez de cases pour sauter
 8000f4e:	89bb      	ldrh	r3, [r7, #12]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d951      	bls.n	8000ff8 <calculPossibilitesRec+0x4a4>
 8000f54:	89fa      	ldrh	r2, [r7, #14]
 8000f56:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f5a:	1ad2      	subs	r2, r2, r3
 8000f5c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d049      	beq.n	8000ff8 <calculPossibilitesRec+0x4a4>
			{
				if(chessboard[line - 2 * pas][col - 2].isFilled == 0) // Pas de piece apres le saut
 8000f64:	89fa      	ldrh	r2, [r7, #14]
 8000f66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	1ad2      	subs	r2, r2, r3
 8000f6e:	89bb      	ldrh	r3, [r7, #12]
 8000f70:	3b02      	subs	r3, #2
 8000f72:	4924      	ldr	r1, [pc, #144]	; (8001004 <calculPossibilitesRec+0x4b0>)
 8000f74:	00d2      	lsls	r2, r2, #3
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	795b      	ldrb	r3, [r3, #5]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d13a      	bne.n	8000ff8 <calculPossibilitesRec+0x4a4>
				{
					//Piece de l'autre couleur, place pour manger
					struct cell possible = {line - 2 * pas, col - 2};
 8000f82:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	89fa      	ldrh	r2, [r7, #14]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	82bb      	strh	r3, [r7, #20]
 8000f94:	89bb      	ldrh	r3, [r7, #12]
 8000f96:	3b02      	subs	r3, #2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	82fb      	strh	r3, [r7, #22]
					possibilites[index] = possible;
 8000f9c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	6010      	str	r0, [r2, #0]
					index++;
 8000fb0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
					nb_eaten++;
 8000fba:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
					index = calculPossibilitesRec(line - 2 * pas, col - 2, color, possibilites, eaten, index, nb_eaten);
 8000fc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	89fa      	ldrh	r2, [r7, #14]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	b298      	uxth	r0, r3
 8000fd4:	89bb      	ldrh	r3, [r7, #12]
 8000fd6:	3b02      	subs	r3, #2
 8000fd8:	b299      	uxth	r1, r3
 8000fda:	7afa      	ldrb	r2, [r7, #11]
 8000fdc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f7ff fdb1 	bl	8000b54 <calculPossibilitesRec>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				}
			}
		}
	}
	return index;
 8000ff8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c

}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3730      	adds	r7, #48	; 0x30
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200080cc 	.word	0x200080cc

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b0a4      	sub	sp, #144	; 0x90
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800101c:	2301      	movs	r3, #1
 800101e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001028:	f7ff fd2a 	bl	8000a80 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800102c:	f7ff fd4e 	bl	8000acc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001030:	f003 ff90 	bl	8004f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001034:	f000 f8f4 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001038:	f000 febc 	bl	8001db4 <MX_GPIO_Init>
  MX_ADC3_Init();
 800103c:	f000 f9b4 	bl	80013a8 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8001040:	f000 fa2e 	bl	80014a0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001044:	f000 fe66 	bl	8001d14 <MX_FMC_Init>
  MX_I2C1_Init();
 8001048:	f000 fa5c 	bl	8001504 <MX_I2C1_Init>
  MX_I2C3_Init();
 800104c:	f000 fa9a 	bl	8001584 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001050:	f000 fad8 	bl	8001604 <MX_LTDC_Init>
  MX_RTC_Init();
 8001054:	f000 fb58 	bl	8001708 <MX_RTC_Init>
  MX_SPI2_Init();
 8001058:	f000 fbfc 	bl	8001854 <MX_SPI2_Init>
  MX_TIM1_Init();
 800105c:	f000 fc38 	bl	80018d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001060:	f000 fc8a 	bl	8001978 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001064:	f000 fcd6 	bl	8001a14 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001068:	f000 fd22 	bl	8001ab0 <MX_TIM5_Init>
  MX_TIM8_Init();
 800106c:	f000 fd6e 	bl	8001b4c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001070:	f000 fdf0 	bl	8001c54 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001074:	f000 fe1e 	bl	8001cb4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001078:	f000 f944 	bl	8001304 <MX_ADC1_Init>
  MX_DAC_Init();
 800107c:	f000 f9e6 	bl	800144c <MX_DAC_Init>
  MX_UART7_Init();
 8001080:	f000 fdb8 	bl	8001bf4 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001084:	f001 fe46 	bl	8002d14 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001088:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800108c:	2000      	movs	r0, #0
 800108e:	f001 fed9 	bl	8002e44 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8001092:	f001 feaf 	bl	8002df4 <BSP_LCD_GetXSize>
 8001096:	4604      	mov	r4, r0
 8001098:	f001 fec0 	bl	8002e1c <BSP_LCD_GetYSize>
 800109c:	4603      	mov	r3, r0
 800109e:	fb03 f304 	mul.w	r3, r3, r4
 80010a2:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4619      	mov	r1, r3
 80010aa:	2001      	movs	r0, #1
 80010ac:	f001 feca 	bl	8002e44 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 80010b0:	f002 fa8e 	bl	80035d0 <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 80010b4:	2000      	movs	r0, #0
 80010b6:	f001 ff25 	bl	8002f04 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 80010ba:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80010be:	f001 ff7d 	bl	8002fbc <BSP_LCD_Clear>
    //BSP_LCD_DrawBitmap(0,0,(uint8_t*)HorombeRGB565_bmp);
    BSP_LCD_DrawBitmap(0,0,(uint8_t*)damier_bmp);
 80010c2:	4a48      	ldr	r2, [pc, #288]	; (80011e4 <main+0x1dc>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	2000      	movs	r0, #0
 80010c8:	f002 f930 	bl	800332c <BSP_LCD_DrawBitmap>
    BSP_LCD_SelectLayer(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f001 ff19 	bl	8002f04 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(0);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f001 ff72 	bl	8002fbc <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font12);
 80010d8:	4843      	ldr	r0, [pc, #268]	; (80011e8 <main+0x1e0>)
 80010da:	f001 ff55 	bl	8002f88 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80010de:	f04f 30ff 	mov.w	r0, #4294967295
 80010e2:	f001 ff1f 	bl	8002f24 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80010e6:	4841      	ldr	r0, [pc, #260]	; (80011ec <main+0x1e4>)
 80010e8:	f001 ff34 	bl	8002f54 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80010ec:	f001 fe82 	bl	8002df4 <BSP_LCD_GetXSize>
 80010f0:	4603      	mov	r3, r0
 80010f2:	b29c      	uxth	r4, r3
 80010f4:	f001 fe92 	bl	8002e1c <BSP_LCD_GetYSize>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	4619      	mov	r1, r3
 80010fe:	4620      	mov	r0, r4
 8001100:	f002 fdc0 	bl	8003c84 <BSP_TS_Init>
    BSP_TS_ITConfig();
 8001104:	f002 fdfe 	bl	8003d04 <BSP_TS_ITConfig>

	// Init potentiometre
	  sConfig.Channel = ADC_CHANNEL_6;
 8001108:	2306      	movs	r3, #6
 800110a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800110e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001112:	4619      	mov	r1, r3
 8001114:	4836      	ldr	r0, [pc, #216]	; (80011f0 <main+0x1e8>)
 8001116:	f004 f889 	bl	800522c <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 800111a:	4835      	ldr	r0, [pc, #212]	; (80011f0 <main+0x1e8>)
 800111c:	f003 ffb8 	bl	8005090 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
    mutexEcran = xSemaphoreCreateMutex();
 8001120:	2001      	movs	r0, #1
 8001122:	f00a fdaa 	bl	800bc7a <xQueueCreateMutex>
 8001126:	4603      	mov	r3, r0
 8001128:	4a32      	ldr	r2, [pc, #200]	; (80011f4 <main+0x1ec>)
 800112a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of queueSel */
  osMessageQDef(queueSel, 16, uint16_t);
 800112c:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <main+0x1f0>)
 800112e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001132:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001134:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queueSelHandle = osMessageCreate(osMessageQ(queueSel), NULL);
 8001138:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00a fb57 	bl	800b7f2 <osMessageCreate>
 8001144:	4603      	mov	r3, r0
 8001146:	4a2d      	ldr	r2, [pc, #180]	; (80011fc <main+0x1f4>)
 8001148:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task_init */
  osThreadDef(task_init, fonction_init, osPriorityAboveNormal, 0, 1024);
 800114a:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <main+0x1f8>)
 800114c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001150:	461d      	mov	r5, r3
 8001152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001156:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800115a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_initHandle = osThreadCreate(osThread(task_init), NULL);
 800115e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00a fae4 	bl	800b732 <osThreadCreate>
 800116a:	4603      	mov	r3, r0
 800116c:	4a25      	ldr	r2, [pc, #148]	; (8001204 <main+0x1fc>)
 800116e:	6013      	str	r3, [r2, #0]

  /* definition and creation of affichage */
  osThreadDef(affichage, fonction_affichage, osPriorityNormal, 0, 1024);
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <main+0x200>)
 8001172:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001176:	461d      	mov	r5, r3
 8001178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001180:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  affichageHandle = osThreadCreate(osThread(affichage), NULL);
 8001184:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f00a fad1 	bl	800b732 <osThreadCreate>
 8001190:	4603      	mov	r3, r0
 8001192:	4a1e      	ldr	r2, [pc, #120]	; (800120c <main+0x204>)
 8001194:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_select */
  osThreadDef(task_select, fonction_select, osPriorityHigh, 0, 256);
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <main+0x208>)
 8001198:	f107 041c 	add.w	r4, r7, #28
 800119c:	461d      	mov	r5, r3
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_selectHandle = osThreadCreate(osThread(task_select), NULL);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	2100      	movs	r1, #0
 80011b0:	4618      	mov	r0, r3
 80011b2:	f00a fabe 	bl	800b732 <osThreadCreate>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a16      	ldr	r2, [pc, #88]	; (8001214 <main+0x20c>)
 80011ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_calculPoss */
  osThreadDef(task_calculPoss, fonction_calculPossibilites, osPriorityBelowNormal, 0, 2048);
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <main+0x210>)
 80011be:	463c      	mov	r4, r7
 80011c0:	461d      	mov	r5, r3
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_calculPossHandle = osThreadCreate(osThread(task_calculPoss), NULL);
 80011ce:	463b      	mov	r3, r7
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f00a faad 	bl	800b732 <osThreadCreate>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a10      	ldr	r2, [pc, #64]	; (800121c <main+0x214>)
 80011dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011de:	f00a faa1 	bl	800b724 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <main+0x1da>
 80011e4:	0800e24c 	.word	0x0800e24c
 80011e8:	20000034 	.word	0x20000034
 80011ec:	ff0000ff 	.word	0xff0000ff
 80011f0:	20008460 	.word	0x20008460
 80011f4:	2000852c 	.word	0x2000852c
 80011f8:	0800e1c4 	.word	0x0800e1c4
 80011fc:	2000807c 	.word	0x2000807c
 8001200:	0800e1d4 	.word	0x0800e1d4
 8001204:	2000802c 	.word	0x2000802c
 8001208:	0800e1f0 	.word	0x0800e1f0
 800120c:	2000845c 	.word	0x2000845c
 8001210:	0800e20c 	.word	0x0800e20c
 8001214:	20008318 	.word	0x20008318
 8001218:	0800e228 	.word	0x0800e228
 800121c:	20008410 	.word	0x20008410

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	; 0x50
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	2230      	movs	r2, #48	; 0x30
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f00c fed4 	bl	800dfdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001244:	f006 fea6 	bl	8007f94 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001248:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <SystemClock_Config+0xdc>)
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	4a2b      	ldr	r2, [pc, #172]	; (80012fc <SystemClock_Config+0xdc>)
 800124e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001252:	6413      	str	r3, [r2, #64]	; 0x40
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <SystemClock_Config+0xdc>)
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <SystemClock_Config+0xe0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a26      	ldr	r2, [pc, #152]	; (8001300 <SystemClock_Config+0xe0>)
 8001266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <SystemClock_Config+0xe0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001278:	2309      	movs	r3, #9
 800127a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800127c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001282:	2301      	movs	r3, #1
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001286:	2302      	movs	r3, #2
 8001288:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001290:	2319      	movs	r3, #25
 8001292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001294:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001298:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129a:	2302      	movs	r3, #2
 800129c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800129e:	2309      	movs	r3, #9
 80012a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 0320 	add.w	r3, r7, #32
 80012a6:	4618      	mov	r0, r3
 80012a8:	f006 fed4 	bl	8008054 <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012b2:	f001 fb85 	bl	80029c0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012b6:	f006 fe7d 	bl	8007fb4 <HAL_PWREx_EnableOverDrive>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80012c0:	f001 fb7e 	bl	80029c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	230f      	movs	r3, #15
 80012c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c8:	2302      	movs	r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	2106      	movs	r1, #6
 80012e2:	4618      	mov	r0, r3
 80012e4:	f007 f95a 	bl	800859c <HAL_RCC_ClockConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80012ee:	f001 fb67 	bl	80029c0 <Error_Handler>
  }
}
 80012f2:	bf00      	nop
 80012f4:	3750      	adds	r7, #80	; 0x50
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40007000 	.word	0x40007000

08001304 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_ADC1_Init+0x98>)
 8001318:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <MX_ADC1_Init+0x9c>)
 800131a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_ADC1_Init+0x98>)
 800131e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001322:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_ADC1_Init+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_ADC1_Init+0x98>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_ADC1_Init+0x98>)
 8001332:	2200      	movs	r2, #0
 8001334:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_ADC1_Init+0x98>)
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_ADC1_Init+0x98>)
 8001340:	2200      	movs	r2, #0
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_ADC1_Init+0x98>)
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <MX_ADC1_Init+0xa0>)
 8001348:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_ADC1_Init+0x98>)
 800134c:	2200      	movs	r2, #0
 800134e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_ADC1_Init+0x98>)
 8001352:	2201      	movs	r2, #1
 8001354:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_ADC1_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_ADC1_Init+0x98>)
 8001360:	2201      	movs	r2, #1
 8001362:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_ADC1_Init+0x98>)
 8001366:	f003 fe4f 	bl	8005008 <HAL_ADC_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001370:	f001 fb26 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001374:	2300      	movs	r3, #0
 8001376:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001378:	2301      	movs	r3, #1
 800137a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800137c:	2300      	movs	r3, #0
 800137e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_ADC1_Init+0x98>)
 8001386:	f003 ff51 	bl	800522c <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001390:	f001 fb16 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20008414 	.word	0x20008414
 80013a0:	40012000 	.word	0x40012000
 80013a4:	0f000001 	.word	0x0f000001

080013a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ae:	463b      	mov	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80013ba:	4b21      	ldr	r3, [pc, #132]	; (8001440 <MX_ADC3_Init+0x98>)
 80013bc:	4a21      	ldr	r2, [pc, #132]	; (8001444 <MX_ADC3_Init+0x9c>)
 80013be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <MX_ADC3_Init+0x98>)
 80013c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013c6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013c8:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_ADC3_Init+0x98>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <MX_ADC3_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_ADC3_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013da:	4b19      	ldr	r3, [pc, #100]	; (8001440 <MX_ADC3_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_ADC3_Init+0x98>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_ADC3_Init+0x98>)
 80013ea:	4a17      	ldr	r2, [pc, #92]	; (8001448 <MX_ADC3_Init+0xa0>)
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_ADC3_Init+0x98>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_ADC3_Init+0x98>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_ADC3_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_ADC3_Init+0x98>)
 8001404:	2201      	movs	r2, #1
 8001406:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <MX_ADC3_Init+0x98>)
 800140a:	f003 fdfd 	bl	8005008 <HAL_ADC_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001414:	f001 fad4 	bl	80029c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001418:	2306      	movs	r3, #6
 800141a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800141c:	2301      	movs	r3, #1
 800141e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_ADC3_Init+0x98>)
 800142a:	f003 feff 	bl	800522c <HAL_ADC_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001434:	f001 fac4 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20008460 	.word	0x20008460
 8001444:	40012200 	.word	0x40012200
 8001448:	0f000001 	.word	0x0f000001

0800144c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_DAC_Init+0x4c>)
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <MX_DAC_Init+0x50>)
 800145e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001460:	480d      	ldr	r0, [pc, #52]	; (8001498 <MX_DAC_Init+0x4c>)
 8001462:	f004 fa15 	bl	8005890 <HAL_DAC_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800146c:	f001 faa8 	bl	80029c0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001470:	2300      	movs	r3, #0
 8001472:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001478:	463b      	mov	r3, r7
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	; (8001498 <MX_DAC_Init+0x4c>)
 8001480:	f004 fa8c 	bl	800599c <HAL_DAC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800148a:	f001 fa99 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20008530 	.word	0x20008530
 800149c:	40007400 	.word	0x40007400

080014a0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_DMA2D_Init+0x5c>)
 80014a6:	4a16      	ldr	r2, [pc, #88]	; (8001500 <MX_DMA2D_Init+0x60>)
 80014a8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_DMA2D_Init+0x5c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_DMA2D_Init+0x5c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_DMA2D_Init+0x5c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_DMA2D_Init+0x5c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_DMA2D_Init+0x5c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_DMA2D_Init+0x5c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_DMA2D_Init+0x5c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80014d4:	4809      	ldr	r0, [pc, #36]	; (80014fc <MX_DMA2D_Init+0x5c>)
 80014d6:	f004 fd0b 	bl	8005ef0 <HAL_DMA2D_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80014e0:	f001 fa6e 	bl	80029c0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80014e4:	2101      	movs	r1, #1
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_DMA2D_Init+0x5c>)
 80014e8:	f004 ff70 	bl	80063cc <HAL_DMA2D_ConfigLayer>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80014f2:	f001 fa65 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20008634 	.word	0x20008634
 8001500:	4002b000 	.word	0x4002b000

08001504 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_I2C1_Init+0x74>)
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <MX_I2C1_Init+0x78>)
 800150c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_I2C1_Init+0x74>)
 8001510:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <MX_I2C1_Init+0x7c>)
 8001512:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_I2C1_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_I2C1_Init+0x74>)
 800151c:	2201      	movs	r2, #1
 800151e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_I2C1_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_I2C1_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_I2C1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_I2C1_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <MX_I2C1_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800153e:	480e      	ldr	r0, [pc, #56]	; (8001578 <MX_I2C1_Init+0x74>)
 8001540:	f005 fb76 	bl	8006c30 <HAL_I2C_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800154a:	f001 fa39 	bl	80029c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800154e:	2100      	movs	r1, #0
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <MX_I2C1_Init+0x74>)
 8001552:	f006 f90f 	bl	8007774 <HAL_I2CEx_ConfigAnalogFilter>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800155c:	f001 fa30 	bl	80029c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001560:	2100      	movs	r1, #0
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_I2C1_Init+0x74>)
 8001564:	f006 f951 	bl	800780a <HAL_I2CEx_ConfigDigitalFilter>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800156e:	f001 fa27 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20008080 	.word	0x20008080
 800157c:	40005400 	.word	0x40005400
 8001580:	00c0eaff 	.word	0x00c0eaff

08001584 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_I2C3_Init+0x74>)
 800158a:	4a1c      	ldr	r2, [pc, #112]	; (80015fc <MX_I2C3_Init+0x78>)
 800158c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_I2C3_Init+0x74>)
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <MX_I2C3_Init+0x7c>)
 8001592:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_I2C3_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <MX_I2C3_Init+0x74>)
 800159c:	2201      	movs	r2, #1
 800159e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <MX_I2C3_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80015a6:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_I2C3_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015ac:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_I2C3_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_I2C3_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <MX_I2C3_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015be:	480e      	ldr	r0, [pc, #56]	; (80015f8 <MX_I2C3_Init+0x74>)
 80015c0:	f005 fb36 	bl	8006c30 <HAL_I2C_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80015ca:	f001 f9f9 	bl	80029c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	4809      	ldr	r0, [pc, #36]	; (80015f8 <MX_I2C3_Init+0x74>)
 80015d2:	f006 f8cf 	bl	8007774 <HAL_I2CEx_ConfigAnalogFilter>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015dc:	f001 f9f0 	bl	80029c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015e0:	2100      	movs	r1, #0
 80015e2:	4805      	ldr	r0, [pc, #20]	; (80015f8 <MX_I2C3_Init+0x74>)
 80015e4:	f006 f911 	bl	800780a <HAL_I2CEx_ConfigDigitalFilter>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015ee:	f001 f9e7 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20007ef8 	.word	0x20007ef8
 80015fc:	40005c00 	.word	0x40005c00
 8001600:	00c0eaff 	.word	0x00c0eaff

08001604 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08e      	sub	sp, #56	; 0x38
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2234      	movs	r2, #52	; 0x34
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f00c fce3 	bl	800dfdc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001616:	4b3a      	ldr	r3, [pc, #232]	; (8001700 <MX_LTDC_Init+0xfc>)
 8001618:	4a3a      	ldr	r2, [pc, #232]	; (8001704 <MX_LTDC_Init+0x100>)
 800161a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800161c:	4b38      	ldr	r3, [pc, #224]	; (8001700 <MX_LTDC_Init+0xfc>)
 800161e:	2200      	movs	r2, #0
 8001620:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001622:	4b37      	ldr	r3, [pc, #220]	; (8001700 <MX_LTDC_Init+0xfc>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <MX_LTDC_Init+0xfc>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800162e:	4b34      	ldr	r3, [pc, #208]	; (8001700 <MX_LTDC_Init+0xfc>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001634:	4b32      	ldr	r3, [pc, #200]	; (8001700 <MX_LTDC_Init+0xfc>)
 8001636:	2228      	movs	r2, #40	; 0x28
 8001638:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800163a:	4b31      	ldr	r3, [pc, #196]	; (8001700 <MX_LTDC_Init+0xfc>)
 800163c:	2209      	movs	r2, #9
 800163e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <MX_LTDC_Init+0xfc>)
 8001642:	2235      	movs	r2, #53	; 0x35
 8001644:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001646:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <MX_LTDC_Init+0xfc>)
 8001648:	220b      	movs	r2, #11
 800164a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <MX_LTDC_Init+0xfc>)
 800164e:	f240 2215 	movw	r2, #533	; 0x215
 8001652:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <MX_LTDC_Init+0xfc>)
 8001656:	f240 121b 	movw	r2, #283	; 0x11b
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <MX_LTDC_Init+0xfc>)
 800165e:	f240 2235 	movw	r2, #565	; 0x235
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001664:	4b26      	ldr	r3, [pc, #152]	; (8001700 <MX_LTDC_Init+0xfc>)
 8001666:	f240 121d 	movw	r2, #285	; 0x11d
 800166a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <MX_LTDC_Init+0xfc>)
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <MX_LTDC_Init+0xfc>)
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800167c:	4b20      	ldr	r3, [pc, #128]	; (8001700 <MX_LTDC_Init+0xfc>)
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001684:	481e      	ldr	r0, [pc, #120]	; (8001700 <MX_LTDC_Init+0xfc>)
 8001686:	f006 f90d 	bl	80078a4 <HAL_LTDC_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001690:	f001 f996 	bl	80029c0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001698:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800169c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80016a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80016a6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80016a8:	2302      	movs	r3, #2
 80016aa:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80016ac:	23ff      	movs	r3, #255	; 0xff
 80016ae:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80016b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016b8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80016ba:	2307      	movs	r3, #7
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80016be:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80016c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80016ca:	f44f 7388 	mov.w	r3, #272	; 0x110
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_LTDC_Init+0xfc>)
 80016ea:	f006 fa6d 	bl	8007bc8 <HAL_LTDC_ConfigLayer>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80016f4:	f001 f964 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	3738      	adds	r7, #56	; 0x38
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20008368 	.word	0x20008368
 8001704:	40016800 	.word	0x40016800

08001708 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b092      	sub	sp, #72	; 0x48
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800170e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001724:	463b      	mov	r3, r7
 8001726:	222c      	movs	r2, #44	; 0x2c
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f00c fc56 	bl	800dfdc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001730:	4b46      	ldr	r3, [pc, #280]	; (800184c <MX_RTC_Init+0x144>)
 8001732:	4a47      	ldr	r2, [pc, #284]	; (8001850 <MX_RTC_Init+0x148>)
 8001734:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001736:	4b45      	ldr	r3, [pc, #276]	; (800184c <MX_RTC_Init+0x144>)
 8001738:	2200      	movs	r2, #0
 800173a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800173c:	4b43      	ldr	r3, [pc, #268]	; (800184c <MX_RTC_Init+0x144>)
 800173e:	227f      	movs	r2, #127	; 0x7f
 8001740:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001742:	4b42      	ldr	r3, [pc, #264]	; (800184c <MX_RTC_Init+0x144>)
 8001744:	22ff      	movs	r2, #255	; 0xff
 8001746:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <MX_RTC_Init+0x144>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800174e:	4b3f      	ldr	r3, [pc, #252]	; (800184c <MX_RTC_Init+0x144>)
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001754:	4b3d      	ldr	r3, [pc, #244]	; (800184c <MX_RTC_Init+0x144>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800175a:	483c      	ldr	r0, [pc, #240]	; (800184c <MX_RTC_Init+0x144>)
 800175c:	f007 fd16 	bl	800918c <HAL_RTC_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001766:	f001 f92b 	bl	80029c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001776:	2300      	movs	r3, #0
 8001778:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800177c:	2300      	movs	r3, #0
 800177e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001788:	2201      	movs	r2, #1
 800178a:	4619      	mov	r1, r3
 800178c:	482f      	ldr	r0, [pc, #188]	; (800184c <MX_RTC_Init+0x144>)
 800178e:	f007 fd8f 	bl	80092b0 <HAL_RTC_SetTime>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001798:	f001 f912 	bl	80029c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800179c:	2301      	movs	r3, #1
 800179e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b8:	2201      	movs	r2, #1
 80017ba:	4619      	mov	r1, r3
 80017bc:	4823      	ldr	r0, [pc, #140]	; (800184c <MX_RTC_Init+0x144>)
 80017be:	f007 fe35 	bl	800942c <HAL_RTC_SetDate>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80017c8:	f001 f8fa 	bl	80029c0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017dc:	2300      	movs	r3, #0
 80017de:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80017f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	2201      	movs	r2, #1
 8001800:	4619      	mov	r1, r3
 8001802:	4812      	ldr	r0, [pc, #72]	; (800184c <MX_RTC_Init+0x144>)
 8001804:	f007 feba 	bl	800957c <HAL_RTC_SetAlarm>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800180e:	f001 f8d7 	bl	80029c0 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	2201      	movs	r2, #1
 800181c:	4619      	mov	r1, r3
 800181e:	480b      	ldr	r0, [pc, #44]	; (800184c <MX_RTC_Init+0x144>)
 8001820:	f007 feac 	bl	800957c <HAL_RTC_SetAlarm>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800182a:	f001 f8c9 	bl	80029c0 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800182e:	2202      	movs	r2, #2
 8001830:	2100      	movs	r1, #0
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <MX_RTC_Init+0x144>)
 8001834:	f008 f82c 	bl	8009890 <HAL_RTCEx_SetTimeStamp>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800183e:	f001 f8bf 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	3748      	adds	r7, #72	; 0x48
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20008544 	.word	0x20008544
 8001850:	40002800 	.word	0x40002800

08001854 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <MX_SPI2_Init+0x74>)
 800185a:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <MX_SPI2_Init+0x78>)
 800185c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_SPI2_Init+0x74>)
 8001860:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001864:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <MX_SPI2_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800186c:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <MX_SPI2_Init+0x74>)
 800186e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001872:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_SPI2_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <MX_SPI2_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_SPI2_Init+0x74>)
 8001882:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001886:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_SPI2_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_SPI2_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_SPI2_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_SPI2_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_SPI2_Init+0x74>)
 80018a2:	2207      	movs	r2, #7
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_SPI2_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_SPI2_Init+0x74>)
 80018ae:	2208      	movs	r2, #8
 80018b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_SPI2_Init+0x74>)
 80018b4:	f008 f8d3 	bl	8009a5e <HAL_SPI_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80018be:	f001 f87f 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20007f44 	.word	0x20007f44
 80018cc:	40003800 	.word	0x40003800

080018d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0310 	add.w	r3, r7, #16
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <MX_TIM1_Init+0xa0>)
 80018f0:	4a20      	ldr	r2, [pc, #128]	; (8001974 <MX_TIM1_Init+0xa4>)
 80018f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <MX_TIM1_Init+0xa0>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <MX_TIM1_Init+0xa0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <MX_TIM1_Init+0xa0>)
 8001902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001906:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <MX_TIM1_Init+0xa0>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800190e:	4b18      	ldr	r3, [pc, #96]	; (8001970 <MX_TIM1_Init+0xa0>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <MX_TIM1_Init+0xa0>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800191a:	4815      	ldr	r0, [pc, #84]	; (8001970 <MX_TIM1_Init+0xa0>)
 800191c:	f008 f94a 	bl	8009bb4 <HAL_TIM_Base_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001926:	f001 f84b 	bl	80029c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4619      	mov	r1, r3
 8001936:	480e      	ldr	r0, [pc, #56]	; (8001970 <MX_TIM1_Init+0xa0>)
 8001938:	f008 fb2c 	bl	8009f94 <HAL_TIM_ConfigClockSource>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001942:	f001 f83d 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4806      	ldr	r0, [pc, #24]	; (8001970 <MX_TIM1_Init+0xa0>)
 8001958:	f008 fd48 	bl	800a3ec <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001962:	f001 f82d 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001966:	bf00      	nop
 8001968:	3720      	adds	r7, #32
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20008564 	.word	0x20008564
 8001974:	40010000 	.word	0x40010000

08001978 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197e:	f107 0310 	add.w	r3, r7, #16
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <MX_TIM2_Init+0x98>)
 8001998:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800199c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <MX_TIM2_Init+0x98>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_TIM2_Init+0x98>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <MX_TIM2_Init+0x98>)
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b2:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <MX_TIM2_Init+0x98>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b8:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_TIM2_Init+0x98>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019be:	4814      	ldr	r0, [pc, #80]	; (8001a10 <MX_TIM2_Init+0x98>)
 80019c0:	f008 f8f8 	bl	8009bb4 <HAL_TIM_Base_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80019ca:	f000 fff9 	bl	80029c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4619      	mov	r1, r3
 80019da:	480d      	ldr	r0, [pc, #52]	; (8001a10 <MX_TIM2_Init+0x98>)
 80019dc:	f008 fada 	bl	8009f94 <HAL_TIM_ConfigClockSource>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019e6:	f000 ffeb 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	4619      	mov	r1, r3
 80019f6:	4806      	ldr	r0, [pc, #24]	; (8001a10 <MX_TIM2_Init+0x98>)
 80019f8:	f008 fcf8 	bl	800a3ec <HAL_TIMEx_MasterConfigSynchronization>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a02:	f000 ffdd 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	3720      	adds	r7, #32
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20008674 	.word	0x20008674

08001a14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a34:	4a1d      	ldr	r2, [pc, #116]	; (8001aac <MX_TIM3_Init+0x98>)
 8001a36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4c:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a58:	4813      	ldr	r0, [pc, #76]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a5a:	f008 f8ab 	bl	8009bb4 <HAL_TIM_Base_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a64:	f000 ffac 	bl	80029c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	4619      	mov	r1, r3
 8001a74:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a76:	f008 fa8d 	bl	8009f94 <HAL_TIM_ConfigClockSource>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a80:	f000 ff9e 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_TIM3_Init+0x94>)
 8001a92:	f008 fcab 	bl	800a3ec <HAL_TIMEx_MasterConfigSynchronization>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a9c:	f000 ff90 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	3720      	adds	r7, #32
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000831c 	.word	0x2000831c
 8001aac:	40000400 	.word	0x40000400

08001ab0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <MX_TIM5_Init+0x94>)
 8001ad0:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <MX_TIM5_Init+0x98>)
 8001ad2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <MX_TIM5_Init+0x94>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <MX_TIM5_Init+0x94>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <MX_TIM5_Init+0x94>)
 8001ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <MX_TIM5_Init+0x94>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <MX_TIM5_Init+0x94>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001af4:	4813      	ldr	r0, [pc, #76]	; (8001b44 <MX_TIM5_Init+0x94>)
 8001af6:	f008 f85d 	bl	8009bb4 <HAL_TIM_Base_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001b00:	f000 ff5e 	bl	80029c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b0a:	f107 0310 	add.w	r3, r7, #16
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480c      	ldr	r0, [pc, #48]	; (8001b44 <MX_TIM5_Init+0x94>)
 8001b12:	f008 fa3f 	bl	8009f94 <HAL_TIM_ConfigClockSource>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001b1c:	f000 ff50 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_TIM5_Init+0x94>)
 8001b2e:	f008 fc5d 	bl	800a3ec <HAL_TIMEx_MasterConfigSynchronization>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001b38:	f000 ff42 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200082cc 	.word	0x200082cc
 8001b48:	40000c00 	.word	0x40000c00

08001b4c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	f107 0310 	add.w	r3, r7, #16
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <MX_TIM8_Init+0xa0>)
 8001b6c:	4a20      	ldr	r2, [pc, #128]	; (8001bf0 <MX_TIM8_Init+0xa4>)
 8001b6e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b70:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <MX_TIM8_Init+0xa0>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <MX_TIM8_Init+0xa0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <MX_TIM8_Init+0xa0>)
 8001b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b82:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <MX_TIM8_Init+0xa0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <MX_TIM8_Init+0xa0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b90:	4b16      	ldr	r3, [pc, #88]	; (8001bec <MX_TIM8_Init+0xa0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b96:	4815      	ldr	r0, [pc, #84]	; (8001bec <MX_TIM8_Init+0xa0>)
 8001b98:	f008 f80c 	bl	8009bb4 <HAL_TIM_Base_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001ba2:	f000 ff0d 	bl	80029c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001baa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480e      	ldr	r0, [pc, #56]	; (8001bec <MX_TIM8_Init+0xa0>)
 8001bb4:	f008 f9ee 	bl	8009f94 <HAL_TIM_ConfigClockSource>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001bbe:	f000 feff 	bl	80029c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4806      	ldr	r0, [pc, #24]	; (8001bec <MX_TIM8_Init+0xa0>)
 8001bd4:	f008 fc0a 	bl	800a3ec <HAL_TIMEx_MasterConfigSynchronization>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001bde:	f000 feef 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20008030 	.word	0x20008030
 8001bf0:	40010400 	.word	0x40010400

08001bf4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <MX_UART7_Init+0x58>)
 8001bfa:	4a15      	ldr	r2, [pc, #84]	; (8001c50 <MX_UART7_Init+0x5c>)
 8001bfc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <MX_UART7_Init+0x58>)
 8001c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c04:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <MX_UART7_Init+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <MX_UART7_Init+0x58>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	; (8001c4c <MX_UART7_Init+0x58>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <MX_UART7_Init+0x58>)
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <MX_UART7_Init+0x58>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_UART7_Init+0x58>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <MX_UART7_Init+0x58>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <MX_UART7_Init+0x58>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001c36:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_UART7_Init+0x58>)
 8001c38:	f008 fc84 	bl	800a544 <HAL_UART_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001c42:	f000 febd 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20007fa8 	.word	0x20007fa8
 8001c50:	40007800 	.word	0x40007800

08001c54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c5a:	4a15      	ldr	r2, [pc, #84]	; (8001cb0 <MX_USART1_UART_Init+0x5c>)
 8001c5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c5e:	4b13      	ldr	r3, [pc, #76]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c78:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c96:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_USART1_UART_Init+0x58>)
 8001c98:	f008 fc54 	bl	800a544 <HAL_UART_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ca2:	f000 fe8d 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200084a8 	.word	0x200084a8
 8001cb0:	40011000 	.word	0x40011000

08001cb4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <MX_USART6_UART_Init+0x58>)
 8001cba:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <MX_USART6_UART_Init+0x5c>)
 8001cbc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <MX_USART6_UART_Init+0x58>)
 8001cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_USART6_UART_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <MX_USART6_UART_Init+0x58>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_USART6_UART_Init+0x58>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_USART6_UART_Init+0x58>)
 8001cda:	220c      	movs	r2, #12
 8001cdc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_USART6_UART_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_USART6_UART_Init+0x58>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_USART6_UART_Init+0x58>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_USART6_UART_Init+0x58>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_USART6_UART_Init+0x58>)
 8001cf8:	f008 fc24 	bl	800a544 <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001d02:	f000 fe5d 	bl	80029c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200085b0 	.word	0x200085b0
 8001d10:	40011400 	.word	0x40011400

08001d14 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
 8001d28:	615a      	str	r2, [r3, #20]
 8001d2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <MX_FMC_Init+0x98>)
 8001d2e:	4a20      	ldr	r2, [pc, #128]	; (8001db0 <MX_FMC_Init+0x9c>)
 8001d30:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <MX_FMC_Init+0x98>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001d38:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <MX_FMC_Init+0x98>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <MX_FMC_Init+0x98>)
 8001d40:	2204      	movs	r2, #4
 8001d42:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <MX_FMC_Init+0x98>)
 8001d46:	2210      	movs	r2, #16
 8001d48:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	; (8001dac <MX_FMC_Init+0x98>)
 8001d4c:	2240      	movs	r2, #64	; 0x40
 8001d4e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <MX_FMC_Init+0x98>)
 8001d52:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001d56:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <MX_FMC_Init+0x98>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <MX_FMC_Init+0x98>)
 8001d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d64:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_FMC_Init+0x98>)
 8001d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <MX_FMC_Init+0x98>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001d74:	2302      	movs	r3, #2
 8001d76:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001d78:	2307      	movs	r3, #7
 8001d7a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001d80:	2307      	movs	r3, #7
 8001d82:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001d84:	2303      	movs	r3, #3
 8001d86:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	4619      	mov	r1, r3
 8001d94:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_FMC_Init+0x98>)
 8001d96:	f007 fdd1 	bl	800993c <HAL_SDRAM_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001da0:	f000 fe0e 	bl	80029c0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001da4:	bf00      	nop
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	200086c0 	.word	0x200086c0
 8001db0:	a0000140 	.word	0xa0000140

08001db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b090      	sub	sp, #64	; 0x40
 8001db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dca:	4baf      	ldr	r3, [pc, #700]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4aae      	ldr	r2, [pc, #696]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001dd0:	f043 0310 	orr.w	r3, r3, #16
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4bac      	ldr	r3, [pc, #688]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8001de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de2:	4ba9      	ldr	r3, [pc, #676]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4aa8      	ldr	r2, [pc, #672]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4ba6      	ldr	r3, [pc, #664]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	4ba3      	ldr	r3, [pc, #652]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4aa2      	ldr	r2, [pc, #648]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4ba0      	ldr	r3, [pc, #640]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	623b      	str	r3, [r7, #32]
 8001e10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e12:	4b9d      	ldr	r3, [pc, #628]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a9c      	ldr	r2, [pc, #624]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e18:	f043 0308 	orr.w	r3, r3, #8
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b9a      	ldr	r3, [pc, #616]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2a:	4b97      	ldr	r3, [pc, #604]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a96      	ldr	r2, [pc, #600]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b94      	ldr	r3, [pc, #592]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	61bb      	str	r3, [r7, #24]
 8001e40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	4b91      	ldr	r3, [pc, #580]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a90      	ldr	r2, [pc, #576]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b8e      	ldr	r3, [pc, #568]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e5a:	4b8b      	ldr	r3, [pc, #556]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a8a      	ldr	r2, [pc, #552]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b88      	ldr	r3, [pc, #544]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e72:	4b85      	ldr	r3, [pc, #532]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a84      	ldr	r2, [pc, #528]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b82      	ldr	r3, [pc, #520]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e8a:	4b7f      	ldr	r3, [pc, #508]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a7e      	ldr	r2, [pc, #504]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ea2:	4b79      	ldr	r3, [pc, #484]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a78      	ldr	r2, [pc, #480]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001ea8:	f043 0320 	orr.w	r3, r3, #32
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b76      	ldr	r3, [pc, #472]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eba:	4b73      	ldr	r3, [pc, #460]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a72      	ldr	r2, [pc, #456]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b70      	ldr	r3, [pc, #448]	; (8002088 <MX_GPIO_Init+0x2d4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2160      	movs	r1, #96	; 0x60
 8001ed6:	486d      	ldr	r0, [pc, #436]	; (800208c <MX_GPIO_Init+0x2d8>)
 8001ed8:	f004 fe5e 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001edc:	2201      	movs	r2, #1
 8001ede:	2120      	movs	r1, #32
 8001ee0:	486b      	ldr	r0, [pc, #428]	; (8002090 <MX_GPIO_Init+0x2dc>)
 8001ee2:	f004 fe59 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2108      	movs	r1, #8
 8001eea:	4869      	ldr	r0, [pc, #420]	; (8002090 <MX_GPIO_Init+0x2dc>)
 8001eec:	f004 fe54 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2108      	movs	r1, #8
 8001ef4:	4867      	ldr	r0, [pc, #412]	; (8002094 <MX_GPIO_Init+0x2e0>)
 8001ef6:	f004 fe4f 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001efa:	2201      	movs	r2, #1
 8001efc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f00:	4865      	ldr	r0, [pc, #404]	; (8002098 <MX_GPIO_Init+0x2e4>)
 8001f02:	f004 fe49 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001f06:	2200      	movs	r2, #0
 8001f08:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001f0c:	4863      	ldr	r0, [pc, #396]	; (800209c <MX_GPIO_Init+0x2e8>)
 8001f0e:	f004 fe43 	bl	8006b98 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001f12:	2200      	movs	r2, #0
 8001f14:	21c8      	movs	r1, #200	; 0xc8
 8001f16:	4862      	ldr	r0, [pc, #392]	; (80020a0 <MX_GPIO_Init+0x2ec>)
 8001f18:	f004 fe3e 	bl	8006b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f20:	2300      	movs	r3, #0
 8001f22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4857      	ldr	r0, [pc, #348]	; (800208c <MX_GPIO_Init+0x2d8>)
 8001f30:	f004 fb7a 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001f34:	2304      	movs	r3, #4
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f44:	2309      	movs	r3, #9
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001f48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	484f      	ldr	r0, [pc, #316]	; (800208c <MX_GPIO_Init+0x2d8>)
 8001f50:	f004 fb6a 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001f54:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f66:	230b      	movs	r3, #11
 8001f68:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f6e:	4619      	mov	r1, r3
 8001f70:	484b      	ldr	r0, [pc, #300]	; (80020a0 <MX_GPIO_Init+0x2ec>)
 8001f72:	f004 fb59 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001f76:	f643 0323 	movw	r3, #14371	; 0x3823
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f88:	230a      	movs	r3, #10
 8001f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f90:	4619      	mov	r1, r3
 8001f92:	4844      	ldr	r0, [pc, #272]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 8001f94:	f004 fb48 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001fa8:	2308      	movs	r3, #8
 8001faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001fac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4837      	ldr	r0, [pc, #220]	; (8002090 <MX_GPIO_Init+0x2dc>)
 8001fb4:	f004 fb38 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001fb8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001fca:	230c      	movs	r3, #12
 8001fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4834      	ldr	r0, [pc, #208]	; (80020a8 <MX_GPIO_Init+0x2f4>)
 8001fd6:	f004 fb27 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_6;
 8001fda:	f248 1340 	movw	r3, #33088	; 0x8140
 8001fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fec:	4619      	mov	r1, r3
 8001fee:	482f      	ldr	r0, [pc, #188]	; (80020ac <MX_GPIO_Init+0x2f8>)
 8001ff0:	f004 fb1a 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001ff4:	2360      	movs	r3, #96	; 0x60
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002000:	2300      	movs	r3, #0
 8002002:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002008:	4619      	mov	r1, r3
 800200a:	4820      	ldr	r0, [pc, #128]	; (800208c <MX_GPIO_Init+0x2d8>)
 800200c:	f004 fb0c 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002010:	2340      	movs	r3, #64	; 0x40
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002020:	230a      	movs	r3, #10
 8002022:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002028:	4619      	mov	r1, r3
 800202a:	481e      	ldr	r0, [pc, #120]	; (80020a4 <MX_GPIO_Init+0x2f0>)
 800202c:	f004 fafc 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002034:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002036:	2300      	movs	r3, #0
 8002038:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800203e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002042:	4619      	mov	r1, r3
 8002044:	481a      	ldr	r0, [pc, #104]	; (80020b0 <MX_GPIO_Init+0x2fc>)
 8002046:	f004 faef 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800204a:	2340      	movs	r3, #64	; 0x40
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800204e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002058:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800205c:	4619      	mov	r1, r3
 800205e:	480c      	ldr	r0, [pc, #48]	; (8002090 <MX_GPIO_Init+0x2dc>)
 8002060:	f004 fae2 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8002064:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002076:	230a      	movs	r3, #10
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800207e:	4619      	mov	r1, r3
 8002080:	480a      	ldr	r0, [pc, #40]	; (80020ac <MX_GPIO_Init+0x2f8>)
 8002082:	f004 fad1 	bl	8006628 <HAL_GPIO_Init>
 8002086:	e015      	b.n	80020b4 <MX_GPIO_Init+0x300>
 8002088:	40023800 	.word	0x40023800
 800208c:	40021000 	.word	0x40021000
 8002090:	40020c00 	.word	0x40020c00
 8002094:	40022800 	.word	0x40022800
 8002098:	40022000 	.word	0x40022000
 800209c:	40021c00 	.word	0x40021c00
 80020a0:	40021800 	.word	0x40021800
 80020a4:	40020400 	.word	0x40020400
 80020a8:	40020800 	.word	0x40020800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80020b4:	23f0      	movs	r3, #240	; 0xf0
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80020c4:	230a      	movs	r3, #10
 80020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020cc:	4619      	mov	r1, r3
 80020ce:	4895      	ldr	r0, [pc, #596]	; (8002324 <MX_GPIO_Init+0x570>)
 80020d0:	f004 faaa 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80020d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80020e6:	230a      	movs	r3, #10
 80020e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ee:	4619      	mov	r1, r3
 80020f0:	488d      	ldr	r0, [pc, #564]	; (8002328 <MX_GPIO_Init+0x574>)
 80020f2:	f004 fa99 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 80020f6:	2328      	movs	r3, #40	; 0x28
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800210a:	4619      	mov	r1, r3
 800210c:	4887      	ldr	r0, [pc, #540]	; (800232c <MX_GPIO_Init+0x578>)
 800210e:	f004 fa8b 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002112:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002118:	2300      	movs	r3, #0
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002124:	4619      	mov	r1, r3
 8002126:	4882      	ldr	r0, [pc, #520]	; (8002330 <MX_GPIO_Init+0x57c>)
 8002128:	f004 fa7e 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800212c:	2308      	movs	r3, #8
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002130:	2301      	movs	r3, #1
 8002132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800213c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002140:	4619      	mov	r1, r3
 8002142:	487c      	ldr	r0, [pc, #496]	; (8002334 <MX_GPIO_Init+0x580>)
 8002144:	f004 fa70 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002148:	f44f 7301 	mov.w	r3, #516	; 0x204
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214e:	2300      	movs	r3, #0
 8002150:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800215a:	4619      	mov	r1, r3
 800215c:	4872      	ldr	r0, [pc, #456]	; (8002328 <MX_GPIO_Init+0x574>)
 800215e:	f004 fa63 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002162:	2310      	movs	r3, #16
 8002164:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002166:	2300      	movs	r3, #0
 8002168:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800216e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002172:	4619      	mov	r1, r3
 8002174:	486d      	ldr	r0, [pc, #436]	; (800232c <MX_GPIO_Init+0x578>)
 8002176:	f004 fa57 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800217a:	2304      	movs	r3, #4
 800217c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800218a:	230c      	movs	r3, #12
 800218c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800218e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002192:	4619      	mov	r1, r3
 8002194:	4865      	ldr	r0, [pc, #404]	; (800232c <MX_GPIO_Init+0x578>)
 8002196:	f004 fa47 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 800219a:	f24a 0304 	movw	r3, #40964	; 0xa004
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a0:	2300      	movs	r3, #0
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ac:	4619      	mov	r1, r3
 80021ae:	4862      	ldr	r0, [pc, #392]	; (8002338 <MX_GPIO_Init+0x584>)
 80021b0:	f004 fa3a 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80021b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ba:	2301      	movs	r3, #1
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c2:	2300      	movs	r3, #0
 80021c4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ca:	4619      	mov	r1, r3
 80021cc:	4855      	ldr	r0, [pc, #340]	; (8002324 <MX_GPIO_Init+0x570>)
 80021ce:	f004 fa2b 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80021d2:	f645 6340 	movw	r3, #24128	; 0x5e40
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d8:	2301      	movs	r3, #1
 80021da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e8:	4619      	mov	r1, r3
 80021ea:	4853      	ldr	r0, [pc, #332]	; (8002338 <MX_GPIO_Init+0x584>)
 80021ec:	f004 fa1c 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80021f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002204:	4619      	mov	r1, r3
 8002206:	4847      	ldr	r0, [pc, #284]	; (8002324 <MX_GPIO_Init+0x570>)
 8002208:	f004 fa0e 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800220c:	2310      	movs	r3, #16
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	2303      	movs	r3, #3
 800221a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800221c:	230a      	movs	r3, #10
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002224:	4619      	mov	r1, r3
 8002226:	4844      	ldr	r0, [pc, #272]	; (8002338 <MX_GPIO_Init+0x584>)
 8002228:	f004 f9fe 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800222c:	23c8      	movs	r3, #200	; 0xc8
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002230:	2301      	movs	r3, #1
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800223c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002240:	4619      	mov	r1, r3
 8002242:	4839      	ldr	r0, [pc, #228]	; (8002328 <MX_GPIO_Init+0x574>)
 8002244:	f004 f9f0 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002248:	2305      	movs	r3, #5
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002254:	2303      	movs	r3, #3
 8002256:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002258:	230a      	movs	r3, #10
 800225a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002260:	4619      	mov	r1, r3
 8002262:	4833      	ldr	r0, [pc, #204]	; (8002330 <MX_GPIO_Init+0x57c>)
 8002264:	f004 f9e0 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002268:	2332      	movs	r3, #50	; 0x32
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002278:	230b      	movs	r3, #11
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002280:	4619      	mov	r1, r3
 8002282:	482b      	ldr	r0, [pc, #172]	; (8002330 <MX_GPIO_Init+0x57c>)
 8002284:	f004 f9d0 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002288:	2304      	movs	r3, #4
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002298:	2309      	movs	r3, #9
 800229a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022a0:	4619      	mov	r1, r3
 80022a2:	4826      	ldr	r0, [pc, #152]	; (800233c <MX_GPIO_Init+0x588>)
 80022a4:	f004 f9c0 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80022a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022ba:	2309      	movs	r3, #9
 80022bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022c2:	4619      	mov	r1, r3
 80022c4:	4819      	ldr	r0, [pc, #100]	; (800232c <MX_GPIO_Init+0x578>)
 80022c6:	f004 f9af 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80022ca:	2386      	movs	r3, #134	; 0x86
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022da:	230b      	movs	r3, #11
 80022dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e2:	4619      	mov	r1, r3
 80022e4:	4816      	ldr	r0, [pc, #88]	; (8002340 <MX_GPIO_Init+0x58c>)
 80022e6:	f004 f99f 	bl	8006628 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80022ea:	2328      	movs	r3, #40	; 0x28
 80022ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f6:	2303      	movs	r3, #3
 80022f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80022fa:	230a      	movs	r3, #10
 80022fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002302:	4619      	mov	r1, r3
 8002304:	480e      	ldr	r0, [pc, #56]	; (8002340 <MX_GPIO_Init+0x58c>)
 8002306:	f004 f98f 	bl	8006628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2105      	movs	r1, #5
 800230e:	2028      	movs	r0, #40	; 0x28
 8002310:	f003 fa94 	bl	800583c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002314:	2028      	movs	r0, #40	; 0x28
 8002316:	f003 faad 	bl	8005874 <HAL_NVIC_EnableIRQ>

}
 800231a:	bf00      	nop
 800231c:	3740      	adds	r7, #64	; 0x40
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40022000 	.word	0x40022000
 8002328:	40021800 	.word	0x40021800
 800232c:	40020c00 	.word	0x40020c00
 8002330:	40020800 	.word	0x40020800
 8002334:	40022800 	.word	0x40022800
 8002338:	40021c00 	.word	0x40021c00
 800233c:	40020400 	.word	0x40020400
 8002340:	40020000 	.word	0x40020000

08002344 <HAL_GPIO_EXTI_Callback>:
		HAL_UART_Receive_IT(&huart1,rxbuffer,1); // Rappel (callback) de l'interruption
		*/
	}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{	/**
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	80fb      	strh	r3, [r7, #6]
 		flag = 1;
	}
	//xQueueSendFromISR(myQueueTempoHandle, &MessageTempo, 0);
	 *
	 */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <fonction_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fonction_init */
void fonction_init(void const * argument)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 20;
 8002364:	2314      	movs	r3, #20
 8002366:	613b      	str	r3, [r7, #16]
    uint8_t i, j, cpt_lignesw = 0, cpt_colonnesw = 1, cpt_lignesb, cpt_colonnesb;
 8002368:	2300      	movs	r3, #0
 800236a:	757b      	strb	r3, [r7, #21]
 800236c:	2301      	movs	r3, #1
 800236e:	753b      	strb	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {


	  for (i = 0; i < 3; i++)
 8002370:	2300      	movs	r3, #0
 8002372:	75fb      	strb	r3, [r7, #23]
 8002374:	e090      	b.n	8002498 <fonction_init+0x13c>
	  {
		  for (j = 0; j < 4; j++)
 8002376:	2300      	movs	r3, #0
 8002378:	75bb      	strb	r3, [r7, #22]
 800237a:	e07a      	b.n	8002472 <fonction_init+0x116>
		  {
			  taskENTER_CRITICAL();
 800237c:	f00b fb2e 	bl	800d9dc <vPortEnterCritical>
			  	 // init white pieces
			  chessboard[cpt_lignesw][cpt_colonnesw].ligne = cpt_lignesw;
 8002380:	7d7a      	ldrb	r2, [r7, #21]
 8002382:	7d3b      	ldrb	r3, [r7, #20]
 8002384:	7d79      	ldrb	r1, [r7, #21]
 8002386:	b288      	uxth	r0, r1
 8002388:	4949      	ldr	r1, [pc, #292]	; (80024b0 <fonction_init+0x154>)
 800238a:	00d2      	lsls	r2, r2, #3
 800238c:	4413      	add	r3, r2
 800238e:	4602      	mov	r2, r0
 8002390:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
			  chessboard[cpt_lignesw][cpt_colonnesw].colonne = cpt_colonnesw;
 8002394:	7d7a      	ldrb	r2, [r7, #21]
 8002396:	7d3b      	ldrb	r3, [r7, #20]
 8002398:	7d39      	ldrb	r1, [r7, #20]
 800239a:	b288      	uxth	r0, r1
 800239c:	4944      	ldr	r1, [pc, #272]	; (80024b0 <fonction_init+0x154>)
 800239e:	00d2      	lsls	r2, r2, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	440b      	add	r3, r1
 80023a6:	4602      	mov	r2, r0
 80023a8:	805a      	strh	r2, [r3, #2]
			  chessboard[cpt_lignesw][cpt_colonnesw].isFilled = 1;
 80023aa:	7d7a      	ldrb	r2, [r7, #21]
 80023ac:	7d3b      	ldrb	r3, [r7, #20]
 80023ae:	4940      	ldr	r1, [pc, #256]	; (80024b0 <fonction_init+0x154>)
 80023b0:	00d2      	lsls	r2, r2, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	440b      	add	r3, r1
 80023b8:	2201      	movs	r2, #1
 80023ba:	715a      	strb	r2, [r3, #5]
			  chessboard[cpt_lignesw][cpt_colonnesw].rayon = 9;
 80023bc:	7d7a      	ldrb	r2, [r7, #21]
 80023be:	7d3b      	ldrb	r3, [r7, #20]
 80023c0:	493b      	ldr	r1, [pc, #236]	; (80024b0 <fonction_init+0x154>)
 80023c2:	00d2      	lsls	r2, r2, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	440b      	add	r3, r1
 80023ca:	2209      	movs	r2, #9
 80023cc:	71da      	strb	r2, [r3, #7]
			  chessboard[cpt_lignesw][cpt_colonnesw].piece_color = 0;
 80023ce:	7d7a      	ldrb	r2, [r7, #21]
 80023d0:	7d3b      	ldrb	r3, [r7, #20]
 80023d2:	4937      	ldr	r1, [pc, #220]	; (80024b0 <fonction_init+0x154>)
 80023d4:	00d2      	lsls	r2, r2, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	2200      	movs	r2, #0
 80023de:	719a      	strb	r2, [r3, #6]
			  // init black pieces
			  cpt_lignesb = cpt_lignesw + 5;
 80023e0:	7d7b      	ldrb	r3, [r7, #21]
 80023e2:	3305      	adds	r3, #5
 80023e4:	73fb      	strb	r3, [r7, #15]
			  cpt_colonnesb = (cpt_colonnesw % 2 == 0) ? cpt_colonnesw + 1 : cpt_colonnesw - 1;
 80023e6:	7d3b      	ldrb	r3, [r7, #20]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <fonction_init+0x9e>
 80023f2:	7d3b      	ldrb	r3, [r7, #20]
 80023f4:	3301      	adds	r3, #1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	e002      	b.n	8002400 <fonction_init+0xa4>
 80023fa:	7d3b      	ldrb	r3, [r7, #20]
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	73bb      	strb	r3, [r7, #14]
			  chessboard[cpt_lignesb][cpt_colonnesb].ligne = cpt_lignesb;
 8002402:	7bfa      	ldrb	r2, [r7, #15]
 8002404:	7bbb      	ldrb	r3, [r7, #14]
 8002406:	7bf9      	ldrb	r1, [r7, #15]
 8002408:	b288      	uxth	r0, r1
 800240a:	4929      	ldr	r1, [pc, #164]	; (80024b0 <fonction_init+0x154>)
 800240c:	00d2      	lsls	r2, r2, #3
 800240e:	4413      	add	r3, r2
 8002410:	4602      	mov	r2, r0
 8002412:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
			  chessboard[cpt_lignesb][cpt_colonnesb].colonne = cpt_colonnesb;
 8002416:	7bfa      	ldrb	r2, [r7, #15]
 8002418:	7bbb      	ldrb	r3, [r7, #14]
 800241a:	7bb9      	ldrb	r1, [r7, #14]
 800241c:	b288      	uxth	r0, r1
 800241e:	4924      	ldr	r1, [pc, #144]	; (80024b0 <fonction_init+0x154>)
 8002420:	00d2      	lsls	r2, r2, #3
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	4602      	mov	r2, r0
 800242a:	805a      	strh	r2, [r3, #2]
			  chessboard[cpt_lignesb][cpt_colonnesb].isFilled = 1;
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	7bbb      	ldrb	r3, [r7, #14]
 8002430:	491f      	ldr	r1, [pc, #124]	; (80024b0 <fonction_init+0x154>)
 8002432:	00d2      	lsls	r2, r2, #3
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	2201      	movs	r2, #1
 800243c:	715a      	strb	r2, [r3, #5]
			  chessboard[cpt_lignesb][cpt_colonnesb].rayon = 9;
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	7bbb      	ldrb	r3, [r7, #14]
 8002442:	491b      	ldr	r1, [pc, #108]	; (80024b0 <fonction_init+0x154>)
 8002444:	00d2      	lsls	r2, r2, #3
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	440b      	add	r3, r1
 800244c:	2209      	movs	r2, #9
 800244e:	71da      	strb	r2, [r3, #7]
			  chessboard[cpt_lignesb][cpt_colonnesb].piece_color = 1;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	7bbb      	ldrb	r3, [r7, #14]
 8002454:	4916      	ldr	r1, [pc, #88]	; (80024b0 <fonction_init+0x154>)
 8002456:	00d2      	lsls	r2, r2, #3
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	440b      	add	r3, r1
 800245e:	2201      	movs	r2, #1
 8002460:	719a      	strb	r2, [r3, #6]
			  taskEXIT_CRITICAL();
 8002462:	f00b faef 	bl	800da44 <vPortExitCritical>
			  cpt_colonnesw += 2;
 8002466:	7d3b      	ldrb	r3, [r7, #20]
 8002468:	3302      	adds	r3, #2
 800246a:	753b      	strb	r3, [r7, #20]
		  for (j = 0; j < 4; j++)
 800246c:	7dbb      	ldrb	r3, [r7, #22]
 800246e:	3301      	adds	r3, #1
 8002470:	75bb      	strb	r3, [r7, #22]
 8002472:	7dbb      	ldrb	r3, [r7, #22]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d981      	bls.n	800237c <fonction_init+0x20>
		  }
		  cpt_colonnesw = (cpt_colonnesw % 2 == 0) ? 1 : 0;
 8002478:	7d3b      	ldrb	r3, [r7, #20]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	753b      	strb	r3, [r7, #20]
		  cpt_lignesw++;
 800248c:	7d7b      	ldrb	r3, [r7, #21]
 800248e:	3301      	adds	r3, #1
 8002490:	757b      	strb	r3, [r7, #21]
	  for (i = 0; i < 3; i++)
 8002492:	7dfb      	ldrb	r3, [r7, #23]
 8002494:	3301      	adds	r3, #1
 8002496:	75fb      	strb	r3, [r7, #23]
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	2b02      	cmp	r3, #2
 800249c:	f67f af6b 	bls.w	8002376 <fonction_init+0x1a>
	  }

      vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80024a0:	f107 0308 	add.w	r3, r7, #8
 80024a4:	6939      	ldr	r1, [r7, #16]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f00a fa6c 	bl	800c984 <vTaskDelayUntil>
	  for (i = 0; i < 3; i++)
 80024ac:	e760      	b.n	8002370 <fonction_init+0x14>
 80024ae:	bf00      	nop
 80024b0:	200080cc 	.word	0x200080cc

080024b4 <fonction_affichage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_affichage */
void fonction_affichage(void const * argument)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_affichage */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;
 80024bc:	2332      	movs	r3, #50	; 0x32
 80024be:	61bb      	str	r3, [r7, #24]
	const uint8_t pas 			= 30;
 80024c0:	231e      	movs	r3, #30
 80024c2:	75fb      	strb	r3, [r7, #23]
	const uint8_t marge			= 15;
 80024c4:	230f      	movs	r3, #15
 80024c6:	75bb      	strb	r3, [r7, #22]
	uint16_t pointeurX 			= marge + pas / 2;
 80024c8:	7dbb      	ldrb	r3, [r7, #22]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	085b      	lsrs	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	4413      	add	r3, r2
 80024d6:	82bb      	strh	r3, [r7, #20]
	uint16_t pointeurY 			= marge + pas / 2;
 80024d8:	7dbb      	ldrb	r3, [r7, #22]
 80024da:	b29a      	uxth	r2, r3
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	827b      	strh	r3, [r7, #18]
	uint8_t color				= 2;
 80024e8:	2302      	movs	r3, #2
 80024ea:	747b      	strb	r3, [r7, #17]
	uint8_t i, j;
	uint8_t filled = 0, possible = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	743b      	strb	r3, [r7, #16]
 80024f0:	2300      	movs	r3, #0
 80024f2:	73fb      	strb	r3, [r7, #15]
	vTaskDelete(task_initHandle);
 80024f4:	4b79      	ldr	r3, [pc, #484]	; (80026dc <fonction_affichage+0x228>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f00a f9b1 	bl	800c860 <vTaskDelete>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 80024fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002502:	4877      	ldr	r0, [pc, #476]	; (80026e0 <fonction_affichage+0x22c>)
 8002504:	f004 fb61 	bl	8006bca <HAL_GPIO_TogglePin>
	  // Clear que pour certains changements
	  taskENTER_CRITICAL();
 8002508:	f00b fa68 	bl	800d9dc <vPortEnterCritical>
	  if(change == 1)
 800250c:	4b75      	ldr	r3, [pc, #468]	; (80026e4 <fonction_affichage+0x230>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d102      	bne.n	800251a <fonction_affichage+0x66>
	  {
		  BSP_LCD_Clear(0);
 8002514:	2000      	movs	r0, #0
 8002516:	f000 fd51 	bl	8002fbc <BSP_LCD_Clear>
	  }
	  taskEXIT_CRITICAL();
 800251a:	f00b fa93 	bl	800da44 <vPortExitCritical>

	  for (i = 0; i < 8; i++)
 800251e:	2300      	movs	r3, #0
 8002520:	77fb      	strb	r3, [r7, #31]
 8002522:	e0c9      	b.n	80026b8 <fonction_affichage+0x204>
	  {
		  for (j = 0; j < 8; j++)
 8002524:	2300      	movs	r3, #0
 8002526:	77bb      	strb	r3, [r7, #30]
 8002528:	e0bf      	b.n	80026aa <fonction_affichage+0x1f6>
		  {
			  taskENTER_CRITICAL();
 800252a:	f00b fa57 	bl	800d9dc <vPortEnterCritical>
			  filled = chessboard[i][j].isFilled;
 800252e:	7ffa      	ldrb	r2, [r7, #31]
 8002530:	7fbb      	ldrb	r3, [r7, #30]
 8002532:	496d      	ldr	r1, [pc, #436]	; (80026e8 <fonction_affichage+0x234>)
 8002534:	00d2      	lsls	r2, r2, #3
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	440b      	add	r3, r1
 800253c:	795b      	ldrb	r3, [r3, #5]
 800253e:	743b      	strb	r3, [r7, #16]
			  possible = chessboard[i][j].isPossible;
 8002540:	7ffa      	ldrb	r2, [r7, #31]
 8002542:	7fbb      	ldrb	r3, [r7, #30]
 8002544:	4968      	ldr	r1, [pc, #416]	; (80026e8 <fonction_affichage+0x234>)
 8002546:	00d2      	lsls	r2, r2, #3
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	791b      	ldrb	r3, [r3, #4]
 8002550:	73fb      	strb	r3, [r7, #15]
			  taskEXIT_CRITICAL();
 8002552:	f00b fa77 	bl	800da44 <vPortExitCritical>
			  // Case avec un pion
			  if ( filled != 0)
 8002556:	7c3b      	ldrb	r3, [r7, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d055      	beq.n	8002608 <fonction_affichage+0x154>
			  {
				  color = chessboard[i][j].piece_color;
 800255c:	7ffa      	ldrb	r2, [r7, #31]
 800255e:	7fbb      	ldrb	r3, [r7, #30]
 8002560:	4961      	ldr	r1, [pc, #388]	; (80026e8 <fonction_affichage+0x234>)
 8002562:	00d2      	lsls	r2, r2, #3
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	440b      	add	r3, r1
 800256a:	799b      	ldrb	r3, [r3, #6]
 800256c:	747b      	strb	r3, [r7, #17]
				  xSemaphoreTake(mutexEcran, portMAX_DELAY);
 800256e:	4b5f      	ldr	r3, [pc, #380]	; (80026ec <fonction_affichage+0x238>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f04f 31ff 	mov.w	r1, #4294967295
 8002576:	4618      	mov	r0, r3
 8002578:	f009 fd84 	bl	800c084 <xQueueSemaphoreTake>
				  if (color == 1) BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800257c:	7c7b      	ldrb	r3, [r7, #17]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d103      	bne.n	800258a <fonction_affichage+0xd6>
 8002582:	485b      	ldr	r0, [pc, #364]	; (80026f0 <fonction_affichage+0x23c>)
 8002584:	f000 fcce 	bl	8002f24 <BSP_LCD_SetTextColor>
 8002588:	e006      	b.n	8002598 <fonction_affichage+0xe4>
				  else if (color == 0) BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800258a:	7c7b      	ldrb	r3, [r7, #17]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d103      	bne.n	8002598 <fonction_affichage+0xe4>
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	f000 fcc6 	bl	8002f24 <BSP_LCD_SetTextColor>
			      pointeurX = marge + pas / 2 + j * pas;
 8002598:	7dbb      	ldrb	r3, [r7, #22]
 800259a:	b29a      	uxth	r2, r3
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	085b      	lsrs	r3, r3, #1
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	7fbb      	ldrb	r3, [r7, #30]
 80025aa:	b299      	uxth	r1, r3
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	fb11 f303 	smulbb	r3, r1, r3
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	82bb      	strh	r3, [r7, #20]
			      pointeurY = marge + pas / 2 + i * pas;
 80025ba:	7dbb      	ldrb	r3, [r7, #22]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	085b      	lsrs	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	7ffb      	ldrb	r3, [r7, #31]
 80025cc:	b299      	uxth	r1, r3
 80025ce:	7dfb      	ldrb	r3, [r7, #23]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	fb11 f303 	smulbb	r3, r1, r3
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4413      	add	r3, r2
 80025da:	827b      	strh	r3, [r7, #18]
				  BSP_LCD_FillCircle(pointeurX, pointeurY, chessboard[i][j].rayon);
 80025dc:	7ffa      	ldrb	r2, [r7, #31]
 80025de:	7fbb      	ldrb	r3, [r7, #30]
 80025e0:	4941      	ldr	r1, [pc, #260]	; (80026e8 <fonction_affichage+0x234>)
 80025e2:	00d2      	lsls	r2, r2, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	79db      	ldrb	r3, [r3, #7]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	8a79      	ldrh	r1, [r7, #18]
 80025f0:	8abb      	ldrh	r3, [r7, #20]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 ff4c 	bl	8003490 <BSP_LCD_FillCircle>
				  xSemaphoreGive(mutexEcran);
 80025f8:	4b3c      	ldr	r3, [pc, #240]	; (80026ec <fonction_affichage+0x238>)
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	2300      	movs	r3, #0
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	f009 fb53 	bl	800bcac <xQueueGenericSend>
 8002606:	e04d      	b.n	80026a4 <fonction_affichage+0x1f0>
			  }
			  //Case possible
			  else if (possible != 0)
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d04a      	beq.n	80026a4 <fonction_affichage+0x1f0>
			  {
				  if (change == 1) // Il y a eu une deselection, reinitialisation des possibles et pas d'affichage
 800260e:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <fonction_affichage+0x230>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d10d      	bne.n	8002632 <fonction_affichage+0x17e>
				  {
					  taskENTER_CRITICAL();
 8002616:	f00b f9e1 	bl	800d9dc <vPortEnterCritical>
					  chessboard[i][j].isPossible = 0;
 800261a:	7ffa      	ldrb	r2, [r7, #31]
 800261c:	7fbb      	ldrb	r3, [r7, #30]
 800261e:	4932      	ldr	r1, [pc, #200]	; (80026e8 <fonction_affichage+0x234>)
 8002620:	00d2      	lsls	r2, r2, #3
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	2200      	movs	r2, #0
 800262a:	711a      	strb	r2, [r3, #4]
					  taskEXIT_CRITICAL();
 800262c:	f00b fa0a 	bl	800da44 <vPortExitCritical>
 8002630:	e038      	b.n	80026a4 <fonction_affichage+0x1f0>
				  }
				  else
				  {
					  xSemaphoreTake(mutexEcran, portMAX_DELAY);
 8002632:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <fonction_affichage+0x238>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f04f 31ff 	mov.w	r1, #4294967295
 800263a:	4618      	mov	r0, r3
 800263c:	f009 fd22 	bl	800c084 <xQueueSemaphoreTake>
					  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002640:	482c      	ldr	r0, [pc, #176]	; (80026f4 <fonction_affichage+0x240>)
 8002642:	f000 fc6f 	bl	8002f24 <BSP_LCD_SetTextColor>
				      pointeurX = marge + pas / 2 + j * pas;
 8002646:	7dbb      	ldrb	r3, [r7, #22]
 8002648:	b29a      	uxth	r2, r3
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	085b      	lsrs	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	b29b      	uxth	r3, r3
 8002652:	4413      	add	r3, r2
 8002654:	b29a      	uxth	r2, r3
 8002656:	7fbb      	ldrb	r3, [r7, #30]
 8002658:	b299      	uxth	r1, r3
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	b29b      	uxth	r3, r3
 800265e:	fb11 f303 	smulbb	r3, r1, r3
 8002662:	b29b      	uxth	r3, r3
 8002664:	4413      	add	r3, r2
 8002666:	82bb      	strh	r3, [r7, #20]
				      pointeurY = marge + pas / 2 + i * pas;
 8002668:	7dbb      	ldrb	r3, [r7, #22]
 800266a:	b29a      	uxth	r2, r3
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	085b      	lsrs	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	b29b      	uxth	r3, r3
 8002674:	4413      	add	r3, r2
 8002676:	b29a      	uxth	r2, r3
 8002678:	7ffb      	ldrb	r3, [r7, #31]
 800267a:	b299      	uxth	r1, r3
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	b29b      	uxth	r3, r3
 8002680:	fb11 f303 	smulbb	r3, r1, r3
 8002684:	b29b      	uxth	r3, r3
 8002686:	4413      	add	r3, r2
 8002688:	827b      	strh	r3, [r7, #18]
					  BSP_LCD_FillCircle(pointeurX, pointeurY, 9);
 800268a:	8a79      	ldrh	r1, [r7, #18]
 800268c:	8abb      	ldrh	r3, [r7, #20]
 800268e:	2209      	movs	r2, #9
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fefd 	bl	8003490 <BSP_LCD_FillCircle>
					  xSemaphoreGive(mutexEcran);
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <fonction_affichage+0x238>)
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	2300      	movs	r3, #0
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	f009 fb04 	bl	800bcac <xQueueGenericSend>
		  for (j = 0; j < 8; j++)
 80026a4:	7fbb      	ldrb	r3, [r7, #30]
 80026a6:	3301      	adds	r3, #1
 80026a8:	77bb      	strb	r3, [r7, #30]
 80026aa:	7fbb      	ldrb	r3, [r7, #30]
 80026ac:	2b07      	cmp	r3, #7
 80026ae:	f67f af3c 	bls.w	800252a <fonction_affichage+0x76>
	  for (i = 0; i < 8; i++)
 80026b2:	7ffb      	ldrb	r3, [r7, #31]
 80026b4:	3301      	adds	r3, #1
 80026b6:	77fb      	strb	r3, [r7, #31]
 80026b8:	7ffb      	ldrb	r3, [r7, #31]
 80026ba:	2b07      	cmp	r3, #7
 80026bc:	f67f af32 	bls.w	8002524 <fonction_affichage+0x70>
				  }

			  }
		  }
	  }
	taskENTER_CRITICAL();
 80026c0:	f00b f98c 	bl	800d9dc <vPortEnterCritical>
	change = 0; // S'il y avait des changements, ils on ete pris en compte
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <fonction_affichage+0x230>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
	taskEXIT_CRITICAL();
 80026ca:	f00b f9bb 	bl	800da44 <vPortExitCritical>

    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 80026ce:	f107 0308 	add.w	r3, r7, #8
 80026d2:	69b9      	ldr	r1, [r7, #24]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f00a f955 	bl	800c984 <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 80026da:	e710      	b.n	80024fe <fonction_affichage+0x4a>
 80026dc:	2000802c 	.word	0x2000802c
 80026e0:	40021c00 	.word	0x40021c00
 80026e4:	20000028 	.word	0x20000028
 80026e8:	200080cc 	.word	0x200080cc
 80026ec:	2000852c 	.word	0x2000852c
 80026f0:	ff0000ff 	.word	0xff0000ff
 80026f4:	ffff0000 	.word	0xffff0000

080026f8 <fonction_select>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_select */
void fonction_select(void const * argument)
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_select */
	//uint16_t MessageTS[1];
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 8002700:	2364      	movs	r3, #100	; 0x64
 8002702:	61bb      	str	r3, [r7, #24]
	static TS_StateTypeDef TS_State;
	//flag = 0;
	uint8_t posx = 0, posy = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	75fb      	strb	r3, [r7, #23]
 8002708:	2300      	movs	r3, #0
 800270a:	75bb      	strb	r3, [r7, #22]
	uint8_t line = 0, col = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	757b      	strb	r3, [r7, #21]
 8002710:	2300      	movs	r3, #0
 8002712:	753b      	strb	r3, [r7, #20]
	const uint8_t pas 			= 30;
 8002714:	231e      	movs	r3, #30
 8002716:	74fb      	strb	r3, [r7, #19]
	const uint8_t marge			= 15;
 8002718:	230f      	movs	r3, #15
 800271a:	74bb      	strb	r3, [r7, #18]
	uint8_t selected 			= 0;
 800271c:	2300      	movs	r3, #0
 800271e:	77fb      	strb	r3, [r7, #31]
	uint8_t line_selected		= 8;
 8002720:	2308      	movs	r3, #8
 8002722:	77bb      	strb	r3, [r7, #30]
	uint8_t col_selected		= 8;
 8002724:	2308      	movs	r3, #8
 8002726:	777b      	strb	r3, [r7, #29]
	uint16_t message[1];
  /* Infinite loop */
  for(;;)
  {

	  BSP_TS_GetState(&TS_State);
 8002728:	485d      	ldr	r0, [pc, #372]	; (80028a0 <fonction_select+0x1a8>)
 800272a:	f001 fb19 	bl	8003d60 <BSP_TS_GetState>
	  if(TS_State.touchDetected)
 800272e:	4b5c      	ldr	r3, [pc, #368]	; (80028a0 <fonction_select+0x1a8>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80ac 	beq.w	8002890 <fonction_select+0x198>
	  {
		  posx = TS_State.touchX[0];
 8002738:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <fonction_select+0x1a8>)
 800273a:	885b      	ldrh	r3, [r3, #2]
 800273c:	75fb      	strb	r3, [r7, #23]
		  posy = TS_State.touchY[0];
 800273e:	4b58      	ldr	r3, [pc, #352]	; (80028a0 <fonction_select+0x1a8>)
 8002740:	899b      	ldrh	r3, [r3, #12]
 8002742:	75bb      	strb	r3, [r7, #22]

		  col = (posx - marge) / pas;
 8002744:	7dfa      	ldrb	r2, [r7, #23]
 8002746:	7cbb      	ldrb	r3, [r7, #18]
 8002748:	1ad2      	subs	r2, r2, r3
 800274a:	7cfb      	ldrb	r3, [r7, #19]
 800274c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002750:	753b      	strb	r3, [r7, #20]
		  line = (posy - marge) / pas;
 8002752:	7dba      	ldrb	r2, [r7, #22]
 8002754:	7cbb      	ldrb	r3, [r7, #18]
 8002756:	1ad2      	subs	r2, r2, r3
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	fb92 f3f3 	sdiv	r3, r2, r3
 800275e:	757b      	strb	r3, [r7, #21]
		  taskENTER_CRITICAL();
 8002760:	f00b f93c 	bl	800d9dc <vPortEnterCritical>
		  // Selection d'un pion
		  if(chessboard[line][col].isFilled)
 8002764:	7d7a      	ldrb	r2, [r7, #21]
 8002766:	7d3b      	ldrb	r3, [r7, #20]
 8002768:	494e      	ldr	r1, [pc, #312]	; (80028a4 <fonction_select+0x1ac>)
 800276a:	00d2      	lsls	r2, r2, #3
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	440b      	add	r3, r1
 8002772:	795b      	ldrb	r3, [r3, #5]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d045      	beq.n	8002804 <fonction_select+0x10c>
		  {
			  // Aucun pion n'etait selectionne
			  if(chessboard[line][col].rayon < 12 && selected == 0)
 8002778:	7d7a      	ldrb	r2, [r7, #21]
 800277a:	7d3b      	ldrb	r3, [r7, #20]
 800277c:	4949      	ldr	r1, [pc, #292]	; (80028a4 <fonction_select+0x1ac>)
 800277e:	00d2      	lsls	r2, r2, #3
 8002780:	4413      	add	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	440b      	add	r3, r1
 8002786:	79db      	ldrb	r3, [r3, #7]
 8002788:	2b0b      	cmp	r3, #11
 800278a:	d823      	bhi.n	80027d4 <fonction_select+0xdc>
 800278c:	7ffb      	ldrb	r3, [r7, #31]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d120      	bne.n	80027d4 <fonction_select+0xdc>
			  {
				  chessboard[line][col].rayon = 12;
 8002792:	7d7a      	ldrb	r2, [r7, #21]
 8002794:	7d3b      	ldrb	r3, [r7, #20]
 8002796:	4943      	ldr	r1, [pc, #268]	; (80028a4 <fonction_select+0x1ac>)
 8002798:	00d2      	lsls	r2, r2, #3
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	440b      	add	r3, r1
 80027a0:	220c      	movs	r2, #12
 80027a2:	71da      	strb	r2, [r3, #7]
				  selected = 1;
 80027a4:	2301      	movs	r3, #1
 80027a6:	77fb      	strb	r3, [r7, #31]
				  line_selected = line;
 80027a8:	7d7b      	ldrb	r3, [r7, #21]
 80027aa:	77bb      	strb	r3, [r7, #30]
				  col_selected = col;
 80027ac:	7d3b      	ldrb	r3, [r7, #20]
 80027ae:	777b      	strb	r3, [r7, #29]
				  message[0] = (line << 8) + col;
 80027b0:	7d7b      	ldrb	r3, [r7, #21]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	7d3b      	ldrb	r3, [r7, #20]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4413      	add	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	813b      	strh	r3, [r7, #8]
				  xQueueSend(queueSelHandle, &message, 0);
 80027c2:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <fonction_select+0x1b0>)
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	f107 0108 	add.w	r1, r7, #8
 80027ca:	2300      	movs	r3, #0
 80027cc:	2200      	movs	r2, #0
 80027ce:	f009 fa6d 	bl	800bcac <xQueueGenericSend>
 80027d2:	e017      	b.n	8002804 <fonction_select+0x10c>
			  }
			  /// Ce pion etait selectionne
			  else if (chessboard[line][col].rayon == 12)
 80027d4:	7d7a      	ldrb	r2, [r7, #21]
 80027d6:	7d3b      	ldrb	r3, [r7, #20]
 80027d8:	4932      	ldr	r1, [pc, #200]	; (80028a4 <fonction_select+0x1ac>)
 80027da:	00d2      	lsls	r2, r2, #3
 80027dc:	4413      	add	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	440b      	add	r3, r1
 80027e2:	79db      	ldrb	r3, [r3, #7]
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	d10d      	bne.n	8002804 <fonction_select+0x10c>
			  {
				  chessboard[line][col].rayon = 9;
 80027e8:	7d7a      	ldrb	r2, [r7, #21]
 80027ea:	7d3b      	ldrb	r3, [r7, #20]
 80027ec:	492d      	ldr	r1, [pc, #180]	; (80028a4 <fonction_select+0x1ac>)
 80027ee:	00d2      	lsls	r2, r2, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	2209      	movs	r2, #9
 80027f8:	71da      	strb	r2, [r3, #7]
				  change = 1;
 80027fa:	4b2c      	ldr	r3, [pc, #176]	; (80028ac <fonction_select+0x1b4>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
				  selected = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	77fb      	strb	r3, [r7, #31]
			  }
		  }

		  // Case pour un deplacement
		  if(chessboard[line][col].isPossible)
 8002804:	7d7a      	ldrb	r2, [r7, #21]
 8002806:	7d3b      	ldrb	r3, [r7, #20]
 8002808:	4926      	ldr	r1, [pc, #152]	; (80028a4 <fonction_select+0x1ac>)
 800280a:	00d2      	lsls	r2, r2, #3
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	791b      	ldrb	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d039      	beq.n	800288c <fonction_select+0x194>
		  {
			  chessboard[line_selected][col_selected].isFilled = 0;
 8002818:	7fba      	ldrb	r2, [r7, #30]
 800281a:	7f7b      	ldrb	r3, [r7, #29]
 800281c:	4921      	ldr	r1, [pc, #132]	; (80028a4 <fonction_select+0x1ac>)
 800281e:	00d2      	lsls	r2, r2, #3
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	2200      	movs	r2, #0
 8002828:	715a      	strb	r2, [r3, #5]

			  chessboard[line][col].isFilled = 1;
 800282a:	7d7a      	ldrb	r2, [r7, #21]
 800282c:	7d3b      	ldrb	r3, [r7, #20]
 800282e:	491d      	ldr	r1, [pc, #116]	; (80028a4 <fonction_select+0x1ac>)
 8002830:	00d2      	lsls	r2, r2, #3
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	2201      	movs	r2, #1
 800283a:	715a      	strb	r2, [r3, #5]
			  chessboard[line][col].isPossible = 0;
 800283c:	7d7a      	ldrb	r2, [r7, #21]
 800283e:	7d3b      	ldrb	r3, [r7, #20]
 8002840:	4918      	ldr	r1, [pc, #96]	; (80028a4 <fonction_select+0x1ac>)
 8002842:	00d2      	lsls	r2, r2, #3
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	2200      	movs	r2, #0
 800284c:	711a      	strb	r2, [r3, #4]
			  chessboard[line][col].piece_color = chessboard[line_selected][col_selected].piece_color;
 800284e:	7fb8      	ldrb	r0, [r7, #30]
 8002850:	7f7b      	ldrb	r3, [r7, #29]
 8002852:	7d79      	ldrb	r1, [r7, #21]
 8002854:	7d3a      	ldrb	r2, [r7, #20]
 8002856:	4c13      	ldr	r4, [pc, #76]	; (80028a4 <fonction_select+0x1ac>)
 8002858:	00c0      	lsls	r0, r0, #3
 800285a:	4403      	add	r3, r0
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4423      	add	r3, r4
 8002860:	799c      	ldrb	r4, [r3, #6]
 8002862:	4810      	ldr	r0, [pc, #64]	; (80028a4 <fonction_select+0x1ac>)
 8002864:	00cb      	lsls	r3, r1, #3
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4403      	add	r3, r0
 800286c:	4622      	mov	r2, r4
 800286e:	719a      	strb	r2, [r3, #6]
			  chessboard[line][col].rayon = 9;
 8002870:	7d7a      	ldrb	r2, [r7, #21]
 8002872:	7d3b      	ldrb	r3, [r7, #20]
 8002874:	490b      	ldr	r1, [pc, #44]	; (80028a4 <fonction_select+0x1ac>)
 8002876:	00d2      	lsls	r2, r2, #3
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	2209      	movs	r2, #9
 8002880:	71da      	strb	r2, [r3, #7]
			  selected = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	77fb      	strb	r3, [r7, #31]
			  change = 1;
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <fonction_select+0x1b4>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
		  }
		  taskEXIT_CRITICAL();
 800288c:	f00b f8da 	bl	800da44 <vPortExitCritical>

	  }

    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	69b9      	ldr	r1, [r7, #24]
 8002896:	4618      	mov	r0, r3
 8002898:	f00a f874 	bl	800c984 <vTaskDelayUntil>
	  BSP_TS_GetState(&TS_State);
 800289c:	e744      	b.n	8002728 <fonction_select+0x30>
 800289e:	bf00      	nop
 80028a0:	2000038c 	.word	0x2000038c
 80028a4:	200080cc 	.word	0x200080cc
 80028a8:	2000807c 	.word	0x2000807c
 80028ac:	20000028 	.word	0x20000028

080028b0 <fonction_calculPossibilites>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_calculPossibilites */
void fonction_calculPossibilites(void const * argument)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	f2ad 6dac 	subw	sp, sp, #1708	; 0x6ac
 80028b6:	af04      	add	r7, sp, #16
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	6018      	str	r0, [r3, #0]

  /* Infinite loop */
  for(;;)
  {
	  // Recuperation information selection
	  xQueueReceive(queueSelHandle, &message, portMAX_DELAY);
 80028bc:	4b35      	ldr	r3, [pc, #212]	; (8002994 <fonction_calculPossibilites+0xe4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f207 618c 	addw	r1, r7, #1676	; 0x68c
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	4618      	mov	r0, r3
 80028ca:	f009 faf5 	bl	800beb8 <xQueueReceive>
	  line = (uint8_t) (message[0] >> 8);
 80028ce:	f8b7 368c 	ldrh.w	r3, [r7, #1676]	; 0x68c
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	f887 3696 	strb.w	r3, [r7, #1686]	; 0x696
	  col  = (uint8_t)  message[0];
 80028da:	f8b7 368c 	ldrh.w	r3, [r7, #1676]	; 0x68c
 80028de:	f887 3695 	strb.w	r3, [r7, #1685]	; 0x695
	  taskENTER_CRITICAL();
 80028e2:	f00b f87b 	bl	800d9dc <vPortEnterCritical>
	  color = chessboard[line][col].piece_color;
 80028e6:	f897 2696 	ldrb.w	r2, [r7, #1686]	; 0x696
 80028ea:	f897 3695 	ldrb.w	r3, [r7, #1685]	; 0x695
 80028ee:	492a      	ldr	r1, [pc, #168]	; (8002998 <fonction_calculPossibilites+0xe8>)
 80028f0:	00d2      	lsls	r2, r2, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	440b      	add	r3, r1
 80028f8:	799b      	ldrb	r3, [r3, #6]
 80028fa:	f8a7 3692 	strh.w	r3, [r7, #1682]	; 0x692
	  taskEXIT_CRITICAL();
 80028fe:	f00b f8a1 	bl	800da44 <vPortExitCritical>
	  for(m = 0; m < 1024; m++)
	  {
		  eaten[m].colonne = 8;
		  eaten[m].ligne   = 8;
	  }*/
	  length = calculPossibilitesRec(line, col, color, possibilites, eaten, 0, 0);
 8002902:	f897 3696 	ldrb.w	r3, [r7, #1686]	; 0x696
 8002906:	b298      	uxth	r0, r3
 8002908:	f897 3695 	ldrb.w	r3, [r7, #1685]	; 0x695
 800290c:	b299      	uxth	r1, r3
 800290e:	f8b7 3692 	ldrh.w	r3, [r7, #1682]	; 0x692
 8002912:	b2da      	uxtb	r2, r3
 8002914:	f207 640c 	addw	r4, r7, #1548	; 0x60c
 8002918:	2300      	movs	r3, #0
 800291a:	9302      	str	r3, [sp, #8]
 800291c:	2300      	movs	r3, #0
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	4623      	mov	r3, r4
 8002928:	f7fe f914 	bl	8000b54 <calculPossibilitesRec>
 800292c:	4603      	mov	r3, r0
 800292e:	f887 3691 	strb.w	r3, [r7, #1681]	; 0x691

	  // Modification de l'echiquier avec cases possibles
	  taskENTER_CRITICAL();
 8002932:	f00b f853 	bl	800d9dc <vPortEnterCritical>
	  for(i = 0; i < length; i++)
 8002936:	2300      	movs	r3, #0
 8002938:	f887 3697 	strb.w	r3, [r7, #1687]	; 0x697
 800293c:	e01d      	b.n	800297a <fonction_calculPossibilites+0xca>
	  {
		  chessboard[possibilites[i].ligne][possibilites[i].colonne].isPossible = 1;
 800293e:	f897 3697 	ldrb.w	r3, [r7, #1687]	; 0x697
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 8002948:	4413      	add	r3, r2
 800294a:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 800294e:	4618      	mov	r0, r3
 8002950:	f897 3697 	ldrb.w	r3, [r7, #1687]	; 0x697
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 800295a:	4413      	add	r3, r2
 800295c:	f833 3c8a 	ldrh.w	r3, [r3, #-138]
 8002960:	4619      	mov	r1, r3
 8002962:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <fonction_calculPossibilites+0xe8>)
 8002964:	00c3      	lsls	r3, r0, #3
 8002966:	440b      	add	r3, r1
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	2201      	movs	r2, #1
 800296e:	711a      	strb	r2, [r3, #4]
	  for(i = 0; i < length; i++)
 8002970:	f897 3697 	ldrb.w	r3, [r7, #1687]	; 0x697
 8002974:	3301      	adds	r3, #1
 8002976:	f887 3697 	strb.w	r3, [r7, #1687]	; 0x697
 800297a:	f897 2697 	ldrb.w	r2, [r7, #1687]	; 0x697
 800297e:	f897 3691 	ldrb.w	r3, [r7, #1681]	; 0x691
 8002982:	429a      	cmp	r2, r3
 8002984:	d3db      	bcc.n	800293e <fonction_calculPossibilites+0x8e>
	  }
	  taskEXIT_CRITICAL();
 8002986:	f00b f85d 	bl	800da44 <vPortExitCritical>
      osDelay(1);
 800298a:	2001      	movs	r0, #1
 800298c:	f008 ff1d 	bl	800b7ca <osDelay>
	  xQueueReceive(queueSelHandle, &message, portMAX_DELAY);
 8002990:	e794      	b.n	80028bc <fonction_calculPossibilites+0xc>
 8002992:	bf00      	nop
 8002994:	2000807c 	.word	0x2000807c
 8002998:	200080cc 	.word	0x200080cc

0800299c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a04      	ldr	r2, [pc, #16]	; (80029bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d101      	bne.n	80029b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029ae:	f002 fae7 	bl	8004f80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40001000 	.word	0x40001000

080029c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029c4:	b672      	cpsid	i
}
 80029c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <Error_Handler+0x8>
	...

080029cc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	; 0x30
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a51      	ldr	r2, [pc, #324]	; (8002b1c <I2Cx_MspInit+0x150>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d14d      	bne.n	8002a78 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <I2Cx_MspInit+0x154>)
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	4a4f      	ldr	r2, [pc, #316]	; (8002b20 <I2Cx_MspInit+0x154>)
 80029e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e6:	6313      	str	r3, [r2, #48]	; 0x30
 80029e8:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <I2Cx_MspInit+0x154>)
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80029f8:	2312      	movs	r3, #18
 80029fa:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002a04:	2304      	movs	r3, #4
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002a08:	f107 031c 	add.w	r3, r7, #28
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4845      	ldr	r0, [pc, #276]	; (8002b24 <I2Cx_MspInit+0x158>)
 8002a10:	f003 fe0a 	bl	8006628 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002a1a:	f107 031c 	add.w	r3, r7, #28
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4840      	ldr	r0, [pc, #256]	; (8002b24 <I2Cx_MspInit+0x158>)
 8002a22:	f003 fe01 	bl	8006628 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	4a3d      	ldr	r2, [pc, #244]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002a2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a30:	6413      	str	r3, [r2, #64]	; 0x40
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a37      	ldr	r2, [pc, #220]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002a44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a48:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002a4a:	4b35      	ldr	r3, [pc, #212]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002a50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a54:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002a56:	2200      	movs	r2, #0
 8002a58:	210f      	movs	r1, #15
 8002a5a:	2048      	movs	r0, #72	; 0x48
 8002a5c:	f002 feee 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002a60:	2048      	movs	r0, #72	; 0x48
 8002a62:	f002 ff07 	bl	8005874 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	210f      	movs	r1, #15
 8002a6a:	2049      	movs	r0, #73	; 0x49
 8002a6c:	f002 fee6 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002a70:	2049      	movs	r0, #73	; 0x49
 8002a72:	f002 feff 	bl	8005874 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002a76:	e04d      	b.n	8002b14 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002a78:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	4a28      	ldr	r2, [pc, #160]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002a7e:	f043 0302 	orr.w	r3, r3, #2
 8002a82:	6313      	str	r3, [r2, #48]	; 0x30
 8002a84:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a94:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002a96:	2312      	movs	r3, #18
 8002a98:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002aa6:	f107 031c 	add.w	r3, r7, #28
 8002aaa:	4619      	mov	r1, r3
 8002aac:	481e      	ldr	r0, [pc, #120]	; (8002b28 <I2Cx_MspInit+0x15c>)
 8002aae:	f003 fdbb 	bl	8006628 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ab8:	f107 031c 	add.w	r3, r7, #28
 8002abc:	4619      	mov	r1, r3
 8002abe:	481a      	ldr	r0, [pc, #104]	; (8002b28 <I2Cx_MspInit+0x15c>)
 8002ac0:	f003 fdb2 	bl	8006628 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	4a15      	ldr	r2, [pc, #84]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002aca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ace:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad0:	4b13      	ldr	r3, [pc, #76]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002ae2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ae6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002ae8:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4a0c      	ldr	r2, [pc, #48]	; (8002b20 <I2Cx_MspInit+0x154>)
 8002aee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002af2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002af4:	2200      	movs	r2, #0
 8002af6:	210f      	movs	r1, #15
 8002af8:	201f      	movs	r0, #31
 8002afa:	f002 fe9f 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002afe:	201f      	movs	r0, #31
 8002b00:	f002 feb8 	bl	8005874 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002b04:	2200      	movs	r2, #0
 8002b06:	210f      	movs	r1, #15
 8002b08:	2020      	movs	r0, #32
 8002b0a:	f002 fe97 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002b0e:	2020      	movs	r0, #32
 8002b10:	f002 feb0 	bl	8005874 <HAL_NVIC_EnableIRQ>
}
 8002b14:	bf00      	nop
 8002b16:	3730      	adds	r7, #48	; 0x30
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	200003b8 	.word	0x200003b8
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40021c00 	.word	0x40021c00
 8002b28:	40020400 	.word	0x40020400

08002b2c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f004 fb69 	bl	800720c <HAL_I2C_GetState>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d125      	bne.n	8002b8c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <I2Cx_Init+0x68>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d103      	bne.n	8002b50 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <I2Cx_Init+0x6c>)
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e002      	b.n	8002b56 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <I2Cx_Init+0x70>)
 8002b54:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a11      	ldr	r2, [pc, #68]	; (8002ba0 <I2Cx_Init+0x74>)
 8002b5a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ff23 	bl	80029cc <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f004 f852 	bl	8006c30 <HAL_I2C_Init>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	200003b8 	.word	0x200003b8
 8002b98:	40005c00 	.word	0x40005c00
 8002b9c:	40005400 	.word	0x40005400
 8002ba0:	40912732 	.word	0x40912732

08002ba4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	; 0x28
 8002ba8:	af04      	add	r7, sp, #16
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	4608      	mov	r0, r1
 8002bae:	4611      	mov	r1, r2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	72fb      	strb	r3, [r7, #11]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	813b      	strh	r3, [r7, #8]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002bc2:	7afb      	ldrb	r3, [r7, #11]
 8002bc4:	b299      	uxth	r1, r3
 8002bc6:	88f8      	ldrh	r0, [r7, #6]
 8002bc8:	893a      	ldrh	r2, [r7, #8]
 8002bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bce:	9302      	str	r3, [sp, #8]
 8002bd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	4603      	mov	r3, r0
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f004 f9fc 	bl	8006fd8 <HAL_I2C_Mem_Read>
 8002be0:	4603      	mov	r3, r0
 8002be2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d004      	beq.n	8002bf4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002bea:	7afb      	ldrb	r3, [r7, #11]
 8002bec:	4619      	mov	r1, r3
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f832 	bl	8002c58 <I2Cx_Error>
  }
  return status;    
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b08a      	sub	sp, #40	; 0x28
 8002c02:	af04      	add	r7, sp, #16
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	4608      	mov	r0, r1
 8002c08:	4611      	mov	r1, r2
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	72fb      	strb	r3, [r7, #11]
 8002c10:	460b      	mov	r3, r1
 8002c12:	813b      	strh	r3, [r7, #8]
 8002c14:	4613      	mov	r3, r2
 8002c16:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002c1c:	7afb      	ldrb	r3, [r7, #11]
 8002c1e:	b299      	uxth	r1, r3
 8002c20:	88f8      	ldrh	r0, [r7, #6]
 8002c22:	893a      	ldrh	r2, [r7, #8]
 8002c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c28:	9302      	str	r3, [sp, #8]
 8002c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	4603      	mov	r3, r0
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f004 f8bb 	bl	8006db0 <HAL_I2C_Mem_Write>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002c44:	7afb      	ldrb	r3, [r7, #11]
 8002c46:	4619      	mov	r1, r3
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f805 	bl	8002c58 <I2Cx_Error>
  }
  return status;
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f004 f873 	bl	8006d50 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ff5e 	bl	8002b2c <I2Cx_Init>
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <TS_IO_Init+0x10>)
 8002c7e:	f7ff ff55 	bl	8002b2c <I2Cx_Init>
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200003b8 	.word	0x200003b8

08002c8c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
 8002c96:	460b      	mov	r3, r1
 8002c98:	71bb      	strb	r3, [r7, #6]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002c9e:	79bb      	ldrb	r3, [r7, #6]
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	79f9      	ldrb	r1, [r7, #7]
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	1d7b      	adds	r3, r7, #5
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2301      	movs	r3, #1
 8002cae:	4803      	ldr	r0, [pc, #12]	; (8002cbc <TS_IO_Write+0x30>)
 8002cb0:	f7ff ffa5 	bl	8002bfe <I2Cx_WriteMultiple>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200003b8 	.word	0x200003b8

08002cc0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	460a      	mov	r2, r1
 8002cca:	71fb      	strb	r3, [r7, #7]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002cd4:	79bb      	ldrb	r3, [r7, #6]
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	79f9      	ldrb	r1, [r7, #7]
 8002cda:	2301      	movs	r3, #1
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	f107 030f 	add.w	r3, r7, #15
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <TS_IO_Read+0x38>)
 8002ce8:	f7ff ff5c 	bl	8002ba4 <I2Cx_ReadMultiple>

  return read_value;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200003b8 	.word	0x200003b8

08002cfc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f002 f95b 	bl	8004fc0 <HAL_Delay>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002d18:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d1a:	2228      	movs	r2, #40	; 0x28
 8002d1c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002d1e:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d20:	2209      	movs	r2, #9
 8002d22:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002d24:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d26:	2235      	movs	r2, #53	; 0x35
 8002d28:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002d2a:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d2c:	220b      	movs	r2, #11
 8002d2e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002d30:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d32:	f240 121b 	movw	r2, #283	; 0x11b
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002d38:	4b29      	ldr	r3, [pc, #164]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d3a:	f240 2215 	movw	r2, #533	; 0x215
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002d40:	4b27      	ldr	r3, [pc, #156]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d42:	f240 121d 	movw	r2, #285	; 0x11d
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002d48:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d4a:	f240 2235 	movw	r2, #565	; 0x235
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002d50:	2100      	movs	r1, #0
 8002d52:	4823      	ldr	r0, [pc, #140]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d54:	f000 fd34 	bl	80037c0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002d58:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d5a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d5e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002d60:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d62:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002d66:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002d68:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002d70:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002d80:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002d86:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002d8c:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <BSP_LCD_Init+0xd0>)
 8002d9c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002d9e:	4810      	ldr	r0, [pc, #64]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002da0:	f004 ff50 	bl	8007c44 <HAL_LTDC_GetState>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002daa:	2100      	movs	r1, #0
 8002dac:	480c      	ldr	r0, [pc, #48]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002dae:	f000 fc2d 	bl	800360c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002db2:	480b      	ldr	r0, [pc, #44]	; (8002de0 <BSP_LCD_Init+0xcc>)
 8002db4:	f004 fd76 	bl	80078a4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002db8:	2201      	movs	r2, #1
 8002dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dbe:	480a      	ldr	r0, [pc, #40]	; (8002de8 <BSP_LCD_Init+0xd4>)
 8002dc0:	f003 feea 	bl	8006b98 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2108      	movs	r1, #8
 8002dc8:	4808      	ldr	r0, [pc, #32]	; (8002dec <BSP_LCD_Init+0xd8>)
 8002dca:	f003 fee5 	bl	8006b98 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002dce:	f000 fda3 	bl	8003918 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002dd2:	4807      	ldr	r0, [pc, #28]	; (8002df0 <BSP_LCD_Init+0xdc>)
 8002dd4:	f000 f8d8 	bl	8002f88 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	200086f4 	.word	0x200086f4
 8002de4:	40016800 	.word	0x40016800
 8002de8:	40022000 	.word	0x40022000
 8002dec:	40022800 	.word	0x40022800
 8002df0:	2000002c 	.word	0x2000002c

08002df4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <BSP_LCD_GetXSize+0x20>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a06      	ldr	r2, [pc, #24]	; (8002e18 <BSP_LCD_GetXSize+0x24>)
 8002dfe:	2134      	movs	r1, #52	; 0x34
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	3360      	adds	r3, #96	; 0x60
 8002e08:	681b      	ldr	r3, [r3, #0]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	20000444 	.word	0x20000444
 8002e18:	200086f4 	.word	0x200086f4

08002e1c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <BSP_LCD_GetYSize+0x20>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a06      	ldr	r2, [pc, #24]	; (8002e40 <BSP_LCD_GetYSize+0x24>)
 8002e26:	2134      	movs	r1, #52	; 0x34
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3364      	adds	r3, #100	; 0x64
 8002e30:	681b      	ldr	r3, [r3, #0]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	20000444 	.word	0x20000444
 8002e40:	200086f4 	.word	0x200086f4

08002e44 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b090      	sub	sp, #64	; 0x40
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002e54:	f7ff ffce 	bl	8002df4 <BSP_LCD_GetXSize>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002e60:	f7ff ffdc 	bl	8002e1c <BSP_LCD_GetYSize>
 8002e64:	4603      	mov	r3, r0
 8002e66:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002e70:	23ff      	movs	r3, #255	; 0xff
 8002e72:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002e8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002e90:	2307      	movs	r3, #7
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002e94:	f7ff ffae 	bl	8002df4 <BSP_LCD_GetXSize>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002e9c:	f7ff ffbe 	bl	8002e1c <BSP_LCD_GetYSize>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002ea4:	88fa      	ldrh	r2, [r7, #6]
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4812      	ldr	r0, [pc, #72]	; (8002ef8 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002eae:	f004 fe8b 	bl	8007bc8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	4911      	ldr	r1, [pc, #68]	; (8002efc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002ec8:	88fa      	ldrh	r2, [r7, #6]
 8002eca:	490c      	ldr	r1, [pc, #48]	; (8002efc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	3308      	adds	r3, #8
 8002ed8:	4a09      	ldr	r2, [pc, #36]	; (8002f00 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002eda:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002edc:	88fa      	ldrh	r2, [r7, #6]
 8002ede:	4907      	ldr	r1, [pc, #28]	; (8002efc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002eee:	601a      	str	r2, [r3, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	3740      	adds	r7, #64	; 0x40
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	200086f4 	.word	0x200086f4
 8002efc:	20000448 	.word	0x20000448
 8002f00:	2000002c 	.word	0x2000002c

08002f04 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <BSP_LCD_SelectLayer+0x1c>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6013      	str	r3, [r2, #0]
} 
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000444 	.word	0x20000444

08002f24 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002f2c:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <BSP_LCD_SetTextColor+0x28>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4907      	ldr	r1, [pc, #28]	; (8002f50 <BSP_LCD_SetTextColor+0x2c>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	601a      	str	r2, [r3, #0]
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	20000444 	.word	0x20000444
 8002f50:	20000448 	.word	0x20000448

08002f54 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <BSP_LCD_SetBackColor+0x2c>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4908      	ldr	r1, [pc, #32]	; (8002f84 <BSP_LCD_SetBackColor+0x30>)
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	601a      	str	r2, [r3, #0]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000444 	.word	0x20000444
 8002f84:	20000448 	.word	0x20000448

08002f88 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002f90:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <BSP_LCD_SetFont+0x2c>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4908      	ldr	r1, [pc, #32]	; (8002fb8 <BSP_LCD_SetFont+0x30>)
 8002f96:	4613      	mov	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3308      	adds	r3, #8
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	601a      	str	r2, [r3, #0]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000444 	.word	0x20000444
 8002fb8:	20000448 	.word	0x20000448

08002fbc <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	; (8003004 <BSP_LCD_Clear+0x48>)
 8002fc6:	681c      	ldr	r4, [r3, #0]
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <BSP_LCD_Clear+0x48>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a0e      	ldr	r2, [pc, #56]	; (8003008 <BSP_LCD_Clear+0x4c>)
 8002fce:	2134      	movs	r1, #52	; 0x34
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	335c      	adds	r3, #92	; 0x5c
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461e      	mov	r6, r3
 8002fdc:	f7ff ff0a 	bl	8002df4 <BSP_LCD_GetXSize>
 8002fe0:	4605      	mov	r5, r0
 8002fe2:	f7ff ff1b 	bl	8002e1c <BSP_LCD_GetYSize>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	2300      	movs	r3, #0
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	462a      	mov	r2, r5
 8002ff4:	4631      	mov	r1, r6
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f000 fbfe 	bl	80037f8 <LL_FillBuffer>
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003004:	20000444 	.word	0x20000444
 8003008:	200086f4 	.word	0x200086f4

0800300c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800300c:	b5b0      	push	{r4, r5, r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af02      	add	r7, sp, #8
 8003012:	4603      	mov	r3, r0
 8003014:	80fb      	strh	r3, [r7, #6]
 8003016:	460b      	mov	r3, r1
 8003018:	80bb      	strh	r3, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003022:	4b26      	ldr	r3, [pc, #152]	; (80030bc <BSP_LCD_DrawHLine+0xb0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <BSP_LCD_DrawHLine+0xb4>)
 8003028:	2134      	movs	r1, #52	; 0x34
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	3348      	adds	r3, #72	; 0x48
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d114      	bne.n	8003062 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003038:	4b20      	ldr	r3, [pc, #128]	; (80030bc <BSP_LCD_DrawHLine+0xb0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a20      	ldr	r2, [pc, #128]	; (80030c0 <BSP_LCD_DrawHLine+0xb4>)
 800303e:	2134      	movs	r1, #52	; 0x34
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	335c      	adds	r3, #92	; 0x5c
 8003048:	681c      	ldr	r4, [r3, #0]
 800304a:	f7ff fed3 	bl	8002df4 <BSP_LCD_GetXSize>
 800304e:	4602      	mov	r2, r0
 8003050:	88bb      	ldrh	r3, [r7, #4]
 8003052:	fb03 f202 	mul.w	r2, r3, r2
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	4413      	add	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4423      	add	r3, r4
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	e013      	b.n	800308a <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003062:	4b16      	ldr	r3, [pc, #88]	; (80030bc <BSP_LCD_DrawHLine+0xb0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <BSP_LCD_DrawHLine+0xb4>)
 8003068:	2134      	movs	r1, #52	; 0x34
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	335c      	adds	r3, #92	; 0x5c
 8003072:	681c      	ldr	r4, [r3, #0]
 8003074:	f7ff febe 	bl	8002df4 <BSP_LCD_GetXSize>
 8003078:	4602      	mov	r2, r0
 800307a:	88bb      	ldrh	r3, [r7, #4]
 800307c:	fb03 f202 	mul.w	r2, r3, r2
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4423      	add	r3, r4
 8003088:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800308a:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <BSP_LCD_DrawHLine+0xb0>)
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	68f9      	ldr	r1, [r7, #12]
 8003090:	887c      	ldrh	r4, [r7, #2]
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <BSP_LCD_DrawHLine+0xb0>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	4d0b      	ldr	r5, [pc, #44]	; (80030c4 <BSP_LCD_DrawHLine+0xb8>)
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	442b      	add	r3, r5
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	2300      	movs	r3, #0
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	2301      	movs	r3, #1
 80030ac:	4622      	mov	r2, r4
 80030ae:	f000 fba3 	bl	80037f8 <LL_FillBuffer>
}
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bdb0      	pop	{r4, r5, r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000444 	.word	0x20000444
 80030c0:	200086f4 	.word	0x200086f4
 80030c4:	20000448 	.word	0x20000448

080030c8 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	80fb      	strh	r3, [r7, #6]
 80030d2:	460b      	mov	r3, r1
 80030d4:	80bb      	strh	r3, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80030da:	887b      	ldrh	r3, [r7, #2]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	f1c3 0303 	rsb	r3, r3, #3
 80030e2:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 80030ec:	e0c7      	b.n	800327e <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	4413      	add	r3, r2
 80030f6:	b298      	uxth	r0, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	88ba      	ldrh	r2, [r7, #4]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	b299      	uxth	r1, r3
 8003102:	4b64      	ldr	r3, [pc, #400]	; (8003294 <BSP_LCD_DrawCircle+0x1cc>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	4c64      	ldr	r4, [pc, #400]	; (8003298 <BSP_LCD_DrawCircle+0x1d0>)
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4423      	add	r3, r4
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	f000 f8c1 	bl	800329c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	b29b      	uxth	r3, r3
 800311e:	88fa      	ldrh	r2, [r7, #6]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	b298      	uxth	r0, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	b29b      	uxth	r3, r3
 8003128:	88ba      	ldrh	r2, [r7, #4]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	b299      	uxth	r1, r3
 800312e:	4b59      	ldr	r3, [pc, #356]	; (8003294 <BSP_LCD_DrawCircle+0x1cc>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	4c59      	ldr	r4, [pc, #356]	; (8003298 <BSP_LCD_DrawCircle+0x1d0>)
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4423      	add	r3, r4
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	f000 f8ab 	bl	800329c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	b29a      	uxth	r2, r3
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	4413      	add	r3, r2
 800314e:	b298      	uxth	r0, r3
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	b29b      	uxth	r3, r3
 8003154:	88ba      	ldrh	r2, [r7, #4]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	b299      	uxth	r1, r3
 800315a:	4b4e      	ldr	r3, [pc, #312]	; (8003294 <BSP_LCD_DrawCircle+0x1cc>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4c4e      	ldr	r4, [pc, #312]	; (8003298 <BSP_LCD_DrawCircle+0x1d0>)
 8003160:	4613      	mov	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4423      	add	r3, r4
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	f000 f895 	bl	800329c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	b29b      	uxth	r3, r3
 8003176:	88fa      	ldrh	r2, [r7, #6]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	b298      	uxth	r0, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	b29b      	uxth	r3, r3
 8003180:	88ba      	ldrh	r2, [r7, #4]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	b299      	uxth	r1, r3
 8003186:	4b43      	ldr	r3, [pc, #268]	; (8003294 <BSP_LCD_DrawCircle+0x1cc>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4c43      	ldr	r4, [pc, #268]	; (8003298 <BSP_LCD_DrawCircle+0x1d0>)
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4423      	add	r3, r4
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	f000 f87f 	bl	800329c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	4413      	add	r3, r2
 80031a6:	b298      	uxth	r0, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	88bb      	ldrh	r3, [r7, #4]
 80031ae:	4413      	add	r3, r2
 80031b0:	b299      	uxth	r1, r3
 80031b2:	4b38      	ldr	r3, [pc, #224]	; (8003294 <BSP_LCD_DrawCircle+0x1cc>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4c38      	ldr	r4, [pc, #224]	; (8003298 <BSP_LCD_DrawCircle+0x1d0>)
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4423      	add	r3, r4
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	f000 f869 	bl	800329c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	88fa      	ldrh	r2, [r7, #6]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	b298      	uxth	r0, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	88bb      	ldrh	r3, [r7, #4]
 80031da:	4413      	add	r3, r2
 80031dc:	b299      	uxth	r1, r3
 80031de:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <BSP_LCD_DrawCircle+0x1cc>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4c2d      	ldr	r4, [pc, #180]	; (8003298 <BSP_LCD_DrawCircle+0x1d0>)
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4423      	add	r3, r4
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	f000 f853 	bl	800329c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	4413      	add	r3, r2
 80031fe:	b298      	uxth	r0, r3
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	b29a      	uxth	r2, r3
 8003204:	88bb      	ldrh	r3, [r7, #4]
 8003206:	4413      	add	r3, r2
 8003208:	b299      	uxth	r1, r3
 800320a:	4b22      	ldr	r3, [pc, #136]	; (8003294 <BSP_LCD_DrawCircle+0x1cc>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4c22      	ldr	r4, [pc, #136]	; (8003298 <BSP_LCD_DrawCircle+0x1d0>)
 8003210:	4613      	mov	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4413      	add	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4423      	add	r3, r4
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	f000 f83d 	bl	800329c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	b29b      	uxth	r3, r3
 8003226:	88fa      	ldrh	r2, [r7, #6]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	b298      	uxth	r0, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	b29a      	uxth	r2, r3
 8003230:	88bb      	ldrh	r3, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	b299      	uxth	r1, r3
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <BSP_LCD_DrawCircle+0x1cc>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4c17      	ldr	r4, [pc, #92]	; (8003298 <BSP_LCD_DrawCircle+0x1d0>)
 800323c:	4613      	mov	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4423      	add	r3, r4
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	f000 f827 	bl	800329c <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	da06      	bge.n	8003262 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	009a      	lsls	r2, r3, #2
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	4413      	add	r3, r2
 800325c:	3306      	adds	r3, #6
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	e00a      	b.n	8003278 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	009a      	lsls	r2, r3, #2
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	4413      	add	r3, r2
 800326e:	330a      	adds	r3, #10
 8003270:	617b      	str	r3, [r7, #20]
      current_y--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3b01      	subs	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	3301      	adds	r3, #1
 800327c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	429a      	cmp	r2, r3
 8003284:	f67f af33 	bls.w	80030ee <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003288:	bf00      	nop
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd90      	pop	{r4, r7, pc}
 8003292:	bf00      	nop
 8003294:	20000444 	.word	0x20000444
 8003298:	20000448 	.word	0x20000448

0800329c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800329c:	b5b0      	push	{r4, r5, r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	4603      	mov	r3, r0
 80032a4:	603a      	str	r2, [r7, #0]
 80032a6:	80fb      	strh	r3, [r7, #6]
 80032a8:	460b      	mov	r3, r1
 80032aa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80032ac:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <BSP_LCD_DrawPixel+0x88>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <BSP_LCD_DrawPixel+0x8c>)
 80032b2:	2134      	movs	r1, #52	; 0x34
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3348      	adds	r3, #72	; 0x48
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d116      	bne.n	80032f0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80032c2:	4b18      	ldr	r3, [pc, #96]	; (8003324 <BSP_LCD_DrawPixel+0x88>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a18      	ldr	r2, [pc, #96]	; (8003328 <BSP_LCD_DrawPixel+0x8c>)
 80032c8:	2134      	movs	r1, #52	; 0x34
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	335c      	adds	r3, #92	; 0x5c
 80032d2:	681c      	ldr	r4, [r3, #0]
 80032d4:	88bd      	ldrh	r5, [r7, #4]
 80032d6:	f7ff fd8d 	bl	8002df4 <BSP_LCD_GetXSize>
 80032da:	4603      	mov	r3, r0
 80032dc:	fb03 f205 	mul.w	r2, r3, r5
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	4413      	add	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4423      	add	r3, r4
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	b292      	uxth	r2, r2
 80032ec:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80032ee:	e015      	b.n	800331c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <BSP_LCD_DrawPixel+0x88>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0c      	ldr	r2, [pc, #48]	; (8003328 <BSP_LCD_DrawPixel+0x8c>)
 80032f6:	2134      	movs	r1, #52	; 0x34
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	4413      	add	r3, r2
 80032fe:	335c      	adds	r3, #92	; 0x5c
 8003300:	681c      	ldr	r4, [r3, #0]
 8003302:	88bd      	ldrh	r5, [r7, #4]
 8003304:	f7ff fd76 	bl	8002df4 <BSP_LCD_GetXSize>
 8003308:	4603      	mov	r3, r0
 800330a:	fb03 f205 	mul.w	r2, r3, r5
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4423      	add	r3, r4
 8003316:	461a      	mov	r2, r3
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6013      	str	r3, [r2, #0]
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bdb0      	pop	{r4, r5, r7, pc}
 8003324:	20000444 	.word	0x20000444
 8003328:	200086f4 	.word	0x200086f4

0800332c <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b08b      	sub	sp, #44	; 0x2c
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	330a      	adds	r3, #10
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	330b      	adds	r3, #11
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	441a      	add	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	330c      	adds	r3, #12
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	041b      	lsls	r3, r3, #16
 8003366:	441a      	add	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	330d      	adds	r3, #13
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	061b      	lsls	r3, r3, #24
 8003370:	4413      	add	r3, r2
 8003372:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3312      	adds	r3, #18
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3313      	adds	r3, #19
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	441a      	add	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3314      	adds	r3, #20
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	441a      	add	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3315      	adds	r3, #21
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	061b      	lsls	r3, r3, #24
 8003398:	4413      	add	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3316      	adds	r3, #22
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3317      	adds	r3, #23
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	021b      	lsls	r3, r3, #8
 80033ac:	441a      	add	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3318      	adds	r3, #24
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	441a      	add	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3319      	adds	r3, #25
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	061b      	lsls	r3, r3, #24
 80033c0:	4413      	add	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	331c      	adds	r3, #28
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	331d      	adds	r3, #29
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	4413      	add	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 80033d8:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <BSP_LCD_DrawBitmap+0x15c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a2b      	ldr	r2, [pc, #172]	; (800348c <BSP_LCD_DrawBitmap+0x160>)
 80033de:	2134      	movs	r1, #52	; 0x34
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	335c      	adds	r3, #92	; 0x5c
 80033e8:	681c      	ldr	r4, [r3, #0]
 80033ea:	f7ff fd03 	bl	8002df4 <BSP_LCD_GetXSize>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	fb03 f202 	mul.w	r2, r3, r2
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4423      	add	r3, r4
 80033fe:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	3b20      	subs	r3, #32
 8003404:	2b07      	cmp	r3, #7
 8003406:	d802      	bhi.n	800340e <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003408:	2300      	movs	r3, #0
 800340a:	61fb      	str	r3, [r7, #28]
 800340c:	e008      	b.n	8003420 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	3b10      	subs	r3, #16
 8003412:	2b07      	cmp	r3, #7
 8003414:	d802      	bhi.n	800341c <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8003416:	2302      	movs	r3, #2
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	e001      	b.n	8003420 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 800341c:	2301      	movs	r3, #1
 800341e:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3b01      	subs	r3, #1
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	08d2      	lsrs	r2, r2, #3
 800342e:	fb02 f203 	mul.w	r2, r2, r3
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	4413      	add	r3, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 800343c:	2300      	movs	r3, #0
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
 8003440:	e018      	b.n	8003474 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003442:	6a39      	ldr	r1, [r7, #32]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fa21 	bl	8003890 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 800344e:	f7ff fcd1 	bl	8002df4 <BSP_LCD_GetXSize>
 8003452:	4603      	mov	r3, r0
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	6a3a      	ldr	r2, [r7, #32]
 8003458:	4413      	add	r3, r2
 800345a:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	08db      	lsrs	r3, r3, #3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	fb02 f303 	mul.w	r3, r2, r3
 8003466:	425b      	negs	r3, r3
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	4413      	add	r3, r2
 800346c:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	3301      	adds	r3, #1
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	429a      	cmp	r2, r3
 800347a:	d3e2      	bcc.n	8003442 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	372c      	adds	r7, #44	; 0x2c
 8003482:	46bd      	mov	sp, r7
 8003484:	bd90      	pop	{r4, r7, pc}
 8003486:	bf00      	nop
 8003488:	20000444 	.word	0x20000444
 800348c:	200086f4 	.word	0x200086f4

08003490 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	80fb      	strh	r3, [r7, #6]
 800349a:	460b      	mov	r3, r1
 800349c:	80bb      	strh	r3, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80034a2:	887b      	ldrh	r3, [r7, #2]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	f1c3 0303 	rsb	r3, r3, #3
 80034aa:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80034b4:	4b44      	ldr	r3, [pc, #272]	; (80035c8 <BSP_LCD_FillCircle+0x138>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4944      	ldr	r1, [pc, #272]	; (80035cc <BSP_LCD_FillCircle+0x13c>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fd2c 	bl	8002f24 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 80034cc:	e061      	b.n	8003592 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d021      	beq.n	8003518 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	88fa      	ldrh	r2, [r7, #6]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	b298      	uxth	r0, r3
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	88bb      	ldrh	r3, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	b299      	uxth	r1, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	f7ff fd8b 	bl	800300c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	b298      	uxth	r0, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	b29b      	uxth	r3, r3
 8003504:	88ba      	ldrh	r2, [r7, #4]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	b299      	uxth	r1, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	b29b      	uxth	r3, r3
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	b29b      	uxth	r3, r3
 8003512:	461a      	mov	r2, r3
 8003514:	f7ff fd7a 	bl	800300c <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d021      	beq.n	8003562 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	b29b      	uxth	r3, r3
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	b298      	uxth	r0, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	b29b      	uxth	r3, r3
 800352c:	88ba      	ldrh	r2, [r7, #4]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	b299      	uxth	r1, r3
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	b29b      	uxth	r3, r3
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	b29b      	uxth	r3, r3
 800353a:	461a      	mov	r2, r3
 800353c:	f7ff fd66 	bl	800300c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	b29b      	uxth	r3, r3
 8003544:	88fa      	ldrh	r2, [r7, #6]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	b298      	uxth	r0, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	b29a      	uxth	r2, r3
 800354e:	88bb      	ldrh	r3, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	b299      	uxth	r1, r3
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	b29b      	uxth	r3, r3
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	b29b      	uxth	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	f7ff fd55 	bl	800300c <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	da06      	bge.n	8003576 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	009a      	lsls	r2, r3, #2
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	4413      	add	r3, r2
 8003570:	3306      	adds	r3, #6
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	e00a      	b.n	800358c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	009a      	lsls	r2, r3, #2
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	4413      	add	r3, r2
 8003582:	330a      	adds	r3, #10
 8003584:	617b      	str	r3, [r7, #20]
      current_y--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3b01      	subs	r3, #1
 800358a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	3301      	adds	r3, #1
 8003590:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	429a      	cmp	r2, r3
 8003598:	d999      	bls.n	80034ce <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <BSP_LCD_FillCircle+0x138>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	490b      	ldr	r1, [pc, #44]	; (80035cc <BSP_LCD_FillCircle+0x13c>)
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fcb9 	bl	8002f24 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80035b2:	887a      	ldrh	r2, [r7, #2]
 80035b4:	88b9      	ldrh	r1, [r7, #4]
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fd85 	bl	80030c8 <BSP_LCD_DrawCircle>
}
 80035be:	bf00      	nop
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000444 	.word	0x20000444
 80035cc:	20000448 	.word	0x20000448

080035d0 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <BSP_LCD_DisplayOn+0x30>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <BSP_LCD_DisplayOn+0x30>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80035e4:	2201      	movs	r2, #1
 80035e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035ea:	4806      	ldr	r0, [pc, #24]	; (8003604 <BSP_LCD_DisplayOn+0x34>)
 80035ec:	f003 fad4 	bl	8006b98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80035f0:	2201      	movs	r2, #1
 80035f2:	2108      	movs	r1, #8
 80035f4:	4804      	ldr	r0, [pc, #16]	; (8003608 <BSP_LCD_DisplayOn+0x38>)
 80035f6:	f003 facf 	bl	8006b98 <HAL_GPIO_WritePin>
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	200086f4 	.word	0x200086f4
 8003604:	40022000 	.word	0x40022000
 8003608:	40022800 	.word	0x40022800

0800360c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b090      	sub	sp, #64	; 0x40
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003616:	4b64      	ldr	r3, [pc, #400]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	4a63      	ldr	r2, [pc, #396]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 800361c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003620:	6453      	str	r3, [r2, #68]	; 0x44
 8003622:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800362e:	4b5e      	ldr	r3, [pc, #376]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a5d      	ldr	r2, [pc, #372]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 8003634:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003646:	4b58      	ldr	r3, [pc, #352]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a57      	ldr	r2, [pc, #348]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 800364c:	f043 0310 	orr.w	r3, r3, #16
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	623b      	str	r3, [r7, #32]
 800365c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800365e:	4b52      	ldr	r3, [pc, #328]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a51      	ldr	r2, [pc, #324]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 8003664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003676:	4b4c      	ldr	r3, [pc, #304]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	4a4b      	ldr	r2, [pc, #300]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 800367c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003680:	6313      	str	r3, [r2, #48]	; 0x30
 8003682:	4b49      	ldr	r3, [pc, #292]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800368e:	4b46      	ldr	r3, [pc, #280]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	4a45      	ldr	r2, [pc, #276]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 8003694:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003698:	6313      	str	r3, [r2, #48]	; 0x30
 800369a:	4b43      	ldr	r3, [pc, #268]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80036a6:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	4a3f      	ldr	r2, [pc, #252]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 80036ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036b0:	6313      	str	r3, [r2, #48]	; 0x30
 80036b2:	4b3d      	ldr	r3, [pc, #244]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80036be:	4b3a      	ldr	r3, [pc, #232]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	4a39      	ldr	r2, [pc, #228]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 80036c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ca:	4b37      	ldr	r3, [pc, #220]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80036d6:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	4a33      	ldr	r2, [pc, #204]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 80036dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036e0:	6313      	str	r3, [r2, #48]	; 0x30
 80036e2:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <BSP_LCD_MspInit+0x19c>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80036ee:	2310      	movs	r3, #16
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80036f2:	2302      	movs	r3, #2
 80036f4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80036fa:	2302      	movs	r3, #2
 80036fc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80036fe:	230e      	movs	r3, #14
 8003700:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003702:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003706:	4619      	mov	r1, r3
 8003708:	4828      	ldr	r0, [pc, #160]	; (80037ac <BSP_LCD_MspInit+0x1a0>)
 800370a:	f002 ff8d 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800370e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003714:	2302      	movs	r3, #2
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003718:	2309      	movs	r3, #9
 800371a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800371c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003720:	4619      	mov	r1, r3
 8003722:	4823      	ldr	r0, [pc, #140]	; (80037b0 <BSP_LCD_MspInit+0x1a4>)
 8003724:	f002 ff80 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003728:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003732:	230e      	movs	r3, #14
 8003734:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800373a:	4619      	mov	r1, r3
 800373c:	481d      	ldr	r0, [pc, #116]	; (80037b4 <BSP_LCD_MspInit+0x1a8>)
 800373e:	f002 ff73 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003742:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003748:	2302      	movs	r3, #2
 800374a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800374c:	230e      	movs	r3, #14
 800374e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003754:	4619      	mov	r1, r3
 8003756:	4818      	ldr	r0, [pc, #96]	; (80037b8 <BSP_LCD_MspInit+0x1ac>)
 8003758:	f002 ff66 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800375c:	23f7      	movs	r3, #247	; 0xf7
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003760:	2302      	movs	r3, #2
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003764:	230e      	movs	r3, #14
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800376c:	4619      	mov	r1, r3
 800376e:	4813      	ldr	r0, [pc, #76]	; (80037bc <BSP_LCD_MspInit+0x1b0>)
 8003770:	f002 ff5a 	bl	8006628 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800377a:	2301      	movs	r3, #1
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800377e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003782:	4619      	mov	r1, r3
 8003784:	480b      	ldr	r0, [pc, #44]	; (80037b4 <BSP_LCD_MspInit+0x1a8>)
 8003786:	f002 ff4f 	bl	8006628 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800378a:	2308      	movs	r3, #8
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800378e:	2301      	movs	r3, #1
 8003790:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003796:	4619      	mov	r1, r3
 8003798:	4808      	ldr	r0, [pc, #32]	; (80037bc <BSP_LCD_MspInit+0x1b0>)
 800379a:	f002 ff45 	bl	8006628 <HAL_GPIO_Init>
}
 800379e:	bf00      	nop
 80037a0:	3740      	adds	r7, #64	; 0x40
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40021800 	.word	0x40021800
 80037b4:	40022000 	.word	0x40022000
 80037b8:	40022400 	.word	0x40022400
 80037bc:	40022800 	.word	0x40022800

080037c0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <BSP_LCD_ClockConfig+0x34>)
 80037cc:	2208      	movs	r2, #8
 80037ce:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <BSP_LCD_ClockConfig+0x34>)
 80037d2:	22c0      	movs	r2, #192	; 0xc0
 80037d4:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <BSP_LCD_ClockConfig+0x34>)
 80037d8:	2205      	movs	r2, #5
 80037da:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <BSP_LCD_ClockConfig+0x34>)
 80037de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037e2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80037e4:	4803      	ldr	r0, [pc, #12]	; (80037f4 <BSP_LCD_ClockConfig+0x34>)
 80037e6:	f005 f8e1 	bl	80089ac <HAL_RCCEx_PeriphCLKConfig>
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000460 	.word	0x20000460

080037f8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003806:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <LL_FillBuffer+0x88>)
 8003808:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800380c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800380e:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <LL_FillBuffer+0x8c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <LL_FillBuffer+0x90>)
 8003814:	2134      	movs	r1, #52	; 0x34
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	3348      	adds	r3, #72	; 0x48
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d103      	bne.n	800382c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003824:	4b16      	ldr	r3, [pc, #88]	; (8003880 <LL_FillBuffer+0x88>)
 8003826:	2202      	movs	r2, #2
 8003828:	609a      	str	r2, [r3, #8]
 800382a:	e002      	b.n	8003832 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <LL_FillBuffer+0x88>)
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003832:	4a13      	ldr	r2, [pc, #76]	; (8003880 <LL_FillBuffer+0x88>)
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <LL_FillBuffer+0x88>)
 800383a:	4a14      	ldr	r2, [pc, #80]	; (800388c <LL_FillBuffer+0x94>)
 800383c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800383e:	4810      	ldr	r0, [pc, #64]	; (8003880 <LL_FillBuffer+0x88>)
 8003840:	f002 fb56 	bl	8005ef0 <HAL_DMA2D_Init>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d115      	bne.n	8003876 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800384a:	68f9      	ldr	r1, [r7, #12]
 800384c:	480c      	ldr	r0, [pc, #48]	; (8003880 <LL_FillBuffer+0x88>)
 800384e:	f002 fdbd 	bl	80063cc <HAL_DMA2D_ConfigLayer>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10e      	bne.n	8003876 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69f9      	ldr	r1, [r7, #28]
 8003862:	4807      	ldr	r0, [pc, #28]	; (8003880 <LL_FillBuffer+0x88>)
 8003864:	f002 fb8e 	bl	8005f84 <HAL_DMA2D_Start>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800386e:	210a      	movs	r1, #10
 8003870:	4803      	ldr	r0, [pc, #12]	; (8003880 <LL_FillBuffer+0x88>)
 8003872:	f002 fbb2 	bl	8005fda <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	20000404 	.word	0x20000404
 8003884:	20000444 	.word	0x20000444
 8003888:	200086f4 	.word	0x200086f4
 800388c:	4002b000 	.word	0x4002b000

08003890 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af02      	add	r7, sp, #8
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800389e:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <LL_ConvertLineToARGB8888+0x80>)
 80038a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038a4:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80038a6:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <LL_ConvertLineToARGB8888+0x80>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80038ac:	4b18      	ldr	r3, [pc, #96]	; (8003910 <LL_ConvertLineToARGB8888+0x80>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80038b2:	4b17      	ldr	r3, [pc, #92]	; (8003910 <LL_ConvertLineToARGB8888+0x80>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80038b8:	4b15      	ldr	r3, [pc, #84]	; (8003910 <LL_ConvertLineToARGB8888+0x80>)
 80038ba:	22ff      	movs	r2, #255	; 0xff
 80038bc:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80038be:	4a14      	ldr	r2, [pc, #80]	; (8003910 <LL_ConvertLineToARGB8888+0x80>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80038c4:	4b12      	ldr	r3, [pc, #72]	; (8003910 <LL_ConvertLineToARGB8888+0x80>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <LL_ConvertLineToARGB8888+0x80>)
 80038cc:	4a11      	ldr	r2, [pc, #68]	; (8003914 <LL_ConvertLineToARGB8888+0x84>)
 80038ce:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80038d0:	480f      	ldr	r0, [pc, #60]	; (8003910 <LL_ConvertLineToARGB8888+0x80>)
 80038d2:	f002 fb0d 	bl	8005ef0 <HAL_DMA2D_Init>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d115      	bne.n	8003908 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80038dc:	2101      	movs	r1, #1
 80038de:	480c      	ldr	r0, [pc, #48]	; (8003910 <LL_ConvertLineToARGB8888+0x80>)
 80038e0:	f002 fd74 	bl	80063cc <HAL_DMA2D_ConfigLayer>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10e      	bne.n	8003908 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80038ea:	68f9      	ldr	r1, [r7, #12]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	2301      	movs	r3, #1
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4806      	ldr	r0, [pc, #24]	; (8003910 <LL_ConvertLineToARGB8888+0x80>)
 80038f6:	f002 fb45 	bl	8005f84 <HAL_DMA2D_Start>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d103      	bne.n	8003908 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003900:	210a      	movs	r1, #10
 8003902:	4803      	ldr	r0, [pc, #12]	; (8003910 <LL_ConvertLineToARGB8888+0x80>)
 8003904:	f002 fb69 	bl	8005fda <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000404 	.word	0x20000404
 8003914:	4002b000 	.word	0x4002b000

08003918 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800391c:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <BSP_SDRAM_Init+0xac>)
 800391e:	4a2a      	ldr	r2, [pc, #168]	; (80039c8 <BSP_SDRAM_Init+0xb0>)
 8003920:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003922:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <BSP_SDRAM_Init+0xb4>)
 8003924:	2202      	movs	r2, #2
 8003926:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003928:	4b28      	ldr	r3, [pc, #160]	; (80039cc <BSP_SDRAM_Init+0xb4>)
 800392a:	2207      	movs	r2, #7
 800392c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800392e:	4b27      	ldr	r3, [pc, #156]	; (80039cc <BSP_SDRAM_Init+0xb4>)
 8003930:	2204      	movs	r2, #4
 8003932:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <BSP_SDRAM_Init+0xb4>)
 8003936:	2207      	movs	r2, #7
 8003938:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <BSP_SDRAM_Init+0xb4>)
 800393c:	2202      	movs	r2, #2
 800393e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <BSP_SDRAM_Init+0xb4>)
 8003942:	2202      	movs	r2, #2
 8003944:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003946:	4b21      	ldr	r3, [pc, #132]	; (80039cc <BSP_SDRAM_Init+0xb4>)
 8003948:	2202      	movs	r2, #2
 800394a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <BSP_SDRAM_Init+0xac>)
 800394e:	2200      	movs	r2, #0
 8003950:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003952:	4b1c      	ldr	r3, [pc, #112]	; (80039c4 <BSP_SDRAM_Init+0xac>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003958:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <BSP_SDRAM_Init+0xac>)
 800395a:	2204      	movs	r2, #4
 800395c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <BSP_SDRAM_Init+0xac>)
 8003960:	2210      	movs	r2, #16
 8003962:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003964:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <BSP_SDRAM_Init+0xac>)
 8003966:	2240      	movs	r2, #64	; 0x40
 8003968:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800396a:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <BSP_SDRAM_Init+0xac>)
 800396c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003970:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003972:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <BSP_SDRAM_Init+0xac>)
 8003974:	2200      	movs	r2, #0
 8003976:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003978:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <BSP_SDRAM_Init+0xac>)
 800397a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800397e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003980:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <BSP_SDRAM_Init+0xac>)
 8003982:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003986:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <BSP_SDRAM_Init+0xac>)
 800398a:	2200      	movs	r2, #0
 800398c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800398e:	2100      	movs	r1, #0
 8003990:	480c      	ldr	r0, [pc, #48]	; (80039c4 <BSP_SDRAM_Init+0xac>)
 8003992:	f000 f87f 	bl	8003a94 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003996:	490d      	ldr	r1, [pc, #52]	; (80039cc <BSP_SDRAM_Init+0xb4>)
 8003998:	480a      	ldr	r0, [pc, #40]	; (80039c4 <BSP_SDRAM_Init+0xac>)
 800399a:	f005 ffcf 	bl	800993c <HAL_SDRAM_Init>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <BSP_SDRAM_Init+0xb8>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	e002      	b.n	80039b2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80039ac:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <BSP_SDRAM_Init+0xb8>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80039b2:	f240 6003 	movw	r0, #1539	; 0x603
 80039b6:	f000 f80d 	bl	80039d4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <BSP_SDRAM_Init+0xb8>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000879c 	.word	0x2000879c
 80039c8:	a0000140 	.word	0xa0000140
 80039cc:	200004e4 	.word	0x200004e4
 80039d0:	2000003c 	.word	0x2000003c

080039d4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80039e0:	4b2a      	ldr	r3, [pc, #168]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80039e6:	4b29      	ldr	r3, [pc, #164]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039e8:	2210      	movs	r2, #16
 80039ea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80039ec:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80039f2:	4b26      	ldr	r3, [pc, #152]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80039f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039fc:	4923      	ldr	r1, [pc, #140]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039fe:	4824      	ldr	r0, [pc, #144]	; (8003a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a00:	f005 ffd0 	bl	80099a4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003a04:	2001      	movs	r0, #1
 8003a06:	f001 fadb 	bl	8004fc0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a12:	2210      	movs	r2, #16
 8003a14:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a26:	4919      	ldr	r1, [pc, #100]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a28:	4819      	ldr	r0, [pc, #100]	; (8003a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a2a:	f005 ffbb 	bl	80099a4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003a2e:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a30:	2203      	movs	r2, #3
 8003a32:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a34:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a36:	2210      	movs	r2, #16
 8003a38:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003a3a:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a40:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a4a:	4910      	ldr	r1, [pc, #64]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a4c:	4810      	ldr	r0, [pc, #64]	; (8003a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a4e:	f005 ffa9 	bl	80099a4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003a52:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003a56:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a60:	2210      	movs	r2, #16
 8003a62:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a6e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a74:	4905      	ldr	r1, [pc, #20]	; (8003a8c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a76:	4806      	ldr	r0, [pc, #24]	; (8003a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a78:	f005 ff94 	bl	80099a4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4804      	ldr	r0, [pc, #16]	; (8003a90 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a80:	f005 ffc5 	bl	8009a0e <HAL_SDRAM_ProgramRefreshRate>
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000500 	.word	0x20000500
 8003a90:	2000879c 	.word	0x2000879c

08003a94 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b090      	sub	sp, #64	; 0x40
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003a9e:	4b70      	ldr	r3, [pc, #448]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	4a6f      	ldr	r2, [pc, #444]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6393      	str	r3, [r2, #56]	; 0x38
 8003aaa:	4b6d      	ldr	r3, [pc, #436]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003ab6:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	4a69      	ldr	r2, [pc, #420]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003abc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac2:	4b67      	ldr	r3, [pc, #412]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ace:	4b64      	ldr	r3, [pc, #400]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	4a63      	ldr	r2, [pc, #396]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003ad4:	f043 0304 	orr.w	r3, r3, #4
 8003ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ada:	4b61      	ldr	r3, [pc, #388]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ae6:	4b5e      	ldr	r3, [pc, #376]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	4a5d      	ldr	r2, [pc, #372]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003aec:	f043 0308 	orr.w	r3, r3, #8
 8003af0:	6313      	str	r3, [r2, #48]	; 0x30
 8003af2:	4b5b      	ldr	r3, [pc, #364]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003afe:	4b58      	ldr	r3, [pc, #352]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	4a57      	ldr	r2, [pc, #348]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003b04:	f043 0310 	orr.w	r3, r3, #16
 8003b08:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0a:	4b55      	ldr	r3, [pc, #340]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	61bb      	str	r3, [r7, #24]
 8003b14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b16:	4b52      	ldr	r3, [pc, #328]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	4a51      	ldr	r2, [pc, #324]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003b1c:	f043 0320 	orr.w	r3, r3, #32
 8003b20:	6313      	str	r3, [r2, #48]	; 0x30
 8003b22:	4b4f      	ldr	r3, [pc, #316]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b2e:	4b4c      	ldr	r3, [pc, #304]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	4a4b      	ldr	r2, [pc, #300]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b38:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3a:	4b49      	ldr	r3, [pc, #292]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	613b      	str	r3, [r7, #16]
 8003b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b46:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	4a45      	ldr	r2, [pc, #276]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b50:	6313      	str	r3, [r2, #48]	; 0x30
 8003b52:	4b43      	ldr	r3, [pc, #268]	; (8003c60 <BSP_SDRAM_MspInit+0x1cc>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003b62:	2301      	movs	r3, #1
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003b66:	2302      	movs	r3, #2
 8003b68:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003b6e:	2308      	movs	r3, #8
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b76:	4619      	mov	r1, r3
 8003b78:	483a      	ldr	r0, [pc, #232]	; (8003c64 <BSP_SDRAM_MspInit+0x1d0>)
 8003b7a:	f002 fd55 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003b7e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4837      	ldr	r0, [pc, #220]	; (8003c68 <BSP_SDRAM_MspInit+0x1d4>)
 8003b8c:	f002 fd4c 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003b90:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003b96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4833      	ldr	r0, [pc, #204]	; (8003c6c <BSP_SDRAM_MspInit+0x1d8>)
 8003b9e:	f002 fd43 	bl	8006628 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003ba2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bac:	4619      	mov	r1, r3
 8003bae:	4830      	ldr	r0, [pc, #192]	; (8003c70 <BSP_SDRAM_MspInit+0x1dc>)
 8003bb0:	f002 fd3a 	bl	8006628 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003bb4:	f248 1333 	movw	r3, #33075	; 0x8133
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	482c      	ldr	r0, [pc, #176]	; (8003c74 <BSP_SDRAM_MspInit+0x1e0>)
 8003bc2:	f002 fd31 	bl	8006628 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003bc6:	2328      	movs	r3, #40	; 0x28
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003bca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4829      	ldr	r0, [pc, #164]	; (8003c78 <BSP_SDRAM_MspInit+0x1e4>)
 8003bd2:	f002 fd29 	bl	8006628 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003bd6:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003bdc:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003bde:	2280      	movs	r2, #128	; 0x80
 8003be0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003be2:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003bea:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bf0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bf2:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003bf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bf8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003bfa:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003bfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c00:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003c02:	4b1e      	ldr	r3, [pc, #120]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003c08:	4b1c      	ldr	r3, [pc, #112]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003c0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c0e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003c16:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003c18:	2203      	movs	r2, #3
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003c1c:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003c22:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003c2a:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <BSP_SDRAM_MspInit+0x1ec>)
 8003c2c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a12      	ldr	r2, [pc, #72]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
 8003c34:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003c3a:	4810      	ldr	r0, [pc, #64]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003c3c:	f001 ffb6 	bl	8005bac <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003c40:	480e      	ldr	r0, [pc, #56]	; (8003c7c <BSP_SDRAM_MspInit+0x1e8>)
 8003c42:	f001 ff05 	bl	8005a50 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	210f      	movs	r1, #15
 8003c4a:	2038      	movs	r0, #56	; 0x38
 8003c4c:	f001 fdf6 	bl	800583c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003c50:	2038      	movs	r0, #56	; 0x38
 8003c52:	f001 fe0f 	bl	8005874 <HAL_NVIC_EnableIRQ>
}
 8003c56:	bf00      	nop
 8003c58:	3740      	adds	r7, #64	; 0x40
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40020800 	.word	0x40020800
 8003c68:	40020c00 	.word	0x40020c00
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40021400 	.word	0x40021400
 8003c74:	40021800 	.word	0x40021800
 8003c78:	40021c00 	.word	0x40021c00
 8003c7c:	20000510 	.word	0x20000510
 8003c80:	40026410 	.word	0x40026410

08003c84 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	460a      	mov	r2, r1
 8003c8e:	80fb      	strh	r3, [r7, #6]
 8003c90:	4613      	mov	r3, r2
 8003c92:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <BSP_TS_Init+0x68>)
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003c9e:	4a14      	ldr	r2, [pc, #80]	; (8003cf0 <BSP_TS_Init+0x6c>)
 8003ca0:	88bb      	ldrh	r3, [r7, #4]
 8003ca2:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <BSP_TS_Init+0x70>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2070      	movs	r0, #112	; 0x70
 8003caa:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003cac:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <BSP_TS_Init+0x70>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2070      	movs	r0, #112	; 0x70
 8003cb2:	4798      	blx	r3
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b51      	cmp	r3, #81	; 0x51
 8003cb8:	d111      	bne.n	8003cde <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003cba:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <BSP_TS_Init+0x74>)
 8003cbc:	4a0d      	ldr	r2, [pc, #52]	; (8003cf4 <BSP_TS_Init+0x70>)
 8003cbe:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <BSP_TS_Init+0x78>)
 8003cc2:	2270      	movs	r2, #112	; 0x70
 8003cc4:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <BSP_TS_Init+0x7c>)
 8003cc8:	2208      	movs	r2, #8
 8003cca:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <BSP_TS_Init+0x74>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <BSP_TS_Init+0x78>)
 8003cd4:	7812      	ldrb	r2, [r2, #0]
 8003cd6:	b292      	uxth	r2, r2
 8003cd8:	4610      	mov	r0, r2
 8003cda:	4798      	blx	r3
 8003cdc:	e001      	b.n	8003ce2 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20000574 	.word	0x20000574
 8003cf0:	20000576 	.word	0x20000576
 8003cf4:	20000000 	.word	0x20000000
 8003cf8:	20000570 	.word	0x20000570
 8003cfc:	20000579 	.word	0x20000579
 8003d00:	20000578 	.word	0x20000578

08003d04 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Configure Interrupt mode for SD detection pin */
  gpio_init_structure.Pin = TS_INT_PIN;
 8003d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d0e:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003d14:	2302      	movs	r3, #2
 8003d16:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003d18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003d1c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8003d1e:	1d3b      	adds	r3, r7, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	480c      	ldr	r0, [pc, #48]	; (8003d54 <BSP_TS_ITConfig+0x50>)
 8003d24:	f002 fc80 	bl	8006628 <HAL_GPIO_Init>

  /* Enable and set Touch screen EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	210f      	movs	r1, #15
 8003d2c:	2028      	movs	r0, #40	; 0x28
 8003d2e:	f001 fd85 	bl	800583c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8003d32:	2028      	movs	r0, #40	; 0x28
 8003d34:	f001 fd9e 	bl	8005874 <HAL_NVIC_EnableIRQ>

  /* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 8003d38:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <BSP_TS_ITConfig+0x54>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	4a07      	ldr	r2, [pc, #28]	; (8003d5c <BSP_TS_ITConfig+0x58>)
 8003d40:	7812      	ldrb	r2, [r2, #0]
 8003d42:	b292      	uxth	r2, r2
 8003d44:	4610      	mov	r0, r2
 8003d46:	4798      	blx	r3

  return TS_OK;  
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40022000 	.word	0x40022000
 8003d58:	20000570 	.word	0x20000570
 8003d5c:	20000579 	.word	0x20000579

08003d60 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b097      	sub	sp, #92	; 0x5c
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003d7a:	4b97      	ldr	r3, [pc, #604]	; (8003fd8 <BSP_TS_GetState+0x278>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	4a96      	ldr	r2, [pc, #600]	; (8003fdc <BSP_TS_GetState+0x27c>)
 8003d82:	7812      	ldrb	r2, [r2, #0]
 8003d84:	b292      	uxth	r2, r2
 8003d86:	4610      	mov	r0, r2
 8003d88:	4798      	blx	r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 81a8 	beq.w	80040ec <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003da0:	e197      	b.n	80040d2 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003da2:	4b8d      	ldr	r3, [pc, #564]	; (8003fd8 <BSP_TS_GetState+0x278>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	4a8c      	ldr	r2, [pc, #560]	; (8003fdc <BSP_TS_GetState+0x27c>)
 8003daa:	7812      	ldrb	r2, [r2, #0]
 8003dac:	b290      	uxth	r0, r2
 8003dae:	f107 0120 	add.w	r1, r7, #32
 8003db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db4:	0052      	lsls	r2, r2, #1
 8003db6:	188c      	adds	r4, r1, r2
 8003db8:	f107 0114 	add.w	r1, r7, #20
 8003dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dbe:	0052      	lsls	r2, r2, #1
 8003dc0:	440a      	add	r2, r1
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8003dc6:	4b86      	ldr	r3, [pc, #536]	; (8003fe0 <BSP_TS_GetState+0x280>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d11b      	bne.n	8003e06 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8003dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003de4:	440b      	add	r3, r1
 8003de6:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8003dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003df2:	4413      	add	r3, r2
 8003df4:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003e00:	440b      	add	r3, r1
 8003e02:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003e06:	4b76      	ldr	r3, [pc, #472]	; (8003fe0 <BSP_TS_GetState+0x280>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d010      	beq.n	8003e34 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8003e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003e20:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003e2e:	440b      	add	r3, r1
 8003e30:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003e34:	4b6a      	ldr	r3, [pc, #424]	; (8003fe0 <BSP_TS_GetState+0x280>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d010      	beq.n	8003e62 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8003e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003e48:	4413      	add	r3, r2
 8003e4a:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003e4e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003e5c:	440b      	add	r3, r1
 8003e5e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003e62:	4b5f      	ldr	r3, [pc, #380]	; (8003fe0 <BSP_TS_GetState+0x280>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01b      	beq.n	8003ea6 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8003e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003e76:	4413      	add	r3, r2
 8003e78:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003e84:	440b      	add	r3, r1
 8003e86:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003e92:	4413      	add	r3, r2
 8003e94:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003ea0:	440b      	add	r3, r1
 8003ea2:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003eae:	4413      	add	r3, r2
 8003eb0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4a4b      	ldr	r2, [pc, #300]	; (8003fe4 <BSP_TS_GetState+0x284>)
 8003eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebe:	4299      	cmp	r1, r3
 8003ec0:	d90e      	bls.n	8003ee0 <BSP_TS_GetState+0x180>
 8003ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003eca:	4413      	add	r3, r2
 8003ecc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003ed0:	4944      	ldr	r1, [pc, #272]	; (8003fe4 <BSP_TS_GetState+0x284>)
 8003ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	e00d      	b.n	8003efc <BSP_TS_GetState+0x19c>
 8003ee0:	4a40      	ldr	r2, [pc, #256]	; (8003fe4 <BSP_TS_GetState+0x284>)
 8003ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003ef2:	440b      	add	r3, r1
 8003ef4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003f08:	4413      	add	r3, r2
 8003f0a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4a35      	ldr	r2, [pc, #212]	; (8003fe8 <BSP_TS_GetState+0x288>)
 8003f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f18:	4299      	cmp	r1, r3
 8003f1a:	d90e      	bls.n	8003f3a <BSP_TS_GetState+0x1da>
 8003f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003f24:	4413      	add	r3, r2
 8003f26:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003f2a:	492f      	ldr	r1, [pc, #188]	; (8003fe8 <BSP_TS_GetState+0x288>)
 8003f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	e00d      	b.n	8003f56 <BSP_TS_GetState+0x1f6>
 8003f3a:	4a2b      	ldr	r2, [pc, #172]	; (8003fe8 <BSP_TS_GetState+0x288>)
 8003f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003f4c:	440b      	add	r3, r1
 8003f4e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8003f5a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003f5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f62:	4413      	add	r3, r2
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	dd17      	ble.n	8003f98 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8003f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003f70:	4413      	add	r3, r2
 8003f72:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003f76:	4619      	mov	r1, r3
 8003f78:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <BSP_TS_GetState+0x284>)
 8003f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003f88:	4413      	add	r3, r2
 8003f8a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <BSP_TS_GetState+0x288>)
 8003f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003f98:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <BSP_TS_GetState+0x27c>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b70      	cmp	r3, #112	; 0x70
 8003f9e:	d125      	bne.n	8003fec <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8003fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003fa8:	4413      	add	r3, r2
 8003faa:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4413      	add	r3, r2
 8003fb6:	460a      	mov	r2, r1
 8003fb8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fcc:	3304      	adds	r3, #4
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	4413      	add	r3, r2
 8003fd2:	460a      	mov	r2, r1
 8003fd4:	809a      	strh	r2, [r3, #4]
 8003fd6:	e02c      	b.n	8004032 <BSP_TS_GetState+0x2d2>
 8003fd8:	20000570 	.word	0x20000570
 8003fdc:	20000579 	.word	0x20000579
 8003fe0:	20000578 	.word	0x20000578
 8003fe4:	2000057c 	.word	0x2000057c
 8003fe8:	20000590 	.word	0x20000590
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003fec:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <BSP_TS_GetState+0x398>)
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4a42      	ldr	r2, [pc, #264]	; (80040fc <BSP_TS_GetState+0x39c>)
 8003ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffa:	fb03 f301 	mul.w	r3, r3, r1
 8003ffe:	0b1b      	lsrs	r3, r3, #12
 8004000:	b299      	uxth	r1, r3
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	4413      	add	r3, r2
 800400a:	460a      	mov	r2, r1
 800400c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800400e:	4b3c      	ldr	r3, [pc, #240]	; (8004100 <BSP_TS_GetState+0x3a0>)
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	4619      	mov	r1, r3
 8004014:	4a3b      	ldr	r2, [pc, #236]	; (8004104 <BSP_TS_GetState+0x3a4>)
 8004016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401c:	fb03 f301 	mul.w	r3, r3, r1
 8004020:	0b1b      	lsrs	r3, r3, #12
 8004022:	b299      	uxth	r1, r3
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004028:	3304      	adds	r3, #4
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4413      	add	r3, r2
 800402e:	460a      	mov	r2, r1
 8004030:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8004032:	4b35      	ldr	r3, [pc, #212]	; (8004108 <BSP_TS_GetState+0x3a8>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	b298      	uxth	r0, r3
 8004038:	f107 010c 	add.w	r1, r7, #12
 800403c:	f107 0210 	add.w	r2, r7, #16
 8004040:	f107 0308 	add.w	r3, r7, #8
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	460b      	mov	r3, r1
 8004048:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800404a:	f7fc fc41 	bl	80008d0 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	b2d9      	uxtb	r1, r3
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004056:	4413      	add	r3, r2
 8004058:	3316      	adds	r3, #22
 800405a:	460a      	mov	r2, r1
 800405c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	b2d9      	uxtb	r1, r3
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004066:	4413      	add	r3, r2
 8004068:	3320      	adds	r3, #32
 800406a:	460a      	mov	r2, r1
 800406c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d827      	bhi.n	80040c4 <BSP_TS_GetState+0x364>
 8004074:	a201      	add	r2, pc, #4	; (adr r2, 800407c <BSP_TS_GetState+0x31c>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	0800408d 	.word	0x0800408d
 8004080:	0800409b 	.word	0x0800409b
 8004084:	080040a9 	.word	0x080040a9
 8004088:	080040b7 	.word	0x080040b7
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004090:	4413      	add	r3, r2
 8004092:	331b      	adds	r3, #27
 8004094:	2201      	movs	r2, #1
 8004096:	701a      	strb	r2, [r3, #0]
          break;
 8004098:	e018      	b.n	80040cc <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800409e:	4413      	add	r3, r2
 80040a0:	331b      	adds	r3, #27
 80040a2:	2202      	movs	r2, #2
 80040a4:	701a      	strb	r2, [r3, #0]
          break;
 80040a6:	e011      	b.n	80040cc <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ac:	4413      	add	r3, r2
 80040ae:	331b      	adds	r3, #27
 80040b0:	2203      	movs	r2, #3
 80040b2:	701a      	strb	r2, [r3, #0]
          break;
 80040b4:	e00a      	b.n	80040cc <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ba:	4413      	add	r3, r2
 80040bc:	331b      	adds	r3, #27
 80040be:	2200      	movs	r2, #0
 80040c0:	701a      	strb	r2, [r3, #0]
          break;
 80040c2:	e003      	b.n	80040cc <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80040ca:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80040cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ce:	3301      	adds	r3, #1
 80040d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040da:	4293      	cmp	r3, r2
 80040dc:	f4ff ae61 	bcc.w	8003da2 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f813 	bl	800410c <BSP_TS_Get_GestureId>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80040ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3754      	adds	r7, #84	; 0x54
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd90      	pop	{r4, r7, pc}
 80040f8:	20000574 	.word	0x20000574
 80040fc:	2000057c 	.word	0x2000057c
 8004100:	20000576 	.word	0x20000576
 8004104:	20000590 	.word	0x20000590
 8004108:	20000579 	.word	0x20000579

0800410c <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800411c:	4b3b      	ldr	r3, [pc, #236]	; (800420c <BSP_TS_Get_GestureId+0x100>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	b29b      	uxth	r3, r3
 8004122:	f107 0208 	add.w	r2, r7, #8
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f7fc fbb8 	bl	800089e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b49      	cmp	r3, #73	; 0x49
 8004132:	d05e      	beq.n	80041f2 <BSP_TS_Get_GestureId+0xe6>
 8004134:	2b49      	cmp	r3, #73	; 0x49
 8004136:	d860      	bhi.n	80041fa <BSP_TS_Get_GestureId+0xee>
 8004138:	2b1c      	cmp	r3, #28
 800413a:	d83f      	bhi.n	80041bc <BSP_TS_Get_GestureId+0xb0>
 800413c:	2b1c      	cmp	r3, #28
 800413e:	d85c      	bhi.n	80041fa <BSP_TS_Get_GestureId+0xee>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <BSP_TS_Get_GestureId+0x3c>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	080041c3 	.word	0x080041c3
 800414c:	080041fb 	.word	0x080041fb
 8004150:	080041fb 	.word	0x080041fb
 8004154:	080041fb 	.word	0x080041fb
 8004158:	080041fb 	.word	0x080041fb
 800415c:	080041fb 	.word	0x080041fb
 8004160:	080041fb 	.word	0x080041fb
 8004164:	080041fb 	.word	0x080041fb
 8004168:	080041fb 	.word	0x080041fb
 800416c:	080041fb 	.word	0x080041fb
 8004170:	080041fb 	.word	0x080041fb
 8004174:	080041fb 	.word	0x080041fb
 8004178:	080041fb 	.word	0x080041fb
 800417c:	080041fb 	.word	0x080041fb
 8004180:	080041fb 	.word	0x080041fb
 8004184:	080041fb 	.word	0x080041fb
 8004188:	080041cb 	.word	0x080041cb
 800418c:	080041fb 	.word	0x080041fb
 8004190:	080041fb 	.word	0x080041fb
 8004194:	080041fb 	.word	0x080041fb
 8004198:	080041d3 	.word	0x080041d3
 800419c:	080041fb 	.word	0x080041fb
 80041a0:	080041fb 	.word	0x080041fb
 80041a4:	080041fb 	.word	0x080041fb
 80041a8:	080041db 	.word	0x080041db
 80041ac:	080041fb 	.word	0x080041fb
 80041b0:	080041fb 	.word	0x080041fb
 80041b4:	080041fb 	.word	0x080041fb
 80041b8:	080041e3 	.word	0x080041e3
 80041bc:	2b40      	cmp	r3, #64	; 0x40
 80041be:	d014      	beq.n	80041ea <BSP_TS_Get_GestureId+0xde>
 80041c0:	e01b      	b.n	80041fa <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80041c8:	e01a      	b.n	8004200 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80041d0:	e016      	b.n	8004200 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80041d8:	e012      	b.n	8004200 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2203      	movs	r2, #3
 80041de:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80041e0:	e00e      	b.n	8004200 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2204      	movs	r2, #4
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80041e8:	e00a      	b.n	8004200 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2205      	movs	r2, #5
 80041ee:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80041f0:	e006      	b.n	8004200 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2206      	movs	r2, #6
 80041f6:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80041f8:	e002      	b.n	8004200 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
      break;
 80041fe:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004200:	7bfb      	ldrb	r3, [r7, #15]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000579 	.word	0x20000579

08004210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004216:	4b11      	ldr	r3, [pc, #68]	; (800425c <HAL_MspInit+0x4c>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	4a10      	ldr	r2, [pc, #64]	; (800425c <HAL_MspInit+0x4c>)
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004220:	6413      	str	r3, [r2, #64]	; 0x40
 8004222:	4b0e      	ldr	r3, [pc, #56]	; (800425c <HAL_MspInit+0x4c>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	607b      	str	r3, [r7, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422e:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_MspInit+0x4c>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <HAL_MspInit+0x4c>)
 8004234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004238:	6453      	str	r3, [r2, #68]	; 0x44
 800423a:	4b08      	ldr	r3, [pc, #32]	; (800425c <HAL_MspInit+0x4c>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004246:	2200      	movs	r2, #0
 8004248:	210f      	movs	r1, #15
 800424a:	f06f 0001 	mvn.w	r0, #1
 800424e:	f001 faf5 	bl	800583c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40023800 	.word	0x40023800

08004260 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08c      	sub	sp, #48	; 0x30
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004268:	f107 031c 	add.w	r3, r7, #28
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	605a      	str	r2, [r3, #4]
 8004272:	609a      	str	r2, [r3, #8]
 8004274:	60da      	str	r2, [r3, #12]
 8004276:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a2a      	ldr	r2, [pc, #168]	; (8004328 <HAL_ADC_MspInit+0xc8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d124      	bne.n	80042cc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004282:	4b2a      	ldr	r3, [pc, #168]	; (800432c <HAL_ADC_MspInit+0xcc>)
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	4a29      	ldr	r2, [pc, #164]	; (800432c <HAL_ADC_MspInit+0xcc>)
 8004288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428c:	6453      	str	r3, [r2, #68]	; 0x44
 800428e:	4b27      	ldr	r3, [pc, #156]	; (800432c <HAL_ADC_MspInit+0xcc>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800429a:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_ADC_MspInit+0xcc>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	4a23      	ldr	r2, [pc, #140]	; (800432c <HAL_ADC_MspInit+0xcc>)
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	6313      	str	r3, [r2, #48]	; 0x30
 80042a6:	4b21      	ldr	r3, [pc, #132]	; (800432c <HAL_ADC_MspInit+0xcc>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80042b2:	2301      	movs	r3, #1
 80042b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042b6:	2303      	movs	r3, #3
 80042b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042be:	f107 031c 	add.w	r3, r7, #28
 80042c2:	4619      	mov	r1, r3
 80042c4:	481a      	ldr	r0, [pc, #104]	; (8004330 <HAL_ADC_MspInit+0xd0>)
 80042c6:	f002 f9af 	bl	8006628 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80042ca:	e029      	b.n	8004320 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a18      	ldr	r2, [pc, #96]	; (8004334 <HAL_ADC_MspInit+0xd4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d124      	bne.n	8004320 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80042d6:	4b15      	ldr	r3, [pc, #84]	; (800432c <HAL_ADC_MspInit+0xcc>)
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	4a14      	ldr	r2, [pc, #80]	; (800432c <HAL_ADC_MspInit+0xcc>)
 80042dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042e0:	6453      	str	r3, [r2, #68]	; 0x44
 80042e2:	4b12      	ldr	r3, [pc, #72]	; (800432c <HAL_ADC_MspInit+0xcc>)
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80042ee:	4b0f      	ldr	r3, [pc, #60]	; (800432c <HAL_ADC_MspInit+0xcc>)
 80042f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f2:	4a0e      	ldr	r2, [pc, #56]	; (800432c <HAL_ADC_MspInit+0xcc>)
 80042f4:	f043 0320 	orr.w	r3, r3, #32
 80042f8:	6313      	str	r3, [r2, #48]	; 0x30
 80042fa:	4b0c      	ldr	r3, [pc, #48]	; (800432c <HAL_ADC_MspInit+0xcc>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8004306:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800430a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800430c:	2303      	movs	r3, #3
 800430e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004310:	2300      	movs	r3, #0
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004314:	f107 031c 	add.w	r3, r7, #28
 8004318:	4619      	mov	r1, r3
 800431a:	4807      	ldr	r0, [pc, #28]	; (8004338 <HAL_ADC_MspInit+0xd8>)
 800431c:	f002 f984 	bl	8006628 <HAL_GPIO_Init>
}
 8004320:	bf00      	nop
 8004322:	3730      	adds	r7, #48	; 0x30
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40012000 	.word	0x40012000
 800432c:	40023800 	.word	0x40023800
 8004330:	40020000 	.word	0x40020000
 8004334:	40012200 	.word	0x40012200
 8004338:	40021400 	.word	0x40021400

0800433c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	; 0x28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004344:	f107 0314 	add.w	r3, r7, #20
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a19      	ldr	r2, [pc, #100]	; (80043c0 <HAL_DAC_MspInit+0x84>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d12b      	bne.n	80043b6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800435e:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_DAC_MspInit+0x88>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	4a18      	ldr	r2, [pc, #96]	; (80043c4 <HAL_DAC_MspInit+0x88>)
 8004364:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004368:	6413      	str	r3, [r2, #64]	; 0x40
 800436a:	4b16      	ldr	r3, [pc, #88]	; (80043c4 <HAL_DAC_MspInit+0x88>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004376:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <HAL_DAC_MspInit+0x88>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <HAL_DAC_MspInit+0x88>)
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	6313      	str	r3, [r2, #48]	; 0x30
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HAL_DAC_MspInit+0x88>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800438e:	2310      	movs	r3, #16
 8004390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004392:	2303      	movs	r3, #3
 8004394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800439a:	f107 0314 	add.w	r3, r7, #20
 800439e:	4619      	mov	r1, r3
 80043a0:	4809      	ldr	r0, [pc, #36]	; (80043c8 <HAL_DAC_MspInit+0x8c>)
 80043a2:	f002 f941 	bl	8006628 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80043a6:	2200      	movs	r2, #0
 80043a8:	210f      	movs	r1, #15
 80043aa:	2036      	movs	r0, #54	; 0x36
 80043ac:	f001 fa46 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80043b0:	2036      	movs	r0, #54	; 0x36
 80043b2:	f001 fa5f 	bl	8005874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80043b6:	bf00      	nop
 80043b8:	3728      	adds	r7, #40	; 0x28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40007400 	.word	0x40007400
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40020000 	.word	0x40020000

080043cc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a0d      	ldr	r2, [pc, #52]	; (8004410 <HAL_DMA2D_MspInit+0x44>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d113      	bne.n	8004406 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80043de:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <HAL_DMA2D_MspInit+0x48>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	4a0c      	ldr	r2, [pc, #48]	; (8004414 <HAL_DMA2D_MspInit+0x48>)
 80043e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043e8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <HAL_DMA2D_MspInit+0x48>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80043f6:	2200      	movs	r2, #0
 80043f8:	2105      	movs	r1, #5
 80043fa:	205a      	movs	r0, #90	; 0x5a
 80043fc:	f001 fa1e 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004400:	205a      	movs	r0, #90	; 0x5a
 8004402:	f001 fa37 	bl	8005874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	4002b000 	.word	0x4002b000
 8004414:	40023800 	.word	0x40023800

08004418 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b0ac      	sub	sp, #176	; 0xb0
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004420:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	605a      	str	r2, [r3, #4]
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	60da      	str	r2, [r3, #12]
 800442e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004430:	f107 0318 	add.w	r3, r7, #24
 8004434:	2284      	movs	r2, #132	; 0x84
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f009 fdcf 	bl	800dfdc <memset>
  if(hi2c->Instance==I2C1)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a44      	ldr	r2, [pc, #272]	; (8004554 <HAL_I2C_MspInit+0x13c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d13d      	bne.n	80044c4 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004448:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800444c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800444e:	2300      	movs	r3, #0
 8004450:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004452:	f107 0318 	add.w	r3, r7, #24
 8004456:	4618      	mov	r0, r3
 8004458:	f004 faa8 	bl	80089ac <HAL_RCCEx_PeriphCLKConfig>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004462:	f7fe faad 	bl	80029c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004466:	4b3c      	ldr	r3, [pc, #240]	; (8004558 <HAL_I2C_MspInit+0x140>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	4a3b      	ldr	r2, [pc, #236]	; (8004558 <HAL_I2C_MspInit+0x140>)
 800446c:	f043 0302 	orr.w	r3, r3, #2
 8004470:	6313      	str	r3, [r2, #48]	; 0x30
 8004472:	4b39      	ldr	r3, [pc, #228]	; (8004558 <HAL_I2C_MspInit+0x140>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800447e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004486:	2312      	movs	r3, #18
 8004488:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448c:	2300      	movs	r3, #0
 800448e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004492:	2303      	movs	r3, #3
 8004494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004498:	2304      	movs	r3, #4
 800449a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80044a2:	4619      	mov	r1, r3
 80044a4:	482d      	ldr	r0, [pc, #180]	; (800455c <HAL_I2C_MspInit+0x144>)
 80044a6:	f002 f8bf 	bl	8006628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044aa:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <HAL_I2C_MspInit+0x140>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <HAL_I2C_MspInit+0x140>)
 80044b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044b4:	6413      	str	r3, [r2, #64]	; 0x40
 80044b6:	4b28      	ldr	r3, [pc, #160]	; (8004558 <HAL_I2C_MspInit+0x140>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80044c2:	e042      	b.n	800454a <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a25      	ldr	r2, [pc, #148]	; (8004560 <HAL_I2C_MspInit+0x148>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d13d      	bne.n	800454a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80044ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80044da:	f107 0318 	add.w	r3, r7, #24
 80044de:	4618      	mov	r0, r3
 80044e0:	f004 fa64 	bl	80089ac <HAL_RCCEx_PeriphCLKConfig>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80044ea:	f7fe fa69 	bl	80029c0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80044ee:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <HAL_I2C_MspInit+0x140>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	4a19      	ldr	r2, [pc, #100]	; (8004558 <HAL_I2C_MspInit+0x140>)
 80044f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f8:	6313      	str	r3, [r2, #48]	; 0x30
 80044fa:	4b17      	ldr	r3, [pc, #92]	; (8004558 <HAL_I2C_MspInit+0x140>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004506:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800450a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800450e:	2312      	movs	r3, #18
 8004510:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004514:	2301      	movs	r3, #1
 8004516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800451a:	2303      	movs	r3, #3
 800451c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004520:	2304      	movs	r3, #4
 8004522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004526:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800452a:	4619      	mov	r1, r3
 800452c:	480d      	ldr	r0, [pc, #52]	; (8004564 <HAL_I2C_MspInit+0x14c>)
 800452e:	f002 f87b 	bl	8006628 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <HAL_I2C_MspInit+0x140>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	4a08      	ldr	r2, [pc, #32]	; (8004558 <HAL_I2C_MspInit+0x140>)
 8004538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800453c:	6413      	str	r3, [r2, #64]	; 0x40
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_I2C_MspInit+0x140>)
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004546:	60bb      	str	r3, [r7, #8]
 8004548:	68bb      	ldr	r3, [r7, #8]
}
 800454a:	bf00      	nop
 800454c:	37b0      	adds	r7, #176	; 0xb0
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40005400 	.word	0x40005400
 8004558:	40023800 	.word	0x40023800
 800455c:	40020400 	.word	0x40020400
 8004560:	40005c00 	.word	0x40005c00
 8004564:	40021c00 	.word	0x40021c00

08004568 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <HAL_I2C_MspDeInit+0x64>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d110      	bne.n	800459c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800457a:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <HAL_I2C_MspDeInit+0x68>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <HAL_I2C_MspDeInit+0x68>)
 8004580:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004584:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8004586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800458a:	4812      	ldr	r0, [pc, #72]	; (80045d4 <HAL_I2C_MspDeInit+0x6c>)
 800458c:	f002 f9f8 	bl	8006980 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8004590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004594:	480f      	ldr	r0, [pc, #60]	; (80045d4 <HAL_I2C_MspDeInit+0x6c>)
 8004596:	f002 f9f3 	bl	8006980 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800459a:	e013      	b.n	80045c4 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0d      	ldr	r2, [pc, #52]	; (80045d8 <HAL_I2C_MspDeInit+0x70>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d10e      	bne.n	80045c4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80045a6:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <HAL_I2C_MspDeInit+0x68>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	4a09      	ldr	r2, [pc, #36]	; (80045d0 <HAL_I2C_MspDeInit+0x68>)
 80045ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80045b0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80045b2:	2180      	movs	r1, #128	; 0x80
 80045b4:	4809      	ldr	r0, [pc, #36]	; (80045dc <HAL_I2C_MspDeInit+0x74>)
 80045b6:	f002 f9e3 	bl	8006980 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80045ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045be:	4807      	ldr	r0, [pc, #28]	; (80045dc <HAL_I2C_MspDeInit+0x74>)
 80045c0:	f002 f9de 	bl	8006980 <HAL_GPIO_DeInit>
}
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40005400 	.word	0x40005400
 80045d0:	40023800 	.word	0x40023800
 80045d4:	40020400 	.word	0x40020400
 80045d8:	40005c00 	.word	0x40005c00
 80045dc:	40021c00 	.word	0x40021c00

080045e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b0ae      	sub	sp, #184	; 0xb8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045f8:	f107 0320 	add.w	r3, r7, #32
 80045fc:	2284      	movs	r2, #132	; 0x84
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f009 fceb 	bl	800dfdc <memset>
  if(hltdc->Instance==LTDC)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a6f      	ldr	r2, [pc, #444]	; (80047c8 <HAL_LTDC_MspInit+0x1e8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	f040 80d6 	bne.w	80047be <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004612:	2308      	movs	r3, #8
 8004614:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8004616:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800461c:	2305      	movs	r3, #5
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004620:	2302      	movs	r3, #2
 8004622:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8004624:	2303      	movs	r3, #3
 8004626:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004628:	2301      	movs	r3, #1
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800462c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004630:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004632:	f107 0320 	add.w	r3, r7, #32
 8004636:	4618      	mov	r0, r3
 8004638:	f004 f9b8 	bl	80089ac <HAL_RCCEx_PeriphCLKConfig>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8004642:	f7fe f9bd 	bl	80029c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004646:	4b61      	ldr	r3, [pc, #388]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	4a60      	ldr	r2, [pc, #384]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 800464c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004650:	6453      	str	r3, [r2, #68]	; 0x44
 8004652:	4b5e      	ldr	r3, [pc, #376]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800465e:	4b5b      	ldr	r3, [pc, #364]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	4a5a      	ldr	r2, [pc, #360]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 8004664:	f043 0310 	orr.w	r3, r3, #16
 8004668:	6313      	str	r3, [r2, #48]	; 0x30
 800466a:	4b58      	ldr	r3, [pc, #352]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004676:	4b55      	ldr	r3, [pc, #340]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	4a54      	ldr	r2, [pc, #336]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 800467c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004680:	6313      	str	r3, [r2, #48]	; 0x30
 8004682:	4b52      	ldr	r3, [pc, #328]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800468e:	4b4f      	ldr	r3, [pc, #316]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	4a4e      	ldr	r2, [pc, #312]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 8004694:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004698:	6313      	str	r3, [r2, #48]	; 0x30
 800469a:	4b4c      	ldr	r3, [pc, #304]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80046a6:	4b49      	ldr	r3, [pc, #292]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	4a48      	ldr	r2, [pc, #288]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 80046ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b0:	6313      	str	r3, [r2, #48]	; 0x30
 80046b2:	4b46      	ldr	r3, [pc, #280]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80046be:	4b43      	ldr	r3, [pc, #268]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	4a42      	ldr	r2, [pc, #264]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 80046c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ca:	4b40      	ldr	r3, [pc, #256]	; (80047cc <HAL_LTDC_MspInit+0x1ec>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	60bb      	str	r3, [r7, #8]
 80046d4:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80046d6:	2310      	movs	r3, #16
 80046d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046dc:	2302      	movs	r3, #2
 80046de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e8:	2300      	movs	r3, #0
 80046ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80046ee:	230e      	movs	r3, #14
 80046f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80046f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80046f8:	4619      	mov	r1, r3
 80046fa:	4835      	ldr	r0, [pc, #212]	; (80047d0 <HAL_LTDC_MspInit+0x1f0>)
 80046fc:	f001 ff94 	bl	8006628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004700:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004708:	2302      	movs	r3, #2
 800470a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470e:	2300      	movs	r3, #0
 8004710:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004714:	2300      	movs	r3, #0
 8004716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800471a:	230e      	movs	r3, #14
 800471c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004720:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004724:	4619      	mov	r1, r3
 8004726:	482b      	ldr	r0, [pc, #172]	; (80047d4 <HAL_LTDC_MspInit+0x1f4>)
 8004728:	f001 ff7e 	bl	8006628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800472c:	23f7      	movs	r3, #247	; 0xf7
 800472e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004732:	2302      	movs	r3, #2
 8004734:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004738:	2300      	movs	r3, #0
 800473a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800473e:	2300      	movs	r3, #0
 8004740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004744:	230e      	movs	r3, #14
 8004746:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800474a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800474e:	4619      	mov	r1, r3
 8004750:	4821      	ldr	r0, [pc, #132]	; (80047d8 <HAL_LTDC_MspInit+0x1f8>)
 8004752:	f001 ff69 	bl	8006628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800475a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475e:	2302      	movs	r3, #2
 8004760:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004764:	2300      	movs	r3, #0
 8004766:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476a:	2300      	movs	r3, #0
 800476c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004770:	2309      	movs	r3, #9
 8004772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004776:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800477a:	4619      	mov	r1, r3
 800477c:	4817      	ldr	r0, [pc, #92]	; (80047dc <HAL_LTDC_MspInit+0x1fc>)
 800477e:	f001 ff53 	bl	8006628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004782:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8004786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478a:	2302      	movs	r3, #2
 800478c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004790:	2300      	movs	r3, #0
 8004792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004796:	2300      	movs	r3, #0
 8004798:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800479c:	230e      	movs	r3, #14
 800479e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80047a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80047a6:	4619      	mov	r1, r3
 80047a8:	480d      	ldr	r0, [pc, #52]	; (80047e0 <HAL_LTDC_MspInit+0x200>)
 80047aa:	f001 ff3d 	bl	8006628 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80047ae:	2200      	movs	r2, #0
 80047b0:	2105      	movs	r1, #5
 80047b2:	2058      	movs	r0, #88	; 0x58
 80047b4:	f001 f842 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80047b8:	2058      	movs	r0, #88	; 0x58
 80047ba:	f001 f85b 	bl	8005874 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80047be:	bf00      	nop
 80047c0:	37b8      	adds	r7, #184	; 0xb8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40016800 	.word	0x40016800
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40022400 	.word	0x40022400
 80047d8:	40022800 	.word	0x40022800
 80047dc:	40021800 	.word	0x40021800
 80047e0:	40022000 	.word	0x40022000

080047e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b0a4      	sub	sp, #144	; 0x90
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047ec:	f107 030c 	add.w	r3, r7, #12
 80047f0:	2284      	movs	r2, #132	; 0x84
 80047f2:	2100      	movs	r1, #0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f009 fbf1 	bl	800dfdc <memset>
  if(hrtc->Instance==RTC)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a0e      	ldr	r2, [pc, #56]	; (8004838 <HAL_RTC_MspInit+0x54>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d114      	bne.n	800482e <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004804:	2320      	movs	r3, #32
 8004806:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800480c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800480e:	f107 030c 	add.w	r3, r7, #12
 8004812:	4618      	mov	r0, r3
 8004814:	f004 f8ca 	bl	80089ac <HAL_RCCEx_PeriphCLKConfig>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800481e:	f7fe f8cf 	bl	80029c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <HAL_RTC_MspInit+0x58>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	4a05      	ldr	r2, [pc, #20]	; (800483c <HAL_RTC_MspInit+0x58>)
 8004828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800482e:	bf00      	nop
 8004830:	3790      	adds	r7, #144	; 0x90
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40002800 	.word	0x40002800
 800483c:	40023800 	.word	0x40023800

08004840 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004848:	f107 0314 	add.w	r3, r7, #20
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	605a      	str	r2, [r3, #4]
 8004852:	609a      	str	r2, [r3, #8]
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a25      	ldr	r2, [pc, #148]	; (80048f4 <HAL_SPI_MspInit+0xb4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d144      	bne.n	80048ec <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004862:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <HAL_SPI_MspInit+0xb8>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	4a24      	ldr	r2, [pc, #144]	; (80048f8 <HAL_SPI_MspInit+0xb8>)
 8004868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800486c:	6413      	str	r3, [r2, #64]	; 0x40
 800486e:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <HAL_SPI_MspInit+0xb8>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004876:	613b      	str	r3, [r7, #16]
 8004878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800487a:	4b1f      	ldr	r3, [pc, #124]	; (80048f8 <HAL_SPI_MspInit+0xb8>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <HAL_SPI_MspInit+0xb8>)
 8004880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004884:	6313      	str	r3, [r2, #48]	; 0x30
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <HAL_SPI_MspInit+0xb8>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004892:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <HAL_SPI_MspInit+0xb8>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <HAL_SPI_MspInit+0xb8>)
 8004898:	f043 0302 	orr.w	r3, r3, #2
 800489c:	6313      	str	r3, [r2, #48]	; 0x30
 800489e:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <HAL_SPI_MspInit+0xb8>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80048aa:	2303      	movs	r3, #3
 80048ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ae:	2302      	movs	r3, #2
 80048b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b6:	2303      	movs	r3, #3
 80048b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048ba:	2305      	movs	r3, #5
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80048be:	f107 0314 	add.w	r3, r7, #20
 80048c2:	4619      	mov	r1, r3
 80048c4:	480d      	ldr	r0, [pc, #52]	; (80048fc <HAL_SPI_MspInit+0xbc>)
 80048c6:	f001 feaf 	bl	8006628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80048ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80048ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d0:	2302      	movs	r3, #2
 80048d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d8:	2300      	movs	r3, #0
 80048da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80048dc:	2305      	movs	r3, #5
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048e0:	f107 0314 	add.w	r3, r7, #20
 80048e4:	4619      	mov	r1, r3
 80048e6:	4806      	ldr	r0, [pc, #24]	; (8004900 <HAL_SPI_MspInit+0xc0>)
 80048e8:	f001 fe9e 	bl	8006628 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80048ec:	bf00      	nop
 80048ee:	3728      	adds	r7, #40	; 0x28
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40003800 	.word	0x40003800
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40022000 	.word	0x40022000
 8004900:	40020400 	.word	0x40020400

08004904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08e      	sub	sp, #56	; 0x38
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800490c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	605a      	str	r2, [r3, #4]
 8004916:	609a      	str	r2, [r3, #8]
 8004918:	60da      	str	r2, [r3, #12]
 800491a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a3b      	ldr	r2, [pc, #236]	; (8004a10 <HAL_TIM_Base_MspInit+0x10c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d10c      	bne.n	8004940 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004926:	4b3b      	ldr	r3, [pc, #236]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 8004928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492a:	4a3a      	ldr	r2, [pc, #232]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6453      	str	r3, [r2, #68]	; 0x44
 8004932:	4b38      	ldr	r3, [pc, #224]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 8004934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	623b      	str	r3, [r7, #32]
 800493c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800493e:	e062      	b.n	8004a06 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004948:	d10c      	bne.n	8004964 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800494a:	4b32      	ldr	r3, [pc, #200]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	4a31      	ldr	r2, [pc, #196]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6413      	str	r3, [r2, #64]	; 0x40
 8004956:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	69fb      	ldr	r3, [r7, #28]
}
 8004962:	e050      	b.n	8004a06 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a2b      	ldr	r2, [pc, #172]	; (8004a18 <HAL_TIM_Base_MspInit+0x114>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d10c      	bne.n	8004988 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800496e:	4b29      	ldr	r3, [pc, #164]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	4a28      	ldr	r2, [pc, #160]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	6413      	str	r3, [r2, #64]	; 0x40
 800497a:	4b26      	ldr	r3, [pc, #152]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	69bb      	ldr	r3, [r7, #24]
}
 8004986:	e03e      	b.n	8004a06 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a23      	ldr	r2, [pc, #140]	; (8004a1c <HAL_TIM_Base_MspInit+0x118>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d10c      	bne.n	80049ac <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004992:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 8004998:	f043 0308 	orr.w	r3, r3, #8
 800499c:	6413      	str	r3, [r2, #64]	; 0x40
 800499e:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	697b      	ldr	r3, [r7, #20]
}
 80049aa:	e02c      	b.n	8004a06 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <HAL_TIM_Base_MspInit+0x11c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d127      	bne.n	8004a06 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80049b6:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 80049b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ba:	4a16      	ldr	r2, [pc, #88]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 80049bc:	f043 0302 	orr.w	r3, r3, #2
 80049c0:	6453      	str	r3, [r2, #68]	; 0x44
 80049c2:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80049ce:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d8:	6313      	str	r3, [r2, #48]	; 0x30
 80049da:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <HAL_TIM_Base_MspInit+0x110>)
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80049e6:	2304      	movs	r3, #4
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ea:	2302      	movs	r3, #2
 80049ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049f2:	2300      	movs	r3, #0
 80049f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80049f6:	2303      	movs	r3, #3
 80049f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80049fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049fe:	4619      	mov	r1, r3
 8004a00:	4808      	ldr	r0, [pc, #32]	; (8004a24 <HAL_TIM_Base_MspInit+0x120>)
 8004a02:	f001 fe11 	bl	8006628 <HAL_GPIO_Init>
}
 8004a06:	bf00      	nop
 8004a08:	3738      	adds	r7, #56	; 0x38
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40010000 	.word	0x40010000
 8004a14:	40023800 	.word	0x40023800
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000c00 	.word	0x40000c00
 8004a20:	40010400 	.word	0x40010400
 8004a24:	40022000 	.word	0x40022000

08004a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b0b0      	sub	sp, #192	; 0xc0
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004a34:	2200      	movs	r2, #0
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	605a      	str	r2, [r3, #4]
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	60da      	str	r2, [r3, #12]
 8004a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a44:	2284      	movs	r2, #132	; 0x84
 8004a46:	2100      	movs	r1, #0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f009 fac7 	bl	800dfdc <memset>
  if(huart->Instance==UART7)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a79      	ldr	r2, [pc, #484]	; (8004c38 <HAL_UART_MspInit+0x210>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d13d      	bne.n	8004ad4 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f003 ff9f 	bl	80089ac <HAL_RCCEx_PeriphCLKConfig>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004a74:	f7fd ffa4 	bl	80029c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004a78:	4b70      	ldr	r3, [pc, #448]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	4a6f      	ldr	r2, [pc, #444]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004a7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a82:	6413      	str	r3, [r2, #64]	; 0x40
 8004a84:	4b6d      	ldr	r3, [pc, #436]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a90:	4b6a      	ldr	r3, [pc, #424]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	4a69      	ldr	r2, [pc, #420]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004a96:	f043 0320 	orr.w	r3, r3, #32
 8004a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8004a9c:	4b67      	ldr	r3, [pc, #412]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	623b      	str	r3, [r7, #32]
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004aa8:	23c0      	movs	r3, #192	; 0xc0
 8004aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aba:	2303      	movs	r3, #3
 8004abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ac6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004aca:	4619      	mov	r1, r3
 8004acc:	485c      	ldr	r0, [pc, #368]	; (8004c40 <HAL_UART_MspInit+0x218>)
 8004ace:	f001 fdab 	bl	8006628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004ad2:	e0ac      	b.n	8004c2e <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a5a      	ldr	r2, [pc, #360]	; (8004c44 <HAL_UART_MspInit+0x21c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d165      	bne.n	8004baa <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004ade:	2340      	movs	r3, #64	; 0x40
 8004ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aea:	4618      	mov	r0, r3
 8004aec:	f003 ff5e 	bl	80089ac <HAL_RCCEx_PeriphCLKConfig>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8004af6:	f7fd ff63 	bl	80029c0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004afa:	4b50      	ldr	r3, [pc, #320]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afe:	4a4f      	ldr	r2, [pc, #316]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004b00:	f043 0310 	orr.w	r3, r3, #16
 8004b04:	6453      	str	r3, [r2, #68]	; 0x44
 8004b06:	4b4d      	ldr	r3, [pc, #308]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b12:	4b4a      	ldr	r3, [pc, #296]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	4a49      	ldr	r2, [pc, #292]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004b18:	f043 0302 	orr.w	r3, r3, #2
 8004b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b1e:	4b47      	ldr	r3, [pc, #284]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	61bb      	str	r3, [r7, #24]
 8004b28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b2a:	4b44      	ldr	r3, [pc, #272]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	4a43      	ldr	r2, [pc, #268]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6313      	str	r3, [r2, #48]	; 0x30
 8004b36:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004b42:	2380      	movs	r3, #128	; 0x80
 8004b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b48:	2302      	movs	r3, #2
 8004b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b54:	2300      	movs	r3, #0
 8004b56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b5a:	2307      	movs	r3, #7
 8004b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004b60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b64:	4619      	mov	r1, r3
 8004b66:	4838      	ldr	r0, [pc, #224]	; (8004c48 <HAL_UART_MspInit+0x220>)
 8004b68:	f001 fd5e 	bl	8006628 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b74:	2302      	movs	r3, #2
 8004b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b80:	2300      	movs	r3, #0
 8004b82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b86:	2307      	movs	r3, #7
 8004b88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004b8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004b90:	4619      	mov	r1, r3
 8004b92:	482e      	ldr	r0, [pc, #184]	; (8004c4c <HAL_UART_MspInit+0x224>)
 8004b94:	f001 fd48 	bl	8006628 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2105      	movs	r1, #5
 8004b9c:	2025      	movs	r0, #37	; 0x25
 8004b9e:	f000 fe4d 	bl	800583c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ba2:	2025      	movs	r0, #37	; 0x25
 8004ba4:	f000 fe66 	bl	8005874 <HAL_NVIC_EnableIRQ>
}
 8004ba8:	e041      	b.n	8004c2e <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a28      	ldr	r2, [pc, #160]	; (8004c50 <HAL_UART_MspInit+0x228>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d13c      	bne.n	8004c2e <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004bb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f003 fef1 	bl	80089ac <HAL_RCCEx_PeriphCLKConfig>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8004bd0:	f7fd fef6 	bl	80029c0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd8:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004bda:	f043 0320 	orr.w	r3, r3, #32
 8004bde:	6453      	str	r3, [r2, #68]	; 0x44
 8004be0:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	613b      	str	r3, [r7, #16]
 8004bea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bec:	4b13      	ldr	r3, [pc, #76]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	4a12      	ldr	r2, [pc, #72]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004bf2:	f043 0304 	orr.w	r3, r3, #4
 8004bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf8:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <HAL_UART_MspInit+0x214>)
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004c04:	23c0      	movs	r3, #192	; 0xc0
 8004c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c16:	2303      	movs	r3, #3
 8004c18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004c26:	4619      	mov	r1, r3
 8004c28:	480a      	ldr	r0, [pc, #40]	; (8004c54 <HAL_UART_MspInit+0x22c>)
 8004c2a:	f001 fcfd 	bl	8006628 <HAL_GPIO_Init>
}
 8004c2e:	bf00      	nop
 8004c30:	37c0      	adds	r7, #192	; 0xc0
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40007800 	.word	0x40007800
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	40021400 	.word	0x40021400
 8004c44:	40011000 	.word	0x40011000
 8004c48:	40020400 	.word	0x40020400
 8004c4c:	40020000 	.word	0x40020000
 8004c50:	40011400 	.word	0x40011400
 8004c54:	40020800 	.word	0x40020800

08004c58 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004c5e:	1d3b      	adds	r3, r7, #4
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	60da      	str	r2, [r3, #12]
 8004c6a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004c6c:	4b3a      	ldr	r3, [pc, #232]	; (8004d58 <HAL_FMC_MspInit+0x100>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d16d      	bne.n	8004d50 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004c74:	4b38      	ldr	r3, [pc, #224]	; (8004d58 <HAL_FMC_MspInit+0x100>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004c7a:	4b38      	ldr	r3, [pc, #224]	; (8004d5c <HAL_FMC_MspInit+0x104>)
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	4a37      	ldr	r2, [pc, #220]	; (8004d5c <HAL_FMC_MspInit+0x104>)
 8004c80:	f043 0301 	orr.w	r3, r3, #1
 8004c84:	6393      	str	r3, [r2, #56]	; 0x38
 8004c86:	4b35      	ldr	r3, [pc, #212]	; (8004d5c <HAL_FMC_MspInit+0x104>)
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8004c92:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004c96:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004ca4:	230c      	movs	r3, #12
 8004ca6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ca8:	1d3b      	adds	r3, r7, #4
 8004caa:	4619      	mov	r1, r3
 8004cac:	482c      	ldr	r0, [pc, #176]	; (8004d60 <HAL_FMC_MspInit+0x108>)
 8004cae:	f001 fcbb 	bl	8006628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8004cb2:	f248 1333 	movw	r3, #33075	; 0x8133
 8004cb6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004cc4:	230c      	movs	r3, #12
 8004cc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004cc8:	1d3b      	adds	r3, r7, #4
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4825      	ldr	r0, [pc, #148]	; (8004d64 <HAL_FMC_MspInit+0x10c>)
 8004cce:	f001 fcab 	bl	8006628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004cd2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004cd6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd8:	2302      	movs	r3, #2
 8004cda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004ce4:	230c      	movs	r3, #12
 8004ce6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ce8:	1d3b      	adds	r3, r7, #4
 8004cea:	4619      	mov	r1, r3
 8004cec:	481e      	ldr	r0, [pc, #120]	; (8004d68 <HAL_FMC_MspInit+0x110>)
 8004cee:	f001 fc9b 	bl	8006628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004cf2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004cf6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d00:	2303      	movs	r3, #3
 8004d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004d04:	230c      	movs	r3, #12
 8004d06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004d08:	1d3b      	adds	r3, r7, #4
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4817      	ldr	r0, [pc, #92]	; (8004d6c <HAL_FMC_MspInit+0x114>)
 8004d0e:	f001 fc8b 	bl	8006628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004d12:	2328      	movs	r3, #40	; 0x28
 8004d14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d16:	2302      	movs	r3, #2
 8004d18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004d22:	230c      	movs	r3, #12
 8004d24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004d26:	1d3b      	adds	r3, r7, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4811      	ldr	r0, [pc, #68]	; (8004d70 <HAL_FMC_MspInit+0x118>)
 8004d2c:	f001 fc7c 	bl	8006628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004d30:	2308      	movs	r3, #8
 8004d32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d34:	2302      	movs	r3, #2
 8004d36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004d40:	230c      	movs	r3, #12
 8004d42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004d44:	1d3b      	adds	r3, r7, #4
 8004d46:	4619      	mov	r1, r3
 8004d48:	480a      	ldr	r0, [pc, #40]	; (8004d74 <HAL_FMC_MspInit+0x11c>)
 8004d4a:	f001 fc6d 	bl	8006628 <HAL_GPIO_Init>
 8004d4e:	e000      	b.n	8004d52 <HAL_FMC_MspInit+0xfa>
    return;
 8004d50:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	200005a4 	.word	0x200005a4
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40021800 	.word	0x40021800
 8004d68:	40020c00 	.word	0x40020c00
 8004d6c:	40021400 	.word	0x40021400
 8004d70:	40021c00 	.word	0x40021c00
 8004d74:	40020800 	.word	0x40020800

08004d78 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004d80:	f7ff ff6a 	bl	8004c58 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08c      	sub	sp, #48	; 0x30
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	2036      	movs	r0, #54	; 0x36
 8004da2:	f000 fd4b 	bl	800583c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004da6:	2036      	movs	r0, #54	; 0x36
 8004da8:	f000 fd64 	bl	8005874 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004dac:	4b1f      	ldr	r3, [pc, #124]	; (8004e2c <HAL_InitTick+0xa0>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <HAL_InitTick+0xa0>)
 8004db2:	f043 0310 	orr.w	r3, r3, #16
 8004db6:	6413      	str	r3, [r2, #64]	; 0x40
 8004db8:	4b1c      	ldr	r3, [pc, #112]	; (8004e2c <HAL_InitTick+0xa0>)
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004dc4:	f107 0210 	add.w	r2, r7, #16
 8004dc8:	f107 0314 	add.w	r3, r7, #20
 8004dcc:	4611      	mov	r1, r2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f003 fdba 	bl	8008948 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004dd4:	f003 fd90 	bl	80088f8 <HAL_RCC_GetPCLK1Freq>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <HAL_InitTick+0xa4>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	0c9b      	lsrs	r3, r3, #18
 8004de8:	3b01      	subs	r3, #1
 8004dea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <HAL_InitTick+0xa8>)
 8004dee:	4a12      	ldr	r2, [pc, #72]	; (8004e38 <HAL_InitTick+0xac>)
 8004df0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <HAL_InitTick+0xa8>)
 8004df4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004df8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004dfa:	4a0e      	ldr	r2, [pc, #56]	; (8004e34 <HAL_InitTick+0xa8>)
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <HAL_InitTick+0xa8>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e06:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <HAL_InitTick+0xa8>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004e0c:	4809      	ldr	r0, [pc, #36]	; (8004e34 <HAL_InitTick+0xa8>)
 8004e0e:	f004 fed1 	bl	8009bb4 <HAL_TIM_Base_Init>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004e18:	4806      	ldr	r0, [pc, #24]	; (8004e34 <HAL_InitTick+0xa8>)
 8004e1a:	f004 ff23 	bl	8009c64 <HAL_TIM_Base_Start_IT>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	e000      	b.n	8004e24 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3730      	adds	r7, #48	; 0x30
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	431bde83 	.word	0x431bde83
 8004e34:	200087d0 	.word	0x200087d0
 8004e38:	40001000 	.word	0x40001000

08004e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e40:	e7fe      	b.n	8004e40 <NMI_Handler+0x4>

08004e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e42:	b480      	push	{r7}
 8004e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e46:	e7fe      	b.n	8004e46 <HardFault_Handler+0x4>

08004e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e4c:	e7fe      	b.n	8004e4c <MemManage_Handler+0x4>

08004e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e52:	e7fe      	b.n	8004e52 <BusFault_Handler+0x4>

08004e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e58:	e7fe      	b.n	8004e58 <UsageFault_Handler+0x4>

08004e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e6c:	4802      	ldr	r0, [pc, #8]	; (8004e78 <USART1_IRQHandler+0x10>)
 8004e6e:	f005 fbb7 	bl	800a5e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e72:	bf00      	nop
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200084a8 	.word	0x200084a8

08004e7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWDIO_Pin);
 8004e80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004e84:	f001 febc 	bl	8006c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e88:	bf00      	nop
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <TIM6_DAC_IRQHandler+0x20>)
 8004e92:	791b      	ldrb	r3, [r3, #4]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8004e9a:	4804      	ldr	r0, [pc, #16]	; (8004eac <TIM6_DAC_IRQHandler+0x20>)
 8004e9c:	f000 fd1a 	bl	80058d4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004ea0:	4803      	ldr	r0, [pc, #12]	; (8004eb0 <TIM6_DAC_IRQHandler+0x24>)
 8004ea2:	f004 ff57 	bl	8009d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004ea6:	bf00      	nop
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	20008530 	.word	0x20008530
 8004eb0:	200087d0 	.word	0x200087d0

08004eb4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004eb8:	4802      	ldr	r0, [pc, #8]	; (8004ec4 <LTDC_IRQHandler+0x10>)
 8004eba:	f002 fdc3 	bl	8007a44 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20008368 	.word	0x20008368

08004ec8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004ecc:	4802      	ldr	r0, [pc, #8]	; (8004ed8 <DMA2D_IRQHandler+0x10>)
 8004ece:	f001 f96d 	bl	80061ac <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004ed2:	bf00      	nop
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20008634 	.word	0x20008634

08004edc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ee0:	4b06      	ldr	r3, [pc, #24]	; (8004efc <SystemInit+0x20>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee6:	4a05      	ldr	r2, [pc, #20]	; (8004efc <SystemInit+0x20>)
 8004ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ef0:	bf00      	nop
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	e000ed00 	.word	0xe000ed00

08004f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f04:	480d      	ldr	r0, [pc, #52]	; (8004f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f06:	490e      	ldr	r1, [pc, #56]	; (8004f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f08:	4a0e      	ldr	r2, [pc, #56]	; (8004f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f0c:	e002      	b.n	8004f14 <LoopCopyDataInit>

08004f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f12:	3304      	adds	r3, #4

08004f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f18:	d3f9      	bcc.n	8004f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f1a:	4a0b      	ldr	r2, [pc, #44]	; (8004f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f1c:	4c0b      	ldr	r4, [pc, #44]	; (8004f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f20:	e001      	b.n	8004f26 <LoopFillZerobss>

08004f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f24:	3204      	adds	r2, #4

08004f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f28:	d3fb      	bcc.n	8004f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004f2a:	f7ff ffd7 	bl	8004edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f2e:	f009 f821 	bl	800df74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f32:	f7fc f869 	bl	8001008 <main>
  bx  lr    
 8004f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004f38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f40:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8004f44:	08034450 	.word	0x08034450
  ldr r2, =_sbss
 8004f48:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8004f4c:	2000882c 	.word	0x2000882c

08004f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f50:	e7fe      	b.n	8004f50 <ADC_IRQHandler>
	...

08004f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f58:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <HAL_Init+0x28>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a07      	ldr	r2, [pc, #28]	; (8004f7c <HAL_Init+0x28>)
 8004f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f64:	2003      	movs	r0, #3
 8004f66:	f000 fc5e 	bl	8005826 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f6a:	200f      	movs	r0, #15
 8004f6c:	f7ff ff0e 	bl	8004d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f70:	f7ff f94e 	bl	8004210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40023c00 	.word	0x40023c00

08004f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_IncTick+0x20>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_IncTick+0x24>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4413      	add	r3, r2
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <HAL_IncTick+0x24>)
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	20000048 	.word	0x20000048
 8004fa4:	2000881c 	.word	0x2000881c

08004fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return uwTick;
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <HAL_GetTick+0x14>)
 8004fae:	681b      	ldr	r3, [r3, #0]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	2000881c 	.word	0x2000881c

08004fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fc8:	f7ff ffee 	bl	8004fa8 <HAL_GetTick>
 8004fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd8:	d005      	beq.n	8004fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fda:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <HAL_Delay+0x44>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004fe6:	bf00      	nop
 8004fe8:	f7ff ffde 	bl	8004fa8 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d8f7      	bhi.n	8004fe8 <HAL_Delay+0x28>
  {
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000048 	.word	0x20000048

08005008 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e031      	b.n	8005082 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff f91a 	bl	8004260 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	2b00      	cmp	r3, #0
 8005044:	d116      	bne.n	8005074 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800504a:	4b10      	ldr	r3, [pc, #64]	; (800508c <HAL_ADC_Init+0x84>)
 800504c:	4013      	ands	r3, r2
 800504e:	f043 0202 	orr.w	r2, r3, #2
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa3e 	bl	80054d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005066:	f023 0303 	bic.w	r3, r3, #3
 800506a:	f043 0201 	orr.w	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
 8005072:	e001      	b.n	8005078 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005080:	7bfb      	ldrb	r3, [r7, #15]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	ffffeefd 	.word	0xffffeefd

08005090 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_ADC_Start+0x1a>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e0ad      	b.n	8005206 <HAL_ADC_Start+0x176>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d018      	beq.n	80050f2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80050d0:	4b50      	ldr	r3, [pc, #320]	; (8005214 <HAL_ADC_Start+0x184>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a50      	ldr	r2, [pc, #320]	; (8005218 <HAL_ADC_Start+0x188>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	0c9a      	lsrs	r2, r3, #18
 80050dc:	4613      	mov	r3, r2
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	4413      	add	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80050e4:	e002      	b.n	80050ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f9      	bne.n	80050e6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d175      	bne.n	80051ec <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005104:	4b45      	ldr	r3, [pc, #276]	; (800521c <HAL_ADC_Start+0x18c>)
 8005106:	4013      	ands	r3, r2
 8005108:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511a:	2b00      	cmp	r3, #0
 800511c:	d007      	beq.n	800512e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005126:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513a:	d106      	bne.n	800514a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005140:	f023 0206 	bic.w	r2, r3, #6
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	645a      	str	r2, [r3, #68]	; 0x44
 8005148:	e002      	b.n	8005150 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005160:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005162:	4b2f      	ldr	r3, [pc, #188]	; (8005220 <HAL_ADC_Start+0x190>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10f      	bne.n	800518e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d143      	bne.n	8005204 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800518a:	609a      	str	r2, [r3, #8]
 800518c:	e03a      	b.n	8005204 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a24      	ldr	r2, [pc, #144]	; (8005224 <HAL_ADC_Start+0x194>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d10e      	bne.n	80051b6 <HAL_ADC_Start+0x126>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d107      	bne.n	80051b6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80051b4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80051b6:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <HAL_ADC_Start+0x190>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d120      	bne.n	8005204 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a18      	ldr	r2, [pc, #96]	; (8005228 <HAL_ADC_Start+0x198>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d11b      	bne.n	8005204 <HAL_ADC_Start+0x174>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d114      	bne.n	8005204 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80051e8:	609a      	str	r2, [r3, #8]
 80051ea:	e00b      	b.n	8005204 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	f043 0210 	orr.w	r2, r3, #16
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fc:	f043 0201 	orr.w	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20000040 	.word	0x20000040
 8005218:	431bde83 	.word	0x431bde83
 800521c:	fffff8fe 	.word	0xfffff8fe
 8005220:	40012300 	.word	0x40012300
 8005224:	40012000 	.word	0x40012000
 8005228:	40012200 	.word	0x40012200

0800522c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005240:	2b01      	cmp	r3, #1
 8005242:	d101      	bne.n	8005248 <HAL_ADC_ConfigChannel+0x1c>
 8005244:	2302      	movs	r3, #2
 8005246:	e136      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x28a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b09      	cmp	r3, #9
 8005256:	d93a      	bls.n	80052ce <HAL_ADC_ConfigChannel+0xa2>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005260:	d035      	beq.n	80052ce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68d9      	ldr	r1, [r3, #12]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	b29b      	uxth	r3, r3
 800526e:	461a      	mov	r2, r3
 8005270:	4613      	mov	r3, r2
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	4413      	add	r3, r2
 8005276:	3b1e      	subs	r3, #30
 8005278:	2207      	movs	r2, #7
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43da      	mvns	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	400a      	ands	r2, r1
 8005286:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a8d      	ldr	r2, [pc, #564]	; (80054c4 <HAL_ADC_ConfigChannel+0x298>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10a      	bne.n	80052a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68d9      	ldr	r1, [r3, #12]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	061a      	lsls	r2, r3, #24
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052a6:	e035      	b.n	8005314 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68d9      	ldr	r1, [r3, #12]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	4618      	mov	r0, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	4403      	add	r3, r0
 80052c0:	3b1e      	subs	r3, #30
 80052c2:	409a      	lsls	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052cc:	e022      	b.n	8005314 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6919      	ldr	r1, [r3, #16]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	b29b      	uxth	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	4613      	mov	r3, r2
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	4413      	add	r3, r2
 80052e2:	2207      	movs	r2, #7
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	43da      	mvns	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	400a      	ands	r2, r1
 80052f0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6919      	ldr	r1, [r3, #16]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	4618      	mov	r0, r3
 8005304:	4603      	mov	r3, r0
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	4403      	add	r3, r0
 800530a:	409a      	lsls	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b06      	cmp	r3, #6
 800531a:	d824      	bhi.n	8005366 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	3b05      	subs	r3, #5
 800532e:	221f      	movs	r2, #31
 8005330:	fa02 f303 	lsl.w	r3, r2, r3
 8005334:	43da      	mvns	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	400a      	ands	r2, r1
 800533c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	4618      	mov	r0, r3
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	3b05      	subs	r3, #5
 8005358:	fa00 f203 	lsl.w	r2, r0, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	635a      	str	r2, [r3, #52]	; 0x34
 8005364:	e04c      	b.n	8005400 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b0c      	cmp	r3, #12
 800536c:	d824      	bhi.n	80053b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	3b23      	subs	r3, #35	; 0x23
 8005380:	221f      	movs	r2, #31
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	43da      	mvns	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	400a      	ands	r2, r1
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	b29b      	uxth	r3, r3
 800539c:	4618      	mov	r0, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	3b23      	subs	r3, #35	; 0x23
 80053aa:	fa00 f203 	lsl.w	r2, r0, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
 80053b6:	e023      	b.n	8005400 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	3b41      	subs	r3, #65	; 0x41
 80053ca:	221f      	movs	r2, #31
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43da      	mvns	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	400a      	ands	r2, r1
 80053d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	4618      	mov	r0, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	3b41      	subs	r3, #65	; 0x41
 80053f4:	fa00 f203 	lsl.w	r2, r0, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a30      	ldr	r2, [pc, #192]	; (80054c8 <HAL_ADC_ConfigChannel+0x29c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d10a      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x1f4>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005412:	d105      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005414:	4b2d      	ldr	r3, [pc, #180]	; (80054cc <HAL_ADC_ConfigChannel+0x2a0>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	4a2c      	ldr	r2, [pc, #176]	; (80054cc <HAL_ADC_ConfigChannel+0x2a0>)
 800541a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800541e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a28      	ldr	r2, [pc, #160]	; (80054c8 <HAL_ADC_ConfigChannel+0x29c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d10f      	bne.n	800544a <HAL_ADC_ConfigChannel+0x21e>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b12      	cmp	r3, #18
 8005430:	d10b      	bne.n	800544a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005432:	4b26      	ldr	r3, [pc, #152]	; (80054cc <HAL_ADC_ConfigChannel+0x2a0>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4a25      	ldr	r2, [pc, #148]	; (80054cc <HAL_ADC_ConfigChannel+0x2a0>)
 8005438:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800543c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800543e:	4b23      	ldr	r3, [pc, #140]	; (80054cc <HAL_ADC_ConfigChannel+0x2a0>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4a22      	ldr	r2, [pc, #136]	; (80054cc <HAL_ADC_ConfigChannel+0x2a0>)
 8005444:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005448:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1e      	ldr	r2, [pc, #120]	; (80054c8 <HAL_ADC_ConfigChannel+0x29c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d12b      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x280>
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <HAL_ADC_ConfigChannel+0x298>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <HAL_ADC_ConfigChannel+0x23a>
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b11      	cmp	r3, #17
 8005464:	d122      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005466:	4b19      	ldr	r3, [pc, #100]	; (80054cc <HAL_ADC_ConfigChannel+0x2a0>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4a18      	ldr	r2, [pc, #96]	; (80054cc <HAL_ADC_ConfigChannel+0x2a0>)
 800546c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005470:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005472:	4b16      	ldr	r3, [pc, #88]	; (80054cc <HAL_ADC_ConfigChannel+0x2a0>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <HAL_ADC_ConfigChannel+0x2a0>)
 8005478:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800547c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a10      	ldr	r2, [pc, #64]	; (80054c4 <HAL_ADC_ConfigChannel+0x298>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d111      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005488:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <HAL_ADC_ConfigChannel+0x2a4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a11      	ldr	r2, [pc, #68]	; (80054d4 <HAL_ADC_ConfigChannel+0x2a8>)
 800548e:	fba2 2303 	umull	r2, r3, r2, r3
 8005492:	0c9a      	lsrs	r2, r3, #18
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800549e:	e002      	b.n	80054a6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f9      	bne.n	80054a0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	10000012 	.word	0x10000012
 80054c8:	40012000 	.word	0x40012000
 80054cc:	40012300 	.word	0x40012300
 80054d0:	20000040 	.word	0x20000040
 80054d4:	431bde83 	.word	0x431bde83

080054d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80054e0:	4b78      	ldr	r3, [pc, #480]	; (80056c4 <ADC_Init+0x1ec>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4a77      	ldr	r2, [pc, #476]	; (80056c4 <ADC_Init+0x1ec>)
 80054e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80054ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80054ec:	4b75      	ldr	r3, [pc, #468]	; (80056c4 <ADC_Init+0x1ec>)
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4973      	ldr	r1, [pc, #460]	; (80056c4 <ADC_Init+0x1ec>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6859      	ldr	r1, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	021a      	lsls	r2, r3, #8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800552c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6859      	ldr	r1, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800554e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6899      	ldr	r1, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	4a58      	ldr	r2, [pc, #352]	; (80056c8 <ADC_Init+0x1f0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d022      	beq.n	80055b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800557a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6899      	ldr	r1, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800559c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6899      	ldr	r1, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]
 80055b0:	e00f      	b.n	80055d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0202 	bic.w	r2, r2, #2
 80055e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6899      	ldr	r1, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	005a      	lsls	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01b      	beq.n	8005638 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800560e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800561e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6859      	ldr	r1, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	3b01      	subs	r3, #1
 800562c:	035a      	lsls	r2, r3, #13
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	e007      	b.n	8005648 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005646:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	3b01      	subs	r3, #1
 8005664:	051a      	lsls	r2, r3, #20
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800567c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6899      	ldr	r1, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800568a:	025a      	lsls	r2, r3, #9
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6899      	ldr	r1, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	029a      	lsls	r2, r3, #10
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	609a      	str	r2, [r3, #8]
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	40012300 	.word	0x40012300
 80056c8:	0f000001 	.word	0x0f000001

080056cc <__NVIC_SetPriorityGrouping>:
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056dc:	4b0b      	ldr	r3, [pc, #44]	; (800570c <__NVIC_SetPriorityGrouping+0x40>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056e8:	4013      	ands	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <__NVIC_SetPriorityGrouping+0x44>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056fa:	4a04      	ldr	r2, [pc, #16]	; (800570c <__NVIC_SetPriorityGrouping+0x40>)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	60d3      	str	r3, [r2, #12]
}
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	e000ed00 	.word	0xe000ed00
 8005710:	05fa0000 	.word	0x05fa0000

08005714 <__NVIC_GetPriorityGrouping>:
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <__NVIC_GetPriorityGrouping+0x18>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	0a1b      	lsrs	r3, r3, #8
 800571e:	f003 0307 	and.w	r3, r3, #7
}
 8005722:	4618      	mov	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	e000ed00 	.word	0xe000ed00

08005730 <__NVIC_EnableIRQ>:
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	4603      	mov	r3, r0
 8005738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800573a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573e:	2b00      	cmp	r3, #0
 8005740:	db0b      	blt.n	800575a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	f003 021f 	and.w	r2, r3, #31
 8005748:	4907      	ldr	r1, [pc, #28]	; (8005768 <__NVIC_EnableIRQ+0x38>)
 800574a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574e:	095b      	lsrs	r3, r3, #5
 8005750:	2001      	movs	r0, #1
 8005752:	fa00 f202 	lsl.w	r2, r0, r2
 8005756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800575a:	bf00      	nop
 800575c:	370c      	adds	r7, #12
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	e000e100 	.word	0xe000e100

0800576c <__NVIC_SetPriority>:
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	6039      	str	r1, [r7, #0]
 8005776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577c:	2b00      	cmp	r3, #0
 800577e:	db0a      	blt.n	8005796 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	b2da      	uxtb	r2, r3
 8005784:	490c      	ldr	r1, [pc, #48]	; (80057b8 <__NVIC_SetPriority+0x4c>)
 8005786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578a:	0112      	lsls	r2, r2, #4
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	440b      	add	r3, r1
 8005790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005794:	e00a      	b.n	80057ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	b2da      	uxtb	r2, r3
 800579a:	4908      	ldr	r1, [pc, #32]	; (80057bc <__NVIC_SetPriority+0x50>)
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	3b04      	subs	r3, #4
 80057a4:	0112      	lsls	r2, r2, #4
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	440b      	add	r3, r1
 80057aa:	761a      	strb	r2, [r3, #24]
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	e000e100 	.word	0xe000e100
 80057bc:	e000ed00 	.word	0xe000ed00

080057c0 <NVIC_EncodePriority>:
{
 80057c0:	b480      	push	{r7}
 80057c2:	b089      	sub	sp, #36	; 0x24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f1c3 0307 	rsb	r3, r3, #7
 80057da:	2b04      	cmp	r3, #4
 80057dc:	bf28      	it	cs
 80057de:	2304      	movcs	r3, #4
 80057e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3304      	adds	r3, #4
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d902      	bls.n	80057f0 <NVIC_EncodePriority+0x30>
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	3b03      	subs	r3, #3
 80057ee:	e000      	b.n	80057f2 <NVIC_EncodePriority+0x32>
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057f4:	f04f 32ff 	mov.w	r2, #4294967295
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43da      	mvns	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	401a      	ands	r2, r3
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005808:	f04f 31ff 	mov.w	r1, #4294967295
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	fa01 f303 	lsl.w	r3, r1, r3
 8005812:	43d9      	mvns	r1, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005818:	4313      	orrs	r3, r2
}
 800581a:	4618      	mov	r0, r3
 800581c:	3724      	adds	r7, #36	; 0x24
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff ff4c 	bl	80056cc <__NVIC_SetPriorityGrouping>
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800584e:	f7ff ff61 	bl	8005714 <__NVIC_GetPriorityGrouping>
 8005852:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	6978      	ldr	r0, [r7, #20]
 800585a:	f7ff ffb1 	bl	80057c0 <NVIC_EncodePriority>
 800585e:	4602      	mov	r2, r0
 8005860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff ff80 	bl	800576c <__NVIC_SetPriority>
}
 800586c:	bf00      	nop
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	4603      	mov	r3, r0
 800587c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800587e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff ff54 	bl	8005730 <__NVIC_EnableIRQ>
}
 8005888:	bf00      	nop
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e014      	b.n	80058cc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	791b      	ldrb	r3, [r3, #4]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d105      	bne.n	80058b8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7fe fd42 	bl	800433c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058ea:	d120      	bne.n	800592e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058fa:	d118      	bne.n	800592e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2204      	movs	r2, #4
 8005900:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	f043 0201 	orr.w	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005916:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005926:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f82d 	bl	8005988 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800593c:	d120      	bne.n	8005980 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005948:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800594c:	d118      	bne.n	8005980 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2204      	movs	r2, #4
 8005952:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	f043 0202 	orr.w	r2, r3, #2
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005968:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005978:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f85d 	bl	8005a3a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	795b      	ldrb	r3, [r3, #5]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d101      	bne.n	80059b4 <HAL_DAC_ConfigChannel+0x18>
 80059b0:	2302      	movs	r3, #2
 80059b2:	e03c      	b.n	8005a2e <HAL_DAC_ConfigChannel+0x92>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2202      	movs	r2, #2
 80059be:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	f640 72fe 	movw	r2, #4094	; 0xffe
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	43db      	mvns	r3, r3
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4013      	ands	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6819      	ldr	r1, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	22c0      	movs	r2, #192	; 0xc0
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	43da      	mvns	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	400a      	ands	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
	...

08005a50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a5c:	f7ff faa4 	bl	8004fa8 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e099      	b.n	8005ba0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0201 	bic.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a8c:	e00f      	b.n	8005aae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a8e:	f7ff fa8b 	bl	8004fa8 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b05      	cmp	r3, #5
 8005a9a:	d908      	bls.n	8005aae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2203      	movs	r2, #3
 8005aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e078      	b.n	8005ba0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e8      	bne.n	8005a8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4b38      	ldr	r3, [pc, #224]	; (8005ba8 <HAL_DMA_Init+0x158>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005af2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d107      	bne.n	8005b18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	4313      	orrs	r3, r2
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0307 	bic.w	r3, r3, #7
 8005b2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d117      	bne.n	8005b72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00e      	beq.n	8005b72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f94f 	bl	8005df8 <DMA_CheckFifoParam>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d008      	beq.n	8005b72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2240      	movs	r2, #64	; 0x40
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e016      	b.n	8005ba0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f906 	bl	8005d8c <DMA_CalcBaseAndBitshift>
 8005b80:	4603      	mov	r3, r0
 8005b82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b88:	223f      	movs	r2, #63	; 0x3f
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	f010803f 	.word	0xf010803f

08005bac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e050      	b.n	8005c60 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d101      	bne.n	8005bce <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e048      	b.n	8005c60 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2200      	movs	r2, #0
 8005bec:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2200      	movs	r2, #0
 8005c04:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2221      	movs	r2, #33	; 0x21
 8005c0c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f8bc 	bl	8005d8c <DMA_CalcBaseAndBitshift>
 8005c14:	4603      	mov	r3, r0
 8005c16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c1c:	223f      	movs	r2, #63	; 0x3f
 8005c1e:	409a      	lsls	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c76:	f7ff f997 	bl	8004fa8 <HAL_GetTick>
 8005c7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d008      	beq.n	8005c9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2280      	movs	r2, #128	; 0x80
 8005c8c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e052      	b.n	8005d40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0216 	bic.w	r2, r2, #22
 8005ca8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695a      	ldr	r2, [r3, #20]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d103      	bne.n	8005cca <HAL_DMA_Abort+0x62>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0208 	bic.w	r2, r2, #8
 8005cd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0201 	bic.w	r2, r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cea:	e013      	b.n	8005d14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cec:	f7ff f95c 	bl	8004fa8 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b05      	cmp	r3, #5
 8005cf8:	d90c      	bls.n	8005d14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2203      	movs	r2, #3
 8005d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e015      	b.n	8005d40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1e4      	bne.n	8005cec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d26:	223f      	movs	r2, #63	; 0x3f
 8005d28:	409a      	lsls	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d004      	beq.n	8005d66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2280      	movs	r2, #128	; 0x80
 8005d60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e00c      	b.n	8005d80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2205      	movs	r2, #5
 8005d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0201 	bic.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	3b10      	subs	r3, #16
 8005d9c:	4a13      	ldr	r2, [pc, #76]	; (8005dec <DMA_CalcBaseAndBitshift+0x60>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	091b      	lsrs	r3, r3, #4
 8005da4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005da6:	4a12      	ldr	r2, [pc, #72]	; (8005df0 <DMA_CalcBaseAndBitshift+0x64>)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d908      	bls.n	8005dcc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <DMA_CalcBaseAndBitshift+0x68>)
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	1d1a      	adds	r2, r3, #4
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	659a      	str	r2, [r3, #88]	; 0x58
 8005dca:	e006      	b.n	8005dda <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <DMA_CalcBaseAndBitshift+0x68>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	aaaaaaab 	.word	0xaaaaaaab
 8005df0:	080343d8 	.word	0x080343d8
 8005df4:	fffffc00 	.word	0xfffffc00

08005df8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d11f      	bne.n	8005e52 <DMA_CheckFifoParam+0x5a>
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d856      	bhi.n	8005ec6 <DMA_CheckFifoParam+0xce>
 8005e18:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <DMA_CheckFifoParam+0x28>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e31 	.word	0x08005e31
 8005e24:	08005e43 	.word	0x08005e43
 8005e28:	08005e31 	.word	0x08005e31
 8005e2c:	08005ec7 	.word	0x08005ec7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d046      	beq.n	8005eca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e40:	e043      	b.n	8005eca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e4a:	d140      	bne.n	8005ece <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e50:	e03d      	b.n	8005ece <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e5a:	d121      	bne.n	8005ea0 <DMA_CheckFifoParam+0xa8>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d837      	bhi.n	8005ed2 <DMA_CheckFifoParam+0xda>
 8005e62:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <DMA_CheckFifoParam+0x70>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005e7f 	.word	0x08005e7f
 8005e70:	08005e79 	.word	0x08005e79
 8005e74:	08005e91 	.word	0x08005e91
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e7c:	e030      	b.n	8005ee0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d025      	beq.n	8005ed6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e8e:	e022      	b.n	8005ed6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e98:	d11f      	bne.n	8005eda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e9e:	e01c      	b.n	8005eda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d903      	bls.n	8005eae <DMA_CheckFifoParam+0xb6>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d003      	beq.n	8005eb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005eac:	e018      	b.n	8005ee0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb2:	e015      	b.n	8005ee0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00e      	beq.n	8005ede <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ec4:	e00b      	b.n	8005ede <DMA_CheckFifoParam+0xe6>
      break;
 8005ec6:	bf00      	nop
 8005ec8:	e00a      	b.n	8005ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8005eca:	bf00      	nop
 8005ecc:	e008      	b.n	8005ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ece:	bf00      	nop
 8005ed0:	e006      	b.n	8005ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ed2:	bf00      	nop
 8005ed4:	e004      	b.n	8005ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ed6:	bf00      	nop
 8005ed8:	e002      	b.n	8005ee0 <DMA_CheckFifoParam+0xe8>
      break;   
 8005eda:	bf00      	nop
 8005edc:	e000      	b.n	8005ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8005ede:	bf00      	nop
    }
  } 
  
  return status; 
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop

08005ef0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e039      	b.n	8005f76 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fe fa58 	bl	80043cc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f40:	f023 0107 	bic.w	r1, r3, #7
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f56:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <HAL_DMA2D_Init+0x90>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	68d1      	ldr	r1, [r2, #12]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6812      	ldr	r2, [r2, #0]
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	ffffc000 	.word	0xffffc000

08005f84 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af02      	add	r7, sp, #8
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_DMA2D_Start+0x1c>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e018      	b.n	8005fd2 <HAL_DMA2D_Start+0x4e>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 fa98 	bl	80064f0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b086      	sub	sp, #24
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d056      	beq.n	80060a4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ff6:	f7fe ffd7 	bl	8004fa8 <HAL_GetTick>
 8005ffa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005ffc:	e04b      	b.n	8006096 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800600c:	2b00      	cmp	r3, #0
 800600e:	d023      	beq.n	8006058 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 0320 	and.w	r3, r3, #32
 8006016:	2b00      	cmp	r3, #0
 8006018:	d005      	beq.n	8006026 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601e:	f043 0202 	orr.w	r2, r3, #2
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006034:	f043 0201 	orr.w	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2221      	movs	r2, #33	; 0x21
 8006042:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2204      	movs	r2, #4
 8006048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e0a5      	b.n	80061a4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605e:	d01a      	beq.n	8006096 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006060:	f7fe ffa2 	bl	8004fa8 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	429a      	cmp	r2, r3
 800606e:	d302      	bcc.n	8006076 <HAL_DMA2D_PollForTransfer+0x9c>
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10f      	bne.n	8006096 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607a:	f043 0220 	orr.w	r2, r3, #32
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2203      	movs	r2, #3
 8006086:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e086      	b.n	80061a4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0ac      	beq.n	8005ffe <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f003 0320 	and.w	r3, r3, #32
 80060ae:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d061      	beq.n	800618a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80060c6:	f7fe ff6f 	bl	8004fa8 <HAL_GetTick>
 80060ca:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80060cc:	e056      	b.n	800617c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d02e      	beq.n	800613e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	f043 0204 	orr.w	r2, r3, #4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006104:	f043 0202 	orr.w	r2, r3, #2
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	f043 0201 	orr.w	r2, r3, #1
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2229      	movs	r2, #41	; 0x29
 8006128:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2204      	movs	r2, #4
 800612e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e032      	b.n	80061a4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d01a      	beq.n	800617c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006146:	f7fe ff2f 	bl	8004fa8 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d302      	bcc.n	800615c <HAL_DMA2D_PollForTransfer+0x182>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10f      	bne.n	800617c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006160:	f043 0220 	orr.w	r2, r3, #32
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2203      	movs	r2, #3
 800616c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e013      	b.n	80061a4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f003 0310 	and.w	r3, r3, #16
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0a1      	beq.n	80060ce <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2212      	movs	r2, #18
 8006190:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d026      	beq.n	800621c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d021      	beq.n	800621c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061e6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ec:	f043 0201 	orr.w	r2, r3, #1
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2201      	movs	r2, #1
 80061fa:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2204      	movs	r2, #4
 8006200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d026      	beq.n	8006274 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d021      	beq.n	8006274 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800623e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2220      	movs	r2, #32
 8006246:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624c:	f043 0202 	orr.w	r2, r3, #2
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2204      	movs	r2, #4
 8006258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d003      	beq.n	8006274 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d026      	beq.n	80062cc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006284:	2b00      	cmp	r3, #0
 8006286:	d021      	beq.n	80062cc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006296:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2208      	movs	r2, #8
 800629e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a4:	f043 0204 	orr.w	r2, r3, #4
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2204      	movs	r2, #4
 80062b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f003 0304 	and.w	r3, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d013      	beq.n	80062fe <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00e      	beq.n	80062fe <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ee:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2204      	movs	r2, #4
 80062f6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f853 	bl	80063a4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d024      	beq.n	8006352 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800630e:	2b00      	cmp	r3, #0
 8006310:	d01f      	beq.n	8006352 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006320:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2202      	movs	r2, #2
 8006328:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01f      	beq.n	800639c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d01a      	beq.n	800639c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006374:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2210      	movs	r2, #16
 800637c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f80e 	bl	80063b8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800639c:	bf00      	nop
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_DMA2D_ConfigLayer+0x20>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e079      	b.n	80064e0 <HAL_DMA2D_ConfigLayer+0x114>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	3318      	adds	r3, #24
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	4413      	add	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	041b      	lsls	r3, r3, #16
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006416:	4b35      	ldr	r3, [pc, #212]	; (80064ec <HAL_DMA2D_ConfigLayer+0x120>)
 8006418:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2b0a      	cmp	r3, #10
 8006420:	d003      	beq.n	800642a <HAL_DMA2D_ConfigLayer+0x5e>
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b09      	cmp	r3, #9
 8006428:	d107      	bne.n	800643a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e005      	b.n	8006446 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	061b      	lsls	r3, r3, #24
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d120      	bne.n	800648e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	43db      	mvns	r3, r3
 8006456:	ea02 0103 	and.w	r1, r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	430a      	orrs	r2, r1
 8006462:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	6812      	ldr	r2, [r2, #0]
 800646c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b0a      	cmp	r3, #10
 8006474:	d003      	beq.n	800647e <HAL_DMA2D_ConfigLayer+0xb2>
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b09      	cmp	r3, #9
 800647c:	d127      	bne.n	80064ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800648a:	629a      	str	r2, [r3, #40]	; 0x28
 800648c:	e01f      	b.n	80064ce <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	69da      	ldr	r2, [r3, #28]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	43db      	mvns	r3, r3
 8006498:	ea02 0103 	and.w	r1, r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	2b0a      	cmp	r3, #10
 80064b6:	d003      	beq.n	80064c0 <HAL_DMA2D_ConfigLayer+0xf4>
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b09      	cmp	r3, #9
 80064be:	d106      	bne.n	80064ce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80064cc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	ff03000f 	.word	0xff03000f

080064f0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b08b      	sub	sp, #44	; 0x2c
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
 80064fc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006504:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	041a      	lsls	r2, r3, #16
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	431a      	orrs	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006528:	d174      	bne.n	8006614 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006530:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006538:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006540:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d108      	bne.n	8006562 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	431a      	orrs	r2, r3
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	4313      	orrs	r3, r2
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
 8006560:	e053      	b.n	800660a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	2b01      	cmp	r3, #1
 8006568:	d106      	bne.n	8006578 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	4313      	orrs	r3, r2
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	4313      	orrs	r3, r2
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
 8006576:	e048      	b.n	800660a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b02      	cmp	r3, #2
 800657e:	d111      	bne.n	80065a4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	0cdb      	lsrs	r3, r3, #19
 8006584:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	0a9b      	lsrs	r3, r3, #10
 800658a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	08db      	lsrs	r3, r3, #3
 8006590:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	02db      	lsls	r3, r3, #11
 800659a:	4313      	orrs	r3, r2
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4313      	orrs	r3, r2
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	e032      	b.n	800660a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d117      	bne.n	80065dc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	0fdb      	lsrs	r3, r3, #31
 80065b0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	0cdb      	lsrs	r3, r3, #19
 80065b6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	0adb      	lsrs	r3, r3, #11
 80065bc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	08db      	lsrs	r3, r3, #3
 80065c2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	029b      	lsls	r3, r3, #10
 80065cc:	431a      	orrs	r2, r3
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	03db      	lsls	r3, r3, #15
 80065d2:	4313      	orrs	r3, r2
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	627b      	str	r3, [r7, #36]	; 0x24
 80065da:	e016      	b.n	800660a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	0f1b      	lsrs	r3, r3, #28
 80065e0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	0d1b      	lsrs	r3, r3, #20
 80065e6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	0b1b      	lsrs	r3, r3, #12
 80065ec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	011a      	lsls	r2, r3, #4
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	431a      	orrs	r2, r3
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	031b      	lsls	r3, r3, #12
 8006602:	4313      	orrs	r3, r2
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4313      	orrs	r3, r2
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006610:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006612:	e003      	b.n	800661c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	60da      	str	r2, [r3, #12]
}
 800661c:	bf00      	nop
 800661e:	372c      	adds	r7, #44	; 0x2c
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006628:	b480      	push	{r7}
 800662a:	b089      	sub	sp, #36	; 0x24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006632:	2300      	movs	r3, #0
 8006634:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800663a:	2300      	movs	r3, #0
 800663c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800663e:	2300      	movs	r3, #0
 8006640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006642:	2300      	movs	r3, #0
 8006644:	61fb      	str	r3, [r7, #28]
 8006646:	e175      	b.n	8006934 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006648:	2201      	movs	r2, #1
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4013      	ands	r3, r2
 800665a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	429a      	cmp	r2, r3
 8006662:	f040 8164 	bne.w	800692e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	2b01      	cmp	r3, #1
 8006670:	d005      	beq.n	800667e <HAL_GPIO_Init+0x56>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d130      	bne.n	80066e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	2203      	movs	r2, #3
 800668a:	fa02 f303 	lsl.w	r3, r2, r3
 800668e:	43db      	mvns	r3, r3
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	4013      	ands	r3, r2
 8006694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	005b      	lsls	r3, r3, #1
 800669e:	fa02 f303 	lsl.w	r3, r2, r3
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066b4:	2201      	movs	r2, #1
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	43db      	mvns	r3, r3
 80066be:	69ba      	ldr	r2, [r7, #24]
 80066c0:	4013      	ands	r3, r2
 80066c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	091b      	lsrs	r3, r3, #4
 80066ca:	f003 0201 	and.w	r2, r3, #1
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	fa02 f303 	lsl.w	r3, r2, r3
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d017      	beq.n	800671c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	005b      	lsls	r3, r3, #1
 80066f6:	2203      	movs	r2, #3
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	43db      	mvns	r3, r3
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	4013      	ands	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	fa02 f303 	lsl.w	r3, r2, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	4313      	orrs	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f003 0303 	and.w	r3, r3, #3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d123      	bne.n	8006770 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	08da      	lsrs	r2, r3, #3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3208      	adds	r2, #8
 8006730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	f003 0307 	and.w	r3, r3, #7
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	220f      	movs	r2, #15
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	43db      	mvns	r3, r3
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	4013      	ands	r3, r2
 800674a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	691a      	ldr	r2, [r3, #16]
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	fa02 f303 	lsl.w	r3, r2, r3
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	4313      	orrs	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	08da      	lsrs	r2, r3, #3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3208      	adds	r2, #8
 800676a:	69b9      	ldr	r1, [r7, #24]
 800676c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	2203      	movs	r2, #3
 800677c:	fa02 f303 	lsl.w	r3, r2, r3
 8006780:	43db      	mvns	r3, r3
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	4013      	ands	r3, r2
 8006786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f003 0203 	and.w	r2, r3, #3
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	fa02 f303 	lsl.w	r3, r2, r3
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	4313      	orrs	r3, r2
 800679c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80be 	beq.w	800692e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067b2:	4b66      	ldr	r3, [pc, #408]	; (800694c <HAL_GPIO_Init+0x324>)
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	4a65      	ldr	r2, [pc, #404]	; (800694c <HAL_GPIO_Init+0x324>)
 80067b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067bc:	6453      	str	r3, [r2, #68]	; 0x44
 80067be:	4b63      	ldr	r3, [pc, #396]	; (800694c <HAL_GPIO_Init+0x324>)
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80067ca:	4a61      	ldr	r2, [pc, #388]	; (8006950 <HAL_GPIO_Init+0x328>)
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	089b      	lsrs	r3, r3, #2
 80067d0:	3302      	adds	r3, #2
 80067d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	220f      	movs	r2, #15
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	43db      	mvns	r3, r3
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	4013      	ands	r3, r2
 80067ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a58      	ldr	r2, [pc, #352]	; (8006954 <HAL_GPIO_Init+0x32c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d037      	beq.n	8006866 <HAL_GPIO_Init+0x23e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a57      	ldr	r2, [pc, #348]	; (8006958 <HAL_GPIO_Init+0x330>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d031      	beq.n	8006862 <HAL_GPIO_Init+0x23a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a56      	ldr	r2, [pc, #344]	; (800695c <HAL_GPIO_Init+0x334>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d02b      	beq.n	800685e <HAL_GPIO_Init+0x236>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a55      	ldr	r2, [pc, #340]	; (8006960 <HAL_GPIO_Init+0x338>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d025      	beq.n	800685a <HAL_GPIO_Init+0x232>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a54      	ldr	r2, [pc, #336]	; (8006964 <HAL_GPIO_Init+0x33c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01f      	beq.n	8006856 <HAL_GPIO_Init+0x22e>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a53      	ldr	r2, [pc, #332]	; (8006968 <HAL_GPIO_Init+0x340>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d019      	beq.n	8006852 <HAL_GPIO_Init+0x22a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a52      	ldr	r2, [pc, #328]	; (800696c <HAL_GPIO_Init+0x344>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d013      	beq.n	800684e <HAL_GPIO_Init+0x226>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a51      	ldr	r2, [pc, #324]	; (8006970 <HAL_GPIO_Init+0x348>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00d      	beq.n	800684a <HAL_GPIO_Init+0x222>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a50      	ldr	r2, [pc, #320]	; (8006974 <HAL_GPIO_Init+0x34c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d007      	beq.n	8006846 <HAL_GPIO_Init+0x21e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a4f      	ldr	r2, [pc, #316]	; (8006978 <HAL_GPIO_Init+0x350>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d101      	bne.n	8006842 <HAL_GPIO_Init+0x21a>
 800683e:	2309      	movs	r3, #9
 8006840:	e012      	b.n	8006868 <HAL_GPIO_Init+0x240>
 8006842:	230a      	movs	r3, #10
 8006844:	e010      	b.n	8006868 <HAL_GPIO_Init+0x240>
 8006846:	2308      	movs	r3, #8
 8006848:	e00e      	b.n	8006868 <HAL_GPIO_Init+0x240>
 800684a:	2307      	movs	r3, #7
 800684c:	e00c      	b.n	8006868 <HAL_GPIO_Init+0x240>
 800684e:	2306      	movs	r3, #6
 8006850:	e00a      	b.n	8006868 <HAL_GPIO_Init+0x240>
 8006852:	2305      	movs	r3, #5
 8006854:	e008      	b.n	8006868 <HAL_GPIO_Init+0x240>
 8006856:	2304      	movs	r3, #4
 8006858:	e006      	b.n	8006868 <HAL_GPIO_Init+0x240>
 800685a:	2303      	movs	r3, #3
 800685c:	e004      	b.n	8006868 <HAL_GPIO_Init+0x240>
 800685e:	2302      	movs	r3, #2
 8006860:	e002      	b.n	8006868 <HAL_GPIO_Init+0x240>
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <HAL_GPIO_Init+0x240>
 8006866:	2300      	movs	r3, #0
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	f002 0203 	and.w	r2, r2, #3
 800686e:	0092      	lsls	r2, r2, #2
 8006870:	4093      	lsls	r3, r2
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	4313      	orrs	r3, r2
 8006876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006878:	4935      	ldr	r1, [pc, #212]	; (8006950 <HAL_GPIO_Init+0x328>)
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	089b      	lsrs	r3, r3, #2
 800687e:	3302      	adds	r3, #2
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006886:	4b3d      	ldr	r3, [pc, #244]	; (800697c <HAL_GPIO_Init+0x354>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	43db      	mvns	r3, r3
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	4013      	ands	r3, r2
 8006894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068aa:	4a34      	ldr	r2, [pc, #208]	; (800697c <HAL_GPIO_Init+0x354>)
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068b0:	4b32      	ldr	r3, [pc, #200]	; (800697c <HAL_GPIO_Init+0x354>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	43db      	mvns	r3, r3
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	4013      	ands	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80068d4:	4a29      	ldr	r2, [pc, #164]	; (800697c <HAL_GPIO_Init+0x354>)
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80068da:	4b28      	ldr	r3, [pc, #160]	; (800697c <HAL_GPIO_Init+0x354>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	43db      	mvns	r3, r3
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	4013      	ands	r3, r2
 80068e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80068fe:	4a1f      	ldr	r2, [pc, #124]	; (800697c <HAL_GPIO_Init+0x354>)
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006904:	4b1d      	ldr	r3, [pc, #116]	; (800697c <HAL_GPIO_Init+0x354>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	43db      	mvns	r3, r3
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	4013      	ands	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006928:	4a14      	ldr	r2, [pc, #80]	; (800697c <HAL_GPIO_Init+0x354>)
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	3301      	adds	r3, #1
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	2b0f      	cmp	r3, #15
 8006938:	f67f ae86 	bls.w	8006648 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800693c:	bf00      	nop
 800693e:	bf00      	nop
 8006940:	3724      	adds	r7, #36	; 0x24
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40023800 	.word	0x40023800
 8006950:	40013800 	.word	0x40013800
 8006954:	40020000 	.word	0x40020000
 8006958:	40020400 	.word	0x40020400
 800695c:	40020800 	.word	0x40020800
 8006960:	40020c00 	.word	0x40020c00
 8006964:	40021000 	.word	0x40021000
 8006968:	40021400 	.word	0x40021400
 800696c:	40021800 	.word	0x40021800
 8006970:	40021c00 	.word	0x40021c00
 8006974:	40022000 	.word	0x40022000
 8006978:	40022400 	.word	0x40022400
 800697c:	40013c00 	.word	0x40013c00

08006980 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800698a:	2300      	movs	r3, #0
 800698c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800698e:	2300      	movs	r3, #0
 8006990:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006992:	2300      	movs	r3, #0
 8006994:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	e0d9      	b.n	8006b50 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800699c:	2201      	movs	r2, #1
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	fa02 f303 	lsl.w	r3, r2, r3
 80069a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	4013      	ands	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	f040 80c9 	bne.w	8006b4a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80069b8:	4a6b      	ldr	r2, [pc, #428]	; (8006b68 <HAL_GPIO_DeInit+0x1e8>)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	089b      	lsrs	r3, r3, #2
 80069be:	3302      	adds	r3, #2
 80069c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	220f      	movs	r2, #15
 80069d0:	fa02 f303 	lsl.w	r3, r2, r3
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	4013      	ands	r3, r2
 80069d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a63      	ldr	r2, [pc, #396]	; (8006b6c <HAL_GPIO_DeInit+0x1ec>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d037      	beq.n	8006a52 <HAL_GPIO_DeInit+0xd2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a62      	ldr	r2, [pc, #392]	; (8006b70 <HAL_GPIO_DeInit+0x1f0>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d031      	beq.n	8006a4e <HAL_GPIO_DeInit+0xce>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a61      	ldr	r2, [pc, #388]	; (8006b74 <HAL_GPIO_DeInit+0x1f4>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d02b      	beq.n	8006a4a <HAL_GPIO_DeInit+0xca>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a60      	ldr	r2, [pc, #384]	; (8006b78 <HAL_GPIO_DeInit+0x1f8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d025      	beq.n	8006a46 <HAL_GPIO_DeInit+0xc6>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a5f      	ldr	r2, [pc, #380]	; (8006b7c <HAL_GPIO_DeInit+0x1fc>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d01f      	beq.n	8006a42 <HAL_GPIO_DeInit+0xc2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a5e      	ldr	r2, [pc, #376]	; (8006b80 <HAL_GPIO_DeInit+0x200>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d019      	beq.n	8006a3e <HAL_GPIO_DeInit+0xbe>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a5d      	ldr	r2, [pc, #372]	; (8006b84 <HAL_GPIO_DeInit+0x204>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d013      	beq.n	8006a3a <HAL_GPIO_DeInit+0xba>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a5c      	ldr	r2, [pc, #368]	; (8006b88 <HAL_GPIO_DeInit+0x208>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00d      	beq.n	8006a36 <HAL_GPIO_DeInit+0xb6>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a5b      	ldr	r2, [pc, #364]	; (8006b8c <HAL_GPIO_DeInit+0x20c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d007      	beq.n	8006a32 <HAL_GPIO_DeInit+0xb2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a5a      	ldr	r2, [pc, #360]	; (8006b90 <HAL_GPIO_DeInit+0x210>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d101      	bne.n	8006a2e <HAL_GPIO_DeInit+0xae>
 8006a2a:	2309      	movs	r3, #9
 8006a2c:	e012      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a2e:	230a      	movs	r3, #10
 8006a30:	e010      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a32:	2308      	movs	r3, #8
 8006a34:	e00e      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a36:	2307      	movs	r3, #7
 8006a38:	e00c      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a3a:	2306      	movs	r3, #6
 8006a3c:	e00a      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a3e:	2305      	movs	r3, #5
 8006a40:	e008      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a42:	2304      	movs	r3, #4
 8006a44:	e006      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a46:	2303      	movs	r3, #3
 8006a48:	e004      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e002      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <HAL_GPIO_DeInit+0xd4>
 8006a52:	2300      	movs	r3, #0
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	f002 0203 	and.w	r2, r2, #3
 8006a5a:	0092      	lsls	r2, r2, #2
 8006a5c:	4093      	lsls	r3, r2
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d132      	bne.n	8006aca <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006a64:	4b4b      	ldr	r3, [pc, #300]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	43db      	mvns	r3, r3
 8006a6c:	4949      	ldr	r1, [pc, #292]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006a72:	4b48      	ldr	r3, [pc, #288]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	4946      	ldr	r1, [pc, #280]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006a80:	4b44      	ldr	r3, [pc, #272]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	43db      	mvns	r3, r3
 8006a88:	4942      	ldr	r1, [pc, #264]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006a8e:	4b41      	ldr	r3, [pc, #260]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a90:	689a      	ldr	r2, [r3, #8]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	43db      	mvns	r3, r3
 8006a96:	493f      	ldr	r1, [pc, #252]	; (8006b94 <HAL_GPIO_DeInit+0x214>)
 8006a98:	4013      	ands	r3, r2
 8006a9a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	220f      	movs	r2, #15
 8006aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aaa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006aac:	4a2e      	ldr	r2, [pc, #184]	; (8006b68 <HAL_GPIO_DeInit+0x1e8>)
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	089b      	lsrs	r3, r3, #2
 8006ab2:	3302      	adds	r3, #2
 8006ab4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	43da      	mvns	r2, r3
 8006abc:	482a      	ldr	r0, [pc, #168]	; (8006b68 <HAL_GPIO_DeInit+0x1e8>)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	089b      	lsrs	r3, r3, #2
 8006ac2:	400a      	ands	r2, r1
 8006ac4:	3302      	adds	r3, #2
 8006ac6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	2103      	movs	r1, #3
 8006ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	401a      	ands	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	08da      	lsrs	r2, r3, #3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3208      	adds	r2, #8
 8006ae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f003 0307 	and.w	r3, r3, #7
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	220f      	movs	r2, #15
 8006af6:	fa02 f303 	lsl.w	r3, r2, r3
 8006afa:	43db      	mvns	r3, r3
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	08d2      	lsrs	r2, r2, #3
 8006b00:	4019      	ands	r1, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3208      	adds	r2, #8
 8006b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	005b      	lsls	r3, r3, #1
 8006b12:	2103      	movs	r1, #3
 8006b14:	fa01 f303 	lsl.w	r3, r1, r3
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	401a      	ands	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	2101      	movs	r1, #1
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	401a      	ands	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	2103      	movs	r1, #3
 8006b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b42:	43db      	mvns	r3, r3
 8006b44:	401a      	ands	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b0f      	cmp	r3, #15
 8006b54:	f67f af22 	bls.w	800699c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006b58:	bf00      	nop
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40013800 	.word	0x40013800
 8006b6c:	40020000 	.word	0x40020000
 8006b70:	40020400 	.word	0x40020400
 8006b74:	40020800 	.word	0x40020800
 8006b78:	40020c00 	.word	0x40020c00
 8006b7c:	40021000 	.word	0x40021000
 8006b80:	40021400 	.word	0x40021400
 8006b84:	40021800 	.word	0x40021800
 8006b88:	40021c00 	.word	0x40021c00
 8006b8c:	40022000 	.word	0x40022000
 8006b90:	40022400 	.word	0x40022400
 8006b94:	40013c00 	.word	0x40013c00

08006b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	807b      	strh	r3, [r7, #2]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ba8:	787b      	ldrb	r3, [r7, #1]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bae:	887a      	ldrh	r2, [r7, #2]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006bb4:	e003      	b.n	8006bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006bb6:	887b      	ldrh	r3, [r7, #2]
 8006bb8:	041a      	lsls	r2, r3, #16
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	619a      	str	r2, [r3, #24]
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006bdc:	887a      	ldrh	r2, [r7, #2]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4013      	ands	r3, r2
 8006be2:	041a      	lsls	r2, r3, #16
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	43d9      	mvns	r1, r3
 8006be8:	887b      	ldrh	r3, [r7, #2]
 8006bea:	400b      	ands	r3, r1
 8006bec:	431a      	orrs	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	619a      	str	r2, [r3, #24]
}
 8006bf2:	bf00      	nop
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
	...

08006c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006c0a:	4b08      	ldr	r3, [pc, #32]	; (8006c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c0c:	695a      	ldr	r2, [r3, #20]
 8006c0e:	88fb      	ldrh	r3, [r7, #6]
 8006c10:	4013      	ands	r3, r2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d006      	beq.n	8006c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c16:	4a05      	ldr	r2, [pc, #20]	; (8006c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c1c:	88fb      	ldrh	r3, [r7, #6]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fb fb90 	bl	8002344 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	40013c00 	.word	0x40013c00

08006c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e07f      	b.n	8006d42 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7fd fbde 	bl	8004418 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2224      	movs	r2, #36	; 0x24
 8006c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f022 0201 	bic.w	r2, r2, #1
 8006c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d107      	bne.n	8006caa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ca6:	609a      	str	r2, [r3, #8]
 8006ca8:	e006      	b.n	8006cb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006cb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d104      	bne.n	8006cca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	6859      	ldr	r1, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <HAL_I2C_Init+0x11c>)
 8006cd6:	430b      	orrs	r3, r1
 8006cd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ce8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	69d9      	ldr	r1, [r3, #28]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1a      	ldr	r2, [r3, #32]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	02008000 	.word	0x02008000

08006d50 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e021      	b.n	8006da6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2224      	movs	r2, #36	; 0x24
 8006d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0201 	bic.w	r2, r2, #1
 8006d78:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7fd fbf4 	bl	8004568 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	4608      	mov	r0, r1
 8006dba:	4611      	mov	r1, r2
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	817b      	strh	r3, [r7, #10]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	813b      	strh	r3, [r7, #8]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	f040 80f9 	bne.w	8006fca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <HAL_I2C_Mem_Write+0x34>
 8006dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d105      	bne.n	8006df0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e0ed      	b.n	8006fcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <HAL_I2C_Mem_Write+0x4e>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e0e6      	b.n	8006fcc <HAL_I2C_Mem_Write+0x21c>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e06:	f7fe f8cf 	bl	8004fa8 <HAL_GetTick>
 8006e0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	2319      	movs	r3, #25
 8006e12:	2201      	movs	r2, #1
 8006e14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fad1 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e0d1      	b.n	8006fcc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2221      	movs	r2, #33	; 0x21
 8006e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2240      	movs	r2, #64	; 0x40
 8006e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a3a      	ldr	r2, [r7, #32]
 8006e42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e50:	88f8      	ldrh	r0, [r7, #6]
 8006e52:	893a      	ldrh	r2, [r7, #8]
 8006e54:	8979      	ldrh	r1, [r7, #10]
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	4603      	mov	r3, r0
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 f9e1 	bl	8007228 <I2C_RequestMemoryWrite>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d005      	beq.n	8006e78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0a9      	b.n	8006fcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	2bff      	cmp	r3, #255	; 0xff
 8006e80:	d90e      	bls.n	8006ea0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	22ff      	movs	r2, #255	; 0xff
 8006e86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	8979      	ldrh	r1, [r7, #10]
 8006e90:	2300      	movs	r3, #0
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 fc39 	bl	8007710 <I2C_TransferConfig>
 8006e9e:	e00f      	b.n	8006ec0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	8979      	ldrh	r1, [r7, #10]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fc28 	bl	8007710 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 fabb 	bl	8007440 <I2C_WaitOnTXISFlagUntilTimeout>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e07b      	b.n	8006fcc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	781a      	ldrb	r2, [r3, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d034      	beq.n	8006f78 <HAL_I2C_Mem_Write+0x1c8>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d130      	bne.n	8006f78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2180      	movs	r1, #128	; 0x80
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fa4d 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e04d      	b.n	8006fcc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2bff      	cmp	r3, #255	; 0xff
 8006f38:	d90e      	bls.n	8006f58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	22ff      	movs	r2, #255	; 0xff
 8006f3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	8979      	ldrh	r1, [r7, #10]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 fbdd 	bl	8007710 <I2C_TransferConfig>
 8006f56:	e00f      	b.n	8006f78 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	8979      	ldrh	r1, [r7, #10]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 fbcc 	bl	8007710 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d19e      	bne.n	8006ec0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 fa9a 	bl	80074c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e01a      	b.n	8006fcc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6859      	ldr	r1, [r3, #4]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <HAL_I2C_Mem_Write+0x224>)
 8006faa:	400b      	ands	r3, r1
 8006fac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	e000      	b.n	8006fcc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006fca:	2302      	movs	r3, #2
  }
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	fe00e800 	.word	0xfe00e800

08006fd8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	817b      	strh	r3, [r7, #10]
 8006fea:	460b      	mov	r3, r1
 8006fec:	813b      	strh	r3, [r7, #8]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	f040 80fd 	bne.w	80071fa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <HAL_I2C_Mem_Read+0x34>
 8007006:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	d105      	bne.n	8007018 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007012:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e0f1      	b.n	80071fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800701e:	2b01      	cmp	r3, #1
 8007020:	d101      	bne.n	8007026 <HAL_I2C_Mem_Read+0x4e>
 8007022:	2302      	movs	r3, #2
 8007024:	e0ea      	b.n	80071fc <HAL_I2C_Mem_Read+0x224>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800702e:	f7fd ffbb 	bl	8004fa8 <HAL_GetTick>
 8007032:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	2319      	movs	r3, #25
 800703a:	2201      	movs	r2, #1
 800703c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 f9bd 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0d5      	b.n	80071fc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2222      	movs	r2, #34	; 0x22
 8007054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2240      	movs	r2, #64	; 0x40
 800705c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a3a      	ldr	r2, [r7, #32]
 800706a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007070:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007078:	88f8      	ldrh	r0, [r7, #6]
 800707a:	893a      	ldrh	r2, [r7, #8]
 800707c:	8979      	ldrh	r1, [r7, #10]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	4603      	mov	r3, r0
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f921 	bl	80072d0 <I2C_RequestMemoryRead>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e0ad      	b.n	80071fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	2bff      	cmp	r3, #255	; 0xff
 80070a8:	d90e      	bls.n	80070c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	22ff      	movs	r2, #255	; 0xff
 80070ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	8979      	ldrh	r1, [r7, #10]
 80070b8:	4b52      	ldr	r3, [pc, #328]	; (8007204 <HAL_I2C_Mem_Read+0x22c>)
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 fb25 	bl	8007710 <I2C_TransferConfig>
 80070c6:	e00f      	b.n	80070e8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	8979      	ldrh	r1, [r7, #10]
 80070da:	4b4a      	ldr	r3, [pc, #296]	; (8007204 <HAL_I2C_Mem_Read+0x22c>)
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 fb14 	bl	8007710 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	2200      	movs	r2, #0
 80070f0:	2104      	movs	r1, #4
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 f964 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e07c      	b.n	80071fc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	1c5a      	adds	r2, r3, #1
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800711e:	3b01      	subs	r3, #1
 8007120:	b29a      	uxth	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d034      	beq.n	80071a8 <HAL_I2C_Mem_Read+0x1d0>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007142:	2b00      	cmp	r3, #0
 8007144:	d130      	bne.n	80071a8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714c:	2200      	movs	r2, #0
 800714e:	2180      	movs	r1, #128	; 0x80
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f935 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e04d      	b.n	80071fc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007164:	b29b      	uxth	r3, r3
 8007166:	2bff      	cmp	r3, #255	; 0xff
 8007168:	d90e      	bls.n	8007188 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	22ff      	movs	r2, #255	; 0xff
 800716e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007174:	b2da      	uxtb	r2, r3
 8007176:	8979      	ldrh	r1, [r7, #10]
 8007178:	2300      	movs	r3, #0
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 fac5 	bl	8007710 <I2C_TransferConfig>
 8007186:	e00f      	b.n	80071a8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007196:	b2da      	uxtb	r2, r3
 8007198:	8979      	ldrh	r1, [r7, #10]
 800719a:	2300      	movs	r3, #0
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 fab4 	bl	8007710 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d19a      	bne.n	80070e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f982 	bl	80074c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e01a      	b.n	80071fc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2220      	movs	r2, #32
 80071cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6859      	ldr	r1, [r3, #4]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <HAL_I2C_Mem_Read+0x230>)
 80071da:	400b      	ands	r3, r1
 80071dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	e000      	b.n	80071fc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80071fa:	2302      	movs	r3, #2
  }
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	80002400 	.word	0x80002400
 8007208:	fe00e800 	.word	0xfe00e800

0800720c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800721a:	b2db      	uxtb	r3, r3
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af02      	add	r7, sp, #8
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	4608      	mov	r0, r1
 8007232:	4611      	mov	r1, r2
 8007234:	461a      	mov	r2, r3
 8007236:	4603      	mov	r3, r0
 8007238:	817b      	strh	r3, [r7, #10]
 800723a:	460b      	mov	r3, r1
 800723c:	813b      	strh	r3, [r7, #8]
 800723e:	4613      	mov	r3, r2
 8007240:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007242:	88fb      	ldrh	r3, [r7, #6]
 8007244:	b2da      	uxtb	r2, r3
 8007246:	8979      	ldrh	r1, [r7, #10]
 8007248:	4b20      	ldr	r3, [pc, #128]	; (80072cc <I2C_RequestMemoryWrite+0xa4>)
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 fa5d 	bl	8007710 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007256:	69fa      	ldr	r2, [r7, #28]
 8007258:	69b9      	ldr	r1, [r7, #24]
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 f8f0 	bl	8007440 <I2C_WaitOnTXISFlagUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e02c      	b.n	80072c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800726a:	88fb      	ldrh	r3, [r7, #6]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d105      	bne.n	800727c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007270:	893b      	ldrh	r3, [r7, #8]
 8007272:	b2da      	uxtb	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	629a      	str	r2, [r3, #40]	; 0x28
 800727a:	e015      	b.n	80072a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800727c:	893b      	ldrh	r3, [r7, #8]
 800727e:	0a1b      	lsrs	r3, r3, #8
 8007280:	b29b      	uxth	r3, r3
 8007282:	b2da      	uxtb	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	69b9      	ldr	r1, [r7, #24]
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 f8d6 	bl	8007440 <I2C_WaitOnTXISFlagUntilTimeout>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e012      	b.n	80072c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800729e:	893b      	ldrh	r3, [r7, #8]
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	2200      	movs	r2, #0
 80072b0:	2180      	movs	r1, #128	; 0x80
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f884 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	80002000 	.word	0x80002000

080072d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	4608      	mov	r0, r1
 80072da:	4611      	mov	r1, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	4603      	mov	r3, r0
 80072e0:	817b      	strh	r3, [r7, #10]
 80072e2:	460b      	mov	r3, r1
 80072e4:	813b      	strh	r3, [r7, #8]
 80072e6:	4613      	mov	r3, r2
 80072e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80072ea:	88fb      	ldrh	r3, [r7, #6]
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	8979      	ldrh	r1, [r7, #10]
 80072f0:	4b20      	ldr	r3, [pc, #128]	; (8007374 <I2C_RequestMemoryRead+0xa4>)
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	2300      	movs	r3, #0
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 fa0a 	bl	8007710 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	69b9      	ldr	r1, [r7, #24]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f89d 	bl	8007440 <I2C_WaitOnTXISFlagUntilTimeout>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e02c      	b.n	800736a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007310:	88fb      	ldrh	r3, [r7, #6]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d105      	bne.n	8007322 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007316:	893b      	ldrh	r3, [r7, #8]
 8007318:	b2da      	uxtb	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	629a      	str	r2, [r3, #40]	; 0x28
 8007320:	e015      	b.n	800734e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007322:	893b      	ldrh	r3, [r7, #8]
 8007324:	0a1b      	lsrs	r3, r3, #8
 8007326:	b29b      	uxth	r3, r3
 8007328:	b2da      	uxtb	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	69b9      	ldr	r1, [r7, #24]
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 f883 	bl	8007440 <I2C_WaitOnTXISFlagUntilTimeout>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e012      	b.n	800736a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007344:	893b      	ldrh	r3, [r7, #8]
 8007346:	b2da      	uxtb	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	2200      	movs	r2, #0
 8007356:	2140      	movs	r1, #64	; 0x40
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 f831 	bl	80073c0 <I2C_WaitOnFlagUntilTimeout>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e000      	b.n	800736a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	80002000 	.word	0x80002000

08007378 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b02      	cmp	r3, #2
 800738c:	d103      	bne.n	8007396 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2200      	movs	r2, #0
 8007394:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d007      	beq.n	80073b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	619a      	str	r2, [r3, #24]
  }
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	4613      	mov	r3, r2
 80073ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073d0:	e022      	b.n	8007418 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d8:	d01e      	beq.n	8007418 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073da:	f7fd fde5 	bl	8004fa8 <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d302      	bcc.n	80073f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d113      	bne.n	8007418 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f4:	f043 0220 	orr.w	r2, r3, #32
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2220      	movs	r2, #32
 8007400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e00f      	b.n	8007438 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	4013      	ands	r3, r2
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	429a      	cmp	r2, r3
 8007426:	bf0c      	ite	eq
 8007428:	2301      	moveq	r3, #1
 800742a:	2300      	movne	r3, #0
 800742c:	b2db      	uxtb	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	429a      	cmp	r2, r3
 8007434:	d0cd      	beq.n	80073d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800744c:	e02c      	b.n	80074a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 f870 	bl	8007538 <I2C_IsErrorOccurred>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e02a      	b.n	80074b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d01e      	beq.n	80074a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800746a:	f7fd fd9d 	bl	8004fa8 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	429a      	cmp	r2, r3
 8007478:	d302      	bcc.n	8007480 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d113      	bne.n	80074a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007484:	f043 0220 	orr.w	r2, r3, #32
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e007      	b.n	80074b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d1cb      	bne.n	800744e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074cc:	e028      	b.n	8007520 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	68b9      	ldr	r1, [r7, #8]
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 f830 	bl	8007538 <I2C_IsErrorOccurred>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e026      	b.n	8007530 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074e2:	f7fd fd61 	bl	8004fa8 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d302      	bcc.n	80074f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d113      	bne.n	8007520 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fc:	f043 0220 	orr.w	r2, r3, #32
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2220      	movs	r2, #32
 8007508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e007      	b.n	8007530 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	f003 0320 	and.w	r3, r3, #32
 800752a:	2b20      	cmp	r3, #32
 800752c:	d1cf      	bne.n	80074ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08a      	sub	sp, #40	; 0x28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	f003 0310 	and.w	r3, r3, #16
 8007560:	2b00      	cmp	r3, #0
 8007562:	d075      	beq.n	8007650 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2210      	movs	r2, #16
 800756a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800756c:	e056      	b.n	800761c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007574:	d052      	beq.n	800761c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007576:	f7fd fd17 	bl	8004fa8 <HAL_GetTick>
 800757a:	4602      	mov	r2, r0
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	1ad3      	subs	r3, r2, r3
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	429a      	cmp	r2, r3
 8007584:	d302      	bcc.n	800758c <I2C_IsErrorOccurred+0x54>
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d147      	bne.n	800761c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007596:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800759e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ae:	d12e      	bne.n	800760e <I2C_IsErrorOccurred+0xd6>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075b6:	d02a      	beq.n	800760e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80075b8:	7cfb      	ldrb	r3, [r7, #19]
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	d027      	beq.n	800760e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075cc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80075ce:	f7fd fceb 	bl	8004fa8 <HAL_GetTick>
 80075d2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075d4:	e01b      	b.n	800760e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80075d6:	f7fd fce7 	bl	8004fa8 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b19      	cmp	r3, #25
 80075e2:	d914      	bls.n	800760e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e8:	f043 0220 	orr.w	r2, r3, #32
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b20      	cmp	r3, #32
 800761a:	d1dc      	bne.n	80075d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	f003 0320 	and.w	r3, r3, #32
 8007626:	2b20      	cmp	r3, #32
 8007628:	d003      	beq.n	8007632 <I2C_IsErrorOccurred+0xfa>
 800762a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800762e:	2b00      	cmp	r3, #0
 8007630:	d09d      	beq.n	800756e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007636:	2b00      	cmp	r3, #0
 8007638:	d103      	bne.n	8007642 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2220      	movs	r2, #32
 8007640:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	f043 0304 	orr.w	r3, r3, #4
 8007648:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	f043 0301 	orr.w	r3, r3, #1
 8007668:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007672:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	f043 0308 	orr.w	r3, r3, #8
 800768a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007694:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00b      	beq.n	80076be <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	f043 0302 	orr.w	r3, r3, #2
 80076ac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80076be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d01c      	beq.n	8007700 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f7ff fe56 	bl	8007378 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6859      	ldr	r1, [r3, #4]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	4b0d      	ldr	r3, [pc, #52]	; (800770c <I2C_IsErrorOccurred+0x1d4>)
 80076d8:	400b      	ands	r3, r1
 80076da:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007704:	4618      	mov	r0, r3
 8007706:	3728      	adds	r7, #40	; 0x28
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	fe00e800 	.word	0xfe00e800

08007710 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	607b      	str	r3, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	817b      	strh	r3, [r7, #10]
 800771e:	4613      	mov	r3, r2
 8007720:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007722:	897b      	ldrh	r3, [r7, #10]
 8007724:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007728:	7a7b      	ldrb	r3, [r7, #9]
 800772a:	041b      	lsls	r3, r3, #16
 800772c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007730:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	4313      	orrs	r3, r2
 800773a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800773e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	0d5b      	lsrs	r3, r3, #21
 800774a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800774e:	4b08      	ldr	r3, [pc, #32]	; (8007770 <I2C_TransferConfig+0x60>)
 8007750:	430b      	orrs	r3, r1
 8007752:	43db      	mvns	r3, r3
 8007754:	ea02 0103 	and.w	r1, r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	430a      	orrs	r2, r1
 8007760:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007762:	bf00      	nop
 8007764:	371c      	adds	r7, #28
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	03ff63ff 	.word	0x03ff63ff

08007774 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b20      	cmp	r3, #32
 8007788:	d138      	bne.n	80077fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007794:	2302      	movs	r3, #2
 8007796:	e032      	b.n	80077fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2224      	movs	r2, #36	; 0x24
 80077a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0201 	bic.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6819      	ldr	r1, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0201 	orr.w	r2, r2, #1
 80077e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	e000      	b.n	80077fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077fc:	2302      	movs	r3, #2
  }
}
 80077fe:	4618      	mov	r0, r3
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b20      	cmp	r3, #32
 800781e:	d139      	bne.n	8007894 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007826:	2b01      	cmp	r3, #1
 8007828:	d101      	bne.n	800782e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800782a:	2302      	movs	r3, #2
 800782c:	e033      	b.n	8007896 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2224      	movs	r2, #36	; 0x24
 800783a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0201 	bic.w	r2, r2, #1
 800784c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800785c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0201 	orr.w	r2, r2, #1
 800787e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2220      	movs	r2, #32
 8007884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	e000      	b.n	8007896 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007894:	2302      	movs	r3, #2
  }
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e0bf      	b.n	8007a36 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d106      	bne.n	80078d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7fc fe88 	bl	80045e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699a      	ldr	r2, [r3, #24]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80078e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6999      	ldr	r1, [r3, #24]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80078fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6899      	ldr	r1, [r3, #8]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	4b4a      	ldr	r3, [pc, #296]	; (8007a40 <HAL_LTDC_Init+0x19c>)
 8007918:	400b      	ands	r3, r1
 800791a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	041b      	lsls	r3, r3, #16
 8007922:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6899      	ldr	r1, [r3, #8]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699a      	ldr	r2, [r3, #24]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	431a      	orrs	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68d9      	ldr	r1, [r3, #12]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	4b3e      	ldr	r3, [pc, #248]	; (8007a40 <HAL_LTDC_Init+0x19c>)
 8007946:	400b      	ands	r3, r1
 8007948:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	69db      	ldr	r3, [r3, #28]
 800794e:	041b      	lsls	r3, r3, #16
 8007950:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68d9      	ldr	r1, [r3, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a1a      	ldr	r2, [r3, #32]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6919      	ldr	r1, [r3, #16]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	4b33      	ldr	r3, [pc, #204]	; (8007a40 <HAL_LTDC_Init+0x19c>)
 8007974:	400b      	ands	r3, r1
 8007976:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	041b      	lsls	r3, r3, #16
 800797e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6919      	ldr	r1, [r3, #16]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	431a      	orrs	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6959      	ldr	r1, [r3, #20]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	4b27      	ldr	r3, [pc, #156]	; (8007a40 <HAL_LTDC_Init+0x19c>)
 80079a2:	400b      	ands	r3, r1
 80079a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079aa:	041b      	lsls	r3, r3, #16
 80079ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6959      	ldr	r1, [r3, #20]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079ca:	021b      	lsls	r3, r3, #8
 80079cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80079d4:	041b      	lsls	r3, r3, #16
 80079d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80079e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0206 	orr.w	r2, r2, #6
 8007a12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0201 	orr.w	r2, r2, #1
 8007a22:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	f000f800 	.word	0xf000f800

08007a44 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a52:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f003 0304 	and.w	r3, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d023      	beq.n	8007aae <HAL_LTDC_IRQHandler+0x6a>
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d01e      	beq.n	8007aae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f022 0204 	bic.w	r2, r2, #4
 8007a7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2204      	movs	r2, #4
 8007a86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a8e:	f043 0201 	orr.w	r2, r3, #1
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2204      	movs	r2, #4
 8007a9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f86f 	bl	8007b8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d023      	beq.n	8007b00 <HAL_LTDC_IRQHandler+0xbc>
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d01e      	beq.n	8007b00 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f022 0202 	bic.w	r2, r2, #2
 8007ad0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ae0:	f043 0202 	orr.w	r2, r3, #2
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2204      	movs	r2, #4
 8007aee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f846 	bl	8007b8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f003 0301 	and.w	r3, r3, #1
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d01b      	beq.n	8007b42 <HAL_LTDC_IRQHandler+0xfe>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d016      	beq.n	8007b42 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0201 	bic.w	r2, r2, #1
 8007b22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f82f 	bl	8007ba0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d01b      	beq.n	8007b84 <HAL_LTDC_IRQHandler+0x140>
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f003 0308 	and.w	r3, r3, #8
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d016      	beq.n	8007b84 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0208 	bic.w	r2, r2, #8
 8007b64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2208      	movs	r2, #8
 8007b6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f818 	bl	8007bb4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007bc8:	b5b0      	push	{r4, r5, r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d101      	bne.n	8007be2 <HAL_LTDC_ConfigLayer+0x1a>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e02c      	b.n	8007c3c <HAL_LTDC_ConfigLayer+0x74>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2202      	movs	r2, #2
 8007bee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2134      	movs	r1, #52	; 0x34
 8007bf8:	fb01 f303 	mul.w	r3, r1, r3
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	4614      	mov	r4, r2
 8007c06:	461d      	mov	r5, r3
 8007c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	68b9      	ldr	r1, [r7, #8]
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 f81f 	bl	8007c60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2201      	movs	r2, #1
 8007c28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bdb0      	pop	{r4, r5, r7, pc}

08007c44 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007c52:	b2db      	uxtb	r3, r3
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b089      	sub	sp, #36	; 0x24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	0c1b      	lsrs	r3, r3, #16
 8007c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c7c:	4413      	add	r3, r2
 8007c7e:	041b      	lsls	r3, r3, #16
 8007c80:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	01db      	lsls	r3, r3, #7
 8007c8c:	4413      	add	r3, r2
 8007c8e:	3384      	adds	r3, #132	; 0x84
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	6812      	ldr	r2, [r2, #0]
 8007c96:	4611      	mov	r1, r2
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	01d2      	lsls	r2, r2, #7
 8007c9c:	440a      	add	r2, r1
 8007c9e:	3284      	adds	r2, #132	; 0x84
 8007ca0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007ca4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	0c1b      	lsrs	r3, r3, #16
 8007cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cb6:	4413      	add	r3, r2
 8007cb8:	1c5a      	adds	r2, r3, #1
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	01db      	lsls	r3, r3, #7
 8007cc4:	440b      	add	r3, r1
 8007cc6:	3384      	adds	r3, #132	; 0x84
 8007cc8:	4619      	mov	r1, r3
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007cde:	4413      	add	r3, r2
 8007ce0:	041b      	lsls	r3, r3, #16
 8007ce2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	461a      	mov	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	01db      	lsls	r3, r3, #7
 8007cee:	4413      	add	r3, r2
 8007cf0:	3384      	adds	r3, #132	; 0x84
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	6812      	ldr	r2, [r2, #0]
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	01d2      	lsls	r2, r2, #7
 8007cfe:	440a      	add	r2, r1
 8007d00:	3284      	adds	r2, #132	; 0x84
 8007d02:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007d06:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	689a      	ldr	r2, [r3, #8]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d16:	4413      	add	r3, r2
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	01db      	lsls	r3, r3, #7
 8007d24:	440b      	add	r3, r1
 8007d26:	3384      	adds	r3, #132	; 0x84
 8007d28:	4619      	mov	r1, r3
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	461a      	mov	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	01db      	lsls	r3, r3, #7
 8007d3a:	4413      	add	r3, r2
 8007d3c:	3384      	adds	r3, #132	; 0x84
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	6812      	ldr	r2, [r2, #0]
 8007d44:	4611      	mov	r1, r2
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	01d2      	lsls	r2, r2, #7
 8007d4a:	440a      	add	r2, r1
 8007d4c:	3284      	adds	r2, #132	; 0x84
 8007d4e:	f023 0307 	bic.w	r3, r3, #7
 8007d52:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	01db      	lsls	r3, r3, #7
 8007d5e:	4413      	add	r3, r2
 8007d60:	3384      	adds	r3, #132	; 0x84
 8007d62:	461a      	mov	r2, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007d7a:	041b      	lsls	r3, r3, #16
 8007d7c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	061b      	lsls	r3, r3, #24
 8007d84:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	01db      	lsls	r3, r3, #7
 8007d90:	4413      	add	r3, r2
 8007d92:	3384      	adds	r3, #132	; 0x84
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	01db      	lsls	r3, r3, #7
 8007da0:	4413      	add	r3, r2
 8007da2:	3384      	adds	r3, #132	; 0x84
 8007da4:	461a      	mov	r2, r3
 8007da6:	2300      	movs	r3, #0
 8007da8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007db0:	461a      	mov	r2, r3
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	431a      	orrs	r2, r3
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	431a      	orrs	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	01db      	lsls	r3, r3, #7
 8007dc4:	440b      	add	r3, r1
 8007dc6:	3384      	adds	r3, #132	; 0x84
 8007dc8:	4619      	mov	r1, r3
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	01db      	lsls	r3, r3, #7
 8007dda:	4413      	add	r3, r2
 8007ddc:	3384      	adds	r3, #132	; 0x84
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	6812      	ldr	r2, [r2, #0]
 8007de4:	4611      	mov	r1, r2
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	01d2      	lsls	r2, r2, #7
 8007dea:	440a      	add	r2, r1
 8007dec:	3284      	adds	r2, #132	; 0x84
 8007dee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007df2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	01db      	lsls	r3, r3, #7
 8007dfe:	4413      	add	r3, r2
 8007e00:	3384      	adds	r3, #132	; 0x84
 8007e02:	461a      	mov	r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	01db      	lsls	r3, r3, #7
 8007e14:	4413      	add	r3, r2
 8007e16:	3384      	adds	r3, #132	; 0x84
 8007e18:	69da      	ldr	r2, [r3, #28]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	01db      	lsls	r3, r3, #7
 8007e24:	440b      	add	r3, r1
 8007e26:	3384      	adds	r3, #132	; 0x84
 8007e28:	4619      	mov	r1, r3
 8007e2a:	4b58      	ldr	r3, [pc, #352]	; (8007f8c <LTDC_SetConfig+0x32c>)
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	69da      	ldr	r2, [r3, #28]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	6a1b      	ldr	r3, [r3, #32]
 8007e38:	68f9      	ldr	r1, [r7, #12]
 8007e3a:	6809      	ldr	r1, [r1, #0]
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	01c9      	lsls	r1, r1, #7
 8007e42:	4401      	add	r1, r0
 8007e44:	3184      	adds	r1, #132	; 0x84
 8007e46:	4313      	orrs	r3, r2
 8007e48:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	01db      	lsls	r3, r3, #7
 8007e54:	4413      	add	r3, r2
 8007e56:	3384      	adds	r3, #132	; 0x84
 8007e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	01db      	lsls	r3, r3, #7
 8007e64:	4413      	add	r3, r2
 8007e66:	3384      	adds	r3, #132	; 0x84
 8007e68:	461a      	mov	r2, r3
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	01db      	lsls	r3, r3, #7
 8007e78:	4413      	add	r3, r2
 8007e7a:	3384      	adds	r3, #132	; 0x84
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d102      	bne.n	8007e92 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007e8c:	2304      	movs	r3, #4
 8007e8e:	61fb      	str	r3, [r7, #28]
 8007e90:	e01b      	b.n	8007eca <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d102      	bne.n	8007ea0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	61fb      	str	r3, [r7, #28]
 8007e9e:	e014      	b.n	8007eca <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d00b      	beq.n	8007ec0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d007      	beq.n	8007ec0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d003      	beq.n	8007ec0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007ebc:	2b07      	cmp	r3, #7
 8007ebe:	d102      	bne.n	8007ec6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	61fb      	str	r3, [r7, #28]
 8007ec4:	e001      	b.n	8007eca <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	01db      	lsls	r3, r3, #7
 8007ed4:	4413      	add	r3, r2
 8007ed6:	3384      	adds	r3, #132	; 0x84
 8007ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	01d2      	lsls	r2, r2, #7
 8007ee4:	440a      	add	r2, r1
 8007ee6:	3284      	adds	r2, #132	; 0x84
 8007ee8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007eec:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	fb02 f303 	mul.w	r3, r2, r3
 8007ef8:	041a      	lsls	r2, r3, #16
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	6859      	ldr	r1, [r3, #4]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	1acb      	subs	r3, r1, r3
 8007f04:	69f9      	ldr	r1, [r7, #28]
 8007f06:	fb01 f303 	mul.w	r3, r1, r3
 8007f0a:	3303      	adds	r3, #3
 8007f0c:	68f9      	ldr	r1, [r7, #12]
 8007f0e:	6809      	ldr	r1, [r1, #0]
 8007f10:	4608      	mov	r0, r1
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	01c9      	lsls	r1, r1, #7
 8007f16:	4401      	add	r1, r0
 8007f18:	3184      	adds	r1, #132	; 0x84
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	01db      	lsls	r3, r3, #7
 8007f28:	4413      	add	r3, r2
 8007f2a:	3384      	adds	r3, #132	; 0x84
 8007f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4619      	mov	r1, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	01db      	lsls	r3, r3, #7
 8007f38:	440b      	add	r3, r1
 8007f3a:	3384      	adds	r3, #132	; 0x84
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4b14      	ldr	r3, [pc, #80]	; (8007f90 <LTDC_SetConfig+0x330>)
 8007f40:	4013      	ands	r3, r2
 8007f42:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	01db      	lsls	r3, r3, #7
 8007f4e:	4413      	add	r3, r2
 8007f50:	3384      	adds	r3, #132	; 0x84
 8007f52:	461a      	mov	r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f58:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	01db      	lsls	r3, r3, #7
 8007f64:	4413      	add	r3, r2
 8007f66:	3384      	adds	r3, #132	; 0x84
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	4611      	mov	r1, r2
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	01d2      	lsls	r2, r2, #7
 8007f74:	440a      	add	r2, r1
 8007f76:	3284      	adds	r2, #132	; 0x84
 8007f78:	f043 0301 	orr.w	r3, r3, #1
 8007f7c:	6013      	str	r3, [r2, #0]
}
 8007f7e:	bf00      	nop
 8007f80:	3724      	adds	r7, #36	; 0x24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	fffff8f8 	.word	0xfffff8f8
 8007f90:	fffff800 	.word	0xfffff800

08007f94 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007f94:	b480      	push	{r7}
 8007f96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f98:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a04      	ldr	r2, [pc, #16]	; (8007fb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fa2:	6013      	str	r3, [r2, #0]
}
 8007fa4:	bf00      	nop
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	40007000 	.word	0x40007000

08007fb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007fbe:	4b23      	ldr	r3, [pc, #140]	; (800804c <HAL_PWREx_EnableOverDrive+0x98>)
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc2:	4a22      	ldr	r2, [pc, #136]	; (800804c <HAL_PWREx_EnableOverDrive+0x98>)
 8007fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8007fca:	4b20      	ldr	r3, [pc, #128]	; (800804c <HAL_PWREx_EnableOverDrive+0x98>)
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007fd6:	4b1e      	ldr	r3, [pc, #120]	; (8008050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a1d      	ldr	r2, [pc, #116]	; (8008050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007fe2:	f7fc ffe1 	bl	8004fa8 <HAL_GetTick>
 8007fe6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007fe8:	e009      	b.n	8007ffe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007fea:	f7fc ffdd 	bl	8004fa8 <HAL_GetTick>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ff8:	d901      	bls.n	8007ffe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e022      	b.n	8008044 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007ffe:	4b14      	ldr	r3, [pc, #80]	; (8008050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800800a:	d1ee      	bne.n	8007fea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800800c:	4b10      	ldr	r3, [pc, #64]	; (8008050 <HAL_PWREx_EnableOverDrive+0x9c>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a0f      	ldr	r2, [pc, #60]	; (8008050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008016:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008018:	f7fc ffc6 	bl	8004fa8 <HAL_GetTick>
 800801c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800801e:	e009      	b.n	8008034 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008020:	f7fc ffc2 	bl	8004fa8 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800802e:	d901      	bls.n	8008034 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e007      	b.n	8008044 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008034:	4b06      	ldr	r3, [pc, #24]	; (8008050 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800803c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008040:	d1ee      	bne.n	8008020 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	40023800 	.word	0x40023800
 8008050:	40007000 	.word	0x40007000

08008054 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800805c:	2300      	movs	r3, #0
 800805e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e291      	b.n	800858e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 8087 	beq.w	8008186 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008078:	4b96      	ldr	r3, [pc, #600]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f003 030c 	and.w	r3, r3, #12
 8008080:	2b04      	cmp	r3, #4
 8008082:	d00c      	beq.n	800809e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008084:	4b93      	ldr	r3, [pc, #588]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f003 030c 	and.w	r3, r3, #12
 800808c:	2b08      	cmp	r3, #8
 800808e:	d112      	bne.n	80080b6 <HAL_RCC_OscConfig+0x62>
 8008090:	4b90      	ldr	r3, [pc, #576]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800809c:	d10b      	bne.n	80080b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800809e:	4b8d      	ldr	r3, [pc, #564]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d06c      	beq.n	8008184 <HAL_RCC_OscConfig+0x130>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d168      	bne.n	8008184 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e26b      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080be:	d106      	bne.n	80080ce <HAL_RCC_OscConfig+0x7a>
 80080c0:	4b84      	ldr	r3, [pc, #528]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a83      	ldr	r2, [pc, #524]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80080c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	e02e      	b.n	800812c <HAL_RCC_OscConfig+0xd8>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d10c      	bne.n	80080f0 <HAL_RCC_OscConfig+0x9c>
 80080d6:	4b7f      	ldr	r3, [pc, #508]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a7e      	ldr	r2, [pc, #504]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80080dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	4b7c      	ldr	r3, [pc, #496]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a7b      	ldr	r2, [pc, #492]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80080e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080ec:	6013      	str	r3, [r2, #0]
 80080ee:	e01d      	b.n	800812c <HAL_RCC_OscConfig+0xd8>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080f8:	d10c      	bne.n	8008114 <HAL_RCC_OscConfig+0xc0>
 80080fa:	4b76      	ldr	r3, [pc, #472]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a75      	ldr	r2, [pc, #468]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	4b73      	ldr	r3, [pc, #460]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a72      	ldr	r2, [pc, #456]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 800810c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	e00b      	b.n	800812c <HAL_RCC_OscConfig+0xd8>
 8008114:	4b6f      	ldr	r3, [pc, #444]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a6e      	ldr	r2, [pc, #440]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 800811a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	4b6c      	ldr	r3, [pc, #432]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a6b      	ldr	r2, [pc, #428]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800812a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d013      	beq.n	800815c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008134:	f7fc ff38 	bl	8004fa8 <HAL_GetTick>
 8008138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800813a:	e008      	b.n	800814e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800813c:	f7fc ff34 	bl	8004fa8 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2b64      	cmp	r3, #100	; 0x64
 8008148:	d901      	bls.n	800814e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e21f      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800814e:	4b61      	ldr	r3, [pc, #388]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d0f0      	beq.n	800813c <HAL_RCC_OscConfig+0xe8>
 800815a:	e014      	b.n	8008186 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800815c:	f7fc ff24 	bl	8004fa8 <HAL_GetTick>
 8008160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008164:	f7fc ff20 	bl	8004fa8 <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b64      	cmp	r3, #100	; 0x64
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e20b      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008176:	4b57      	ldr	r3, [pc, #348]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1f0      	bne.n	8008164 <HAL_RCC_OscConfig+0x110>
 8008182:	e000      	b.n	8008186 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d069      	beq.n	8008266 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008192:	4b50      	ldr	r3, [pc, #320]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f003 030c 	and.w	r3, r3, #12
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00b      	beq.n	80081b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800819e:	4b4d      	ldr	r3, [pc, #308]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f003 030c 	and.w	r3, r3, #12
 80081a6:	2b08      	cmp	r3, #8
 80081a8:	d11c      	bne.n	80081e4 <HAL_RCC_OscConfig+0x190>
 80081aa:	4b4a      	ldr	r3, [pc, #296]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d116      	bne.n	80081e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081b6:	4b47      	ldr	r3, [pc, #284]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d005      	beq.n	80081ce <HAL_RCC_OscConfig+0x17a>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d001      	beq.n	80081ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e1df      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081ce:	4b41      	ldr	r3, [pc, #260]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	00db      	lsls	r3, r3, #3
 80081dc:	493d      	ldr	r1, [pc, #244]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80081de:	4313      	orrs	r3, r2
 80081e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081e2:	e040      	b.n	8008266 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d023      	beq.n	8008234 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081ec:	4b39      	ldr	r3, [pc, #228]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a38      	ldr	r2, [pc, #224]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80081f2:	f043 0301 	orr.w	r3, r3, #1
 80081f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081f8:	f7fc fed6 	bl	8004fa8 <HAL_GetTick>
 80081fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008200:	f7fc fed2 	bl	8004fa8 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e1bd      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008212:	4b30      	ldr	r3, [pc, #192]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0f0      	beq.n	8008200 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800821e:	4b2d      	ldr	r3, [pc, #180]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	4929      	ldr	r1, [pc, #164]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 800822e:	4313      	orrs	r3, r2
 8008230:	600b      	str	r3, [r1, #0]
 8008232:	e018      	b.n	8008266 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008234:	4b27      	ldr	r3, [pc, #156]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a26      	ldr	r2, [pc, #152]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 800823a:	f023 0301 	bic.w	r3, r3, #1
 800823e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008240:	f7fc feb2 	bl	8004fa8 <HAL_GetTick>
 8008244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008246:	e008      	b.n	800825a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008248:	f7fc feae 	bl	8004fa8 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d901      	bls.n	800825a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e199      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800825a:	4b1e      	ldr	r3, [pc, #120]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1f0      	bne.n	8008248 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0308 	and.w	r3, r3, #8
 800826e:	2b00      	cmp	r3, #0
 8008270:	d038      	beq.n	80082e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d019      	beq.n	80082ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800827a:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 800827c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800827e:	4a15      	ldr	r2, [pc, #84]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 8008280:	f043 0301 	orr.w	r3, r3, #1
 8008284:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008286:	f7fc fe8f 	bl	8004fa8 <HAL_GetTick>
 800828a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800828c:	e008      	b.n	80082a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800828e:	f7fc fe8b 	bl	8004fa8 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d901      	bls.n	80082a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e176      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80082a0:	4b0c      	ldr	r3, [pc, #48]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80082a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d0f0      	beq.n	800828e <HAL_RCC_OscConfig+0x23a>
 80082ac:	e01a      	b.n	80082e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082ae:	4b09      	ldr	r3, [pc, #36]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80082b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082b2:	4a08      	ldr	r2, [pc, #32]	; (80082d4 <HAL_RCC_OscConfig+0x280>)
 80082b4:	f023 0301 	bic.w	r3, r3, #1
 80082b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ba:	f7fc fe75 	bl	8004fa8 <HAL_GetTick>
 80082be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082c0:	e00a      	b.n	80082d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082c2:	f7fc fe71 	bl	8004fa8 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d903      	bls.n	80082d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e15c      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
 80082d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082d8:	4b91      	ldr	r3, [pc, #580]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80082da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1ee      	bne.n	80082c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 80a4 	beq.w	800843a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082f2:	4b8b      	ldr	r3, [pc, #556]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10d      	bne.n	800831a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80082fe:	4b88      	ldr	r3, [pc, #544]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	4a87      	ldr	r2, [pc, #540]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 8008304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008308:	6413      	str	r3, [r2, #64]	; 0x40
 800830a:	4b85      	ldr	r3, [pc, #532]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008312:	60bb      	str	r3, [r7, #8]
 8008314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008316:	2301      	movs	r3, #1
 8008318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800831a:	4b82      	ldr	r3, [pc, #520]	; (8008524 <HAL_RCC_OscConfig+0x4d0>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008322:	2b00      	cmp	r3, #0
 8008324:	d118      	bne.n	8008358 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008326:	4b7f      	ldr	r3, [pc, #508]	; (8008524 <HAL_RCC_OscConfig+0x4d0>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a7e      	ldr	r2, [pc, #504]	; (8008524 <HAL_RCC_OscConfig+0x4d0>)
 800832c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008332:	f7fc fe39 	bl	8004fa8 <HAL_GetTick>
 8008336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008338:	e008      	b.n	800834c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800833a:	f7fc fe35 	bl	8004fa8 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	2b64      	cmp	r3, #100	; 0x64
 8008346:	d901      	bls.n	800834c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e120      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800834c:	4b75      	ldr	r3, [pc, #468]	; (8008524 <HAL_RCC_OscConfig+0x4d0>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008354:	2b00      	cmp	r3, #0
 8008356:	d0f0      	beq.n	800833a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d106      	bne.n	800836e <HAL_RCC_OscConfig+0x31a>
 8008360:	4b6f      	ldr	r3, [pc, #444]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 8008362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008364:	4a6e      	ldr	r2, [pc, #440]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 8008366:	f043 0301 	orr.w	r3, r3, #1
 800836a:	6713      	str	r3, [r2, #112]	; 0x70
 800836c:	e02d      	b.n	80083ca <HAL_RCC_OscConfig+0x376>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10c      	bne.n	8008390 <HAL_RCC_OscConfig+0x33c>
 8008376:	4b6a      	ldr	r3, [pc, #424]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 8008378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837a:	4a69      	ldr	r2, [pc, #420]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 800837c:	f023 0301 	bic.w	r3, r3, #1
 8008380:	6713      	str	r3, [r2, #112]	; 0x70
 8008382:	4b67      	ldr	r3, [pc, #412]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 8008384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008386:	4a66      	ldr	r2, [pc, #408]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 8008388:	f023 0304 	bic.w	r3, r3, #4
 800838c:	6713      	str	r3, [r2, #112]	; 0x70
 800838e:	e01c      	b.n	80083ca <HAL_RCC_OscConfig+0x376>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	2b05      	cmp	r3, #5
 8008396:	d10c      	bne.n	80083b2 <HAL_RCC_OscConfig+0x35e>
 8008398:	4b61      	ldr	r3, [pc, #388]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 800839a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800839c:	4a60      	ldr	r2, [pc, #384]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 800839e:	f043 0304 	orr.w	r3, r3, #4
 80083a2:	6713      	str	r3, [r2, #112]	; 0x70
 80083a4:	4b5e      	ldr	r3, [pc, #376]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80083a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a8:	4a5d      	ldr	r2, [pc, #372]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80083aa:	f043 0301 	orr.w	r3, r3, #1
 80083ae:	6713      	str	r3, [r2, #112]	; 0x70
 80083b0:	e00b      	b.n	80083ca <HAL_RCC_OscConfig+0x376>
 80083b2:	4b5b      	ldr	r3, [pc, #364]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80083b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b6:	4a5a      	ldr	r2, [pc, #360]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80083b8:	f023 0301 	bic.w	r3, r3, #1
 80083bc:	6713      	str	r3, [r2, #112]	; 0x70
 80083be:	4b58      	ldr	r3, [pc, #352]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80083c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c2:	4a57      	ldr	r2, [pc, #348]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80083c4:	f023 0304 	bic.w	r3, r3, #4
 80083c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d015      	beq.n	80083fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083d2:	f7fc fde9 	bl	8004fa8 <HAL_GetTick>
 80083d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083d8:	e00a      	b.n	80083f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083da:	f7fc fde5 	bl	8004fa8 <HAL_GetTick>
 80083de:	4602      	mov	r2, r0
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d901      	bls.n	80083f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e0ce      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083f0:	4b4b      	ldr	r3, [pc, #300]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80083f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0ee      	beq.n	80083da <HAL_RCC_OscConfig+0x386>
 80083fc:	e014      	b.n	8008428 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083fe:	f7fc fdd3 	bl	8004fa8 <HAL_GetTick>
 8008402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008404:	e00a      	b.n	800841c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008406:	f7fc fdcf 	bl	8004fa8 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	f241 3288 	movw	r2, #5000	; 0x1388
 8008414:	4293      	cmp	r3, r2
 8008416:	d901      	bls.n	800841c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e0b8      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800841c:	4b40      	ldr	r3, [pc, #256]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 800841e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008420:	f003 0302 	and.w	r3, r3, #2
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1ee      	bne.n	8008406 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d105      	bne.n	800843a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800842e:	4b3c      	ldr	r3, [pc, #240]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	4a3b      	ldr	r2, [pc, #236]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 8008434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008438:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 80a4 	beq.w	800858c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008444:	4b36      	ldr	r3, [pc, #216]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f003 030c 	and.w	r3, r3, #12
 800844c:	2b08      	cmp	r3, #8
 800844e:	d06b      	beq.n	8008528 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	2b02      	cmp	r3, #2
 8008456:	d149      	bne.n	80084ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008458:	4b31      	ldr	r3, [pc, #196]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a30      	ldr	r2, [pc, #192]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 800845e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008464:	f7fc fda0 	bl	8004fa8 <HAL_GetTick>
 8008468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800846a:	e008      	b.n	800847e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800846c:	f7fc fd9c 	bl	8004fa8 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b02      	cmp	r3, #2
 8008478:	d901      	bls.n	800847e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e087      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800847e:	4b28      	ldr	r3, [pc, #160]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1f0      	bne.n	800846c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	69da      	ldr	r2, [r3, #28]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	431a      	orrs	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	019b      	lsls	r3, r3, #6
 800849a:	431a      	orrs	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a0:	085b      	lsrs	r3, r3, #1
 80084a2:	3b01      	subs	r3, #1
 80084a4:	041b      	lsls	r3, r3, #16
 80084a6:	431a      	orrs	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	061b      	lsls	r3, r3, #24
 80084ae:	4313      	orrs	r3, r2
 80084b0:	4a1b      	ldr	r2, [pc, #108]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80084b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80084b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084b8:	4b19      	ldr	r3, [pc, #100]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a18      	ldr	r2, [pc, #96]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80084be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c4:	f7fc fd70 	bl	8004fa8 <HAL_GetTick>
 80084c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084ca:	e008      	b.n	80084de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084cc:	f7fc fd6c 	bl	8004fa8 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e057      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084de:	4b10      	ldr	r3, [pc, #64]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0f0      	beq.n	80084cc <HAL_RCC_OscConfig+0x478>
 80084ea:	e04f      	b.n	800858c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084ec:	4b0c      	ldr	r3, [pc, #48]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a0b      	ldr	r2, [pc, #44]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 80084f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f8:	f7fc fd56 	bl	8004fa8 <HAL_GetTick>
 80084fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084fe:	e008      	b.n	8008512 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008500:	f7fc fd52 	bl	8004fa8 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b02      	cmp	r3, #2
 800850c:	d901      	bls.n	8008512 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e03d      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008512:	4b03      	ldr	r3, [pc, #12]	; (8008520 <HAL_RCC_OscConfig+0x4cc>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1f0      	bne.n	8008500 <HAL_RCC_OscConfig+0x4ac>
 800851e:	e035      	b.n	800858c <HAL_RCC_OscConfig+0x538>
 8008520:	40023800 	.word	0x40023800
 8008524:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008528:	4b1b      	ldr	r3, [pc, #108]	; (8008598 <HAL_RCC_OscConfig+0x544>)
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d028      	beq.n	8008588 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008540:	429a      	cmp	r2, r3
 8008542:	d121      	bne.n	8008588 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800854e:	429a      	cmp	r2, r3
 8008550:	d11a      	bne.n	8008588 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008558:	4013      	ands	r3, r2
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800855e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008560:	4293      	cmp	r3, r2
 8008562:	d111      	bne.n	8008588 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856e:	085b      	lsrs	r3, r3, #1
 8008570:	3b01      	subs	r3, #1
 8008572:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008574:	429a      	cmp	r2, r3
 8008576:	d107      	bne.n	8008588 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008582:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008584:	429a      	cmp	r2, r3
 8008586:	d001      	beq.n	800858c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e000      	b.n	800858e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3718      	adds	r7, #24
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	40023800 	.word	0x40023800

0800859c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e0d0      	b.n	8008756 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085b4:	4b6a      	ldr	r3, [pc, #424]	; (8008760 <HAL_RCC_ClockConfig+0x1c4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 030f 	and.w	r3, r3, #15
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d910      	bls.n	80085e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085c2:	4b67      	ldr	r3, [pc, #412]	; (8008760 <HAL_RCC_ClockConfig+0x1c4>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f023 020f 	bic.w	r2, r3, #15
 80085ca:	4965      	ldr	r1, [pc, #404]	; (8008760 <HAL_RCC_ClockConfig+0x1c4>)
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085d2:	4b63      	ldr	r3, [pc, #396]	; (8008760 <HAL_RCC_ClockConfig+0x1c4>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 030f 	and.w	r3, r3, #15
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d001      	beq.n	80085e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e0b8      	b.n	8008756 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d020      	beq.n	8008632 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d005      	beq.n	8008608 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085fc:	4b59      	ldr	r3, [pc, #356]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	4a58      	ldr	r2, [pc, #352]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 8008602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008606:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0308 	and.w	r3, r3, #8
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008614:	4b53      	ldr	r3, [pc, #332]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	4a52      	ldr	r2, [pc, #328]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 800861a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800861e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008620:	4b50      	ldr	r3, [pc, #320]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	494d      	ldr	r1, [pc, #308]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 800862e:	4313      	orrs	r3, r2
 8008630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d040      	beq.n	80086c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d107      	bne.n	8008656 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008646:	4b47      	ldr	r3, [pc, #284]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d115      	bne.n	800867e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e07f      	b.n	8008756 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	2b02      	cmp	r3, #2
 800865c:	d107      	bne.n	800866e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800865e:	4b41      	ldr	r3, [pc, #260]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d109      	bne.n	800867e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e073      	b.n	8008756 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800866e:	4b3d      	ldr	r3, [pc, #244]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d101      	bne.n	800867e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e06b      	b.n	8008756 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800867e:	4b39      	ldr	r3, [pc, #228]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f023 0203 	bic.w	r2, r3, #3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	4936      	ldr	r1, [pc, #216]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 800868c:	4313      	orrs	r3, r2
 800868e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008690:	f7fc fc8a 	bl	8004fa8 <HAL_GetTick>
 8008694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008696:	e00a      	b.n	80086ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008698:	f7fc fc86 	bl	8004fa8 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e053      	b.n	8008756 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ae:	4b2d      	ldr	r3, [pc, #180]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 020c 	and.w	r2, r3, #12
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	429a      	cmp	r2, r3
 80086be:	d1eb      	bne.n	8008698 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80086c0:	4b27      	ldr	r3, [pc, #156]	; (8008760 <HAL_RCC_ClockConfig+0x1c4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 030f 	and.w	r3, r3, #15
 80086c8:	683a      	ldr	r2, [r7, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d210      	bcs.n	80086f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ce:	4b24      	ldr	r3, [pc, #144]	; (8008760 <HAL_RCC_ClockConfig+0x1c4>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f023 020f 	bic.w	r2, r3, #15
 80086d6:	4922      	ldr	r1, [pc, #136]	; (8008760 <HAL_RCC_ClockConfig+0x1c4>)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	4313      	orrs	r3, r2
 80086dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086de:	4b20      	ldr	r3, [pc, #128]	; (8008760 <HAL_RCC_ClockConfig+0x1c4>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 030f 	and.w	r3, r3, #15
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d001      	beq.n	80086f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e032      	b.n	8008756 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0304 	and.w	r3, r3, #4
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d008      	beq.n	800870e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086fc:	4b19      	ldr	r3, [pc, #100]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	4916      	ldr	r1, [pc, #88]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 800870a:	4313      	orrs	r3, r2
 800870c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	2b00      	cmp	r3, #0
 8008718:	d009      	beq.n	800872e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800871a:	4b12      	ldr	r3, [pc, #72]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	490e      	ldr	r1, [pc, #56]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 800872a:	4313      	orrs	r3, r2
 800872c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800872e:	f000 f821 	bl	8008774 <HAL_RCC_GetSysClockFreq>
 8008732:	4602      	mov	r2, r0
 8008734:	4b0b      	ldr	r3, [pc, #44]	; (8008764 <HAL_RCC_ClockConfig+0x1c8>)
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	091b      	lsrs	r3, r3, #4
 800873a:	f003 030f 	and.w	r3, r3, #15
 800873e:	490a      	ldr	r1, [pc, #40]	; (8008768 <HAL_RCC_ClockConfig+0x1cc>)
 8008740:	5ccb      	ldrb	r3, [r1, r3]
 8008742:	fa22 f303 	lsr.w	r3, r2, r3
 8008746:	4a09      	ldr	r2, [pc, #36]	; (800876c <HAL_RCC_ClockConfig+0x1d0>)
 8008748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800874a:	4b09      	ldr	r3, [pc, #36]	; (8008770 <HAL_RCC_ClockConfig+0x1d4>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4618      	mov	r0, r3
 8008750:	f7fc fb1c 	bl	8004d8c <HAL_InitTick>

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	40023c00 	.word	0x40023c00
 8008764:	40023800 	.word	0x40023800
 8008768:	080343c0 	.word	0x080343c0
 800876c:	20000040 	.word	0x20000040
 8008770:	20000044 	.word	0x20000044

08008774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008774:	b5b0      	push	{r4, r5, r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800877a:	2100      	movs	r1, #0
 800877c:	6079      	str	r1, [r7, #4]
 800877e:	2100      	movs	r1, #0
 8008780:	60f9      	str	r1, [r7, #12]
 8008782:	2100      	movs	r1, #0
 8008784:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008786:	2100      	movs	r1, #0
 8008788:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800878a:	4952      	ldr	r1, [pc, #328]	; (80088d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800878c:	6889      	ldr	r1, [r1, #8]
 800878e:	f001 010c 	and.w	r1, r1, #12
 8008792:	2908      	cmp	r1, #8
 8008794:	d00d      	beq.n	80087b2 <HAL_RCC_GetSysClockFreq+0x3e>
 8008796:	2908      	cmp	r1, #8
 8008798:	f200 8094 	bhi.w	80088c4 <HAL_RCC_GetSysClockFreq+0x150>
 800879c:	2900      	cmp	r1, #0
 800879e:	d002      	beq.n	80087a6 <HAL_RCC_GetSysClockFreq+0x32>
 80087a0:	2904      	cmp	r1, #4
 80087a2:	d003      	beq.n	80087ac <HAL_RCC_GetSysClockFreq+0x38>
 80087a4:	e08e      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80087a6:	4b4c      	ldr	r3, [pc, #304]	; (80088d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80087a8:	60bb      	str	r3, [r7, #8]
      break;
 80087aa:	e08e      	b.n	80088ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80087ac:	4b4b      	ldr	r3, [pc, #300]	; (80088dc <HAL_RCC_GetSysClockFreq+0x168>)
 80087ae:	60bb      	str	r3, [r7, #8]
      break;
 80087b0:	e08b      	b.n	80088ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087b2:	4948      	ldr	r1, [pc, #288]	; (80088d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80087b4:	6849      	ldr	r1, [r1, #4]
 80087b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80087ba:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80087bc:	4945      	ldr	r1, [pc, #276]	; (80088d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80087be:	6849      	ldr	r1, [r1, #4]
 80087c0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80087c4:	2900      	cmp	r1, #0
 80087c6:	d024      	beq.n	8008812 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087c8:	4942      	ldr	r1, [pc, #264]	; (80088d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80087ca:	6849      	ldr	r1, [r1, #4]
 80087cc:	0989      	lsrs	r1, r1, #6
 80087ce:	4608      	mov	r0, r1
 80087d0:	f04f 0100 	mov.w	r1, #0
 80087d4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80087d8:	f04f 0500 	mov.w	r5, #0
 80087dc:	ea00 0204 	and.w	r2, r0, r4
 80087e0:	ea01 0305 	and.w	r3, r1, r5
 80087e4:	493d      	ldr	r1, [pc, #244]	; (80088dc <HAL_RCC_GetSysClockFreq+0x168>)
 80087e6:	fb01 f003 	mul.w	r0, r1, r3
 80087ea:	2100      	movs	r1, #0
 80087ec:	fb01 f102 	mul.w	r1, r1, r2
 80087f0:	1844      	adds	r4, r0, r1
 80087f2:	493a      	ldr	r1, [pc, #232]	; (80088dc <HAL_RCC_GetSysClockFreq+0x168>)
 80087f4:	fba2 0101 	umull	r0, r1, r2, r1
 80087f8:	1863      	adds	r3, r4, r1
 80087fa:	4619      	mov	r1, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	461a      	mov	r2, r3
 8008800:	f04f 0300 	mov.w	r3, #0
 8008804:	f7f7 fd04 	bl	8000210 <__aeabi_uldivmod>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4613      	mov	r3, r2
 800880e:	60fb      	str	r3, [r7, #12]
 8008810:	e04a      	b.n	80088a8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008812:	4b30      	ldr	r3, [pc, #192]	; (80088d4 <HAL_RCC_GetSysClockFreq+0x160>)
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	099b      	lsrs	r3, r3, #6
 8008818:	461a      	mov	r2, r3
 800881a:	f04f 0300 	mov.w	r3, #0
 800881e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008822:	f04f 0100 	mov.w	r1, #0
 8008826:	ea02 0400 	and.w	r4, r2, r0
 800882a:	ea03 0501 	and.w	r5, r3, r1
 800882e:	4620      	mov	r0, r4
 8008830:	4629      	mov	r1, r5
 8008832:	f04f 0200 	mov.w	r2, #0
 8008836:	f04f 0300 	mov.w	r3, #0
 800883a:	014b      	lsls	r3, r1, #5
 800883c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008840:	0142      	lsls	r2, r0, #5
 8008842:	4610      	mov	r0, r2
 8008844:	4619      	mov	r1, r3
 8008846:	1b00      	subs	r0, r0, r4
 8008848:	eb61 0105 	sbc.w	r1, r1, r5
 800884c:	f04f 0200 	mov.w	r2, #0
 8008850:	f04f 0300 	mov.w	r3, #0
 8008854:	018b      	lsls	r3, r1, #6
 8008856:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800885a:	0182      	lsls	r2, r0, #6
 800885c:	1a12      	subs	r2, r2, r0
 800885e:	eb63 0301 	sbc.w	r3, r3, r1
 8008862:	f04f 0000 	mov.w	r0, #0
 8008866:	f04f 0100 	mov.w	r1, #0
 800886a:	00d9      	lsls	r1, r3, #3
 800886c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008870:	00d0      	lsls	r0, r2, #3
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	1912      	adds	r2, r2, r4
 8008878:	eb45 0303 	adc.w	r3, r5, r3
 800887c:	f04f 0000 	mov.w	r0, #0
 8008880:	f04f 0100 	mov.w	r1, #0
 8008884:	0299      	lsls	r1, r3, #10
 8008886:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800888a:	0290      	lsls	r0, r2, #10
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4610      	mov	r0, r2
 8008892:	4619      	mov	r1, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	461a      	mov	r2, r3
 8008898:	f04f 0300 	mov.w	r3, #0
 800889c:	f7f7 fcb8 	bl	8000210 <__aeabi_uldivmod>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4613      	mov	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80088a8:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	0c1b      	lsrs	r3, r3, #16
 80088ae:	f003 0303 	and.w	r3, r3, #3
 80088b2:	3301      	adds	r3, #1
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c0:	60bb      	str	r3, [r7, #8]
      break;
 80088c2:	e002      	b.n	80088ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088c4:	4b04      	ldr	r3, [pc, #16]	; (80088d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80088c6:	60bb      	str	r3, [r7, #8]
      break;
 80088c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088ca:	68bb      	ldr	r3, [r7, #8]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bdb0      	pop	{r4, r5, r7, pc}
 80088d4:	40023800 	.word	0x40023800
 80088d8:	00f42400 	.word	0x00f42400
 80088dc:	017d7840 	.word	0x017d7840

080088e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088e0:	b480      	push	{r7}
 80088e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088e4:	4b03      	ldr	r3, [pc, #12]	; (80088f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80088e6:	681b      	ldr	r3, [r3, #0]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20000040 	.word	0x20000040

080088f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80088fc:	f7ff fff0 	bl	80088e0 <HAL_RCC_GetHCLKFreq>
 8008900:	4602      	mov	r2, r0
 8008902:	4b05      	ldr	r3, [pc, #20]	; (8008918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	0a9b      	lsrs	r3, r3, #10
 8008908:	f003 0307 	and.w	r3, r3, #7
 800890c:	4903      	ldr	r1, [pc, #12]	; (800891c <HAL_RCC_GetPCLK1Freq+0x24>)
 800890e:	5ccb      	ldrb	r3, [r1, r3]
 8008910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008914:	4618      	mov	r0, r3
 8008916:	bd80      	pop	{r7, pc}
 8008918:	40023800 	.word	0x40023800
 800891c:	080343d0 	.word	0x080343d0

08008920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008924:	f7ff ffdc 	bl	80088e0 <HAL_RCC_GetHCLKFreq>
 8008928:	4602      	mov	r2, r0
 800892a:	4b05      	ldr	r3, [pc, #20]	; (8008940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	0b5b      	lsrs	r3, r3, #13
 8008930:	f003 0307 	and.w	r3, r3, #7
 8008934:	4903      	ldr	r1, [pc, #12]	; (8008944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008936:	5ccb      	ldrb	r3, [r1, r3]
 8008938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800893c:	4618      	mov	r0, r3
 800893e:	bd80      	pop	{r7, pc}
 8008940:	40023800 	.word	0x40023800
 8008944:	080343d0 	.word	0x080343d0

08008948 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	220f      	movs	r2, #15
 8008956:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008958:	4b12      	ldr	r3, [pc, #72]	; (80089a4 <HAL_RCC_GetClockConfig+0x5c>)
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f003 0203 	and.w	r2, r3, #3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008964:	4b0f      	ldr	r3, [pc, #60]	; (80089a4 <HAL_RCC_GetClockConfig+0x5c>)
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008970:	4b0c      	ldr	r3, [pc, #48]	; (80089a4 <HAL_RCC_GetClockConfig+0x5c>)
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800897c:	4b09      	ldr	r3, [pc, #36]	; (80089a4 <HAL_RCC_GetClockConfig+0x5c>)
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	08db      	lsrs	r3, r3, #3
 8008982:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800898a:	4b07      	ldr	r3, [pc, #28]	; (80089a8 <HAL_RCC_GetClockConfig+0x60>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 020f 	and.w	r2, r3, #15
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	601a      	str	r2, [r3, #0]
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	40023800 	.word	0x40023800
 80089a8:	40023c00 	.word	0x40023c00

080089ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80089b8:	2300      	movs	r3, #0
 80089ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d012      	beq.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80089d4:	4b69      	ldr	r3, [pc, #420]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	4a68      	ldr	r2, [pc, #416]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80089de:	6093      	str	r3, [r2, #8]
 80089e0:	4b66      	ldr	r3, [pc, #408]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e8:	4964      	ldr	r1, [pc, #400]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80089f6:	2301      	movs	r3, #1
 80089f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d017      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a06:	4b5d      	ldr	r3, [pc, #372]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a14:	4959      	ldr	r1, [pc, #356]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a24:	d101      	bne.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008a26:	2301      	movs	r3, #1
 8008a28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008a32:	2301      	movs	r3, #1
 8008a34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d017      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008a42:	4b4e      	ldr	r3, [pc, #312]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a50:	494a      	ldr	r1, [pc, #296]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a60:	d101      	bne.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008a62:	2301      	movs	r3, #1
 8008a64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d001      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 808b 	beq.w	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a90:	4b3a      	ldr	r3, [pc, #232]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a94:	4a39      	ldr	r2, [pc, #228]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8008a9c:	4b37      	ldr	r3, [pc, #220]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aa4:	60bb      	str	r3, [r7, #8]
 8008aa6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008aa8:	4b35      	ldr	r3, [pc, #212]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a34      	ldr	r2, [pc, #208]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ab4:	f7fc fa78 	bl	8004fa8 <HAL_GetTick>
 8008ab8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008aba:	e008      	b.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008abc:	f7fc fa74 	bl	8004fa8 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b64      	cmp	r3, #100	; 0x64
 8008ac8:	d901      	bls.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e357      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008ace:	4b2c      	ldr	r3, [pc, #176]	; (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0f0      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008ada:	4b28      	ldr	r3, [pc, #160]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ae2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d035      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d02e      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008af8:	4b20      	ldr	r3, [pc, #128]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008b02:	4b1e      	ldr	r3, [pc, #120]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b06:	4a1d      	ldr	r2, [pc, #116]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008b0e:	4b1b      	ldr	r3, [pc, #108]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b12:	4a1a      	ldr	r2, [pc, #104]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008b1a:	4a18      	ldr	r2, [pc, #96]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008b20:	4b16      	ldr	r3, [pc, #88]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d114      	bne.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2c:	f7fc fa3c 	bl	8004fa8 <HAL_GetTick>
 8008b30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b32:	e00a      	b.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b34:	f7fc fa38 	bl	8004fa8 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d901      	bls.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e319      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b4a:	4b0c      	ldr	r3, [pc, #48]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0ee      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b62:	d111      	bne.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008b70:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008b72:	400b      	ands	r3, r1
 8008b74:	4901      	ldr	r1, [pc, #4]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b76:	4313      	orrs	r3, r2
 8008b78:	608b      	str	r3, [r1, #8]
 8008b7a:	e00b      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008b7c:	40023800 	.word	0x40023800
 8008b80:	40007000 	.word	0x40007000
 8008b84:	0ffffcff 	.word	0x0ffffcff
 8008b88:	4bb1      	ldr	r3, [pc, #708]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	4ab0      	ldr	r2, [pc, #704]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008b8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008b92:	6093      	str	r3, [r2, #8]
 8008b94:	4bae      	ldr	r3, [pc, #696]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008b96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ba0:	49ab      	ldr	r1, [pc, #684]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0310 	and.w	r3, r3, #16
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d010      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008bb2:	4ba7      	ldr	r3, [pc, #668]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bb8:	4aa5      	ldr	r2, [pc, #660]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008bc2:	4ba3      	ldr	r3, [pc, #652]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008bc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	49a0      	ldr	r1, [pc, #640]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00a      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008be0:	4b9b      	ldr	r3, [pc, #620]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008be6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bee:	4998      	ldr	r1, [pc, #608]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00a      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008c02:	4b93      	ldr	r3, [pc, #588]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c10:	498f      	ldr	r1, [pc, #572]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00a      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008c24:	4b8a      	ldr	r3, [pc, #552]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c32:	4987      	ldr	r1, [pc, #540]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c34:	4313      	orrs	r3, r2
 8008c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00a      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c46:	4b82      	ldr	r3, [pc, #520]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c54:	497e      	ldr	r1, [pc, #504]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c56:	4313      	orrs	r3, r2
 8008c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00a      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008c68:	4b79      	ldr	r3, [pc, #484]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c6e:	f023 0203 	bic.w	r2, r3, #3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c76:	4976      	ldr	r1, [pc, #472]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00a      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c8a:	4b71      	ldr	r3, [pc, #452]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c90:	f023 020c 	bic.w	r2, r3, #12
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c98:	496d      	ldr	r1, [pc, #436]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00a      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008cac:	4b68      	ldr	r3, [pc, #416]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cba:	4965      	ldr	r1, [pc, #404]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00a      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008cce:	4b60      	ldr	r3, [pc, #384]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cdc:	495c      	ldr	r1, [pc, #368]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00a      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008cf0:	4b57      	ldr	r3, [pc, #348]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfe:	4954      	ldr	r1, [pc, #336]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00a      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008d12:	4b4f      	ldr	r3, [pc, #316]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d20:	494b      	ldr	r1, [pc, #300]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00a      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008d34:	4b46      	ldr	r3, [pc, #280]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d42:	4943      	ldr	r1, [pc, #268]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00a      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008d56:	4b3e      	ldr	r3, [pc, #248]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d64:	493a      	ldr	r1, [pc, #232]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00a      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d78:	4b35      	ldr	r3, [pc, #212]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d86:	4932      	ldr	r1, [pc, #200]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d011      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008d9a:	4b2d      	ldr	r3, [pc, #180]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008da0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008da8:	4929      	ldr	r1, [pc, #164]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008db8:	d101      	bne.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0308 	and.w	r3, r3, #8
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00a      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008dda:	4b1d      	ldr	r3, [pc, #116]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008de0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008de8:	4919      	ldr	r1, [pc, #100]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00b      	beq.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008dfc:	4b14      	ldr	r3, [pc, #80]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e0c:	4910      	ldr	r1, [pc, #64]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d006      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 80d9 	beq.w	8008fda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008e28:	4b09      	ldr	r3, [pc, #36]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a08      	ldr	r2, [pc, #32]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e34:	f7fc f8b8 	bl	8004fa8 <HAL_GetTick>
 8008e38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e3a:	e00b      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008e3c:	f7fc f8b4 	bl	8004fa8 <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	2b64      	cmp	r3, #100	; 0x64
 8008e48:	d904      	bls.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e197      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008e4e:	bf00      	nop
 8008e50:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e54:	4b6c      	ldr	r3, [pc, #432]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1ed      	bne.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d021      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d11d      	bne.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008e74:	4b64      	ldr	r3, [pc, #400]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e7a:	0c1b      	lsrs	r3, r3, #16
 8008e7c:	f003 0303 	and.w	r3, r3, #3
 8008e80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008e82:	4b61      	ldr	r3, [pc, #388]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e88:	0e1b      	lsrs	r3, r3, #24
 8008e8a:	f003 030f 	and.w	r3, r3, #15
 8008e8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	019a      	lsls	r2, r3, #6
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	041b      	lsls	r3, r3, #16
 8008e9a:	431a      	orrs	r2, r3
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	061b      	lsls	r3, r3, #24
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	071b      	lsls	r3, r3, #28
 8008ea8:	4957      	ldr	r1, [pc, #348]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d004      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ec4:	d00a      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d02e      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008eda:	d129      	bne.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008edc:	4b4a      	ldr	r3, [pc, #296]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ee2:	0c1b      	lsrs	r3, r3, #16
 8008ee4:	f003 0303 	and.w	r3, r3, #3
 8008ee8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008eea:	4b47      	ldr	r3, [pc, #284]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ef0:	0f1b      	lsrs	r3, r3, #28
 8008ef2:	f003 0307 	and.w	r3, r3, #7
 8008ef6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	019a      	lsls	r2, r3, #6
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	041b      	lsls	r3, r3, #16
 8008f02:	431a      	orrs	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	061b      	lsls	r3, r3, #24
 8008f0a:	431a      	orrs	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	071b      	lsls	r3, r3, #28
 8008f10:	493d      	ldr	r1, [pc, #244]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008f18:	4b3b      	ldr	r3, [pc, #236]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f1e:	f023 021f 	bic.w	r2, r3, #31
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	3b01      	subs	r3, #1
 8008f28:	4937      	ldr	r1, [pc, #220]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d01d      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008f3c:	4b32      	ldr	r3, [pc, #200]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f42:	0e1b      	lsrs	r3, r3, #24
 8008f44:	f003 030f 	and.w	r3, r3, #15
 8008f48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f4a:	4b2f      	ldr	r3, [pc, #188]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f50:	0f1b      	lsrs	r3, r3, #28
 8008f52:	f003 0307 	and.w	r3, r3, #7
 8008f56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	019a      	lsls	r2, r3, #6
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	041b      	lsls	r3, r3, #16
 8008f64:	431a      	orrs	r2, r3
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	061b      	lsls	r3, r3, #24
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	071b      	lsls	r3, r3, #28
 8008f70:	4925      	ldr	r1, [pc, #148]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f72:	4313      	orrs	r3, r2
 8008f74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d011      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	019a      	lsls	r2, r3, #6
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	041b      	lsls	r3, r3, #16
 8008f90:	431a      	orrs	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	061b      	lsls	r3, r3, #24
 8008f98:	431a      	orrs	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	071b      	lsls	r3, r3, #28
 8008fa0:	4919      	ldr	r1, [pc, #100]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008fa8:	4b17      	ldr	r3, [pc, #92]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a16      	ldr	r2, [pc, #88]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fb4:	f7fb fff8 	bl	8004fa8 <HAL_GetTick>
 8008fb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008fba:	e008      	b.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008fbc:	f7fb fff4 	bl	8004fa8 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	2b64      	cmp	r3, #100	; 0x64
 8008fc8:	d901      	bls.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e0d7      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008fce:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0f0      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	f040 80cd 	bne.w	800917c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008fe2:	4b09      	ldr	r3, [pc, #36]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a08      	ldr	r2, [pc, #32]	; (8009008 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fee:	f7fb ffdb 	bl	8004fa8 <HAL_GetTick>
 8008ff2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008ff4:	e00a      	b.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008ff6:	f7fb ffd7 	bl	8004fa8 <HAL_GetTick>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	1ad3      	subs	r3, r2, r3
 8009000:	2b64      	cmp	r3, #100	; 0x64
 8009002:	d903      	bls.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e0ba      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009008:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800900c:	4b5e      	ldr	r3, [pc, #376]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009018:	d0ed      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902a:	2b00      	cmp	r3, #0
 800902c:	d009      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009036:	2b00      	cmp	r3, #0
 8009038:	d02e      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	2b00      	cmp	r3, #0
 8009040:	d12a      	bne.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009042:	4b51      	ldr	r3, [pc, #324]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009048:	0c1b      	lsrs	r3, r3, #16
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009050:	4b4d      	ldr	r3, [pc, #308]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009056:	0f1b      	lsrs	r3, r3, #28
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	019a      	lsls	r2, r3, #6
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	041b      	lsls	r3, r3, #16
 8009068:	431a      	orrs	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	061b      	lsls	r3, r3, #24
 8009070:	431a      	orrs	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	071b      	lsls	r3, r3, #28
 8009076:	4944      	ldr	r1, [pc, #272]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009078:	4313      	orrs	r3, r2
 800907a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800907e:	4b42      	ldr	r3, [pc, #264]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009084:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908c:	3b01      	subs	r3, #1
 800908e:	021b      	lsls	r3, r3, #8
 8009090:	493d      	ldr	r1, [pc, #244]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009092:	4313      	orrs	r3, r2
 8009094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d022      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090ac:	d11d      	bne.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80090ae:	4b36      	ldr	r3, [pc, #216]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090b4:	0e1b      	lsrs	r3, r3, #24
 80090b6:	f003 030f 	and.w	r3, r3, #15
 80090ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80090bc:	4b32      	ldr	r3, [pc, #200]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c2:	0f1b      	lsrs	r3, r3, #28
 80090c4:	f003 0307 	and.w	r3, r3, #7
 80090c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	019a      	lsls	r2, r3, #6
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	041b      	lsls	r3, r3, #16
 80090d6:	431a      	orrs	r2, r3
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	061b      	lsls	r3, r3, #24
 80090dc:	431a      	orrs	r2, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	071b      	lsls	r3, r3, #28
 80090e2:	4929      	ldr	r1, [pc, #164]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090e4:	4313      	orrs	r3, r2
 80090e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0308 	and.w	r3, r3, #8
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d028      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80090f6:	4b24      	ldr	r3, [pc, #144]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80090f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090fc:	0e1b      	lsrs	r3, r3, #24
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009104:	4b20      	ldr	r3, [pc, #128]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800910a:	0c1b      	lsrs	r3, r3, #16
 800910c:	f003 0303 	and.w	r3, r3, #3
 8009110:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	019a      	lsls	r2, r3, #6
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	041b      	lsls	r3, r3, #16
 800911c:	431a      	orrs	r2, r3
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	061b      	lsls	r3, r3, #24
 8009122:	431a      	orrs	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	071b      	lsls	r3, r3, #28
 800912a:	4917      	ldr	r1, [pc, #92]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800912c:	4313      	orrs	r3, r2
 800912e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009132:	4b15      	ldr	r3, [pc, #84]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009138:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009140:	4911      	ldr	r1, [pc, #68]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009142:	4313      	orrs	r3, r2
 8009144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009148:	4b0f      	ldr	r3, [pc, #60]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a0e      	ldr	r2, [pc, #56]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800914e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009154:	f7fb ff28 	bl	8004fa8 <HAL_GetTick>
 8009158:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800915a:	e008      	b.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800915c:	f7fb ff24 	bl	8004fa8 <HAL_GetTick>
 8009160:	4602      	mov	r2, r0
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	1ad3      	subs	r3, r2, r3
 8009166:	2b64      	cmp	r3, #100	; 0x64
 8009168:	d901      	bls.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800916a:	2303      	movs	r3, #3
 800916c:	e007      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800916e:	4b06      	ldr	r3, [pc, #24]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800917a:	d1ef      	bne.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3720      	adds	r7, #32
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	40023800 	.word	0x40023800

0800918c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e081      	b.n	80092a2 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	7f5b      	ldrb	r3, [r3, #29]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d105      	bne.n	80091b4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7fb fb18 	bl	80047e4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2202      	movs	r2, #2
 80091b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	22ca      	movs	r2, #202	; 0xca
 80091c0:	625a      	str	r2, [r3, #36]	; 0x24
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2253      	movs	r2, #83	; 0x53
 80091c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fb16 	bl	80097fc <RTC_EnterInitMode>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d008      	beq.n	80091e8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	22ff      	movs	r2, #255	; 0xff
 80091dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2204      	movs	r2, #4
 80091e2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80091e4:	2301      	movs	r3, #1
 80091e6:	e05c      	b.n	80092a2 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6899      	ldr	r1, [r3, #8]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	4b2e      	ldr	r3, [pc, #184]	; (80092ac <HAL_RTC_Init+0x120>)
 80091f4:	400b      	ands	r3, r1
 80091f6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6899      	ldr	r1, [r3, #8]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	431a      	orrs	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	431a      	orrs	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	430a      	orrs	r2, r1
 8009214:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	68d2      	ldr	r2, [r2, #12]
 800921e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6919      	ldr	r1, [r3, #16]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	041a      	lsls	r2, r3, #16
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	430a      	orrs	r2, r1
 8009232:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68da      	ldr	r2, [r3, #12]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009242:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f003 0320 	and.w	r3, r3, #32
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10e      	bne.n	8009270 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 faaa 	bl	80097ac <HAL_RTC_WaitForSynchro>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d008      	beq.n	8009270 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	22ff      	movs	r2, #255	; 0xff
 8009264:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2204      	movs	r2, #4
 800926a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800926c:	2301      	movs	r3, #1
 800926e:	e018      	b.n	80092a2 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f022 0208 	bic.w	r2, r2, #8
 800927e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	699a      	ldr	r2, [r3, #24]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	22ff      	movs	r2, #255	; 0xff
 8009298:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80092a0:	2300      	movs	r3, #0
  }
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	ff8fffbf 	.word	0xff8fffbf

080092b0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80092b0:	b590      	push	{r4, r7, lr}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	7f1b      	ldrb	r3, [r3, #28]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d101      	bne.n	80092cc <HAL_RTC_SetTime+0x1c>
 80092c8:	2302      	movs	r3, #2
 80092ca:	e0a8      	b.n	800941e <HAL_RTC_SetTime+0x16e>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2201      	movs	r2, #1
 80092d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2202      	movs	r2, #2
 80092d6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d126      	bne.n	800932c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d102      	bne.n	80092f2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2200      	movs	r2, #0
 80092f0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 faac 	bl	8009854 <RTC_ByteToBcd2>
 80092fc:	4603      	mov	r3, r0
 80092fe:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	785b      	ldrb	r3, [r3, #1]
 8009304:	4618      	mov	r0, r3
 8009306:	f000 faa5 	bl	8009854 <RTC_ByteToBcd2>
 800930a:	4603      	mov	r3, r0
 800930c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800930e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	789b      	ldrb	r3, [r3, #2]
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fa9d 	bl	8009854 <RTC_ByteToBcd2>
 800931a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800931c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	7b1b      	ldrb	r3, [r3, #12]
 8009324:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009326:	4313      	orrs	r3, r2
 8009328:	617b      	str	r3, [r7, #20]
 800932a:	e018      	b.n	800935e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009336:	2b00      	cmp	r3, #0
 8009338:	d102      	bne.n	8009340 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2200      	movs	r2, #0
 800933e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	785b      	ldrb	r3, [r3, #1]
 800934a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800934c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009352:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	7b1b      	ldrb	r3, [r3, #12]
 8009358:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800935a:	4313      	orrs	r3, r2
 800935c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	22ca      	movs	r2, #202	; 0xca
 8009364:	625a      	str	r2, [r3, #36]	; 0x24
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	2253      	movs	r2, #83	; 0x53
 800936c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 fa44 	bl	80097fc <RTC_EnterInitMode>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00b      	beq.n	8009392 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	22ff      	movs	r2, #255	; 0xff
 8009380:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2204      	movs	r2, #4
 8009386:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e045      	b.n	800941e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	6979      	ldr	r1, [r7, #20]
 8009398:	4b23      	ldr	r3, [pc, #140]	; (8009428 <HAL_RTC_SetTime+0x178>)
 800939a:	400b      	ands	r3, r1
 800939c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	689a      	ldr	r2, [r3, #8]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80093ac:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6899      	ldr	r1, [r3, #8]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	691a      	ldr	r2, [r3, #16]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	431a      	orrs	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68da      	ldr	r2, [r3, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093d4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f003 0320 	and.w	r3, r3, #32
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d111      	bne.n	8009408 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 f9e1 	bl	80097ac <HAL_RTC_WaitForSynchro>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00b      	beq.n	8009408 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	22ff      	movs	r2, #255	; 0xff
 80093f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2204      	movs	r2, #4
 80093fc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e00a      	b.n	800941e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	22ff      	movs	r2, #255	; 0xff
 800940e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2201      	movs	r2, #1
 8009414:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800941c:	2300      	movs	r3, #0
  }
}
 800941e:	4618      	mov	r0, r3
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	bd90      	pop	{r4, r7, pc}
 8009426:	bf00      	nop
 8009428:	007f7f7f 	.word	0x007f7f7f

0800942c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800942c:	b590      	push	{r4, r7, lr}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	7f1b      	ldrb	r3, [r3, #28]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_RTC_SetDate+0x1c>
 8009444:	2302      	movs	r3, #2
 8009446:	e092      	b.n	800956e <HAL_RTC_SetDate+0x142>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2201      	movs	r2, #1
 800944c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2202      	movs	r2, #2
 8009452:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10e      	bne.n	8009478 <HAL_RTC_SetDate+0x4c>
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	785b      	ldrb	r3, [r3, #1]
 800945e:	f003 0310 	and.w	r3, r3, #16
 8009462:	2b00      	cmp	r3, #0
 8009464:	d008      	beq.n	8009478 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	785b      	ldrb	r3, [r3, #1]
 800946a:	f023 0310 	bic.w	r3, r3, #16
 800946e:	b2db      	uxtb	r3, r3
 8009470:	330a      	adds	r3, #10
 8009472:	b2da      	uxtb	r2, r3
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d11c      	bne.n	80094b8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	78db      	ldrb	r3, [r3, #3]
 8009482:	4618      	mov	r0, r3
 8009484:	f000 f9e6 	bl	8009854 <RTC_ByteToBcd2>
 8009488:	4603      	mov	r3, r0
 800948a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	785b      	ldrb	r3, [r3, #1]
 8009490:	4618      	mov	r0, r3
 8009492:	f000 f9df 	bl	8009854 <RTC_ByteToBcd2>
 8009496:	4603      	mov	r3, r0
 8009498:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800949a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	789b      	ldrb	r3, [r3, #2]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 f9d7 	bl	8009854 <RTC_ByteToBcd2>
 80094a6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80094a8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80094b2:	4313      	orrs	r3, r2
 80094b4:	617b      	str	r3, [r7, #20]
 80094b6:	e00e      	b.n	80094d6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	78db      	ldrb	r3, [r3, #3]
 80094bc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	785b      	ldrb	r3, [r3, #1]
 80094c2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80094c4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80094ca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80094d2:	4313      	orrs	r3, r2
 80094d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	22ca      	movs	r2, #202	; 0xca
 80094dc:	625a      	str	r2, [r3, #36]	; 0x24
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2253      	movs	r2, #83	; 0x53
 80094e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 f988 	bl	80097fc <RTC_EnterInitMode>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00b      	beq.n	800950a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	22ff      	movs	r2, #255	; 0xff
 80094f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2204      	movs	r2, #4
 80094fe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e031      	b.n	800956e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	6979      	ldr	r1, [r7, #20]
 8009510:	4b19      	ldr	r3, [pc, #100]	; (8009578 <HAL_RTC_SetDate+0x14c>)
 8009512:	400b      	ands	r3, r1
 8009514:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68da      	ldr	r2, [r3, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009524:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	f003 0320 	and.w	r3, r3, #32
 8009530:	2b00      	cmp	r3, #0
 8009532:	d111      	bne.n	8009558 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 f939 	bl	80097ac <HAL_RTC_WaitForSynchro>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00b      	beq.n	8009558 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	22ff      	movs	r2, #255	; 0xff
 8009546:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2204      	movs	r2, #4
 800954c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e00a      	b.n	800956e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	22ff      	movs	r2, #255	; 0xff
 800955e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2201      	movs	r2, #1
 8009564:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800956c:	2300      	movs	r3, #0
  }
}
 800956e:	4618      	mov	r0, r3
 8009570:	371c      	adds	r7, #28
 8009572:	46bd      	mov	sp, r7
 8009574:	bd90      	pop	{r4, r7, pc}
 8009576:	bf00      	nop
 8009578:	00ffff3f 	.word	0x00ffff3f

0800957c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800957c:	b590      	push	{r4, r7, lr}
 800957e:	b089      	sub	sp, #36	; 0x24
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009588:	2300      	movs	r3, #0
 800958a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	61fb      	str	r3, [r7, #28]
 8009590:	2300      	movs	r3, #0
 8009592:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	7f1b      	ldrb	r3, [r3, #28]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d101      	bne.n	80095a0 <HAL_RTC_SetAlarm+0x24>
 800959c:	2302      	movs	r3, #2
 800959e:	e101      	b.n	80097a4 <HAL_RTC_SetAlarm+0x228>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2201      	movs	r2, #1
 80095a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2202      	movs	r2, #2
 80095aa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d137      	bne.n	8009622 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2200      	movs	r2, #0
 80095c4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 f942 	bl	8009854 <RTC_ByteToBcd2>
 80095d0:	4603      	mov	r3, r0
 80095d2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	785b      	ldrb	r3, [r3, #1]
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 f93b 	bl	8009854 <RTC_ByteToBcd2>
 80095de:	4603      	mov	r3, r0
 80095e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80095e2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	789b      	ldrb	r3, [r3, #2]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 f933 	bl	8009854 <RTC_ByteToBcd2>
 80095ee:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80095f0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	7b1b      	ldrb	r3, [r3, #12]
 80095f8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80095fa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009604:	4618      	mov	r0, r3
 8009606:	f000 f925 	bl	8009854 <RTC_ByteToBcd2>
 800960a:	4603      	mov	r3, r0
 800960c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800960e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009616:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800961c:	4313      	orrs	r3, r2
 800961e:	61fb      	str	r3, [r7, #28]
 8009620:	e023      	b.n	800966a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962c:	2b00      	cmp	r3, #0
 800962e:	d102      	bne.n	8009636 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	2200      	movs	r2, #0
 8009634:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	785b      	ldrb	r3, [r3, #1]
 8009640:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009642:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009648:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	7b1b      	ldrb	r3, [r3, #12]
 800964e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009650:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009658:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800965a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009660:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009666:	4313      	orrs	r3, r2
 8009668:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	4313      	orrs	r3, r2
 8009674:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	22ca      	movs	r2, #202	; 0xca
 800967c:	625a      	str	r2, [r3, #36]	; 0x24
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2253      	movs	r2, #83	; 0x53
 8009684:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800968e:	d13f      	bne.n	8009710 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689a      	ldr	r2, [r3, #8]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800969e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689a      	ldr	r2, [r3, #8]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80096ae:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80096b0:	f7fb fc7a 	bl	8004fa8 <HAL_GetTick>
 80096b4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80096b6:	e013      	b.n	80096e0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80096b8:	f7fb fc76 	bl	8004fa8 <HAL_GetTick>
 80096bc:	4602      	mov	r2, r0
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096c6:	d90b      	bls.n	80096e0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	22ff      	movs	r2, #255	; 0xff
 80096ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2203      	movs	r2, #3
 80096d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e061      	b.n	80097a4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d0e4      	beq.n	80096b8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	69fa      	ldr	r2, [r7, #28]
 80096f4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689a      	ldr	r2, [r3, #8]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800970c:	609a      	str	r2, [r3, #8]
 800970e:	e03e      	b.n	800978e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800971e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689a      	ldr	r2, [r3, #8]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800972e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009730:	f7fb fc3a 	bl	8004fa8 <HAL_GetTick>
 8009734:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009736:	e013      	b.n	8009760 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009738:	f7fb fc36 	bl	8004fa8 <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009746:	d90b      	bls.n	8009760 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	22ff      	movs	r2, #255	; 0xff
 800974e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2203      	movs	r2, #3
 8009754:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e021      	b.n	80097a4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0e4      	beq.n	8009738 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	69fa      	ldr	r2, [r7, #28]
 8009774:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	689a      	ldr	r2, [r3, #8]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800978c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	22ff      	movs	r2, #255	; 0xff
 8009794:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2201      	movs	r2, #1
 800979a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3724      	adds	r7, #36	; 0x24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd90      	pop	{r4, r7, pc}

080097ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80097b4:	2300      	movs	r3, #0
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80097c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80097c8:	f7fb fbee 	bl	8004fa8 <HAL_GetTick>
 80097cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80097ce:	e009      	b.n	80097e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80097d0:	f7fb fbea 	bl	8004fa8 <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097de:	d901      	bls.n	80097e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e007      	b.n	80097f4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	f003 0320 	and.w	r3, r3, #32
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0ee      	beq.n	80097d0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009812:	2b00      	cmp	r3, #0
 8009814:	d119      	bne.n	800984a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f04f 32ff 	mov.w	r2, #4294967295
 800981e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009820:	f7fb fbc2 	bl	8004fa8 <HAL_GetTick>
 8009824:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009826:	e009      	b.n	800983c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009828:	f7fb fbbe 	bl	8004fa8 <HAL_GetTick>
 800982c:	4602      	mov	r2, r0
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009836:	d901      	bls.n	800983c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009838:	2303      	movs	r3, #3
 800983a:	e007      	b.n	800984c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0ee      	beq.n	8009828 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800985e:	2300      	movs	r3, #0
 8009860:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009862:	e005      	b.n	8009870 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3301      	adds	r3, #1
 8009868:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800986a:	79fb      	ldrb	r3, [r7, #7]
 800986c:	3b0a      	subs	r3, #10
 800986e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009870:	79fb      	ldrb	r3, [r7, #7]
 8009872:	2b09      	cmp	r3, #9
 8009874:	d8f6      	bhi.n	8009864 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	b2db      	uxtb	r3, r3
 800987a:	011b      	lsls	r3, r3, #4
 800987c:	b2da      	uxtb	r2, r3
 800987e:	79fb      	ldrb	r3, [r7, #7]
 8009880:	4313      	orrs	r3, r2
 8009882:	b2db      	uxtb	r3, r3
}
 8009884:	4618      	mov	r0, r3
 8009886:	3714      	adds	r7, #20
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009890:	b480      	push	{r7}
 8009892:	b087      	sub	sp, #28
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	7f1b      	ldrb	r3, [r3, #28]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d101      	bne.n	80098ac <HAL_RTCEx_SetTimeStamp+0x1c>
 80098a8:	2302      	movs	r3, #2
 80098aa:	e03e      	b.n	800992a <HAL_RTCEx_SetTimeStamp+0x9a>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2201      	movs	r2, #1
 80098b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2202      	movs	r2, #2
 80098b6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689a      	ldr	r2, [r3, #8]
 80098be:	4b1e      	ldr	r3, [pc, #120]	; (8009938 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80098c0:	4013      	ands	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	22ca      	movs	r2, #202	; 0xca
 80098d2:	625a      	str	r2, [r3, #36]	; 0x24
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2253      	movs	r2, #83	; 0x53
 80098da:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 0206 	bic.w	r2, r2, #6
 80098ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	430a      	orrs	r2, r1
 80098fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689a      	ldr	r2, [r3, #8]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009912:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	22ff      	movs	r2, #255	; 0xff
 800991a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2201      	movs	r2, #1
 8009920:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	fffff7f7 	.word	0xfffff7f7

0800993c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e025      	b.n	800999c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009956:	b2db      	uxtb	r3, r3
 8009958:	2b00      	cmp	r3, #0
 800995a:	d106      	bne.n	800996a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7fb fa07 	bl	8004d78 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2202      	movs	r2, #2
 800996e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	3304      	adds	r3, #4
 800997a:	4619      	mov	r1, r3
 800997c:	4610      	mov	r0, r2
 800997e:	f001 fdb7 	bl	800b4f0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6818      	ldr	r0, [r3, #0]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	461a      	mov	r2, r3
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	f001 fe0b 	bl	800b5a8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80099b6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80099b8:	7dfb      	ldrb	r3, [r7, #23]
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d101      	bne.n	80099c2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80099be:	2302      	movs	r3, #2
 80099c0:	e021      	b.n	8009a06 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d002      	beq.n	80099ce <HAL_SDRAM_SendCommand+0x2a>
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	2b05      	cmp	r3, #5
 80099cc:	d118      	bne.n	8009a00 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2202      	movs	r2, #2
 80099d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	68b9      	ldr	r1, [r7, #8]
 80099de:	4618      	mov	r0, r3
 80099e0:	f001 fe4c 	bl	800b67c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d104      	bne.n	80099f6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2205      	movs	r2, #5
 80099f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80099f4:	e006      	b.n	8009a04 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80099fe:	e001      	b.n	8009a04 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e000      	b.n	8009a06 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b082      	sub	sp, #8
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d101      	bne.n	8009a28 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009a24:	2302      	movs	r3, #2
 8009a26:	e016      	b.n	8009a56 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d10f      	bne.n	8009a54 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2202      	movs	r2, #2
 8009a38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f001 fe3e 	bl	800b6c4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
 8009a52:	e000      	b.n	8009a56 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}

08009a5e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a5e:	b580      	push	{r7, lr}
 8009a60:	b084      	sub	sp, #16
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d101      	bne.n	8009a70 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e09d      	b.n	8009bac <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d108      	bne.n	8009a8a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a80:	d009      	beq.n	8009a96 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	61da      	str	r2, [r3, #28]
 8009a88:	e005      	b.n	8009a96 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d106      	bne.n	8009ab6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f7fa fec5 	bl	8004840 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2202      	movs	r2, #2
 8009aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009acc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ad6:	d902      	bls.n	8009ade <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	e002      	b.n	8009ae4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ae2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009aec:	d007      	beq.n	8009afe <HAL_SPI_Init+0xa0>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009af6:	d002      	beq.n	8009afe <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	f003 0302 	and.w	r3, r3, #2
 8009b18:	431a      	orrs	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	f003 0301 	and.w	r3, r3, #1
 8009b22:	431a      	orrs	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b2c:	431a      	orrs	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b36:	431a      	orrs	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a1b      	ldr	r3, [r3, #32]
 8009b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b40:	ea42 0103 	orr.w	r1, r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	430a      	orrs	r2, r1
 8009b52:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	0c1b      	lsrs	r3, r3, #16
 8009b5a:	f003 0204 	and.w	r2, r3, #4
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	f003 0310 	and.w	r3, r3, #16
 8009b66:	431a      	orrs	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b6c:	f003 0308 	and.w	r3, r3, #8
 8009b70:	431a      	orrs	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009b7a:	ea42 0103 	orr.w	r1, r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	430a      	orrs	r2, r1
 8009b8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	69da      	ldr	r2, [r3, #28]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e049      	b.n	8009c5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d106      	bne.n	8009be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f7fa fe92 	bl	8004904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2202      	movs	r2, #2
 8009be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3304      	adds	r3, #4
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	4610      	mov	r0, r2
 8009bf4:	f000 fac0 	bl	800a178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3708      	adds	r7, #8
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
	...

08009c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d001      	beq.n	8009c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	e054      	b.n	8009d26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2202      	movs	r2, #2
 8009c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68da      	ldr	r2, [r3, #12]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f042 0201 	orr.w	r2, r2, #1
 8009c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a26      	ldr	r2, [pc, #152]	; (8009d34 <HAL_TIM_Base_Start_IT+0xd0>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d022      	beq.n	8009ce4 <HAL_TIM_Base_Start_IT+0x80>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ca6:	d01d      	beq.n	8009ce4 <HAL_TIM_Base_Start_IT+0x80>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a22      	ldr	r2, [pc, #136]	; (8009d38 <HAL_TIM_Base_Start_IT+0xd4>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d018      	beq.n	8009ce4 <HAL_TIM_Base_Start_IT+0x80>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a21      	ldr	r2, [pc, #132]	; (8009d3c <HAL_TIM_Base_Start_IT+0xd8>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d013      	beq.n	8009ce4 <HAL_TIM_Base_Start_IT+0x80>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a1f      	ldr	r2, [pc, #124]	; (8009d40 <HAL_TIM_Base_Start_IT+0xdc>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d00e      	beq.n	8009ce4 <HAL_TIM_Base_Start_IT+0x80>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a1e      	ldr	r2, [pc, #120]	; (8009d44 <HAL_TIM_Base_Start_IT+0xe0>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d009      	beq.n	8009ce4 <HAL_TIM_Base_Start_IT+0x80>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a1c      	ldr	r2, [pc, #112]	; (8009d48 <HAL_TIM_Base_Start_IT+0xe4>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d004      	beq.n	8009ce4 <HAL_TIM_Base_Start_IT+0x80>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a1b      	ldr	r2, [pc, #108]	; (8009d4c <HAL_TIM_Base_Start_IT+0xe8>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d115      	bne.n	8009d10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689a      	ldr	r2, [r3, #8]
 8009cea:	4b19      	ldr	r3, [pc, #100]	; (8009d50 <HAL_TIM_Base_Start_IT+0xec>)
 8009cec:	4013      	ands	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b06      	cmp	r3, #6
 8009cf4:	d015      	beq.n	8009d22 <HAL_TIM_Base_Start_IT+0xbe>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cfc:	d011      	beq.n	8009d22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f042 0201 	orr.w	r2, r2, #1
 8009d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d0e:	e008      	b.n	8009d22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0201 	orr.w	r2, r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]
 8009d20:	e000      	b.n	8009d24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	40010000 	.word	0x40010000
 8009d38:	40000400 	.word	0x40000400
 8009d3c:	40000800 	.word	0x40000800
 8009d40:	40000c00 	.word	0x40000c00
 8009d44:	40010400 	.word	0x40010400
 8009d48:	40014000 	.word	0x40014000
 8009d4c:	40001800 	.word	0x40001800
 8009d50:	00010007 	.word	0x00010007

08009d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	691b      	ldr	r3, [r3, #16]
 8009d62:	f003 0302 	and.w	r3, r3, #2
 8009d66:	2b02      	cmp	r3, #2
 8009d68:	d122      	bne.n	8009db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d11b      	bne.n	8009db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f06f 0202 	mvn.w	r2, #2
 8009d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	f003 0303 	and.w	r3, r3, #3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f9d0 	bl	800a13c <HAL_TIM_IC_CaptureCallback>
 8009d9c:	e005      	b.n	8009daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f9c2 	bl	800a128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f9d3 	bl	800a150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	f003 0304 	and.w	r3, r3, #4
 8009dba:	2b04      	cmp	r3, #4
 8009dbc:	d122      	bne.n	8009e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	f003 0304 	and.w	r3, r3, #4
 8009dc8:	2b04      	cmp	r3, #4
 8009dca:	d11b      	bne.n	8009e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f06f 0204 	mvn.w	r2, #4
 8009dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2202      	movs	r2, #2
 8009dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d003      	beq.n	8009df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f9a6 	bl	800a13c <HAL_TIM_IC_CaptureCallback>
 8009df0:	e005      	b.n	8009dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f998 	bl	800a128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f9a9 	bl	800a150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	f003 0308 	and.w	r3, r3, #8
 8009e0e:	2b08      	cmp	r3, #8
 8009e10:	d122      	bne.n	8009e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	f003 0308 	and.w	r3, r3, #8
 8009e1c:	2b08      	cmp	r3, #8
 8009e1e:	d11b      	bne.n	8009e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f06f 0208 	mvn.w	r2, #8
 8009e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2204      	movs	r2, #4
 8009e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	69db      	ldr	r3, [r3, #28]
 8009e36:	f003 0303 	and.w	r3, r3, #3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f97c 	bl	800a13c <HAL_TIM_IC_CaptureCallback>
 8009e44:	e005      	b.n	8009e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f96e 	bl	800a128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f97f 	bl	800a150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	f003 0310 	and.w	r3, r3, #16
 8009e62:	2b10      	cmp	r3, #16
 8009e64:	d122      	bne.n	8009eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	f003 0310 	and.w	r3, r3, #16
 8009e70:	2b10      	cmp	r3, #16
 8009e72:	d11b      	bne.n	8009eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f06f 0210 	mvn.w	r2, #16
 8009e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2208      	movs	r2, #8
 8009e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	69db      	ldr	r3, [r3, #28]
 8009e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 f952 	bl	800a13c <HAL_TIM_IC_CaptureCallback>
 8009e98:	e005      	b.n	8009ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f944 	bl	800a128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f955 	bl	800a150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d10e      	bne.n	8009ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d107      	bne.n	8009ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f06f 0201 	mvn.w	r2, #1
 8009ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7f8 fd62 	bl	800299c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee2:	2b80      	cmp	r3, #128	; 0x80
 8009ee4:	d10e      	bne.n	8009f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ef0:	2b80      	cmp	r3, #128	; 0x80
 8009ef2:	d107      	bne.n	8009f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fb0c 	bl	800a51c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f12:	d10e      	bne.n	8009f32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f1e:	2b80      	cmp	r3, #128	; 0x80
 8009f20:	d107      	bne.n	8009f32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 faff 	bl	800a530 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f3c:	2b40      	cmp	r3, #64	; 0x40
 8009f3e:	d10e      	bne.n	8009f5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f4a:	2b40      	cmp	r3, #64	; 0x40
 8009f4c:	d107      	bne.n	8009f5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f903 	bl	800a164 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	f003 0320 	and.w	r3, r3, #32
 8009f68:	2b20      	cmp	r3, #32
 8009f6a:	d10e      	bne.n	8009f8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	f003 0320 	and.w	r3, r3, #32
 8009f76:	2b20      	cmp	r3, #32
 8009f78:	d107      	bne.n	8009f8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f06f 0220 	mvn.w	r2, #32
 8009f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fabf 	bl	800a508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f8a:	bf00      	nop
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
	...

08009f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d101      	bne.n	8009fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8009fac:	2302      	movs	r3, #2
 8009fae:	e0b4      	b.n	800a11a <HAL_TIM_ConfigClockSource+0x186>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	4b56      	ldr	r3, [pc, #344]	; (800a124 <HAL_TIM_ConfigClockSource+0x190>)
 8009fcc:	4013      	ands	r3, r2
 8009fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fe8:	d03e      	beq.n	800a068 <HAL_TIM_ConfigClockSource+0xd4>
 8009fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fee:	f200 8087 	bhi.w	800a100 <HAL_TIM_ConfigClockSource+0x16c>
 8009ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ff6:	f000 8086 	beq.w	800a106 <HAL_TIM_ConfigClockSource+0x172>
 8009ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ffe:	d87f      	bhi.n	800a100 <HAL_TIM_ConfigClockSource+0x16c>
 800a000:	2b70      	cmp	r3, #112	; 0x70
 800a002:	d01a      	beq.n	800a03a <HAL_TIM_ConfigClockSource+0xa6>
 800a004:	2b70      	cmp	r3, #112	; 0x70
 800a006:	d87b      	bhi.n	800a100 <HAL_TIM_ConfigClockSource+0x16c>
 800a008:	2b60      	cmp	r3, #96	; 0x60
 800a00a:	d050      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0x11a>
 800a00c:	2b60      	cmp	r3, #96	; 0x60
 800a00e:	d877      	bhi.n	800a100 <HAL_TIM_ConfigClockSource+0x16c>
 800a010:	2b50      	cmp	r3, #80	; 0x50
 800a012:	d03c      	beq.n	800a08e <HAL_TIM_ConfigClockSource+0xfa>
 800a014:	2b50      	cmp	r3, #80	; 0x50
 800a016:	d873      	bhi.n	800a100 <HAL_TIM_ConfigClockSource+0x16c>
 800a018:	2b40      	cmp	r3, #64	; 0x40
 800a01a:	d058      	beq.n	800a0ce <HAL_TIM_ConfigClockSource+0x13a>
 800a01c:	2b40      	cmp	r3, #64	; 0x40
 800a01e:	d86f      	bhi.n	800a100 <HAL_TIM_ConfigClockSource+0x16c>
 800a020:	2b30      	cmp	r3, #48	; 0x30
 800a022:	d064      	beq.n	800a0ee <HAL_TIM_ConfigClockSource+0x15a>
 800a024:	2b30      	cmp	r3, #48	; 0x30
 800a026:	d86b      	bhi.n	800a100 <HAL_TIM_ConfigClockSource+0x16c>
 800a028:	2b20      	cmp	r3, #32
 800a02a:	d060      	beq.n	800a0ee <HAL_TIM_ConfigClockSource+0x15a>
 800a02c:	2b20      	cmp	r3, #32
 800a02e:	d867      	bhi.n	800a100 <HAL_TIM_ConfigClockSource+0x16c>
 800a030:	2b00      	cmp	r3, #0
 800a032:	d05c      	beq.n	800a0ee <HAL_TIM_ConfigClockSource+0x15a>
 800a034:	2b10      	cmp	r3, #16
 800a036:	d05a      	beq.n	800a0ee <HAL_TIM_ConfigClockSource+0x15a>
 800a038:	e062      	b.n	800a100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6818      	ldr	r0, [r3, #0]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	6899      	ldr	r1, [r3, #8]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	f000 f9af 	bl	800a3ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a05c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	609a      	str	r2, [r3, #8]
      break;
 800a066:	e04f      	b.n	800a108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6818      	ldr	r0, [r3, #0]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	6899      	ldr	r1, [r3, #8]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	685a      	ldr	r2, [r3, #4]
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	f000 f998 	bl	800a3ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	689a      	ldr	r2, [r3, #8]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a08a:	609a      	str	r2, [r3, #8]
      break;
 800a08c:	e03c      	b.n	800a108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6818      	ldr	r0, [r3, #0]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	6859      	ldr	r1, [r3, #4]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	461a      	mov	r2, r3
 800a09c:	f000 f90c 	bl	800a2b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2150      	movs	r1, #80	; 0x50
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 f965 	bl	800a376 <TIM_ITRx_SetConfig>
      break;
 800a0ac:	e02c      	b.n	800a108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6818      	ldr	r0, [r3, #0]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	6859      	ldr	r1, [r3, #4]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f000 f92b 	bl	800a316 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2160      	movs	r1, #96	; 0x60
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 f955 	bl	800a376 <TIM_ITRx_SetConfig>
      break;
 800a0cc:	e01c      	b.n	800a108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6818      	ldr	r0, [r3, #0]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	6859      	ldr	r1, [r3, #4]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	f000 f8ec 	bl	800a2b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2140      	movs	r1, #64	; 0x40
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f000 f945 	bl	800a376 <TIM_ITRx_SetConfig>
      break;
 800a0ec:	e00c      	b.n	800a108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681a      	ldr	r2, [r3, #0]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	4610      	mov	r0, r2
 800a0fa:	f000 f93c 	bl	800a376 <TIM_ITRx_SetConfig>
      break;
 800a0fe:	e003      	b.n	800a108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	73fb      	strb	r3, [r7, #15]
      break;
 800a104:	e000      	b.n	800a108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a118:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	fffeff88 	.word	0xfffeff88

0800a128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a40      	ldr	r2, [pc, #256]	; (800a28c <TIM_Base_SetConfig+0x114>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d013      	beq.n	800a1b8 <TIM_Base_SetConfig+0x40>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a196:	d00f      	beq.n	800a1b8 <TIM_Base_SetConfig+0x40>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a3d      	ldr	r2, [pc, #244]	; (800a290 <TIM_Base_SetConfig+0x118>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d00b      	beq.n	800a1b8 <TIM_Base_SetConfig+0x40>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a3c      	ldr	r2, [pc, #240]	; (800a294 <TIM_Base_SetConfig+0x11c>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d007      	beq.n	800a1b8 <TIM_Base_SetConfig+0x40>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a3b      	ldr	r2, [pc, #236]	; (800a298 <TIM_Base_SetConfig+0x120>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d003      	beq.n	800a1b8 <TIM_Base_SetConfig+0x40>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a3a      	ldr	r2, [pc, #232]	; (800a29c <TIM_Base_SetConfig+0x124>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d108      	bne.n	800a1ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a2f      	ldr	r2, [pc, #188]	; (800a28c <TIM_Base_SetConfig+0x114>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d02b      	beq.n	800a22a <TIM_Base_SetConfig+0xb2>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d8:	d027      	beq.n	800a22a <TIM_Base_SetConfig+0xb2>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a2c      	ldr	r2, [pc, #176]	; (800a290 <TIM_Base_SetConfig+0x118>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d023      	beq.n	800a22a <TIM_Base_SetConfig+0xb2>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a2b      	ldr	r2, [pc, #172]	; (800a294 <TIM_Base_SetConfig+0x11c>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d01f      	beq.n	800a22a <TIM_Base_SetConfig+0xb2>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a2a      	ldr	r2, [pc, #168]	; (800a298 <TIM_Base_SetConfig+0x120>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d01b      	beq.n	800a22a <TIM_Base_SetConfig+0xb2>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a29      	ldr	r2, [pc, #164]	; (800a29c <TIM_Base_SetConfig+0x124>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d017      	beq.n	800a22a <TIM_Base_SetConfig+0xb2>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a28      	ldr	r2, [pc, #160]	; (800a2a0 <TIM_Base_SetConfig+0x128>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d013      	beq.n	800a22a <TIM_Base_SetConfig+0xb2>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a27      	ldr	r2, [pc, #156]	; (800a2a4 <TIM_Base_SetConfig+0x12c>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d00f      	beq.n	800a22a <TIM_Base_SetConfig+0xb2>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a26      	ldr	r2, [pc, #152]	; (800a2a8 <TIM_Base_SetConfig+0x130>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d00b      	beq.n	800a22a <TIM_Base_SetConfig+0xb2>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a25      	ldr	r2, [pc, #148]	; (800a2ac <TIM_Base_SetConfig+0x134>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d007      	beq.n	800a22a <TIM_Base_SetConfig+0xb2>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a24      	ldr	r2, [pc, #144]	; (800a2b0 <TIM_Base_SetConfig+0x138>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d003      	beq.n	800a22a <TIM_Base_SetConfig+0xb2>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a23      	ldr	r2, [pc, #140]	; (800a2b4 <TIM_Base_SetConfig+0x13c>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d108      	bne.n	800a23c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	4313      	orrs	r3, r2
 800a23a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	689a      	ldr	r2, [r3, #8]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a0a      	ldr	r2, [pc, #40]	; (800a28c <TIM_Base_SetConfig+0x114>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d003      	beq.n	800a270 <TIM_Base_SetConfig+0xf8>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a0c      	ldr	r2, [pc, #48]	; (800a29c <TIM_Base_SetConfig+0x124>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d103      	bne.n	800a278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	691a      	ldr	r2, [r3, #16]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	615a      	str	r2, [r3, #20]
}
 800a27e:	bf00      	nop
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	40010000 	.word	0x40010000
 800a290:	40000400 	.word	0x40000400
 800a294:	40000800 	.word	0x40000800
 800a298:	40000c00 	.word	0x40000c00
 800a29c:	40010400 	.word	0x40010400
 800a2a0:	40014000 	.word	0x40014000
 800a2a4:	40014400 	.word	0x40014400
 800a2a8:	40014800 	.word	0x40014800
 800a2ac:	40001800 	.word	0x40001800
 800a2b0:	40001c00 	.word	0x40001c00
 800a2b4:	40002000 	.word	0x40002000

0800a2b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b087      	sub	sp, #28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6a1b      	ldr	r3, [r3, #32]
 800a2c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6a1b      	ldr	r3, [r3, #32]
 800a2ce:	f023 0201 	bic.w	r2, r3, #1
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	011b      	lsls	r3, r3, #4
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f023 030a 	bic.w	r3, r3, #10
 800a2f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	621a      	str	r2, [r3, #32]
}
 800a30a:	bf00      	nop
 800a30c:	371c      	adds	r7, #28
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a316:	b480      	push	{r7}
 800a318:	b087      	sub	sp, #28
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	60f8      	str	r0, [r7, #12]
 800a31e:	60b9      	str	r1, [r7, #8]
 800a320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	f023 0210 	bic.w	r2, r3, #16
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	031b      	lsls	r3, r3, #12
 800a346:	697a      	ldr	r2, [r7, #20]
 800a348:	4313      	orrs	r3, r2
 800a34a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a352:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	011b      	lsls	r3, r3, #4
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	621a      	str	r2, [r3, #32]
}
 800a36a:	bf00      	nop
 800a36c:	371c      	adds	r7, #28
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a376:	b480      	push	{r7}
 800a378:	b085      	sub	sp, #20
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a38c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4313      	orrs	r3, r2
 800a394:	f043 0307 	orr.w	r3, r3, #7
 800a398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	609a      	str	r2, [r3, #8]
}
 800a3a0:	bf00      	nop
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
 800a3b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	021a      	lsls	r2, r3, #8
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	431a      	orrs	r2, r3
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	609a      	str	r2, [r3, #8]
}
 800a3e0:	bf00      	nop
 800a3e2:	371c      	adds	r7, #28
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d101      	bne.n	800a404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a400:	2302      	movs	r3, #2
 800a402:	e06d      	b.n	800a4e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2202      	movs	r2, #2
 800a410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a30      	ldr	r2, [pc, #192]	; (800a4ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d004      	beq.n	800a438 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a2f      	ldr	r2, [pc, #188]	; (800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d108      	bne.n	800a44a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a43e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	4313      	orrs	r3, r2
 800a448:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a450:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	4313      	orrs	r3, r2
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a20      	ldr	r2, [pc, #128]	; (800a4ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d022      	beq.n	800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a476:	d01d      	beq.n	800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a1d      	ldr	r2, [pc, #116]	; (800a4f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d018      	beq.n	800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a1c      	ldr	r2, [pc, #112]	; (800a4f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d013      	beq.n	800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a1a      	ldr	r2, [pc, #104]	; (800a4fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d00e      	beq.n	800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a15      	ldr	r2, [pc, #84]	; (800a4f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d009      	beq.n	800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a16      	ldr	r2, [pc, #88]	; (800a500 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d004      	beq.n	800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a15      	ldr	r2, [pc, #84]	; (800a504 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d10c      	bne.n	800a4ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	40010000 	.word	0x40010000
 800a4f0:	40010400 	.word	0x40010400
 800a4f4:	40000400 	.word	0x40000400
 800a4f8:	40000800 	.word	0x40000800
 800a4fc:	40000c00 	.word	0x40000c00
 800a500:	40014000 	.word	0x40014000
 800a504:	40001800 	.word	0x40001800

0800a508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e040      	b.n	800a5d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d106      	bne.n	800a56c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f7fa fa5e 	bl	8004a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2224      	movs	r2, #36	; 0x24
 800a570:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 0201 	bic.w	r2, r2, #1
 800a580:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fb16 	bl	800abb4 <UART_SetConfig>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d101      	bne.n	800a592 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e022      	b.n	800a5d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	2b00      	cmp	r3, #0
 800a598:	d002      	beq.n	800a5a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fd6c 	bl	800b078 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	685a      	ldr	r2, [r3, #4]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f042 0201 	orr.w	r2, r2, #1
 800a5ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fdf3 	bl	800b1bc <UART_CheckIdleState>
 800a5d6:	4603      	mov	r3, r0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b0ba      	sub	sp, #232	; 0xe8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a606:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a60a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a60e:	4013      	ands	r3, r2
 800a610:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d115      	bne.n	800a648 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a61c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a620:	f003 0320 	and.w	r3, r3, #32
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00f      	beq.n	800a648 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a62c:	f003 0320 	and.w	r3, r3, #32
 800a630:	2b00      	cmp	r3, #0
 800a632:	d009      	beq.n	800a648 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f000 828f 	beq.w	800ab5c <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	4798      	blx	r3
      }
      return;
 800a646:	e289      	b.n	800ab5c <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 8117 	beq.w	800a880 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a656:	f003 0301 	and.w	r3, r3, #1
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d106      	bne.n	800a66c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a65e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a662:	4b85      	ldr	r3, [pc, #532]	; (800a878 <HAL_UART_IRQHandler+0x298>)
 800a664:	4013      	ands	r3, r2
 800a666:	2b00      	cmp	r3, #0
 800a668:	f000 810a 	beq.w	800a880 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a670:	f003 0301 	and.w	r3, r3, #1
 800a674:	2b00      	cmp	r3, #0
 800a676:	d011      	beq.n	800a69c <HAL_UART_IRQHandler+0xbc>
 800a678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a67c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00b      	beq.n	800a69c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2201      	movs	r2, #1
 800a68a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a692:	f043 0201 	orr.w	r2, r3, #1
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a69c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6a0:	f003 0302 	and.w	r3, r3, #2
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d011      	beq.n	800a6cc <HAL_UART_IRQHandler+0xec>
 800a6a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6ac:	f003 0301 	and.w	r3, r3, #1
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00b      	beq.n	800a6cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2202      	movs	r2, #2
 800a6ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6c2:	f043 0204 	orr.w	r2, r3, #4
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6d0:	f003 0304 	and.w	r3, r3, #4
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d011      	beq.n	800a6fc <HAL_UART_IRQHandler+0x11c>
 800a6d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6dc:	f003 0301 	and.w	r3, r3, #1
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00b      	beq.n	800a6fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2204      	movs	r2, #4
 800a6ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6f2:	f043 0202 	orr.w	r2, r3, #2
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a700:	f003 0308 	and.w	r3, r3, #8
 800a704:	2b00      	cmp	r3, #0
 800a706:	d017      	beq.n	800a738 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a70c:	f003 0320 	and.w	r3, r3, #32
 800a710:	2b00      	cmp	r3, #0
 800a712:	d105      	bne.n	800a720 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a718:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00b      	beq.n	800a738 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2208      	movs	r2, #8
 800a726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a72e:	f043 0208 	orr.w	r2, r3, #8
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a73c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a740:	2b00      	cmp	r3, #0
 800a742:	d012      	beq.n	800a76a <HAL_UART_IRQHandler+0x18a>
 800a744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a748:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00c      	beq.n	800a76a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a758:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a760:	f043 0220 	orr.w	r2, r3, #32
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a770:	2b00      	cmp	r3, #0
 800a772:	f000 81f5 	beq.w	800ab60 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a77a:	f003 0320 	and.w	r3, r3, #32
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00d      	beq.n	800a79e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a786:	f003 0320 	and.w	r3, r3, #32
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d007      	beq.n	800a79e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7b2:	2b40      	cmp	r3, #64	; 0x40
 800a7b4:	d005      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d04f      	beq.n	800a862 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fdf1 	bl	800b3aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d2:	2b40      	cmp	r3, #64	; 0x40
 800a7d4:	d141      	bne.n	800a85a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3308      	adds	r3, #8
 800a7dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a7e4:	e853 3f00 	ldrex	r3, [r3]
 800a7e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a7ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a7f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3308      	adds	r3, #8
 800a7fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a802:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a806:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a80e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a812:	e841 2300 	strex	r3, r2, [r1]
 800a816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a81a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d1d9      	bne.n	800a7d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a826:	2b00      	cmp	r3, #0
 800a828:	d013      	beq.n	800a852 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a82e:	4a13      	ldr	r2, [pc, #76]	; (800a87c <HAL_UART_IRQHandler+0x29c>)
 800a830:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a836:	4618      	mov	r0, r3
 800a838:	f7fb fa86 	bl	8005d48 <HAL_DMA_Abort_IT>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d017      	beq.n	800a872 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a84c:	4610      	mov	r0, r2
 800a84e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a850:	e00f      	b.n	800a872 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f998 	bl	800ab88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a858:	e00b      	b.n	800a872 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f994 	bl	800ab88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a860:	e007      	b.n	800a872 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f990 	bl	800ab88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a870:	e176      	b.n	800ab60 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a872:	bf00      	nop
    return;
 800a874:	e174      	b.n	800ab60 <HAL_UART_IRQHandler+0x580>
 800a876:	bf00      	nop
 800a878:	04000120 	.word	0x04000120
 800a87c:	0800b471 	.word	0x0800b471

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a884:	2b01      	cmp	r3, #1
 800a886:	f040 8144 	bne.w	800ab12 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a88a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a88e:	f003 0310 	and.w	r3, r3, #16
 800a892:	2b00      	cmp	r3, #0
 800a894:	f000 813d 	beq.w	800ab12 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a89c:	f003 0310 	and.w	r3, r3, #16
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 8136 	beq.w	800ab12 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2210      	movs	r2, #16
 800a8ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b8:	2b40      	cmp	r3, #64	; 0x40
 800a8ba:	f040 80b2 	bne.w	800aa22 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a8ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f000 8148 	beq.w	800ab64 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a8da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	f080 8140 	bcs.w	800ab64 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a8ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f2:	69db      	ldr	r3, [r3, #28]
 800a8f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8f8:	f000 8085 	beq.w	800aa06 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a904:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a908:	e853 3f00 	ldrex	r3, [r3]
 800a90c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a910:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a918:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	461a      	mov	r2, r3
 800a922:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a92a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a932:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a936:	e841 2300 	strex	r3, r2, [r1]
 800a93a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a93e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1da      	bne.n	800a8fc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3308      	adds	r3, #8
 800a94c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a950:	e853 3f00 	ldrex	r3, [r3]
 800a954:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a958:	f023 0301 	bic.w	r3, r3, #1
 800a95c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	3308      	adds	r3, #8
 800a966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a96a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a96e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a970:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a972:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a976:	e841 2300 	strex	r3, r2, [r1]
 800a97a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a97c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1e1      	bne.n	800a946 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	3308      	adds	r3, #8
 800a988:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a98c:	e853 3f00 	ldrex	r3, [r3]
 800a990:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	3308      	adds	r3, #8
 800a9a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a9a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9ae:	e841 2300 	strex	r3, r2, [r1]
 800a9b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a9b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1e3      	bne.n	800a982 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2220      	movs	r2, #32
 800a9be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9ce:	e853 3f00 	ldrex	r3, [r3]
 800a9d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a9d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9d6:	f023 0310 	bic.w	r3, r3, #16
 800a9da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9e8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9f0:	e841 2300 	strex	r3, r2, [r1]
 800a9f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a9f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1e4      	bne.n	800a9c6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa00:	4618      	mov	r0, r3
 800aa02:	f7fb f931 	bl	8005c68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	1ad3      	subs	r3, r2, r3
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f8be 	bl	800ab9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa20:	e0a0      	b.n	800ab64 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	1ad3      	subs	r3, r2, r3
 800aa32:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f000 8092 	beq.w	800ab68 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800aa44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f000 808d 	beq.w	800ab68 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa56:	e853 3f00 	ldrex	r3, [r3]
 800aa5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa70:	647b      	str	r3, [r7, #68]	; 0x44
 800aa72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa78:	e841 2300 	strex	r3, r2, [r1]
 800aa7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e4      	bne.n	800aa4e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	3308      	adds	r3, #8
 800aa8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8e:	e853 3f00 	ldrex	r3, [r3]
 800aa92:	623b      	str	r3, [r7, #32]
   return(result);
 800aa94:	6a3b      	ldr	r3, [r7, #32]
 800aa96:	f023 0301 	bic.w	r3, r3, #1
 800aa9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aaa8:	633a      	str	r2, [r7, #48]	; 0x30
 800aaaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aaae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aab0:	e841 2300 	strex	r3, r2, [r1]
 800aab4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1e3      	bne.n	800aa84 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2220      	movs	r2, #32
 800aac0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	e853 3f00 	ldrex	r3, [r3]
 800aada:	60fb      	str	r3, [r7, #12]
   return(result);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f023 0310 	bic.w	r3, r3, #16
 800aae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	461a      	mov	r2, r3
 800aaec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aaf0:	61fb      	str	r3, [r7, #28]
 800aaf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf4:	69b9      	ldr	r1, [r7, #24]
 800aaf6:	69fa      	ldr	r2, [r7, #28]
 800aaf8:	e841 2300 	strex	r3, r2, [r1]
 800aafc:	617b      	str	r3, [r7, #20]
   return(result);
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d1e4      	bne.n	800aace <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab08:	4619      	mov	r1, r3
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f846 	bl	800ab9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab10:	e02a      	b.n	800ab68 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ab12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00e      	beq.n	800ab3c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ab1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d008      	beq.n	800ab3c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d01c      	beq.n	800ab6c <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	4798      	blx	r3
    }
    return;
 800ab3a:	e017      	b.n	800ab6c <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d012      	beq.n	800ab6e <HAL_UART_IRQHandler+0x58e>
 800ab48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00c      	beq.n	800ab6e <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fca1 	bl	800b49c <UART_EndTransmit_IT>
    return;
 800ab5a:	e008      	b.n	800ab6e <HAL_UART_IRQHandler+0x58e>
      return;
 800ab5c:	bf00      	nop
 800ab5e:	e006      	b.n	800ab6e <HAL_UART_IRQHandler+0x58e>
    return;
 800ab60:	bf00      	nop
 800ab62:	e004      	b.n	800ab6e <HAL_UART_IRQHandler+0x58e>
      return;
 800ab64:	bf00      	nop
 800ab66:	e002      	b.n	800ab6e <HAL_UART_IRQHandler+0x58e>
      return;
 800ab68:	bf00      	nop
 800ab6a:	e000      	b.n	800ab6e <HAL_UART_IRQHandler+0x58e>
    return;
 800ab6c:	bf00      	nop
  }

}
 800ab6e:	37e8      	adds	r7, #232	; 0xe8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ab7c:	bf00      	nop
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab90:	bf00      	nop
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b088      	sub	sp, #32
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800abbc:	2300      	movs	r3, #0
 800abbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689a      	ldr	r2, [r3, #8]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	691b      	ldr	r3, [r3, #16]
 800abc8:	431a      	orrs	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	431a      	orrs	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	69db      	ldr	r3, [r3, #28]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	4ba7      	ldr	r3, [pc, #668]	; (800ae7c <UART_SetConfig+0x2c8>)
 800abe0:	4013      	ands	r3, r2
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	6812      	ldr	r2, [r2, #0]
 800abe6:	6979      	ldr	r1, [r7, #20]
 800abe8:	430b      	orrs	r3, r1
 800abea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	68da      	ldr	r2, [r3, #12]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	699b      	ldr	r3, [r3, #24]
 800ac06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	697a      	ldr	r2, [r7, #20]
 800ac22:	430a      	orrs	r2, r1
 800ac24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a95      	ldr	r2, [pc, #596]	; (800ae80 <UART_SetConfig+0x2cc>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d120      	bne.n	800ac72 <UART_SetConfig+0xbe>
 800ac30:	4b94      	ldr	r3, [pc, #592]	; (800ae84 <UART_SetConfig+0x2d0>)
 800ac32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac36:	f003 0303 	and.w	r3, r3, #3
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d816      	bhi.n	800ac6c <UART_SetConfig+0xb8>
 800ac3e:	a201      	add	r2, pc, #4	; (adr r2, 800ac44 <UART_SetConfig+0x90>)
 800ac40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac44:	0800ac55 	.word	0x0800ac55
 800ac48:	0800ac61 	.word	0x0800ac61
 800ac4c:	0800ac5b 	.word	0x0800ac5b
 800ac50:	0800ac67 	.word	0x0800ac67
 800ac54:	2301      	movs	r3, #1
 800ac56:	77fb      	strb	r3, [r7, #31]
 800ac58:	e14f      	b.n	800aefa <UART_SetConfig+0x346>
 800ac5a:	2302      	movs	r3, #2
 800ac5c:	77fb      	strb	r3, [r7, #31]
 800ac5e:	e14c      	b.n	800aefa <UART_SetConfig+0x346>
 800ac60:	2304      	movs	r3, #4
 800ac62:	77fb      	strb	r3, [r7, #31]
 800ac64:	e149      	b.n	800aefa <UART_SetConfig+0x346>
 800ac66:	2308      	movs	r3, #8
 800ac68:	77fb      	strb	r3, [r7, #31]
 800ac6a:	e146      	b.n	800aefa <UART_SetConfig+0x346>
 800ac6c:	2310      	movs	r3, #16
 800ac6e:	77fb      	strb	r3, [r7, #31]
 800ac70:	e143      	b.n	800aefa <UART_SetConfig+0x346>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a84      	ldr	r2, [pc, #528]	; (800ae88 <UART_SetConfig+0x2d4>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d132      	bne.n	800ace2 <UART_SetConfig+0x12e>
 800ac7c:	4b81      	ldr	r3, [pc, #516]	; (800ae84 <UART_SetConfig+0x2d0>)
 800ac7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac82:	f003 030c 	and.w	r3, r3, #12
 800ac86:	2b0c      	cmp	r3, #12
 800ac88:	d828      	bhi.n	800acdc <UART_SetConfig+0x128>
 800ac8a:	a201      	add	r2, pc, #4	; (adr r2, 800ac90 <UART_SetConfig+0xdc>)
 800ac8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac90:	0800acc5 	.word	0x0800acc5
 800ac94:	0800acdd 	.word	0x0800acdd
 800ac98:	0800acdd 	.word	0x0800acdd
 800ac9c:	0800acdd 	.word	0x0800acdd
 800aca0:	0800acd1 	.word	0x0800acd1
 800aca4:	0800acdd 	.word	0x0800acdd
 800aca8:	0800acdd 	.word	0x0800acdd
 800acac:	0800acdd 	.word	0x0800acdd
 800acb0:	0800accb 	.word	0x0800accb
 800acb4:	0800acdd 	.word	0x0800acdd
 800acb8:	0800acdd 	.word	0x0800acdd
 800acbc:	0800acdd 	.word	0x0800acdd
 800acc0:	0800acd7 	.word	0x0800acd7
 800acc4:	2300      	movs	r3, #0
 800acc6:	77fb      	strb	r3, [r7, #31]
 800acc8:	e117      	b.n	800aefa <UART_SetConfig+0x346>
 800acca:	2302      	movs	r3, #2
 800accc:	77fb      	strb	r3, [r7, #31]
 800acce:	e114      	b.n	800aefa <UART_SetConfig+0x346>
 800acd0:	2304      	movs	r3, #4
 800acd2:	77fb      	strb	r3, [r7, #31]
 800acd4:	e111      	b.n	800aefa <UART_SetConfig+0x346>
 800acd6:	2308      	movs	r3, #8
 800acd8:	77fb      	strb	r3, [r7, #31]
 800acda:	e10e      	b.n	800aefa <UART_SetConfig+0x346>
 800acdc:	2310      	movs	r3, #16
 800acde:	77fb      	strb	r3, [r7, #31]
 800ace0:	e10b      	b.n	800aefa <UART_SetConfig+0x346>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a69      	ldr	r2, [pc, #420]	; (800ae8c <UART_SetConfig+0x2d8>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d120      	bne.n	800ad2e <UART_SetConfig+0x17a>
 800acec:	4b65      	ldr	r3, [pc, #404]	; (800ae84 <UART_SetConfig+0x2d0>)
 800acee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acf2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800acf6:	2b30      	cmp	r3, #48	; 0x30
 800acf8:	d013      	beq.n	800ad22 <UART_SetConfig+0x16e>
 800acfa:	2b30      	cmp	r3, #48	; 0x30
 800acfc:	d814      	bhi.n	800ad28 <UART_SetConfig+0x174>
 800acfe:	2b20      	cmp	r3, #32
 800ad00:	d009      	beq.n	800ad16 <UART_SetConfig+0x162>
 800ad02:	2b20      	cmp	r3, #32
 800ad04:	d810      	bhi.n	800ad28 <UART_SetConfig+0x174>
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d002      	beq.n	800ad10 <UART_SetConfig+0x15c>
 800ad0a:	2b10      	cmp	r3, #16
 800ad0c:	d006      	beq.n	800ad1c <UART_SetConfig+0x168>
 800ad0e:	e00b      	b.n	800ad28 <UART_SetConfig+0x174>
 800ad10:	2300      	movs	r3, #0
 800ad12:	77fb      	strb	r3, [r7, #31]
 800ad14:	e0f1      	b.n	800aefa <UART_SetConfig+0x346>
 800ad16:	2302      	movs	r3, #2
 800ad18:	77fb      	strb	r3, [r7, #31]
 800ad1a:	e0ee      	b.n	800aefa <UART_SetConfig+0x346>
 800ad1c:	2304      	movs	r3, #4
 800ad1e:	77fb      	strb	r3, [r7, #31]
 800ad20:	e0eb      	b.n	800aefa <UART_SetConfig+0x346>
 800ad22:	2308      	movs	r3, #8
 800ad24:	77fb      	strb	r3, [r7, #31]
 800ad26:	e0e8      	b.n	800aefa <UART_SetConfig+0x346>
 800ad28:	2310      	movs	r3, #16
 800ad2a:	77fb      	strb	r3, [r7, #31]
 800ad2c:	e0e5      	b.n	800aefa <UART_SetConfig+0x346>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a57      	ldr	r2, [pc, #348]	; (800ae90 <UART_SetConfig+0x2dc>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d120      	bne.n	800ad7a <UART_SetConfig+0x1c6>
 800ad38:	4b52      	ldr	r3, [pc, #328]	; (800ae84 <UART_SetConfig+0x2d0>)
 800ad3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ad42:	2bc0      	cmp	r3, #192	; 0xc0
 800ad44:	d013      	beq.n	800ad6e <UART_SetConfig+0x1ba>
 800ad46:	2bc0      	cmp	r3, #192	; 0xc0
 800ad48:	d814      	bhi.n	800ad74 <UART_SetConfig+0x1c0>
 800ad4a:	2b80      	cmp	r3, #128	; 0x80
 800ad4c:	d009      	beq.n	800ad62 <UART_SetConfig+0x1ae>
 800ad4e:	2b80      	cmp	r3, #128	; 0x80
 800ad50:	d810      	bhi.n	800ad74 <UART_SetConfig+0x1c0>
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d002      	beq.n	800ad5c <UART_SetConfig+0x1a8>
 800ad56:	2b40      	cmp	r3, #64	; 0x40
 800ad58:	d006      	beq.n	800ad68 <UART_SetConfig+0x1b4>
 800ad5a:	e00b      	b.n	800ad74 <UART_SetConfig+0x1c0>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	77fb      	strb	r3, [r7, #31]
 800ad60:	e0cb      	b.n	800aefa <UART_SetConfig+0x346>
 800ad62:	2302      	movs	r3, #2
 800ad64:	77fb      	strb	r3, [r7, #31]
 800ad66:	e0c8      	b.n	800aefa <UART_SetConfig+0x346>
 800ad68:	2304      	movs	r3, #4
 800ad6a:	77fb      	strb	r3, [r7, #31]
 800ad6c:	e0c5      	b.n	800aefa <UART_SetConfig+0x346>
 800ad6e:	2308      	movs	r3, #8
 800ad70:	77fb      	strb	r3, [r7, #31]
 800ad72:	e0c2      	b.n	800aefa <UART_SetConfig+0x346>
 800ad74:	2310      	movs	r3, #16
 800ad76:	77fb      	strb	r3, [r7, #31]
 800ad78:	e0bf      	b.n	800aefa <UART_SetConfig+0x346>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a45      	ldr	r2, [pc, #276]	; (800ae94 <UART_SetConfig+0x2e0>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d125      	bne.n	800add0 <UART_SetConfig+0x21c>
 800ad84:	4b3f      	ldr	r3, [pc, #252]	; (800ae84 <UART_SetConfig+0x2d0>)
 800ad86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad92:	d017      	beq.n	800adc4 <UART_SetConfig+0x210>
 800ad94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad98:	d817      	bhi.n	800adca <UART_SetConfig+0x216>
 800ad9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad9e:	d00b      	beq.n	800adb8 <UART_SetConfig+0x204>
 800ada0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ada4:	d811      	bhi.n	800adca <UART_SetConfig+0x216>
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d003      	beq.n	800adb2 <UART_SetConfig+0x1fe>
 800adaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adae:	d006      	beq.n	800adbe <UART_SetConfig+0x20a>
 800adb0:	e00b      	b.n	800adca <UART_SetConfig+0x216>
 800adb2:	2300      	movs	r3, #0
 800adb4:	77fb      	strb	r3, [r7, #31]
 800adb6:	e0a0      	b.n	800aefa <UART_SetConfig+0x346>
 800adb8:	2302      	movs	r3, #2
 800adba:	77fb      	strb	r3, [r7, #31]
 800adbc:	e09d      	b.n	800aefa <UART_SetConfig+0x346>
 800adbe:	2304      	movs	r3, #4
 800adc0:	77fb      	strb	r3, [r7, #31]
 800adc2:	e09a      	b.n	800aefa <UART_SetConfig+0x346>
 800adc4:	2308      	movs	r3, #8
 800adc6:	77fb      	strb	r3, [r7, #31]
 800adc8:	e097      	b.n	800aefa <UART_SetConfig+0x346>
 800adca:	2310      	movs	r3, #16
 800adcc:	77fb      	strb	r3, [r7, #31]
 800adce:	e094      	b.n	800aefa <UART_SetConfig+0x346>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a30      	ldr	r2, [pc, #192]	; (800ae98 <UART_SetConfig+0x2e4>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d125      	bne.n	800ae26 <UART_SetConfig+0x272>
 800adda:	4b2a      	ldr	r3, [pc, #168]	; (800ae84 <UART_SetConfig+0x2d0>)
 800addc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ade0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ade4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ade8:	d017      	beq.n	800ae1a <UART_SetConfig+0x266>
 800adea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800adee:	d817      	bhi.n	800ae20 <UART_SetConfig+0x26c>
 800adf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adf4:	d00b      	beq.n	800ae0e <UART_SetConfig+0x25a>
 800adf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adfa:	d811      	bhi.n	800ae20 <UART_SetConfig+0x26c>
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d003      	beq.n	800ae08 <UART_SetConfig+0x254>
 800ae00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae04:	d006      	beq.n	800ae14 <UART_SetConfig+0x260>
 800ae06:	e00b      	b.n	800ae20 <UART_SetConfig+0x26c>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	77fb      	strb	r3, [r7, #31]
 800ae0c:	e075      	b.n	800aefa <UART_SetConfig+0x346>
 800ae0e:	2302      	movs	r3, #2
 800ae10:	77fb      	strb	r3, [r7, #31]
 800ae12:	e072      	b.n	800aefa <UART_SetConfig+0x346>
 800ae14:	2304      	movs	r3, #4
 800ae16:	77fb      	strb	r3, [r7, #31]
 800ae18:	e06f      	b.n	800aefa <UART_SetConfig+0x346>
 800ae1a:	2308      	movs	r3, #8
 800ae1c:	77fb      	strb	r3, [r7, #31]
 800ae1e:	e06c      	b.n	800aefa <UART_SetConfig+0x346>
 800ae20:	2310      	movs	r3, #16
 800ae22:	77fb      	strb	r3, [r7, #31]
 800ae24:	e069      	b.n	800aefa <UART_SetConfig+0x346>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a1c      	ldr	r2, [pc, #112]	; (800ae9c <UART_SetConfig+0x2e8>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d137      	bne.n	800aea0 <UART_SetConfig+0x2ec>
 800ae30:	4b14      	ldr	r3, [pc, #80]	; (800ae84 <UART_SetConfig+0x2d0>)
 800ae32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae36:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ae3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae3e:	d017      	beq.n	800ae70 <UART_SetConfig+0x2bc>
 800ae40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae44:	d817      	bhi.n	800ae76 <UART_SetConfig+0x2c2>
 800ae46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae4a:	d00b      	beq.n	800ae64 <UART_SetConfig+0x2b0>
 800ae4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae50:	d811      	bhi.n	800ae76 <UART_SetConfig+0x2c2>
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <UART_SetConfig+0x2aa>
 800ae56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae5a:	d006      	beq.n	800ae6a <UART_SetConfig+0x2b6>
 800ae5c:	e00b      	b.n	800ae76 <UART_SetConfig+0x2c2>
 800ae5e:	2300      	movs	r3, #0
 800ae60:	77fb      	strb	r3, [r7, #31]
 800ae62:	e04a      	b.n	800aefa <UART_SetConfig+0x346>
 800ae64:	2302      	movs	r3, #2
 800ae66:	77fb      	strb	r3, [r7, #31]
 800ae68:	e047      	b.n	800aefa <UART_SetConfig+0x346>
 800ae6a:	2304      	movs	r3, #4
 800ae6c:	77fb      	strb	r3, [r7, #31]
 800ae6e:	e044      	b.n	800aefa <UART_SetConfig+0x346>
 800ae70:	2308      	movs	r3, #8
 800ae72:	77fb      	strb	r3, [r7, #31]
 800ae74:	e041      	b.n	800aefa <UART_SetConfig+0x346>
 800ae76:	2310      	movs	r3, #16
 800ae78:	77fb      	strb	r3, [r7, #31]
 800ae7a:	e03e      	b.n	800aefa <UART_SetConfig+0x346>
 800ae7c:	efff69f3 	.word	0xefff69f3
 800ae80:	40011000 	.word	0x40011000
 800ae84:	40023800 	.word	0x40023800
 800ae88:	40004400 	.word	0x40004400
 800ae8c:	40004800 	.word	0x40004800
 800ae90:	40004c00 	.word	0x40004c00
 800ae94:	40005000 	.word	0x40005000
 800ae98:	40011400 	.word	0x40011400
 800ae9c:	40007800 	.word	0x40007800
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a71      	ldr	r2, [pc, #452]	; (800b06c <UART_SetConfig+0x4b8>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d125      	bne.n	800aef6 <UART_SetConfig+0x342>
 800aeaa:	4b71      	ldr	r3, [pc, #452]	; (800b070 <UART_SetConfig+0x4bc>)
 800aeac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aeb4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aeb8:	d017      	beq.n	800aeea <UART_SetConfig+0x336>
 800aeba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aebe:	d817      	bhi.n	800aef0 <UART_SetConfig+0x33c>
 800aec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aec4:	d00b      	beq.n	800aede <UART_SetConfig+0x32a>
 800aec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeca:	d811      	bhi.n	800aef0 <UART_SetConfig+0x33c>
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d003      	beq.n	800aed8 <UART_SetConfig+0x324>
 800aed0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aed4:	d006      	beq.n	800aee4 <UART_SetConfig+0x330>
 800aed6:	e00b      	b.n	800aef0 <UART_SetConfig+0x33c>
 800aed8:	2300      	movs	r3, #0
 800aeda:	77fb      	strb	r3, [r7, #31]
 800aedc:	e00d      	b.n	800aefa <UART_SetConfig+0x346>
 800aede:	2302      	movs	r3, #2
 800aee0:	77fb      	strb	r3, [r7, #31]
 800aee2:	e00a      	b.n	800aefa <UART_SetConfig+0x346>
 800aee4:	2304      	movs	r3, #4
 800aee6:	77fb      	strb	r3, [r7, #31]
 800aee8:	e007      	b.n	800aefa <UART_SetConfig+0x346>
 800aeea:	2308      	movs	r3, #8
 800aeec:	77fb      	strb	r3, [r7, #31]
 800aeee:	e004      	b.n	800aefa <UART_SetConfig+0x346>
 800aef0:	2310      	movs	r3, #16
 800aef2:	77fb      	strb	r3, [r7, #31]
 800aef4:	e001      	b.n	800aefa <UART_SetConfig+0x346>
 800aef6:	2310      	movs	r3, #16
 800aef8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	69db      	ldr	r3, [r3, #28]
 800aefe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af02:	d15a      	bne.n	800afba <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800af04:	7ffb      	ldrb	r3, [r7, #31]
 800af06:	2b08      	cmp	r3, #8
 800af08:	d827      	bhi.n	800af5a <UART_SetConfig+0x3a6>
 800af0a:	a201      	add	r2, pc, #4	; (adr r2, 800af10 <UART_SetConfig+0x35c>)
 800af0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af10:	0800af35 	.word	0x0800af35
 800af14:	0800af3d 	.word	0x0800af3d
 800af18:	0800af45 	.word	0x0800af45
 800af1c:	0800af5b 	.word	0x0800af5b
 800af20:	0800af4b 	.word	0x0800af4b
 800af24:	0800af5b 	.word	0x0800af5b
 800af28:	0800af5b 	.word	0x0800af5b
 800af2c:	0800af5b 	.word	0x0800af5b
 800af30:	0800af53 	.word	0x0800af53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af34:	f7fd fce0 	bl	80088f8 <HAL_RCC_GetPCLK1Freq>
 800af38:	61b8      	str	r0, [r7, #24]
        break;
 800af3a:	e013      	b.n	800af64 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af3c:	f7fd fcf0 	bl	8008920 <HAL_RCC_GetPCLK2Freq>
 800af40:	61b8      	str	r0, [r7, #24]
        break;
 800af42:	e00f      	b.n	800af64 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af44:	4b4b      	ldr	r3, [pc, #300]	; (800b074 <UART_SetConfig+0x4c0>)
 800af46:	61bb      	str	r3, [r7, #24]
        break;
 800af48:	e00c      	b.n	800af64 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af4a:	f7fd fc13 	bl	8008774 <HAL_RCC_GetSysClockFreq>
 800af4e:	61b8      	str	r0, [r7, #24]
        break;
 800af50:	e008      	b.n	800af64 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af56:	61bb      	str	r3, [r7, #24]
        break;
 800af58:	e004      	b.n	800af64 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	77bb      	strb	r3, [r7, #30]
        break;
 800af62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d074      	beq.n	800b054 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	005a      	lsls	r2, r3, #1
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	085b      	lsrs	r3, r3, #1
 800af74:	441a      	add	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	2b0f      	cmp	r3, #15
 800af84:	d916      	bls.n	800afb4 <UART_SetConfig+0x400>
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af8c:	d212      	bcs.n	800afb4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	b29b      	uxth	r3, r3
 800af92:	f023 030f 	bic.w	r3, r3, #15
 800af96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	085b      	lsrs	r3, r3, #1
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	f003 0307 	and.w	r3, r3, #7
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	89fb      	ldrh	r3, [r7, #14]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	89fa      	ldrh	r2, [r7, #14]
 800afb0:	60da      	str	r2, [r3, #12]
 800afb2:	e04f      	b.n	800b054 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	77bb      	strb	r3, [r7, #30]
 800afb8:	e04c      	b.n	800b054 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800afba:	7ffb      	ldrb	r3, [r7, #31]
 800afbc:	2b08      	cmp	r3, #8
 800afbe:	d828      	bhi.n	800b012 <UART_SetConfig+0x45e>
 800afc0:	a201      	add	r2, pc, #4	; (adr r2, 800afc8 <UART_SetConfig+0x414>)
 800afc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc6:	bf00      	nop
 800afc8:	0800afed 	.word	0x0800afed
 800afcc:	0800aff5 	.word	0x0800aff5
 800afd0:	0800affd 	.word	0x0800affd
 800afd4:	0800b013 	.word	0x0800b013
 800afd8:	0800b003 	.word	0x0800b003
 800afdc:	0800b013 	.word	0x0800b013
 800afe0:	0800b013 	.word	0x0800b013
 800afe4:	0800b013 	.word	0x0800b013
 800afe8:	0800b00b 	.word	0x0800b00b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afec:	f7fd fc84 	bl	80088f8 <HAL_RCC_GetPCLK1Freq>
 800aff0:	61b8      	str	r0, [r7, #24]
        break;
 800aff2:	e013      	b.n	800b01c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aff4:	f7fd fc94 	bl	8008920 <HAL_RCC_GetPCLK2Freq>
 800aff8:	61b8      	str	r0, [r7, #24]
        break;
 800affa:	e00f      	b.n	800b01c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800affc:	4b1d      	ldr	r3, [pc, #116]	; (800b074 <UART_SetConfig+0x4c0>)
 800affe:	61bb      	str	r3, [r7, #24]
        break;
 800b000:	e00c      	b.n	800b01c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b002:	f7fd fbb7 	bl	8008774 <HAL_RCC_GetSysClockFreq>
 800b006:	61b8      	str	r0, [r7, #24]
        break;
 800b008:	e008      	b.n	800b01c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b00a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b00e:	61bb      	str	r3, [r7, #24]
        break;
 800b010:	e004      	b.n	800b01c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b012:	2300      	movs	r3, #0
 800b014:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	77bb      	strb	r3, [r7, #30]
        break;
 800b01a:	bf00      	nop
    }

    if (pclk != 0U)
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d018      	beq.n	800b054 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	085a      	lsrs	r2, r3, #1
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	441a      	add	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	fbb2 f3f3 	udiv	r3, r2, r3
 800b034:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2b0f      	cmp	r3, #15
 800b03a:	d909      	bls.n	800b050 <UART_SetConfig+0x49c>
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b042:	d205      	bcs.n	800b050 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	b29a      	uxth	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	60da      	str	r2, [r3, #12]
 800b04e:	e001      	b.n	800b054 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b060:	7fbb      	ldrb	r3, [r7, #30]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3720      	adds	r7, #32
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	40007c00 	.word	0x40007c00
 800b070:	40023800 	.word	0x40023800
 800b074:	00f42400 	.word	0x00f42400

0800b078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b084:	f003 0301 	and.w	r3, r3, #1
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00a      	beq.n	800b0a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	430a      	orrs	r2, r1
 800b0a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a6:	f003 0302 	and.w	r3, r3, #2
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00a      	beq.n	800b0c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	430a      	orrs	r2, r1
 800b0c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	f003 0304 	and.w	r3, r3, #4
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00a      	beq.n	800b0e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	430a      	orrs	r2, r1
 800b0e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ea:	f003 0308 	and.w	r3, r3, #8
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00a      	beq.n	800b108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	430a      	orrs	r2, r1
 800b106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b10c:	f003 0310 	and.w	r3, r3, #16
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00a      	beq.n	800b12a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	430a      	orrs	r2, r1
 800b128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12e:	f003 0320 	and.w	r3, r3, #32
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00a      	beq.n	800b14c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	430a      	orrs	r2, r1
 800b14a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b154:	2b00      	cmp	r3, #0
 800b156:	d01a      	beq.n	800b18e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	430a      	orrs	r2, r1
 800b16c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b176:	d10a      	bne.n	800b18e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	430a      	orrs	r2, r1
 800b18c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00a      	beq.n	800b1b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	430a      	orrs	r2, r1
 800b1ae:	605a      	str	r2, [r3, #4]
  }
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af02      	add	r7, sp, #8
 800b1c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1cc:	f7f9 feec 	bl	8004fa8 <HAL_GetTick>
 800b1d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 0308 	and.w	r3, r3, #8
 800b1dc:	2b08      	cmp	r3, #8
 800b1de:	d10e      	bne.n	800b1fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 f817 	bl	800b222 <UART_WaitOnFlagUntilTimeout>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	e00d      	b.n	800b21a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2220      	movs	r2, #32
 800b202:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2220      	movs	r2, #32
 800b208:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b09c      	sub	sp, #112	; 0x70
 800b226:	af00      	add	r7, sp, #0
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	603b      	str	r3, [r7, #0]
 800b22e:	4613      	mov	r3, r2
 800b230:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b232:	e0a5      	b.n	800b380 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23a:	f000 80a1 	beq.w	800b380 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b23e:	f7f9 feb3 	bl	8004fa8 <HAL_GetTick>
 800b242:	4602      	mov	r2, r0
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d302      	bcc.n	800b254 <UART_WaitOnFlagUntilTimeout+0x32>
 800b24e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b250:	2b00      	cmp	r3, #0
 800b252:	d13e      	bne.n	800b2d2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b264:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b268:	667b      	str	r3, [r7, #100]	; 0x64
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b272:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b274:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b276:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b278:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b27a:	e841 2300 	strex	r3, r2, [r1]
 800b27e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1e6      	bne.n	800b254 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3308      	adds	r3, #8
 800b28c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b290:	e853 3f00 	ldrex	r3, [r3]
 800b294:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b298:	f023 0301 	bic.w	r3, r3, #1
 800b29c:	663b      	str	r3, [r7, #96]	; 0x60
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3308      	adds	r3, #8
 800b2a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b2a6:	64ba      	str	r2, [r7, #72]	; 0x48
 800b2a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2ae:	e841 2300 	strex	r3, r2, [r1]
 800b2b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b2b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1e5      	bne.n	800b286 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	e067      	b.n	800b3a2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0304 	and.w	r3, r3, #4
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d04f      	beq.n	800b380 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2ee:	d147      	bne.n	800b380 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	e853 3f00 	ldrex	r3, [r3]
 800b306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b30e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	461a      	mov	r2, r3
 800b316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b318:	637b      	str	r3, [r7, #52]	; 0x34
 800b31a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b31c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b31e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b320:	e841 2300 	strex	r3, r2, [r1]
 800b324:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1e6      	bne.n	800b2fa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	3308      	adds	r3, #8
 800b332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	e853 3f00 	ldrex	r3, [r3]
 800b33a:	613b      	str	r3, [r7, #16]
   return(result);
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	f023 0301 	bic.w	r3, r3, #1
 800b342:	66bb      	str	r3, [r7, #104]	; 0x68
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	3308      	adds	r3, #8
 800b34a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b34c:	623a      	str	r2, [r7, #32]
 800b34e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b350:	69f9      	ldr	r1, [r7, #28]
 800b352:	6a3a      	ldr	r2, [r7, #32]
 800b354:	e841 2300 	strex	r3, r2, [r1]
 800b358:	61bb      	str	r3, [r7, #24]
   return(result);
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d1e5      	bne.n	800b32c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2220      	movs	r2, #32
 800b364:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2220      	movs	r2, #32
 800b36a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2220      	movs	r2, #32
 800b370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e010      	b.n	800b3a2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	69da      	ldr	r2, [r3, #28]
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	4013      	ands	r3, r2
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	bf0c      	ite	eq
 800b390:	2301      	moveq	r3, #1
 800b392:	2300      	movne	r3, #0
 800b394:	b2db      	uxtb	r3, r3
 800b396:	461a      	mov	r2, r3
 800b398:	79fb      	ldrb	r3, [r7, #7]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	f43f af4a 	beq.w	800b234 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3770      	adds	r7, #112	; 0x70
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b095      	sub	sp, #84	; 0x54
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ba:	e853 3f00 	ldrex	r3, [r3]
 800b3be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3d0:	643b      	str	r3, [r7, #64]	; 0x40
 800b3d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3d8:	e841 2300 	strex	r3, r2, [r1]
 800b3dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1e6      	bne.n	800b3b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3308      	adds	r3, #8
 800b3ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	e853 3f00 	ldrex	r3, [r3]
 800b3f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	f023 0301 	bic.w	r3, r3, #1
 800b3fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3308      	adds	r3, #8
 800b402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b404:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b40a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b40c:	e841 2300 	strex	r3, r2, [r1]
 800b410:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1e5      	bne.n	800b3e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d118      	bne.n	800b452 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	e853 3f00 	ldrex	r3, [r3]
 800b42c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	f023 0310 	bic.w	r3, r3, #16
 800b434:	647b      	str	r3, [r7, #68]	; 0x44
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	461a      	mov	r2, r3
 800b43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b43e:	61bb      	str	r3, [r7, #24]
 800b440:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b442:	6979      	ldr	r1, [r7, #20]
 800b444:	69ba      	ldr	r2, [r7, #24]
 800b446:	e841 2300 	strex	r3, r2, [r1]
 800b44a:	613b      	str	r3, [r7, #16]
   return(result);
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1e6      	bne.n	800b420 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2220      	movs	r2, #32
 800b456:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b464:	bf00      	nop
 800b466:	3754      	adds	r7, #84	; 0x54
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b47c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2200      	movs	r2, #0
 800b48a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f7ff fb7a 	bl	800ab88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b494:	bf00      	nop
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b088      	sub	sp, #32
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4b8:	61fb      	str	r3, [r7, #28]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	61bb      	str	r3, [r7, #24]
 800b4c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c6:	6979      	ldr	r1, [r7, #20]
 800b4c8:	69ba      	ldr	r2, [r7, #24]
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1e6      	bne.n	800b4a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2220      	movs	r2, #32
 800b4da:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f7ff fb46 	bl	800ab74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4e8:	bf00      	nop
 800b4ea:	3720      	adds	r7, #32
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d121      	bne.n	800b546 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	4b27      	ldr	r3, [pc, #156]	; (800b5a4 <FMC_SDRAM_Init+0xb4>)
 800b508:	4013      	ands	r3, r2
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	6851      	ldr	r1, [r2, #4]
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	6892      	ldr	r2, [r2, #8]
 800b512:	4311      	orrs	r1, r2
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	68d2      	ldr	r2, [r2, #12]
 800b518:	4311      	orrs	r1, r2
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	6912      	ldr	r2, [r2, #16]
 800b51e:	4311      	orrs	r1, r2
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	6952      	ldr	r2, [r2, #20]
 800b524:	4311      	orrs	r1, r2
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	6992      	ldr	r2, [r2, #24]
 800b52a:	4311      	orrs	r1, r2
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	69d2      	ldr	r2, [r2, #28]
 800b530:	4311      	orrs	r1, r2
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	6a12      	ldr	r2, [r2, #32]
 800b536:	4311      	orrs	r1, r2
 800b538:	683a      	ldr	r2, [r7, #0]
 800b53a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b53c:	430a      	orrs	r2, r1
 800b53e:	431a      	orrs	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	601a      	str	r2, [r3, #0]
 800b544:	e026      	b.n	800b594 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	69d9      	ldr	r1, [r3, #28]
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	4319      	orrs	r1, r3
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55c:	430b      	orrs	r3, r1
 800b55e:	431a      	orrs	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	4b0e      	ldr	r3, [pc, #56]	; (800b5a4 <FMC_SDRAM_Init+0xb4>)
 800b56a:	4013      	ands	r3, r2
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	6851      	ldr	r1, [r2, #4]
 800b570:	683a      	ldr	r2, [r7, #0]
 800b572:	6892      	ldr	r2, [r2, #8]
 800b574:	4311      	orrs	r1, r2
 800b576:	683a      	ldr	r2, [r7, #0]
 800b578:	68d2      	ldr	r2, [r2, #12]
 800b57a:	4311      	orrs	r1, r2
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	6912      	ldr	r2, [r2, #16]
 800b580:	4311      	orrs	r1, r2
 800b582:	683a      	ldr	r2, [r7, #0]
 800b584:	6952      	ldr	r2, [r2, #20]
 800b586:	4311      	orrs	r1, r2
 800b588:	683a      	ldr	r2, [r7, #0]
 800b58a:	6992      	ldr	r2, [r2, #24]
 800b58c:	430a      	orrs	r2, r1
 800b58e:	431a      	orrs	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	370c      	adds	r7, #12
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	ffff8000 	.word	0xffff8000

0800b5a8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d128      	bne.n	800b60c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	1e59      	subs	r1, r3, #1
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	011b      	lsls	r3, r3, #4
 800b5d0:	4319      	orrs	r1, r3
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	021b      	lsls	r3, r3, #8
 800b5da:	4319      	orrs	r1, r3
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	031b      	lsls	r3, r3, #12
 800b5e4:	4319      	orrs	r1, r3
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	041b      	lsls	r3, r3, #16
 800b5ee:	4319      	orrs	r1, r3
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	051b      	lsls	r3, r3, #20
 800b5f8:	4319      	orrs	r1, r3
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	699b      	ldr	r3, [r3, #24]
 800b5fe:	3b01      	subs	r3, #1
 800b600:	061b      	lsls	r3, r3, #24
 800b602:	430b      	orrs	r3, r1
 800b604:	431a      	orrs	r2, r3
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	609a      	str	r2, [r3, #8]
 800b60a:	e02d      	b.n	800b668 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	689a      	ldr	r2, [r3, #8]
 800b610:	4b19      	ldr	r3, [pc, #100]	; (800b678 <FMC_SDRAM_Timing_Init+0xd0>)
 800b612:	4013      	ands	r3, r2
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	68d2      	ldr	r2, [r2, #12]
 800b618:	3a01      	subs	r2, #1
 800b61a:	0311      	lsls	r1, r2, #12
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	6952      	ldr	r2, [r2, #20]
 800b620:	3a01      	subs	r2, #1
 800b622:	0512      	lsls	r2, r2, #20
 800b624:	430a      	orrs	r2, r1
 800b626:	431a      	orrs	r2, r3
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	1e59      	subs	r1, r3, #1
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	3b01      	subs	r3, #1
 800b640:	011b      	lsls	r3, r3, #4
 800b642:	4319      	orrs	r1, r3
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	689b      	ldr	r3, [r3, #8]
 800b648:	3b01      	subs	r3, #1
 800b64a:	021b      	lsls	r3, r3, #8
 800b64c:	4319      	orrs	r1, r3
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	3b01      	subs	r3, #1
 800b654:	041b      	lsls	r3, r3, #16
 800b656:	4319      	orrs	r1, r3
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	061b      	lsls	r3, r3, #24
 800b660:	430b      	orrs	r3, r1
 800b662:	431a      	orrs	r2, r3
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
 800b676:	bf00      	nop
 800b678:	ff0f0fff 	.word	0xff0f0fff

0800b67c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	691a      	ldr	r2, [r3, #16]
 800b68c:	4b0c      	ldr	r3, [pc, #48]	; (800b6c0 <FMC_SDRAM_SendCommand+0x44>)
 800b68e:	4013      	ands	r3, r2
 800b690:	68ba      	ldr	r2, [r7, #8]
 800b692:	6811      	ldr	r1, [r2, #0]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	6852      	ldr	r2, [r2, #4]
 800b698:	4311      	orrs	r1, r2
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	6892      	ldr	r2, [r2, #8]
 800b69e:	3a01      	subs	r2, #1
 800b6a0:	0152      	lsls	r2, r2, #5
 800b6a2:	4311      	orrs	r1, r2
 800b6a4:	68ba      	ldr	r2, [r7, #8]
 800b6a6:	68d2      	ldr	r2, [r2, #12]
 800b6a8:	0252      	lsls	r2, r2, #9
 800b6aa:	430a      	orrs	r2, r1
 800b6ac:	431a      	orrs	r2, r3
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3714      	adds	r7, #20
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr
 800b6c0:	ffc00000 	.word	0xffc00000

0800b6c4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	695a      	ldr	r2, [r3, #20]
 800b6d2:	4b07      	ldr	r3, [pc, #28]	; (800b6f0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	0052      	lsls	r2, r2, #1
 800b6da:	431a      	orrs	r2, r3
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	ffffc001 	.word	0xffffc001

0800b6f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b6fe:	2300      	movs	r3, #0
 800b700:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b706:	2b84      	cmp	r3, #132	; 0x84
 800b708:	d005      	beq.n	800b716 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b70a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	4413      	add	r3, r2
 800b712:	3303      	adds	r3, #3
 800b714:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b716:	68fb      	ldr	r3, [r7, #12]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3714      	adds	r7, #20
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b728:	f001 f9e6 	bl	800caf8 <vTaskStartScheduler>
  
  return osOK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	bd80      	pop	{r7, pc}

0800b732 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b732:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b734:	b089      	sub	sp, #36	; 0x24
 800b736:	af04      	add	r7, sp, #16
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	695b      	ldr	r3, [r3, #20]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d020      	beq.n	800b786 <osThreadCreate+0x54>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d01c      	beq.n	800b786 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685c      	ldr	r4, [r3, #4]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681d      	ldr	r5, [r3, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	691e      	ldr	r6, [r3, #16]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b75e:	4618      	mov	r0, r3
 800b760:	f7ff ffc8 	bl	800b6f4 <makeFreeRtosPriority>
 800b764:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	695b      	ldr	r3, [r3, #20]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b76e:	9202      	str	r2, [sp, #8]
 800b770:	9301      	str	r3, [sp, #4]
 800b772:	9100      	str	r1, [sp, #0]
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	4632      	mov	r2, r6
 800b778:	4629      	mov	r1, r5
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 febe 	bl	800c4fc <xTaskCreateStatic>
 800b780:	4603      	mov	r3, r0
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	e01c      	b.n	800b7c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	685c      	ldr	r4, [r3, #4]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b792:	b29e      	uxth	r6, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff ffaa 	bl	800b6f4 <makeFreeRtosPriority>
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	f107 030c 	add.w	r3, r7, #12
 800b7a6:	9301      	str	r3, [sp, #4]
 800b7a8:	9200      	str	r2, [sp, #0]
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	4632      	mov	r2, r6
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f000 ff06 	bl	800c5c2 <xTaskCreate>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	2b01      	cmp	r3, #1
 800b7ba:	d001      	beq.n	800b7c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	e000      	b.n	800b7c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3714      	adds	r7, #20
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b7ca:	b580      	push	{r7, lr}
 800b7cc:	b084      	sub	sp, #16
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <osDelay+0x16>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	e000      	b.n	800b7e2 <osDelay+0x18>
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f001 f952 	bl	800ca8c <vTaskDelay>
  
  return osOK;
 800b7e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b7f2:	b590      	push	{r4, r7, lr}
 800b7f4:	b085      	sub	sp, #20
 800b7f6:	af02      	add	r7, sp, #8
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d011      	beq.n	800b828 <osMessageCreate+0x36>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	68db      	ldr	r3, [r3, #12]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00d      	beq.n	800b828 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6818      	ldr	r0, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6859      	ldr	r1, [r3, #4]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	689a      	ldr	r2, [r3, #8]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	2400      	movs	r4, #0
 800b81e:	9400      	str	r4, [sp, #0]
 800b820:	f000 f92e 	bl	800ba80 <xQueueGenericCreateStatic>
 800b824:	4603      	mov	r3, r0
 800b826:	e008      	b.n	800b83a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6818      	ldr	r0, [r3, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	4619      	mov	r1, r3
 800b834:	f000 f9a6 	bl	800bb84 <xQueueGenericCreate>
 800b838:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd90      	pop	{r4, r7, pc}

0800b842 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b842:	b480      	push	{r7}
 800b844:	b083      	sub	sp, #12
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f103 0208 	add.w	r2, r3, #8
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f04f 32ff 	mov.w	r2, #4294967295
 800b85a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f103 0208 	add.w	r2, r3, #8
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f103 0208 	add.w	r2, r3, #8
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b876:	bf00      	nop
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b882:	b480      	push	{r7}
 800b884:	b083      	sub	sp, #12
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	689a      	ldr	r2, [r3, #8]
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	689b      	ldr	r3, [r3, #8]
 800b8be:	683a      	ldr	r2, [r7, #0]
 800b8c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	683a      	ldr	r2, [r7, #0]
 800b8c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	1c5a      	adds	r2, r3, #1
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	601a      	str	r2, [r3, #0]
}
 800b8d8:	bf00      	nop
 800b8da:	3714      	adds	r7, #20
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fa:	d103      	bne.n	800b904 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	60fb      	str	r3, [r7, #12]
 800b902:	e00c      	b.n	800b91e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	3308      	adds	r3, #8
 800b908:	60fb      	str	r3, [r7, #12]
 800b90a:	e002      	b.n	800b912 <vListInsert+0x2e>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	60fb      	str	r3, [r7, #12]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d2f6      	bcs.n	800b90c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	685a      	ldr	r2, [r3, #4]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	683a      	ldr	r2, [r7, #0]
 800b92c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	1c5a      	adds	r2, r3, #1
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	601a      	str	r2, [r3, #0]
}
 800b94a:	bf00      	nop
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b956:	b480      	push	{r7}
 800b958:	b085      	sub	sp, #20
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	6892      	ldr	r2, [r2, #8]
 800b96c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	6852      	ldr	r2, [r2, #4]
 800b976:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d103      	bne.n	800b98a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	689a      	ldr	r2, [r3, #8]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	1e5a      	subs	r2, r3, #1
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3714      	adds	r7, #20
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
	...

0800b9ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10c      	bne.n	800b9da <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	b672      	cpsid	i
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	b662      	cpsie	i
 800b9d4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b9d6:	bf00      	nop
 800b9d8:	e7fe      	b.n	800b9d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b9da:	f001 ffff 	bl	800d9dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e6:	68f9      	ldr	r1, [r7, #12]
 800b9e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b9ea:	fb01 f303 	mul.w	r3, r1, r3
 800b9ee:	441a      	add	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	68f9      	ldr	r1, [r7, #12]
 800ba0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba10:	fb01 f303 	mul.w	r3, r1, r3
 800ba14:	441a      	add	r2, r3
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	22ff      	movs	r2, #255	; 0xff
 800ba1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	22ff      	movs	r2, #255	; 0xff
 800ba26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d114      	bne.n	800ba5a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d01a      	beq.n	800ba6e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3310      	adds	r3, #16
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f001 fab9 	bl	800cfb4 <xTaskRemoveFromEventList>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d012      	beq.n	800ba6e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ba48:	4b0c      	ldr	r3, [pc, #48]	; (800ba7c <xQueueGenericReset+0xd0>)
 800ba4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba4e:	601a      	str	r2, [r3, #0]
 800ba50:	f3bf 8f4f 	dsb	sy
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	e009      	b.n	800ba6e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	3310      	adds	r3, #16
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7ff feef 	bl	800b842 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	3324      	adds	r3, #36	; 0x24
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7ff feea 	bl	800b842 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ba6e:	f001 ffe9 	bl	800da44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ba72:	2301      	movs	r3, #1
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	e000ed04 	.word	0xe000ed04

0800ba80 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b08e      	sub	sp, #56	; 0x38
 800ba84:	af02      	add	r7, sp, #8
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	607a      	str	r2, [r7, #4]
 800ba8c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d10c      	bne.n	800baae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ba94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba98:	b672      	cpsid	i
 800ba9a:	f383 8811 	msr	BASEPRI, r3
 800ba9e:	f3bf 8f6f 	isb	sy
 800baa2:	f3bf 8f4f 	dsb	sy
 800baa6:	b662      	cpsie	i
 800baa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800baaa:	bf00      	nop
 800baac:	e7fe      	b.n	800baac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10c      	bne.n	800bace <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800bab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab8:	b672      	cpsid	i
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	b662      	cpsie	i
 800bac8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800baca:	bf00      	nop
 800bacc:	e7fe      	b.n	800bacc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <xQueueGenericCreateStatic+0x5a>
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <xQueueGenericCreateStatic+0x5e>
 800bada:	2301      	movs	r3, #1
 800badc:	e000      	b.n	800bae0 <xQueueGenericCreateStatic+0x60>
 800bade:	2300      	movs	r3, #0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10c      	bne.n	800bafe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae8:	b672      	cpsid	i
 800baea:	f383 8811 	msr	BASEPRI, r3
 800baee:	f3bf 8f6f 	isb	sy
 800baf2:	f3bf 8f4f 	dsb	sy
 800baf6:	b662      	cpsie	i
 800baf8:	623b      	str	r3, [r7, #32]
}
 800bafa:	bf00      	nop
 800bafc:	e7fe      	b.n	800bafc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d102      	bne.n	800bb0a <xQueueGenericCreateStatic+0x8a>
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <xQueueGenericCreateStatic+0x8e>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e000      	b.n	800bb10 <xQueueGenericCreateStatic+0x90>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d10c      	bne.n	800bb2e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800bb14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb18:	b672      	cpsid	i
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	b662      	cpsie	i
 800bb28:	61fb      	str	r3, [r7, #28]
}
 800bb2a:	bf00      	nop
 800bb2c:	e7fe      	b.n	800bb2c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bb2e:	2348      	movs	r3, #72	; 0x48
 800bb30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	2b48      	cmp	r3, #72	; 0x48
 800bb36:	d00c      	beq.n	800bb52 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800bb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3c:	b672      	cpsid	i
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	b662      	cpsie	i
 800bb4c:	61bb      	str	r3, [r7, #24]
}
 800bb4e:	bf00      	nop
 800bb50:	e7fe      	b.n	800bb50 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bb52:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00d      	beq.n	800bb7a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	4613      	mov	r3, r2
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	68b9      	ldr	r1, [r7, #8]
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f000 f847 	bl	800bc08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3730      	adds	r7, #48	; 0x30
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b08a      	sub	sp, #40	; 0x28
 800bb88:	af02      	add	r7, sp, #8
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10c      	bne.n	800bbb2 <xQueueGenericCreate+0x2e>
	__asm volatile
 800bb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9c:	b672      	cpsid	i
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	b662      	cpsie	i
 800bbac:	613b      	str	r3, [r7, #16]
}
 800bbae:	bf00      	nop
 800bbb0:	e7fe      	b.n	800bbb0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d102      	bne.n	800bbbe <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	61fb      	str	r3, [r7, #28]
 800bbbc:	e004      	b.n	800bbc8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	68ba      	ldr	r2, [r7, #8]
 800bbc2:	fb02 f303 	mul.w	r3, r2, r3
 800bbc6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	3348      	adds	r3, #72	; 0x48
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f001 ffed 	bl	800dbac <pvPortMalloc>
 800bbd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d011      	beq.n	800bbfe <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	3348      	adds	r3, #72	; 0x48
 800bbe2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bbec:	79fa      	ldrb	r2, [r7, #7]
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	9300      	str	r3, [sp, #0]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	68b9      	ldr	r1, [r7, #8]
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f000 f805 	bl	800bc08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bbfe:	69bb      	ldr	r3, [r7, #24]
	}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3720      	adds	r7, #32
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d103      	bne.n	800bc24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc1c:	69bb      	ldr	r3, [r7, #24]
 800bc1e:	69ba      	ldr	r2, [r7, #24]
 800bc20:	601a      	str	r2, [r3, #0]
 800bc22:	e002      	b.n	800bc2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc36:	2101      	movs	r1, #1
 800bc38:	69b8      	ldr	r0, [r7, #24]
 800bc3a:	f7ff feb7 	bl	800b9ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bc3e:	bf00      	nop
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b082      	sub	sp, #8
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00e      	beq.n	800bc72 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bc66:	2300      	movs	r3, #0
 800bc68:	2200      	movs	r2, #0
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f000 f81d 	bl	800bcac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bc72:	bf00      	nop
 800bc74:	3708      	adds	r7, #8
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b086      	sub	sp, #24
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	4603      	mov	r3, r0
 800bc82:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bc84:	2301      	movs	r3, #1
 800bc86:	617b      	str	r3, [r7, #20]
 800bc88:	2300      	movs	r3, #0
 800bc8a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bc8c:	79fb      	ldrb	r3, [r7, #7]
 800bc8e:	461a      	mov	r2, r3
 800bc90:	6939      	ldr	r1, [r7, #16]
 800bc92:	6978      	ldr	r0, [r7, #20]
 800bc94:	f7ff ff76 	bl	800bb84 <xQueueGenericCreate>
 800bc98:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f7ff ffd3 	bl	800bc46 <prvInitialiseMutex>

		return xNewQueue;
 800bca0:	68fb      	ldr	r3, [r7, #12]
	}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3718      	adds	r7, #24
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08e      	sub	sp, #56	; 0x38
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10c      	bne.n	800bce2 <xQueueGenericSend+0x36>
	__asm volatile
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	b672      	cpsid	i
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	b662      	cpsie	i
 800bcdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcde:	bf00      	nop
 800bce0:	e7fe      	b.n	800bce0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d103      	bne.n	800bcf0 <xQueueGenericSend+0x44>
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <xQueueGenericSend+0x48>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e000      	b.n	800bcf6 <xQueueGenericSend+0x4a>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d10c      	bne.n	800bd14 <xQueueGenericSend+0x68>
	__asm volatile
 800bcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfe:	b672      	cpsid	i
 800bd00:	f383 8811 	msr	BASEPRI, r3
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	b662      	cpsie	i
 800bd0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd10:	bf00      	nop
 800bd12:	e7fe      	b.n	800bd12 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d103      	bne.n	800bd22 <xQueueGenericSend+0x76>
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d101      	bne.n	800bd26 <xQueueGenericSend+0x7a>
 800bd22:	2301      	movs	r3, #1
 800bd24:	e000      	b.n	800bd28 <xQueueGenericSend+0x7c>
 800bd26:	2300      	movs	r3, #0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10c      	bne.n	800bd46 <xQueueGenericSend+0x9a>
	__asm volatile
 800bd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd30:	b672      	cpsid	i
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	b662      	cpsie	i
 800bd40:	623b      	str	r3, [r7, #32]
}
 800bd42:	bf00      	nop
 800bd44:	e7fe      	b.n	800bd44 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd46:	f001 fafd 	bl	800d344 <xTaskGetSchedulerState>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d102      	bne.n	800bd56 <xQueueGenericSend+0xaa>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <xQueueGenericSend+0xae>
 800bd56:	2301      	movs	r3, #1
 800bd58:	e000      	b.n	800bd5c <xQueueGenericSend+0xb0>
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10c      	bne.n	800bd7a <xQueueGenericSend+0xce>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	b672      	cpsid	i
 800bd66:	f383 8811 	msr	BASEPRI, r3
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	b662      	cpsie	i
 800bd74:	61fb      	str	r3, [r7, #28]
}
 800bd76:	bf00      	nop
 800bd78:	e7fe      	b.n	800bd78 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd7a:	f001 fe2f 	bl	800d9dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d302      	bcc.n	800bd90 <xQueueGenericSend+0xe4>
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	d129      	bne.n	800bde4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	68b9      	ldr	r1, [r7, #8]
 800bd94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd96:	f000 faa1 	bl	800c2dc <prvCopyDataToQueue>
 800bd9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d010      	beq.n	800bdc6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda6:	3324      	adds	r3, #36	; 0x24
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f001 f903 	bl	800cfb4 <xTaskRemoveFromEventList>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d013      	beq.n	800bddc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bdb4:	4b3f      	ldr	r3, [pc, #252]	; (800beb4 <xQueueGenericSend+0x208>)
 800bdb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdba:	601a      	str	r2, [r3, #0]
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	e00a      	b.n	800bddc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d007      	beq.n	800bddc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bdcc:	4b39      	ldr	r3, [pc, #228]	; (800beb4 <xQueueGenericSend+0x208>)
 800bdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bddc:	f001 fe32 	bl	800da44 <vPortExitCritical>
				return pdPASS;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e063      	b.n	800beac <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d103      	bne.n	800bdf2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdea:	f001 fe2b 	bl	800da44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	e05c      	b.n	800beac <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d106      	bne.n	800be06 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdf8:	f107 0314 	add.w	r3, r7, #20
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f001 f93d 	bl	800d07c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be02:	2301      	movs	r3, #1
 800be04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be06:	f001 fe1d 	bl	800da44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be0a:	f000 fee3 	bl	800cbd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be0e:	f001 fde5 	bl	800d9dc <vPortEnterCritical>
 800be12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be18:	b25b      	sxtb	r3, r3
 800be1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1e:	d103      	bne.n	800be28 <xQueueGenericSend+0x17c>
 800be20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be22:	2200      	movs	r2, #0
 800be24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be2e:	b25b      	sxtb	r3, r3
 800be30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be34:	d103      	bne.n	800be3e <xQueueGenericSend+0x192>
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be3e:	f001 fe01 	bl	800da44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be42:	1d3a      	adds	r2, r7, #4
 800be44:	f107 0314 	add.w	r3, r7, #20
 800be48:	4611      	mov	r1, r2
 800be4a:	4618      	mov	r0, r3
 800be4c:	f001 f92c 	bl	800d0a8 <xTaskCheckForTimeOut>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d124      	bne.n	800bea0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be58:	f000 fb38 	bl	800c4cc <prvIsQueueFull>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d018      	beq.n	800be94 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	3310      	adds	r3, #16
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	4611      	mov	r1, r2
 800be6a:	4618      	mov	r0, r3
 800be6c:	f001 f87c 	bl	800cf68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be72:	f000 fac3 	bl	800c3fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be76:	f000 febb 	bl	800cbf0 <xTaskResumeAll>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f47f af7c 	bne.w	800bd7a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800be82:	4b0c      	ldr	r3, [pc, #48]	; (800beb4 <xQueueGenericSend+0x208>)
 800be84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be88:	601a      	str	r2, [r3, #0]
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	e772      	b.n	800bd7a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be96:	f000 fab1 	bl	800c3fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be9a:	f000 fea9 	bl	800cbf0 <xTaskResumeAll>
 800be9e:	e76c      	b.n	800bd7a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bea2:	f000 faab 	bl	800c3fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bea6:	f000 fea3 	bl	800cbf0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800beaa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800beac:	4618      	mov	r0, r3
 800beae:	3738      	adds	r7, #56	; 0x38
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	e000ed04 	.word	0xe000ed04

0800beb8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b08c      	sub	sp, #48	; 0x30
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bec4:	2300      	movs	r3, #0
 800bec6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800becc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10c      	bne.n	800beec <xQueueReceive+0x34>
	__asm volatile
 800bed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed6:	b672      	cpsid	i
 800bed8:	f383 8811 	msr	BASEPRI, r3
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	f3bf 8f4f 	dsb	sy
 800bee4:	b662      	cpsie	i
 800bee6:	623b      	str	r3, [r7, #32]
}
 800bee8:	bf00      	nop
 800beea:	e7fe      	b.n	800beea <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d103      	bne.n	800befa <xQueueReceive+0x42>
 800bef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d101      	bne.n	800befe <xQueueReceive+0x46>
 800befa:	2301      	movs	r3, #1
 800befc:	e000      	b.n	800bf00 <xQueueReceive+0x48>
 800befe:	2300      	movs	r3, #0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10c      	bne.n	800bf1e <xQueueReceive+0x66>
	__asm volatile
 800bf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf08:	b672      	cpsid	i
 800bf0a:	f383 8811 	msr	BASEPRI, r3
 800bf0e:	f3bf 8f6f 	isb	sy
 800bf12:	f3bf 8f4f 	dsb	sy
 800bf16:	b662      	cpsie	i
 800bf18:	61fb      	str	r3, [r7, #28]
}
 800bf1a:	bf00      	nop
 800bf1c:	e7fe      	b.n	800bf1c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf1e:	f001 fa11 	bl	800d344 <xTaskGetSchedulerState>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d102      	bne.n	800bf2e <xQueueReceive+0x76>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d101      	bne.n	800bf32 <xQueueReceive+0x7a>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e000      	b.n	800bf34 <xQueueReceive+0x7c>
 800bf32:	2300      	movs	r3, #0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10c      	bne.n	800bf52 <xQueueReceive+0x9a>
	__asm volatile
 800bf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3c:	b672      	cpsid	i
 800bf3e:	f383 8811 	msr	BASEPRI, r3
 800bf42:	f3bf 8f6f 	isb	sy
 800bf46:	f3bf 8f4f 	dsb	sy
 800bf4a:	b662      	cpsie	i
 800bf4c:	61bb      	str	r3, [r7, #24]
}
 800bf4e:	bf00      	nop
 800bf50:	e7fe      	b.n	800bf50 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf52:	f001 fd43 	bl	800d9dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d01f      	beq.n	800bfa2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf62:	68b9      	ldr	r1, [r7, #8]
 800bf64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf66:	f000 fa23 	bl	800c3b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	1e5a      	subs	r2, r3, #1
 800bf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf70:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00f      	beq.n	800bf9a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7c:	3310      	adds	r3, #16
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f001 f818 	bl	800cfb4 <xTaskRemoveFromEventList>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d007      	beq.n	800bf9a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf8a:	4b3d      	ldr	r3, [pc, #244]	; (800c080 <xQueueReceive+0x1c8>)
 800bf8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf90:	601a      	str	r2, [r3, #0]
 800bf92:	f3bf 8f4f 	dsb	sy
 800bf96:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf9a:	f001 fd53 	bl	800da44 <vPortExitCritical>
				return pdPASS;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e069      	b.n	800c076 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d103      	bne.n	800bfb0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfa8:	f001 fd4c 	bl	800da44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfac:	2300      	movs	r3, #0
 800bfae:	e062      	b.n	800c076 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d106      	bne.n	800bfc4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfb6:	f107 0310 	add.w	r3, r7, #16
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f001 f85e 	bl	800d07c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfc4:	f001 fd3e 	bl	800da44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfc8:	f000 fe04 	bl	800cbd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfcc:	f001 fd06 	bl	800d9dc <vPortEnterCritical>
 800bfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfd6:	b25b      	sxtb	r3, r3
 800bfd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfdc:	d103      	bne.n	800bfe6 <xQueueReceive+0x12e>
 800bfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfec:	b25b      	sxtb	r3, r3
 800bfee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff2:	d103      	bne.n	800bffc <xQueueReceive+0x144>
 800bff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bffc:	f001 fd22 	bl	800da44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c000:	1d3a      	adds	r2, r7, #4
 800c002:	f107 0310 	add.w	r3, r7, #16
 800c006:	4611      	mov	r1, r2
 800c008:	4618      	mov	r0, r3
 800c00a:	f001 f84d 	bl	800d0a8 <xTaskCheckForTimeOut>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d123      	bne.n	800c05c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c016:	f000 fa43 	bl	800c4a0 <prvIsQueueEmpty>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d017      	beq.n	800c050 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c022:	3324      	adds	r3, #36	; 0x24
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	4611      	mov	r1, r2
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 ff9d 	bl	800cf68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c02e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c030:	f000 f9e4 	bl	800c3fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c034:	f000 fddc 	bl	800cbf0 <xTaskResumeAll>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d189      	bne.n	800bf52 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800c03e:	4b10      	ldr	r3, [pc, #64]	; (800c080 <xQueueReceive+0x1c8>)
 800c040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c044:	601a      	str	r2, [r3, #0]
 800c046:	f3bf 8f4f 	dsb	sy
 800c04a:	f3bf 8f6f 	isb	sy
 800c04e:	e780      	b.n	800bf52 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c052:	f000 f9d3 	bl	800c3fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c056:	f000 fdcb 	bl	800cbf0 <xTaskResumeAll>
 800c05a:	e77a      	b.n	800bf52 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c05c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c05e:	f000 f9cd 	bl	800c3fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c062:	f000 fdc5 	bl	800cbf0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c068:	f000 fa1a 	bl	800c4a0 <prvIsQueueEmpty>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f43f af6f 	beq.w	800bf52 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c074:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c076:	4618      	mov	r0, r3
 800c078:	3730      	adds	r7, #48	; 0x30
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	e000ed04 	.word	0xe000ed04

0800c084 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b08e      	sub	sp, #56	; 0x38
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c08e:	2300      	movs	r3, #0
 800c090:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c096:	2300      	movs	r3, #0
 800c098:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d10c      	bne.n	800c0ba <xQueueSemaphoreTake+0x36>
	__asm volatile
 800c0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a4:	b672      	cpsid	i
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	b662      	cpsie	i
 800c0b4:	623b      	str	r3, [r7, #32]
}
 800c0b6:	bf00      	nop
 800c0b8:	e7fe      	b.n	800c0b8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00c      	beq.n	800c0dc <xQueueSemaphoreTake+0x58>
	__asm volatile
 800c0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c6:	b672      	cpsid	i
 800c0c8:	f383 8811 	msr	BASEPRI, r3
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	b662      	cpsie	i
 800c0d6:	61fb      	str	r3, [r7, #28]
}
 800c0d8:	bf00      	nop
 800c0da:	e7fe      	b.n	800c0da <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0dc:	f001 f932 	bl	800d344 <xTaskGetSchedulerState>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d102      	bne.n	800c0ec <xQueueSemaphoreTake+0x68>
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d101      	bne.n	800c0f0 <xQueueSemaphoreTake+0x6c>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e000      	b.n	800c0f2 <xQueueSemaphoreTake+0x6e>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d10c      	bne.n	800c110 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800c0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fa:	b672      	cpsid	i
 800c0fc:	f383 8811 	msr	BASEPRI, r3
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	b662      	cpsie	i
 800c10a:	61bb      	str	r3, [r7, #24]
}
 800c10c:	bf00      	nop
 800c10e:	e7fe      	b.n	800c10e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c110:	f001 fc64 	bl	800d9dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c118:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d024      	beq.n	800c16a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c122:	1e5a      	subs	r2, r3, #1
 800c124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c126:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d104      	bne.n	800c13a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c130:	f001 face 	bl	800d6d0 <pvTaskIncrementMutexHeldCount>
 800c134:	4602      	mov	r2, r0
 800c136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c138:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00f      	beq.n	800c162 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c144:	3310      	adds	r3, #16
 800c146:	4618      	mov	r0, r3
 800c148:	f000 ff34 	bl	800cfb4 <xTaskRemoveFromEventList>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d007      	beq.n	800c162 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c152:	4b55      	ldr	r3, [pc, #340]	; (800c2a8 <xQueueSemaphoreTake+0x224>)
 800c154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c158:	601a      	str	r2, [r3, #0]
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c162:	f001 fc6f 	bl	800da44 <vPortExitCritical>
				return pdPASS;
 800c166:	2301      	movs	r3, #1
 800c168:	e099      	b.n	800c29e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d113      	bne.n	800c198 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00c      	beq.n	800c190 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800c176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17a:	b672      	cpsid	i
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	b662      	cpsie	i
 800c18a:	617b      	str	r3, [r7, #20]
}
 800c18c:	bf00      	nop
 800c18e:	e7fe      	b.n	800c18e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c190:	f001 fc58 	bl	800da44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c194:	2300      	movs	r3, #0
 800c196:	e082      	b.n	800c29e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d106      	bne.n	800c1ac <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c19e:	f107 030c 	add.w	r3, r7, #12
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 ff6a 	bl	800d07c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1ac:	f001 fc4a 	bl	800da44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1b0:	f000 fd10 	bl	800cbd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1b4:	f001 fc12 	bl	800d9dc <vPortEnterCritical>
 800c1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1be:	b25b      	sxtb	r3, r3
 800c1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c4:	d103      	bne.n	800c1ce <xQueueSemaphoreTake+0x14a>
 800c1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1d4:	b25b      	sxtb	r3, r3
 800c1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1da:	d103      	bne.n	800c1e4 <xQueueSemaphoreTake+0x160>
 800c1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1e4:	f001 fc2e 	bl	800da44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1e8:	463a      	mov	r2, r7
 800c1ea:	f107 030c 	add.w	r3, r7, #12
 800c1ee:	4611      	mov	r1, r2
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f000 ff59 	bl	800d0a8 <xTaskCheckForTimeOut>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d132      	bne.n	800c262 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1fe:	f000 f94f 	bl	800c4a0 <prvIsQueueEmpty>
 800c202:	4603      	mov	r3, r0
 800c204:	2b00      	cmp	r3, #0
 800c206:	d026      	beq.n	800c256 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d109      	bne.n	800c224 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800c210:	f001 fbe4 	bl	800d9dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	4618      	mov	r0, r3
 800c21a:	f001 f8b1 	bl	800d380 <xTaskPriorityInherit>
 800c21e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c220:	f001 fc10 	bl	800da44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c226:	3324      	adds	r3, #36	; 0x24
 800c228:	683a      	ldr	r2, [r7, #0]
 800c22a:	4611      	mov	r1, r2
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 fe9b 	bl	800cf68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c234:	f000 f8e2 	bl	800c3fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c238:	f000 fcda 	bl	800cbf0 <xTaskResumeAll>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f47f af66 	bne.w	800c110 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800c244:	4b18      	ldr	r3, [pc, #96]	; (800c2a8 <xQueueSemaphoreTake+0x224>)
 800c246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c24a:	601a      	str	r2, [r3, #0]
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	e75c      	b.n	800c110 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c256:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c258:	f000 f8d0 	bl	800c3fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c25c:	f000 fcc8 	bl	800cbf0 <xTaskResumeAll>
 800c260:	e756      	b.n	800c110 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c264:	f000 f8ca 	bl	800c3fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c268:	f000 fcc2 	bl	800cbf0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c26c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c26e:	f000 f917 	bl	800c4a0 <prvIsQueueEmpty>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	f43f af4b 	beq.w	800c110 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00d      	beq.n	800c29c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800c280:	f001 fbac 	bl	800d9dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c286:	f000 f811 	bl	800c2ac <prvGetDisinheritPriorityAfterTimeout>
 800c28a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c292:	4618      	mov	r0, r3
 800c294:	f001 f97e 	bl	800d594 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c298:	f001 fbd4 	bl	800da44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c29c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3738      	adds	r7, #56	; 0x38
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	e000ed04 	.word	0xe000ed04

0800c2ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d006      	beq.n	800c2ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f1c3 0307 	rsb	r3, r3, #7
 800c2c6:	60fb      	str	r3, [r7, #12]
 800c2c8:	e001      	b.n	800c2ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
	}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b086      	sub	sp, #24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d10d      	bne.n	800c316 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d14d      	bne.n	800c39e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	689b      	ldr	r3, [r3, #8]
 800c306:	4618      	mov	r0, r3
 800c308:	f001 f8ba 	bl	800d480 <xTaskPriorityDisinherit>
 800c30c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2200      	movs	r2, #0
 800c312:	609a      	str	r2, [r3, #8]
 800c314:	e043      	b.n	800c39e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d119      	bne.n	800c350 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6858      	ldr	r0, [r3, #4]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c324:	461a      	mov	r2, r3
 800c326:	68b9      	ldr	r1, [r7, #8]
 800c328:	f001 fe4a 	bl	800dfc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	685a      	ldr	r2, [r3, #4]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c334:	441a      	add	r2, r3
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	685a      	ldr	r2, [r3, #4]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	429a      	cmp	r2, r3
 800c344:	d32b      	bcc.n	800c39e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	605a      	str	r2, [r3, #4]
 800c34e:	e026      	b.n	800c39e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	68d8      	ldr	r0, [r3, #12]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c358:	461a      	mov	r2, r3
 800c35a:	68b9      	ldr	r1, [r7, #8]
 800c35c:	f001 fe30 	bl	800dfc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	68da      	ldr	r2, [r3, #12]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c368:	425b      	negs	r3, r3
 800c36a:	441a      	add	r2, r3
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	68da      	ldr	r2, [r3, #12]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d207      	bcs.n	800c38c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	689a      	ldr	r2, [r3, #8]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c384:	425b      	negs	r3, r3
 800c386:	441a      	add	r2, r3
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d105      	bne.n	800c39e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d002      	beq.n	800c39e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	3b01      	subs	r3, #1
 800c39c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	1c5a      	adds	r2, r3, #1
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c3a6:	697b      	ldr	r3, [r7, #20]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3718      	adds	r7, #24
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d018      	beq.n	800c3f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	68da      	ldr	r2, [r3, #12]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ca:	441a      	add	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	68da      	ldr	r2, [r3, #12]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d303      	bcc.n	800c3e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	68d9      	ldr	r1, [r3, #12]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	6838      	ldr	r0, [r7, #0]
 800c3f0:	f001 fde6 	bl	800dfc0 <memcpy>
	}
}
 800c3f4:	bf00      	nop
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c404:	f001 faea 	bl	800d9dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c40e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c410:	e011      	b.n	800c436 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c416:	2b00      	cmp	r3, #0
 800c418:	d012      	beq.n	800c440 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	3324      	adds	r3, #36	; 0x24
 800c41e:	4618      	mov	r0, r3
 800c420:	f000 fdc8 	bl	800cfb4 <xTaskRemoveFromEventList>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c42a:	f000 fea3 	bl	800d174 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c42e:	7bfb      	ldrb	r3, [r7, #15]
 800c430:	3b01      	subs	r3, #1
 800c432:	b2db      	uxtb	r3, r3
 800c434:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	dce9      	bgt.n	800c412 <prvUnlockQueue+0x16>
 800c43e:	e000      	b.n	800c442 <prvUnlockQueue+0x46>
					break;
 800c440:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	22ff      	movs	r2, #255	; 0xff
 800c446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c44a:	f001 fafb 	bl	800da44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c44e:	f001 fac5 	bl	800d9dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c458:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c45a:	e011      	b.n	800c480 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d012      	beq.n	800c48a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	3310      	adds	r3, #16
 800c468:	4618      	mov	r0, r3
 800c46a:	f000 fda3 	bl	800cfb4 <xTaskRemoveFromEventList>
 800c46e:	4603      	mov	r3, r0
 800c470:	2b00      	cmp	r3, #0
 800c472:	d001      	beq.n	800c478 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c474:	f000 fe7e 	bl	800d174 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c478:	7bbb      	ldrb	r3, [r7, #14]
 800c47a:	3b01      	subs	r3, #1
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c480:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c484:	2b00      	cmp	r3, #0
 800c486:	dce9      	bgt.n	800c45c <prvUnlockQueue+0x60>
 800c488:	e000      	b.n	800c48c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c48a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	22ff      	movs	r2, #255	; 0xff
 800c490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c494:	f001 fad6 	bl	800da44 <vPortExitCritical>
}
 800c498:	bf00      	nop
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4a8:	f001 fa98 	bl	800d9dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d102      	bne.n	800c4ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	60fb      	str	r3, [r7, #12]
 800c4b8:	e001      	b.n	800c4be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4be:	f001 fac1 	bl	800da44 <vPortExitCritical>

	return xReturn;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3710      	adds	r7, #16
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b084      	sub	sp, #16
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4d4:	f001 fa82 	bl	800d9dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d102      	bne.n	800c4ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	60fb      	str	r3, [r7, #12]
 800c4e8:	e001      	b.n	800c4ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4ee:	f001 faa9 	bl	800da44 <vPortExitCritical>

	return xReturn;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08e      	sub	sp, #56	; 0x38
 800c500:	af04      	add	r7, sp, #16
 800c502:	60f8      	str	r0, [r7, #12]
 800c504:	60b9      	str	r1, [r7, #8]
 800c506:	607a      	str	r2, [r7, #4]
 800c508:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c50a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10c      	bne.n	800c52a <xTaskCreateStatic+0x2e>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c514:	b672      	cpsid	i
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	b662      	cpsie	i
 800c524:	623b      	str	r3, [r7, #32]
}
 800c526:	bf00      	nop
 800c528:	e7fe      	b.n	800c528 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10c      	bne.n	800c54a <xTaskCreateStatic+0x4e>
	__asm volatile
 800c530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c534:	b672      	cpsid	i
 800c536:	f383 8811 	msr	BASEPRI, r3
 800c53a:	f3bf 8f6f 	isb	sy
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	b662      	cpsie	i
 800c544:	61fb      	str	r3, [r7, #28]
}
 800c546:	bf00      	nop
 800c548:	e7fe      	b.n	800c548 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c54a:	23b4      	movs	r3, #180	; 0xb4
 800c54c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	2bb4      	cmp	r3, #180	; 0xb4
 800c552:	d00c      	beq.n	800c56e <xTaskCreateStatic+0x72>
	__asm volatile
 800c554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c558:	b672      	cpsid	i
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	b662      	cpsie	i
 800c568:	61bb      	str	r3, [r7, #24]
}
 800c56a:	bf00      	nop
 800c56c:	e7fe      	b.n	800c56c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c56e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c572:	2b00      	cmp	r3, #0
 800c574:	d01e      	beq.n	800c5b4 <xTaskCreateStatic+0xb8>
 800c576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d01b      	beq.n	800c5b4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c584:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c588:	2202      	movs	r2, #2
 800c58a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c58e:	2300      	movs	r3, #0
 800c590:	9303      	str	r3, [sp, #12]
 800c592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c594:	9302      	str	r3, [sp, #8]
 800c596:	f107 0314 	add.w	r3, r7, #20
 800c59a:	9301      	str	r3, [sp, #4]
 800c59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59e:	9300      	str	r3, [sp, #0]
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	68b9      	ldr	r1, [r7, #8]
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f000 f850 	bl	800c64c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5ae:	f000 f8ed 	bl	800c78c <prvAddNewTaskToReadyList>
 800c5b2:	e001      	b.n	800c5b8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c5b8:	697b      	ldr	r3, [r7, #20]
	}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3728      	adds	r7, #40	; 0x28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b08c      	sub	sp, #48	; 0x30
 800c5c6:	af04      	add	r7, sp, #16
 800c5c8:	60f8      	str	r0, [r7, #12]
 800c5ca:	60b9      	str	r1, [r7, #8]
 800c5cc:	603b      	str	r3, [r7, #0]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c5d2:	88fb      	ldrh	r3, [r7, #6]
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f001 fae8 	bl	800dbac <pvPortMalloc>
 800c5dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d00e      	beq.n	800c602 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c5e4:	20b4      	movs	r0, #180	; 0xb4
 800c5e6:	f001 fae1 	bl	800dbac <pvPortMalloc>
 800c5ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d003      	beq.n	800c5fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	631a      	str	r2, [r3, #48]	; 0x30
 800c5f8:	e005      	b.n	800c606 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c5fa:	6978      	ldr	r0, [r7, #20]
 800c5fc:	f001 fba0 	bl	800dd40 <vPortFree>
 800c600:	e001      	b.n	800c606 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c602:	2300      	movs	r3, #0
 800c604:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d017      	beq.n	800c63c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c614:	88fa      	ldrh	r2, [r7, #6]
 800c616:	2300      	movs	r3, #0
 800c618:	9303      	str	r3, [sp, #12]
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	9302      	str	r3, [sp, #8]
 800c61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c620:	9301      	str	r3, [sp, #4]
 800c622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c624:	9300      	str	r3, [sp, #0]
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	68b9      	ldr	r1, [r7, #8]
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f000 f80e 	bl	800c64c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c630:	69f8      	ldr	r0, [r7, #28]
 800c632:	f000 f8ab 	bl	800c78c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c636:	2301      	movs	r3, #1
 800c638:	61bb      	str	r3, [r7, #24]
 800c63a:	e002      	b.n	800c642 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c63c:	f04f 33ff 	mov.w	r3, #4294967295
 800c640:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c642:	69bb      	ldr	r3, [r7, #24]
	}
 800c644:	4618      	mov	r0, r3
 800c646:	3720      	adds	r7, #32
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b088      	sub	sp, #32
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
 800c658:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c65e:	6879      	ldr	r1, [r7, #4]
 800c660:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c664:	440b      	add	r3, r1
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	4413      	add	r3, r2
 800c66a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	f023 0307 	bic.w	r3, r3, #7
 800c672:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c674:	69bb      	ldr	r3, [r7, #24]
 800c676:	f003 0307 	and.w	r3, r3, #7
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00c      	beq.n	800c698 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c682:	b672      	cpsid	i
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	b662      	cpsie	i
 800c692:	617b      	str	r3, [r7, #20]
}
 800c694:	bf00      	nop
 800c696:	e7fe      	b.n	800c696 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d01f      	beq.n	800c6de <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c69e:	2300      	movs	r3, #0
 800c6a0:	61fb      	str	r3, [r7, #28]
 800c6a2:	e012      	b.n	800c6ca <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	7819      	ldrb	r1, [r3, #0]
 800c6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	3334      	adds	r3, #52	; 0x34
 800c6b4:	460a      	mov	r2, r1
 800c6b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c6b8:	68ba      	ldr	r2, [r7, #8]
 800c6ba:	69fb      	ldr	r3, [r7, #28]
 800c6bc:	4413      	add	r3, r2
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d006      	beq.n	800c6d2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	61fb      	str	r3, [r7, #28]
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	2b0f      	cmp	r3, #15
 800c6ce:	d9e9      	bls.n	800c6a4 <prvInitialiseNewTask+0x58>
 800c6d0:	e000      	b.n	800c6d4 <prvInitialiseNewTask+0x88>
			{
				break;
 800c6d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c6dc:	e003      	b.n	800c6e6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e8:	2b06      	cmp	r3, #6
 800c6ea:	d901      	bls.n	800c6f0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c6ec:	2306      	movs	r3, #6
 800c6ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c6fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fe:	2200      	movs	r2, #0
 800c700:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c704:	3304      	adds	r3, #4
 800c706:	4618      	mov	r0, r3
 800c708:	f7ff f8bb 	bl	800b882 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70e:	3318      	adds	r3, #24
 800c710:	4618      	mov	r0, r3
 800c712:	f7ff f8b6 	bl	800b882 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c71a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71e:	f1c3 0207 	rsb	r2, r3, #7
 800c722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c724:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c72a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72e:	2200      	movs	r2, #0
 800c730:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c736:	2200      	movs	r2, #0
 800c738:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73e:	334c      	adds	r3, #76	; 0x4c
 800c740:	2260      	movs	r2, #96	; 0x60
 800c742:	2100      	movs	r1, #0
 800c744:	4618      	mov	r0, r3
 800c746:	f001 fc49 	bl	800dfdc <memset>
 800c74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74c:	4a0c      	ldr	r2, [pc, #48]	; (800c780 <prvInitialiseNewTask+0x134>)
 800c74e:	651a      	str	r2, [r3, #80]	; 0x50
 800c750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c752:	4a0c      	ldr	r2, [pc, #48]	; (800c784 <prvInitialiseNewTask+0x138>)
 800c754:	655a      	str	r2, [r3, #84]	; 0x54
 800c756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c758:	4a0b      	ldr	r2, [pc, #44]	; (800c788 <prvInitialiseNewTask+0x13c>)
 800c75a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c75c:	683a      	ldr	r2, [r7, #0]
 800c75e:	68f9      	ldr	r1, [r7, #12]
 800c760:	69b8      	ldr	r0, [r7, #24]
 800c762:	f001 f82f 	bl	800d7c4 <pxPortInitialiseStack>
 800c766:	4602      	mov	r2, r0
 800c768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d002      	beq.n	800c778 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c776:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c778:	bf00      	nop
 800c77a:	3720      	adds	r7, #32
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	08034400 	.word	0x08034400
 800c784:	08034420 	.word	0x08034420
 800c788:	080343e0 	.word	0x080343e0

0800c78c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c794:	f001 f922 	bl	800d9dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c798:	4b2a      	ldr	r3, [pc, #168]	; (800c844 <prvAddNewTaskToReadyList+0xb8>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	3301      	adds	r3, #1
 800c79e:	4a29      	ldr	r2, [pc, #164]	; (800c844 <prvAddNewTaskToReadyList+0xb8>)
 800c7a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c7a2:	4b29      	ldr	r3, [pc, #164]	; (800c848 <prvAddNewTaskToReadyList+0xbc>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d109      	bne.n	800c7be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c7aa:	4a27      	ldr	r2, [pc, #156]	; (800c848 <prvAddNewTaskToReadyList+0xbc>)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c7b0:	4b24      	ldr	r3, [pc, #144]	; (800c844 <prvAddNewTaskToReadyList+0xb8>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d110      	bne.n	800c7da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c7b8:	f000 fd00 	bl	800d1bc <prvInitialiseTaskLists>
 800c7bc:	e00d      	b.n	800c7da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c7be:	4b23      	ldr	r3, [pc, #140]	; (800c84c <prvAddNewTaskToReadyList+0xc0>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d109      	bne.n	800c7da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c7c6:	4b20      	ldr	r3, [pc, #128]	; (800c848 <prvAddNewTaskToReadyList+0xbc>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d802      	bhi.n	800c7da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c7d4:	4a1c      	ldr	r2, [pc, #112]	; (800c848 <prvAddNewTaskToReadyList+0xbc>)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c7da:	4b1d      	ldr	r3, [pc, #116]	; (800c850 <prvAddNewTaskToReadyList+0xc4>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	3301      	adds	r3, #1
 800c7e0:	4a1b      	ldr	r2, [pc, #108]	; (800c850 <prvAddNewTaskToReadyList+0xc4>)
 800c7e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	409a      	lsls	r2, r3
 800c7ec:	4b19      	ldr	r3, [pc, #100]	; (800c854 <prvAddNewTaskToReadyList+0xc8>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	4a18      	ldr	r2, [pc, #96]	; (800c854 <prvAddNewTaskToReadyList+0xc8>)
 800c7f4:	6013      	str	r3, [r2, #0]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	4413      	add	r3, r2
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	4a15      	ldr	r2, [pc, #84]	; (800c858 <prvAddNewTaskToReadyList+0xcc>)
 800c804:	441a      	add	r2, r3
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3304      	adds	r3, #4
 800c80a:	4619      	mov	r1, r3
 800c80c:	4610      	mov	r0, r2
 800c80e:	f7ff f845 	bl	800b89c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c812:	f001 f917 	bl	800da44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c816:	4b0d      	ldr	r3, [pc, #52]	; (800c84c <prvAddNewTaskToReadyList+0xc0>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00e      	beq.n	800c83c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c81e:	4b0a      	ldr	r3, [pc, #40]	; (800c848 <prvAddNewTaskToReadyList+0xbc>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c828:	429a      	cmp	r2, r3
 800c82a:	d207      	bcs.n	800c83c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c82c:	4b0b      	ldr	r3, [pc, #44]	; (800c85c <prvAddNewTaskToReadyList+0xd0>)
 800c82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	200006a8 	.word	0x200006a8
 800c848:	200005a8 	.word	0x200005a8
 800c84c:	200006b4 	.word	0x200006b4
 800c850:	200006c4 	.word	0x200006c4
 800c854:	200006b0 	.word	0x200006b0
 800c858:	200005ac 	.word	0x200005ac
 800c85c:	e000ed04 	.word	0xe000ed04

0800c860 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c868:	f001 f8b8 	bl	800d9dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d102      	bne.n	800c878 <vTaskDelete+0x18>
 800c872:	4b3a      	ldr	r3, [pc, #232]	; (800c95c <vTaskDelete+0xfc>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	e000      	b.n	800c87a <vTaskDelete+0x1a>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	3304      	adds	r3, #4
 800c880:	4618      	mov	r0, r3
 800c882:	f7ff f868 	bl	800b956 <uxListRemove>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d115      	bne.n	800c8b8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c890:	4933      	ldr	r1, [pc, #204]	; (800c960 <vTaskDelete+0x100>)
 800c892:	4613      	mov	r3, r2
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	4413      	add	r3, r2
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	440b      	add	r3, r1
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d10a      	bne.n	800c8b8 <vTaskDelete+0x58>
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ac:	43da      	mvns	r2, r3
 800c8ae:	4b2d      	ldr	r3, [pc, #180]	; (800c964 <vTaskDelete+0x104>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4013      	ands	r3, r2
 800c8b4:	4a2b      	ldr	r2, [pc, #172]	; (800c964 <vTaskDelete+0x104>)
 800c8b6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d004      	beq.n	800c8ca <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	3318      	adds	r3, #24
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7ff f846 	bl	800b956 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c8ca:	4b27      	ldr	r3, [pc, #156]	; (800c968 <vTaskDelete+0x108>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	4a25      	ldr	r2, [pc, #148]	; (800c968 <vTaskDelete+0x108>)
 800c8d2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c8d4:	4b21      	ldr	r3, [pc, #132]	; (800c95c <vTaskDelete+0xfc>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d10b      	bne.n	800c8f6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	3304      	adds	r3, #4
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	4821      	ldr	r0, [pc, #132]	; (800c96c <vTaskDelete+0x10c>)
 800c8e6:	f7fe ffd9 	bl	800b89c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c8ea:	4b21      	ldr	r3, [pc, #132]	; (800c970 <vTaskDelete+0x110>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	4a1f      	ldr	r2, [pc, #124]	; (800c970 <vTaskDelete+0x110>)
 800c8f2:	6013      	str	r3, [r2, #0]
 800c8f4:	e009      	b.n	800c90a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c8f6:	4b1f      	ldr	r3, [pc, #124]	; (800c974 <vTaskDelete+0x114>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	3b01      	subs	r3, #1
 800c8fc:	4a1d      	ldr	r2, [pc, #116]	; (800c974 <vTaskDelete+0x114>)
 800c8fe:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f000 fcc9 	bl	800d298 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c906:	f000 fcfd 	bl	800d304 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c90a:	f001 f89b 	bl	800da44 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c90e:	4b1a      	ldr	r3, [pc, #104]	; (800c978 <vTaskDelete+0x118>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d01d      	beq.n	800c952 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800c916:	4b11      	ldr	r3, [pc, #68]	; (800c95c <vTaskDelete+0xfc>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d118      	bne.n	800c952 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c920:	4b16      	ldr	r3, [pc, #88]	; (800c97c <vTaskDelete+0x11c>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00c      	beq.n	800c942 <vTaskDelete+0xe2>
	__asm volatile
 800c928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92c:	b672      	cpsid	i
 800c92e:	f383 8811 	msr	BASEPRI, r3
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	b662      	cpsie	i
 800c93c:	60bb      	str	r3, [r7, #8]
}
 800c93e:	bf00      	nop
 800c940:	e7fe      	b.n	800c940 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800c942:	4b0f      	ldr	r3, [pc, #60]	; (800c980 <vTaskDelete+0x120>)
 800c944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c952:	bf00      	nop
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	200005a8 	.word	0x200005a8
 800c960:	200005ac 	.word	0x200005ac
 800c964:	200006b0 	.word	0x200006b0
 800c968:	200006c4 	.word	0x200006c4
 800c96c:	2000067c 	.word	0x2000067c
 800c970:	20000690 	.word	0x20000690
 800c974:	200006a8 	.word	0x200006a8
 800c978:	200006b4 	.word	0x200006b4
 800c97c:	200006d0 	.word	0x200006d0
 800c980:	e000ed04 	.word	0xe000ed04

0800c984 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c984:	b580      	push	{r7, lr}
 800c986:	b08a      	sub	sp, #40	; 0x28
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c98e:	2300      	movs	r3, #0
 800c990:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10c      	bne.n	800c9b2 <vTaskDelayUntil+0x2e>
	__asm volatile
 800c998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99c:	b672      	cpsid	i
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	b662      	cpsie	i
 800c9ac:	617b      	str	r3, [r7, #20]
}
 800c9ae:	bf00      	nop
 800c9b0:	e7fe      	b.n	800c9b0 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10c      	bne.n	800c9d2 <vTaskDelayUntil+0x4e>
	__asm volatile
 800c9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9bc:	b672      	cpsid	i
 800c9be:	f383 8811 	msr	BASEPRI, r3
 800c9c2:	f3bf 8f6f 	isb	sy
 800c9c6:	f3bf 8f4f 	dsb	sy
 800c9ca:	b662      	cpsie	i
 800c9cc:	613b      	str	r3, [r7, #16]
}
 800c9ce:	bf00      	nop
 800c9d0:	e7fe      	b.n	800c9d0 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800c9d2:	4b2b      	ldr	r3, [pc, #172]	; (800ca80 <vTaskDelayUntil+0xfc>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00c      	beq.n	800c9f4 <vTaskDelayUntil+0x70>
	__asm volatile
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	b672      	cpsid	i
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	b662      	cpsie	i
 800c9ee:	60fb      	str	r3, [r7, #12]
}
 800c9f0:	bf00      	nop
 800c9f2:	e7fe      	b.n	800c9f2 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800c9f4:	f000 f8ee 	bl	800cbd4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c9f8:	4b22      	ldr	r3, [pc, #136]	; (800ca84 <vTaskDelayUntil+0x100>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	683a      	ldr	r2, [r7, #0]
 800ca04:	4413      	add	r3, r2
 800ca06:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	6a3a      	ldr	r2, [r7, #32]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d20b      	bcs.n	800ca2a <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	69fa      	ldr	r2, [r7, #28]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d211      	bcs.n	800ca40 <vTaskDelayUntil+0xbc>
 800ca1c:	69fa      	ldr	r2, [r7, #28]
 800ca1e:	6a3b      	ldr	r3, [r7, #32]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d90d      	bls.n	800ca40 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800ca24:	2301      	movs	r3, #1
 800ca26:	627b      	str	r3, [r7, #36]	; 0x24
 800ca28:	e00a      	b.n	800ca40 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	69fa      	ldr	r2, [r7, #28]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d303      	bcc.n	800ca3c <vTaskDelayUntil+0xb8>
 800ca34:	69fa      	ldr	r2, [r7, #28]
 800ca36:	6a3b      	ldr	r3, [r7, #32]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d901      	bls.n	800ca40 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	69fa      	ldr	r2, [r7, #28]
 800ca44:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ca46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d006      	beq.n	800ca5a <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ca4c:	69fa      	ldr	r2, [r7, #28]
 800ca4e:	6a3b      	ldr	r3, [r7, #32]
 800ca50:	1ad3      	subs	r3, r2, r3
 800ca52:	2100      	movs	r1, #0
 800ca54:	4618      	mov	r0, r3
 800ca56:	f000 fe4f 	bl	800d6f8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ca5a:	f000 f8c9 	bl	800cbf0 <xTaskResumeAll>
 800ca5e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d107      	bne.n	800ca76 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800ca66:	4b08      	ldr	r3, [pc, #32]	; (800ca88 <vTaskDelayUntil+0x104>)
 800ca68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	f3bf 8f4f 	dsb	sy
 800ca72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca76:	bf00      	nop
 800ca78:	3728      	adds	r7, #40	; 0x28
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	200006d0 	.word	0x200006d0
 800ca84:	200006ac 	.word	0x200006ac
 800ca88:	e000ed04 	.word	0xe000ed04

0800ca8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ca94:	2300      	movs	r3, #0
 800ca96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d019      	beq.n	800cad2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ca9e:	4b14      	ldr	r3, [pc, #80]	; (800caf0 <vTaskDelay+0x64>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00c      	beq.n	800cac0 <vTaskDelay+0x34>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caaa:	b672      	cpsid	i
 800caac:	f383 8811 	msr	BASEPRI, r3
 800cab0:	f3bf 8f6f 	isb	sy
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	b662      	cpsie	i
 800caba:	60bb      	str	r3, [r7, #8]
}
 800cabc:	bf00      	nop
 800cabe:	e7fe      	b.n	800cabe <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cac0:	f000 f888 	bl	800cbd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cac4:	2100      	movs	r1, #0
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f000 fe16 	bl	800d6f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cacc:	f000 f890 	bl	800cbf0 <xTaskResumeAll>
 800cad0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d107      	bne.n	800cae8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800cad8:	4b06      	ldr	r3, [pc, #24]	; (800caf4 <vTaskDelay+0x68>)
 800cada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cade:	601a      	str	r2, [r3, #0]
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cae8:	bf00      	nop
 800caea:	3710      	adds	r7, #16
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	200006d0 	.word	0x200006d0
 800caf4:	e000ed04 	.word	0xe000ed04

0800caf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b08a      	sub	sp, #40	; 0x28
 800cafc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cafe:	2300      	movs	r3, #0
 800cb00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb02:	2300      	movs	r3, #0
 800cb04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb06:	463a      	mov	r2, r7
 800cb08:	1d39      	adds	r1, r7, #4
 800cb0a:	f107 0308 	add.w	r3, r7, #8
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7f3 fcfa 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb14:	6839      	ldr	r1, [r7, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	9202      	str	r2, [sp, #8]
 800cb1c:	9301      	str	r3, [sp, #4]
 800cb1e:	2300      	movs	r3, #0
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	2300      	movs	r3, #0
 800cb24:	460a      	mov	r2, r1
 800cb26:	4923      	ldr	r1, [pc, #140]	; (800cbb4 <vTaskStartScheduler+0xbc>)
 800cb28:	4823      	ldr	r0, [pc, #140]	; (800cbb8 <vTaskStartScheduler+0xc0>)
 800cb2a:	f7ff fce7 	bl	800c4fc <xTaskCreateStatic>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	4a22      	ldr	r2, [pc, #136]	; (800cbbc <vTaskStartScheduler+0xc4>)
 800cb32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cb34:	4b21      	ldr	r3, [pc, #132]	; (800cbbc <vTaskStartScheduler+0xc4>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d002      	beq.n	800cb42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	617b      	str	r3, [r7, #20]
 800cb40:	e001      	b.n	800cb46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cb42:	2300      	movs	r3, #0
 800cb44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d11d      	bne.n	800cb88 <vTaskStartScheduler+0x90>
	__asm volatile
 800cb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb50:	b672      	cpsid	i
 800cb52:	f383 8811 	msr	BASEPRI, r3
 800cb56:	f3bf 8f6f 	isb	sy
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	b662      	cpsie	i
 800cb60:	613b      	str	r3, [r7, #16]
}
 800cb62:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb64:	4b16      	ldr	r3, [pc, #88]	; (800cbc0 <vTaskStartScheduler+0xc8>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	334c      	adds	r3, #76	; 0x4c
 800cb6a:	4a16      	ldr	r2, [pc, #88]	; (800cbc4 <vTaskStartScheduler+0xcc>)
 800cb6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cb6e:	4b16      	ldr	r3, [pc, #88]	; (800cbc8 <vTaskStartScheduler+0xd0>)
 800cb70:	f04f 32ff 	mov.w	r2, #4294967295
 800cb74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cb76:	4b15      	ldr	r3, [pc, #84]	; (800cbcc <vTaskStartScheduler+0xd4>)
 800cb78:	2201      	movs	r2, #1
 800cb7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cb7c:	4b14      	ldr	r3, [pc, #80]	; (800cbd0 <vTaskStartScheduler+0xd8>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cb82:	f000 fead 	bl	800d8e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cb86:	e010      	b.n	800cbaa <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb8e:	d10c      	bne.n	800cbaa <vTaskStartScheduler+0xb2>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb94:	b672      	cpsid	i
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	b662      	cpsie	i
 800cba4:	60fb      	str	r3, [r7, #12]
}
 800cba6:	bf00      	nop
 800cba8:	e7fe      	b.n	800cba8 <vTaskStartScheduler+0xb0>
}
 800cbaa:	bf00      	nop
 800cbac:	3718      	adds	r7, #24
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	0800e244 	.word	0x0800e244
 800cbb8:	0800d18d 	.word	0x0800d18d
 800cbbc:	200006cc 	.word	0x200006cc
 800cbc0:	200005a8 	.word	0x200005a8
 800cbc4:	20000050 	.word	0x20000050
 800cbc8:	200006c8 	.word	0x200006c8
 800cbcc:	200006b4 	.word	0x200006b4
 800cbd0:	200006ac 	.word	0x200006ac

0800cbd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cbd8:	4b04      	ldr	r3, [pc, #16]	; (800cbec <vTaskSuspendAll+0x18>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	3301      	adds	r3, #1
 800cbde:	4a03      	ldr	r2, [pc, #12]	; (800cbec <vTaskSuspendAll+0x18>)
 800cbe0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cbe2:	bf00      	nop
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr
 800cbec:	200006d0 	.word	0x200006d0

0800cbf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cbfe:	4b42      	ldr	r3, [pc, #264]	; (800cd08 <xTaskResumeAll+0x118>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10c      	bne.n	800cc20 <xTaskResumeAll+0x30>
	__asm volatile
 800cc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0a:	b672      	cpsid	i
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	b662      	cpsie	i
 800cc1a:	603b      	str	r3, [r7, #0]
}
 800cc1c:	bf00      	nop
 800cc1e:	e7fe      	b.n	800cc1e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc20:	f000 fedc 	bl	800d9dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc24:	4b38      	ldr	r3, [pc, #224]	; (800cd08 <xTaskResumeAll+0x118>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	3b01      	subs	r3, #1
 800cc2a:	4a37      	ldr	r2, [pc, #220]	; (800cd08 <xTaskResumeAll+0x118>)
 800cc2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc2e:	4b36      	ldr	r3, [pc, #216]	; (800cd08 <xTaskResumeAll+0x118>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d161      	bne.n	800ccfa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc36:	4b35      	ldr	r3, [pc, #212]	; (800cd0c <xTaskResumeAll+0x11c>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d05d      	beq.n	800ccfa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc3e:	e02e      	b.n	800cc9e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc40:	4b33      	ldr	r3, [pc, #204]	; (800cd10 <xTaskResumeAll+0x120>)
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	3318      	adds	r3, #24
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7fe fe82 	bl	800b956 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	3304      	adds	r3, #4
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fe fe7d 	bl	800b956 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc60:	2201      	movs	r2, #1
 800cc62:	409a      	lsls	r2, r3
 800cc64:	4b2b      	ldr	r3, [pc, #172]	; (800cd14 <xTaskResumeAll+0x124>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	4a2a      	ldr	r2, [pc, #168]	; (800cd14 <xTaskResumeAll+0x124>)
 800cc6c:	6013      	str	r3, [r2, #0]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc72:	4613      	mov	r3, r2
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4413      	add	r3, r2
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	4a27      	ldr	r2, [pc, #156]	; (800cd18 <xTaskResumeAll+0x128>)
 800cc7c:	441a      	add	r2, r3
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	3304      	adds	r3, #4
 800cc82:	4619      	mov	r1, r3
 800cc84:	4610      	mov	r0, r2
 800cc86:	f7fe fe09 	bl	800b89c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc8e:	4b23      	ldr	r3, [pc, #140]	; (800cd1c <xTaskResumeAll+0x12c>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d302      	bcc.n	800cc9e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cc98:	4b21      	ldr	r3, [pc, #132]	; (800cd20 <xTaskResumeAll+0x130>)
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc9e:	4b1c      	ldr	r3, [pc, #112]	; (800cd10 <xTaskResumeAll+0x120>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1cc      	bne.n	800cc40 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d001      	beq.n	800ccb0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ccac:	f000 fb2a 	bl	800d304 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ccb0:	4b1c      	ldr	r3, [pc, #112]	; (800cd24 <xTaskResumeAll+0x134>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d010      	beq.n	800ccde <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ccbc:	f000 f836 	bl	800cd2c <xTaskIncrementTick>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d002      	beq.n	800cccc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ccc6:	4b16      	ldr	r3, [pc, #88]	; (800cd20 <xTaskResumeAll+0x130>)
 800ccc8:	2201      	movs	r2, #1
 800ccca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	3b01      	subs	r3, #1
 800ccd0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d1f1      	bne.n	800ccbc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800ccd8:	4b12      	ldr	r3, [pc, #72]	; (800cd24 <xTaskResumeAll+0x134>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ccde:	4b10      	ldr	r3, [pc, #64]	; (800cd20 <xTaskResumeAll+0x130>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d009      	beq.n	800ccfa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cce6:	2301      	movs	r3, #1
 800cce8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ccea:	4b0f      	ldr	r3, [pc, #60]	; (800cd28 <xTaskResumeAll+0x138>)
 800ccec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	f3bf 8f4f 	dsb	sy
 800ccf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ccfa:	f000 fea3 	bl	800da44 <vPortExitCritical>

	return xAlreadyYielded;
 800ccfe:	68bb      	ldr	r3, [r7, #8]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3710      	adds	r7, #16
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}
 800cd08:	200006d0 	.word	0x200006d0
 800cd0c:	200006a8 	.word	0x200006a8
 800cd10:	20000668 	.word	0x20000668
 800cd14:	200006b0 	.word	0x200006b0
 800cd18:	200005ac 	.word	0x200005ac
 800cd1c:	200005a8 	.word	0x200005a8
 800cd20:	200006bc 	.word	0x200006bc
 800cd24:	200006b8 	.word	0x200006b8
 800cd28:	e000ed04 	.word	0xe000ed04

0800cd2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b086      	sub	sp, #24
 800cd30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cd32:	2300      	movs	r3, #0
 800cd34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd36:	4b4f      	ldr	r3, [pc, #316]	; (800ce74 <xTaskIncrementTick+0x148>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f040 808a 	bne.w	800ce54 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cd40:	4b4d      	ldr	r3, [pc, #308]	; (800ce78 <xTaskIncrementTick+0x14c>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	3301      	adds	r3, #1
 800cd46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd48:	4a4b      	ldr	r2, [pc, #300]	; (800ce78 <xTaskIncrementTick+0x14c>)
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d122      	bne.n	800cd9a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd54:	4b49      	ldr	r3, [pc, #292]	; (800ce7c <xTaskIncrementTick+0x150>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00c      	beq.n	800cd78 <xTaskIncrementTick+0x4c>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	b672      	cpsid	i
 800cd64:	f383 8811 	msr	BASEPRI, r3
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	f3bf 8f4f 	dsb	sy
 800cd70:	b662      	cpsie	i
 800cd72:	603b      	str	r3, [r7, #0]
}
 800cd74:	bf00      	nop
 800cd76:	e7fe      	b.n	800cd76 <xTaskIncrementTick+0x4a>
 800cd78:	4b40      	ldr	r3, [pc, #256]	; (800ce7c <xTaskIncrementTick+0x150>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	60fb      	str	r3, [r7, #12]
 800cd7e:	4b40      	ldr	r3, [pc, #256]	; (800ce80 <xTaskIncrementTick+0x154>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a3e      	ldr	r2, [pc, #248]	; (800ce7c <xTaskIncrementTick+0x150>)
 800cd84:	6013      	str	r3, [r2, #0]
 800cd86:	4a3e      	ldr	r2, [pc, #248]	; (800ce80 <xTaskIncrementTick+0x154>)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	6013      	str	r3, [r2, #0]
 800cd8c:	4b3d      	ldr	r3, [pc, #244]	; (800ce84 <xTaskIncrementTick+0x158>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	3301      	adds	r3, #1
 800cd92:	4a3c      	ldr	r2, [pc, #240]	; (800ce84 <xTaskIncrementTick+0x158>)
 800cd94:	6013      	str	r3, [r2, #0]
 800cd96:	f000 fab5 	bl	800d304 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd9a:	4b3b      	ldr	r3, [pc, #236]	; (800ce88 <xTaskIncrementTick+0x15c>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	693a      	ldr	r2, [r7, #16]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d348      	bcc.n	800ce36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cda4:	4b35      	ldr	r3, [pc, #212]	; (800ce7c <xTaskIncrementTick+0x150>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d104      	bne.n	800cdb8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdae:	4b36      	ldr	r3, [pc, #216]	; (800ce88 <xTaskIncrementTick+0x15c>)
 800cdb0:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb4:	601a      	str	r2, [r3, #0]
					break;
 800cdb6:	e03e      	b.n	800ce36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdb8:	4b30      	ldr	r3, [pc, #192]	; (800ce7c <xTaskIncrementTick+0x150>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cdc8:	693a      	ldr	r2, [r7, #16]
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d203      	bcs.n	800cdd8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cdd0:	4a2d      	ldr	r2, [pc, #180]	; (800ce88 <xTaskIncrementTick+0x15c>)
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cdd6:	e02e      	b.n	800ce36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	3304      	adds	r3, #4
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fe fdba 	bl	800b956 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d004      	beq.n	800cdf4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	3318      	adds	r3, #24
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7fe fdb1 	bl	800b956 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	409a      	lsls	r2, r3
 800cdfc:	4b23      	ldr	r3, [pc, #140]	; (800ce8c <xTaskIncrementTick+0x160>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4313      	orrs	r3, r2
 800ce02:	4a22      	ldr	r2, [pc, #136]	; (800ce8c <xTaskIncrementTick+0x160>)
 800ce04:	6013      	str	r3, [r2, #0]
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	4413      	add	r3, r2
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	4a1f      	ldr	r2, [pc, #124]	; (800ce90 <xTaskIncrementTick+0x164>)
 800ce14:	441a      	add	r2, r3
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	3304      	adds	r3, #4
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	f7fe fd3d 	bl	800b89c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce26:	4b1b      	ldr	r3, [pc, #108]	; (800ce94 <xTaskIncrementTick+0x168>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d3b9      	bcc.n	800cda4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ce30:	2301      	movs	r3, #1
 800ce32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce34:	e7b6      	b.n	800cda4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ce36:	4b17      	ldr	r3, [pc, #92]	; (800ce94 <xTaskIncrementTick+0x168>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce3c:	4914      	ldr	r1, [pc, #80]	; (800ce90 <xTaskIncrementTick+0x164>)
 800ce3e:	4613      	mov	r3, r2
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	4413      	add	r3, r2
 800ce44:	009b      	lsls	r3, r3, #2
 800ce46:	440b      	add	r3, r1
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d907      	bls.n	800ce5e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	617b      	str	r3, [r7, #20]
 800ce52:	e004      	b.n	800ce5e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ce54:	4b10      	ldr	r3, [pc, #64]	; (800ce98 <xTaskIncrementTick+0x16c>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	4a0f      	ldr	r2, [pc, #60]	; (800ce98 <xTaskIncrementTick+0x16c>)
 800ce5c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ce5e:	4b0f      	ldr	r3, [pc, #60]	; (800ce9c <xTaskIncrementTick+0x170>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d001      	beq.n	800ce6a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800ce66:	2301      	movs	r3, #1
 800ce68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ce6a:	697b      	ldr	r3, [r7, #20]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3718      	adds	r7, #24
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	200006d0 	.word	0x200006d0
 800ce78:	200006ac 	.word	0x200006ac
 800ce7c:	20000660 	.word	0x20000660
 800ce80:	20000664 	.word	0x20000664
 800ce84:	200006c0 	.word	0x200006c0
 800ce88:	200006c8 	.word	0x200006c8
 800ce8c:	200006b0 	.word	0x200006b0
 800ce90:	200005ac 	.word	0x200005ac
 800ce94:	200005a8 	.word	0x200005a8
 800ce98:	200006b8 	.word	0x200006b8
 800ce9c:	200006bc 	.word	0x200006bc

0800cea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cea0:	b480      	push	{r7}
 800cea2:	b087      	sub	sp, #28
 800cea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cea6:	4b2a      	ldr	r3, [pc, #168]	; (800cf50 <vTaskSwitchContext+0xb0>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d003      	beq.n	800ceb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ceae:	4b29      	ldr	r3, [pc, #164]	; (800cf54 <vTaskSwitchContext+0xb4>)
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ceb4:	e046      	b.n	800cf44 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ceb6:	4b27      	ldr	r3, [pc, #156]	; (800cf54 <vTaskSwitchContext+0xb4>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cebc:	4b26      	ldr	r3, [pc, #152]	; (800cf58 <vTaskSwitchContext+0xb8>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	fab3 f383 	clz	r3, r3
 800cec8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ceca:	7afb      	ldrb	r3, [r7, #11]
 800cecc:	f1c3 031f 	rsb	r3, r3, #31
 800ced0:	617b      	str	r3, [r7, #20]
 800ced2:	4922      	ldr	r1, [pc, #136]	; (800cf5c <vTaskSwitchContext+0xbc>)
 800ced4:	697a      	ldr	r2, [r7, #20]
 800ced6:	4613      	mov	r3, r2
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	4413      	add	r3, r2
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	440b      	add	r3, r1
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10c      	bne.n	800cf00 <vTaskSwitchContext+0x60>
	__asm volatile
 800cee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceea:	b672      	cpsid	i
 800ceec:	f383 8811 	msr	BASEPRI, r3
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	b662      	cpsie	i
 800cefa:	607b      	str	r3, [r7, #4]
}
 800cefc:	bf00      	nop
 800cefe:	e7fe      	b.n	800cefe <vTaskSwitchContext+0x5e>
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	4613      	mov	r3, r2
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	4a14      	ldr	r2, [pc, #80]	; (800cf5c <vTaskSwitchContext+0xbc>)
 800cf0c:	4413      	add	r3, r2
 800cf0e:	613b      	str	r3, [r7, #16]
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	685a      	ldr	r2, [r3, #4]
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	605a      	str	r2, [r3, #4]
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	685a      	ldr	r2, [r3, #4]
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	3308      	adds	r3, #8
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d104      	bne.n	800cf30 <vTaskSwitchContext+0x90>
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	605a      	str	r2, [r3, #4]
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	68db      	ldr	r3, [r3, #12]
 800cf36:	4a0a      	ldr	r2, [pc, #40]	; (800cf60 <vTaskSwitchContext+0xc0>)
 800cf38:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf3a:	4b09      	ldr	r3, [pc, #36]	; (800cf60 <vTaskSwitchContext+0xc0>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	334c      	adds	r3, #76	; 0x4c
 800cf40:	4a08      	ldr	r2, [pc, #32]	; (800cf64 <vTaskSwitchContext+0xc4>)
 800cf42:	6013      	str	r3, [r2, #0]
}
 800cf44:	bf00      	nop
 800cf46:	371c      	adds	r7, #28
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr
 800cf50:	200006d0 	.word	0x200006d0
 800cf54:	200006bc 	.word	0x200006bc
 800cf58:	200006b0 	.word	0x200006b0
 800cf5c:	200005ac 	.word	0x200005ac
 800cf60:	200005a8 	.word	0x200005a8
 800cf64:	20000050 	.word	0x20000050

0800cf68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b084      	sub	sp, #16
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10c      	bne.n	800cf92 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cf78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7c:	b672      	cpsid	i
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	b662      	cpsie	i
 800cf8c:	60fb      	str	r3, [r7, #12]
}
 800cf8e:	bf00      	nop
 800cf90:	e7fe      	b.n	800cf90 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf92:	4b07      	ldr	r3, [pc, #28]	; (800cfb0 <vTaskPlaceOnEventList+0x48>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	3318      	adds	r3, #24
 800cf98:	4619      	mov	r1, r3
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7fe fca2 	bl	800b8e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cfa0:	2101      	movs	r1, #1
 800cfa2:	6838      	ldr	r0, [r7, #0]
 800cfa4:	f000 fba8 	bl	800d6f8 <prvAddCurrentTaskToDelayedList>
}
 800cfa8:	bf00      	nop
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	200005a8 	.word	0x200005a8

0800cfb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b086      	sub	sp, #24
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	68db      	ldr	r3, [r3, #12]
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d10c      	bne.n	800cfe4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800cfca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfce:	b672      	cpsid	i
 800cfd0:	f383 8811 	msr	BASEPRI, r3
 800cfd4:	f3bf 8f6f 	isb	sy
 800cfd8:	f3bf 8f4f 	dsb	sy
 800cfdc:	b662      	cpsie	i
 800cfde:	60fb      	str	r3, [r7, #12]
}
 800cfe0:	bf00      	nop
 800cfe2:	e7fe      	b.n	800cfe2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	3318      	adds	r3, #24
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7fe fcb4 	bl	800b956 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfee:	4b1d      	ldr	r3, [pc, #116]	; (800d064 <xTaskRemoveFromEventList+0xb0>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d11c      	bne.n	800d030 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	3304      	adds	r3, #4
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fe fcab 	bl	800b956 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d000:	693b      	ldr	r3, [r7, #16]
 800d002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d004:	2201      	movs	r2, #1
 800d006:	409a      	lsls	r2, r3
 800d008:	4b17      	ldr	r3, [pc, #92]	; (800d068 <xTaskRemoveFromEventList+0xb4>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4313      	orrs	r3, r2
 800d00e:	4a16      	ldr	r2, [pc, #88]	; (800d068 <xTaskRemoveFromEventList+0xb4>)
 800d010:	6013      	str	r3, [r2, #0]
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d016:	4613      	mov	r3, r2
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4413      	add	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	4a13      	ldr	r2, [pc, #76]	; (800d06c <xTaskRemoveFromEventList+0xb8>)
 800d020:	441a      	add	r2, r3
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	3304      	adds	r3, #4
 800d026:	4619      	mov	r1, r3
 800d028:	4610      	mov	r0, r2
 800d02a:	f7fe fc37 	bl	800b89c <vListInsertEnd>
 800d02e:	e005      	b.n	800d03c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	3318      	adds	r3, #24
 800d034:	4619      	mov	r1, r3
 800d036:	480e      	ldr	r0, [pc, #56]	; (800d070 <xTaskRemoveFromEventList+0xbc>)
 800d038:	f7fe fc30 	bl	800b89c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d040:	4b0c      	ldr	r3, [pc, #48]	; (800d074 <xTaskRemoveFromEventList+0xc0>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d046:	429a      	cmp	r2, r3
 800d048:	d905      	bls.n	800d056 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d04a:	2301      	movs	r3, #1
 800d04c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d04e:	4b0a      	ldr	r3, [pc, #40]	; (800d078 <xTaskRemoveFromEventList+0xc4>)
 800d050:	2201      	movs	r2, #1
 800d052:	601a      	str	r2, [r3, #0]
 800d054:	e001      	b.n	800d05a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d056:	2300      	movs	r3, #0
 800d058:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d05a:	697b      	ldr	r3, [r7, #20]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3718      	adds	r7, #24
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	200006d0 	.word	0x200006d0
 800d068:	200006b0 	.word	0x200006b0
 800d06c:	200005ac 	.word	0x200005ac
 800d070:	20000668 	.word	0x20000668
 800d074:	200005a8 	.word	0x200005a8
 800d078:	200006bc 	.word	0x200006bc

0800d07c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d084:	4b06      	ldr	r3, [pc, #24]	; (800d0a0 <vTaskInternalSetTimeOutState+0x24>)
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d08c:	4b05      	ldr	r3, [pc, #20]	; (800d0a4 <vTaskInternalSetTimeOutState+0x28>)
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	605a      	str	r2, [r3, #4]
}
 800d094:	bf00      	nop
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr
 800d0a0:	200006c0 	.word	0x200006c0
 800d0a4:	200006ac 	.word	0x200006ac

0800d0a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b088      	sub	sp, #32
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10c      	bne.n	800d0d2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800d0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0bc:	b672      	cpsid	i
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	b662      	cpsie	i
 800d0cc:	613b      	str	r3, [r7, #16]
}
 800d0ce:	bf00      	nop
 800d0d0:	e7fe      	b.n	800d0d0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d10c      	bne.n	800d0f2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800d0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0dc:	b672      	cpsid	i
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	b662      	cpsie	i
 800d0ec:	60fb      	str	r3, [r7, #12]
}
 800d0ee:	bf00      	nop
 800d0f0:	e7fe      	b.n	800d0f0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800d0f2:	f000 fc73 	bl	800d9dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d0f6:	4b1d      	ldr	r3, [pc, #116]	; (800d16c <xTaskCheckForTimeOut+0xc4>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	69ba      	ldr	r2, [r7, #24]
 800d102:	1ad3      	subs	r3, r2, r3
 800d104:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10e:	d102      	bne.n	800d116 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d110:	2300      	movs	r3, #0
 800d112:	61fb      	str	r3, [r7, #28]
 800d114:	e023      	b.n	800d15e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	4b15      	ldr	r3, [pc, #84]	; (800d170 <xTaskCheckForTimeOut+0xc8>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d007      	beq.n	800d132 <xTaskCheckForTimeOut+0x8a>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	69ba      	ldr	r2, [r7, #24]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d302      	bcc.n	800d132 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d12c:	2301      	movs	r3, #1
 800d12e:	61fb      	str	r3, [r7, #28]
 800d130:	e015      	b.n	800d15e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d20b      	bcs.n	800d154 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	681a      	ldr	r2, [r3, #0]
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	1ad2      	subs	r2, r2, r3
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f7ff ff97 	bl	800d07c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d14e:	2300      	movs	r3, #0
 800d150:	61fb      	str	r3, [r7, #28]
 800d152:	e004      	b.n	800d15e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	2200      	movs	r2, #0
 800d158:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d15a:	2301      	movs	r3, #1
 800d15c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d15e:	f000 fc71 	bl	800da44 <vPortExitCritical>

	return xReturn;
 800d162:	69fb      	ldr	r3, [r7, #28]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3720      	adds	r7, #32
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	200006ac 	.word	0x200006ac
 800d170:	200006c0 	.word	0x200006c0

0800d174 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d174:	b480      	push	{r7}
 800d176:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d178:	4b03      	ldr	r3, [pc, #12]	; (800d188 <vTaskMissedYield+0x14>)
 800d17a:	2201      	movs	r2, #1
 800d17c:	601a      	str	r2, [r3, #0]
}
 800d17e:	bf00      	nop
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr
 800d188:	200006bc 	.word	0x200006bc

0800d18c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d194:	f000 f852 	bl	800d23c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d198:	4b06      	ldr	r3, [pc, #24]	; (800d1b4 <prvIdleTask+0x28>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d9f9      	bls.n	800d194 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d1a0:	4b05      	ldr	r3, [pc, #20]	; (800d1b8 <prvIdleTask+0x2c>)
 800d1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a6:	601a      	str	r2, [r3, #0]
 800d1a8:	f3bf 8f4f 	dsb	sy
 800d1ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d1b0:	e7f0      	b.n	800d194 <prvIdleTask+0x8>
 800d1b2:	bf00      	nop
 800d1b4:	200005ac 	.word	0x200005ac
 800d1b8:	e000ed04 	.word	0xe000ed04

0800d1bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	607b      	str	r3, [r7, #4]
 800d1c6:	e00c      	b.n	800d1e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d1c8:	687a      	ldr	r2, [r7, #4]
 800d1ca:	4613      	mov	r3, r2
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	4413      	add	r3, r2
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	4a12      	ldr	r2, [pc, #72]	; (800d21c <prvInitialiseTaskLists+0x60>)
 800d1d4:	4413      	add	r3, r2
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fe fb33 	bl	800b842 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	607b      	str	r3, [r7, #4]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b06      	cmp	r3, #6
 800d1e6:	d9ef      	bls.n	800d1c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d1e8:	480d      	ldr	r0, [pc, #52]	; (800d220 <prvInitialiseTaskLists+0x64>)
 800d1ea:	f7fe fb2a 	bl	800b842 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d1ee:	480d      	ldr	r0, [pc, #52]	; (800d224 <prvInitialiseTaskLists+0x68>)
 800d1f0:	f7fe fb27 	bl	800b842 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d1f4:	480c      	ldr	r0, [pc, #48]	; (800d228 <prvInitialiseTaskLists+0x6c>)
 800d1f6:	f7fe fb24 	bl	800b842 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d1fa:	480c      	ldr	r0, [pc, #48]	; (800d22c <prvInitialiseTaskLists+0x70>)
 800d1fc:	f7fe fb21 	bl	800b842 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d200:	480b      	ldr	r0, [pc, #44]	; (800d230 <prvInitialiseTaskLists+0x74>)
 800d202:	f7fe fb1e 	bl	800b842 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d206:	4b0b      	ldr	r3, [pc, #44]	; (800d234 <prvInitialiseTaskLists+0x78>)
 800d208:	4a05      	ldr	r2, [pc, #20]	; (800d220 <prvInitialiseTaskLists+0x64>)
 800d20a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d20c:	4b0a      	ldr	r3, [pc, #40]	; (800d238 <prvInitialiseTaskLists+0x7c>)
 800d20e:	4a05      	ldr	r2, [pc, #20]	; (800d224 <prvInitialiseTaskLists+0x68>)
 800d210:	601a      	str	r2, [r3, #0]
}
 800d212:	bf00      	nop
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	200005ac 	.word	0x200005ac
 800d220:	20000638 	.word	0x20000638
 800d224:	2000064c 	.word	0x2000064c
 800d228:	20000668 	.word	0x20000668
 800d22c:	2000067c 	.word	0x2000067c
 800d230:	20000694 	.word	0x20000694
 800d234:	20000660 	.word	0x20000660
 800d238:	20000664 	.word	0x20000664

0800d23c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d242:	e019      	b.n	800d278 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d244:	f000 fbca 	bl	800d9dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d248:	4b10      	ldr	r3, [pc, #64]	; (800d28c <prvCheckTasksWaitingTermination+0x50>)
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	3304      	adds	r3, #4
 800d254:	4618      	mov	r0, r3
 800d256:	f7fe fb7e 	bl	800b956 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d25a:	4b0d      	ldr	r3, [pc, #52]	; (800d290 <prvCheckTasksWaitingTermination+0x54>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	3b01      	subs	r3, #1
 800d260:	4a0b      	ldr	r2, [pc, #44]	; (800d290 <prvCheckTasksWaitingTermination+0x54>)
 800d262:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d264:	4b0b      	ldr	r3, [pc, #44]	; (800d294 <prvCheckTasksWaitingTermination+0x58>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	3b01      	subs	r3, #1
 800d26a:	4a0a      	ldr	r2, [pc, #40]	; (800d294 <prvCheckTasksWaitingTermination+0x58>)
 800d26c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d26e:	f000 fbe9 	bl	800da44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 f810 	bl	800d298 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d278:	4b06      	ldr	r3, [pc, #24]	; (800d294 <prvCheckTasksWaitingTermination+0x58>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1e1      	bne.n	800d244 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d280:	bf00      	nop
 800d282:	bf00      	nop
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	2000067c 	.word	0x2000067c
 800d290:	200006a8 	.word	0x200006a8
 800d294:	20000690 	.word	0x20000690

0800d298 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	334c      	adds	r3, #76	; 0x4c
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 feaf 	bl	800e008 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d108      	bne.n	800d2c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 fd41 	bl	800dd40 <vPortFree>
				vPortFree( pxTCB );
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 fd3e 	bl	800dd40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d2c4:	e01a      	b.n	800d2fc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d103      	bne.n	800d2d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 fd35 	bl	800dd40 <vPortFree>
	}
 800d2d6:	e011      	b.n	800d2fc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d2de:	2b02      	cmp	r3, #2
 800d2e0:	d00c      	beq.n	800d2fc <prvDeleteTCB+0x64>
	__asm volatile
 800d2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e6:	b672      	cpsid	i
 800d2e8:	f383 8811 	msr	BASEPRI, r3
 800d2ec:	f3bf 8f6f 	isb	sy
 800d2f0:	f3bf 8f4f 	dsb	sy
 800d2f4:	b662      	cpsie	i
 800d2f6:	60fb      	str	r3, [r7, #12]
}
 800d2f8:	bf00      	nop
 800d2fa:	e7fe      	b.n	800d2fa <prvDeleteTCB+0x62>
	}
 800d2fc:	bf00      	nop
 800d2fe:	3710      	adds	r7, #16
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d30a:	4b0c      	ldr	r3, [pc, #48]	; (800d33c <prvResetNextTaskUnblockTime+0x38>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d104      	bne.n	800d31e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d314:	4b0a      	ldr	r3, [pc, #40]	; (800d340 <prvResetNextTaskUnblockTime+0x3c>)
 800d316:	f04f 32ff 	mov.w	r2, #4294967295
 800d31a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d31c:	e008      	b.n	800d330 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d31e:	4b07      	ldr	r3, [pc, #28]	; (800d33c <prvResetNextTaskUnblockTime+0x38>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	4a04      	ldr	r2, [pc, #16]	; (800d340 <prvResetNextTaskUnblockTime+0x3c>)
 800d32e:	6013      	str	r3, [r2, #0]
}
 800d330:	bf00      	nop
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr
 800d33c:	20000660 	.word	0x20000660
 800d340:	200006c8 	.word	0x200006c8

0800d344 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d34a:	4b0b      	ldr	r3, [pc, #44]	; (800d378 <xTaskGetSchedulerState+0x34>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d102      	bne.n	800d358 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d352:	2301      	movs	r3, #1
 800d354:	607b      	str	r3, [r7, #4]
 800d356:	e008      	b.n	800d36a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d358:	4b08      	ldr	r3, [pc, #32]	; (800d37c <xTaskGetSchedulerState+0x38>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d102      	bne.n	800d366 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d360:	2302      	movs	r3, #2
 800d362:	607b      	str	r3, [r7, #4]
 800d364:	e001      	b.n	800d36a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d366:	2300      	movs	r3, #0
 800d368:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d36a:	687b      	ldr	r3, [r7, #4]
	}
 800d36c:	4618      	mov	r0, r3
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr
 800d378:	200006b4 	.word	0x200006b4
 800d37c:	200006d0 	.word	0x200006d0

0800d380 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d38c:	2300      	movs	r3, #0
 800d38e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d069      	beq.n	800d46a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d39a:	4b36      	ldr	r3, [pc, #216]	; (800d474 <xTaskPriorityInherit+0xf4>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d259      	bcs.n	800d458 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	699b      	ldr	r3, [r3, #24]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	db06      	blt.n	800d3ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3ac:	4b31      	ldr	r3, [pc, #196]	; (800d474 <xTaskPriorityInherit+0xf4>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b2:	f1c3 0207 	rsb	r2, r3, #7
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	6959      	ldr	r1, [r3, #20]
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	4413      	add	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4a2b      	ldr	r2, [pc, #172]	; (800d478 <xTaskPriorityInherit+0xf8>)
 800d3cc:	4413      	add	r3, r2
 800d3ce:	4299      	cmp	r1, r3
 800d3d0:	d13a      	bne.n	800d448 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7fe fabd 	bl	800b956 <uxListRemove>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d115      	bne.n	800d40e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e6:	4924      	ldr	r1, [pc, #144]	; (800d478 <xTaskPriorityInherit+0xf8>)
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	440b      	add	r3, r1
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d10a      	bne.n	800d40e <xTaskPriorityInherit+0x8e>
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d402:	43da      	mvns	r2, r3
 800d404:	4b1d      	ldr	r3, [pc, #116]	; (800d47c <xTaskPriorityInherit+0xfc>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4013      	ands	r3, r2
 800d40a:	4a1c      	ldr	r2, [pc, #112]	; (800d47c <xTaskPriorityInherit+0xfc>)
 800d40c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d40e:	4b19      	ldr	r3, [pc, #100]	; (800d474 <xTaskPriorityInherit+0xf4>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41c:	2201      	movs	r2, #1
 800d41e:	409a      	lsls	r2, r3
 800d420:	4b16      	ldr	r3, [pc, #88]	; (800d47c <xTaskPriorityInherit+0xfc>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4313      	orrs	r3, r2
 800d426:	4a15      	ldr	r2, [pc, #84]	; (800d47c <xTaskPriorityInherit+0xfc>)
 800d428:	6013      	str	r3, [r2, #0]
 800d42a:	68bb      	ldr	r3, [r7, #8]
 800d42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42e:	4613      	mov	r3, r2
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	4413      	add	r3, r2
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	4a10      	ldr	r2, [pc, #64]	; (800d478 <xTaskPriorityInherit+0xf8>)
 800d438:	441a      	add	r2, r3
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	3304      	adds	r3, #4
 800d43e:	4619      	mov	r1, r3
 800d440:	4610      	mov	r0, r2
 800d442:	f7fe fa2b 	bl	800b89c <vListInsertEnd>
 800d446:	e004      	b.n	800d452 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d448:	4b0a      	ldr	r3, [pc, #40]	; (800d474 <xTaskPriorityInherit+0xf4>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d452:	2301      	movs	r3, #1
 800d454:	60fb      	str	r3, [r7, #12]
 800d456:	e008      	b.n	800d46a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d45c:	4b05      	ldr	r3, [pc, #20]	; (800d474 <xTaskPriorityInherit+0xf4>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d462:	429a      	cmp	r2, r3
 800d464:	d201      	bcs.n	800d46a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d466:	2301      	movs	r3, #1
 800d468:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d46a:	68fb      	ldr	r3, [r7, #12]
	}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	200005a8 	.word	0x200005a8
 800d478:	200005ac 	.word	0x200005ac
 800d47c:	200006b0 	.word	0x200006b0

0800d480 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d480:	b580      	push	{r7, lr}
 800d482:	b086      	sub	sp, #24
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d48c:	2300      	movs	r3, #0
 800d48e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d072      	beq.n	800d57c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d496:	4b3c      	ldr	r3, [pc, #240]	; (800d588 <xTaskPriorityDisinherit+0x108>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	693a      	ldr	r2, [r7, #16]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d00c      	beq.n	800d4ba <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a4:	b672      	cpsid	i
 800d4a6:	f383 8811 	msr	BASEPRI, r3
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	b662      	cpsie	i
 800d4b4:	60fb      	str	r3, [r7, #12]
}
 800d4b6:	bf00      	nop
 800d4b8:	e7fe      	b.n	800d4b8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d10c      	bne.n	800d4dc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c6:	b672      	cpsid	i
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	b662      	cpsie	i
 800d4d6:	60bb      	str	r3, [r7, #8]
}
 800d4d8:	bf00      	nop
 800d4da:	e7fe      	b.n	800d4da <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4e0:	1e5a      	subs	r2, r3, #1
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d044      	beq.n	800d57c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d140      	bne.n	800d57c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	3304      	adds	r3, #4
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fe fa29 	bl	800b956 <uxListRemove>
 800d504:	4603      	mov	r3, r0
 800d506:	2b00      	cmp	r3, #0
 800d508:	d115      	bne.n	800d536 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d50e:	491f      	ldr	r1, [pc, #124]	; (800d58c <xTaskPriorityDisinherit+0x10c>)
 800d510:	4613      	mov	r3, r2
 800d512:	009b      	lsls	r3, r3, #2
 800d514:	4413      	add	r3, r2
 800d516:	009b      	lsls	r3, r3, #2
 800d518:	440b      	add	r3, r1
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10a      	bne.n	800d536 <xTaskPriorityDisinherit+0xb6>
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d524:	2201      	movs	r2, #1
 800d526:	fa02 f303 	lsl.w	r3, r2, r3
 800d52a:	43da      	mvns	r2, r3
 800d52c:	4b18      	ldr	r3, [pc, #96]	; (800d590 <xTaskPriorityDisinherit+0x110>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4013      	ands	r3, r2
 800d532:	4a17      	ldr	r2, [pc, #92]	; (800d590 <xTaskPriorityDisinherit+0x110>)
 800d534:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d542:	f1c3 0207 	rsb	r2, r3, #7
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54e:	2201      	movs	r2, #1
 800d550:	409a      	lsls	r2, r3
 800d552:	4b0f      	ldr	r3, [pc, #60]	; (800d590 <xTaskPriorityDisinherit+0x110>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4313      	orrs	r3, r2
 800d558:	4a0d      	ldr	r2, [pc, #52]	; (800d590 <xTaskPriorityDisinherit+0x110>)
 800d55a:	6013      	str	r3, [r2, #0]
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	4a08      	ldr	r2, [pc, #32]	; (800d58c <xTaskPriorityDisinherit+0x10c>)
 800d56a:	441a      	add	r2, r3
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	3304      	adds	r3, #4
 800d570:	4619      	mov	r1, r3
 800d572:	4610      	mov	r0, r2
 800d574:	f7fe f992 	bl	800b89c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d578:	2301      	movs	r3, #1
 800d57a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d57c:	697b      	ldr	r3, [r7, #20]
	}
 800d57e:	4618      	mov	r0, r3
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	200005a8 	.word	0x200005a8
 800d58c:	200005ac 	.word	0x200005ac
 800d590:	200006b0 	.word	0x200006b0

0800d594 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d594:	b580      	push	{r7, lr}
 800d596:	b088      	sub	sp, #32
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f000 8087 	beq.w	800d6bc <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d10c      	bne.n	800d5d0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800d5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ba:	b672      	cpsid	i
 800d5bc:	f383 8811 	msr	BASEPRI, r3
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	b662      	cpsie	i
 800d5ca:	60fb      	str	r3, [r7, #12]
}
 800d5cc:	bf00      	nop
 800d5ce:	e7fe      	b.n	800d5ce <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5d4:	683a      	ldr	r2, [r7, #0]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d902      	bls.n	800d5e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	61fb      	str	r3, [r7, #28]
 800d5de:	e002      	b.n	800d5e6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5e4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ea:	69fa      	ldr	r2, [r7, #28]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d065      	beq.n	800d6bc <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5f4:	697a      	ldr	r2, [r7, #20]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d160      	bne.n	800d6bc <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d5fa:	4b32      	ldr	r3, [pc, #200]	; (800d6c4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	69ba      	ldr	r2, [r7, #24]
 800d600:	429a      	cmp	r2, r3
 800d602:	d10c      	bne.n	800d61e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800d604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d608:	b672      	cpsid	i
 800d60a:	f383 8811 	msr	BASEPRI, r3
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	b662      	cpsie	i
 800d618:	60bb      	str	r3, [r7, #8]
}
 800d61a:	bf00      	nop
 800d61c:	e7fe      	b.n	800d61c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d622:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d624:	69bb      	ldr	r3, [r7, #24]
 800d626:	69fa      	ldr	r2, [r7, #28]
 800d628:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	699b      	ldr	r3, [r3, #24]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	db04      	blt.n	800d63c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d632:	69fb      	ldr	r3, [r7, #28]
 800d634:	f1c3 0207 	rsb	r2, r3, #7
 800d638:	69bb      	ldr	r3, [r7, #24]
 800d63a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	6959      	ldr	r1, [r3, #20]
 800d640:	693a      	ldr	r2, [r7, #16]
 800d642:	4613      	mov	r3, r2
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	4413      	add	r3, r2
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	4a1f      	ldr	r2, [pc, #124]	; (800d6c8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d64c:	4413      	add	r3, r2
 800d64e:	4299      	cmp	r1, r3
 800d650:	d134      	bne.n	800d6bc <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	3304      	adds	r3, #4
 800d656:	4618      	mov	r0, r3
 800d658:	f7fe f97d 	bl	800b956 <uxListRemove>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d115      	bne.n	800d68e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d662:	69bb      	ldr	r3, [r7, #24]
 800d664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d666:	4918      	ldr	r1, [pc, #96]	; (800d6c8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d668:	4613      	mov	r3, r2
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	4413      	add	r3, r2
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	440b      	add	r3, r1
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10a      	bne.n	800d68e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d67c:	2201      	movs	r2, #1
 800d67e:	fa02 f303 	lsl.w	r3, r2, r3
 800d682:	43da      	mvns	r2, r3
 800d684:	4b11      	ldr	r3, [pc, #68]	; (800d6cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4013      	ands	r3, r2
 800d68a:	4a10      	ldr	r2, [pc, #64]	; (800d6cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d68c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d692:	2201      	movs	r2, #1
 800d694:	409a      	lsls	r2, r3
 800d696:	4b0d      	ldr	r3, [pc, #52]	; (800d6cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4313      	orrs	r3, r2
 800d69c:	4a0b      	ldr	r2, [pc, #44]	; (800d6cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d69e:	6013      	str	r3, [r2, #0]
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	4413      	add	r3, r2
 800d6aa:	009b      	lsls	r3, r3, #2
 800d6ac:	4a06      	ldr	r2, [pc, #24]	; (800d6c8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d6ae:	441a      	add	r2, r3
 800d6b0:	69bb      	ldr	r3, [r7, #24]
 800d6b2:	3304      	adds	r3, #4
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	4610      	mov	r0, r2
 800d6b8:	f7fe f8f0 	bl	800b89c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6bc:	bf00      	nop
 800d6be:	3720      	adds	r7, #32
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bd80      	pop	{r7, pc}
 800d6c4:	200005a8 	.word	0x200005a8
 800d6c8:	200005ac 	.word	0x200005ac
 800d6cc:	200006b0 	.word	0x200006b0

0800d6d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d6d0:	b480      	push	{r7}
 800d6d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d6d4:	4b07      	ldr	r3, [pc, #28]	; (800d6f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d004      	beq.n	800d6e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d6dc:	4b05      	ldr	r3, [pc, #20]	; (800d6f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d6e2:	3201      	adds	r2, #1
 800d6e4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d6e6:	4b03      	ldr	r3, [pc, #12]	; (800d6f4 <pvTaskIncrementMutexHeldCount+0x24>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
	}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr
 800d6f4:	200005a8 	.word	0x200005a8

0800d6f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b084      	sub	sp, #16
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d702:	4b29      	ldr	r3, [pc, #164]	; (800d7a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d708:	4b28      	ldr	r3, [pc, #160]	; (800d7ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	3304      	adds	r3, #4
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe f921 	bl	800b956 <uxListRemove>
 800d714:	4603      	mov	r3, r0
 800d716:	2b00      	cmp	r3, #0
 800d718:	d10b      	bne.n	800d732 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d71a:	4b24      	ldr	r3, [pc, #144]	; (800d7ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d720:	2201      	movs	r2, #1
 800d722:	fa02 f303 	lsl.w	r3, r2, r3
 800d726:	43da      	mvns	r2, r3
 800d728:	4b21      	ldr	r3, [pc, #132]	; (800d7b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4013      	ands	r3, r2
 800d72e:	4a20      	ldr	r2, [pc, #128]	; (800d7b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d730:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d738:	d10a      	bne.n	800d750 <prvAddCurrentTaskToDelayedList+0x58>
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d007      	beq.n	800d750 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d740:	4b1a      	ldr	r3, [pc, #104]	; (800d7ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	3304      	adds	r3, #4
 800d746:	4619      	mov	r1, r3
 800d748:	481a      	ldr	r0, [pc, #104]	; (800d7b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d74a:	f7fe f8a7 	bl	800b89c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d74e:	e026      	b.n	800d79e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d750:	68fa      	ldr	r2, [r7, #12]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	4413      	add	r3, r2
 800d756:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d758:	4b14      	ldr	r3, [pc, #80]	; (800d7ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	68ba      	ldr	r2, [r7, #8]
 800d75e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d760:	68ba      	ldr	r2, [r7, #8]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	429a      	cmp	r2, r3
 800d766:	d209      	bcs.n	800d77c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d768:	4b13      	ldr	r3, [pc, #76]	; (800d7b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	4b0f      	ldr	r3, [pc, #60]	; (800d7ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	3304      	adds	r3, #4
 800d772:	4619      	mov	r1, r3
 800d774:	4610      	mov	r0, r2
 800d776:	f7fe f8b5 	bl	800b8e4 <vListInsert>
}
 800d77a:	e010      	b.n	800d79e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d77c:	4b0f      	ldr	r3, [pc, #60]	; (800d7bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	4b0a      	ldr	r3, [pc, #40]	; (800d7ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	3304      	adds	r3, #4
 800d786:	4619      	mov	r1, r3
 800d788:	4610      	mov	r0, r2
 800d78a:	f7fe f8ab 	bl	800b8e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d78e:	4b0c      	ldr	r3, [pc, #48]	; (800d7c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	429a      	cmp	r2, r3
 800d796:	d202      	bcs.n	800d79e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d798:	4a09      	ldr	r2, [pc, #36]	; (800d7c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	6013      	str	r3, [r2, #0]
}
 800d79e:	bf00      	nop
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	200006ac 	.word	0x200006ac
 800d7ac:	200005a8 	.word	0x200005a8
 800d7b0:	200006b0 	.word	0x200006b0
 800d7b4:	20000694 	.word	0x20000694
 800d7b8:	20000664 	.word	0x20000664
 800d7bc:	20000660 	.word	0x20000660
 800d7c0:	200006c8 	.word	0x200006c8

0800d7c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	3b04      	subs	r3, #4
 800d7d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d7dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	3b04      	subs	r3, #4
 800d7e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	f023 0201 	bic.w	r2, r3, #1
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	3b04      	subs	r3, #4
 800d7f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d7f4:	4a0c      	ldr	r2, [pc, #48]	; (800d828 <pxPortInitialiseStack+0x64>)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	3b14      	subs	r3, #20
 800d7fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	3b04      	subs	r3, #4
 800d80a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	f06f 0202 	mvn.w	r2, #2
 800d812:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	3b20      	subs	r3, #32
 800d818:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d81a:	68fb      	ldr	r3, [r7, #12]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3714      	adds	r7, #20
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr
 800d828:	0800d82d 	.word	0x0800d82d

0800d82c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d82c:	b480      	push	{r7}
 800d82e:	b085      	sub	sp, #20
 800d830:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d832:	2300      	movs	r3, #0
 800d834:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d836:	4b14      	ldr	r3, [pc, #80]	; (800d888 <prvTaskExitError+0x5c>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d83e:	d00c      	beq.n	800d85a <prvTaskExitError+0x2e>
	__asm volatile
 800d840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d844:	b672      	cpsid	i
 800d846:	f383 8811 	msr	BASEPRI, r3
 800d84a:	f3bf 8f6f 	isb	sy
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	b662      	cpsie	i
 800d854:	60fb      	str	r3, [r7, #12]
}
 800d856:	bf00      	nop
 800d858:	e7fe      	b.n	800d858 <prvTaskExitError+0x2c>
	__asm volatile
 800d85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d85e:	b672      	cpsid	i
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	b662      	cpsie	i
 800d86e:	60bb      	str	r3, [r7, #8]
}
 800d870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d872:	bf00      	nop
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d0fc      	beq.n	800d874 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d87a:	bf00      	nop
 800d87c:	bf00      	nop
 800d87e:	3714      	adds	r7, #20
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	2000004c 	.word	0x2000004c
 800d88c:	00000000 	.word	0x00000000

0800d890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d890:	4b07      	ldr	r3, [pc, #28]	; (800d8b0 <pxCurrentTCBConst2>)
 800d892:	6819      	ldr	r1, [r3, #0]
 800d894:	6808      	ldr	r0, [r1, #0]
 800d896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d89a:	f380 8809 	msr	PSP, r0
 800d89e:	f3bf 8f6f 	isb	sy
 800d8a2:	f04f 0000 	mov.w	r0, #0
 800d8a6:	f380 8811 	msr	BASEPRI, r0
 800d8aa:	4770      	bx	lr
 800d8ac:	f3af 8000 	nop.w

0800d8b0 <pxCurrentTCBConst2>:
 800d8b0:	200005a8 	.word	0x200005a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d8b4:	bf00      	nop
 800d8b6:	bf00      	nop

0800d8b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d8b8:	4808      	ldr	r0, [pc, #32]	; (800d8dc <prvPortStartFirstTask+0x24>)
 800d8ba:	6800      	ldr	r0, [r0, #0]
 800d8bc:	6800      	ldr	r0, [r0, #0]
 800d8be:	f380 8808 	msr	MSP, r0
 800d8c2:	f04f 0000 	mov.w	r0, #0
 800d8c6:	f380 8814 	msr	CONTROL, r0
 800d8ca:	b662      	cpsie	i
 800d8cc:	b661      	cpsie	f
 800d8ce:	f3bf 8f4f 	dsb	sy
 800d8d2:	f3bf 8f6f 	isb	sy
 800d8d6:	df00      	svc	0
 800d8d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d8da:	bf00      	nop
 800d8dc:	e000ed08 	.word	0xe000ed08

0800d8e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d8e6:	4b37      	ldr	r3, [pc, #220]	; (800d9c4 <xPortStartScheduler+0xe4>)
 800d8e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	22ff      	movs	r2, #255	; 0xff
 800d8f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d900:	78fb      	ldrb	r3, [r7, #3]
 800d902:	b2db      	uxtb	r3, r3
 800d904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	4b2f      	ldr	r3, [pc, #188]	; (800d9c8 <xPortStartScheduler+0xe8>)
 800d90c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d90e:	4b2f      	ldr	r3, [pc, #188]	; (800d9cc <xPortStartScheduler+0xec>)
 800d910:	2207      	movs	r2, #7
 800d912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d914:	e009      	b.n	800d92a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d916:	4b2d      	ldr	r3, [pc, #180]	; (800d9cc <xPortStartScheduler+0xec>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	3b01      	subs	r3, #1
 800d91c:	4a2b      	ldr	r2, [pc, #172]	; (800d9cc <xPortStartScheduler+0xec>)
 800d91e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d920:	78fb      	ldrb	r3, [r7, #3]
 800d922:	b2db      	uxtb	r3, r3
 800d924:	005b      	lsls	r3, r3, #1
 800d926:	b2db      	uxtb	r3, r3
 800d928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d92a:	78fb      	ldrb	r3, [r7, #3]
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d932:	2b80      	cmp	r3, #128	; 0x80
 800d934:	d0ef      	beq.n	800d916 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d936:	4b25      	ldr	r3, [pc, #148]	; (800d9cc <xPortStartScheduler+0xec>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f1c3 0307 	rsb	r3, r3, #7
 800d93e:	2b04      	cmp	r3, #4
 800d940:	d00c      	beq.n	800d95c <xPortStartScheduler+0x7c>
	__asm volatile
 800d942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d946:	b672      	cpsid	i
 800d948:	f383 8811 	msr	BASEPRI, r3
 800d94c:	f3bf 8f6f 	isb	sy
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	b662      	cpsie	i
 800d956:	60bb      	str	r3, [r7, #8]
}
 800d958:	bf00      	nop
 800d95a:	e7fe      	b.n	800d95a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d95c:	4b1b      	ldr	r3, [pc, #108]	; (800d9cc <xPortStartScheduler+0xec>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	021b      	lsls	r3, r3, #8
 800d962:	4a1a      	ldr	r2, [pc, #104]	; (800d9cc <xPortStartScheduler+0xec>)
 800d964:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d966:	4b19      	ldr	r3, [pc, #100]	; (800d9cc <xPortStartScheduler+0xec>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d96e:	4a17      	ldr	r2, [pc, #92]	; (800d9cc <xPortStartScheduler+0xec>)
 800d970:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	b2da      	uxtb	r2, r3
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d97a:	4b15      	ldr	r3, [pc, #84]	; (800d9d0 <xPortStartScheduler+0xf0>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a14      	ldr	r2, [pc, #80]	; (800d9d0 <xPortStartScheduler+0xf0>)
 800d980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d984:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d986:	4b12      	ldr	r3, [pc, #72]	; (800d9d0 <xPortStartScheduler+0xf0>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a11      	ldr	r2, [pc, #68]	; (800d9d0 <xPortStartScheduler+0xf0>)
 800d98c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d990:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d992:	f000 f8dd 	bl	800db50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d996:	4b0f      	ldr	r3, [pc, #60]	; (800d9d4 <xPortStartScheduler+0xf4>)
 800d998:	2200      	movs	r2, #0
 800d99a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d99c:	f000 f8fc 	bl	800db98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d9a0:	4b0d      	ldr	r3, [pc, #52]	; (800d9d8 <xPortStartScheduler+0xf8>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a0c      	ldr	r2, [pc, #48]	; (800d9d8 <xPortStartScheduler+0xf8>)
 800d9a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d9aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d9ac:	f7ff ff84 	bl	800d8b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d9b0:	f7ff fa76 	bl	800cea0 <vTaskSwitchContext>
	prvTaskExitError();
 800d9b4:	f7ff ff3a 	bl	800d82c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d9b8:	2300      	movs	r3, #0
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	e000e400 	.word	0xe000e400
 800d9c8:	200006d4 	.word	0x200006d4
 800d9cc:	200006d8 	.word	0x200006d8
 800d9d0:	e000ed20 	.word	0xe000ed20
 800d9d4:	2000004c 	.word	0x2000004c
 800d9d8:	e000ef34 	.word	0xe000ef34

0800d9dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
	__asm volatile
 800d9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e6:	b672      	cpsid	i
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	b662      	cpsie	i
 800d9f6:	607b      	str	r3, [r7, #4]
}
 800d9f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d9fa:	4b10      	ldr	r3, [pc, #64]	; (800da3c <vPortEnterCritical+0x60>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	3301      	adds	r3, #1
 800da00:	4a0e      	ldr	r2, [pc, #56]	; (800da3c <vPortEnterCritical+0x60>)
 800da02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800da04:	4b0d      	ldr	r3, [pc, #52]	; (800da3c <vPortEnterCritical+0x60>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d111      	bne.n	800da30 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800da0c:	4b0c      	ldr	r3, [pc, #48]	; (800da40 <vPortEnterCritical+0x64>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	b2db      	uxtb	r3, r3
 800da12:	2b00      	cmp	r3, #0
 800da14:	d00c      	beq.n	800da30 <vPortEnterCritical+0x54>
	__asm volatile
 800da16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1a:	b672      	cpsid	i
 800da1c:	f383 8811 	msr	BASEPRI, r3
 800da20:	f3bf 8f6f 	isb	sy
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	b662      	cpsie	i
 800da2a:	603b      	str	r3, [r7, #0]
}
 800da2c:	bf00      	nop
 800da2e:	e7fe      	b.n	800da2e <vPortEnterCritical+0x52>
	}
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr
 800da3c:	2000004c 	.word	0x2000004c
 800da40:	e000ed04 	.word	0xe000ed04

0800da44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800da4a:	4b13      	ldr	r3, [pc, #76]	; (800da98 <vPortExitCritical+0x54>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d10c      	bne.n	800da6c <vPortExitCritical+0x28>
	__asm volatile
 800da52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da56:	b672      	cpsid	i
 800da58:	f383 8811 	msr	BASEPRI, r3
 800da5c:	f3bf 8f6f 	isb	sy
 800da60:	f3bf 8f4f 	dsb	sy
 800da64:	b662      	cpsie	i
 800da66:	607b      	str	r3, [r7, #4]
}
 800da68:	bf00      	nop
 800da6a:	e7fe      	b.n	800da6a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800da6c:	4b0a      	ldr	r3, [pc, #40]	; (800da98 <vPortExitCritical+0x54>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	3b01      	subs	r3, #1
 800da72:	4a09      	ldr	r2, [pc, #36]	; (800da98 <vPortExitCritical+0x54>)
 800da74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da76:	4b08      	ldr	r3, [pc, #32]	; (800da98 <vPortExitCritical+0x54>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d105      	bne.n	800da8a <vPortExitCritical+0x46>
 800da7e:	2300      	movs	r3, #0
 800da80:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800da88:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da8a:	bf00      	nop
 800da8c:	370c      	adds	r7, #12
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop
 800da98:	2000004c 	.word	0x2000004c
 800da9c:	00000000 	.word	0x00000000

0800daa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800daa0:	f3ef 8009 	mrs	r0, PSP
 800daa4:	f3bf 8f6f 	isb	sy
 800daa8:	4b15      	ldr	r3, [pc, #84]	; (800db00 <pxCurrentTCBConst>)
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	f01e 0f10 	tst.w	lr, #16
 800dab0:	bf08      	it	eq
 800dab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daba:	6010      	str	r0, [r2, #0]
 800dabc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dac4:	b672      	cpsid	i
 800dac6:	f380 8811 	msr	BASEPRI, r0
 800daca:	f3bf 8f4f 	dsb	sy
 800dace:	f3bf 8f6f 	isb	sy
 800dad2:	b662      	cpsie	i
 800dad4:	f7ff f9e4 	bl	800cea0 <vTaskSwitchContext>
 800dad8:	f04f 0000 	mov.w	r0, #0
 800dadc:	f380 8811 	msr	BASEPRI, r0
 800dae0:	bc09      	pop	{r0, r3}
 800dae2:	6819      	ldr	r1, [r3, #0]
 800dae4:	6808      	ldr	r0, [r1, #0]
 800dae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daea:	f01e 0f10 	tst.w	lr, #16
 800daee:	bf08      	it	eq
 800daf0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800daf4:	f380 8809 	msr	PSP, r0
 800daf8:	f3bf 8f6f 	isb	sy
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop

0800db00 <pxCurrentTCBConst>:
 800db00:	200005a8 	.word	0x200005a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800db04:	bf00      	nop
 800db06:	bf00      	nop

0800db08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
	__asm volatile
 800db0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db12:	b672      	cpsid	i
 800db14:	f383 8811 	msr	BASEPRI, r3
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	b662      	cpsie	i
 800db22:	607b      	str	r3, [r7, #4]
}
 800db24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800db26:	f7ff f901 	bl	800cd2c <xTaskIncrementTick>
 800db2a:	4603      	mov	r3, r0
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d003      	beq.n	800db38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800db30:	4b06      	ldr	r3, [pc, #24]	; (800db4c <SysTick_Handler+0x44>)
 800db32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db36:	601a      	str	r2, [r3, #0]
 800db38:	2300      	movs	r3, #0
 800db3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	f383 8811 	msr	BASEPRI, r3
}
 800db42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800db44:	bf00      	nop
 800db46:	3708      	adds	r7, #8
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}
 800db4c:	e000ed04 	.word	0xe000ed04

0800db50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800db50:	b480      	push	{r7}
 800db52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800db54:	4b0b      	ldr	r3, [pc, #44]	; (800db84 <vPortSetupTimerInterrupt+0x34>)
 800db56:	2200      	movs	r2, #0
 800db58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800db5a:	4b0b      	ldr	r3, [pc, #44]	; (800db88 <vPortSetupTimerInterrupt+0x38>)
 800db5c:	2200      	movs	r2, #0
 800db5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800db60:	4b0a      	ldr	r3, [pc, #40]	; (800db8c <vPortSetupTimerInterrupt+0x3c>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a0a      	ldr	r2, [pc, #40]	; (800db90 <vPortSetupTimerInterrupt+0x40>)
 800db66:	fba2 2303 	umull	r2, r3, r2, r3
 800db6a:	099b      	lsrs	r3, r3, #6
 800db6c:	4a09      	ldr	r2, [pc, #36]	; (800db94 <vPortSetupTimerInterrupt+0x44>)
 800db6e:	3b01      	subs	r3, #1
 800db70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db72:	4b04      	ldr	r3, [pc, #16]	; (800db84 <vPortSetupTimerInterrupt+0x34>)
 800db74:	2207      	movs	r2, #7
 800db76:	601a      	str	r2, [r3, #0]
}
 800db78:	bf00      	nop
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	e000e010 	.word	0xe000e010
 800db88:	e000e018 	.word	0xe000e018
 800db8c:	20000040 	.word	0x20000040
 800db90:	10624dd3 	.word	0x10624dd3
 800db94:	e000e014 	.word	0xe000e014

0800db98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dba8 <vPortEnableVFP+0x10>
 800db9c:	6801      	ldr	r1, [r0, #0]
 800db9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dba2:	6001      	str	r1, [r0, #0]
 800dba4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dba6:	bf00      	nop
 800dba8:	e000ed88 	.word	0xe000ed88

0800dbac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b08a      	sub	sp, #40	; 0x28
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dbb8:	f7ff f80c 	bl	800cbd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dbbc:	4b5b      	ldr	r3, [pc, #364]	; (800dd2c <pvPortMalloc+0x180>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d101      	bne.n	800dbc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dbc4:	f000 f91a 	bl	800ddfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dbc8:	4b59      	ldr	r3, [pc, #356]	; (800dd30 <pvPortMalloc+0x184>)
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	4013      	ands	r3, r2
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f040 8092 	bne.w	800dcfa <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d01f      	beq.n	800dc1c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800dbdc:	2208      	movs	r2, #8
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	4413      	add	r3, r2
 800dbe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f003 0307 	and.w	r3, r3, #7
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d016      	beq.n	800dc1c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f023 0307 	bic.w	r3, r3, #7
 800dbf4:	3308      	adds	r3, #8
 800dbf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f003 0307 	and.w	r3, r3, #7
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d00c      	beq.n	800dc1c <pvPortMalloc+0x70>
	__asm volatile
 800dc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc06:	b672      	cpsid	i
 800dc08:	f383 8811 	msr	BASEPRI, r3
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	f3bf 8f4f 	dsb	sy
 800dc14:	b662      	cpsie	i
 800dc16:	617b      	str	r3, [r7, #20]
}
 800dc18:	bf00      	nop
 800dc1a:	e7fe      	b.n	800dc1a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d06b      	beq.n	800dcfa <pvPortMalloc+0x14e>
 800dc22:	4b44      	ldr	r3, [pc, #272]	; (800dd34 <pvPortMalloc+0x188>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d866      	bhi.n	800dcfa <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dc2c:	4b42      	ldr	r3, [pc, #264]	; (800dd38 <pvPortMalloc+0x18c>)
 800dc2e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dc30:	4b41      	ldr	r3, [pc, #260]	; (800dd38 <pvPortMalloc+0x18c>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc36:	e004      	b.n	800dc42 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d903      	bls.n	800dc54 <pvPortMalloc+0xa8>
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1f1      	bne.n	800dc38 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dc54:	4b35      	ldr	r3, [pc, #212]	; (800dd2c <pvPortMalloc+0x180>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d04d      	beq.n	800dcfa <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc5e:	6a3b      	ldr	r3, [r7, #32]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2208      	movs	r2, #8
 800dc64:	4413      	add	r3, r2
 800dc66:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	6a3b      	ldr	r3, [r7, #32]
 800dc6e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc72:	685a      	ldr	r2, [r3, #4]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	1ad2      	subs	r2, r2, r3
 800dc78:	2308      	movs	r3, #8
 800dc7a:	005b      	lsls	r3, r3, #1
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d921      	bls.n	800dcc4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4413      	add	r3, r2
 800dc86:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	f003 0307 	and.w	r3, r3, #7
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d00c      	beq.n	800dcac <pvPortMalloc+0x100>
	__asm volatile
 800dc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc96:	b672      	cpsid	i
 800dc98:	f383 8811 	msr	BASEPRI, r3
 800dc9c:	f3bf 8f6f 	isb	sy
 800dca0:	f3bf 8f4f 	dsb	sy
 800dca4:	b662      	cpsie	i
 800dca6:	613b      	str	r3, [r7, #16]
}
 800dca8:	bf00      	nop
 800dcaa:	e7fe      	b.n	800dcaa <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcae:	685a      	ldr	r2, [r3, #4]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	1ad2      	subs	r2, r2, r3
 800dcb4:	69bb      	ldr	r3, [r7, #24]
 800dcb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dcbe:	69b8      	ldr	r0, [r7, #24]
 800dcc0:	f000 f8fe 	bl	800dec0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dcc4:	4b1b      	ldr	r3, [pc, #108]	; (800dd34 <pvPortMalloc+0x188>)
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	1ad3      	subs	r3, r2, r3
 800dcce:	4a19      	ldr	r2, [pc, #100]	; (800dd34 <pvPortMalloc+0x188>)
 800dcd0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dcd2:	4b18      	ldr	r3, [pc, #96]	; (800dd34 <pvPortMalloc+0x188>)
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	4b19      	ldr	r3, [pc, #100]	; (800dd3c <pvPortMalloc+0x190>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d203      	bcs.n	800dce6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dcde:	4b15      	ldr	r3, [pc, #84]	; (800dd34 <pvPortMalloc+0x188>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4a16      	ldr	r2, [pc, #88]	; (800dd3c <pvPortMalloc+0x190>)
 800dce4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce8:	685a      	ldr	r2, [r3, #4]
 800dcea:	4b11      	ldr	r3, [pc, #68]	; (800dd30 <pvPortMalloc+0x184>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	431a      	orrs	r2, r3
 800dcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dcfa:	f7fe ff79 	bl	800cbf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	f003 0307 	and.w	r3, r3, #7
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d00c      	beq.n	800dd22 <pvPortMalloc+0x176>
	__asm volatile
 800dd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0c:	b672      	cpsid	i
 800dd0e:	f383 8811 	msr	BASEPRI, r3
 800dd12:	f3bf 8f6f 	isb	sy
 800dd16:	f3bf 8f4f 	dsb	sy
 800dd1a:	b662      	cpsie	i
 800dd1c:	60fb      	str	r3, [r7, #12]
}
 800dd1e:	bf00      	nop
 800dd20:	e7fe      	b.n	800dd20 <pvPortMalloc+0x174>
	return pvReturn;
 800dd22:	69fb      	ldr	r3, [r7, #28]
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3728      	adds	r7, #40	; 0x28
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd80      	pop	{r7, pc}
 800dd2c:	20007ee4 	.word	0x20007ee4
 800dd30:	20007ef0 	.word	0x20007ef0
 800dd34:	20007ee8 	.word	0x20007ee8
 800dd38:	20007edc 	.word	0x20007edc
 800dd3c:	20007eec 	.word	0x20007eec

0800dd40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b086      	sub	sp, #24
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d04c      	beq.n	800ddec <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dd52:	2308      	movs	r3, #8
 800dd54:	425b      	negs	r3, r3
 800dd56:	697a      	ldr	r2, [r7, #20]
 800dd58:	4413      	add	r3, r2
 800dd5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	685a      	ldr	r2, [r3, #4]
 800dd64:	4b23      	ldr	r3, [pc, #140]	; (800ddf4 <vPortFree+0xb4>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4013      	ands	r3, r2
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10c      	bne.n	800dd88 <vPortFree+0x48>
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd72:	b672      	cpsid	i
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	b662      	cpsie	i
 800dd82:	60fb      	str	r3, [r7, #12]
}
 800dd84:	bf00      	nop
 800dd86:	e7fe      	b.n	800dd86 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d00c      	beq.n	800ddaa <vPortFree+0x6a>
	__asm volatile
 800dd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd94:	b672      	cpsid	i
 800dd96:	f383 8811 	msr	BASEPRI, r3
 800dd9a:	f3bf 8f6f 	isb	sy
 800dd9e:	f3bf 8f4f 	dsb	sy
 800dda2:	b662      	cpsie	i
 800dda4:	60bb      	str	r3, [r7, #8]
}
 800dda6:	bf00      	nop
 800dda8:	e7fe      	b.n	800dda8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	685a      	ldr	r2, [r3, #4]
 800ddae:	4b11      	ldr	r3, [pc, #68]	; (800ddf4 <vPortFree+0xb4>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4013      	ands	r3, r2
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d019      	beq.n	800ddec <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d115      	bne.n	800ddec <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	685a      	ldr	r2, [r3, #4]
 800ddc4:	4b0b      	ldr	r3, [pc, #44]	; (800ddf4 <vPortFree+0xb4>)
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	43db      	mvns	r3, r3
 800ddca:	401a      	ands	r2, r3
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ddd0:	f7fe ff00 	bl	800cbd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	685a      	ldr	r2, [r3, #4]
 800ddd8:	4b07      	ldr	r3, [pc, #28]	; (800ddf8 <vPortFree+0xb8>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4413      	add	r3, r2
 800ddde:	4a06      	ldr	r2, [pc, #24]	; (800ddf8 <vPortFree+0xb8>)
 800dde0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dde2:	6938      	ldr	r0, [r7, #16]
 800dde4:	f000 f86c 	bl	800dec0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dde8:	f7fe ff02 	bl	800cbf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ddec:	bf00      	nop
 800ddee:	3718      	adds	r7, #24
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	20007ef0 	.word	0x20007ef0
 800ddf8:	20007ee8 	.word	0x20007ee8

0800ddfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b085      	sub	sp, #20
 800de00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de02:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800de06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de08:	4b27      	ldr	r3, [pc, #156]	; (800dea8 <prvHeapInit+0xac>)
 800de0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f003 0307 	and.w	r3, r3, #7
 800de12:	2b00      	cmp	r3, #0
 800de14:	d00c      	beq.n	800de30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	3307      	adds	r3, #7
 800de1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f023 0307 	bic.w	r3, r3, #7
 800de22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800de24:	68ba      	ldr	r2, [r7, #8]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	1ad3      	subs	r3, r2, r3
 800de2a:	4a1f      	ldr	r2, [pc, #124]	; (800dea8 <prvHeapInit+0xac>)
 800de2c:	4413      	add	r3, r2
 800de2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800de34:	4a1d      	ldr	r2, [pc, #116]	; (800deac <prvHeapInit+0xb0>)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800de3a:	4b1c      	ldr	r3, [pc, #112]	; (800deac <prvHeapInit+0xb0>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	68ba      	ldr	r2, [r7, #8]
 800de44:	4413      	add	r3, r2
 800de46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800de48:	2208      	movs	r2, #8
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	1a9b      	subs	r3, r3, r2
 800de4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f023 0307 	bic.w	r3, r3, #7
 800de56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	4a15      	ldr	r2, [pc, #84]	; (800deb0 <prvHeapInit+0xb4>)
 800de5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800de5e:	4b14      	ldr	r3, [pc, #80]	; (800deb0 <prvHeapInit+0xb4>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2200      	movs	r2, #0
 800de64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800de66:	4b12      	ldr	r3, [pc, #72]	; (800deb0 <prvHeapInit+0xb4>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2200      	movs	r2, #0
 800de6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	68fa      	ldr	r2, [r7, #12]
 800de76:	1ad2      	subs	r2, r2, r3
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800de7c:	4b0c      	ldr	r3, [pc, #48]	; (800deb0 <prvHeapInit+0xb4>)
 800de7e:	681a      	ldr	r2, [r3, #0]
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	4a0a      	ldr	r2, [pc, #40]	; (800deb4 <prvHeapInit+0xb8>)
 800de8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	4a09      	ldr	r2, [pc, #36]	; (800deb8 <prvHeapInit+0xbc>)
 800de92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800de94:	4b09      	ldr	r3, [pc, #36]	; (800debc <prvHeapInit+0xc0>)
 800de96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800de9a:	601a      	str	r2, [r3, #0]
}
 800de9c:	bf00      	nop
 800de9e:	3714      	adds	r7, #20
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr
 800dea8:	200006dc 	.word	0x200006dc
 800deac:	20007edc 	.word	0x20007edc
 800deb0:	20007ee4 	.word	0x20007ee4
 800deb4:	20007eec 	.word	0x20007eec
 800deb8:	20007ee8 	.word	0x20007ee8
 800debc:	20007ef0 	.word	0x20007ef0

0800dec0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dec0:	b480      	push	{r7}
 800dec2:	b085      	sub	sp, #20
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dec8:	4b28      	ldr	r3, [pc, #160]	; (800df6c <prvInsertBlockIntoFreeList+0xac>)
 800deca:	60fb      	str	r3, [r7, #12]
 800decc:	e002      	b.n	800ded4 <prvInsertBlockIntoFreeList+0x14>
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	60fb      	str	r3, [r7, #12]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	429a      	cmp	r2, r3
 800dedc:	d8f7      	bhi.n	800dece <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	68ba      	ldr	r2, [r7, #8]
 800dee8:	4413      	add	r3, r2
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	429a      	cmp	r2, r3
 800deee:	d108      	bne.n	800df02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	685a      	ldr	r2, [r3, #4]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	441a      	add	r2, r3
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	68ba      	ldr	r2, [r7, #8]
 800df0c:	441a      	add	r2, r3
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	429a      	cmp	r2, r3
 800df14:	d118      	bne.n	800df48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	4b15      	ldr	r3, [pc, #84]	; (800df70 <prvInsertBlockIntoFreeList+0xb0>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d00d      	beq.n	800df3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	685a      	ldr	r2, [r3, #4]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	441a      	add	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	601a      	str	r2, [r3, #0]
 800df3c:	e008      	b.n	800df50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df3e:	4b0c      	ldr	r3, [pc, #48]	; (800df70 <prvInsertBlockIntoFreeList+0xb0>)
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	601a      	str	r2, [r3, #0]
 800df46:	e003      	b.n	800df50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800df50:	68fa      	ldr	r2, [r7, #12]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	429a      	cmp	r2, r3
 800df56:	d002      	beq.n	800df5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df5e:	bf00      	nop
 800df60:	3714      	adds	r7, #20
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr
 800df6a:	bf00      	nop
 800df6c:	20007edc 	.word	0x20007edc
 800df70:	20007ee4 	.word	0x20007ee4

0800df74 <__libc_init_array>:
 800df74:	b570      	push	{r4, r5, r6, lr}
 800df76:	4d0d      	ldr	r5, [pc, #52]	; (800dfac <__libc_init_array+0x38>)
 800df78:	4c0d      	ldr	r4, [pc, #52]	; (800dfb0 <__libc_init_array+0x3c>)
 800df7a:	1b64      	subs	r4, r4, r5
 800df7c:	10a4      	asrs	r4, r4, #2
 800df7e:	2600      	movs	r6, #0
 800df80:	42a6      	cmp	r6, r4
 800df82:	d109      	bne.n	800df98 <__libc_init_array+0x24>
 800df84:	4d0b      	ldr	r5, [pc, #44]	; (800dfb4 <__libc_init_array+0x40>)
 800df86:	4c0c      	ldr	r4, [pc, #48]	; (800dfb8 <__libc_init_array+0x44>)
 800df88:	f000 f8f6 	bl	800e178 <_init>
 800df8c:	1b64      	subs	r4, r4, r5
 800df8e:	10a4      	asrs	r4, r4, #2
 800df90:	2600      	movs	r6, #0
 800df92:	42a6      	cmp	r6, r4
 800df94:	d105      	bne.n	800dfa2 <__libc_init_array+0x2e>
 800df96:	bd70      	pop	{r4, r5, r6, pc}
 800df98:	f855 3b04 	ldr.w	r3, [r5], #4
 800df9c:	4798      	blx	r3
 800df9e:	3601      	adds	r6, #1
 800dfa0:	e7ee      	b.n	800df80 <__libc_init_array+0xc>
 800dfa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfa6:	4798      	blx	r3
 800dfa8:	3601      	adds	r6, #1
 800dfaa:	e7f2      	b.n	800df92 <__libc_init_array+0x1e>
 800dfac:	08034448 	.word	0x08034448
 800dfb0:	08034448 	.word	0x08034448
 800dfb4:	08034448 	.word	0x08034448
 800dfb8:	0803444c 	.word	0x0803444c

0800dfbc <__retarget_lock_acquire_recursive>:
 800dfbc:	4770      	bx	lr

0800dfbe <__retarget_lock_release_recursive>:
 800dfbe:	4770      	bx	lr

0800dfc0 <memcpy>:
 800dfc0:	440a      	add	r2, r1
 800dfc2:	4291      	cmp	r1, r2
 800dfc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dfc8:	d100      	bne.n	800dfcc <memcpy+0xc>
 800dfca:	4770      	bx	lr
 800dfcc:	b510      	push	{r4, lr}
 800dfce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dfd6:	4291      	cmp	r1, r2
 800dfd8:	d1f9      	bne.n	800dfce <memcpy+0xe>
 800dfda:	bd10      	pop	{r4, pc}

0800dfdc <memset>:
 800dfdc:	4402      	add	r2, r0
 800dfde:	4603      	mov	r3, r0
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d100      	bne.n	800dfe6 <memset+0xa>
 800dfe4:	4770      	bx	lr
 800dfe6:	f803 1b01 	strb.w	r1, [r3], #1
 800dfea:	e7f9      	b.n	800dfe0 <memset+0x4>

0800dfec <cleanup_glue>:
 800dfec:	b538      	push	{r3, r4, r5, lr}
 800dfee:	460c      	mov	r4, r1
 800dff0:	6809      	ldr	r1, [r1, #0]
 800dff2:	4605      	mov	r5, r0
 800dff4:	b109      	cbz	r1, 800dffa <cleanup_glue+0xe>
 800dff6:	f7ff fff9 	bl	800dfec <cleanup_glue>
 800dffa:	4621      	mov	r1, r4
 800dffc:	4628      	mov	r0, r5
 800dffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e002:	f000 b869 	b.w	800e0d8 <_free_r>
	...

0800e008 <_reclaim_reent>:
 800e008:	4b2c      	ldr	r3, [pc, #176]	; (800e0bc <_reclaim_reent+0xb4>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4283      	cmp	r3, r0
 800e00e:	b570      	push	{r4, r5, r6, lr}
 800e010:	4604      	mov	r4, r0
 800e012:	d051      	beq.n	800e0b8 <_reclaim_reent+0xb0>
 800e014:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e016:	b143      	cbz	r3, 800e02a <_reclaim_reent+0x22>
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d14a      	bne.n	800e0b4 <_reclaim_reent+0xac>
 800e01e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e020:	6819      	ldr	r1, [r3, #0]
 800e022:	b111      	cbz	r1, 800e02a <_reclaim_reent+0x22>
 800e024:	4620      	mov	r0, r4
 800e026:	f000 f857 	bl	800e0d8 <_free_r>
 800e02a:	6961      	ldr	r1, [r4, #20]
 800e02c:	b111      	cbz	r1, 800e034 <_reclaim_reent+0x2c>
 800e02e:	4620      	mov	r0, r4
 800e030:	f000 f852 	bl	800e0d8 <_free_r>
 800e034:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e036:	b111      	cbz	r1, 800e03e <_reclaim_reent+0x36>
 800e038:	4620      	mov	r0, r4
 800e03a:	f000 f84d 	bl	800e0d8 <_free_r>
 800e03e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e040:	b111      	cbz	r1, 800e048 <_reclaim_reent+0x40>
 800e042:	4620      	mov	r0, r4
 800e044:	f000 f848 	bl	800e0d8 <_free_r>
 800e048:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e04a:	b111      	cbz	r1, 800e052 <_reclaim_reent+0x4a>
 800e04c:	4620      	mov	r0, r4
 800e04e:	f000 f843 	bl	800e0d8 <_free_r>
 800e052:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e054:	b111      	cbz	r1, 800e05c <_reclaim_reent+0x54>
 800e056:	4620      	mov	r0, r4
 800e058:	f000 f83e 	bl	800e0d8 <_free_r>
 800e05c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e05e:	b111      	cbz	r1, 800e066 <_reclaim_reent+0x5e>
 800e060:	4620      	mov	r0, r4
 800e062:	f000 f839 	bl	800e0d8 <_free_r>
 800e066:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e068:	b111      	cbz	r1, 800e070 <_reclaim_reent+0x68>
 800e06a:	4620      	mov	r0, r4
 800e06c:	f000 f834 	bl	800e0d8 <_free_r>
 800e070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e072:	b111      	cbz	r1, 800e07a <_reclaim_reent+0x72>
 800e074:	4620      	mov	r0, r4
 800e076:	f000 f82f 	bl	800e0d8 <_free_r>
 800e07a:	69a3      	ldr	r3, [r4, #24]
 800e07c:	b1e3      	cbz	r3, 800e0b8 <_reclaim_reent+0xb0>
 800e07e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e080:	4620      	mov	r0, r4
 800e082:	4798      	blx	r3
 800e084:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e086:	b1b9      	cbz	r1, 800e0b8 <_reclaim_reent+0xb0>
 800e088:	4620      	mov	r0, r4
 800e08a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e08e:	f7ff bfad 	b.w	800dfec <cleanup_glue>
 800e092:	5949      	ldr	r1, [r1, r5]
 800e094:	b941      	cbnz	r1, 800e0a8 <_reclaim_reent+0xa0>
 800e096:	3504      	adds	r5, #4
 800e098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e09a:	2d80      	cmp	r5, #128	; 0x80
 800e09c:	68d9      	ldr	r1, [r3, #12]
 800e09e:	d1f8      	bne.n	800e092 <_reclaim_reent+0x8a>
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f000 f819 	bl	800e0d8 <_free_r>
 800e0a6:	e7ba      	b.n	800e01e <_reclaim_reent+0x16>
 800e0a8:	680e      	ldr	r6, [r1, #0]
 800e0aa:	4620      	mov	r0, r4
 800e0ac:	f000 f814 	bl	800e0d8 <_free_r>
 800e0b0:	4631      	mov	r1, r6
 800e0b2:	e7ef      	b.n	800e094 <_reclaim_reent+0x8c>
 800e0b4:	2500      	movs	r5, #0
 800e0b6:	e7ef      	b.n	800e098 <_reclaim_reent+0x90>
 800e0b8:	bd70      	pop	{r4, r5, r6, pc}
 800e0ba:	bf00      	nop
 800e0bc:	20000050 	.word	0x20000050

0800e0c0 <__malloc_lock>:
 800e0c0:	4801      	ldr	r0, [pc, #4]	; (800e0c8 <__malloc_lock+0x8>)
 800e0c2:	f7ff bf7b 	b.w	800dfbc <__retarget_lock_acquire_recursive>
 800e0c6:	bf00      	nop
 800e0c8:	20008824 	.word	0x20008824

0800e0cc <__malloc_unlock>:
 800e0cc:	4801      	ldr	r0, [pc, #4]	; (800e0d4 <__malloc_unlock+0x8>)
 800e0ce:	f7ff bf76 	b.w	800dfbe <__retarget_lock_release_recursive>
 800e0d2:	bf00      	nop
 800e0d4:	20008824 	.word	0x20008824

0800e0d8 <_free_r>:
 800e0d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0da:	2900      	cmp	r1, #0
 800e0dc:	d048      	beq.n	800e170 <_free_r+0x98>
 800e0de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0e2:	9001      	str	r0, [sp, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f1a1 0404 	sub.w	r4, r1, #4
 800e0ea:	bfb8      	it	lt
 800e0ec:	18e4      	addlt	r4, r4, r3
 800e0ee:	f7ff ffe7 	bl	800e0c0 <__malloc_lock>
 800e0f2:	4a20      	ldr	r2, [pc, #128]	; (800e174 <_free_r+0x9c>)
 800e0f4:	9801      	ldr	r0, [sp, #4]
 800e0f6:	6813      	ldr	r3, [r2, #0]
 800e0f8:	4615      	mov	r5, r2
 800e0fa:	b933      	cbnz	r3, 800e10a <_free_r+0x32>
 800e0fc:	6063      	str	r3, [r4, #4]
 800e0fe:	6014      	str	r4, [r2, #0]
 800e100:	b003      	add	sp, #12
 800e102:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e106:	f7ff bfe1 	b.w	800e0cc <__malloc_unlock>
 800e10a:	42a3      	cmp	r3, r4
 800e10c:	d90b      	bls.n	800e126 <_free_r+0x4e>
 800e10e:	6821      	ldr	r1, [r4, #0]
 800e110:	1862      	adds	r2, r4, r1
 800e112:	4293      	cmp	r3, r2
 800e114:	bf04      	itt	eq
 800e116:	681a      	ldreq	r2, [r3, #0]
 800e118:	685b      	ldreq	r3, [r3, #4]
 800e11a:	6063      	str	r3, [r4, #4]
 800e11c:	bf04      	itt	eq
 800e11e:	1852      	addeq	r2, r2, r1
 800e120:	6022      	streq	r2, [r4, #0]
 800e122:	602c      	str	r4, [r5, #0]
 800e124:	e7ec      	b.n	800e100 <_free_r+0x28>
 800e126:	461a      	mov	r2, r3
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	b10b      	cbz	r3, 800e130 <_free_r+0x58>
 800e12c:	42a3      	cmp	r3, r4
 800e12e:	d9fa      	bls.n	800e126 <_free_r+0x4e>
 800e130:	6811      	ldr	r1, [r2, #0]
 800e132:	1855      	adds	r5, r2, r1
 800e134:	42a5      	cmp	r5, r4
 800e136:	d10b      	bne.n	800e150 <_free_r+0x78>
 800e138:	6824      	ldr	r4, [r4, #0]
 800e13a:	4421      	add	r1, r4
 800e13c:	1854      	adds	r4, r2, r1
 800e13e:	42a3      	cmp	r3, r4
 800e140:	6011      	str	r1, [r2, #0]
 800e142:	d1dd      	bne.n	800e100 <_free_r+0x28>
 800e144:	681c      	ldr	r4, [r3, #0]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	6053      	str	r3, [r2, #4]
 800e14a:	4421      	add	r1, r4
 800e14c:	6011      	str	r1, [r2, #0]
 800e14e:	e7d7      	b.n	800e100 <_free_r+0x28>
 800e150:	d902      	bls.n	800e158 <_free_r+0x80>
 800e152:	230c      	movs	r3, #12
 800e154:	6003      	str	r3, [r0, #0]
 800e156:	e7d3      	b.n	800e100 <_free_r+0x28>
 800e158:	6825      	ldr	r5, [r4, #0]
 800e15a:	1961      	adds	r1, r4, r5
 800e15c:	428b      	cmp	r3, r1
 800e15e:	bf04      	itt	eq
 800e160:	6819      	ldreq	r1, [r3, #0]
 800e162:	685b      	ldreq	r3, [r3, #4]
 800e164:	6063      	str	r3, [r4, #4]
 800e166:	bf04      	itt	eq
 800e168:	1949      	addeq	r1, r1, r5
 800e16a:	6021      	streq	r1, [r4, #0]
 800e16c:	6054      	str	r4, [r2, #4]
 800e16e:	e7c7      	b.n	800e100 <_free_r+0x28>
 800e170:	b003      	add	sp, #12
 800e172:	bd30      	pop	{r4, r5, pc}
 800e174:	20007ef4 	.word	0x20007ef4

0800e178 <_init>:
 800e178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e17a:	bf00      	nop
 800e17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e17e:	bc08      	pop	{r3}
 800e180:	469e      	mov	lr, r3
 800e182:	4770      	bx	lr

0800e184 <_fini>:
 800e184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e186:	bf00      	nop
 800e188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e18a:	bc08      	pop	{r3}
 800e18c:	469e      	mov	lr, r3
 800e18e:	4770      	bx	lr
