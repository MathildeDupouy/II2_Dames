
II2_Dames.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000262b0  0800ddd0  0800ddd0  0001ddd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08034080  08034080  000500b4  2**0
                  CONTENTS
  4 .ARM          00000008  08034080  08034080  00044080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08034088  08034088  000500b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08034088  08034088  00044088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803408c  0803408c  0004408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08034090  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008778  200000b4  08034144  000500b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000882c  08034144  0005882c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000500b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000334c2  00000000  00000000  000500e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d73  00000000  00000000  000835a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002668  00000000  00000000  00089320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002410  00000000  00000000  0008b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e830  00000000  00000000  0008dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f82c  00000000  00000000  000bc5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011793e  00000000  00000000  000ebdf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00203732  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a638  00000000  00000000  00203788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ddb8 	.word	0x0800ddb8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800ddb8 	.word	0x0800ddb8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <vApplicationGetIdleTaskMemory+0x2c>)
 8000518:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	4a06      	ldr	r2, [pc, #24]	; (8000538 <vApplicationGetIdleTaskMemory+0x30>)
 800051e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2280      	movs	r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000526:	bf00      	nop
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200000d0 	.word	0x200000d0
 8000538:	20000184 	.word	0x20000184

0800053c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000546:	20c8      	movs	r0, #200	; 0xc8
 8000548:	f002 f9fa 	bl	8002940 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800054c:	f000 fa7a 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>
}
 8000550:	bf00      	nop
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	4603      	mov	r3, r0
 8000576:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000580:	2300      	movs	r3, #0
 8000582:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000584:	f000 fa5e 	bl	8000a44 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e010      	b.n	80005b0 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800058e:	88fb      	ldrh	r3, [r7, #6]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	21a8      	movs	r1, #168	; 0xa8
 8000594:	4618      	mov	r0, r3
 8000596:	f002 f9b5 	bl	8002904 <TS_IO_Read>
 800059a:	4603      	mov	r3, r0
 800059c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800059e:	7b7b      	ldrb	r3, [r7, #13]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	2b51      	cmp	r3, #81	; 0x51
 80005a4:	d101      	bne.n	80005aa <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	3301      	adds	r3, #1
 80005ae:	73fb      	strb	r3, [r7, #15]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d802      	bhi.n	80005bc <ft5336_ReadID+0x4e>
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0e8      	beq.n	800058e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005bc:	7b7b      	ldrb	r3, [r7, #13]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b082      	sub	sp, #8
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	4603      	mov	r3, r0
 80005d2:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fa44 	bl	8000a64 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 f932 	bl	8000848 <ft5336_TS_DisableIT>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f002 f97f 	bl	8002904 <TS_IO_Read>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	b2db      	uxtb	r3, r3
 8000614:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b05      	cmp	r3, #5
 800061c:	d901      	bls.n	8000622 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 8000628:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <ft5336_TS_DetectTouch+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	b2db      	uxtb	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000384 	.word	0x20000384

08000640 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b086      	sub	sp, #24
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
 800064c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000662:	4b6d      	ldr	r3, [pc, #436]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000664:	789a      	ldrb	r2, [r3, #2]
 8000666:	4b6c      	ldr	r3, [pc, #432]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000668:	785b      	ldrb	r3, [r3, #1]
 800066a:	429a      	cmp	r2, r3
 800066c:	f080 80cf 	bcs.w	800080e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000670:	4b69      	ldr	r3, [pc, #420]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d871      	bhi.n	800075c <ft5336_TS_GetXY+0x11c>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <ft5336_TS_GetXY+0x40>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	080006a9 	.word	0x080006a9
 8000684:	080006bb 	.word	0x080006bb
 8000688:	080006cd 	.word	0x080006cd
 800068c:	080006df 	.word	0x080006df
 8000690:	080006f1 	.word	0x080006f1
 8000694:	08000703 	.word	0x08000703
 8000698:	08000715 	.word	0x08000715
 800069c:	08000727 	.word	0x08000727
 80006a0:	08000739 	.word	0x08000739
 80006a4:	0800074b 	.word	0x0800074b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006a8:	2304      	movs	r3, #4
 80006aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006ac:	2303      	movs	r3, #3
 80006ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006b0:	2306      	movs	r3, #6
 80006b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006b4:	2305      	movs	r3, #5
 80006b6:	753b      	strb	r3, [r7, #20]
      break;
 80006b8:	e051      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ba:	230a      	movs	r3, #10
 80006bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006be:	2309      	movs	r3, #9
 80006c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006c2:	230c      	movs	r3, #12
 80006c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006c6:	230b      	movs	r3, #11
 80006c8:	753b      	strb	r3, [r7, #20]
      break;
 80006ca:	e048      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80006cc:	2310      	movs	r3, #16
 80006ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80006d0:	230f      	movs	r3, #15
 80006d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80006d4:	2312      	movs	r3, #18
 80006d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80006d8:	2311      	movs	r3, #17
 80006da:	753b      	strb	r3, [r7, #20]
      break;
 80006dc:	e03f      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80006de:	2316      	movs	r3, #22
 80006e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80006e2:	2315      	movs	r3, #21
 80006e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80006e6:	2318      	movs	r3, #24
 80006e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80006ea:	2317      	movs	r3, #23
 80006ec:	753b      	strb	r3, [r7, #20]
      break;
 80006ee:	e036      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80006f0:	231c      	movs	r3, #28
 80006f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80006f4:	231b      	movs	r3, #27
 80006f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80006f8:	231e      	movs	r3, #30
 80006fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80006fc:	231d      	movs	r3, #29
 80006fe:	753b      	strb	r3, [r7, #20]
      break;
 8000700:	e02d      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000702:	2322      	movs	r3, #34	; 0x22
 8000704:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000706:	2321      	movs	r3, #33	; 0x21
 8000708:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800070a:	2324      	movs	r3, #36	; 0x24
 800070c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800070e:	2323      	movs	r3, #35	; 0x23
 8000710:	753b      	strb	r3, [r7, #20]
      break;
 8000712:	e024      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000714:	2328      	movs	r3, #40	; 0x28
 8000716:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000718:	2327      	movs	r3, #39	; 0x27
 800071a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800071c:	232a      	movs	r3, #42	; 0x2a
 800071e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000720:	2329      	movs	r3, #41	; 0x29
 8000722:	753b      	strb	r3, [r7, #20]
      break;
 8000724:	e01b      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000726:	232e      	movs	r3, #46	; 0x2e
 8000728:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800072a:	232d      	movs	r3, #45	; 0x2d
 800072c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800072e:	2330      	movs	r3, #48	; 0x30
 8000730:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000732:	232f      	movs	r3, #47	; 0x2f
 8000734:	753b      	strb	r3, [r7, #20]
      break;
 8000736:	e012      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000738:	2334      	movs	r3, #52	; 0x34
 800073a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800073c:	2333      	movs	r3, #51	; 0x33
 800073e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000740:	2336      	movs	r3, #54	; 0x36
 8000742:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000744:	2335      	movs	r3, #53	; 0x35
 8000746:	753b      	strb	r3, [r7, #20]
      break;
 8000748:	e009      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800074a:	233a      	movs	r3, #58	; 0x3a
 800074c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800074e:	2339      	movs	r3, #57	; 0x39
 8000750:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000752:	233c      	movs	r3, #60	; 0x3c
 8000754:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000756:	233b      	movs	r3, #59	; 0x3b
 8000758:	753b      	strb	r3, [r7, #20]
      break;
 800075a:	e000      	b.n	800075e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800075c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	7dfa      	ldrb	r2, [r7, #23]
 8000764:	4611      	mov	r1, r2
 8000766:	4618      	mov	r0, r3
 8000768:	f002 f8cc 	bl	8002904 <TS_IO_Read>
 800076c:	4603      	mov	r3, r0
 800076e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b29      	ldr	r3, [pc, #164]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 8000778:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	7dba      	ldrb	r2, [r7, #22]
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f002 f8be 	bl	8002904 <TS_IO_Read>
 8000788:	4603      	mov	r3, r0
 800078a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800078c:	7cfb      	ldrb	r3, [r7, #19]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b20      	ldr	r3, [pc, #128]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b1d      	ldr	r3, [pc, #116]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007a6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007aa:	881a      	ldrh	r2, [r3, #0]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007b0:	89fb      	ldrh	r3, [r7, #14]
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	7d7a      	ldrb	r2, [r7, #21]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 f8a3 	bl	8002904 <TS_IO_Read>
 80007be:	4603      	mov	r3, r0
 80007c0:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007c2:	7cfb      	ldrb	r3, [r7, #19]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ca:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80007cc:	89fb      	ldrh	r3, [r7, #14]
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	7d3a      	ldrb	r2, [r7, #20]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 f895 	bl	8002904 <TS_IO_Read>
 80007da:	4603      	mov	r3, r0
 80007dc:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007de:	7cfb      	ldrb	r3, [r7, #19]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	021b      	lsls	r3, r3, #8
 80007e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007f8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <ft5336_TS_GetXY+0x1dc>)
 80007fc:	881a      	ldrh	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	3301      	adds	r3, #1
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4b03      	ldr	r3, [pc, #12]	; (8000818 <ft5336_TS_GetXY+0x1d8>)
 800080c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000384 	.word	0x20000384
 800081c:	20000388 	.word	0x20000388

08000820 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	21a4      	movs	r1, #164	; 0xa4
 800083a:	4618      	mov	r0, r3
 800083c:	f002 f848 	bl	80028d0 <TS_IO_Write>
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	7bfa      	ldrb	r2, [r7, #15]
 8000860:	21a4      	movs	r1, #164	; 0xa4
 8000862:	4618      	mov	r0, r3
 8000864:	f002 f834 	bl	80028d0 <TS_IO_Write>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	6039      	str	r1, [r7, #0]
 80008a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2101      	movs	r1, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 f825 	bl	8002904 <TS_IO_Read>
 80008ba:	4603      	mov	r3, r0
 80008bc:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	601a      	str	r2, [r3, #0]
}
 80008c8:	bf00      	nop
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	4603      	mov	r3, r0
 80008de:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80008f0:	4b4d      	ldr	r3, [pc, #308]	; (8000a28 <ft5336_TS_GetTouchInfo+0x158>)
 80008f2:	785b      	ldrb	r3, [r3, #1]
 80008f4:	461a      	mov	r2, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	4293      	cmp	r3, r2
 80008fa:	f080 8090 	bcs.w	8000a1e <ft5336_TS_GetTouchInfo+0x14e>
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	2b09      	cmp	r3, #9
 8000902:	d85d      	bhi.n	80009c0 <ft5336_TS_GetTouchInfo+0xf0>
 8000904:	a201      	add	r2, pc, #4	; (adr r2, 800090c <ft5336_TS_GetTouchInfo+0x3c>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	08000935 	.word	0x08000935
 8000910:	08000943 	.word	0x08000943
 8000914:	08000951 	.word	0x08000951
 8000918:	0800095f 	.word	0x0800095f
 800091c:	0800096d 	.word	0x0800096d
 8000920:	0800097b 	.word	0x0800097b
 8000924:	08000989 	.word	0x08000989
 8000928:	08000997 	.word	0x08000997
 800092c:	080009a5 	.word	0x080009a5
 8000930:	080009b3 	.word	0x080009b3
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000934:	2303      	movs	r3, #3
 8000936:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000938:	2307      	movs	r3, #7
 800093a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800093c:	2308      	movs	r3, #8
 800093e:	757b      	strb	r3, [r7, #21]
      break;
 8000940:	e03f      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000942:	2309      	movs	r3, #9
 8000944:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000946:	230d      	movs	r3, #13
 8000948:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800094a:	230e      	movs	r3, #14
 800094c:	757b      	strb	r3, [r7, #21]
      break;
 800094e:	e038      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000950:	230f      	movs	r3, #15
 8000952:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000954:	2313      	movs	r3, #19
 8000956:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000958:	2314      	movs	r3, #20
 800095a:	757b      	strb	r3, [r7, #21]
      break;
 800095c:	e031      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800095e:	2315      	movs	r3, #21
 8000960:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000962:	2319      	movs	r3, #25
 8000964:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000966:	231a      	movs	r3, #26
 8000968:	757b      	strb	r3, [r7, #21]
      break;
 800096a:	e02a      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 800096c:	231b      	movs	r3, #27
 800096e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000970:	231f      	movs	r3, #31
 8000972:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000974:	2320      	movs	r3, #32
 8000976:	757b      	strb	r3, [r7, #21]
      break;
 8000978:	e023      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800097a:	2321      	movs	r3, #33	; 0x21
 800097c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800097e:	2325      	movs	r3, #37	; 0x25
 8000980:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000982:	2326      	movs	r3, #38	; 0x26
 8000984:	757b      	strb	r3, [r7, #21]
      break;
 8000986:	e01c      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000988:	2327      	movs	r3, #39	; 0x27
 800098a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 800098c:	232b      	movs	r3, #43	; 0x2b
 800098e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000990:	232c      	movs	r3, #44	; 0x2c
 8000992:	757b      	strb	r3, [r7, #21]
      break;
 8000994:	e015      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000996:	232d      	movs	r3, #45	; 0x2d
 8000998:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800099a:	2331      	movs	r3, #49	; 0x31
 800099c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800099e:	2332      	movs	r3, #50	; 0x32
 80009a0:	757b      	strb	r3, [r7, #21]
      break;
 80009a2:	e00e      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80009a4:	2333      	movs	r3, #51	; 0x33
 80009a6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80009a8:	2337      	movs	r3, #55	; 0x37
 80009aa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80009ac:	2338      	movs	r3, #56	; 0x38
 80009ae:	757b      	strb	r3, [r7, #21]
      break;
 80009b0:	e007      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80009b2:	2339      	movs	r3, #57	; 0x39
 80009b4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80009b6:	233d      	movs	r3, #61	; 0x3d
 80009b8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80009ba:	233e      	movs	r3, #62	; 0x3e
 80009bc:	757b      	strb	r3, [r7, #21]
      break;
 80009be:	e000      	b.n	80009c2 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80009c0:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80009c2:	89fb      	ldrh	r3, [r7, #14]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	7dfa      	ldrb	r2, [r7, #23]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 ff9a 	bl	8002904 <TS_IO_Read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80009d4:	7d3b      	ldrb	r3, [r7, #20]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	119b      	asrs	r3, r3, #6
 80009da:	f003 0203 	and.w	r2, r3, #3
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	7dba      	ldrb	r2, [r7, #22]
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 ff8a 	bl	8002904 <TS_IO_Read>
 80009f0:	4603      	mov	r3, r0
 80009f2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80009f4:	7d3b      	ldrb	r3, [r7, #20]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	461a      	mov	r2, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	7d7a      	ldrb	r2, [r7, #21]
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 ff7c 	bl	8002904 <TS_IO_Read>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a10:	7d3b      	ldrb	r3, [r7, #20]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	111b      	asrs	r3, r3, #4
 8000a16:	f003 0204 	and.w	r2, r3, #4
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a1e:	bf00      	nop
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000384 	.word	0x20000384

08000a2c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000384 	.word	0x20000384

08000a44 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000a48:	f7ff fff0 	bl	8000a2c <ft5336_Get_I2C_InitializedStatus>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d104      	bne.n	8000a5c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000a52:	f001 ff33 	bl	80028bc <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000a56:	4b02      	ldr	r3, [pc, #8]	; (8000a60 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	701a      	strb	r2, [r3, #0]
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000384 	.word	0x20000384

08000a64 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000a72:	68fb      	ldr	r3, [r7, #12]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a84:	f3bf 8f4f 	dsb	sy
}
 8000a88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a8a:	f3bf 8f6f 	isb	sy
}
 8000a8e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a98:	f3bf 8f4f 	dsb	sy
}
 8000a9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a9e:	f3bf 8f6f 	isb	sy
}
 8000aa2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <SCB_EnableICache+0x48>)
 8000aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aae:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab0:	f3bf 8f4f 	dsb	sy
}
 8000ab4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab6:	f3bf 8f6f 	isb	sy
}
 8000aba:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ada:	f3bf 8f4f 	dsb	sy
}
 8000ade:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ae6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	0b5b      	lsrs	r3, r3, #13
 8000aec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000af0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	08db      	lsrs	r3, r3, #3
 8000af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000afa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	015a      	lsls	r2, r3, #5
 8000b00:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b04:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b0a:	4911      	ldr	r1, [pc, #68]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1e5a      	subs	r2, r3, #1
 8000b16:	60ba      	str	r2, [r7, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d1ef      	bne.n	8000afc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	60fa      	str	r2, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1e5      	bne.n	8000af2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b26:	f3bf 8f4f 	dsb	sy
}
 8000b2a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <SCB_EnableDCache+0x84>)
 8000b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b36:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b38:	f3bf 8f4f 	dsb	sy
}
 8000b3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b3e:	f3bf 8f6f 	isb	sy
}
 8000b42:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <calculPossibilitesRec>:
 * mangeant		: vaut 0 si piece posee la ou 1 si piece arrive en mangeant une piece (init a 0)
 *
 * retour		: indice de la prochaine case vide du tableau
 */
uint8_t calculPossibilitesRec(uint16_t line, uint16_t col, uint8_t color, struct cell *possibilites, uint8_t index, uint8_t mangeant)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	81fb      	strh	r3, [r7, #14]
 8000b60:	460b      	mov	r3, r1
 8000b62:	81bb      	strh	r3, [r7, #12]
 8000b64:	4613      	mov	r3, r2
 8000b66:	72fb      	strb	r3, [r7, #11]
	// Controle de la colonne de droite :
	if(col < 7 && line != 7)
 8000b68:	89bb      	ldrh	r3, [r7, #12]
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d866      	bhi.n	8000c3c <calculPossibilitesRec+0xe8>
 8000b6e:	89fb      	ldrh	r3, [r7, #14]
 8000b70:	2b07      	cmp	r3, #7
 8000b72:	d063      	beq.n	8000c3c <calculPossibilitesRec+0xe8>
	{
		// Controle colonne de droite : piece presente
		if(chessboard[line + 1][col + 1].isFilled == 1)
 8000b74:	89fb      	ldrh	r3, [r7, #14]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	89bb      	ldrh	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	4967      	ldr	r1, [pc, #412]	; (8000d1c <calculPossibilitesRec+0x1c8>)
 8000b7e:	00d2      	lsls	r2, r2, #3
 8000b80:	4413      	add	r3, r2
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	440b      	add	r3, r1
 8000b86:	795b      	ldrb	r3, [r3, #5]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d13c      	bne.n	8000c06 <calculPossibilitesRec+0xb2>
		{
			if(chessboard[line + 1][col + 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000b8c:	89fb      	ldrh	r3, [r7, #14]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	89bb      	ldrh	r3, [r7, #12]
 8000b92:	3301      	adds	r3, #1
 8000b94:	4961      	ldr	r1, [pc, #388]	; (8000d1c <calculPossibilitesRec+0x1c8>)
 8000b96:	00d2      	lsls	r2, r2, #3
 8000b98:	4413      	add	r3, r2
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	440b      	add	r3, r1
 8000b9e:	799b      	ldrb	r3, [r3, #6]
 8000ba0:	7afa      	ldrb	r2, [r7, #11]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d04a      	beq.n	8000c3c <calculPossibilitesRec+0xe8>
			else if((col <= 5) && (line <= 5))
 8000ba6:	89bb      	ldrh	r3, [r7, #12]
 8000ba8:	2b05      	cmp	r3, #5
 8000baa:	d847      	bhi.n	8000c3c <calculPossibilitesRec+0xe8>
 8000bac:	89fb      	ldrh	r3, [r7, #14]
 8000bae:	2b05      	cmp	r3, #5
 8000bb0:	d844      	bhi.n	8000c3c <calculPossibilitesRec+0xe8>
			{//Piece de l'autre couleur, place pour manger
				struct cell possible = {line + 2, col + 2};
 8000bb2:	89fb      	ldrh	r3, [r7, #14]
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	83bb      	strh	r3, [r7, #28]
 8000bba:	89bb      	ldrh	r3, [r7, #12]
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	83fb      	strh	r3, [r7, #30]
				possibilites[index] = possible;
 8000bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	461a      	mov	r2, r3
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	6010      	str	r0, [r2, #0]
				index++;
 8000bd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000bda:	3301      	adds	r3, #1
 8000bdc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				index = calculPossibilitesRec(line + 2, col + 2, color, possibilites, index, 1);
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	3302      	adds	r3, #2
 8000be4:	b298      	uxth	r0, r3
 8000be6:	89bb      	ldrh	r3, [r7, #12]
 8000be8:	3302      	adds	r3, #2
 8000bea:	b299      	uxth	r1, r3
 8000bec:	7afa      	ldrb	r2, [r7, #11]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f7ff ffab 	bl	8000b54 <calculPossibilitesRec>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000c04:	e01a      	b.n	8000c3c <calculPossibilitesRec+0xe8>
			}
		}
		// Controle colonne de droite : pas de piece et pas en train de manger
		else if (mangeant == 0)
 8000c06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d116      	bne.n	8000c3c <calculPossibilitesRec+0xe8>
		{
			struct cell possible = {line + 1, col + 1};
 8000c0e:	89fb      	ldrh	r3, [r7, #14]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	833b      	strh	r3, [r7, #24]
 8000c16:	89bb      	ldrh	r3, [r7, #12]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	837b      	strh	r3, [r7, #26]
			possibilites[index] = possible;
 8000c1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	6010      	str	r0, [r2, #0]
			index++;
 8000c32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c36:	3301      	adds	r3, #1
 8000c38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		}
	}
	// Controle de la colonne de gauche :
	if(col > 0 && line != 7)
 8000c3c:	89bb      	ldrh	r3, [r7, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d066      	beq.n	8000d10 <calculPossibilitesRec+0x1bc>
 8000c42:	89fb      	ldrh	r3, [r7, #14]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d063      	beq.n	8000d10 <calculPossibilitesRec+0x1bc>
	{
		// Controle colonne de gauche : piece presente
		if(chessboard[line + 1][col - 1].isFilled == 1)
 8000c48:	89fb      	ldrh	r3, [r7, #14]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	89bb      	ldrh	r3, [r7, #12]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	4932      	ldr	r1, [pc, #200]	; (8000d1c <calculPossibilitesRec+0x1c8>)
 8000c52:	00d2      	lsls	r2, r2, #3
 8000c54:	4413      	add	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	440b      	add	r3, r1
 8000c5a:	795b      	ldrb	r3, [r3, #5]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d13c      	bne.n	8000cda <calculPossibilitesRec+0x186>
		{
			if(chessboard[line + 1][col + 1].piece_color == color) ;//Une piece de sa couleur bloque
 8000c60:	89fb      	ldrh	r3, [r7, #14]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	89bb      	ldrh	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	492c      	ldr	r1, [pc, #176]	; (8000d1c <calculPossibilitesRec+0x1c8>)
 8000c6a:	00d2      	lsls	r2, r2, #3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	440b      	add	r3, r1
 8000c72:	799b      	ldrb	r3, [r3, #6]
 8000c74:	7afa      	ldrb	r2, [r7, #11]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d04a      	beq.n	8000d10 <calculPossibilitesRec+0x1bc>
			else if((col >= 2) && (line <= 5))
 8000c7a:	89bb      	ldrh	r3, [r7, #12]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d947      	bls.n	8000d10 <calculPossibilitesRec+0x1bc>
 8000c80:	89fb      	ldrh	r3, [r7, #14]
 8000c82:	2b05      	cmp	r3, #5
 8000c84:	d844      	bhi.n	8000d10 <calculPossibilitesRec+0x1bc>
			{//Piece de l'autre couleur, place pour manger
				struct cell possible = {line + 2, col - 2};
 8000c86:	89fb      	ldrh	r3, [r7, #14]
 8000c88:	3302      	adds	r3, #2
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	82bb      	strh	r3, [r7, #20]
 8000c8e:	89bb      	ldrh	r3, [r7, #12]
 8000c90:	3b02      	subs	r3, #2
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	82fb      	strh	r3, [r7, #22]
				possibilites[index] = possible;
 8000c96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	6818      	ldr	r0, [r3, #0]
 8000ca8:	6010      	str	r0, [r2, #0]
				index++;
 8000caa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cae:	3301      	adds	r3, #1
 8000cb0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				index = calculPossibilitesRec(line + 2, col - 2, color, possibilites, index, 1);
 8000cb4:	89fb      	ldrh	r3, [r7, #14]
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	b298      	uxth	r0, r3
 8000cba:	89bb      	ldrh	r3, [r7, #12]
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	b299      	uxth	r1, r3
 8000cc0:	7afa      	ldrb	r2, [r7, #11]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	9301      	str	r3, [sp, #4]
 8000cc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f7ff ff41 	bl	8000b54 <calculPossibilitesRec>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000cd8:	e01a      	b.n	8000d10 <calculPossibilitesRec+0x1bc>
			}
		}
		// Controle colonne de gauche : pas de piece et pas en train de manger
		else if (mangeant == 0)
 8000cda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d116      	bne.n	8000d10 <calculPossibilitesRec+0x1bc>
		{
			struct cell possible = {line + 1, col - 1};
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	823b      	strh	r3, [r7, #16]
 8000cea:	89bb      	ldrh	r3, [r7, #12]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	827b      	strh	r3, [r7, #18]
			possibilites[index] = possible;
 8000cf2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	6010      	str	r0, [r2, #0]
			index++;
 8000d06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		}
	}

	return index;
 8000d10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28

}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200080cc 	.word	0x200080cc

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b5b0      	push	{r4, r5, r7, lr}
 8000d22:	b0a4      	sub	sp, #144	; 0x90
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//uint32_t potl,potr,joystick_h, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000d40:	f7ff fe9e 	bl	8000a80 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000d44:	f7ff fec2 	bl	8000acc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f003 ff26 	bl	8004b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4c:	f000 f8f4 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d50:	f000 febc 	bl	8001acc <MX_GPIO_Init>
  MX_ADC3_Init();
 8000d54:	f000 f9b4 	bl	80010c0 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8000d58:	f000 fa2e 	bl	80011b8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000d5c:	f000 fe66 	bl	8001a2c <MX_FMC_Init>
  MX_I2C1_Init();
 8000d60:	f000 fa5c 	bl	800121c <MX_I2C1_Init>
  MX_I2C3_Init();
 8000d64:	f000 fa9a 	bl	800129c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000d68:	f000 fad8 	bl	800131c <MX_LTDC_Init>
  MX_RTC_Init();
 8000d6c:	f000 fb58 	bl	8001420 <MX_RTC_Init>
  MX_SPI2_Init();
 8000d70:	f000 fbfc 	bl	800156c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000d74:	f000 fc38 	bl	80015e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d78:	f000 fc8a 	bl	8001690 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d7c:	f000 fcd6 	bl	800172c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000d80:	f000 fd22 	bl	80017c8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000d84:	f000 fd6e 	bl	8001864 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000d88:	f000 fdf0 	bl	800196c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000d8c:	f000 fe1e 	bl	80019cc <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000d90:	f000 f944 	bl	800101c <MX_ADC1_Init>
  MX_DAC_Init();
 8000d94:	f000 f9e6 	bl	8001164 <MX_DAC_Init>
  MX_UART7_Init();
 8000d98:	f000 fdb8 	bl	800190c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000d9c:	f001 fddc 	bl	8002958 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000da0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000da4:	2000      	movs	r0, #0
 8000da6:	f001 fe6f 	bl	8002a88 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000daa:	f001 fe45 	bl	8002a38 <BSP_LCD_GetXSize>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f001 fe56 	bl	8002a60 <BSP_LCD_GetYSize>
 8000db4:	4603      	mov	r3, r0
 8000db6:	fb03 f304 	mul.w	r3, r3, r4
 8000dba:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f001 fe60 	bl	8002a88 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8000dc8:	f002 fa24 	bl	8003214 <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f001 febb 	bl	8002b48 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000dd2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000dd6:	f001 ff13 	bl	8002c00 <BSP_LCD_Clear>
    //BSP_LCD_DrawBitmap(0,0,(uint8_t*)HorombeRGB565_bmp);
    BSP_LCD_DrawBitmap(0,0,(uint8_t*)damier_bmp);
 8000dda:	4a48      	ldr	r2, [pc, #288]	; (8000efc <main+0x1dc>)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2000      	movs	r0, #0
 8000de0:	f002 f8c6 	bl	8002f70 <BSP_LCD_DrawBitmap>
    BSP_LCD_SelectLayer(1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f001 feaf 	bl	8002b48 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(0);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f001 ff08 	bl	8002c00 <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font12);
 8000df0:	4843      	ldr	r0, [pc, #268]	; (8000f00 <main+0x1e0>)
 8000df2:	f001 feeb 	bl	8002bcc <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000df6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfa:	f001 feb5 	bl	8002b68 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8000dfe:	4841      	ldr	r0, [pc, #260]	; (8000f04 <main+0x1e4>)
 8000e00:	f001 feca 	bl	8002b98 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000e04:	f001 fe18 	bl	8002a38 <BSP_LCD_GetXSize>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b29c      	uxth	r4, r3
 8000e0c:	f001 fe28 	bl	8002a60 <BSP_LCD_GetYSize>
 8000e10:	4603      	mov	r3, r0
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4619      	mov	r1, r3
 8000e16:	4620      	mov	r0, r4
 8000e18:	f002 fd56 	bl	80038c8 <BSP_TS_Init>
    BSP_TS_ITConfig();
 8000e1c:	f002 fd94 	bl	8003948 <BSP_TS_ITConfig>

	// Init potentiometre
	  sConfig.Channel = ADC_CHANNEL_6;
 8000e20:	2306      	movs	r3, #6
 8000e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000e26:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4836      	ldr	r0, [pc, #216]	; (8000f08 <main+0x1e8>)
 8000e2e:	f004 f81f 	bl	8004e70 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc3);
 8000e32:	4835      	ldr	r0, [pc, #212]	; (8000f08 <main+0x1e8>)
 8000e34:	f003 ff4e 	bl	8004cd4 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
    mutexEcran = xSemaphoreCreateMutex();
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f00a fd40 	bl	800b8be <xQueueCreateMutex>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a32      	ldr	r2, [pc, #200]	; (8000f0c <main+0x1ec>)
 8000e42:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of queueSel */
  osMessageQDef(queueSel, 16, uint16_t);
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <main+0x1f0>)
 8000e46:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queueSelHandle = osMessageCreate(osMessageQ(queueSel), NULL);
 8000e50:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f00a faed 	bl	800b436 <osMessageCreate>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	4a2d      	ldr	r2, [pc, #180]	; (8000f14 <main+0x1f4>)
 8000e60:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of task_init */
  osThreadDef(task_init, fonction_init, osPriorityAboveNormal, 0, 1024);
 8000e62:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <main+0x1f8>)
 8000e64:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000e68:	461d      	mov	r5, r3
 8000e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_initHandle = osThreadCreate(osThread(task_init), NULL);
 8000e76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f00a fa7a 	bl	800b376 <osThreadCreate>
 8000e82:	4603      	mov	r3, r0
 8000e84:	4a25      	ldr	r2, [pc, #148]	; (8000f1c <main+0x1fc>)
 8000e86:	6013      	str	r3, [r2, #0]

  /* definition and creation of affichage */
  osThreadDef(affichage, fonction_affichage, osPriorityNormal, 0, 1024);
 8000e88:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <main+0x200>)
 8000e8a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000e8e:	461d      	mov	r5, r3
 8000e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  affichageHandle = osThreadCreate(osThread(affichage), NULL);
 8000e9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f00a fa67 	bl	800b376 <osThreadCreate>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <main+0x204>)
 8000eac:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_select */
  osThreadDef(task_select, fonction_select, osPriorityHigh, 0, 256);
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <main+0x208>)
 8000eb0:	f107 041c 	add.w	r4, r7, #28
 8000eb4:	461d      	mov	r5, r3
 8000eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_selectHandle = osThreadCreate(osThread(task_select), NULL);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f00a fa54 	bl	800b376 <osThreadCreate>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <main+0x20c>)
 8000ed2:	6013      	str	r3, [r2, #0]

  /* definition and creation of task_calculPoss */
  osThreadDef(task_calculPoss, fonction_calculPossibilites, osPriorityBelowNormal, 0, 1024);
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <main+0x210>)
 8000ed6:	463c      	mov	r4, r7
 8000ed8:	461d      	mov	r5, r3
 8000eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000edc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ede:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  task_calculPossHandle = osThreadCreate(osThread(task_calculPoss), NULL);
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f00a fa43 	bl	800b376 <osThreadCreate>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <main+0x214>)
 8000ef4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ef6:	f00a fa37 	bl	800b368 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <main+0x1da>
 8000efc:	0800de8c 	.word	0x0800de8c
 8000f00:	20000034 	.word	0x20000034
 8000f04:	ff0000ff 	.word	0xff0000ff
 8000f08:	20008460 	.word	0x20008460
 8000f0c:	2000852c 	.word	0x2000852c
 8000f10:	0800de04 	.word	0x0800de04
 8000f14:	2000807c 	.word	0x2000807c
 8000f18:	0800de14 	.word	0x0800de14
 8000f1c:	2000802c 	.word	0x2000802c
 8000f20:	0800de30 	.word	0x0800de30
 8000f24:	2000845c 	.word	0x2000845c
 8000f28:	0800de4c 	.word	0x0800de4c
 8000f2c:	20008318 	.word	0x20008318
 8000f30:	0800de68 	.word	0x0800de68
 8000f34:	20008410 	.word	0x20008410

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b094      	sub	sp, #80	; 0x50
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	2230      	movs	r2, #48	; 0x30
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00c fe68 	bl	800dc1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f5c:	f006 fe3c 	bl	8007bd8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f60:	4b2c      	ldr	r3, [pc, #176]	; (8001014 <SystemClock_Config+0xdc>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	4a2b      	ldr	r2, [pc, #172]	; (8001014 <SystemClock_Config+0xdc>)
 8000f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6c:	4b29      	ldr	r3, [pc, #164]	; (8001014 <SystemClock_Config+0xdc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f78:	4b27      	ldr	r3, [pc, #156]	; (8001018 <SystemClock_Config+0xe0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a26      	ldr	r2, [pc, #152]	; (8001018 <SystemClock_Config+0xe0>)
 8000f7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b24      	ldr	r3, [pc, #144]	; (8001018 <SystemClock_Config+0xe0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000f90:	2309      	movs	r3, #9
 8000f92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000fa8:	2319      	movs	r3, #25
 8000faa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000fac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000fb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fb6:	2309      	movs	r3, #9
 8000fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 fe6a 	bl	8007c98 <HAL_RCC_OscConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fca:	f001 fb1b 	bl	8002604 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fce:	f006 fe13 	bl	8007bf8 <HAL_PWREx_EnableOverDrive>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000fd8:	f001 fb14 	bl	8002604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2106      	movs	r1, #6
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f007 f8f0 	bl	80081e0 <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001006:	f001 fafd 	bl	8002604 <Error_Handler>
  }
}
 800100a:	bf00      	nop
 800100c:	3750      	adds	r7, #80	; 0x50
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40007000 	.word	0x40007000

0800101c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001022:	463b      	mov	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <MX_ADC1_Init+0x9c>)
 8001032:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001036:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800103a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_ADC1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_ADC1_Init+0x98>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_ADC1_Init+0x98>)
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <MX_ADC1_Init+0xa0>)
 8001060:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_ADC1_Init+0x98>)
 800106a:	2201      	movs	r2, #1
 800106c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001078:	2201      	movs	r2, #1
 800107a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_ADC1_Init+0x98>)
 800107e:	f003 fde5 	bl	8004c4c <HAL_ADC_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001088:	f001 fabc 	bl	8002604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800108c:	2300      	movs	r3, #0
 800108e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001090:	2301      	movs	r3, #1
 8001092:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4619      	mov	r1, r3
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_ADC1_Init+0x98>)
 800109e:	f003 fee7 	bl	8004e70 <HAL_ADC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010a8:	f001 faac 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20008414 	.word	0x20008414
 80010b8:	40012000 	.word	0x40012000
 80010bc:	0f000001 	.word	0x0f000001

080010c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <MX_ADC3_Init+0x98>)
 80010d4:	4a21      	ldr	r2, [pc, #132]	; (800115c <MX_ADC3_Init+0x9c>)
 80010d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <MX_ADC3_Init+0x98>)
 80010da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010de:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <MX_ADC3_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <MX_ADC3_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <MX_ADC3_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <MX_ADC3_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_ADC3_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MX_ADC3_Init+0x98>)
 8001102:	4a17      	ldr	r2, [pc, #92]	; (8001160 <MX_ADC3_Init+0xa0>)
 8001104:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <MX_ADC3_Init+0x98>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <MX_ADC3_Init+0x98>)
 800110e:	2201      	movs	r2, #1
 8001110:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_ADC3_Init+0x98>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <MX_ADC3_Init+0x98>)
 800111c:	2201      	movs	r2, #1
 800111e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_ADC3_Init+0x98>)
 8001122:	f003 fd93 	bl	8004c4c <HAL_ADC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800112c:	f001 fa6a 	bl	8002604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001130:	2306      	movs	r3, #6
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001134:	2301      	movs	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_ADC3_Init+0x98>)
 8001142:	f003 fe95 	bl	8004e70 <HAL_ADC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800114c:	f001 fa5a 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20008460 	.word	0x20008460
 800115c:	40012200 	.word	0x40012200
 8001160:	0f000001 	.word	0x0f000001

08001164 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800116a:	463b      	mov	r3, r7
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_DAC_Init+0x4c>)
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <MX_DAC_Init+0x50>)
 8001176:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <MX_DAC_Init+0x4c>)
 800117a:	f004 f9ab 	bl	80054d4 <HAL_DAC_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001184:	f001 fa3e 	bl	8002604 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <MX_DAC_Init+0x4c>)
 8001198:	f004 fa22 	bl	80055e0 <HAL_DAC_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011a2:	f001 fa2f 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20008530 	.word	0x20008530
 80011b4:	40007400 	.word	0x40007400

080011b8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011be:	4a16      	ldr	r2, [pc, #88]	; (8001218 <MX_DMA2D_Init+0x60>)
 80011c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <MX_DMA2D_Init+0x5c>)
 80011ee:	f004 fca1 	bl	8005b34 <HAL_DMA2D_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80011f8:	f001 fa04 	bl	8002604 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80011fc:	2101      	movs	r1, #1
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_DMA2D_Init+0x5c>)
 8001200:	f004 ff06 	bl	8006010 <HAL_DMA2D_ConfigLayer>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800120a:	f001 f9fb 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20008634 	.word	0x20008634
 8001218:	4002b000 	.word	0x4002b000

0800121c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_I2C1_Init+0x74>)
 8001222:	4a1c      	ldr	r2, [pc, #112]	; (8001294 <MX_I2C1_Init+0x78>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_I2C1_Init+0x74>)
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <MX_I2C1_Init+0x7c>)
 800122a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_I2C1_Init+0x74>)
 8001234:	2201      	movs	r2, #1
 8001236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_I2C1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_I2C1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_I2C1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001256:	480e      	ldr	r0, [pc, #56]	; (8001290 <MX_I2C1_Init+0x74>)
 8001258:	f005 fb0c 	bl	8006874 <HAL_I2C_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001262:	f001 f9cf 	bl	8002604 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001266:	2100      	movs	r1, #0
 8001268:	4809      	ldr	r0, [pc, #36]	; (8001290 <MX_I2C1_Init+0x74>)
 800126a:	f006 f8a5 	bl	80073b8 <HAL_I2CEx_ConfigAnalogFilter>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001274:	f001 f9c6 	bl	8002604 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001278:	2100      	movs	r1, #0
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_I2C1_Init+0x74>)
 800127c:	f006 f8e7 	bl	800744e <HAL_I2CEx_ConfigDigitalFilter>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001286:	f001 f9bd 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20008080 	.word	0x20008080
 8001294:	40005400 	.word	0x40005400
 8001298:	00c0eaff 	.word	0x00c0eaff

0800129c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_I2C3_Init+0x74>)
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <MX_I2C3_Init+0x78>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_I2C3_Init+0x74>)
 80012a8:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <MX_I2C3_Init+0x7c>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_I2C3_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_I2C3_Init+0x74>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_I2C3_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_I2C3_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_I2C3_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_I2C3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_I2C3_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <MX_I2C3_Init+0x74>)
 80012d8:	f005 facc 	bl	8006874 <HAL_I2C_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80012e2:	f001 f98f 	bl	8002604 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e6:	2100      	movs	r1, #0
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <MX_I2C3_Init+0x74>)
 80012ea:	f006 f865 	bl	80073b8 <HAL_I2CEx_ConfigAnalogFilter>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80012f4:	f001 f986 	bl	8002604 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012f8:	2100      	movs	r1, #0
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_I2C3_Init+0x74>)
 80012fc:	f006 f8a7 	bl	800744e <HAL_I2CEx_ConfigDigitalFilter>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001306:	f001 f97d 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20007ef8 	.word	0x20007ef8
 8001314:	40005c00 	.word	0x40005c00
 8001318:	00c0eaff 	.word	0x00c0eaff

0800131c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	; 0x38
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2234      	movs	r2, #52	; 0x34
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f00c fc77 	bl	800dc1c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800132e:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001330:	4a3a      	ldr	r2, [pc, #232]	; (800141c <MX_LTDC_Init+0x100>)
 8001332:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001334:	4b38      	ldr	r3, [pc, #224]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <MX_LTDC_Init+0xfc>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800134c:	4b32      	ldr	r3, [pc, #200]	; (8001418 <MX_LTDC_Init+0xfc>)
 800134e:	2228      	movs	r2, #40	; 0x28
 8001350:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001354:	2209      	movs	r2, #9
 8001356:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001358:	4b2f      	ldr	r3, [pc, #188]	; (8001418 <MX_LTDC_Init+0xfc>)
 800135a:	2235      	movs	r2, #53	; 0x35
 800135c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001360:	220b      	movs	r2, #11
 8001362:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001364:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001366:	f240 2215 	movw	r2, #533	; 0x215
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800136c:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <MX_LTDC_Init+0xfc>)
 800136e:	f240 121b 	movw	r2, #283	; 0x11b
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001376:	f240 2235 	movw	r2, #565	; 0x235
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800137c:	4b26      	ldr	r3, [pc, #152]	; (8001418 <MX_LTDC_Init+0xfc>)
 800137e:	f240 121d 	movw	r2, #285	; 0x11d
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001384:	4b24      	ldr	r3, [pc, #144]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <MX_LTDC_Init+0xfc>)
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800139c:	481e      	ldr	r0, [pc, #120]	; (8001418 <MX_LTDC_Init+0xfc>)
 800139e:	f006 f8a3 	bl	80074e8 <HAL_LTDC_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013a8:	f001 f92c 	bl	8002604 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80013b0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013b4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80013ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013be:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013c0:	2302      	movs	r3, #2
 80013c2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80013c4:	23ff      	movs	r3, #255	; 0xff
 80013c6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80013cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013d0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80013d2:	2307      	movs	r3, #7
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80013d6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80013dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80013e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_LTDC_Init+0xfc>)
 8001402:	f006 fa03 	bl	800780c <HAL_LTDC_ConfigLayer>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800140c:	f001 f8fa 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3738      	adds	r7, #56	; 0x38
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20008368 	.word	0x20008368
 800141c:	40016800 	.word	0x40016800

08001420 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b092      	sub	sp, #72	; 0x48
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001426:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	222c      	movs	r2, #44	; 0x2c
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f00c fbea 	bl	800dc1c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001448:	4b46      	ldr	r3, [pc, #280]	; (8001564 <MX_RTC_Init+0x144>)
 800144a:	4a47      	ldr	r2, [pc, #284]	; (8001568 <MX_RTC_Init+0x148>)
 800144c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800144e:	4b45      	ldr	r3, [pc, #276]	; (8001564 <MX_RTC_Init+0x144>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001454:	4b43      	ldr	r3, [pc, #268]	; (8001564 <MX_RTC_Init+0x144>)
 8001456:	227f      	movs	r2, #127	; 0x7f
 8001458:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800145a:	4b42      	ldr	r3, [pc, #264]	; (8001564 <MX_RTC_Init+0x144>)
 800145c:	22ff      	movs	r2, #255	; 0xff
 800145e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001460:	4b40      	ldr	r3, [pc, #256]	; (8001564 <MX_RTC_Init+0x144>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001466:	4b3f      	ldr	r3, [pc, #252]	; (8001564 <MX_RTC_Init+0x144>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800146c:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <MX_RTC_Init+0x144>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001472:	483c      	ldr	r0, [pc, #240]	; (8001564 <MX_RTC_Init+0x144>)
 8001474:	f007 fcac 	bl	8008dd0 <HAL_RTC_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800147e:	f001 f8c1 	bl	8002604 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001482:	2300      	movs	r3, #0
 8001484:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800148e:	2300      	movs	r3, #0
 8001490:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001494:	2300      	movs	r3, #0
 8001496:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800149c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a0:	2201      	movs	r2, #1
 80014a2:	4619      	mov	r1, r3
 80014a4:	482f      	ldr	r0, [pc, #188]	; (8001564 <MX_RTC_Init+0x144>)
 80014a6:	f007 fd25 	bl	8008ef4 <HAL_RTC_SetTime>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80014b0:	f001 f8a8 	bl	8002604 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014b4:	2301      	movs	r3, #1
 80014b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d0:	2201      	movs	r2, #1
 80014d2:	4619      	mov	r1, r3
 80014d4:	4823      	ldr	r0, [pc, #140]	; (8001564 <MX_RTC_Init+0x144>)
 80014d6:	f007 fdcb 	bl	8009070 <HAL_RTC_SetDate>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80014e0:	f001 f890 	bl	8002604 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001508:	2301      	movs	r3, #1
 800150a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800150e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	2201      	movs	r2, #1
 8001518:	4619      	mov	r1, r3
 800151a:	4812      	ldr	r0, [pc, #72]	; (8001564 <MX_RTC_Init+0x144>)
 800151c:	f007 fe50 	bl	80091c0 <HAL_RTC_SetAlarm>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001526:	f001 f86d 	bl	8002604 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800152a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	2201      	movs	r2, #1
 8001534:	4619      	mov	r1, r3
 8001536:	480b      	ldr	r0, [pc, #44]	; (8001564 <MX_RTC_Init+0x144>)
 8001538:	f007 fe42 	bl	80091c0 <HAL_RTC_SetAlarm>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001542:	f001 f85f 	bl	8002604 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001546:	2202      	movs	r2, #2
 8001548:	2100      	movs	r1, #0
 800154a:	4806      	ldr	r0, [pc, #24]	; (8001564 <MX_RTC_Init+0x144>)
 800154c:	f007 ffc2 	bl	80094d4 <HAL_RTCEx_SetTimeStamp>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001556:	f001 f855 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	3748      	adds	r7, #72	; 0x48
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20008544 	.word	0x20008544
 8001568:	40002800 	.word	0x40002800

0800156c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_SPI2_Init+0x74>)
 8001572:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <MX_SPI2_Init+0x78>)
 8001574:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_SPI2_Init+0x74>)
 8001578:	f44f 7282 	mov.w	r2, #260	; 0x104
 800157c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_SPI2_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_SPI2_Init+0x74>)
 8001586:	f44f 7240 	mov.w	r2, #768	; 0x300
 800158a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_SPI2_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_SPI2_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_SPI2_Init+0x74>)
 800159a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800159e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_SPI2_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_SPI2_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_SPI2_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_SPI2_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_SPI2_Init+0x74>)
 80015ba:	2207      	movs	r2, #7
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_SPI2_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_SPI2_Init+0x74>)
 80015c6:	2208      	movs	r2, #8
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_SPI2_Init+0x74>)
 80015cc:	f008 f869 	bl	80096a2 <HAL_SPI_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80015d6:	f001 f815 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20007f44 	.word	0x20007f44
 80015e4:	40003800 	.word	0x40003800

080015e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001608:	4a20      	ldr	r2, [pc, #128]	; (800168c <MX_TIM1_Init+0xa4>)
 800160a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800160c:	4b1e      	ldr	r3, [pc, #120]	; (8001688 <MX_TIM1_Init+0xa0>)
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <MX_TIM1_Init+0xa0>)
 800161a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <MX_TIM1_Init+0xa0>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001632:	4815      	ldr	r0, [pc, #84]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001634:	f008 f8e0 	bl	80097f8 <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800163e:	f000 ffe1 	bl	8002604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4619      	mov	r1, r3
 800164e:	480e      	ldr	r0, [pc, #56]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001650:	f008 fac2 	bl	8009bd8 <HAL_TIM_ConfigClockSource>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800165a:	f000 ffd3 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <MX_TIM1_Init+0xa0>)
 8001670:	f008 fcde 	bl	800a030 <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800167a:	f000 ffc3 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20008564 	.word	0x20008564
 800168c:	40010000 	.word	0x40010000

08001690 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <MX_TIM2_Init+0x98>)
 80016b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_TIM2_Init+0x98>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_TIM2_Init+0x98>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <MX_TIM2_Init+0x98>)
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295
 80016c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <MX_TIM2_Init+0x98>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <MX_TIM2_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016d6:	4814      	ldr	r0, [pc, #80]	; (8001728 <MX_TIM2_Init+0x98>)
 80016d8:	f008 f88e 	bl	80097f8 <HAL_TIM_Base_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80016e2:	f000 ff8f 	bl	8002604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_TIM2_Init+0x98>)
 80016f4:	f008 fa70 	bl	8009bd8 <HAL_TIM_ConfigClockSource>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80016fe:	f000 ff81 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <MX_TIM2_Init+0x98>)
 8001710:	f008 fc8e 	bl	800a030 <HAL_TIMEx_MasterConfigSynchronization>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800171a:	f000 ff73 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	3720      	adds	r7, #32
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20008674 	.word	0x20008674

0800172c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001732:	f107 0310 	add.w	r3, r7, #16
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MX_TIM3_Init+0x94>)
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <MX_TIM3_Init+0x98>)
 800174e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_TIM3_Init+0x94>)
 8001752:	2200      	movs	r2, #0
 8001754:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_TIM3_Init+0x94>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_TIM3_Init+0x94>)
 800175e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001762:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_TIM3_Init+0x94>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_TIM3_Init+0x94>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <MX_TIM3_Init+0x94>)
 8001772:	f008 f841 	bl	80097f8 <HAL_TIM_Base_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800177c:	f000 ff42 	bl	8002604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	4619      	mov	r1, r3
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <MX_TIM3_Init+0x94>)
 800178e:	f008 fa23 	bl	8009bd8 <HAL_TIM_ConfigClockSource>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001798:	f000 ff34 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_TIM3_Init+0x94>)
 80017aa:	f008 fc41 	bl	800a030 <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80017b4:	f000 ff26 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000831c 	.word	0x2000831c
 80017c4:	40000400 	.word	0x40000400

080017c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_TIM5_Init+0x94>)
 80017e8:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <MX_TIM5_Init+0x98>)
 80017ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_TIM5_Init+0x94>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_TIM5_Init+0x94>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_TIM5_Init+0x94>)
 80017fa:	f04f 32ff 	mov.w	r2, #4294967295
 80017fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_TIM5_Init+0x94>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_TIM5_Init+0x94>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800180c:	4813      	ldr	r0, [pc, #76]	; (800185c <MX_TIM5_Init+0x94>)
 800180e:	f007 fff3 	bl	80097f8 <HAL_TIM_Base_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001818:	f000 fef4 	bl	8002604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001820:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4619      	mov	r1, r3
 8001828:	480c      	ldr	r0, [pc, #48]	; (800185c <MX_TIM5_Init+0x94>)
 800182a:	f008 f9d5 	bl	8009bd8 <HAL_TIM_ConfigClockSource>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001834:	f000 fee6 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_TIM5_Init+0x94>)
 8001846:	f008 fbf3 	bl	800a030 <HAL_TIMEx_MasterConfigSynchronization>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001850:	f000 fed8 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200082cc 	.word	0x200082cc
 8001860:	40000c00 	.word	0x40000c00

08001864 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <MX_TIM8_Init+0xa0>)
 8001884:	4a20      	ldr	r2, [pc, #128]	; (8001908 <MX_TIM8_Init+0xa4>)
 8001886:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <MX_TIM8_Init+0xa0>)
 800188a:	2200      	movs	r2, #0
 800188c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <MX_TIM8_Init+0xa0>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <MX_TIM8_Init+0xa0>)
 8001896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800189a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <MX_TIM8_Init+0xa0>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <MX_TIM8_Init+0xa0>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <MX_TIM8_Init+0xa0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018ae:	4815      	ldr	r0, [pc, #84]	; (8001904 <MX_TIM8_Init+0xa0>)
 80018b0:	f007 ffa2 	bl	80097f8 <HAL_TIM_Base_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80018ba:	f000 fea3 	bl	8002604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	4619      	mov	r1, r3
 80018ca:	480e      	ldr	r0, [pc, #56]	; (8001904 <MX_TIM8_Init+0xa0>)
 80018cc:	f008 f984 	bl	8009bd8 <HAL_TIM_ConfigClockSource>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80018d6:	f000 fe95 	bl	8002604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	4619      	mov	r1, r3
 80018ea:	4806      	ldr	r0, [pc, #24]	; (8001904 <MX_TIM8_Init+0xa0>)
 80018ec:	f008 fba0 	bl	800a030 <HAL_TIMEx_MasterConfigSynchronization>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80018f6:	f000 fe85 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20008030 	.word	0x20008030
 8001908:	40010400 	.word	0x40010400

0800190c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_UART7_Init+0x58>)
 8001912:	4a15      	ldr	r2, [pc, #84]	; (8001968 <MX_UART7_Init+0x5c>)
 8001914:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <MX_UART7_Init+0x58>)
 8001918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800191c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800191e:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_UART7_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <MX_UART7_Init+0x58>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_UART7_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_UART7_Init+0x58>)
 8001932:	220c      	movs	r2, #12
 8001934:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_UART7_Init+0x58>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_UART7_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MX_UART7_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_UART7_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_UART7_Init+0x58>)
 8001950:	f008 fc1a 	bl	800a188 <HAL_UART_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800195a:	f000 fe53 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20007fa8 	.word	0x20007fa8
 8001968:	40007800 	.word	0x40007800

0800196c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_USART1_UART_Init+0x58>)
 8001972:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <MX_USART1_UART_Init+0x5c>)
 8001974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <MX_USART1_UART_Init+0x58>)
 8001978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800197c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_USART1_UART_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_USART1_UART_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_USART1_UART_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_USART1_UART_Init+0x58>)
 8001992:	220c      	movs	r2, #12
 8001994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <MX_USART1_UART_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_USART1_UART_Init+0x58>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <MX_USART1_UART_Init+0x58>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_USART1_UART_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_USART1_UART_Init+0x58>)
 80019b0:	f008 fbea 	bl	800a188 <HAL_UART_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019ba:	f000 fe23 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200084a8 	.word	0x200084a8
 80019c8:	40011000 	.word	0x40011000

080019cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_USART6_UART_Init+0x58>)
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <MX_USART6_UART_Init+0x5c>)
 80019d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <MX_USART6_UART_Init+0x58>)
 80019d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_USART6_UART_Init+0x58>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_USART6_UART_Init+0x58>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_USART6_UART_Init+0x58>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_USART6_UART_Init+0x58>)
 80019f2:	220c      	movs	r2, #12
 80019f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MX_USART6_UART_Init+0x58>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_USART6_UART_Init+0x58>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MX_USART6_UART_Init+0x58>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_USART6_UART_Init+0x58>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	; (8001a24 <MX_USART6_UART_Init+0x58>)
 8001a10:	f008 fbba 	bl	800a188 <HAL_UART_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001a1a:	f000 fdf3 	bl	8002604 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200085b0 	.word	0x200085b0
 8001a28:	40011400 	.word	0x40011400

08001a2c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <MX_FMC_Init+0x98>)
 8001a46:	4a20      	ldr	r2, [pc, #128]	; (8001ac8 <MX_FMC_Init+0x9c>)
 8001a48:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <MX_FMC_Init+0x98>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a50:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <MX_FMC_Init+0x98>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <MX_FMC_Init+0x98>)
 8001a58:	2204      	movs	r2, #4
 8001a5a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <MX_FMC_Init+0x98>)
 8001a5e:	2210      	movs	r2, #16
 8001a60:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_FMC_Init+0x98>)
 8001a64:	2240      	movs	r2, #64	; 0x40
 8001a66:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_FMC_Init+0x98>)
 8001a6a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a6e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_FMC_Init+0x98>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <MX_FMC_Init+0x98>)
 8001a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a7c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_FMC_Init+0x98>)
 8001a80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_FMC_Init+0x98>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001a90:	2307      	movs	r3, #7
 8001a92:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001a94:	2304      	movs	r3, #4
 8001a96:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001a98:	2307      	movs	r3, #7
 8001a9a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_FMC_Init+0x98>)
 8001aae:	f007 fd67 	bl	8009580 <HAL_SDRAM_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001ab8:	f000 fda4 	bl	8002604 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001abc:	bf00      	nop
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200086c0 	.word	0x200086c0
 8001ac8:	a0000140 	.word	0xa0000140

08001acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b090      	sub	sp, #64	; 0x40
 8001ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
 8001ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae2:	4baf      	ldr	r3, [pc, #700]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4aae      	ldr	r2, [pc, #696]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001ae8:	f043 0310 	orr.w	r3, r3, #16
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4bac      	ldr	r3, [pc, #688]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001afa:	4ba9      	ldr	r3, [pc, #676]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4aa8      	ldr	r2, [pc, #672]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4ba6      	ldr	r3, [pc, #664]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4ba3      	ldr	r3, [pc, #652]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4aa2      	ldr	r2, [pc, #648]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4ba0      	ldr	r3, [pc, #640]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	623b      	str	r3, [r7, #32]
 8001b28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2a:	4b9d      	ldr	r3, [pc, #628]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a9c      	ldr	r2, [pc, #624]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b9a      	ldr	r3, [pc, #616]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	4b97      	ldr	r3, [pc, #604]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a96      	ldr	r2, [pc, #600]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b94      	ldr	r3, [pc, #592]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	61bb      	str	r3, [r7, #24]
 8001b58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	4b91      	ldr	r3, [pc, #580]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a90      	ldr	r2, [pc, #576]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b8e      	ldr	r3, [pc, #568]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b72:	4b8b      	ldr	r3, [pc, #556]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a8a      	ldr	r2, [pc, #552]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b88      	ldr	r3, [pc, #544]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b8a:	4b85      	ldr	r3, [pc, #532]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a84      	ldr	r2, [pc, #528]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b82      	ldr	r3, [pc, #520]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ba2:	4b7f      	ldr	r3, [pc, #508]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a7e      	ldr	r2, [pc, #504]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001ba8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b7c      	ldr	r3, [pc, #496]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bba:	4b79      	ldr	r3, [pc, #484]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a78      	ldr	r2, [pc, #480]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001bc0:	f043 0320 	orr.w	r3, r3, #32
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b76      	ldr	r3, [pc, #472]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd2:	4b73      	ldr	r3, [pc, #460]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a72      	ldr	r2, [pc, #456]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b70      	ldr	r3, [pc, #448]	; (8001da0 <MX_GPIO_Init+0x2d4>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	2160      	movs	r1, #96	; 0x60
 8001bee:	486d      	ldr	r0, [pc, #436]	; (8001da4 <MX_GPIO_Init+0x2d8>)
 8001bf0:	f004 fdf4 	bl	80067dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	2120      	movs	r1, #32
 8001bf8:	486b      	ldr	r0, [pc, #428]	; (8001da8 <MX_GPIO_Init+0x2dc>)
 8001bfa:	f004 fdef 	bl	80067dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2108      	movs	r1, #8
 8001c02:	4869      	ldr	r0, [pc, #420]	; (8001da8 <MX_GPIO_Init+0x2dc>)
 8001c04:	f004 fdea 	bl	80067dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2108      	movs	r1, #8
 8001c0c:	4867      	ldr	r0, [pc, #412]	; (8001dac <MX_GPIO_Init+0x2e0>)
 8001c0e:	f004 fde5 	bl	80067dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c18:	4865      	ldr	r0, [pc, #404]	; (8001db0 <MX_GPIO_Init+0x2e4>)
 8001c1a:	f004 fddf 	bl	80067dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001c24:	4863      	ldr	r0, [pc, #396]	; (8001db4 <MX_GPIO_Init+0x2e8>)
 8001c26:	f004 fdd9 	bl	80067dc <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	21c8      	movs	r1, #200	; 0xc8
 8001c2e:	4862      	ldr	r0, [pc, #392]	; (8001db8 <MX_GPIO_Init+0x2ec>)
 8001c30:	f004 fdd4 	bl	80067dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001c34:	2308      	movs	r3, #8
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c44:	4619      	mov	r1, r3
 8001c46:	4857      	ldr	r0, [pc, #348]	; (8001da4 <MX_GPIO_Init+0x2d8>)
 8001c48:	f004 fb10 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c5c:	2309      	movs	r3, #9
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c64:	4619      	mov	r1, r3
 8001c66:	484f      	ldr	r0, [pc, #316]	; (8001da4 <MX_GPIO_Init+0x2d8>)
 8001c68:	f004 fb00 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001c6c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c7e:	230b      	movs	r3, #11
 8001c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c86:	4619      	mov	r1, r3
 8001c88:	484b      	ldr	r0, [pc, #300]	; (8001db8 <MX_GPIO_Init+0x2ec>)
 8001c8a:	f004 faef 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001c8e:	f643 0323 	movw	r3, #14371	; 0x3823
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ca0:	230a      	movs	r3, #10
 8001ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4844      	ldr	r0, [pc, #272]	; (8001dbc <MX_GPIO_Init+0x2f0>)
 8001cac:	f004 fade 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4837      	ldr	r0, [pc, #220]	; (8001da8 <MX_GPIO_Init+0x2dc>)
 8001ccc:	f004 face 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001cd0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ce2:	230c      	movs	r3, #12
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cea:	4619      	mov	r1, r3
 8001cec:	4834      	ldr	r0, [pc, #208]	; (8001dc0 <MX_GPIO_Init+0x2f4>)
 8001cee:	f004 fabd 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA8 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_6;
 8001cf2:	f248 1340 	movw	r3, #33088	; 0x8140
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d04:	4619      	mov	r1, r3
 8001d06:	482f      	ldr	r0, [pc, #188]	; (8001dc4 <MX_GPIO_Init+0x2f8>)
 8001d08:	f004 fab0 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001d0c:	2360      	movs	r3, #96	; 0x60
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d20:	4619      	mov	r1, r3
 8001d22:	4820      	ldr	r0, [pc, #128]	; (8001da4 <MX_GPIO_Init+0x2d8>)
 8001d24:	f004 faa2 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001d28:	2340      	movs	r3, #64	; 0x40
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d38:	230a      	movs	r3, #10
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001d3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d40:	4619      	mov	r1, r3
 8001d42:	481e      	ldr	r0, [pc, #120]	; (8001dbc <MX_GPIO_Init+0x2f0>)
 8001d44:	f004 fa92 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	481a      	ldr	r0, [pc, #104]	; (8001dc8 <MX_GPIO_Init+0x2fc>)
 8001d5e:	f004 fa85 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001d62:	2340      	movs	r3, #64	; 0x40
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d66:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d74:	4619      	mov	r1, r3
 8001d76:	480c      	ldr	r0, [pc, #48]	; (8001da8 <MX_GPIO_Init+0x2dc>)
 8001d78:	f004 fa78 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001d7c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d8e:	230a      	movs	r3, #10
 8001d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d96:	4619      	mov	r1, r3
 8001d98:	480a      	ldr	r0, [pc, #40]	; (8001dc4 <MX_GPIO_Init+0x2f8>)
 8001d9a:	f004 fa67 	bl	800626c <HAL_GPIO_Init>
 8001d9e:	e015      	b.n	8001dcc <MX_GPIO_Init+0x300>
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40020c00 	.word	0x40020c00
 8001dac:	40022800 	.word	0x40022800
 8001db0:	40022000 	.word	0x40022000
 8001db4:	40021c00 	.word	0x40021c00
 8001db8:	40021800 	.word	0x40021800
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40022400 	.word	0x40022400

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001dcc:	23f0      	movs	r3, #240	; 0xf0
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ddc:	230a      	movs	r3, #10
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001de0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de4:	4619      	mov	r1, r3
 8001de6:	4895      	ldr	r0, [pc, #596]	; (800203c <MX_GPIO_Init+0x570>)
 8001de8:	f004 fa40 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001dfe:	230a      	movs	r3, #10
 8001e00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e06:	4619      	mov	r1, r3
 8001e08:	488d      	ldr	r0, [pc, #564]	; (8002040 <MX_GPIO_Init+0x574>)
 8001e0a:	f004 fa2f 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001e0e:	2328      	movs	r3, #40	; 0x28
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e22:	4619      	mov	r1, r3
 8001e24:	4887      	ldr	r0, [pc, #540]	; (8002044 <MX_GPIO_Init+0x578>)
 8001e26:	f004 fa21 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e30:	2300      	movs	r3, #0
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4882      	ldr	r0, [pc, #520]	; (8002048 <MX_GPIO_Init+0x57c>)
 8001e40:	f004 fa14 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001e44:	2308      	movs	r3, #8
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e58:	4619      	mov	r1, r3
 8001e5a:	487c      	ldr	r0, [pc, #496]	; (800204c <MX_GPIO_Init+0x580>)
 8001e5c:	f004 fa06 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001e60:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e66:	2300      	movs	r3, #0
 8001e68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e72:	4619      	mov	r1, r3
 8001e74:	4872      	ldr	r0, [pc, #456]	; (8002040 <MX_GPIO_Init+0x574>)
 8001e76:	f004 f9f9 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e7a:	2310      	movs	r3, #16
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	486d      	ldr	r0, [pc, #436]	; (8002044 <MX_GPIO_Init+0x578>)
 8001e8e:	f004 f9ed 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001e92:	2304      	movs	r3, #4
 8001e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4865      	ldr	r0, [pc, #404]	; (8002044 <MX_GPIO_Init+0x578>)
 8001eae:	f004 f9dd 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001eb2:	f24a 0304 	movw	r3, #40964	; 0xa004
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4862      	ldr	r0, [pc, #392]	; (8002050 <MX_GPIO_Init+0x584>)
 8001ec8:	f004 f9d0 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4855      	ldr	r0, [pc, #340]	; (800203c <MX_GPIO_Init+0x570>)
 8001ee6:	f004 f9c1 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001eea:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001efc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f00:	4619      	mov	r1, r3
 8001f02:	4853      	ldr	r0, [pc, #332]	; (8002050 <MX_GPIO_Init+0x584>)
 8001f04:	f004 f9b2 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001f18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4847      	ldr	r0, [pc, #284]	; (800203c <MX_GPIO_Init+0x570>)
 8001f20:	f004 f9a4 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001f24:	2310      	movs	r3, #16
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f34:	230a      	movs	r3, #10
 8001f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4844      	ldr	r0, [pc, #272]	; (8002050 <MX_GPIO_Init+0x584>)
 8001f40:	f004 f994 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001f44:	23c8      	movs	r3, #200	; 0xc8
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4839      	ldr	r0, [pc, #228]	; (8002040 <MX_GPIO_Init+0x574>)
 8001f5c:	f004 f986 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001f60:	2305      	movs	r3, #5
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f70:	230a      	movs	r3, #10
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4833      	ldr	r0, [pc, #204]	; (8002048 <MX_GPIO_Init+0x57c>)
 8001f7c:	f004 f976 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f80:	2332      	movs	r3, #50	; 0x32
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f90:	230b      	movs	r3, #11
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f98:	4619      	mov	r1, r3
 8001f9a:	482b      	ldr	r0, [pc, #172]	; (8002048 <MX_GPIO_Init+0x57c>)
 8001f9c:	f004 f966 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fb0:	2309      	movs	r3, #9
 8001fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4826      	ldr	r0, [pc, #152]	; (8002054 <MX_GPIO_Init+0x588>)
 8001fbc:	f004 f956 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001fc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fd2:	2309      	movs	r3, #9
 8001fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4819      	ldr	r0, [pc, #100]	; (8002044 <MX_GPIO_Init+0x578>)
 8001fde:	f004 f945 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001fe2:	2386      	movs	r3, #134	; 0x86
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ff2:	230b      	movs	r3, #11
 8001ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4816      	ldr	r0, [pc, #88]	; (8002058 <MX_GPIO_Init+0x58c>)
 8001ffe:	f004 f935 	bl	800626c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002002:	2328      	movs	r3, #40	; 0x28
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002012:	230a      	movs	r3, #10
 8002014:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002016:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800201a:	4619      	mov	r1, r3
 800201c:	480e      	ldr	r0, [pc, #56]	; (8002058 <MX_GPIO_Init+0x58c>)
 800201e:	f004 f925 	bl	800626c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2105      	movs	r1, #5
 8002026:	2028      	movs	r0, #40	; 0x28
 8002028:	f003 fa2a 	bl	8005480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800202c:	2028      	movs	r0, #40	; 0x28
 800202e:	f003 fa43 	bl	80054b8 <HAL_NVIC_EnableIRQ>

}
 8002032:	bf00      	nop
 8002034:	3740      	adds	r7, #64	; 0x40
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40022000 	.word	0x40022000
 8002040:	40021800 	.word	0x40021800
 8002044:	40020c00 	.word	0x40020c00
 8002048:	40020800 	.word	0x40020800
 800204c:	40022800 	.word	0x40022800
 8002050:	40021c00 	.word	0x40021c00
 8002054:	40020400 	.word	0x40020400
 8002058:	40020000 	.word	0x40020000

0800205c <HAL_GPIO_EXTI_Callback>:
		HAL_UART_Receive_IT(&huart1,rxbuffer,1); // Rappel (callback) de l'interruption
		*/
	}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{	/**
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	80fb      	strh	r3, [r7, #6]
 		flag = 1;
	}
	//xQueueSendFromISR(myQueueTempoHandle, &MessageTempo, 0);
	 *
	 */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <fonction_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_fonction_init */
void fonction_init(void const * argument)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 20;
 800207c:	2314      	movs	r3, #20
 800207e:	613b      	str	r3, [r7, #16]
    uint8_t i, j, cpt_lignesw = 0, cpt_colonnesw = 1, cpt_lignesb, cpt_colonnesb;
 8002080:	2300      	movs	r3, #0
 8002082:	757b      	strb	r3, [r7, #21]
 8002084:	2301      	movs	r3, #1
 8002086:	753b      	strb	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {


	  for (i = 0; i < 3; i++)
 8002088:	2300      	movs	r3, #0
 800208a:	75fb      	strb	r3, [r7, #23]
 800208c:	e090      	b.n	80021b0 <fonction_init+0x13c>
	  {
		  for (j = 0; j < 4; j++)
 800208e:	2300      	movs	r3, #0
 8002090:	75bb      	strb	r3, [r7, #22]
 8002092:	e07a      	b.n	800218a <fonction_init+0x116>
		  {
			  taskENTER_CRITICAL();
 8002094:	f00b fac2 	bl	800d61c <vPortEnterCritical>
			  	 // init white pieces
			  chessboard[cpt_lignesw][cpt_colonnesw].ligne = cpt_lignesw;
 8002098:	7d7a      	ldrb	r2, [r7, #21]
 800209a:	7d3b      	ldrb	r3, [r7, #20]
 800209c:	7d79      	ldrb	r1, [r7, #21]
 800209e:	b288      	uxth	r0, r1
 80020a0:	4949      	ldr	r1, [pc, #292]	; (80021c8 <fonction_init+0x154>)
 80020a2:	00d2      	lsls	r2, r2, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	4602      	mov	r2, r0
 80020a8:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
			  chessboard[cpt_lignesw][cpt_colonnesw].colonne = cpt_colonnesw;
 80020ac:	7d7a      	ldrb	r2, [r7, #21]
 80020ae:	7d3b      	ldrb	r3, [r7, #20]
 80020b0:	7d39      	ldrb	r1, [r7, #20]
 80020b2:	b288      	uxth	r0, r1
 80020b4:	4944      	ldr	r1, [pc, #272]	; (80021c8 <fonction_init+0x154>)
 80020b6:	00d2      	lsls	r2, r2, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	4602      	mov	r2, r0
 80020c0:	805a      	strh	r2, [r3, #2]
			  chessboard[cpt_lignesw][cpt_colonnesw].isFilled = 1;
 80020c2:	7d7a      	ldrb	r2, [r7, #21]
 80020c4:	7d3b      	ldrb	r3, [r7, #20]
 80020c6:	4940      	ldr	r1, [pc, #256]	; (80021c8 <fonction_init+0x154>)
 80020c8:	00d2      	lsls	r2, r2, #3
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	2201      	movs	r2, #1
 80020d2:	715a      	strb	r2, [r3, #5]
			  chessboard[cpt_lignesw][cpt_colonnesw].rayon = 9;
 80020d4:	7d7a      	ldrb	r2, [r7, #21]
 80020d6:	7d3b      	ldrb	r3, [r7, #20]
 80020d8:	493b      	ldr	r1, [pc, #236]	; (80021c8 <fonction_init+0x154>)
 80020da:	00d2      	lsls	r2, r2, #3
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	2209      	movs	r2, #9
 80020e4:	71da      	strb	r2, [r3, #7]
			  chessboard[cpt_lignesw][cpt_colonnesw].piece_color = 0;
 80020e6:	7d7a      	ldrb	r2, [r7, #21]
 80020e8:	7d3b      	ldrb	r3, [r7, #20]
 80020ea:	4937      	ldr	r1, [pc, #220]	; (80021c8 <fonction_init+0x154>)
 80020ec:	00d2      	lsls	r2, r2, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	2200      	movs	r2, #0
 80020f6:	719a      	strb	r2, [r3, #6]
			  // init black pieces
			  cpt_lignesb = cpt_lignesw + 5;
 80020f8:	7d7b      	ldrb	r3, [r7, #21]
 80020fa:	3305      	adds	r3, #5
 80020fc:	73fb      	strb	r3, [r7, #15]
			  cpt_colonnesb = (cpt_colonnesw % 2 == 0) ? cpt_colonnesw + 1 : cpt_colonnesw - 1;
 80020fe:	7d3b      	ldrb	r3, [r7, #20]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d103      	bne.n	8002112 <fonction_init+0x9e>
 800210a:	7d3b      	ldrb	r3, [r7, #20]
 800210c:	3301      	adds	r3, #1
 800210e:	b2db      	uxtb	r3, r3
 8002110:	e002      	b.n	8002118 <fonction_init+0xa4>
 8002112:	7d3b      	ldrb	r3, [r7, #20]
 8002114:	3b01      	subs	r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	73bb      	strb	r3, [r7, #14]
			  chessboard[cpt_lignesb][cpt_colonnesb].ligne = cpt_lignesb;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	7bbb      	ldrb	r3, [r7, #14]
 800211e:	7bf9      	ldrb	r1, [r7, #15]
 8002120:	b288      	uxth	r0, r1
 8002122:	4929      	ldr	r1, [pc, #164]	; (80021c8 <fonction_init+0x154>)
 8002124:	00d2      	lsls	r2, r2, #3
 8002126:	4413      	add	r3, r2
 8002128:	4602      	mov	r2, r0
 800212a:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
			  chessboard[cpt_lignesb][cpt_colonnesb].colonne = cpt_colonnesb;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	7bbb      	ldrb	r3, [r7, #14]
 8002132:	7bb9      	ldrb	r1, [r7, #14]
 8002134:	b288      	uxth	r0, r1
 8002136:	4924      	ldr	r1, [pc, #144]	; (80021c8 <fonction_init+0x154>)
 8002138:	00d2      	lsls	r2, r2, #3
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	440b      	add	r3, r1
 8002140:	4602      	mov	r2, r0
 8002142:	805a      	strh	r2, [r3, #2]
			  chessboard[cpt_lignesb][cpt_colonnesb].isFilled = 1;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	7bbb      	ldrb	r3, [r7, #14]
 8002148:	491f      	ldr	r1, [pc, #124]	; (80021c8 <fonction_init+0x154>)
 800214a:	00d2      	lsls	r2, r2, #3
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	2201      	movs	r2, #1
 8002154:	715a      	strb	r2, [r3, #5]
			  chessboard[cpt_lignesb][cpt_colonnesb].rayon = 9;
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	7bbb      	ldrb	r3, [r7, #14]
 800215a:	491b      	ldr	r1, [pc, #108]	; (80021c8 <fonction_init+0x154>)
 800215c:	00d2      	lsls	r2, r2, #3
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	440b      	add	r3, r1
 8002164:	2209      	movs	r2, #9
 8002166:	71da      	strb	r2, [r3, #7]
			  chessboard[cpt_lignesb][cpt_colonnesb].piece_color = 1;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	7bbb      	ldrb	r3, [r7, #14]
 800216c:	4916      	ldr	r1, [pc, #88]	; (80021c8 <fonction_init+0x154>)
 800216e:	00d2      	lsls	r2, r2, #3
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	2201      	movs	r2, #1
 8002178:	719a      	strb	r2, [r3, #6]
			  taskEXIT_CRITICAL();
 800217a:	f00b fa83 	bl	800d684 <vPortExitCritical>
			  cpt_colonnesw += 2;
 800217e:	7d3b      	ldrb	r3, [r7, #20]
 8002180:	3302      	adds	r3, #2
 8002182:	753b      	strb	r3, [r7, #20]
		  for (j = 0; j < 4; j++)
 8002184:	7dbb      	ldrb	r3, [r7, #22]
 8002186:	3301      	adds	r3, #1
 8002188:	75bb      	strb	r3, [r7, #22]
 800218a:	7dbb      	ldrb	r3, [r7, #22]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d981      	bls.n	8002094 <fonction_init+0x20>
		  }
		  cpt_colonnesw = (cpt_colonnesw % 2 == 0) ? 1 : 0;
 8002190:	7d3b      	ldrb	r3, [r7, #20]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	753b      	strb	r3, [r7, #20]
		  cpt_lignesw++;
 80021a4:	7d7b      	ldrb	r3, [r7, #21]
 80021a6:	3301      	adds	r3, #1
 80021a8:	757b      	strb	r3, [r7, #21]
	  for (i = 0; i < 3; i++)
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	3301      	adds	r3, #1
 80021ae:	75fb      	strb	r3, [r7, #23]
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	f67f af6b 	bls.w	800208e <fonction_init+0x1a>
	  }

      vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80021b8:	f107 0308 	add.w	r3, r7, #8
 80021bc:	6939      	ldr	r1, [r7, #16]
 80021be:	4618      	mov	r0, r3
 80021c0:	f00a fa02 	bl	800c5c8 <vTaskDelayUntil>
	  for (i = 0; i < 3; i++)
 80021c4:	e760      	b.n	8002088 <fonction_init+0x14>
 80021c6:	bf00      	nop
 80021c8:	200080cc 	.word	0x200080cc

080021cc <fonction_affichage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_affichage */
void fonction_affichage(void const * argument)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_affichage */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 50;
 80021d4:	2332      	movs	r3, #50	; 0x32
 80021d6:	61bb      	str	r3, [r7, #24]
	const uint8_t pas 			= 30;
 80021d8:	231e      	movs	r3, #30
 80021da:	75fb      	strb	r3, [r7, #23]
	const uint8_t marge			= 15;
 80021dc:	230f      	movs	r3, #15
 80021de:	75bb      	strb	r3, [r7, #22]
	uint16_t pointeurX 			= marge + pas / 2;
 80021e0:	7dbb      	ldrb	r3, [r7, #22]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
 80021e6:	085b      	lsrs	r3, r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	82bb      	strh	r3, [r7, #20]
	uint16_t pointeurY 			= marge + pas / 2;
 80021f0:	7dbb      	ldrb	r3, [r7, #22]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	827b      	strh	r3, [r7, #18]
	uint8_t color				= 2;
 8002200:	2302      	movs	r3, #2
 8002202:	747b      	strb	r3, [r7, #17]
	uint8_t i, j;
	uint8_t filled = 0, possible = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	743b      	strb	r3, [r7, #16]
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
	vTaskDelete(task_initHandle);
 800220c:	4b6e      	ldr	r3, [pc, #440]	; (80023c8 <fonction_affichage+0x1fc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f00a f947 	bl	800c4a4 <vTaskDelete>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 8002216:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800221a:	486c      	ldr	r0, [pc, #432]	; (80023cc <fonction_affichage+0x200>)
 800221c:	f004 faf7 	bl	800680e <HAL_GPIO_TogglePin>
	  // Clear que pour certains changements
	  taskENTER_CRITICAL();
 8002220:	f00b f9fc 	bl	800d61c <vPortEnterCritical>
	  if(change == 1)
 8002224:	4b6a      	ldr	r3, [pc, #424]	; (80023d0 <fonction_affichage+0x204>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d105      	bne.n	8002238 <fonction_affichage+0x6c>
	  {
		  BSP_LCD_Clear(0);
 800222c:	2000      	movs	r0, #0
 800222e:	f000 fce7 	bl	8002c00 <BSP_LCD_Clear>
		  change = 0;
 8002232:	4b67      	ldr	r3, [pc, #412]	; (80023d0 <fonction_affichage+0x204>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
	  }
	  taskEXIT_CRITICAL();
 8002238:	f00b fa24 	bl	800d684 <vPortExitCritical>

	  for (i = 0; i < 8; i++)
 800223c:	2300      	movs	r3, #0
 800223e:	77fb      	strb	r3, [r7, #31]
 8002240:	e0b7      	b.n	80023b2 <fonction_affichage+0x1e6>
	  {
		  for (j = 0; j < 8; j++)
 8002242:	2300      	movs	r3, #0
 8002244:	77bb      	strb	r3, [r7, #30]
 8002246:	e0ad      	b.n	80023a4 <fonction_affichage+0x1d8>
		  {
			  taskENTER_CRITICAL();
 8002248:	f00b f9e8 	bl	800d61c <vPortEnterCritical>
			  filled = chessboard[i][j].isFilled;
 800224c:	7ffa      	ldrb	r2, [r7, #31]
 800224e:	7fbb      	ldrb	r3, [r7, #30]
 8002250:	4960      	ldr	r1, [pc, #384]	; (80023d4 <fonction_affichage+0x208>)
 8002252:	00d2      	lsls	r2, r2, #3
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	795b      	ldrb	r3, [r3, #5]
 800225c:	743b      	strb	r3, [r7, #16]
			  possible = chessboard[i][j].isPossible;
 800225e:	7ffa      	ldrb	r2, [r7, #31]
 8002260:	7fbb      	ldrb	r3, [r7, #30]
 8002262:	495c      	ldr	r1, [pc, #368]	; (80023d4 <fonction_affichage+0x208>)
 8002264:	00d2      	lsls	r2, r2, #3
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	791b      	ldrb	r3, [r3, #4]
 800226e:	73fb      	strb	r3, [r7, #15]
			  taskEXIT_CRITICAL();
 8002270:	f00b fa08 	bl	800d684 <vPortExitCritical>
			  // Case avec un pion
			  if ( filled != 0)
 8002274:	7c3b      	ldrb	r3, [r7, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d055      	beq.n	8002326 <fonction_affichage+0x15a>
			  {
				  color = chessboard[i][j].piece_color;
 800227a:	7ffa      	ldrb	r2, [r7, #31]
 800227c:	7fbb      	ldrb	r3, [r7, #30]
 800227e:	4955      	ldr	r1, [pc, #340]	; (80023d4 <fonction_affichage+0x208>)
 8002280:	00d2      	lsls	r2, r2, #3
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	799b      	ldrb	r3, [r3, #6]
 800228a:	747b      	strb	r3, [r7, #17]
				  xSemaphoreTake(mutexEcran, portMAX_DELAY);
 800228c:	4b52      	ldr	r3, [pc, #328]	; (80023d8 <fonction_affichage+0x20c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	4618      	mov	r0, r3
 8002296:	f009 fd17 	bl	800bcc8 <xQueueSemaphoreTake>
				  if (color == 1) BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800229a:	7c7b      	ldrb	r3, [r7, #17]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d103      	bne.n	80022a8 <fonction_affichage+0xdc>
 80022a0:	484e      	ldr	r0, [pc, #312]	; (80023dc <fonction_affichage+0x210>)
 80022a2:	f000 fc61 	bl	8002b68 <BSP_LCD_SetTextColor>
 80022a6:	e006      	b.n	80022b6 <fonction_affichage+0xea>
				  else if (color == 0) BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80022a8:	7c7b      	ldrb	r3, [r7, #17]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <fonction_affichage+0xea>
 80022ae:	f04f 30ff 	mov.w	r0, #4294967295
 80022b2:	f000 fc59 	bl	8002b68 <BSP_LCD_SetTextColor>
			      pointeurX = marge + pas / 2 + j * pas;
 80022b6:	7dbb      	ldrb	r3, [r7, #22]
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
 80022bc:	085b      	lsrs	r3, r3, #1
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	7fbb      	ldrb	r3, [r7, #30]
 80022c8:	b299      	uxth	r1, r3
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	fb11 f303 	smulbb	r3, r1, r3
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	82bb      	strh	r3, [r7, #20]
			      pointeurY = marge + pas / 2 + i * pas;
 80022d8:	7dbb      	ldrb	r3, [r7, #22]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	7ffb      	ldrb	r3, [r7, #31]
 80022ea:	b299      	uxth	r1, r3
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	fb11 f303 	smulbb	r3, r1, r3
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	827b      	strh	r3, [r7, #18]
				  BSP_LCD_FillCircle(pointeurX, pointeurY, chessboard[i][j].rayon);
 80022fa:	7ffa      	ldrb	r2, [r7, #31]
 80022fc:	7fbb      	ldrb	r3, [r7, #30]
 80022fe:	4935      	ldr	r1, [pc, #212]	; (80023d4 <fonction_affichage+0x208>)
 8002300:	00d2      	lsls	r2, r2, #3
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	79db      	ldrb	r3, [r3, #7]
 800230a:	b29a      	uxth	r2, r3
 800230c:	8a79      	ldrh	r1, [r7, #18]
 800230e:	8abb      	ldrh	r3, [r7, #20]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fedf 	bl	80030d4 <BSP_LCD_FillCircle>
				  xSemaphoreGive(mutexEcran);
 8002316:	4b30      	ldr	r3, [pc, #192]	; (80023d8 <fonction_affichage+0x20c>)
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	2300      	movs	r3, #0
 800231c:	2200      	movs	r2, #0
 800231e:	2100      	movs	r1, #0
 8002320:	f009 fae6 	bl	800b8f0 <xQueueGenericSend>
 8002324:	e03b      	b.n	800239e <fonction_affichage+0x1d2>
			  }
			  //Case possible
			  else if (possible != 0)
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d038      	beq.n	800239e <fonction_affichage+0x1d2>
			  {
				  xSemaphoreTake(mutexEcran, portMAX_DELAY);
 800232c:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <fonction_affichage+0x20c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	4618      	mov	r0, r3
 8002336:	f009 fcc7 	bl	800bcc8 <xQueueSemaphoreTake>
				  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800233a:	4829      	ldr	r0, [pc, #164]	; (80023e0 <fonction_affichage+0x214>)
 800233c:	f000 fc14 	bl	8002b68 <BSP_LCD_SetTextColor>
			      pointeurX = marge + pas / 2 + j * pas;
 8002340:	7dbb      	ldrb	r3, [r7, #22]
 8002342:	b29a      	uxth	r2, r3
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	b2db      	uxtb	r3, r3
 800234a:	b29b      	uxth	r3, r3
 800234c:	4413      	add	r3, r2
 800234e:	b29a      	uxth	r2, r3
 8002350:	7fbb      	ldrb	r3, [r7, #30]
 8002352:	b299      	uxth	r1, r3
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	b29b      	uxth	r3, r3
 8002358:	fb11 f303 	smulbb	r3, r1, r3
 800235c:	b29b      	uxth	r3, r3
 800235e:	4413      	add	r3, r2
 8002360:	82bb      	strh	r3, [r7, #20]
			      pointeurY = marge + pas / 2 + i * pas;
 8002362:	7dbb      	ldrb	r3, [r7, #22]
 8002364:	b29a      	uxth	r2, r3
 8002366:	7dfb      	ldrb	r3, [r7, #23]
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	b29b      	uxth	r3, r3
 800236e:	4413      	add	r3, r2
 8002370:	b29a      	uxth	r2, r3
 8002372:	7ffb      	ldrb	r3, [r7, #31]
 8002374:	b299      	uxth	r1, r3
 8002376:	7dfb      	ldrb	r3, [r7, #23]
 8002378:	b29b      	uxth	r3, r3
 800237a:	fb11 f303 	smulbb	r3, r1, r3
 800237e:	b29b      	uxth	r3, r3
 8002380:	4413      	add	r3, r2
 8002382:	827b      	strh	r3, [r7, #18]
				  BSP_LCD_FillCircle(pointeurX, pointeurY, 9);
 8002384:	8a79      	ldrh	r1, [r7, #18]
 8002386:	8abb      	ldrh	r3, [r7, #20]
 8002388:	2209      	movs	r2, #9
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fea2 	bl	80030d4 <BSP_LCD_FillCircle>
				  xSemaphoreGive(mutexEcran);
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <fonction_affichage+0x20c>)
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	2300      	movs	r3, #0
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	f009 faa9 	bl	800b8f0 <xQueueGenericSend>
		  for (j = 0; j < 8; j++)
 800239e:	7fbb      	ldrb	r3, [r7, #30]
 80023a0:	3301      	adds	r3, #1
 80023a2:	77bb      	strb	r3, [r7, #30]
 80023a4:	7fbb      	ldrb	r3, [r7, #30]
 80023a6:	2b07      	cmp	r3, #7
 80023a8:	f67f af4e 	bls.w	8002248 <fonction_affichage+0x7c>
	  for (i = 0; i < 8; i++)
 80023ac:	7ffb      	ldrb	r3, [r7, #31]
 80023ae:	3301      	adds	r3, #1
 80023b0:	77fb      	strb	r3, [r7, #31]
 80023b2:	7ffb      	ldrb	r3, [r7, #31]
 80023b4:	2b07      	cmp	r3, #7
 80023b6:	f67f af44 	bls.w	8002242 <fonction_affichage+0x76>
			  }
		  }
	  }
    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 80023ba:	f107 0308 	add.w	r3, r7, #8
 80023be:	69b9      	ldr	r1, [r7, #24]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f00a f901 	bl	800c5c8 <vTaskDelayUntil>
	  HAL_GPIO_TogglePin(LED12_GPIO_Port, LED12_Pin);
 80023c6:	e726      	b.n	8002216 <fonction_affichage+0x4a>
 80023c8:	2000802c 	.word	0x2000802c
 80023cc:	40021c00 	.word	0x40021c00
 80023d0:	20000028 	.word	0x20000028
 80023d4:	200080cc 	.word	0x200080cc
 80023d8:	2000852c 	.word	0x2000852c
 80023dc:	ff0000ff 	.word	0xff0000ff
 80023e0:	ffff0000 	.word	0xffff0000

080023e4 <fonction_select>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_select */
void fonction_select(void const * argument)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fonction_select */
	//uint16_t MessageTS[1];
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 100;
 80023ec:	2364      	movs	r3, #100	; 0x64
 80023ee:	61bb      	str	r3, [r7, #24]
	static TS_StateTypeDef TS_State;
	//flag = 0;
	uint8_t posx = 0, posy = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	75fb      	strb	r3, [r7, #23]
 80023f4:	2300      	movs	r3, #0
 80023f6:	75bb      	strb	r3, [r7, #22]
	uint8_t line = 0, col = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	757b      	strb	r3, [r7, #21]
 80023fc:	2300      	movs	r3, #0
 80023fe:	753b      	strb	r3, [r7, #20]
	const uint8_t pas 			= 30;
 8002400:	231e      	movs	r3, #30
 8002402:	74fb      	strb	r3, [r7, #19]
	const uint8_t marge			= 15;
 8002404:	230f      	movs	r3, #15
 8002406:	74bb      	strb	r3, [r7, #18]
	uint8_t selected 			= 0;
 8002408:	2300      	movs	r3, #0
 800240a:	77fb      	strb	r3, [r7, #31]
  /* Infinite loop */
  for(;;)
  {
	  //xQueueReceiveFromISR(myQueueTSHandle, &MessageTS, portMAX_DELAY);
	  //if(MessageTS[0] == LCD_INT_Pin)
	  BSP_TS_GetState(&TS_State);
 800240c:	4838      	ldr	r0, [pc, #224]	; (80024f0 <fonction_select+0x10c>)
 800240e:	f001 fac9 	bl	80039a4 <BSP_TS_GetState>
	  if(TS_State.touchDetected)
 8002412:	4b37      	ldr	r3, [pc, #220]	; (80024f0 <fonction_select+0x10c>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d063      	beq.n	80024e2 <fonction_select+0xfe>
	  {
		 // taskENTER_CRITICAL();
		 // flag = 0;
		 // taskEXIT_CRITICAL();

		  posx = TS_State.touchX[0];
 800241a:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <fonction_select+0x10c>)
 800241c:	885b      	ldrh	r3, [r3, #2]
 800241e:	75fb      	strb	r3, [r7, #23]
		  posy = TS_State.touchY[0];
 8002420:	4b33      	ldr	r3, [pc, #204]	; (80024f0 <fonction_select+0x10c>)
 8002422:	899b      	ldrh	r3, [r3, #12]
 8002424:	75bb      	strb	r3, [r7, #22]

		  col = (posx - marge) / pas;
 8002426:	7dfa      	ldrb	r2, [r7, #23]
 8002428:	7cbb      	ldrb	r3, [r7, #18]
 800242a:	1ad2      	subs	r2, r2, r3
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002432:	753b      	strb	r3, [r7, #20]
		  line = (posy - marge) / pas;
 8002434:	7dba      	ldrb	r2, [r7, #22]
 8002436:	7cbb      	ldrb	r3, [r7, #18]
 8002438:	1ad2      	subs	r2, r2, r3
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002440:	757b      	strb	r3, [r7, #21]
		  taskENTER_CRITICAL();
 8002442:	f00b f8eb 	bl	800d61c <vPortEnterCritical>
		  if(chessboard[line][col].isFilled)
 8002446:	7d7a      	ldrb	r2, [r7, #21]
 8002448:	7d3b      	ldrb	r3, [r7, #20]
 800244a:	492a      	ldr	r1, [pc, #168]	; (80024f4 <fonction_select+0x110>)
 800244c:	00d2      	lsls	r2, r2, #3
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	795b      	ldrb	r3, [r3, #5]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d041      	beq.n	80024de <fonction_select+0xfa>
		  {
			  if(chessboard[line][col].rayon < 12 && selected == 0)
 800245a:	7d7a      	ldrb	r2, [r7, #21]
 800245c:	7d3b      	ldrb	r3, [r7, #20]
 800245e:	4925      	ldr	r1, [pc, #148]	; (80024f4 <fonction_select+0x110>)
 8002460:	00d2      	lsls	r2, r2, #3
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	440b      	add	r3, r1
 8002468:	79db      	ldrb	r3, [r3, #7]
 800246a:	2b0b      	cmp	r3, #11
 800246c:	d81f      	bhi.n	80024ae <fonction_select+0xca>
 800246e:	7ffb      	ldrb	r3, [r7, #31]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d11c      	bne.n	80024ae <fonction_select+0xca>
			  {
				  chessboard[line][col].rayon = 12;
 8002474:	7d7a      	ldrb	r2, [r7, #21]
 8002476:	7d3b      	ldrb	r3, [r7, #20]
 8002478:	491e      	ldr	r1, [pc, #120]	; (80024f4 <fonction_select+0x110>)
 800247a:	00d2      	lsls	r2, r2, #3
 800247c:	4413      	add	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	440b      	add	r3, r1
 8002482:	220c      	movs	r2, #12
 8002484:	71da      	strb	r2, [r3, #7]
				  selected = 1;
 8002486:	2301      	movs	r3, #1
 8002488:	77fb      	strb	r3, [r7, #31]
				  message[0] = (line << 8) + col;
 800248a:	7d7b      	ldrb	r3, [r7, #21]
 800248c:	b29b      	uxth	r3, r3
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	b29a      	uxth	r2, r3
 8002492:	7d3b      	ldrb	r3, [r7, #20]
 8002494:	b29b      	uxth	r3, r3
 8002496:	4413      	add	r3, r2
 8002498:	b29b      	uxth	r3, r3
 800249a:	813b      	strh	r3, [r7, #8]
				  xQueueSend(queueSelHandle, &message, 0);
 800249c:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <fonction_select+0x114>)
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	f107 0108 	add.w	r1, r7, #8
 80024a4:	2300      	movs	r3, #0
 80024a6:	2200      	movs	r2, #0
 80024a8:	f009 fa22 	bl	800b8f0 <xQueueGenericSend>
 80024ac:	e017      	b.n	80024de <fonction_select+0xfa>
			  }
			  else if (chessboard[line][col].rayon == 12)
 80024ae:	7d7a      	ldrb	r2, [r7, #21]
 80024b0:	7d3b      	ldrb	r3, [r7, #20]
 80024b2:	4910      	ldr	r1, [pc, #64]	; (80024f4 <fonction_select+0x110>)
 80024b4:	00d2      	lsls	r2, r2, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	79db      	ldrb	r3, [r3, #7]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d10d      	bne.n	80024de <fonction_select+0xfa>
			  {
				  chessboard[line][col].rayon = 9;
 80024c2:	7d7a      	ldrb	r2, [r7, #21]
 80024c4:	7d3b      	ldrb	r3, [r7, #20]
 80024c6:	490b      	ldr	r1, [pc, #44]	; (80024f4 <fonction_select+0x110>)
 80024c8:	00d2      	lsls	r2, r2, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	440b      	add	r3, r1
 80024d0:	2209      	movs	r2, #9
 80024d2:	71da      	strb	r2, [r3, #7]
				  change = 1;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <fonction_select+0x118>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
				  selected = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	77fb      	strb	r3, [r7, #31]
			  }
		  }
		  taskEXIT_CRITICAL();
 80024de:	f00b f8d1 	bl	800d684 <vPortExitCritical>

	  }

    vTaskDelayUntil(&xLastWakeTime, (TickType_t) xFrequency);
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	69b9      	ldr	r1, [r7, #24]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f00a f86d 	bl	800c5c8 <vTaskDelayUntil>
	  BSP_TS_GetState(&TS_State);
 80024ee:	e78d      	b.n	800240c <fonction_select+0x28>
 80024f0:	2000038c 	.word	0x2000038c
 80024f4:	200080cc 	.word	0x200080cc
 80024f8:	2000807c 	.word	0x2000807c
 80024fc:	20000028 	.word	0x20000028

08002500 <fonction_calculPossibilites>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fonction_calculPossibilites */
void fonction_calculPossibilites(void const * argument)
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b0a9      	sub	sp, #164	; 0xa4
 8002504:	af02      	add	r7, sp, #8
 8002506:	6078      	str	r0, [r7, #4]
	uint8_t length, i;
  /* Infinite loop */
  for(;;)
  {
	  // Recuperation information selection
	  xQueueReceive(queueSelHandle, &message, portMAX_DELAY);
 8002508:	4b33      	ldr	r3, [pc, #204]	; (80025d8 <fonction_calculPossibilites+0xd8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	4618      	mov	r0, r3
 8002516:	f009 faf1 	bl	800bafc <xQueueReceive>
	  line = (uint8_t) (message[0] >> 8);
 800251a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	b29b      	uxth	r3, r3
 8002522:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	  col  = (uint8_t)  message[0];
 8002526:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800252a:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
	  taskENTER_CRITICAL();
 800252e:	f00b f875 	bl	800d61c <vPortEnterCritical>
	  color = chessboard[line][col].piece_color;
 8002532:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8002536:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800253a:	4928      	ldr	r1, [pc, #160]	; (80025dc <fonction_calculPossibilites+0xdc>)
 800253c:	00d2      	lsls	r2, r2, #3
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	440b      	add	r3, r1
 8002544:	799b      	ldrb	r3, [r3, #6]
 8002546:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	  taskEXIT_CRITICAL();
 800254a:	f00b f89b 	bl	800d684 <vPortExitCritical>

	  // Calcul des possibilites
	  length = calculPossibilitesRec(line, col, color, possibilites, 0, 0);
 800254e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002552:	b298      	uxth	r0, r3
 8002554:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8002558:	b299      	uxth	r1, r3
 800255a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800255e:	b2da      	uxtb	r2, r3
 8002560:	f107 030c 	add.w	r3, r7, #12
 8002564:	2400      	movs	r4, #0
 8002566:	9401      	str	r4, [sp, #4]
 8002568:	2400      	movs	r4, #0
 800256a:	9400      	str	r4, [sp, #0]
 800256c:	f7fe faf2 	bl	8000b54 <calculPossibilitesRec>
 8002570:	4603      	mov	r3, r0
 8002572:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

	  // Modification de l'echiquier avec cases possibles
	  taskENTER_CRITICAL();
 8002576:	f00b f851 	bl	800d61c <vPortEnterCritical>
	  for(i = 0; i < length; i++)
 800257a:	2300      	movs	r3, #0
 800257c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002580:	e01d      	b.n	80025be <fonction_calculPossibilites+0xbe>
	  {
		  chessboard[possibilites[i].ligne][possibilites[i].colonne].isPossible = 1;
 8002582:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800258c:	4413      	add	r3, r2
 800258e:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8002592:	4618      	mov	r0, r3
 8002594:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800259e:	4413      	add	r3, r2
 80025a0:	f833 3c8a 	ldrh.w	r3, [r3, #-138]
 80025a4:	4619      	mov	r1, r3
 80025a6:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <fonction_calculPossibilites+0xdc>)
 80025a8:	00c3      	lsls	r3, r0, #3
 80025aa:	440b      	add	r3, r1
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4413      	add	r3, r2
 80025b0:	2201      	movs	r2, #1
 80025b2:	711a      	strb	r2, [r3, #4]
	  for(i = 0; i < length; i++)
 80025b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80025b8:	3301      	adds	r3, #1
 80025ba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80025be:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 80025c2:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d3db      	bcc.n	8002582 <fonction_calculPossibilites+0x82>
	  }
	  taskEXIT_CRITICAL();
 80025ca:	f00b f85b 	bl	800d684 <vPortExitCritical>
      osDelay(1);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f008 ff1d 	bl	800b40e <osDelay>
	  xQueueReceive(queueSelHandle, &message, portMAX_DELAY);
 80025d4:	e798      	b.n	8002508 <fonction_calculPossibilites+0x8>
 80025d6:	bf00      	nop
 80025d8:	2000807c 	.word	0x2000807c
 80025dc:	200080cc 	.word	0x200080cc

080025e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025f2:	f002 fae7 	bl	8004bc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40001000 	.word	0x40001000

08002604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002608:	b672      	cpsid	i
}
 800260a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800260c:	e7fe      	b.n	800260c <Error_Handler+0x8>
	...

08002610 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	; 0x30
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a51      	ldr	r2, [pc, #324]	; (8002760 <I2Cx_MspInit+0x150>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d14d      	bne.n	80026bc <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002620:	4b50      	ldr	r3, [pc, #320]	; (8002764 <I2Cx_MspInit+0x154>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	4a4f      	ldr	r2, [pc, #316]	; (8002764 <I2Cx_MspInit+0x154>)
 8002626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262a:	6313      	str	r3, [r2, #48]	; 0x30
 800262c:	4b4d      	ldr	r3, [pc, #308]	; (8002764 <I2Cx_MspInit+0x154>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800263c:	2312      	movs	r3, #18
 800263e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002644:	2302      	movs	r3, #2
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002648:	2304      	movs	r3, #4
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4619      	mov	r1, r3
 8002652:	4845      	ldr	r0, [pc, #276]	; (8002768 <I2Cx_MspInit+0x158>)
 8002654:	f003 fe0a 	bl	800626c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800265c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800265e:	f107 031c 	add.w	r3, r7, #28
 8002662:	4619      	mov	r1, r3
 8002664:	4840      	ldr	r0, [pc, #256]	; (8002768 <I2Cx_MspInit+0x158>)
 8002666:	f003 fe01 	bl	800626c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800266a:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <I2Cx_MspInit+0x154>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a3d      	ldr	r2, [pc, #244]	; (8002764 <I2Cx_MspInit+0x154>)
 8002670:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <I2Cx_MspInit+0x154>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002682:	4b38      	ldr	r3, [pc, #224]	; (8002764 <I2Cx_MspInit+0x154>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	4a37      	ldr	r2, [pc, #220]	; (8002764 <I2Cx_MspInit+0x154>)
 8002688:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800268c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800268e:	4b35      	ldr	r3, [pc, #212]	; (8002764 <I2Cx_MspInit+0x154>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	4a34      	ldr	r2, [pc, #208]	; (8002764 <I2Cx_MspInit+0x154>)
 8002694:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002698:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	210f      	movs	r1, #15
 800269e:	2048      	movs	r0, #72	; 0x48
 80026a0:	f002 feee 	bl	8005480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80026a4:	2048      	movs	r0, #72	; 0x48
 80026a6:	f002 ff07 	bl	80054b8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	210f      	movs	r1, #15
 80026ae:	2049      	movs	r0, #73	; 0x49
 80026b0:	f002 fee6 	bl	8005480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80026b4:	2049      	movs	r0, #73	; 0x49
 80026b6:	f002 feff 	bl	80054b8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80026ba:	e04d      	b.n	8002758 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80026bc:	4b29      	ldr	r3, [pc, #164]	; (8002764 <I2Cx_MspInit+0x154>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	4a28      	ldr	r2, [pc, #160]	; (8002764 <I2Cx_MspInit+0x154>)
 80026c2:	f043 0302 	orr.w	r3, r3, #2
 80026c6:	6313      	str	r3, [r2, #48]	; 0x30
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <I2Cx_MspInit+0x154>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80026d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026d8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80026da:	2312      	movs	r3, #18
 80026dc:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80026e2:	2302      	movs	r3, #2
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80026e6:	2304      	movs	r3, #4
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80026ea:	f107 031c 	add.w	r3, r7, #28
 80026ee:	4619      	mov	r1, r3
 80026f0:	481e      	ldr	r0, [pc, #120]	; (800276c <I2Cx_MspInit+0x15c>)
 80026f2:	f003 fdbb 	bl	800626c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80026f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80026fc:	f107 031c 	add.w	r3, r7, #28
 8002700:	4619      	mov	r1, r3
 8002702:	481a      	ldr	r0, [pc, #104]	; (800276c <I2Cx_MspInit+0x15c>)
 8002704:	f003 fdb2 	bl	800626c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <I2Cx_MspInit+0x154>)
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	4a15      	ldr	r2, [pc, #84]	; (8002764 <I2Cx_MspInit+0x154>)
 800270e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002712:	6413      	str	r3, [r2, #64]	; 0x40
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <I2Cx_MspInit+0x154>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <I2Cx_MspInit+0x154>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	4a0f      	ldr	r2, [pc, #60]	; (8002764 <I2Cx_MspInit+0x154>)
 8002726:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800272a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800272c:	4b0d      	ldr	r3, [pc, #52]	; (8002764 <I2Cx_MspInit+0x154>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <I2Cx_MspInit+0x154>)
 8002732:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002736:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002738:	2200      	movs	r2, #0
 800273a:	210f      	movs	r1, #15
 800273c:	201f      	movs	r0, #31
 800273e:	f002 fe9f 	bl	8005480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002742:	201f      	movs	r0, #31
 8002744:	f002 feb8 	bl	80054b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002748:	2200      	movs	r2, #0
 800274a:	210f      	movs	r1, #15
 800274c:	2020      	movs	r0, #32
 800274e:	f002 fe97 	bl	8005480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002752:	2020      	movs	r0, #32
 8002754:	f002 feb0 	bl	80054b8 <HAL_NVIC_EnableIRQ>
}
 8002758:	bf00      	nop
 800275a:	3730      	adds	r7, #48	; 0x30
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200003b8 	.word	0x200003b8
 8002764:	40023800 	.word	0x40023800
 8002768:	40021c00 	.word	0x40021c00
 800276c:	40020400 	.word	0x40020400

08002770 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f004 fb69 	bl	8006e50 <HAL_I2C_GetState>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d125      	bne.n	80027d0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <I2Cx_Init+0x68>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d103      	bne.n	8002794 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a13      	ldr	r2, [pc, #76]	; (80027dc <I2Cx_Init+0x6c>)
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e002      	b.n	800279a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <I2Cx_Init+0x70>)
 8002798:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <I2Cx_Init+0x74>)
 800279e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ff23 	bl	8002610 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f004 f852 	bl	8006874 <HAL_I2C_Init>
  }
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200003b8 	.word	0x200003b8
 80027dc:	40005c00 	.word	0x40005c00
 80027e0:	40005400 	.word	0x40005400
 80027e4:	40912732 	.word	0x40912732

080027e8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af04      	add	r7, sp, #16
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	72fb      	strb	r3, [r7, #11]
 80027fa:	460b      	mov	r3, r1
 80027fc:	813b      	strh	r3, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002806:	7afb      	ldrb	r3, [r7, #11]
 8002808:	b299      	uxth	r1, r3
 800280a:	88f8      	ldrh	r0, [r7, #6]
 800280c:	893a      	ldrh	r2, [r7, #8]
 800280e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002812:	9302      	str	r3, [sp, #8]
 8002814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	4603      	mov	r3, r0
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f004 f9fc 	bl	8006c1c <HAL_I2C_Mem_Read>
 8002824:	4603      	mov	r3, r0
 8002826:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800282e:	7afb      	ldrb	r3, [r7, #11]
 8002830:	4619      	mov	r1, r3
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f832 	bl	800289c <I2Cx_Error>
  }
  return status;    
 8002838:	7dfb      	ldrb	r3, [r7, #23]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b08a      	sub	sp, #40	; 0x28
 8002846:	af04      	add	r7, sp, #16
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	4608      	mov	r0, r1
 800284c:	4611      	mov	r1, r2
 800284e:	461a      	mov	r2, r3
 8002850:	4603      	mov	r3, r0
 8002852:	72fb      	strb	r3, [r7, #11]
 8002854:	460b      	mov	r3, r1
 8002856:	813b      	strh	r3, [r7, #8]
 8002858:	4613      	mov	r3, r2
 800285a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002860:	7afb      	ldrb	r3, [r7, #11]
 8002862:	b299      	uxth	r1, r3
 8002864:	88f8      	ldrh	r0, [r7, #6]
 8002866:	893a      	ldrh	r2, [r7, #8]
 8002868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800286c:	9302      	str	r3, [sp, #8]
 800286e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	4603      	mov	r3, r0
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f004 f8bb 	bl	80069f4 <HAL_I2C_Mem_Write>
 800287e:	4603      	mov	r3, r0
 8002880:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	4619      	mov	r1, r3
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f805 	bl	800289c <I2Cx_Error>
  }
  return status;
 8002892:	7dfb      	ldrb	r3, [r7, #23]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f004 f873 	bl	8006994 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ff5e 	bl	8002770 <I2Cx_Init>
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <TS_IO_Init+0x10>)
 80028c2:	f7ff ff55 	bl	8002770 <I2Cx_Init>
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	200003b8 	.word	0x200003b8

080028d0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
 80028da:	460b      	mov	r3, r1
 80028dc:	71bb      	strb	r3, [r7, #6]
 80028de:	4613      	mov	r3, r2
 80028e0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80028e2:	79bb      	ldrb	r3, [r7, #6]
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	79f9      	ldrb	r1, [r7, #7]
 80028e8:	2301      	movs	r3, #1
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	1d7b      	adds	r3, r7, #5
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2301      	movs	r3, #1
 80028f2:	4803      	ldr	r0, [pc, #12]	; (8002900 <TS_IO_Write+0x30>)
 80028f4:	f7ff ffa5 	bl	8002842 <I2Cx_WriteMultiple>
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	200003b8 	.word	0x200003b8

08002904 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af02      	add	r7, sp, #8
 800290a:	4603      	mov	r3, r0
 800290c:	460a      	mov	r2, r1
 800290e:	71fb      	strb	r3, [r7, #7]
 8002910:	4613      	mov	r3, r2
 8002912:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002918:	79bb      	ldrb	r3, [r7, #6]
 800291a:	b29a      	uxth	r2, r3
 800291c:	79f9      	ldrb	r1, [r7, #7]
 800291e:	2301      	movs	r3, #1
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	f107 030f 	add.w	r3, r7, #15
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2301      	movs	r3, #1
 800292a:	4804      	ldr	r0, [pc, #16]	; (800293c <TS_IO_Read+0x38>)
 800292c:	f7ff ff5c 	bl	80027e8 <I2Cx_ReadMultiple>

  return read_value;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200003b8 	.word	0x200003b8

08002940 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f002 f95b 	bl	8004c04 <HAL_Delay>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800295c:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <BSP_LCD_Init+0xcc>)
 800295e:	2228      	movs	r2, #40	; 0x28
 8002960:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002962:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <BSP_LCD_Init+0xcc>)
 8002964:	2209      	movs	r2, #9
 8002966:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002968:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <BSP_LCD_Init+0xcc>)
 800296a:	2235      	movs	r2, #53	; 0x35
 800296c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <BSP_LCD_Init+0xcc>)
 8002970:	220b      	movs	r2, #11
 8002972:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002974:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <BSP_LCD_Init+0xcc>)
 8002976:	f240 121b 	movw	r2, #283	; 0x11b
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800297c:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <BSP_LCD_Init+0xcc>)
 800297e:	f240 2215 	movw	r2, #533	; 0x215
 8002982:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <BSP_LCD_Init+0xcc>)
 8002986:	f240 121d 	movw	r2, #285	; 0x11d
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800298c:	4b25      	ldr	r3, [pc, #148]	; (8002a24 <BSP_LCD_Init+0xcc>)
 800298e:	f240 2235 	movw	r2, #565	; 0x235
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002994:	2100      	movs	r1, #0
 8002996:	4823      	ldr	r0, [pc, #140]	; (8002a24 <BSP_LCD_Init+0xcc>)
 8002998:	f000 fd34 	bl	8003404 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <BSP_LCD_Init+0xcc>)
 800299e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80029a2:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80029a4:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <BSP_LCD_Init+0xcc>)
 80029a6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80029aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <BSP_LCD_Init+0xcc>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <BSP_LCD_Init+0xcc>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <BSP_LCD_Init+0xcc>)
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80029c4:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <BSP_LCD_Init+0xcc>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80029ca:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <BSP_LCD_Init+0xcc>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <BSP_LCD_Init+0xcc>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <BSP_LCD_Init+0xcc>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <BSP_LCD_Init+0xcc>)
 80029de:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <BSP_LCD_Init+0xd0>)
 80029e0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80029e2:	4810      	ldr	r0, [pc, #64]	; (8002a24 <BSP_LCD_Init+0xcc>)
 80029e4:	f004 ff50 	bl	8007888 <HAL_LTDC_GetState>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d103      	bne.n	80029f6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80029ee:	2100      	movs	r1, #0
 80029f0:	480c      	ldr	r0, [pc, #48]	; (8002a24 <BSP_LCD_Init+0xcc>)
 80029f2:	f000 fc2d 	bl	8003250 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80029f6:	480b      	ldr	r0, [pc, #44]	; (8002a24 <BSP_LCD_Init+0xcc>)
 80029f8:	f004 fd76 	bl	80074e8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80029fc:	2201      	movs	r2, #1
 80029fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a02:	480a      	ldr	r0, [pc, #40]	; (8002a2c <BSP_LCD_Init+0xd4>)
 8002a04:	f003 feea 	bl	80067dc <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002a08:	2201      	movs	r2, #1
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	4808      	ldr	r0, [pc, #32]	; (8002a30 <BSP_LCD_Init+0xd8>)
 8002a0e:	f003 fee5 	bl	80067dc <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002a12:	f000 fda3 	bl	800355c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002a16:	4807      	ldr	r0, [pc, #28]	; (8002a34 <BSP_LCD_Init+0xdc>)
 8002a18:	f000 f8d8 	bl	8002bcc <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200086f4 	.word	0x200086f4
 8002a28:	40016800 	.word	0x40016800
 8002a2c:	40022000 	.word	0x40022000
 8002a30:	40022800 	.word	0x40022800
 8002a34:	2000002c 	.word	0x2000002c

08002a38 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <BSP_LCD_GetXSize+0x20>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a06      	ldr	r2, [pc, #24]	; (8002a5c <BSP_LCD_GetXSize+0x24>)
 8002a42:	2134      	movs	r1, #52	; 0x34
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3360      	adds	r3, #96	; 0x60
 8002a4c:	681b      	ldr	r3, [r3, #0]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	20000444 	.word	0x20000444
 8002a5c:	200086f4 	.word	0x200086f4

08002a60 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <BSP_LCD_GetYSize+0x20>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <BSP_LCD_GetYSize+0x24>)
 8002a6a:	2134      	movs	r1, #52	; 0x34
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	3364      	adds	r3, #100	; 0x64
 8002a74:	681b      	ldr	r3, [r3, #0]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	20000444 	.word	0x20000444
 8002a84:	200086f4 	.word	0x200086f4

08002a88 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b090      	sub	sp, #64	; 0x40
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002a98:	f7ff ffce 	bl	8002a38 <BSP_LCD_GetXSize>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002aa4:	f7ff ffdc 	bl	8002a60 <BSP_LCD_GetYSize>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002ab4:	23ff      	movs	r3, #255	; 0xff
 8002ab6:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002ace:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002ad4:	2307      	movs	r3, #7
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002ad8:	f7ff ffae 	bl	8002a38 <BSP_LCD_GetXSize>
 8002adc:	4603      	mov	r3, r0
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002ae0:	f7ff ffbe 	bl	8002a60 <BSP_LCD_GetYSize>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002ae8:	88fa      	ldrh	r2, [r7, #6]
 8002aea:	f107 030c 	add.w	r3, r7, #12
 8002aee:	4619      	mov	r1, r3
 8002af0:	4812      	ldr	r0, [pc, #72]	; (8002b3c <BSP_LCD_LayerDefaultInit+0xb4>)
 8002af2:	f004 fe8b 	bl	800780c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	4911      	ldr	r1, [pc, #68]	; (8002b40 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3304      	adds	r3, #4
 8002b06:	f04f 32ff 	mov.w	r2, #4294967295
 8002b0a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002b0c:	88fa      	ldrh	r2, [r7, #6]
 8002b0e:	490c      	ldr	r1, [pc, #48]	; (8002b40 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002b1e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002b20:	88fa      	ldrh	r2, [r7, #6]
 8002b22:	4907      	ldr	r1, [pc, #28]	; (8002b40 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002b32:	601a      	str	r2, [r3, #0]
}
 8002b34:	bf00      	nop
 8002b36:	3740      	adds	r7, #64	; 0x40
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	200086f4 	.word	0x200086f4
 8002b40:	20000448 	.word	0x20000448
 8002b44:	2000002c 	.word	0x2000002c

08002b48 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <BSP_LCD_SelectLayer+0x1c>)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6013      	str	r3, [r2, #0]
} 
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000444 	.word	0x20000444

08002b68 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <BSP_LCD_SetTextColor+0x28>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4907      	ldr	r1, [pc, #28]	; (8002b94 <BSP_LCD_SetTextColor+0x2c>)
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	601a      	str	r2, [r3, #0]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	20000444 	.word	0x20000444
 8002b94:	20000448 	.word	0x20000448

08002b98 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <BSP_LCD_SetBackColor+0x2c>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4908      	ldr	r1, [pc, #32]	; (8002bc8 <BSP_LCD_SetBackColor+0x30>)
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000444 	.word	0x20000444
 8002bc8:	20000448 	.word	0x20000448

08002bcc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <BSP_LCD_SetFont+0x2c>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4908      	ldr	r1, [pc, #32]	; (8002bfc <BSP_LCD_SetFont+0x30>)
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	3308      	adds	r3, #8
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000444 	.word	0x20000444
 8002bfc:	20000448 	.word	0x20000448

08002c00 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <BSP_LCD_Clear+0x48>)
 8002c0a:	681c      	ldr	r4, [r3, #0]
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <BSP_LCD_Clear+0x48>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0e      	ldr	r2, [pc, #56]	; (8002c4c <BSP_LCD_Clear+0x4c>)
 8002c12:	2134      	movs	r1, #52	; 0x34
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	335c      	adds	r3, #92	; 0x5c
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	461e      	mov	r6, r3
 8002c20:	f7ff ff0a 	bl	8002a38 <BSP_LCD_GetXSize>
 8002c24:	4605      	mov	r5, r0
 8002c26:	f7ff ff1b 	bl	8002a60 <BSP_LCD_GetYSize>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	9301      	str	r3, [sp, #4]
 8002c30:	2300      	movs	r3, #0
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	462a      	mov	r2, r5
 8002c38:	4631      	mov	r1, r6
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f000 fbfe 	bl	800343c <LL_FillBuffer>
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c48:	20000444 	.word	0x20000444
 8002c4c:	200086f4 	.word	0x200086f4

08002c50 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	4603      	mov	r3, r0
 8002c58:	80fb      	strh	r3, [r7, #6]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	80bb      	strh	r3, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <BSP_LCD_DrawHLine+0xb0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a26      	ldr	r2, [pc, #152]	; (8002d04 <BSP_LCD_DrawHLine+0xb4>)
 8002c6c:	2134      	movs	r1, #52	; 0x34
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	3348      	adds	r3, #72	; 0x48
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d114      	bne.n	8002ca6 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002c7c:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <BSP_LCD_DrawHLine+0xb0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a20      	ldr	r2, [pc, #128]	; (8002d04 <BSP_LCD_DrawHLine+0xb4>)
 8002c82:	2134      	movs	r1, #52	; 0x34
 8002c84:	fb01 f303 	mul.w	r3, r1, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	335c      	adds	r3, #92	; 0x5c
 8002c8c:	681c      	ldr	r4, [r3, #0]
 8002c8e:	f7ff fed3 	bl	8002a38 <BSP_LCD_GetXSize>
 8002c92:	4602      	mov	r2, r0
 8002c94:	88bb      	ldrh	r3, [r7, #4]
 8002c96:	fb03 f202 	mul.w	r2, r3, r2
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	4423      	add	r3, r4
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e013      	b.n	8002cce <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <BSP_LCD_DrawHLine+0xb0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <BSP_LCD_DrawHLine+0xb4>)
 8002cac:	2134      	movs	r1, #52	; 0x34
 8002cae:	fb01 f303 	mul.w	r3, r1, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	335c      	adds	r3, #92	; 0x5c
 8002cb6:	681c      	ldr	r4, [r3, #0]
 8002cb8:	f7ff febe 	bl	8002a38 <BSP_LCD_GetXSize>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	88bb      	ldrh	r3, [r7, #4]
 8002cc0:	fb03 f202 	mul.w	r2, r3, r2
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4423      	add	r3, r4
 8002ccc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <BSP_LCD_DrawHLine+0xb0>)
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	68f9      	ldr	r1, [r7, #12]
 8002cd4:	887c      	ldrh	r4, [r7, #2]
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <BSP_LCD_DrawHLine+0xb0>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	4d0b      	ldr	r5, [pc, #44]	; (8002d08 <BSP_LCD_DrawHLine+0xb8>)
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	442b      	add	r3, r5
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	2300      	movs	r3, #0
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2301      	movs	r3, #1
 8002cf0:	4622      	mov	r2, r4
 8002cf2:	f000 fba3 	bl	800343c <LL_FillBuffer>
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000444 	.word	0x20000444
 8002d04:	200086f4 	.word	0x200086f4
 8002d08:	20000448 	.word	0x20000448

08002d0c <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	80fb      	strh	r3, [r7, #6]
 8002d16:	460b      	mov	r3, r1
 8002d18:	80bb      	strh	r3, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	f1c3 0303 	rsb	r3, r3, #3
 8002d26:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002d30:	e0c7      	b.n	8002ec2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	4413      	add	r3, r2
 8002d3a:	b298      	uxth	r0, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	88ba      	ldrh	r2, [r7, #4]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b299      	uxth	r1, r3
 8002d46:	4b64      	ldr	r3, [pc, #400]	; (8002ed8 <BSP_LCD_DrawCircle+0x1cc>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4c64      	ldr	r4, [pc, #400]	; (8002edc <BSP_LCD_DrawCircle+0x1d0>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4423      	add	r3, r4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f000 f8c1 	bl	8002ee0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	88fa      	ldrh	r2, [r7, #6]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	b298      	uxth	r0, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	88ba      	ldrh	r2, [r7, #4]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	b299      	uxth	r1, r3
 8002d72:	4b59      	ldr	r3, [pc, #356]	; (8002ed8 <BSP_LCD_DrawCircle+0x1cc>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4c59      	ldr	r4, [pc, #356]	; (8002edc <BSP_LCD_DrawCircle+0x1d0>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4423      	add	r3, r4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	f000 f8ab 	bl	8002ee0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	4413      	add	r3, r2
 8002d92:	b298      	uxth	r0, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	88ba      	ldrh	r2, [r7, #4]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	b299      	uxth	r1, r3
 8002d9e:	4b4e      	ldr	r3, [pc, #312]	; (8002ed8 <BSP_LCD_DrawCircle+0x1cc>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4c4e      	ldr	r4, [pc, #312]	; (8002edc <BSP_LCD_DrawCircle+0x1d0>)
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4423      	add	r3, r4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	f000 f895 	bl	8002ee0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	88fa      	ldrh	r2, [r7, #6]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	b298      	uxth	r0, r3
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	88ba      	ldrh	r2, [r7, #4]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	b299      	uxth	r1, r3
 8002dca:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <BSP_LCD_DrawCircle+0x1cc>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4c43      	ldr	r4, [pc, #268]	; (8002edc <BSP_LCD_DrawCircle+0x1d0>)
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4423      	add	r3, r4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f000 f87f 	bl	8002ee0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	4413      	add	r3, r2
 8002dea:	b298      	uxth	r0, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	88bb      	ldrh	r3, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	b299      	uxth	r1, r3
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <BSP_LCD_DrawCircle+0x1cc>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4c38      	ldr	r4, [pc, #224]	; (8002edc <BSP_LCD_DrawCircle+0x1d0>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4423      	add	r3, r4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f000 f869 	bl	8002ee0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	88fa      	ldrh	r2, [r7, #6]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	b298      	uxth	r0, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	88bb      	ldrh	r3, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	b299      	uxth	r1, r3
 8002e22:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <BSP_LCD_DrawCircle+0x1cc>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4c2d      	ldr	r4, [pc, #180]	; (8002edc <BSP_LCD_DrawCircle+0x1d0>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4423      	add	r3, r4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	f000 f853 	bl	8002ee0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	4413      	add	r3, r2
 8002e42:	b298      	uxth	r0, r3
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	88bb      	ldrh	r3, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <BSP_LCD_DrawCircle+0x1cc>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4c22      	ldr	r4, [pc, #136]	; (8002edc <BSP_LCD_DrawCircle+0x1d0>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4423      	add	r3, r4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	f000 f83d 	bl	8002ee0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	88fa      	ldrh	r2, [r7, #6]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	b298      	uxth	r0, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	88bb      	ldrh	r3, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	b299      	uxth	r1, r3
 8002e7a:	4b17      	ldr	r3, [pc, #92]	; (8002ed8 <BSP_LCD_DrawCircle+0x1cc>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4c17      	ldr	r4, [pc, #92]	; (8002edc <BSP_LCD_DrawCircle+0x1d0>)
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4423      	add	r3, r4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f000 f827 	bl	8002ee0 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	da06      	bge.n	8002ea6 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	009a      	lsls	r2, r3, #2
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3306      	adds	r3, #6
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	e00a      	b.n	8002ebc <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	009a      	lsls	r2, r3, #2
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	330a      	adds	r3, #10
 8002eb4:	617b      	str	r3, [r7, #20]
      current_y--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	f67f af33 	bls.w	8002d32 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000444 	.word	0x20000444
 8002edc:	20000448 	.word	0x20000448

08002ee0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002ee0:	b5b0      	push	{r4, r5, r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	603a      	str	r2, [r7, #0]
 8002eea:	80fb      	strh	r3, [r7, #6]
 8002eec:	460b      	mov	r3, r1
 8002eee:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <BSP_LCD_DrawPixel+0x88>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1d      	ldr	r2, [pc, #116]	; (8002f6c <BSP_LCD_DrawPixel+0x8c>)
 8002ef6:	2134      	movs	r1, #52	; 0x34
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3348      	adds	r3, #72	; 0x48
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d116      	bne.n	8002f34 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002f06:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <BSP_LCD_DrawPixel+0x88>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <BSP_LCD_DrawPixel+0x8c>)
 8002f0c:	2134      	movs	r1, #52	; 0x34
 8002f0e:	fb01 f303 	mul.w	r3, r1, r3
 8002f12:	4413      	add	r3, r2
 8002f14:	335c      	adds	r3, #92	; 0x5c
 8002f16:	681c      	ldr	r4, [r3, #0]
 8002f18:	88bd      	ldrh	r5, [r7, #4]
 8002f1a:	f7ff fd8d 	bl	8002a38 <BSP_LCD_GetXSize>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	fb03 f205 	mul.w	r2, r3, r5
 8002f24:	88fb      	ldrh	r3, [r7, #6]
 8002f26:	4413      	add	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4423      	add	r3, r4
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002f32:	e015      	b.n	8002f60 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <BSP_LCD_DrawPixel+0x88>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0c      	ldr	r2, [pc, #48]	; (8002f6c <BSP_LCD_DrawPixel+0x8c>)
 8002f3a:	2134      	movs	r1, #52	; 0x34
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	335c      	adds	r3, #92	; 0x5c
 8002f44:	681c      	ldr	r4, [r3, #0]
 8002f46:	88bd      	ldrh	r5, [r7, #4]
 8002f48:	f7ff fd76 	bl	8002a38 <BSP_LCD_GetXSize>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	fb03 f205 	mul.w	r2, r3, r5
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4423      	add	r3, r4
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6013      	str	r3, [r2, #0]
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bdb0      	pop	{r4, r5, r7, pc}
 8002f68:	20000444 	.word	0x20000444
 8002f6c:	200086f4 	.word	0x200086f4

08002f70 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b08b      	sub	sp, #44	; 0x2c
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	330a      	adds	r3, #10
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	461a      	mov	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	330b      	adds	r3, #11
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	441a      	add	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	330c      	adds	r3, #12
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	041b      	lsls	r3, r3, #16
 8002faa:	441a      	add	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	330d      	adds	r3, #13
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	4413      	add	r3, r2
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3312      	adds	r3, #18
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3313      	adds	r3, #19
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	441a      	add	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3314      	adds	r3, #20
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	041b      	lsls	r3, r3, #16
 8002fd2:	441a      	add	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3315      	adds	r3, #21
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	061b      	lsls	r3, r3, #24
 8002fdc:	4413      	add	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3316      	adds	r3, #22
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3317      	adds	r3, #23
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	441a      	add	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3318      	adds	r3, #24
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	041b      	lsls	r3, r3, #16
 8002ffa:	441a      	add	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3319      	adds	r3, #25
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	061b      	lsls	r3, r3, #24
 8003004:	4413      	add	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	331c      	adds	r3, #28
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	331d      	adds	r3, #29
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	4413      	add	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 800301c:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <BSP_LCD_DrawBitmap+0x15c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a2b      	ldr	r2, [pc, #172]	; (80030d0 <BSP_LCD_DrawBitmap+0x160>)
 8003022:	2134      	movs	r1, #52	; 0x34
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	335c      	adds	r3, #92	; 0x5c
 800302c:	681c      	ldr	r4, [r3, #0]
 800302e:	f7ff fd03 	bl	8002a38 <BSP_LCD_GetXSize>
 8003032:	4602      	mov	r2, r0
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	fb03 f202 	mul.w	r2, r3, r2
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4423      	add	r3, r4
 8003042:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	3b20      	subs	r3, #32
 8003048:	2b07      	cmp	r3, #7
 800304a:	d802      	bhi.n	8003052 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	e008      	b.n	8003064 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	3b10      	subs	r3, #16
 8003056:	2b07      	cmp	r3, #7
 8003058:	d802      	bhi.n	8003060 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 800305a:	2302      	movs	r3, #2
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	e001      	b.n	8003064 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003060:	2301      	movs	r3, #1
 8003062:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	3b01      	subs	r3, #1
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	08d2      	lsrs	r2, r2, #3
 8003072:	fb02 f203 	mul.w	r2, r2, r3
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	4413      	add	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
 8003084:	e018      	b.n	80030b8 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003086:	6a39      	ldr	r1, [r7, #32]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fa21 	bl	80034d4 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003092:	f7ff fcd1 	bl	8002a38 <BSP_LCD_GetXSize>
 8003096:	4603      	mov	r3, r0
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	6a3a      	ldr	r2, [r7, #32]
 800309c:	4413      	add	r3, r2
 800309e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	08db      	lsrs	r3, r3, #3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	425b      	negs	r3, r3
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	3301      	adds	r3, #1
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
 80030b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d3e2      	bcc.n	8003086 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	372c      	adds	r7, #44	; 0x2c
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd90      	pop	{r4, r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000444 	.word	0x20000444
 80030d0:	200086f4 	.word	0x200086f4

080030d4 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	80fb      	strh	r3, [r7, #6]
 80030de:	460b      	mov	r3, r1
 80030e0:	80bb      	strh	r3, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	f1c3 0303 	rsb	r3, r3, #3
 80030ee:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80030f4:	887b      	ldrh	r3, [r7, #2]
 80030f6:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80030f8:	4b44      	ldr	r3, [pc, #272]	; (800320c <BSP_LCD_FillCircle+0x138>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4944      	ldr	r1, [pc, #272]	; (8003210 <BSP_LCD_FillCircle+0x13c>)
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fd2c 	bl	8002b68 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003110:	e061      	b.n	80031d6 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d021      	beq.n	800315c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	b29b      	uxth	r3, r3
 800311c:	88fa      	ldrh	r2, [r7, #6]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	b298      	uxth	r0, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	b29a      	uxth	r2, r3
 8003126:	88bb      	ldrh	r3, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	b299      	uxth	r1, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	b29b      	uxth	r3, r3
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	b29b      	uxth	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	f7ff fd8b 	bl	8002c50 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	b29b      	uxth	r3, r3
 800313e:	88fa      	ldrh	r2, [r7, #6]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	b298      	uxth	r0, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	b29b      	uxth	r3, r3
 8003148:	88ba      	ldrh	r2, [r7, #4]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	b299      	uxth	r1, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	b29b      	uxth	r3, r3
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	f7ff fd7a 	bl	8002c50 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d021      	beq.n	80031a6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	b29b      	uxth	r3, r3
 8003166:	88fa      	ldrh	r2, [r7, #6]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	b298      	uxth	r0, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	b29b      	uxth	r3, r3
 8003170:	88ba      	ldrh	r2, [r7, #4]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	b299      	uxth	r1, r3
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	b29b      	uxth	r3, r3
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	b29b      	uxth	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	f7ff fd66 	bl	8002c50 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	b29b      	uxth	r3, r3
 8003188:	88fa      	ldrh	r2, [r7, #6]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	b298      	uxth	r0, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	b29a      	uxth	r2, r3
 8003192:	88bb      	ldrh	r3, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	b299      	uxth	r1, r3
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	b29b      	uxth	r3, r3
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	b29b      	uxth	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	f7ff fd55 	bl	8002c50 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da06      	bge.n	80031ba <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	009a      	lsls	r2, r3, #2
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	4413      	add	r3, r2
 80031b4:	3306      	adds	r3, #6
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	e00a      	b.n	80031d0 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	009a      	lsls	r2, r3, #2
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	4413      	add	r3, r2
 80031c6:	330a      	adds	r3, #10
 80031c8:	617b      	str	r3, [r7, #20]
      current_y--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	3301      	adds	r3, #1
 80031d4:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d999      	bls.n	8003112 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80031de:	4b0b      	ldr	r3, [pc, #44]	; (800320c <BSP_LCD_FillCircle+0x138>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	490b      	ldr	r1, [pc, #44]	; (8003210 <BSP_LCD_FillCircle+0x13c>)
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fcb9 	bl	8002b68 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	88b9      	ldrh	r1, [r7, #4]
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fd85 	bl	8002d0c <BSP_LCD_DrawCircle>
}
 8003202:	bf00      	nop
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000444 	.word	0x20000444
 8003210:	20000448 	.word	0x20000448

08003214 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <BSP_LCD_DisplayOn+0x30>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <BSP_LCD_DisplayOn+0x30>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003228:	2201      	movs	r2, #1
 800322a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800322e:	4806      	ldr	r0, [pc, #24]	; (8003248 <BSP_LCD_DisplayOn+0x34>)
 8003230:	f003 fad4 	bl	80067dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003234:	2201      	movs	r2, #1
 8003236:	2108      	movs	r1, #8
 8003238:	4804      	ldr	r0, [pc, #16]	; (800324c <BSP_LCD_DisplayOn+0x38>)
 800323a:	f003 facf 	bl	80067dc <HAL_GPIO_WritePin>
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	200086f4 	.word	0x200086f4
 8003248:	40022000 	.word	0x40022000
 800324c:	40022800 	.word	0x40022800

08003250 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b090      	sub	sp, #64	; 0x40
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800325a:	4b64      	ldr	r3, [pc, #400]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	4a63      	ldr	r2, [pc, #396]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 8003260:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003264:	6453      	str	r3, [r2, #68]	; 0x44
 8003266:	4b61      	ldr	r3, [pc, #388]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003272:	4b5e      	ldr	r3, [pc, #376]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a5d      	ldr	r2, [pc, #372]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 8003278:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b5b      	ldr	r3, [pc, #364]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800328a:	4b58      	ldr	r3, [pc, #352]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a57      	ldr	r2, [pc, #348]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 8003290:	f043 0310 	orr.w	r3, r3, #16
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b55      	ldr	r3, [pc, #340]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	623b      	str	r3, [r7, #32]
 80032a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032a2:	4b52      	ldr	r3, [pc, #328]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	4a51      	ldr	r2, [pc, #324]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 80032a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ac:	6313      	str	r3, [r2, #48]	; 0x30
 80032ae:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80032ba:	4b4c      	ldr	r3, [pc, #304]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	4a4b      	ldr	r2, [pc, #300]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c4:	6313      	str	r3, [r2, #48]	; 0x30
 80032c6:	4b49      	ldr	r3, [pc, #292]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	61bb      	str	r3, [r7, #24]
 80032d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80032d2:	4b46      	ldr	r3, [pc, #280]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	4a45      	ldr	r2, [pc, #276]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 80032d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032dc:	6313      	str	r3, [r2, #48]	; 0x30
 80032de:	4b43      	ldr	r3, [pc, #268]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80032ea:	4b40      	ldr	r3, [pc, #256]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a3f      	ldr	r2, [pc, #252]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 80032f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003302:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a39      	ldr	r2, [pc, #228]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 8003308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b37      	ldr	r3, [pc, #220]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800331a:	4b34      	ldr	r3, [pc, #208]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	4a33      	ldr	r2, [pc, #204]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 8003320:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003324:	6313      	str	r3, [r2, #48]	; 0x30
 8003326:	4b31      	ldr	r3, [pc, #196]	; (80033ec <BSP_LCD_MspInit+0x19c>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332e:	60bb      	str	r3, [r7, #8]
 8003330:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003332:	2310      	movs	r3, #16
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003336:	2302      	movs	r3, #2
 8003338:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800333e:	2302      	movs	r3, #2
 8003340:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003342:	230e      	movs	r3, #14
 8003344:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800334a:	4619      	mov	r1, r3
 800334c:	4828      	ldr	r0, [pc, #160]	; (80033f0 <BSP_LCD_MspInit+0x1a0>)
 800334e:	f002 ff8d 	bl	800626c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003356:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800335c:	2309      	movs	r3, #9
 800335e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003360:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003364:	4619      	mov	r1, r3
 8003366:	4823      	ldr	r0, [pc, #140]	; (80033f4 <BSP_LCD_MspInit+0x1a4>)
 8003368:	f002 ff80 	bl	800626c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800336c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003376:	230e      	movs	r3, #14
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800337a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800337e:	4619      	mov	r1, r3
 8003380:	481d      	ldr	r0, [pc, #116]	; (80033f8 <BSP_LCD_MspInit+0x1a8>)
 8003382:	f002 ff73 	bl	800626c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003386:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800338c:	2302      	movs	r3, #2
 800338e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003390:	230e      	movs	r3, #14
 8003392:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003398:	4619      	mov	r1, r3
 800339a:	4818      	ldr	r0, [pc, #96]	; (80033fc <BSP_LCD_MspInit+0x1ac>)
 800339c:	f002 ff66 	bl	800626c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80033a0:	23f7      	movs	r3, #247	; 0xf7
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033a4:	2302      	movs	r3, #2
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033a8:	230e      	movs	r3, #14
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80033ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033b0:	4619      	mov	r1, r3
 80033b2:	4813      	ldr	r0, [pc, #76]	; (8003400 <BSP_LCD_MspInit+0x1b0>)
 80033b4:	f002 ff5a 	bl	800626c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80033b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80033be:	2301      	movs	r3, #1
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80033c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033c6:	4619      	mov	r1, r3
 80033c8:	480b      	ldr	r0, [pc, #44]	; (80033f8 <BSP_LCD_MspInit+0x1a8>)
 80033ca:	f002 ff4f 	bl	800626c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80033ce:	2308      	movs	r3, #8
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80033d2:	2301      	movs	r3, #1
 80033d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80033d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033da:	4619      	mov	r1, r3
 80033dc:	4808      	ldr	r0, [pc, #32]	; (8003400 <BSP_LCD_MspInit+0x1b0>)
 80033de:	f002 ff45 	bl	800626c <HAL_GPIO_Init>
}
 80033e2:	bf00      	nop
 80033e4:	3740      	adds	r7, #64	; 0x40
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40021800 	.word	0x40021800
 80033f8:	40022000 	.word	0x40022000
 80033fc:	40022400 	.word	0x40022400
 8003400:	40022800 	.word	0x40022800

08003404 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <BSP_LCD_ClockConfig+0x34>)
 8003410:	2208      	movs	r2, #8
 8003412:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <BSP_LCD_ClockConfig+0x34>)
 8003416:	22c0      	movs	r2, #192	; 0xc0
 8003418:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800341a:	4b07      	ldr	r3, [pc, #28]	; (8003438 <BSP_LCD_ClockConfig+0x34>)
 800341c:	2205      	movs	r2, #5
 800341e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <BSP_LCD_ClockConfig+0x34>)
 8003422:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003428:	4803      	ldr	r0, [pc, #12]	; (8003438 <BSP_LCD_ClockConfig+0x34>)
 800342a:	f005 f8e1 	bl	80085f0 <HAL_RCCEx_PeriphCLKConfig>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000460 	.word	0x20000460

0800343c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800344a:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <LL_FillBuffer+0x88>)
 800344c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003450:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <LL_FillBuffer+0x8c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <LL_FillBuffer+0x90>)
 8003458:	2134      	movs	r1, #52	; 0x34
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3348      	adds	r3, #72	; 0x48
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d103      	bne.n	8003470 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003468:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <LL_FillBuffer+0x88>)
 800346a:	2202      	movs	r2, #2
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	e002      	b.n	8003476 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003470:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <LL_FillBuffer+0x88>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003476:	4a13      	ldr	r2, [pc, #76]	; (80034c4 <LL_FillBuffer+0x88>)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800347c:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <LL_FillBuffer+0x88>)
 800347e:	4a14      	ldr	r2, [pc, #80]	; (80034d0 <LL_FillBuffer+0x94>)
 8003480:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003482:	4810      	ldr	r0, [pc, #64]	; (80034c4 <LL_FillBuffer+0x88>)
 8003484:	f002 fb56 	bl	8005b34 <HAL_DMA2D_Init>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d115      	bne.n	80034ba <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	480c      	ldr	r0, [pc, #48]	; (80034c4 <LL_FillBuffer+0x88>)
 8003492:	f002 fdbd 	bl	8006010 <HAL_DMA2D_ConfigLayer>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10e      	bne.n	80034ba <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69f9      	ldr	r1, [r7, #28]
 80034a6:	4807      	ldr	r0, [pc, #28]	; (80034c4 <LL_FillBuffer+0x88>)
 80034a8:	f002 fb8e 	bl	8005bc8 <HAL_DMA2D_Start>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d103      	bne.n	80034ba <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80034b2:	210a      	movs	r1, #10
 80034b4:	4803      	ldr	r0, [pc, #12]	; (80034c4 <LL_FillBuffer+0x88>)
 80034b6:	f002 fbb2 	bl	8005c1e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000404 	.word	0x20000404
 80034c8:	20000444 	.word	0x20000444
 80034cc:	200086f4 	.word	0x200086f4
 80034d0:	4002b000 	.word	0x4002b000

080034d4 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80034e2:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <LL_ConvertLineToARGB8888+0x80>)
 80034e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034e8:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80034ea:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <LL_ConvertLineToARGB8888+0x80>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <LL_ConvertLineToARGB8888+0x80>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <LL_ConvertLineToARGB8888+0x80>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80034fc:	4b15      	ldr	r3, [pc, #84]	; (8003554 <LL_ConvertLineToARGB8888+0x80>)
 80034fe:	22ff      	movs	r2, #255	; 0xff
 8003500:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003502:	4a14      	ldr	r2, [pc, #80]	; (8003554 <LL_ConvertLineToARGB8888+0x80>)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8003508:	4b12      	ldr	r3, [pc, #72]	; (8003554 <LL_ConvertLineToARGB8888+0x80>)
 800350a:	2200      	movs	r2, #0
 800350c:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <LL_ConvertLineToARGB8888+0x80>)
 8003510:	4a11      	ldr	r2, [pc, #68]	; (8003558 <LL_ConvertLineToARGB8888+0x84>)
 8003512:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003514:	480f      	ldr	r0, [pc, #60]	; (8003554 <LL_ConvertLineToARGB8888+0x80>)
 8003516:	f002 fb0d 	bl	8005b34 <HAL_DMA2D_Init>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d115      	bne.n	800354c <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8003520:	2101      	movs	r1, #1
 8003522:	480c      	ldr	r0, [pc, #48]	; (8003554 <LL_ConvertLineToARGB8888+0x80>)
 8003524:	f002 fd74 	bl	8006010 <HAL_DMA2D_ConfigLayer>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10e      	bne.n	800354c <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800352e:	68f9      	ldr	r1, [r7, #12]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	2301      	movs	r3, #1
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4806      	ldr	r0, [pc, #24]	; (8003554 <LL_ConvertLineToARGB8888+0x80>)
 800353a:	f002 fb45 	bl	8005bc8 <HAL_DMA2D_Start>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d103      	bne.n	800354c <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003544:	210a      	movs	r1, #10
 8003546:	4803      	ldr	r0, [pc, #12]	; (8003554 <LL_ConvertLineToARGB8888+0x80>)
 8003548:	f002 fb69 	bl	8005c1e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000404 	.word	0x20000404
 8003558:	4002b000 	.word	0x4002b000

0800355c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003560:	4b29      	ldr	r3, [pc, #164]	; (8003608 <BSP_SDRAM_Init+0xac>)
 8003562:	4a2a      	ldr	r2, [pc, #168]	; (800360c <BSP_SDRAM_Init+0xb0>)
 8003564:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003566:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <BSP_SDRAM_Init+0xb4>)
 8003568:	2202      	movs	r2, #2
 800356a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800356c:	4b28      	ldr	r3, [pc, #160]	; (8003610 <BSP_SDRAM_Init+0xb4>)
 800356e:	2207      	movs	r2, #7
 8003570:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003572:	4b27      	ldr	r3, [pc, #156]	; (8003610 <BSP_SDRAM_Init+0xb4>)
 8003574:	2204      	movs	r2, #4
 8003576:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003578:	4b25      	ldr	r3, [pc, #148]	; (8003610 <BSP_SDRAM_Init+0xb4>)
 800357a:	2207      	movs	r2, #7
 800357c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800357e:	4b24      	ldr	r3, [pc, #144]	; (8003610 <BSP_SDRAM_Init+0xb4>)
 8003580:	2202      	movs	r2, #2
 8003582:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003584:	4b22      	ldr	r3, [pc, #136]	; (8003610 <BSP_SDRAM_Init+0xb4>)
 8003586:	2202      	movs	r2, #2
 8003588:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800358a:	4b21      	ldr	r3, [pc, #132]	; (8003610 <BSP_SDRAM_Init+0xb4>)
 800358c:	2202      	movs	r2, #2
 800358e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003590:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <BSP_SDRAM_Init+0xac>)
 8003592:	2200      	movs	r2, #0
 8003594:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003596:	4b1c      	ldr	r3, [pc, #112]	; (8003608 <BSP_SDRAM_Init+0xac>)
 8003598:	2200      	movs	r2, #0
 800359a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800359c:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <BSP_SDRAM_Init+0xac>)
 800359e:	2204      	movs	r2, #4
 80035a0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80035a2:	4b19      	ldr	r3, [pc, #100]	; (8003608 <BSP_SDRAM_Init+0xac>)
 80035a4:	2210      	movs	r2, #16
 80035a6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <BSP_SDRAM_Init+0xac>)
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80035ae:	4b16      	ldr	r3, [pc, #88]	; (8003608 <BSP_SDRAM_Init+0xac>)
 80035b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035b4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <BSP_SDRAM_Init+0xac>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80035bc:	4b12      	ldr	r3, [pc, #72]	; (8003608 <BSP_SDRAM_Init+0xac>)
 80035be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035c2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80035c4:	4b10      	ldr	r3, [pc, #64]	; (8003608 <BSP_SDRAM_Init+0xac>)
 80035c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035ca:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80035cc:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <BSP_SDRAM_Init+0xac>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80035d2:	2100      	movs	r1, #0
 80035d4:	480c      	ldr	r0, [pc, #48]	; (8003608 <BSP_SDRAM_Init+0xac>)
 80035d6:	f000 f87f 	bl	80036d8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80035da:	490d      	ldr	r1, [pc, #52]	; (8003610 <BSP_SDRAM_Init+0xb4>)
 80035dc:	480a      	ldr	r0, [pc, #40]	; (8003608 <BSP_SDRAM_Init+0xac>)
 80035de:	f005 ffcf 	bl	8009580 <HAL_SDRAM_Init>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <BSP_SDRAM_Init+0xb8>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	e002      	b.n	80035f6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <BSP_SDRAM_Init+0xb8>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80035f6:	f240 6003 	movw	r0, #1539	; 0x603
 80035fa:	f000 f80d 	bl	8003618 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <BSP_SDRAM_Init+0xb8>)
 8003600:	781b      	ldrb	r3, [r3, #0]
}
 8003602:	4618      	mov	r0, r3
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	2000879c 	.word	0x2000879c
 800360c:	a0000140 	.word	0xa0000140
 8003610:	200004e4 	.word	0x200004e4
 8003614:	2000003c 	.word	0x2000003c

08003618 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003624:	4b2a      	ldr	r3, [pc, #168]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800362a:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800362c:	2210      	movs	r2, #16
 800362e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003630:	4b27      	ldr	r3, [pc, #156]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003632:	2201      	movs	r2, #1
 8003634:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003636:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003638:	2200      	movs	r2, #0
 800363a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800363c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003640:	4923      	ldr	r1, [pc, #140]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003642:	4824      	ldr	r0, [pc, #144]	; (80036d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003644:	f005 ffd0 	bl	80095e8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003648:	2001      	movs	r0, #1
 800364a:	f001 fadb 	bl	8004c04 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003650:	2202      	movs	r2, #2
 8003652:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003654:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003656:	2210      	movs	r2, #16
 8003658:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800365c:	2201      	movs	r2, #1
 800365e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003662:	2200      	movs	r2, #0
 8003664:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800366a:	4919      	ldr	r1, [pc, #100]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800366c:	4819      	ldr	r0, [pc, #100]	; (80036d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800366e:	f005 ffbb 	bl	80095e8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003672:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003674:	2203      	movs	r2, #3
 8003676:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003678:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800367a:	2210      	movs	r2, #16
 800367c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003680:	2208      	movs	r2, #8
 8003682:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003684:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800368a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800368e:	4910      	ldr	r1, [pc, #64]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003690:	4810      	ldr	r0, [pc, #64]	; (80036d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003692:	f005 ffa9 	bl	80095e8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003696:	f44f 7308 	mov.w	r3, #544	; 0x220
 800369a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800369e:	2204      	movs	r2, #4
 80036a0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80036a2:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036a4:	2210      	movs	r2, #16
 80036a6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80036a8:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a07      	ldr	r2, [pc, #28]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036b2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80036b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036b8:	4905      	ldr	r1, [pc, #20]	; (80036d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036ba:	4806      	ldr	r0, [pc, #24]	; (80036d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036bc:	f005 ff94 	bl	80095e8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4804      	ldr	r0, [pc, #16]	; (80036d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036c4:	f005 ffc5 	bl	8009652 <HAL_SDRAM_ProgramRefreshRate>
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000500 	.word	0x20000500
 80036d4:	2000879c 	.word	0x2000879c

080036d8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80036d8:	b580      	push	{r7, lr}
 80036da:	b090      	sub	sp, #64	; 0x40
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80036e2:	4b70      	ldr	r3, [pc, #448]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	4a6f      	ldr	r2, [pc, #444]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6393      	str	r3, [r2, #56]	; 0x38
 80036ee:	4b6d      	ldr	r3, [pc, #436]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80036fa:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	4a69      	ldr	r2, [pc, #420]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003700:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003704:	6313      	str	r3, [r2, #48]	; 0x30
 8003706:	4b67      	ldr	r3, [pc, #412]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003712:	4b64      	ldr	r3, [pc, #400]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	4a63      	ldr	r2, [pc, #396]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003718:	f043 0304 	orr.w	r3, r3, #4
 800371c:	6313      	str	r3, [r2, #48]	; 0x30
 800371e:	4b61      	ldr	r3, [pc, #388]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800372a:	4b5e      	ldr	r3, [pc, #376]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4a5d      	ldr	r2, [pc, #372]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003730:	f043 0308 	orr.w	r3, r3, #8
 8003734:	6313      	str	r3, [r2, #48]	; 0x30
 8003736:	4b5b      	ldr	r3, [pc, #364]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003742:	4b58      	ldr	r3, [pc, #352]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a57      	ldr	r2, [pc, #348]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003748:	f043 0310 	orr.w	r3, r3, #16
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b55      	ldr	r3, [pc, #340]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800375a:	4b52      	ldr	r3, [pc, #328]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	4a51      	ldr	r2, [pc, #324]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003760:	f043 0320 	orr.w	r3, r3, #32
 8003764:	6313      	str	r3, [r2, #48]	; 0x30
 8003766:	4b4f      	ldr	r3, [pc, #316]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003772:	4b4c      	ldr	r3, [pc, #304]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	4a4b      	ldr	r2, [pc, #300]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800377c:	6313      	str	r3, [r2, #48]	; 0x30
 800377e:	4b49      	ldr	r3, [pc, #292]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800378a:	4b46      	ldr	r3, [pc, #280]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	4a45      	ldr	r2, [pc, #276]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003794:	6313      	str	r3, [r2, #48]	; 0x30
 8003796:	4b43      	ldr	r3, [pc, #268]	; (80038a4 <BSP_SDRAM_MspInit+0x1cc>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80037a2:	2302      	movs	r3, #2
 80037a4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80037a6:	2301      	movs	r3, #1
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80037aa:	2302      	movs	r3, #2
 80037ac:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80037ae:	230c      	movs	r3, #12
 80037b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80037b2:	2308      	movs	r3, #8
 80037b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80037b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ba:	4619      	mov	r1, r3
 80037bc:	483a      	ldr	r0, [pc, #232]	; (80038a8 <BSP_SDRAM_MspInit+0x1d0>)
 80037be:	f002 fd55 	bl	800626c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80037c2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80037c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037cc:	4619      	mov	r1, r3
 80037ce:	4837      	ldr	r0, [pc, #220]	; (80038ac <BSP_SDRAM_MspInit+0x1d4>)
 80037d0:	f002 fd4c 	bl	800626c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80037d4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80037da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037de:	4619      	mov	r1, r3
 80037e0:	4833      	ldr	r0, [pc, #204]	; (80038b0 <BSP_SDRAM_MspInit+0x1d8>)
 80037e2:	f002 fd43 	bl	800626c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80037e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80037ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037f0:	4619      	mov	r1, r3
 80037f2:	4830      	ldr	r0, [pc, #192]	; (80038b4 <BSP_SDRAM_MspInit+0x1dc>)
 80037f4:	f002 fd3a 	bl	800626c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80037f8:	f248 1333 	movw	r3, #33075	; 0x8133
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80037fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003802:	4619      	mov	r1, r3
 8003804:	482c      	ldr	r0, [pc, #176]	; (80038b8 <BSP_SDRAM_MspInit+0x1e0>)
 8003806:	f002 fd31 	bl	800626c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800380a:	2328      	movs	r3, #40	; 0x28
 800380c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800380e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003812:	4619      	mov	r1, r3
 8003814:	4829      	ldr	r0, [pc, #164]	; (80038bc <BSP_SDRAM_MspInit+0x1e4>)
 8003816:	f002 fd29 	bl	800626c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800381a:	4b29      	ldr	r3, [pc, #164]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 800381c:	2200      	movs	r2, #0
 800381e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003820:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003826:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 8003828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800382c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800382e:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 8003830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003834:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 8003838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800383c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 8003840:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003844:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003846:	4b1e      	ldr	r3, [pc, #120]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 8003848:	2200      	movs	r2, #0
 800384a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800384c:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 800384e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003852:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003854:	4b1a      	ldr	r3, [pc, #104]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 8003856:	2200      	movs	r2, #0
 8003858:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800385a:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 800385c:	2203      	movs	r2, #3
 800385e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003860:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 8003862:	2200      	movs	r2, #0
 8003864:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003866:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800386c:	4b14      	ldr	r3, [pc, #80]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 800386e:	4a15      	ldr	r2, [pc, #84]	; (80038c4 <BSP_SDRAM_MspInit+0x1ec>)
 8003870:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
 8003878:	4a11      	ldr	r2, [pc, #68]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800387e:	4810      	ldr	r0, [pc, #64]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 8003880:	f001 ffb6 	bl	80057f0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003884:	480e      	ldr	r0, [pc, #56]	; (80038c0 <BSP_SDRAM_MspInit+0x1e8>)
 8003886:	f001 ff05 	bl	8005694 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800388a:	2200      	movs	r2, #0
 800388c:	210f      	movs	r1, #15
 800388e:	2038      	movs	r0, #56	; 0x38
 8003890:	f001 fdf6 	bl	8005480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003894:	2038      	movs	r0, #56	; 0x38
 8003896:	f001 fe0f 	bl	80054b8 <HAL_NVIC_EnableIRQ>
}
 800389a:	bf00      	nop
 800389c:	3740      	adds	r7, #64	; 0x40
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40020800 	.word	0x40020800
 80038ac:	40020c00 	.word	0x40020c00
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40021400 	.word	0x40021400
 80038b8:	40021800 	.word	0x40021800
 80038bc:	40021c00 	.word	0x40021c00
 80038c0:	20000510 	.word	0x20000510
 80038c4:	40026410 	.word	0x40026410

080038c8 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	460a      	mov	r2, r1
 80038d2:	80fb      	strh	r3, [r7, #6]
 80038d4:	4613      	mov	r3, r2
 80038d6:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80038dc:	4a14      	ldr	r2, [pc, #80]	; (8003930 <BSP_TS_Init+0x68>)
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80038e2:	4a14      	ldr	r2, [pc, #80]	; (8003934 <BSP_TS_Init+0x6c>)
 80038e4:	88bb      	ldrh	r3, [r7, #4]
 80038e6:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <BSP_TS_Init+0x70>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2070      	movs	r0, #112	; 0x70
 80038ee:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <BSP_TS_Init+0x70>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2070      	movs	r0, #112	; 0x70
 80038f6:	4798      	blx	r3
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b51      	cmp	r3, #81	; 0x51
 80038fc:	d111      	bne.n	8003922 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <BSP_TS_Init+0x74>)
 8003900:	4a0d      	ldr	r2, [pc, #52]	; (8003938 <BSP_TS_Init+0x70>)
 8003902:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <BSP_TS_Init+0x78>)
 8003906:	2270      	movs	r2, #112	; 0x70
 8003908:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800390a:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <BSP_TS_Init+0x7c>)
 800390c:	2208      	movs	r2, #8
 800390e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003910:	4b0a      	ldr	r3, [pc, #40]	; (800393c <BSP_TS_Init+0x74>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <BSP_TS_Init+0x78>)
 8003918:	7812      	ldrb	r2, [r2, #0]
 800391a:	b292      	uxth	r2, r2
 800391c:	4610      	mov	r0, r2
 800391e:	4798      	blx	r3
 8003920:	e001      	b.n	8003926 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003922:	2303      	movs	r3, #3
 8003924:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003926:	7bfb      	ldrb	r3, [r7, #15]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	20000574 	.word	0x20000574
 8003934:	20000576 	.word	0x20000576
 8003938:	20000000 	.word	0x20000000
 800393c:	20000570 	.word	0x20000570
 8003940:	20000579 	.word	0x20000579
 8003944:	20000578 	.word	0x20000578

08003948 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Configure Interrupt mode for SD detection pin */
  gpio_init_structure.Pin = TS_INT_PIN;
 800394e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003952:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003958:	2302      	movs	r3, #2
 800395a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800395c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003960:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8003962:	1d3b      	adds	r3, r7, #4
 8003964:	4619      	mov	r1, r3
 8003966:	480c      	ldr	r0, [pc, #48]	; (8003998 <BSP_TS_ITConfig+0x50>)
 8003968:	f002 fc80 	bl	800626c <HAL_GPIO_Init>

  /* Enable and set Touch screen EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 800396c:	2200      	movs	r2, #0
 800396e:	210f      	movs	r1, #15
 8003970:	2028      	movs	r0, #40	; 0x28
 8003972:	f001 fd85 	bl	8005480 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8003976:	2028      	movs	r0, #40	; 0x28
 8003978:	f001 fd9e 	bl	80054b8 <HAL_NVIC_EnableIRQ>

  /* Enable the TS ITs */
  tsDriver->EnableIT(I2cAddress);
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <BSP_TS_ITConfig+0x54>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	4a07      	ldr	r2, [pc, #28]	; (80039a0 <BSP_TS_ITConfig+0x58>)
 8003984:	7812      	ldrb	r2, [r2, #0]
 8003986:	b292      	uxth	r2, r2
 8003988:	4610      	mov	r0, r2
 800398a:	4798      	blx	r3

  return TS_OK;  
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40022000 	.word	0x40022000
 800399c:	20000570 	.word	0x20000570
 80039a0:	20000579 	.word	0x20000579

080039a4 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b097      	sub	sp, #92	; 0x5c
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80039be:	4b97      	ldr	r3, [pc, #604]	; (8003c1c <BSP_TS_GetState+0x278>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	4a96      	ldr	r2, [pc, #600]	; (8003c20 <BSP_TS_GetState+0x27c>)
 80039c6:	7812      	ldrb	r2, [r2, #0]
 80039c8:	b292      	uxth	r2, r2
 80039ca:	4610      	mov	r0, r2
 80039cc:	4798      	blx	r3
 80039ce:	4603      	mov	r3, r0
 80039d0:	461a      	mov	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 81a8 	beq.w	8003d30 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80039e0:	2300      	movs	r3, #0
 80039e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80039e4:	e197      	b.n	8003d16 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80039e6:	4b8d      	ldr	r3, [pc, #564]	; (8003c1c <BSP_TS_GetState+0x278>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	4a8c      	ldr	r2, [pc, #560]	; (8003c20 <BSP_TS_GetState+0x27c>)
 80039ee:	7812      	ldrb	r2, [r2, #0]
 80039f0:	b290      	uxth	r0, r2
 80039f2:	f107 0120 	add.w	r1, r7, #32
 80039f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039f8:	0052      	lsls	r2, r2, #1
 80039fa:	188c      	adds	r4, r1, r2
 80039fc:	f107 0114 	add.w	r1, r7, #20
 8003a00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a02:	0052      	lsls	r2, r2, #1
 8003a04:	440a      	add	r2, r1
 8003a06:	4621      	mov	r1, r4
 8003a08:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8003a0a:	4b86      	ldr	r3, [pc, #536]	; (8003c24 <BSP_TS_GetState+0x280>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d11b      	bne.n	8003a4a <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8003a12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003a28:	440b      	add	r3, r1
 8003a2a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8003a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003a36:	4413      	add	r3, r2
 8003a38:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003a44:	440b      	add	r3, r1
 8003a46:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003a4a:	4b76      	ldr	r3, [pc, #472]	; (8003c24 <BSP_TS_GetState+0x280>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d010      	beq.n	8003a78 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8003a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003a5e:	4413      	add	r3, r2
 8003a60:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003a64:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003a72:	440b      	add	r3, r1
 8003a74:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003a78:	4b6a      	ldr	r3, [pc, #424]	; (8003c24 <BSP_TS_GetState+0x280>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d010      	beq.n	8003aa6 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8003a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003a92:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003aa0:	440b      	add	r3, r1
 8003aa2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003aa6:	4b5f      	ldr	r3, [pc, #380]	; (8003c24 <BSP_TS_GetState+0x280>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d01b      	beq.n	8003aea <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8003ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003aba:	4413      	add	r3, r2
 8003abc:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003ac8:	440b      	add	r3, r1
 8003aca:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003ae4:	440b      	add	r3, r1
 8003ae6:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003af2:	4413      	add	r3, r2
 8003af4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003af8:	4619      	mov	r1, r3
 8003afa:	4a4b      	ldr	r2, [pc, #300]	; (8003c28 <BSP_TS_GetState+0x284>)
 8003afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b02:	4299      	cmp	r1, r3
 8003b04:	d90e      	bls.n	8003b24 <BSP_TS_GetState+0x180>
 8003b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003b0e:	4413      	add	r3, r2
 8003b10:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003b14:	4944      	ldr	r1, [pc, #272]	; (8003c28 <BSP_TS_GetState+0x284>)
 8003b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	e00d      	b.n	8003b40 <BSP_TS_GetState+0x19c>
 8003b24:	4a40      	ldr	r2, [pc, #256]	; (8003c28 <BSP_TS_GetState+0x284>)
 8003b26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003b36:	440b      	add	r3, r1
 8003b38:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003b52:	4619      	mov	r1, r3
 8003b54:	4a35      	ldr	r2, [pc, #212]	; (8003c2c <BSP_TS_GetState+0x288>)
 8003b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5c:	4299      	cmp	r1, r3
 8003b5e:	d90e      	bls.n	8003b7e <BSP_TS_GetState+0x1da>
 8003b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003b68:	4413      	add	r3, r2
 8003b6a:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003b6e:	492f      	ldr	r1, [pc, #188]	; (8003c2c <BSP_TS_GetState+0x288>)
 8003b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	e00d      	b.n	8003b9a <BSP_TS_GetState+0x1f6>
 8003b7e:	4a2b      	ldr	r2, [pc, #172]	; (8003c2c <BSP_TS_GetState+0x288>)
 8003b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003b90:	440b      	add	r3, r1
 8003b92:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8003b9e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003ba2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ba6:	4413      	add	r3, r2
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	dd17      	ble.n	8003bdc <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8003bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <BSP_TS_GetState+0x284>)
 8003bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003bcc:	4413      	add	r3, r2
 8003bce:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <BSP_TS_GetState+0x288>)
 8003bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003bdc:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <BSP_TS_GetState+0x27c>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b70      	cmp	r3, #112	; 0x70
 8003be2:	d125      	bne.n	8003c30 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8003be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003bec:	4413      	add	r3, r2
 8003bee:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4413      	add	r3, r2
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003c06:	4413      	add	r3, r2
 8003c08:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c10:	3304      	adds	r3, #4
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4413      	add	r3, r2
 8003c16:	460a      	mov	r2, r1
 8003c18:	809a      	strh	r2, [r3, #4]
 8003c1a:	e02c      	b.n	8003c76 <BSP_TS_GetState+0x2d2>
 8003c1c:	20000570 	.word	0x20000570
 8003c20:	20000579 	.word	0x20000579
 8003c24:	20000578 	.word	0x20000578
 8003c28:	2000057c 	.word	0x2000057c
 8003c2c:	20000590 	.word	0x20000590
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003c30:	4b42      	ldr	r3, [pc, #264]	; (8003d3c <BSP_TS_GetState+0x398>)
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	4619      	mov	r1, r3
 8003c36:	4a42      	ldr	r2, [pc, #264]	; (8003d40 <BSP_TS_GetState+0x39c>)
 8003c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3e:	fb03 f301 	mul.w	r3, r3, r1
 8003c42:	0b1b      	lsrs	r3, r3, #12
 8003c44:	b299      	uxth	r1, r3
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	460a      	mov	r2, r1
 8003c50:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003c52:	4b3c      	ldr	r3, [pc, #240]	; (8003d44 <BSP_TS_GetState+0x3a0>)
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	4619      	mov	r1, r3
 8003c58:	4a3b      	ldr	r2, [pc, #236]	; (8003d48 <BSP_TS_GetState+0x3a4>)
 8003c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c60:	fb03 f301 	mul.w	r3, r3, r1
 8003c64:	0b1b      	lsrs	r3, r3, #12
 8003c66:	b299      	uxth	r1, r3
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	4413      	add	r3, r2
 8003c72:	460a      	mov	r2, r1
 8003c74:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003c76:	4b35      	ldr	r3, [pc, #212]	; (8003d4c <BSP_TS_GetState+0x3a8>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	b298      	uxth	r0, r3
 8003c7c:	f107 010c 	add.w	r1, r7, #12
 8003c80:	f107 0210 	add.w	r2, r7, #16
 8003c84:	f107 0308 	add.w	r3, r7, #8
 8003c88:	9300      	str	r3, [sp, #0]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003c8e:	f7fc fe1f 	bl	80008d0 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	b2d9      	uxtb	r1, r3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3316      	adds	r3, #22
 8003c9e:	460a      	mov	r2, r1
 8003ca0:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	b2d9      	uxtb	r1, r3
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003caa:	4413      	add	r3, r2
 8003cac:	3320      	adds	r3, #32
 8003cae:	460a      	mov	r2, r1
 8003cb0:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d827      	bhi.n	8003d08 <BSP_TS_GetState+0x364>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <BSP_TS_GetState+0x31c>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003cd1 	.word	0x08003cd1
 8003cc4:	08003cdf 	.word	0x08003cdf
 8003cc8:	08003ced 	.word	0x08003ced
 8003ccc:	08003cfb 	.word	0x08003cfb
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cd4:	4413      	add	r3, r2
 8003cd6:	331b      	adds	r3, #27
 8003cd8:	2201      	movs	r2, #1
 8003cda:	701a      	strb	r2, [r3, #0]
          break;
 8003cdc:	e018      	b.n	8003d10 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce2:	4413      	add	r3, r2
 8003ce4:	331b      	adds	r3, #27
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	701a      	strb	r2, [r3, #0]
          break;
 8003cea:	e011      	b.n	8003d10 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf0:	4413      	add	r3, r2
 8003cf2:	331b      	adds	r3, #27
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	701a      	strb	r2, [r3, #0]
          break;
 8003cf8:	e00a      	b.n	8003d10 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cfe:	4413      	add	r3, r2
 8003d00:	331b      	adds	r3, #27
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
          break;
 8003d06:	e003      	b.n	8003d10 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003d0e:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d12:	3301      	adds	r3, #1
 8003d14:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	f4ff ae61 	bcc.w	80039e6 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f813 	bl	8003d50 <BSP_TS_Get_GestureId>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003d30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3754      	adds	r7, #84	; 0x54
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd90      	pop	{r4, r7, pc}
 8003d3c:	20000574 	.word	0x20000574
 8003d40:	2000057c 	.word	0x2000057c
 8003d44:	20000576 	.word	0x20000576
 8003d48:	20000590 	.word	0x20000590
 8003d4c:	20000579 	.word	0x20000579

08003d50 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003d60:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <BSP_TS_Get_GestureId+0x100>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f107 0208 	add.w	r2, r7, #8
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fc fd96 	bl	800089e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b49      	cmp	r3, #73	; 0x49
 8003d76:	d05e      	beq.n	8003e36 <BSP_TS_Get_GestureId+0xe6>
 8003d78:	2b49      	cmp	r3, #73	; 0x49
 8003d7a:	d860      	bhi.n	8003e3e <BSP_TS_Get_GestureId+0xee>
 8003d7c:	2b1c      	cmp	r3, #28
 8003d7e:	d83f      	bhi.n	8003e00 <BSP_TS_Get_GestureId+0xb0>
 8003d80:	2b1c      	cmp	r3, #28
 8003d82:	d85c      	bhi.n	8003e3e <BSP_TS_Get_GestureId+0xee>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <BSP_TS_Get_GestureId+0x3c>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003e07 	.word	0x08003e07
 8003d90:	08003e3f 	.word	0x08003e3f
 8003d94:	08003e3f 	.word	0x08003e3f
 8003d98:	08003e3f 	.word	0x08003e3f
 8003d9c:	08003e3f 	.word	0x08003e3f
 8003da0:	08003e3f 	.word	0x08003e3f
 8003da4:	08003e3f 	.word	0x08003e3f
 8003da8:	08003e3f 	.word	0x08003e3f
 8003dac:	08003e3f 	.word	0x08003e3f
 8003db0:	08003e3f 	.word	0x08003e3f
 8003db4:	08003e3f 	.word	0x08003e3f
 8003db8:	08003e3f 	.word	0x08003e3f
 8003dbc:	08003e3f 	.word	0x08003e3f
 8003dc0:	08003e3f 	.word	0x08003e3f
 8003dc4:	08003e3f 	.word	0x08003e3f
 8003dc8:	08003e3f 	.word	0x08003e3f
 8003dcc:	08003e0f 	.word	0x08003e0f
 8003dd0:	08003e3f 	.word	0x08003e3f
 8003dd4:	08003e3f 	.word	0x08003e3f
 8003dd8:	08003e3f 	.word	0x08003e3f
 8003ddc:	08003e17 	.word	0x08003e17
 8003de0:	08003e3f 	.word	0x08003e3f
 8003de4:	08003e3f 	.word	0x08003e3f
 8003de8:	08003e3f 	.word	0x08003e3f
 8003dec:	08003e1f 	.word	0x08003e1f
 8003df0:	08003e3f 	.word	0x08003e3f
 8003df4:	08003e3f 	.word	0x08003e3f
 8003df8:	08003e3f 	.word	0x08003e3f
 8003dfc:	08003e27 	.word	0x08003e27
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	d014      	beq.n	8003e2e <BSP_TS_Get_GestureId+0xde>
 8003e04:	e01b      	b.n	8003e3e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e0c:	e01a      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e14:	e016      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e1c:	e012      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2203      	movs	r2, #3
 8003e22:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e24:	e00e      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2204      	movs	r2, #4
 8003e2a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e2c:	e00a      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2205      	movs	r2, #5
 8003e32:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e34:	e006      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2206      	movs	r2, #6
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003e3c:	e002      	b.n	8003e44 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
      break;
 8003e42:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000579 	.word	0x20000579

08003e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e5a:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <HAL_MspInit+0x4c>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	4a10      	ldr	r2, [pc, #64]	; (8003ea0 <HAL_MspInit+0x4c>)
 8003e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6413      	str	r3, [r2, #64]	; 0x40
 8003e66:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <HAL_MspInit+0x4c>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_MspInit+0x4c>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <HAL_MspInit+0x4c>)
 8003e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7e:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <HAL_MspInit+0x4c>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	210f      	movs	r1, #15
 8003e8e:	f06f 0001 	mvn.w	r0, #1
 8003e92:	f001 faf5 	bl	8005480 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08c      	sub	sp, #48	; 0x30
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eac:	f107 031c 	add.w	r3, r7, #28
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <HAL_ADC_MspInit+0xc8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d124      	bne.n	8003f10 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ec6:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <HAL_ADC_MspInit+0xcc>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	4a29      	ldr	r2, [pc, #164]	; (8003f70 <HAL_ADC_MspInit+0xcc>)
 8003ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ed2:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <HAL_ADC_MspInit+0xcc>)
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ede:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <HAL_ADC_MspInit+0xcc>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	4a23      	ldr	r2, [pc, #140]	; (8003f70 <HAL_ADC_MspInit+0xcc>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eea:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <HAL_ADC_MspInit+0xcc>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003efa:	2303      	movs	r3, #3
 8003efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f02:	f107 031c 	add.w	r3, r7, #28
 8003f06:	4619      	mov	r1, r3
 8003f08:	481a      	ldr	r0, [pc, #104]	; (8003f74 <HAL_ADC_MspInit+0xd0>)
 8003f0a:	f002 f9af 	bl	800626c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003f0e:	e029      	b.n	8003f64 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <HAL_ADC_MspInit+0xd4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d124      	bne.n	8003f64 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <HAL_ADC_MspInit+0xcc>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	4a14      	ldr	r2, [pc, #80]	; (8003f70 <HAL_ADC_MspInit+0xcc>)
 8003f20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f24:	6453      	str	r3, [r2, #68]	; 0x44
 8003f26:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <HAL_ADC_MspInit+0xcc>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f32:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <HAL_ADC_MspInit+0xcc>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	4a0e      	ldr	r2, [pc, #56]	; (8003f70 <HAL_ADC_MspInit+0xcc>)
 8003f38:	f043 0320 	orr.w	r3, r3, #32
 8003f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <HAL_ADC_MspInit+0xcc>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8003f4a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f50:	2303      	movs	r3, #3
 8003f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f58:	f107 031c 	add.w	r3, r7, #28
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4807      	ldr	r0, [pc, #28]	; (8003f7c <HAL_ADC_MspInit+0xd8>)
 8003f60:	f002 f984 	bl	800626c <HAL_GPIO_Init>
}
 8003f64:	bf00      	nop
 8003f66:	3730      	adds	r7, #48	; 0x30
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40012000 	.word	0x40012000
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40020000 	.word	0x40020000
 8003f78:	40012200 	.word	0x40012200
 8003f7c:	40021400 	.word	0x40021400

08003f80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a19      	ldr	r2, [pc, #100]	; (8004004 <HAL_DAC_MspInit+0x84>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d12b      	bne.n	8003ffa <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003fa2:	4b19      	ldr	r3, [pc, #100]	; (8004008 <HAL_DAC_MspInit+0x88>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	4a18      	ldr	r2, [pc, #96]	; (8004008 <HAL_DAC_MspInit+0x88>)
 8003fa8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003fac:	6413      	str	r3, [r2, #64]	; 0x40
 8003fae:	4b16      	ldr	r3, [pc, #88]	; (8004008 <HAL_DAC_MspInit+0x88>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fba:	4b13      	ldr	r3, [pc, #76]	; (8004008 <HAL_DAC_MspInit+0x88>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	4a12      	ldr	r2, [pc, #72]	; (8004008 <HAL_DAC_MspInit+0x88>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <HAL_DAC_MspInit+0x88>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003fd2:	2310      	movs	r3, #16
 8003fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fde:	f107 0314 	add.w	r3, r7, #20
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4809      	ldr	r0, [pc, #36]	; (800400c <HAL_DAC_MspInit+0x8c>)
 8003fe6:	f002 f941 	bl	800626c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8003fea:	2200      	movs	r2, #0
 8003fec:	210f      	movs	r1, #15
 8003fee:	2036      	movs	r0, #54	; 0x36
 8003ff0:	f001 fa46 	bl	8005480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ff4:	2036      	movs	r0, #54	; 0x36
 8003ff6:	f001 fa5f 	bl	80054b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003ffa:	bf00      	nop
 8003ffc:	3728      	adds	r7, #40	; 0x28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40007400 	.word	0x40007400
 8004008:	40023800 	.word	0x40023800
 800400c:	40020000 	.word	0x40020000

08004010 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a0d      	ldr	r2, [pc, #52]	; (8004054 <HAL_DMA2D_MspInit+0x44>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d113      	bne.n	800404a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004022:	4b0d      	ldr	r3, [pc, #52]	; (8004058 <HAL_DMA2D_MspInit+0x48>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	4a0c      	ldr	r2, [pc, #48]	; (8004058 <HAL_DMA2D_MspInit+0x48>)
 8004028:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800402c:	6313      	str	r3, [r2, #48]	; 0x30
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <HAL_DMA2D_MspInit+0x48>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800403a:	2200      	movs	r2, #0
 800403c:	2105      	movs	r1, #5
 800403e:	205a      	movs	r0, #90	; 0x5a
 8004040:	f001 fa1e 	bl	8005480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004044:	205a      	movs	r0, #90	; 0x5a
 8004046:	f001 fa37 	bl	80054b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	4002b000 	.word	0x4002b000
 8004058:	40023800 	.word	0x40023800

0800405c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b0ac      	sub	sp, #176	; 0xb0
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004064:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004074:	f107 0318 	add.w	r3, r7, #24
 8004078:	2284      	movs	r2, #132	; 0x84
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f009 fdcd 	bl	800dc1c <memset>
  if(hi2c->Instance==I2C1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a44      	ldr	r2, [pc, #272]	; (8004198 <HAL_I2C_MspInit+0x13c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d13d      	bne.n	8004108 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800408c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004090:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004092:	2300      	movs	r3, #0
 8004094:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004096:	f107 0318 	add.w	r3, r7, #24
 800409a:	4618      	mov	r0, r3
 800409c:	f004 faa8 	bl	80085f0 <HAL_RCCEx_PeriphCLKConfig>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80040a6:	f7fe faad 	bl	8002604 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040aa:	4b3c      	ldr	r3, [pc, #240]	; (800419c <HAL_I2C_MspInit+0x140>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	4a3b      	ldr	r2, [pc, #236]	; (800419c <HAL_I2C_MspInit+0x140>)
 80040b0:	f043 0302 	orr.w	r3, r3, #2
 80040b4:	6313      	str	r3, [r2, #48]	; 0x30
 80040b6:	4b39      	ldr	r3, [pc, #228]	; (800419c <HAL_I2C_MspInit+0x140>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040ca:	2312      	movs	r3, #18
 80040cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d6:	2303      	movs	r3, #3
 80040d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040dc:	2304      	movs	r3, #4
 80040de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80040e6:	4619      	mov	r1, r3
 80040e8:	482d      	ldr	r0, [pc, #180]	; (80041a0 <HAL_I2C_MspInit+0x144>)
 80040ea:	f002 f8bf 	bl	800626c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040ee:	4b2b      	ldr	r3, [pc, #172]	; (800419c <HAL_I2C_MspInit+0x140>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	4a2a      	ldr	r2, [pc, #168]	; (800419c <HAL_I2C_MspInit+0x140>)
 80040f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040f8:	6413      	str	r3, [r2, #64]	; 0x40
 80040fa:	4b28      	ldr	r3, [pc, #160]	; (800419c <HAL_I2C_MspInit+0x140>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004106:	e042      	b.n	800418e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a25      	ldr	r2, [pc, #148]	; (80041a4 <HAL_I2C_MspInit+0x148>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d13d      	bne.n	800418e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004116:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800411e:	f107 0318 	add.w	r3, r7, #24
 8004122:	4618      	mov	r0, r3
 8004124:	f004 fa64 	bl	80085f0 <HAL_RCCEx_PeriphCLKConfig>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800412e:	f7fe fa69 	bl	8002604 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <HAL_I2C_MspInit+0x140>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4a19      	ldr	r2, [pc, #100]	; (800419c <HAL_I2C_MspInit+0x140>)
 8004138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413c:	6313      	str	r3, [r2, #48]	; 0x30
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <HAL_I2C_MspInit+0x140>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800414a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800414e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004152:	2312      	movs	r3, #18
 8004154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004158:	2301      	movs	r3, #1
 800415a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415e:	2303      	movs	r3, #3
 8004160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004164:	2304      	movs	r3, #4
 8004166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800416a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800416e:	4619      	mov	r1, r3
 8004170:	480d      	ldr	r0, [pc, #52]	; (80041a8 <HAL_I2C_MspInit+0x14c>)
 8004172:	f002 f87b 	bl	800626c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004176:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_I2C_MspInit+0x140>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	4a08      	ldr	r2, [pc, #32]	; (800419c <HAL_I2C_MspInit+0x140>)
 800417c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004180:	6413      	str	r3, [r2, #64]	; 0x40
 8004182:	4b06      	ldr	r3, [pc, #24]	; (800419c <HAL_I2C_MspInit+0x140>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	68bb      	ldr	r3, [r7, #8]
}
 800418e:	bf00      	nop
 8004190:	37b0      	adds	r7, #176	; 0xb0
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40005400 	.word	0x40005400
 800419c:	40023800 	.word	0x40023800
 80041a0:	40020400 	.word	0x40020400
 80041a4:	40005c00 	.word	0x40005c00
 80041a8:	40021c00 	.word	0x40021c00

080041ac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a15      	ldr	r2, [pc, #84]	; (8004210 <HAL_I2C_MspDeInit+0x64>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d110      	bne.n	80041e0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <HAL_I2C_MspDeInit+0x68>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	4a14      	ldr	r2, [pc, #80]	; (8004214 <HAL_I2C_MspDeInit+0x68>)
 80041c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041c8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80041ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041ce:	4812      	ldr	r0, [pc, #72]	; (8004218 <HAL_I2C_MspDeInit+0x6c>)
 80041d0:	f002 f9f8 	bl	80065c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80041d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041d8:	480f      	ldr	r0, [pc, #60]	; (8004218 <HAL_I2C_MspDeInit+0x6c>)
 80041da:	f002 f9f3 	bl	80065c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80041de:	e013      	b.n	8004208 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0d      	ldr	r2, [pc, #52]	; (800421c <HAL_I2C_MspDeInit+0x70>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d10e      	bne.n	8004208 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <HAL_I2C_MspDeInit+0x68>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	4a09      	ldr	r2, [pc, #36]	; (8004214 <HAL_I2C_MspDeInit+0x68>)
 80041f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041f4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80041f6:	2180      	movs	r1, #128	; 0x80
 80041f8:	4809      	ldr	r0, [pc, #36]	; (8004220 <HAL_I2C_MspDeInit+0x74>)
 80041fa:	f002 f9e3 	bl	80065c4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80041fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004202:	4807      	ldr	r0, [pc, #28]	; (8004220 <HAL_I2C_MspDeInit+0x74>)
 8004204:	f002 f9de 	bl	80065c4 <HAL_GPIO_DeInit>
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40005400 	.word	0x40005400
 8004214:	40023800 	.word	0x40023800
 8004218:	40020400 	.word	0x40020400
 800421c:	40005c00 	.word	0x40005c00
 8004220:	40021c00 	.word	0x40021c00

08004224 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b0ae      	sub	sp, #184	; 0xb8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800422c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]
 8004236:	609a      	str	r2, [r3, #8]
 8004238:	60da      	str	r2, [r3, #12]
 800423a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800423c:	f107 0320 	add.w	r3, r7, #32
 8004240:	2284      	movs	r2, #132	; 0x84
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f009 fce9 	bl	800dc1c <memset>
  if(hltdc->Instance==LTDC)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6f      	ldr	r2, [pc, #444]	; (800440c <HAL_LTDC_MspInit+0x1e8>)
 8004250:	4293      	cmp	r3, r2
 8004252:	f040 80d6 	bne.w	8004402 <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004256:	2308      	movs	r3, #8
 8004258:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800425a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800425e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8004260:	2305      	movs	r3, #5
 8004262:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004264:	2302      	movs	r3, #2
 8004266:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8004268:	2303      	movs	r3, #3
 800426a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800426c:	2301      	movs	r3, #1
 800426e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004270:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004274:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004276:	f107 0320 	add.w	r3, r7, #32
 800427a:	4618      	mov	r0, r3
 800427c:	f004 f9b8 	bl	80085f0 <HAL_RCCEx_PeriphCLKConfig>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8004286:	f7fe f9bd 	bl	8002604 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800428a:	4b61      	ldr	r3, [pc, #388]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	4a60      	ldr	r2, [pc, #384]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 8004290:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004294:	6453      	str	r3, [r2, #68]	; 0x44
 8004296:	4b5e      	ldr	r3, [pc, #376]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042a2:	4b5b      	ldr	r3, [pc, #364]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	4a5a      	ldr	r2, [pc, #360]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 80042a8:	f043 0310 	orr.w	r3, r3, #16
 80042ac:	6313      	str	r3, [r2, #48]	; 0x30
 80042ae:	4b58      	ldr	r3, [pc, #352]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80042ba:	4b55      	ldr	r3, [pc, #340]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	4a54      	ldr	r2, [pc, #336]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 80042c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042c4:	6313      	str	r3, [r2, #48]	; 0x30
 80042c6:	4b52      	ldr	r3, [pc, #328]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80042d2:	4b4f      	ldr	r3, [pc, #316]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4a4e      	ldr	r2, [pc, #312]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 80042d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
 80042de:	4b4c      	ldr	r3, [pc, #304]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80042ea:	4b49      	ldr	r3, [pc, #292]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	4a48      	ldr	r2, [pc, #288]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 80042f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042f4:	6313      	str	r3, [r2, #48]	; 0x30
 80042f6:	4b46      	ldr	r3, [pc, #280]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004302:	4b43      	ldr	r3, [pc, #268]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	4a42      	ldr	r2, [pc, #264]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 8004308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800430c:	6313      	str	r3, [r2, #48]	; 0x30
 800430e:	4b40      	ldr	r3, [pc, #256]	; (8004410 <HAL_LTDC_MspInit+0x1ec>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800431a:	2310      	movs	r3, #16
 800431c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004320:	2302      	movs	r3, #2
 8004322:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004326:	2300      	movs	r3, #0
 8004328:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004332:	230e      	movs	r3, #14
 8004334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004338:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800433c:	4619      	mov	r1, r3
 800433e:	4835      	ldr	r0, [pc, #212]	; (8004414 <HAL_LTDC_MspInit+0x1f0>)
 8004340:	f001 ff94 	bl	800626c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004344:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004348:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434c:	2302      	movs	r3, #2
 800434e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004352:	2300      	movs	r3, #0
 8004354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004358:	2300      	movs	r3, #0
 800435a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800435e:	230e      	movs	r3, #14
 8004360:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004364:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004368:	4619      	mov	r1, r3
 800436a:	482b      	ldr	r0, [pc, #172]	; (8004418 <HAL_LTDC_MspInit+0x1f4>)
 800436c:	f001 ff7e 	bl	800626c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004370:	23f7      	movs	r3, #247	; 0xf7
 8004372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004376:	2302      	movs	r3, #2
 8004378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437c:	2300      	movs	r3, #0
 800437e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004382:	2300      	movs	r3, #0
 8004384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004388:	230e      	movs	r3, #14
 800438a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800438e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004392:	4619      	mov	r1, r3
 8004394:	4821      	ldr	r0, [pc, #132]	; (800441c <HAL_LTDC_MspInit+0x1f8>)
 8004396:	f001 ff69 	bl	800626c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800439a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800439e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a2:	2302      	movs	r3, #2
 80043a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80043b4:	2309      	movs	r3, #9
 80043b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80043ba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043be:	4619      	mov	r1, r3
 80043c0:	4817      	ldr	r0, [pc, #92]	; (8004420 <HAL_LTDC_MspInit+0x1fc>)
 80043c2:	f001 ff53 	bl	800626c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80043c6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80043ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ce:	2302      	movs	r3, #2
 80043d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043da:	2300      	movs	r3, #0
 80043dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80043e0:	230e      	movs	r3, #14
 80043e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80043e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043ea:	4619      	mov	r1, r3
 80043ec:	480d      	ldr	r0, [pc, #52]	; (8004424 <HAL_LTDC_MspInit+0x200>)
 80043ee:	f001 ff3d 	bl	800626c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80043f2:	2200      	movs	r2, #0
 80043f4:	2105      	movs	r1, #5
 80043f6:	2058      	movs	r0, #88	; 0x58
 80043f8:	f001 f842 	bl	8005480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80043fc:	2058      	movs	r0, #88	; 0x58
 80043fe:	f001 f85b 	bl	80054b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004402:	bf00      	nop
 8004404:	37b8      	adds	r7, #184	; 0xb8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40016800 	.word	0x40016800
 8004410:	40023800 	.word	0x40023800
 8004414:	40021000 	.word	0x40021000
 8004418:	40022400 	.word	0x40022400
 800441c:	40022800 	.word	0x40022800
 8004420:	40021800 	.word	0x40021800
 8004424:	40022000 	.word	0x40022000

08004428 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b0a4      	sub	sp, #144	; 0x90
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004430:	f107 030c 	add.w	r3, r7, #12
 8004434:	2284      	movs	r2, #132	; 0x84
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f009 fbef 	bl	800dc1c <memset>
  if(hrtc->Instance==RTC)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a0e      	ldr	r2, [pc, #56]	; (800447c <HAL_RTC_MspInit+0x54>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d114      	bne.n	8004472 <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004448:	2320      	movs	r3, #32
 800444a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800444c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004450:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004452:	f107 030c 	add.w	r3, r7, #12
 8004456:	4618      	mov	r0, r3
 8004458:	f004 f8ca 	bl	80085f0 <HAL_RCCEx_PeriphCLKConfig>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004462:	f7fe f8cf 	bl	8002604 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_RTC_MspInit+0x58>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446a:	4a05      	ldr	r2, [pc, #20]	; (8004480 <HAL_RTC_MspInit+0x58>)
 800446c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004470:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004472:	bf00      	nop
 8004474:	3790      	adds	r7, #144	; 0x90
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40002800 	.word	0x40002800
 8004480:	40023800 	.word	0x40023800

08004484 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800448c:	f107 0314 	add.w	r3, r7, #20
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	60da      	str	r2, [r3, #12]
 800449a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a25      	ldr	r2, [pc, #148]	; (8004538 <HAL_SPI_MspInit+0xb4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d144      	bne.n	8004530 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044a6:	4b25      	ldr	r3, [pc, #148]	; (800453c <HAL_SPI_MspInit+0xb8>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	4a24      	ldr	r2, [pc, #144]	; (800453c <HAL_SPI_MspInit+0xb8>)
 80044ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044b0:	6413      	str	r3, [r2, #64]	; 0x40
 80044b2:	4b22      	ldr	r3, [pc, #136]	; (800453c <HAL_SPI_MspInit+0xb8>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80044be:	4b1f      	ldr	r3, [pc, #124]	; (800453c <HAL_SPI_MspInit+0xb8>)
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	4a1e      	ldr	r2, [pc, #120]	; (800453c <HAL_SPI_MspInit+0xb8>)
 80044c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c8:	6313      	str	r3, [r2, #48]	; 0x30
 80044ca:	4b1c      	ldr	r3, [pc, #112]	; (800453c <HAL_SPI_MspInit+0xb8>)
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044d6:	4b19      	ldr	r3, [pc, #100]	; (800453c <HAL_SPI_MspInit+0xb8>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	4a18      	ldr	r2, [pc, #96]	; (800453c <HAL_SPI_MspInit+0xb8>)
 80044dc:	f043 0302 	orr.w	r3, r3, #2
 80044e0:	6313      	str	r3, [r2, #48]	; 0x30
 80044e2:	4b16      	ldr	r3, [pc, #88]	; (800453c <HAL_SPI_MspInit+0xb8>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	60bb      	str	r3, [r7, #8]
 80044ec:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80044ee:	2303      	movs	r3, #3
 80044f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f2:	2302      	movs	r3, #2
 80044f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044fa:	2303      	movs	r3, #3
 80044fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80044fe:	2305      	movs	r3, #5
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004502:	f107 0314 	add.w	r3, r7, #20
 8004506:	4619      	mov	r1, r3
 8004508:	480d      	ldr	r0, [pc, #52]	; (8004540 <HAL_SPI_MspInit+0xbc>)
 800450a:	f001 feaf 	bl	800626c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800450e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004514:	2302      	movs	r3, #2
 8004516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004518:	2300      	movs	r3, #0
 800451a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451c:	2300      	movs	r3, #0
 800451e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004520:	2305      	movs	r3, #5
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004524:	f107 0314 	add.w	r3, r7, #20
 8004528:	4619      	mov	r1, r3
 800452a:	4806      	ldr	r0, [pc, #24]	; (8004544 <HAL_SPI_MspInit+0xc0>)
 800452c:	f001 fe9e 	bl	800626c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004530:	bf00      	nop
 8004532:	3728      	adds	r7, #40	; 0x28
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40003800 	.word	0x40003800
 800453c:	40023800 	.word	0x40023800
 8004540:	40022000 	.word	0x40022000
 8004544:	40020400 	.word	0x40020400

08004548 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08e      	sub	sp, #56	; 0x38
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	60da      	str	r2, [r3, #12]
 800455e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a3b      	ldr	r2, [pc, #236]	; (8004654 <HAL_TIM_Base_MspInit+0x10c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d10c      	bne.n	8004584 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800456a:	4b3b      	ldr	r3, [pc, #236]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	4a3a      	ldr	r2, [pc, #232]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	6453      	str	r3, [r2, #68]	; 0x44
 8004576:	4b38      	ldr	r3, [pc, #224]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	623b      	str	r3, [r7, #32]
 8004580:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004582:	e062      	b.n	800464a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458c:	d10c      	bne.n	80045a8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800458e:	4b32      	ldr	r3, [pc, #200]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	4a31      	ldr	r2, [pc, #196]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6413      	str	r3, [r2, #64]	; 0x40
 800459a:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	69fb      	ldr	r3, [r7, #28]
}
 80045a6:	e050      	b.n	800464a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a2b      	ldr	r2, [pc, #172]	; (800465c <HAL_TIM_Base_MspInit+0x114>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d10c      	bne.n	80045cc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045b2:	4b29      	ldr	r3, [pc, #164]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	4a28      	ldr	r2, [pc, #160]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 80045b8:	f043 0302 	orr.w	r3, r3, #2
 80045bc:	6413      	str	r3, [r2, #64]	; 0x40
 80045be:	4b26      	ldr	r3, [pc, #152]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	61bb      	str	r3, [r7, #24]
 80045c8:	69bb      	ldr	r3, [r7, #24]
}
 80045ca:	e03e      	b.n	800464a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a23      	ldr	r2, [pc, #140]	; (8004660 <HAL_TIM_Base_MspInit+0x118>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d10c      	bne.n	80045f0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80045d6:	4b20      	ldr	r3, [pc, #128]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	4a1f      	ldr	r2, [pc, #124]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 80045dc:	f043 0308 	orr.w	r3, r3, #8
 80045e0:	6413      	str	r3, [r2, #64]	; 0x40
 80045e2:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 0308 	and.w	r3, r3, #8
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	697b      	ldr	r3, [r7, #20]
}
 80045ee:	e02c      	b.n	800464a <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1b      	ldr	r2, [pc, #108]	; (8004664 <HAL_TIM_Base_MspInit+0x11c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d127      	bne.n	800464a <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80045fa:	4b17      	ldr	r3, [pc, #92]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	4a16      	ldr	r2, [pc, #88]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 8004600:	f043 0302 	orr.w	r3, r3, #2
 8004604:	6453      	str	r3, [r2, #68]	; 0x44
 8004606:	4b14      	ldr	r3, [pc, #80]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004612:	4b11      	ldr	r3, [pc, #68]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	4a10      	ldr	r2, [pc, #64]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461c:	6313      	str	r3, [r2, #48]	; 0x30
 800461e:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <HAL_TIM_Base_MspInit+0x110>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800462a:	2304      	movs	r3, #4
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800462e:	2302      	movs	r3, #2
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004632:	2300      	movs	r3, #0
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004636:	2300      	movs	r3, #0
 8004638:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800463a:	2303      	movs	r3, #3
 800463c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800463e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004642:	4619      	mov	r1, r3
 8004644:	4808      	ldr	r0, [pc, #32]	; (8004668 <HAL_TIM_Base_MspInit+0x120>)
 8004646:	f001 fe11 	bl	800626c <HAL_GPIO_Init>
}
 800464a:	bf00      	nop
 800464c:	3738      	adds	r7, #56	; 0x38
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40010000 	.word	0x40010000
 8004658:	40023800 	.word	0x40023800
 800465c:	40000400 	.word	0x40000400
 8004660:	40000c00 	.word	0x40000c00
 8004664:	40010400 	.word	0x40010400
 8004668:	40022000 	.word	0x40022000

0800466c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b0b0      	sub	sp, #192	; 0xc0
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004674:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	609a      	str	r2, [r3, #8]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004688:	2284      	movs	r2, #132	; 0x84
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f009 fac5 	bl	800dc1c <memset>
  if(huart->Instance==UART7)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a79      	ldr	r2, [pc, #484]	; (800487c <HAL_UART_MspInit+0x210>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d13d      	bne.n	8004718 <HAL_UART_MspInit+0xac>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800469c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046ac:	4618      	mov	r0, r3
 80046ae:	f003 ff9f 	bl	80085f0 <HAL_RCCEx_PeriphCLKConfig>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80046b8:	f7fd ffa4 	bl	8002604 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80046bc:	4b70      	ldr	r3, [pc, #448]	; (8004880 <HAL_UART_MspInit+0x214>)
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	4a6f      	ldr	r2, [pc, #444]	; (8004880 <HAL_UART_MspInit+0x214>)
 80046c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046c6:	6413      	str	r3, [r2, #64]	; 0x40
 80046c8:	4b6d      	ldr	r3, [pc, #436]	; (8004880 <HAL_UART_MspInit+0x214>)
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046d4:	4b6a      	ldr	r3, [pc, #424]	; (8004880 <HAL_UART_MspInit+0x214>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	4a69      	ldr	r2, [pc, #420]	; (8004880 <HAL_UART_MspInit+0x214>)
 80046da:	f043 0320 	orr.w	r3, r3, #32
 80046de:	6313      	str	r3, [r2, #48]	; 0x30
 80046e0:	4b67      	ldr	r3, [pc, #412]	; (8004880 <HAL_UART_MspInit+0x214>)
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	623b      	str	r3, [r7, #32]
 80046ea:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80046ec:	23c0      	movs	r3, #192	; 0xc0
 80046ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f2:	2302      	movs	r3, #2
 80046f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046fe:	2303      	movs	r3, #3
 8004700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004704:	2308      	movs	r3, #8
 8004706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800470a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800470e:	4619      	mov	r1, r3
 8004710:	485c      	ldr	r0, [pc, #368]	; (8004884 <HAL_UART_MspInit+0x218>)
 8004712:	f001 fdab 	bl	800626c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004716:	e0ac      	b.n	8004872 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a5a      	ldr	r2, [pc, #360]	; (8004888 <HAL_UART_MspInit+0x21c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d165      	bne.n	80047ee <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004722:	2340      	movs	r3, #64	; 0x40
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004726:	2300      	movs	r3, #0
 8004728:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800472a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800472e:	4618      	mov	r0, r3
 8004730:	f003 ff5e 	bl	80085f0 <HAL_RCCEx_PeriphCLKConfig>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800473a:	f7fd ff63 	bl	8002604 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800473e:	4b50      	ldr	r3, [pc, #320]	; (8004880 <HAL_UART_MspInit+0x214>)
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	4a4f      	ldr	r2, [pc, #316]	; (8004880 <HAL_UART_MspInit+0x214>)
 8004744:	f043 0310 	orr.w	r3, r3, #16
 8004748:	6453      	str	r3, [r2, #68]	; 0x44
 800474a:	4b4d      	ldr	r3, [pc, #308]	; (8004880 <HAL_UART_MspInit+0x214>)
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	61fb      	str	r3, [r7, #28]
 8004754:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004756:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_UART_MspInit+0x214>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	4a49      	ldr	r2, [pc, #292]	; (8004880 <HAL_UART_MspInit+0x214>)
 800475c:	f043 0302 	orr.w	r3, r3, #2
 8004760:	6313      	str	r3, [r2, #48]	; 0x30
 8004762:	4b47      	ldr	r3, [pc, #284]	; (8004880 <HAL_UART_MspInit+0x214>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800476e:	4b44      	ldr	r3, [pc, #272]	; (8004880 <HAL_UART_MspInit+0x214>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	4a43      	ldr	r2, [pc, #268]	; (8004880 <HAL_UART_MspInit+0x214>)
 8004774:	f043 0301 	orr.w	r3, r3, #1
 8004778:	6313      	str	r3, [r2, #48]	; 0x30
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_UART_MspInit+0x214>)
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004786:	2380      	movs	r3, #128	; 0x80
 8004788:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478c:	2302      	movs	r3, #2
 800478e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004792:	2300      	movs	r3, #0
 8004794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004798:	2300      	movs	r3, #0
 800479a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800479e:	2307      	movs	r3, #7
 80047a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80047a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80047a8:	4619      	mov	r1, r3
 80047aa:	4838      	ldr	r0, [pc, #224]	; (800488c <HAL_UART_MspInit+0x220>)
 80047ac:	f001 fd5e 	bl	800626c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80047b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b8:	2302      	movs	r3, #2
 80047ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80047ca:	2307      	movs	r3, #7
 80047cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80047d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80047d4:	4619      	mov	r1, r3
 80047d6:	482e      	ldr	r0, [pc, #184]	; (8004890 <HAL_UART_MspInit+0x224>)
 80047d8:	f001 fd48 	bl	800626c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80047dc:	2200      	movs	r2, #0
 80047de:	2105      	movs	r1, #5
 80047e0:	2025      	movs	r0, #37	; 0x25
 80047e2:	f000 fe4d 	bl	8005480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80047e6:	2025      	movs	r0, #37	; 0x25
 80047e8:	f000 fe66 	bl	80054b8 <HAL_NVIC_EnableIRQ>
}
 80047ec:	e041      	b.n	8004872 <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a28      	ldr	r2, [pc, #160]	; (8004894 <HAL_UART_MspInit+0x228>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d13c      	bne.n	8004872 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80047f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047fc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80047fe:	2300      	movs	r3, #0
 8004800:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004804:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004808:	4618      	mov	r0, r3
 800480a:	f003 fef1 	bl	80085f0 <HAL_RCCEx_PeriphCLKConfig>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8004814:	f7fd fef6 	bl	8002604 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <HAL_UART_MspInit+0x214>)
 800481a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481c:	4a18      	ldr	r2, [pc, #96]	; (8004880 <HAL_UART_MspInit+0x214>)
 800481e:	f043 0320 	orr.w	r3, r3, #32
 8004822:	6453      	str	r3, [r2, #68]	; 0x44
 8004824:	4b16      	ldr	r3, [pc, #88]	; (8004880 <HAL_UART_MspInit+0x214>)
 8004826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	613b      	str	r3, [r7, #16]
 800482e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004830:	4b13      	ldr	r3, [pc, #76]	; (8004880 <HAL_UART_MspInit+0x214>)
 8004832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004834:	4a12      	ldr	r2, [pc, #72]	; (8004880 <HAL_UART_MspInit+0x214>)
 8004836:	f043 0304 	orr.w	r3, r3, #4
 800483a:	6313      	str	r3, [r2, #48]	; 0x30
 800483c:	4b10      	ldr	r3, [pc, #64]	; (8004880 <HAL_UART_MspInit+0x214>)
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004848:	23c0      	movs	r3, #192	; 0xc0
 800484a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484e:	2302      	movs	r3, #2
 8004850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004854:	2300      	movs	r3, #0
 8004856:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800485a:	2303      	movs	r3, #3
 800485c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004860:	2308      	movs	r3, #8
 8004862:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004866:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800486a:	4619      	mov	r1, r3
 800486c:	480a      	ldr	r0, [pc, #40]	; (8004898 <HAL_UART_MspInit+0x22c>)
 800486e:	f001 fcfd 	bl	800626c <HAL_GPIO_Init>
}
 8004872:	bf00      	nop
 8004874:	37c0      	adds	r7, #192	; 0xc0
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40007800 	.word	0x40007800
 8004880:	40023800 	.word	0x40023800
 8004884:	40021400 	.word	0x40021400
 8004888:	40011000 	.word	0x40011000
 800488c:	40020400 	.word	0x40020400
 8004890:	40020000 	.word	0x40020000
 8004894:	40011400 	.word	0x40011400
 8004898:	40020800 	.word	0x40020800

0800489c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80048a2:	1d3b      	adds	r3, r7, #4
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	605a      	str	r2, [r3, #4]
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80048b0:	4b3a      	ldr	r3, [pc, #232]	; (800499c <HAL_FMC_MspInit+0x100>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d16d      	bne.n	8004994 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80048b8:	4b38      	ldr	r3, [pc, #224]	; (800499c <HAL_FMC_MspInit+0x100>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80048be:	4b38      	ldr	r3, [pc, #224]	; (80049a0 <HAL_FMC_MspInit+0x104>)
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	4a37      	ldr	r2, [pc, #220]	; (80049a0 <HAL_FMC_MspInit+0x104>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	6393      	str	r3, [r2, #56]	; 0x38
 80048ca:	4b35      	ldr	r3, [pc, #212]	; (80049a0 <HAL_FMC_MspInit+0x104>)
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80048d6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80048da:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048dc:	2302      	movs	r3, #2
 80048de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e4:	2303      	movs	r3, #3
 80048e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80048e8:	230c      	movs	r3, #12
 80048ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048ec:	1d3b      	adds	r3, r7, #4
 80048ee:	4619      	mov	r1, r3
 80048f0:	482c      	ldr	r0, [pc, #176]	; (80049a4 <HAL_FMC_MspInit+0x108>)
 80048f2:	f001 fcbb 	bl	800626c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80048f6:	f248 1333 	movw	r3, #33075	; 0x8133
 80048fa:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048fc:	2302      	movs	r3, #2
 80048fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004904:	2303      	movs	r3, #3
 8004906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004908:	230c      	movs	r3, #12
 800490a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800490c:	1d3b      	adds	r3, r7, #4
 800490e:	4619      	mov	r1, r3
 8004910:	4825      	ldr	r0, [pc, #148]	; (80049a8 <HAL_FMC_MspInit+0x10c>)
 8004912:	f001 fcab 	bl	800626c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004916:	f24c 7303 	movw	r3, #50947	; 0xc703
 800491a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800491c:	2302      	movs	r3, #2
 800491e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004924:	2303      	movs	r3, #3
 8004926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004928:	230c      	movs	r3, #12
 800492a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800492c:	1d3b      	adds	r3, r7, #4
 800492e:	4619      	mov	r1, r3
 8004930:	481e      	ldr	r0, [pc, #120]	; (80049ac <HAL_FMC_MspInit+0x110>)
 8004932:	f001 fc9b 	bl	800626c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004936:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800493a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493c:	2302      	movs	r3, #2
 800493e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004944:	2303      	movs	r3, #3
 8004946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004948:	230c      	movs	r3, #12
 800494a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800494c:	1d3b      	adds	r3, r7, #4
 800494e:	4619      	mov	r1, r3
 8004950:	4817      	ldr	r0, [pc, #92]	; (80049b0 <HAL_FMC_MspInit+0x114>)
 8004952:	f001 fc8b 	bl	800626c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004956:	2328      	movs	r3, #40	; 0x28
 8004958:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800495a:	2302      	movs	r3, #2
 800495c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004962:	2303      	movs	r3, #3
 8004964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004966:	230c      	movs	r3, #12
 8004968:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	4619      	mov	r1, r3
 800496e:	4811      	ldr	r0, [pc, #68]	; (80049b4 <HAL_FMC_MspInit+0x118>)
 8004970:	f001 fc7c 	bl	800626c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004974:	2308      	movs	r3, #8
 8004976:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004978:	2302      	movs	r3, #2
 800497a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004980:	2303      	movs	r3, #3
 8004982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004984:	230c      	movs	r3, #12
 8004986:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004988:	1d3b      	adds	r3, r7, #4
 800498a:	4619      	mov	r1, r3
 800498c:	480a      	ldr	r0, [pc, #40]	; (80049b8 <HAL_FMC_MspInit+0x11c>)
 800498e:	f001 fc6d 	bl	800626c <HAL_GPIO_Init>
 8004992:	e000      	b.n	8004996 <HAL_FMC_MspInit+0xfa>
    return;
 8004994:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	200005a4 	.word	0x200005a4
 80049a0:	40023800 	.word	0x40023800
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40021800 	.word	0x40021800
 80049ac:	40020c00 	.word	0x40020c00
 80049b0:	40021400 	.word	0x40021400
 80049b4:	40021c00 	.word	0x40021c00
 80049b8:	40020800 	.word	0x40020800

080049bc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80049c4:	f7ff ff6a 	bl	800489c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08c      	sub	sp, #48	; 0x30
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80049e0:	2200      	movs	r2, #0
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	2036      	movs	r0, #54	; 0x36
 80049e6:	f000 fd4b 	bl	8005480 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80049ea:	2036      	movs	r0, #54	; 0x36
 80049ec:	f000 fd64 	bl	80054b8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80049f0:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <HAL_InitTick+0xa0>)
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <HAL_InitTick+0xa0>)
 80049f6:	f043 0310 	orr.w	r3, r3, #16
 80049fa:	6413      	str	r3, [r2, #64]	; 0x40
 80049fc:	4b1c      	ldr	r3, [pc, #112]	; (8004a70 <HAL_InitTick+0xa0>)
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004a08:	f107 0210 	add.w	r2, r7, #16
 8004a0c:	f107 0314 	add.w	r3, r7, #20
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f003 fdba 	bl	800858c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004a18:	f003 fd90 	bl	800853c <HAL_RCC_GetPCLK1Freq>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <HAL_InitTick+0xa4>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	0c9b      	lsrs	r3, r3, #18
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004a30:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <HAL_InitTick+0xa8>)
 8004a32:	4a12      	ldr	r2, [pc, #72]	; (8004a7c <HAL_InitTick+0xac>)
 8004a34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <HAL_InitTick+0xa8>)
 8004a38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a3c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004a3e:	4a0e      	ldr	r2, [pc, #56]	; (8004a78 <HAL_InitTick+0xa8>)
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <HAL_InitTick+0xa8>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_InitTick+0xa8>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004a50:	4809      	ldr	r0, [pc, #36]	; (8004a78 <HAL_InitTick+0xa8>)
 8004a52:	f004 fed1 	bl	80097f8 <HAL_TIM_Base_Init>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d104      	bne.n	8004a66 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004a5c:	4806      	ldr	r0, [pc, #24]	; (8004a78 <HAL_InitTick+0xa8>)
 8004a5e:	f004 ff23 	bl	80098a8 <HAL_TIM_Base_Start_IT>
 8004a62:	4603      	mov	r3, r0
 8004a64:	e000      	b.n	8004a68 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3730      	adds	r7, #48	; 0x30
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40023800 	.word	0x40023800
 8004a74:	431bde83 	.word	0x431bde83
 8004a78:	200087d0 	.word	0x200087d0
 8004a7c:	40001000 	.word	0x40001000

08004a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a84:	e7fe      	b.n	8004a84 <NMI_Handler+0x4>

08004a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a86:	b480      	push	{r7}
 8004a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a8a:	e7fe      	b.n	8004a8a <HardFault_Handler+0x4>

08004a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a90:	e7fe      	b.n	8004a90 <MemManage_Handler+0x4>

08004a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a92:	b480      	push	{r7}
 8004a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a96:	e7fe      	b.n	8004a96 <BusFault_Handler+0x4>

08004a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a9c:	e7fe      	b.n	8004a9c <UsageFault_Handler+0x4>

08004a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ab0:	4802      	ldr	r0, [pc, #8]	; (8004abc <USART1_IRQHandler+0x10>)
 8004ab2:	f005 fbb7 	bl	800a224 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	200084a8 	.word	0x200084a8

08004ac0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWDIO_Pin);
 8004ac4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004ac8:	f001 febc 	bl	8006844 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004acc:	bf00      	nop
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <TIM6_DAC_IRQHandler+0x20>)
 8004ad6:	791b      	ldrb	r3, [r3, #4]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8004ade:	4804      	ldr	r0, [pc, #16]	; (8004af0 <TIM6_DAC_IRQHandler+0x20>)
 8004ae0:	f000 fd1a 	bl	8005518 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004ae4:	4803      	ldr	r0, [pc, #12]	; (8004af4 <TIM6_DAC_IRQHandler+0x24>)
 8004ae6:	f004 ff57 	bl	8009998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20008530 	.word	0x20008530
 8004af4:	200087d0 	.word	0x200087d0

08004af8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004afc:	4802      	ldr	r0, [pc, #8]	; (8004b08 <LTDC_IRQHandler+0x10>)
 8004afe:	f002 fdc3 	bl	8007688 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20008368 	.word	0x20008368

08004b0c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004b10:	4802      	ldr	r0, [pc, #8]	; (8004b1c <DMA2D_IRQHandler+0x10>)
 8004b12:	f001 f96d 	bl	8005df0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004b16:	bf00      	nop
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20008634 	.word	0x20008634

08004b20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <SystemInit+0x20>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2a:	4a05      	ldr	r2, [pc, #20]	; (8004b40 <SystemInit+0x20>)
 8004b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	e000ed00 	.word	0xe000ed00

08004b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b48:	480d      	ldr	r0, [pc, #52]	; (8004b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b4a:	490e      	ldr	r1, [pc, #56]	; (8004b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b4c:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b50:	e002      	b.n	8004b58 <LoopCopyDataInit>

08004b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b56:	3304      	adds	r3, #4

08004b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b5c:	d3f9      	bcc.n	8004b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b5e:	4a0b      	ldr	r2, [pc, #44]	; (8004b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b60:	4c0b      	ldr	r4, [pc, #44]	; (8004b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b64:	e001      	b.n	8004b6a <LoopFillZerobss>

08004b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b68:	3204      	adds	r2, #4

08004b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b6c:	d3fb      	bcc.n	8004b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b6e:	f7ff ffd7 	bl	8004b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b72:	f009 f81f 	bl	800dbb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b76:	f7fc f8d3 	bl	8000d20 <main>
  bx  lr    
 8004b7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b7c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b84:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8004b88:	08034090 	.word	0x08034090
  ldr r2, =_sbss
 8004b8c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8004b90:	2000882c 	.word	0x2000882c

08004b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b94:	e7fe      	b.n	8004b94 <ADC_IRQHandler>
	...

08004b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b9c:	4b08      	ldr	r3, [pc, #32]	; (8004bc0 <HAL_Init+0x28>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a07      	ldr	r2, [pc, #28]	; (8004bc0 <HAL_Init+0x28>)
 8004ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ba8:	2003      	movs	r0, #3
 8004baa:	f000 fc5e 	bl	800546a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bae:	200f      	movs	r0, #15
 8004bb0:	f7ff ff0e 	bl	80049d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bb4:	f7ff f94e 	bl	8003e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40023c00 	.word	0x40023c00

08004bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_IncTick+0x20>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_IncTick+0x24>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <HAL_IncTick+0x24>)
 8004bd6:	6013      	str	r3, [r2, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000048 	.word	0x20000048
 8004be8:	2000881c 	.word	0x2000881c

08004bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return uwTick;
 8004bf0:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <HAL_GetTick+0x14>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	2000881c 	.word	0x2000881c

08004c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c0c:	f7ff ffee 	bl	8004bec <HAL_GetTick>
 8004c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1c:	d005      	beq.n	8004c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <HAL_Delay+0x44>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c2a:	bf00      	nop
 8004c2c:	f7ff ffde 	bl	8004bec <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d8f7      	bhi.n	8004c2c <HAL_Delay+0x28>
  {
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000048 	.word	0x20000048

08004c4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e031      	b.n	8004cc6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff f91a 	bl	8003ea4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d116      	bne.n	8004cb8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c8e:	4b10      	ldr	r3, [pc, #64]	; (8004cd0 <HAL_ADC_Init+0x84>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	f043 0202 	orr.w	r2, r3, #2
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fa3e 	bl	800511c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f023 0303 	bic.w	r3, r3, #3
 8004cae:	f043 0201 	orr.w	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40
 8004cb6:	e001      	b.n	8004cbc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	ffffeefd 	.word	0xffffeefd

08004cd4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_ADC_Start+0x1a>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e0ad      	b.n	8004e4a <HAL_ADC_Start+0x176>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d018      	beq.n	8004d36 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004d14:	4b50      	ldr	r3, [pc, #320]	; (8004e58 <HAL_ADC_Start+0x184>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a50      	ldr	r2, [pc, #320]	; (8004e5c <HAL_ADC_Start+0x188>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	0c9a      	lsrs	r2, r3, #18
 8004d20:	4613      	mov	r3, r2
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	4413      	add	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004d28:	e002      	b.n	8004d30 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f9      	bne.n	8004d2a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d175      	bne.n	8004e30 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d48:	4b45      	ldr	r3, [pc, #276]	; (8004e60 <HAL_ADC_Start+0x18c>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7e:	d106      	bne.n	8004d8e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d84:	f023 0206 	bic.w	r2, r3, #6
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	645a      	str	r2, [r3, #68]	; 0x44
 8004d8c:	e002      	b.n	8004d94 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004da4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004da6:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <HAL_ADC_Start+0x190>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 031f 	and.w	r3, r3, #31
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10f      	bne.n	8004dd2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d143      	bne.n	8004e48 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	e03a      	b.n	8004e48 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a24      	ldr	r2, [pc, #144]	; (8004e68 <HAL_ADC_Start+0x194>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d10e      	bne.n	8004dfa <HAL_ADC_Start+0x126>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d107      	bne.n	8004dfa <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004df8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004dfa:	4b1a      	ldr	r3, [pc, #104]	; (8004e64 <HAL_ADC_Start+0x190>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d120      	bne.n	8004e48 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a18      	ldr	r2, [pc, #96]	; (8004e6c <HAL_ADC_Start+0x198>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d11b      	bne.n	8004e48 <HAL_ADC_Start+0x174>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d114      	bne.n	8004e48 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e2c:	609a      	str	r2, [r3, #8]
 8004e2e:	e00b      	b.n	8004e48 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f043 0210 	orr.w	r2, r3, #16
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e40:	f043 0201 	orr.w	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	20000040 	.word	0x20000040
 8004e5c:	431bde83 	.word	0x431bde83
 8004e60:	fffff8fe 	.word	0xfffff8fe
 8004e64:	40012300 	.word	0x40012300
 8004e68:	40012000 	.word	0x40012000
 8004e6c:	40012200 	.word	0x40012200

08004e70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_ADC_ConfigChannel+0x1c>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e136      	b.n	80050fa <HAL_ADC_ConfigChannel+0x28a>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b09      	cmp	r3, #9
 8004e9a:	d93a      	bls.n	8004f12 <HAL_ADC_ConfigChannel+0xa2>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ea4:	d035      	beq.n	8004f12 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68d9      	ldr	r1, [r3, #12]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	4413      	add	r3, r2
 8004eba:	3b1e      	subs	r3, #30
 8004ebc:	2207      	movs	r2, #7
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43da      	mvns	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	400a      	ands	r2, r1
 8004eca:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a8d      	ldr	r2, [pc, #564]	; (8005108 <HAL_ADC_ConfigChannel+0x298>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d10a      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68d9      	ldr	r1, [r3, #12]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	061a      	lsls	r2, r3, #24
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004eea:	e035      	b.n	8004f58 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68d9      	ldr	r1, [r3, #12]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	4618      	mov	r0, r3
 8004efe:	4603      	mov	r3, r0
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	4403      	add	r3, r0
 8004f04:	3b1e      	subs	r3, #30
 8004f06:	409a      	lsls	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f10:	e022      	b.n	8004f58 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6919      	ldr	r1, [r3, #16]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4613      	mov	r3, r2
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	4413      	add	r3, r2
 8004f26:	2207      	movs	r2, #7
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43da      	mvns	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	400a      	ands	r2, r1
 8004f34:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6919      	ldr	r1, [r3, #16]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	4618      	mov	r0, r3
 8004f48:	4603      	mov	r3, r0
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	4403      	add	r3, r0
 8004f4e:	409a      	lsls	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b06      	cmp	r3, #6
 8004f5e:	d824      	bhi.n	8004faa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	3b05      	subs	r3, #5
 8004f72:	221f      	movs	r2, #31
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	43da      	mvns	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	400a      	ands	r2, r1
 8004f80:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	4618      	mov	r0, r3
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	3b05      	subs	r3, #5
 8004f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	635a      	str	r2, [r3, #52]	; 0x34
 8004fa8:	e04c      	b.n	8005044 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b0c      	cmp	r3, #12
 8004fb0:	d824      	bhi.n	8004ffc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	3b23      	subs	r3, #35	; 0x23
 8004fc4:	221f      	movs	r2, #31
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43da      	mvns	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	400a      	ands	r2, r1
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	3b23      	subs	r3, #35	; 0x23
 8004fee:	fa00 f203 	lsl.w	r2, r0, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8004ffa:	e023      	b.n	8005044 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	3b41      	subs	r3, #65	; 0x41
 800500e:	221f      	movs	r2, #31
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	43da      	mvns	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	400a      	ands	r2, r1
 800501c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	b29b      	uxth	r3, r3
 800502a:	4618      	mov	r0, r3
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	3b41      	subs	r3, #65	; 0x41
 8005038:	fa00 f203 	lsl.w	r2, r0, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a30      	ldr	r2, [pc, #192]	; (800510c <HAL_ADC_ConfigChannel+0x29c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d10a      	bne.n	8005064 <HAL_ADC_ConfigChannel+0x1f4>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005056:	d105      	bne.n	8005064 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005058:	4b2d      	ldr	r3, [pc, #180]	; (8005110 <HAL_ADC_ConfigChannel+0x2a0>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4a2c      	ldr	r2, [pc, #176]	; (8005110 <HAL_ADC_ConfigChannel+0x2a0>)
 800505e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005062:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a28      	ldr	r2, [pc, #160]	; (800510c <HAL_ADC_ConfigChannel+0x29c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d10f      	bne.n	800508e <HAL_ADC_ConfigChannel+0x21e>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b12      	cmp	r3, #18
 8005074:	d10b      	bne.n	800508e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005076:	4b26      	ldr	r3, [pc, #152]	; (8005110 <HAL_ADC_ConfigChannel+0x2a0>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	4a25      	ldr	r2, [pc, #148]	; (8005110 <HAL_ADC_ConfigChannel+0x2a0>)
 800507c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005080:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005082:	4b23      	ldr	r3, [pc, #140]	; (8005110 <HAL_ADC_ConfigChannel+0x2a0>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4a22      	ldr	r2, [pc, #136]	; (8005110 <HAL_ADC_ConfigChannel+0x2a0>)
 8005088:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800508c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1e      	ldr	r2, [pc, #120]	; (800510c <HAL_ADC_ConfigChannel+0x29c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d12b      	bne.n	80050f0 <HAL_ADC_ConfigChannel+0x280>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1a      	ldr	r2, [pc, #104]	; (8005108 <HAL_ADC_ConfigChannel+0x298>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <HAL_ADC_ConfigChannel+0x23a>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b11      	cmp	r3, #17
 80050a8:	d122      	bne.n	80050f0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80050aa:	4b19      	ldr	r3, [pc, #100]	; (8005110 <HAL_ADC_ConfigChannel+0x2a0>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	4a18      	ldr	r2, [pc, #96]	; (8005110 <HAL_ADC_ConfigChannel+0x2a0>)
 80050b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80050b4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80050b6:	4b16      	ldr	r3, [pc, #88]	; (8005110 <HAL_ADC_ConfigChannel+0x2a0>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4a15      	ldr	r2, [pc, #84]	; (8005110 <HAL_ADC_ConfigChannel+0x2a0>)
 80050bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050c0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a10      	ldr	r2, [pc, #64]	; (8005108 <HAL_ADC_ConfigChannel+0x298>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d111      	bne.n	80050f0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80050cc:	4b11      	ldr	r3, [pc, #68]	; (8005114 <HAL_ADC_ConfigChannel+0x2a4>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a11      	ldr	r2, [pc, #68]	; (8005118 <HAL_ADC_ConfigChannel+0x2a8>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	0c9a      	lsrs	r2, r3, #18
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80050e2:	e002      	b.n	80050ea <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3b01      	subs	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f9      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	10000012 	.word	0x10000012
 800510c:	40012000 	.word	0x40012000
 8005110:	40012300 	.word	0x40012300
 8005114:	20000040 	.word	0x20000040
 8005118:	431bde83 	.word	0x431bde83

0800511c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005124:	4b78      	ldr	r3, [pc, #480]	; (8005308 <ADC_Init+0x1ec>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4a77      	ldr	r2, [pc, #476]	; (8005308 <ADC_Init+0x1ec>)
 800512a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800512e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005130:	4b75      	ldr	r3, [pc, #468]	; (8005308 <ADC_Init+0x1ec>)
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	4973      	ldr	r1, [pc, #460]	; (8005308 <ADC_Init+0x1ec>)
 800513a:	4313      	orrs	r3, r2
 800513c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800514c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6859      	ldr	r1, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	021a      	lsls	r2, r3, #8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005170:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6859      	ldr	r1, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005192:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6899      	ldr	r1, [r3, #8]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	4a58      	ldr	r2, [pc, #352]	; (800530c <ADC_Init+0x1f0>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d022      	beq.n	80051f6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6899      	ldr	r1, [r3, #8]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6899      	ldr	r1, [r3, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	609a      	str	r2, [r3, #8]
 80051f4:	e00f      	b.n	8005216 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005204:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005214:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0202 	bic.w	r2, r2, #2
 8005224:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6899      	ldr	r1, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	005a      	lsls	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01b      	beq.n	800527c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005252:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005262:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6859      	ldr	r1, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	3b01      	subs	r3, #1
 8005270:	035a      	lsls	r2, r3, #13
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	e007      	b.n	800528c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800528a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800529a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	051a      	lsls	r2, r3, #20
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6899      	ldr	r1, [r3, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052ce:	025a      	lsls	r2, r3, #9
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6899      	ldr	r1, [r3, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	029a      	lsls	r2, r3, #10
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	609a      	str	r2, [r3, #8]
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	40012300 	.word	0x40012300
 800530c:	0f000001 	.word	0x0f000001

08005310 <__NVIC_SetPriorityGrouping>:
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <__NVIC_SetPriorityGrouping+0x40>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800532c:	4013      	ands	r3, r2
 800532e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005338:	4b06      	ldr	r3, [pc, #24]	; (8005354 <__NVIC_SetPriorityGrouping+0x44>)
 800533a:	4313      	orrs	r3, r2
 800533c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800533e:	4a04      	ldr	r2, [pc, #16]	; (8005350 <__NVIC_SetPriorityGrouping+0x40>)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	60d3      	str	r3, [r2, #12]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	e000ed00 	.word	0xe000ed00
 8005354:	05fa0000 	.word	0x05fa0000

08005358 <__NVIC_GetPriorityGrouping>:
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800535c:	4b04      	ldr	r3, [pc, #16]	; (8005370 <__NVIC_GetPriorityGrouping+0x18>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	0a1b      	lsrs	r3, r3, #8
 8005362:	f003 0307 	and.w	r3, r3, #7
}
 8005366:	4618      	mov	r0, r3
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	e000ed00 	.word	0xe000ed00

08005374 <__NVIC_EnableIRQ>:
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800537e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005382:	2b00      	cmp	r3, #0
 8005384:	db0b      	blt.n	800539e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005386:	79fb      	ldrb	r3, [r7, #7]
 8005388:	f003 021f 	and.w	r2, r3, #31
 800538c:	4907      	ldr	r1, [pc, #28]	; (80053ac <__NVIC_EnableIRQ+0x38>)
 800538e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	2001      	movs	r0, #1
 8005396:	fa00 f202 	lsl.w	r2, r0, r2
 800539a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	e000e100 	.word	0xe000e100

080053b0 <__NVIC_SetPriority>:
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4603      	mov	r3, r0
 80053b8:	6039      	str	r1, [r7, #0]
 80053ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	db0a      	blt.n	80053da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	490c      	ldr	r1, [pc, #48]	; (80053fc <__NVIC_SetPriority+0x4c>)
 80053ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ce:	0112      	lsls	r2, r2, #4
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	440b      	add	r3, r1
 80053d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80053d8:	e00a      	b.n	80053f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	4908      	ldr	r1, [pc, #32]	; (8005400 <__NVIC_SetPriority+0x50>)
 80053e0:	79fb      	ldrb	r3, [r7, #7]
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	3b04      	subs	r3, #4
 80053e8:	0112      	lsls	r2, r2, #4
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	440b      	add	r3, r1
 80053ee:	761a      	strb	r2, [r3, #24]
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	e000e100 	.word	0xe000e100
 8005400:	e000ed00 	.word	0xe000ed00

08005404 <NVIC_EncodePriority>:
{
 8005404:	b480      	push	{r7}
 8005406:	b089      	sub	sp, #36	; 0x24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f003 0307 	and.w	r3, r3, #7
 8005416:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f1c3 0307 	rsb	r3, r3, #7
 800541e:	2b04      	cmp	r3, #4
 8005420:	bf28      	it	cs
 8005422:	2304      	movcs	r3, #4
 8005424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	3304      	adds	r3, #4
 800542a:	2b06      	cmp	r3, #6
 800542c:	d902      	bls.n	8005434 <NVIC_EncodePriority+0x30>
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	3b03      	subs	r3, #3
 8005432:	e000      	b.n	8005436 <NVIC_EncodePriority+0x32>
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005438:	f04f 32ff 	mov.w	r2, #4294967295
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	fa02 f303 	lsl.w	r3, r2, r3
 8005442:	43da      	mvns	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	401a      	ands	r2, r3
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800544c:	f04f 31ff 	mov.w	r1, #4294967295
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	fa01 f303 	lsl.w	r3, r1, r3
 8005456:	43d9      	mvns	r1, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800545c:	4313      	orrs	r3, r2
}
 800545e:	4618      	mov	r0, r3
 8005460:	3724      	adds	r7, #36	; 0x24
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b082      	sub	sp, #8
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff ff4c 	bl	8005310 <__NVIC_SetPriorityGrouping>
}
 8005478:	bf00      	nop
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005492:	f7ff ff61 	bl	8005358 <__NVIC_GetPriorityGrouping>
 8005496:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	68b9      	ldr	r1, [r7, #8]
 800549c:	6978      	ldr	r0, [r7, #20]
 800549e:	f7ff ffb1 	bl	8005404 <NVIC_EncodePriority>
 80054a2:	4602      	mov	r2, r0
 80054a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054a8:	4611      	mov	r1, r2
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff ff80 	bl	80053b0 <__NVIC_SetPriority>
}
 80054b0:	bf00      	nop
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff ff54 	bl	8005374 <__NVIC_EnableIRQ>
}
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e014      	b.n	8005510 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	791b      	ldrb	r3, [r3, #4]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d105      	bne.n	80054fc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fe fd42 	bl	8003f80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800552a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800552e:	d120      	bne.n	8005572 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800553a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553e:	d118      	bne.n	8005572 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2204      	movs	r2, #4
 8005544:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f043 0201 	orr.w	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800555a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800556a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f82d 	bl	80055cc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800557c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005580:	d120      	bne.n	80055c4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800558c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005590:	d118      	bne.n	80055c4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2204      	movs	r2, #4
 8005596:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f043 0202 	orr.w	r2, r3, #2
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80055ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80055bc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f85d 	bl	800567e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80055c4:	bf00      	nop
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	795b      	ldrb	r3, [r3, #5]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_DAC_ConfigChannel+0x18>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e03c      	b.n	8005672 <HAL_DAC_ConfigChannel+0x92>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2202      	movs	r2, #2
 8005602:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f003 0310 	and.w	r3, r3, #16
 8005612:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	43db      	mvns	r3, r3
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4013      	ands	r3, r2
 8005620:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4313      	orrs	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6819      	ldr	r1, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	22c0      	movs	r2, #192	; 0xc0
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	43da      	mvns	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	400a      	ands	r2, r1
 8005662:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80056a0:	f7ff faa4 	bl	8004bec <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e099      	b.n	80057e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0201 	bic.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056d0:	e00f      	b.n	80056f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056d2:	f7ff fa8b 	bl	8004bec <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b05      	cmp	r3, #5
 80056de:	d908      	bls.n	80056f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2203      	movs	r2, #3
 80056ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e078      	b.n	80057e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e8      	bne.n	80056d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	4b38      	ldr	r3, [pc, #224]	; (80057ec <HAL_DMA_Init+0x158>)
 800570c:	4013      	ands	r3, r2
 800570e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800571e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800572a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005736:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2b04      	cmp	r3, #4
 800574a:	d107      	bne.n	800575c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	4313      	orrs	r3, r2
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 0307 	bic.w	r3, r3, #7
 8005772:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b04      	cmp	r3, #4
 8005784:	d117      	bne.n	80057b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00e      	beq.n	80057b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f94f 	bl	8005a3c <DMA_CheckFifoParam>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2240      	movs	r2, #64	; 0x40
 80057a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80057b2:	2301      	movs	r3, #1
 80057b4:	e016      	b.n	80057e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f906 	bl	80059d0 <DMA_CalcBaseAndBitshift>
 80057c4:	4603      	mov	r3, r0
 80057c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057cc:	223f      	movs	r2, #63	; 0x3f
 80057ce:	409a      	lsls	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	f010803f 	.word	0xf010803f

080057f0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e050      	b.n	80058a4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d101      	bne.n	8005812 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800580e:	2302      	movs	r3, #2
 8005810:	e048      	b.n	80058a4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0201 	bic.w	r2, r2, #1
 8005820:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2200      	movs	r2, #0
 8005830:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2200      	movs	r2, #0
 8005838:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2200      	movs	r2, #0
 8005840:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2200      	movs	r2, #0
 8005848:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2221      	movs	r2, #33	; 0x21
 8005850:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f8bc 	bl	80059d0 <DMA_CalcBaseAndBitshift>
 8005858:	4603      	mov	r3, r0
 800585a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005860:	223f      	movs	r2, #63	; 0x3f
 8005862:	409a      	lsls	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80058ba:	f7ff f997 	bl	8004bec <HAL_GetTick>
 80058be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d008      	beq.n	80058de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2280      	movs	r2, #128	; 0x80
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e052      	b.n	8005984 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f022 0216 	bic.w	r2, r2, #22
 80058ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695a      	ldr	r2, [r3, #20]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d103      	bne.n	800590e <HAL_DMA_Abort+0x62>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590a:	2b00      	cmp	r3, #0
 800590c:	d007      	beq.n	800591e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0208 	bic.w	r2, r2, #8
 800591c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0201 	bic.w	r2, r2, #1
 800592c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800592e:	e013      	b.n	8005958 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005930:	f7ff f95c 	bl	8004bec <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b05      	cmp	r3, #5
 800593c:	d90c      	bls.n	8005958 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2220      	movs	r2, #32
 8005942:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2203      	movs	r2, #3
 8005948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e015      	b.n	8005984 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e4      	bne.n	8005930 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596a:	223f      	movs	r2, #63	; 0x3f
 800596c:	409a      	lsls	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d004      	beq.n	80059aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2280      	movs	r2, #128	; 0x80
 80059a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e00c      	b.n	80059c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2205      	movs	r2, #5
 80059ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	3b10      	subs	r3, #16
 80059e0:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <DMA_CalcBaseAndBitshift+0x60>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	091b      	lsrs	r3, r3, #4
 80059e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059ea:	4a12      	ldr	r2, [pc, #72]	; (8005a34 <DMA_CalcBaseAndBitshift+0x64>)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d908      	bls.n	8005a10 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <DMA_CalcBaseAndBitshift+0x68>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	1d1a      	adds	r2, r3, #4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	659a      	str	r2, [r3, #88]	; 0x58
 8005a0e:	e006      	b.n	8005a1e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <DMA_CalcBaseAndBitshift+0x68>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	aaaaaaab 	.word	0xaaaaaaab
 8005a34:	08034018 	.word	0x08034018
 8005a38:	fffffc00 	.word	0xfffffc00

08005a3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d11f      	bne.n	8005a96 <DMA_CheckFifoParam+0x5a>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d856      	bhi.n	8005b0a <DMA_CheckFifoParam+0xce>
 8005a5c:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <DMA_CheckFifoParam+0x28>)
 8005a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a62:	bf00      	nop
 8005a64:	08005a75 	.word	0x08005a75
 8005a68:	08005a87 	.word	0x08005a87
 8005a6c:	08005a75 	.word	0x08005a75
 8005a70:	08005b0b 	.word	0x08005b0b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d046      	beq.n	8005b0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a84:	e043      	b.n	8005b0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a8e:	d140      	bne.n	8005b12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a94:	e03d      	b.n	8005b12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a9e:	d121      	bne.n	8005ae4 <DMA_CheckFifoParam+0xa8>
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d837      	bhi.n	8005b16 <DMA_CheckFifoParam+0xda>
 8005aa6:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <DMA_CheckFifoParam+0x70>)
 8005aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aac:	08005abd 	.word	0x08005abd
 8005ab0:	08005ac3 	.word	0x08005ac3
 8005ab4:	08005abd 	.word	0x08005abd
 8005ab8:	08005ad5 	.word	0x08005ad5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
      break;
 8005ac0:	e030      	b.n	8005b24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d025      	beq.n	8005b1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad2:	e022      	b.n	8005b1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005adc:	d11f      	bne.n	8005b1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ae2:	e01c      	b.n	8005b1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d903      	bls.n	8005af2 <DMA_CheckFifoParam+0xb6>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b03      	cmp	r3, #3
 8005aee:	d003      	beq.n	8005af8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005af0:	e018      	b.n	8005b24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	73fb      	strb	r3, [r7, #15]
      break;
 8005af6:	e015      	b.n	8005b24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00e      	beq.n	8005b22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	73fb      	strb	r3, [r7, #15]
      break;
 8005b08:	e00b      	b.n	8005b22 <DMA_CheckFifoParam+0xe6>
      break;
 8005b0a:	bf00      	nop
 8005b0c:	e00a      	b.n	8005b24 <DMA_CheckFifoParam+0xe8>
      break;
 8005b0e:	bf00      	nop
 8005b10:	e008      	b.n	8005b24 <DMA_CheckFifoParam+0xe8>
      break;
 8005b12:	bf00      	nop
 8005b14:	e006      	b.n	8005b24 <DMA_CheckFifoParam+0xe8>
      break;
 8005b16:	bf00      	nop
 8005b18:	e004      	b.n	8005b24 <DMA_CheckFifoParam+0xe8>
      break;
 8005b1a:	bf00      	nop
 8005b1c:	e002      	b.n	8005b24 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <DMA_CheckFifoParam+0xe8>
      break;
 8005b22:	bf00      	nop
    }
  } 
  
  return status; 
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop

08005b34 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e039      	b.n	8005bba <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fe fa58 	bl	8004010 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b84:	f023 0107 	bic.w	r1, r3, #7
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <HAL_DMA2D_Init+0x90>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	68d1      	ldr	r1, [r2, #12]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	430b      	orrs	r3, r1
 8005ba8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	ffffc000 	.word	0xffffc000

08005bc8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_DMA2D_Start+0x1c>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e018      	b.n	8005c16 <HAL_DMA2D_Start+0x4e>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 fa98 	bl	8006134 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0201 	orr.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b086      	sub	sp, #24
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d056      	beq.n	8005ce8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c3a:	f7fe ffd7 	bl	8004bec <HAL_GetTick>
 8005c3e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005c40:	e04b      	b.n	8005cda <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d023      	beq.n	8005c9c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c62:	f043 0202 	orr.w	r2, r3, #2
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d005      	beq.n	8005c80 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c78:	f043 0201 	orr.w	r2, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2221      	movs	r2, #33	; 0x21
 8005c86:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2204      	movs	r2, #4
 8005c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0a5      	b.n	8005de8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca2:	d01a      	beq.n	8005cda <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ca4:	f7fe ffa2 	bl	8004bec <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d302      	bcc.n	8005cba <HAL_DMA2D_PollForTransfer+0x9c>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10f      	bne.n	8005cda <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbe:	f043 0220 	orr.w	r2, r3, #32
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2203      	movs	r2, #3
 8005cca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e086      	b.n	8005de8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0ac      	beq.n	8005c42 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d061      	beq.n	8005dce <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d0a:	f7fe ff6f 	bl	8004bec <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005d10:	e056      	b.n	8005dc0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d02e      	beq.n	8005d82 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d32:	f043 0204 	orr.w	r2, r3, #4
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f003 0320 	and.w	r3, r3, #32
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d48:	f043 0202 	orr.w	r2, r3, #2
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d005      	beq.n	8005d66 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	f043 0201 	orr.w	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2229      	movs	r2, #41	; 0x29
 8005d6c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2204      	movs	r2, #4
 8005d72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e032      	b.n	8005de8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d88:	d01a      	beq.n	8005dc0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d8a:	f7fe ff2f 	bl	8004bec <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d302      	bcc.n	8005da0 <HAL_DMA2D_PollForTransfer+0x182>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10f      	bne.n	8005dc0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da4:	f043 0220 	orr.w	r2, r3, #32
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2203      	movs	r2, #3
 8005db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e013      	b.n	8005de8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0a1      	beq.n	8005d12 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2212      	movs	r2, #18
 8005dd4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3718      	adds	r7, #24
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d026      	beq.n	8005e60 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d021      	beq.n	8005e60 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e2a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	f043 0201 	orr.w	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2204      	movs	r2, #4
 8005e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d026      	beq.n	8005eb8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d021      	beq.n	8005eb8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e82:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e90:	f043 0202 	orr.w	r2, r3, #2
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2204      	movs	r2, #4
 8005e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d026      	beq.n	8005f10 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d021      	beq.n	8005f10 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eda:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee8:	f043 0204 	orr.w	r2, r3, #4
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f003 0304 	and.w	r3, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d013      	beq.n	8005f42 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00e      	beq.n	8005f42 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f32:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2204      	movs	r2, #4
 8005f3a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f853 	bl	8005fe8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d024      	beq.n	8005f96 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d01f      	beq.n	8005f96 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f64:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f003 0310 	and.w	r3, r3, #16
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01f      	beq.n	8005fe0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01a      	beq.n	8005fe0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fb8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f80e 	bl	8005ffc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_DMA2D_ConfigLayer+0x20>
 800602c:	2302      	movs	r3, #2
 800602e:	e079      	b.n	8006124 <HAL_DMA2D_ConfigLayer+0x114>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	011b      	lsls	r3, r3, #4
 8006044:	3318      	adds	r3, #24
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4413      	add	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	041b      	lsls	r3, r3, #16
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800605a:	4b35      	ldr	r3, [pc, #212]	; (8006130 <HAL_DMA2D_ConfigLayer+0x120>)
 800605c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b0a      	cmp	r3, #10
 8006064:	d003      	beq.n	800606e <HAL_DMA2D_ConfigLayer+0x5e>
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b09      	cmp	r3, #9
 800606c:	d107      	bne.n	800607e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	e005      	b.n	800608a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	061b      	lsls	r3, r3, #24
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d120      	bne.n	80060d2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	43db      	mvns	r3, r3
 800609a:	ea02 0103 	and.w	r1, r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2b0a      	cmp	r3, #10
 80060b8:	d003      	beq.n	80060c2 <HAL_DMA2D_ConfigLayer+0xb2>
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2b09      	cmp	r3, #9
 80060c0:	d127      	bne.n	8006112 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	68da      	ldr	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80060ce:	629a      	str	r2, [r3, #40]	; 0x28
 80060d0:	e01f      	b.n	8006112 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	43db      	mvns	r3, r3
 80060dc:	ea02 0103 	and.w	r1, r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	6812      	ldr	r2, [r2, #0]
 80060f2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	2b0a      	cmp	r3, #10
 80060fa:	d003      	beq.n	8006104 <HAL_DMA2D_ConfigLayer+0xf4>
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b09      	cmp	r3, #9
 8006102:	d106      	bne.n	8006112 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006110:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	371c      	adds	r7, #28
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	ff03000f 	.word	0xff03000f

08006134 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006134:	b480      	push	{r7}
 8006136:	b08b      	sub	sp, #44	; 0x2c
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006148:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	041a      	lsls	r2, r3, #16
 8006150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006152:	431a      	orrs	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800616c:	d174      	bne.n	8006258 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006174:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800617c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006184:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	b2db      	uxtb	r3, r3
 800618a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d108      	bne.n	80061a6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	431a      	orrs	r2, r3
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	4313      	orrs	r3, r2
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	627b      	str	r3, [r7, #36]	; 0x24
 80061a4:	e053      	b.n	800624e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d106      	bne.n	80061bc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ba:	e048      	b.n	800624e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d111      	bne.n	80061e8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	0cdb      	lsrs	r3, r3, #19
 80061c8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	0a9b      	lsrs	r3, r3, #10
 80061ce:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	08db      	lsrs	r3, r3, #3
 80061d4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	02db      	lsls	r3, r3, #11
 80061de:	4313      	orrs	r3, r2
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
 80061e6:	e032      	b.n	800624e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d117      	bne.n	8006220 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	0fdb      	lsrs	r3, r3, #31
 80061f4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	0cdb      	lsrs	r3, r3, #19
 80061fa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	0adb      	lsrs	r3, r3, #11
 8006200:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	08db      	lsrs	r3, r3, #3
 8006206:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	029b      	lsls	r3, r3, #10
 8006210:	431a      	orrs	r2, r3
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	03db      	lsls	r3, r3, #15
 8006216:	4313      	orrs	r3, r2
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
 800621e:	e016      	b.n	800624e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	0f1b      	lsrs	r3, r3, #28
 8006224:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	0d1b      	lsrs	r3, r3, #20
 800622a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	0b1b      	lsrs	r3, r3, #12
 8006230:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	091b      	lsrs	r3, r3, #4
 8006236:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	011a      	lsls	r2, r3, #4
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	431a      	orrs	r2, r3
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	031b      	lsls	r3, r3, #12
 8006246:	4313      	orrs	r3, r2
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	4313      	orrs	r3, r2
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006254:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006256:	e003      	b.n	8006260 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	60da      	str	r2, [r3, #12]
}
 8006260:	bf00      	nop
 8006262:	372c      	adds	r7, #44	; 0x2c
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800626c:	b480      	push	{r7}
 800626e:	b089      	sub	sp, #36	; 0x24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006276:	2300      	movs	r3, #0
 8006278:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800627a:	2300      	movs	r3, #0
 800627c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800627e:	2300      	movs	r3, #0
 8006280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006282:	2300      	movs	r3, #0
 8006284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006286:	2300      	movs	r3, #0
 8006288:	61fb      	str	r3, [r7, #28]
 800628a:	e175      	b.n	8006578 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800628c:	2201      	movs	r2, #1
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4013      	ands	r3, r2
 800629e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	f040 8164 	bne.w	8006572 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d005      	beq.n	80062c2 <HAL_GPIO_Init+0x56>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d130      	bne.n	8006324 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	2203      	movs	r2, #3
 80062ce:	fa02 f303 	lsl.w	r3, r2, r3
 80062d2:	43db      	mvns	r3, r3
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	4013      	ands	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	fa02 f303 	lsl.w	r3, r2, r3
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062f8:	2201      	movs	r2, #1
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	43db      	mvns	r3, r3
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	4013      	ands	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	091b      	lsrs	r3, r3, #4
 800630e:	f003 0201 	and.w	r2, r3, #1
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	fa02 f303 	lsl.w	r3, r2, r3
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	4313      	orrs	r3, r2
 800631c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	2b03      	cmp	r3, #3
 800632e:	d017      	beq.n	8006360 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	2203      	movs	r2, #3
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	43db      	mvns	r3, r3
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4013      	ands	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	4313      	orrs	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f003 0303 	and.w	r3, r3, #3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d123      	bne.n	80063b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	08da      	lsrs	r2, r3, #3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3208      	adds	r2, #8
 8006374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	220f      	movs	r2, #15
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	43db      	mvns	r3, r3
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	4013      	ands	r3, r2
 800638e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	08da      	lsrs	r2, r3, #3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	3208      	adds	r2, #8
 80063ae:	69b9      	ldr	r1, [r7, #24]
 80063b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	2203      	movs	r2, #3
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	43db      	mvns	r3, r3
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	4013      	ands	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f003 0203 	and.w	r2, r3, #3
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4313      	orrs	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 80be 	beq.w	8006572 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063f6:	4b66      	ldr	r3, [pc, #408]	; (8006590 <HAL_GPIO_Init+0x324>)
 80063f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fa:	4a65      	ldr	r2, [pc, #404]	; (8006590 <HAL_GPIO_Init+0x324>)
 80063fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006400:	6453      	str	r3, [r2, #68]	; 0x44
 8006402:	4b63      	ldr	r3, [pc, #396]	; (8006590 <HAL_GPIO_Init+0x324>)
 8006404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800640e:	4a61      	ldr	r2, [pc, #388]	; (8006594 <HAL_GPIO_Init+0x328>)
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	089b      	lsrs	r3, r3, #2
 8006414:	3302      	adds	r3, #2
 8006416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800641a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	220f      	movs	r2, #15
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	43db      	mvns	r3, r3
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	4013      	ands	r3, r2
 8006430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a58      	ldr	r2, [pc, #352]	; (8006598 <HAL_GPIO_Init+0x32c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d037      	beq.n	80064aa <HAL_GPIO_Init+0x23e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a57      	ldr	r2, [pc, #348]	; (800659c <HAL_GPIO_Init+0x330>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d031      	beq.n	80064a6 <HAL_GPIO_Init+0x23a>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a56      	ldr	r2, [pc, #344]	; (80065a0 <HAL_GPIO_Init+0x334>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d02b      	beq.n	80064a2 <HAL_GPIO_Init+0x236>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a55      	ldr	r2, [pc, #340]	; (80065a4 <HAL_GPIO_Init+0x338>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d025      	beq.n	800649e <HAL_GPIO_Init+0x232>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a54      	ldr	r2, [pc, #336]	; (80065a8 <HAL_GPIO_Init+0x33c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01f      	beq.n	800649a <HAL_GPIO_Init+0x22e>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a53      	ldr	r2, [pc, #332]	; (80065ac <HAL_GPIO_Init+0x340>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d019      	beq.n	8006496 <HAL_GPIO_Init+0x22a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a52      	ldr	r2, [pc, #328]	; (80065b0 <HAL_GPIO_Init+0x344>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <HAL_GPIO_Init+0x226>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a51      	ldr	r2, [pc, #324]	; (80065b4 <HAL_GPIO_Init+0x348>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00d      	beq.n	800648e <HAL_GPIO_Init+0x222>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a50      	ldr	r2, [pc, #320]	; (80065b8 <HAL_GPIO_Init+0x34c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d007      	beq.n	800648a <HAL_GPIO_Init+0x21e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a4f      	ldr	r2, [pc, #316]	; (80065bc <HAL_GPIO_Init+0x350>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d101      	bne.n	8006486 <HAL_GPIO_Init+0x21a>
 8006482:	2309      	movs	r3, #9
 8006484:	e012      	b.n	80064ac <HAL_GPIO_Init+0x240>
 8006486:	230a      	movs	r3, #10
 8006488:	e010      	b.n	80064ac <HAL_GPIO_Init+0x240>
 800648a:	2308      	movs	r3, #8
 800648c:	e00e      	b.n	80064ac <HAL_GPIO_Init+0x240>
 800648e:	2307      	movs	r3, #7
 8006490:	e00c      	b.n	80064ac <HAL_GPIO_Init+0x240>
 8006492:	2306      	movs	r3, #6
 8006494:	e00a      	b.n	80064ac <HAL_GPIO_Init+0x240>
 8006496:	2305      	movs	r3, #5
 8006498:	e008      	b.n	80064ac <HAL_GPIO_Init+0x240>
 800649a:	2304      	movs	r3, #4
 800649c:	e006      	b.n	80064ac <HAL_GPIO_Init+0x240>
 800649e:	2303      	movs	r3, #3
 80064a0:	e004      	b.n	80064ac <HAL_GPIO_Init+0x240>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e002      	b.n	80064ac <HAL_GPIO_Init+0x240>
 80064a6:	2301      	movs	r3, #1
 80064a8:	e000      	b.n	80064ac <HAL_GPIO_Init+0x240>
 80064aa:	2300      	movs	r3, #0
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	f002 0203 	and.w	r2, r2, #3
 80064b2:	0092      	lsls	r2, r2, #2
 80064b4:	4093      	lsls	r3, r2
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80064bc:	4935      	ldr	r1, [pc, #212]	; (8006594 <HAL_GPIO_Init+0x328>)
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	089b      	lsrs	r3, r3, #2
 80064c2:	3302      	adds	r3, #2
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064ca:	4b3d      	ldr	r3, [pc, #244]	; (80065c0 <HAL_GPIO_Init+0x354>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	43db      	mvns	r3, r3
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	4013      	ands	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064ee:	4a34      	ldr	r2, [pc, #208]	; (80065c0 <HAL_GPIO_Init+0x354>)
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064f4:	4b32      	ldr	r3, [pc, #200]	; (80065c0 <HAL_GPIO_Init+0x354>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	43db      	mvns	r3, r3
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	4013      	ands	r3, r2
 8006502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006518:	4a29      	ldr	r2, [pc, #164]	; (80065c0 <HAL_GPIO_Init+0x354>)
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800651e:	4b28      	ldr	r3, [pc, #160]	; (80065c0 <HAL_GPIO_Init+0x354>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	43db      	mvns	r3, r3
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	4013      	ands	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d003      	beq.n	8006542 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4313      	orrs	r3, r2
 8006540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006542:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <HAL_GPIO_Init+0x354>)
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006548:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <HAL_GPIO_Init+0x354>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	43db      	mvns	r3, r3
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	4013      	ands	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800656c:	4a14      	ldr	r2, [pc, #80]	; (80065c0 <HAL_GPIO_Init+0x354>)
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	3301      	adds	r3, #1
 8006576:	61fb      	str	r3, [r7, #28]
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	2b0f      	cmp	r3, #15
 800657c:	f67f ae86 	bls.w	800628c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	3724      	adds	r7, #36	; 0x24
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40023800 	.word	0x40023800
 8006594:	40013800 	.word	0x40013800
 8006598:	40020000 	.word	0x40020000
 800659c:	40020400 	.word	0x40020400
 80065a0:	40020800 	.word	0x40020800
 80065a4:	40020c00 	.word	0x40020c00
 80065a8:	40021000 	.word	0x40021000
 80065ac:	40021400 	.word	0x40021400
 80065b0:	40021800 	.word	0x40021800
 80065b4:	40021c00 	.word	0x40021c00
 80065b8:	40022000 	.word	0x40022000
 80065bc:	40022400 	.word	0x40022400
 80065c0:	40013c00 	.word	0x40013c00

080065c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80065ce:	2300      	movs	r3, #0
 80065d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80065da:	2300      	movs	r3, #0
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	e0d9      	b.n	8006794 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80065e0:	2201      	movs	r2, #1
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	fa02 f303 	lsl.w	r3, r2, r3
 80065e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4013      	ands	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	f040 80c9 	bne.w	800678e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80065fc:	4a6b      	ldr	r2, [pc, #428]	; (80067ac <HAL_GPIO_DeInit+0x1e8>)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	089b      	lsrs	r3, r3, #2
 8006602:	3302      	adds	r3, #2
 8006604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006608:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	220f      	movs	r2, #15
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	4013      	ands	r3, r2
 800661c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a63      	ldr	r2, [pc, #396]	; (80067b0 <HAL_GPIO_DeInit+0x1ec>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d037      	beq.n	8006696 <HAL_GPIO_DeInit+0xd2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a62      	ldr	r2, [pc, #392]	; (80067b4 <HAL_GPIO_DeInit+0x1f0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d031      	beq.n	8006692 <HAL_GPIO_DeInit+0xce>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a61      	ldr	r2, [pc, #388]	; (80067b8 <HAL_GPIO_DeInit+0x1f4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d02b      	beq.n	800668e <HAL_GPIO_DeInit+0xca>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a60      	ldr	r2, [pc, #384]	; (80067bc <HAL_GPIO_DeInit+0x1f8>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d025      	beq.n	800668a <HAL_GPIO_DeInit+0xc6>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a5f      	ldr	r2, [pc, #380]	; (80067c0 <HAL_GPIO_DeInit+0x1fc>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d01f      	beq.n	8006686 <HAL_GPIO_DeInit+0xc2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a5e      	ldr	r2, [pc, #376]	; (80067c4 <HAL_GPIO_DeInit+0x200>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d019      	beq.n	8006682 <HAL_GPIO_DeInit+0xbe>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a5d      	ldr	r2, [pc, #372]	; (80067c8 <HAL_GPIO_DeInit+0x204>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d013      	beq.n	800667e <HAL_GPIO_DeInit+0xba>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a5c      	ldr	r2, [pc, #368]	; (80067cc <HAL_GPIO_DeInit+0x208>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00d      	beq.n	800667a <HAL_GPIO_DeInit+0xb6>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a5b      	ldr	r2, [pc, #364]	; (80067d0 <HAL_GPIO_DeInit+0x20c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d007      	beq.n	8006676 <HAL_GPIO_DeInit+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a5a      	ldr	r2, [pc, #360]	; (80067d4 <HAL_GPIO_DeInit+0x210>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d101      	bne.n	8006672 <HAL_GPIO_DeInit+0xae>
 800666e:	2309      	movs	r3, #9
 8006670:	e012      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 8006672:	230a      	movs	r3, #10
 8006674:	e010      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 8006676:	2308      	movs	r3, #8
 8006678:	e00e      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 800667a:	2307      	movs	r3, #7
 800667c:	e00c      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 800667e:	2306      	movs	r3, #6
 8006680:	e00a      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 8006682:	2305      	movs	r3, #5
 8006684:	e008      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 8006686:	2304      	movs	r3, #4
 8006688:	e006      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 800668a:	2303      	movs	r3, #3
 800668c:	e004      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 800668e:	2302      	movs	r3, #2
 8006690:	e002      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <HAL_GPIO_DeInit+0xd4>
 8006696:	2300      	movs	r3, #0
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	f002 0203 	and.w	r2, r2, #3
 800669e:	0092      	lsls	r2, r2, #2
 80066a0:	4093      	lsls	r3, r2
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d132      	bne.n	800670e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80066a8:	4b4b      	ldr	r3, [pc, #300]	; (80067d8 <HAL_GPIO_DeInit+0x214>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	43db      	mvns	r3, r3
 80066b0:	4949      	ldr	r1, [pc, #292]	; (80067d8 <HAL_GPIO_DeInit+0x214>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80066b6:	4b48      	ldr	r3, [pc, #288]	; (80067d8 <HAL_GPIO_DeInit+0x214>)
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	43db      	mvns	r3, r3
 80066be:	4946      	ldr	r1, [pc, #280]	; (80067d8 <HAL_GPIO_DeInit+0x214>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80066c4:	4b44      	ldr	r3, [pc, #272]	; (80067d8 <HAL_GPIO_DeInit+0x214>)
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	43db      	mvns	r3, r3
 80066cc:	4942      	ldr	r1, [pc, #264]	; (80067d8 <HAL_GPIO_DeInit+0x214>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80066d2:	4b41      	ldr	r3, [pc, #260]	; (80067d8 <HAL_GPIO_DeInit+0x214>)
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	43db      	mvns	r3, r3
 80066da:	493f      	ldr	r1, [pc, #252]	; (80067d8 <HAL_GPIO_DeInit+0x214>)
 80066dc:	4013      	ands	r3, r2
 80066de:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	220f      	movs	r2, #15
 80066ea:	fa02 f303 	lsl.w	r3, r2, r3
 80066ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80066f0:	4a2e      	ldr	r2, [pc, #184]	; (80067ac <HAL_GPIO_DeInit+0x1e8>)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	089b      	lsrs	r3, r3, #2
 80066f6:	3302      	adds	r3, #2
 80066f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	43da      	mvns	r2, r3
 8006700:	482a      	ldr	r0, [pc, #168]	; (80067ac <HAL_GPIO_DeInit+0x1e8>)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	089b      	lsrs	r3, r3, #2
 8006706:	400a      	ands	r2, r1
 8006708:	3302      	adds	r3, #2
 800670a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	2103      	movs	r1, #3
 8006718:	fa01 f303 	lsl.w	r3, r1, r3
 800671c:	43db      	mvns	r3, r3
 800671e:	401a      	ands	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	08da      	lsrs	r2, r3, #3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3208      	adds	r2, #8
 800672c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	220f      	movs	r2, #15
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	43db      	mvns	r3, r3
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	08d2      	lsrs	r2, r2, #3
 8006744:	4019      	ands	r1, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3208      	adds	r2, #8
 800674a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68da      	ldr	r2, [r3, #12]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	2103      	movs	r1, #3
 8006758:	fa01 f303 	lsl.w	r3, r1, r3
 800675c:	43db      	mvns	r3, r3
 800675e:	401a      	ands	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	2101      	movs	r1, #1
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	fa01 f303 	lsl.w	r3, r1, r3
 8006770:	43db      	mvns	r3, r3
 8006772:	401a      	ands	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	2103      	movs	r1, #3
 8006782:	fa01 f303 	lsl.w	r3, r1, r3
 8006786:	43db      	mvns	r3, r3
 8006788:	401a      	ands	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	3301      	adds	r3, #1
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	f67f af22 	bls.w	80065e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40013800 	.word	0x40013800
 80067b0:	40020000 	.word	0x40020000
 80067b4:	40020400 	.word	0x40020400
 80067b8:	40020800 	.word	0x40020800
 80067bc:	40020c00 	.word	0x40020c00
 80067c0:	40021000 	.word	0x40021000
 80067c4:	40021400 	.word	0x40021400
 80067c8:	40021800 	.word	0x40021800
 80067cc:	40021c00 	.word	0x40021c00
 80067d0:	40022000 	.word	0x40022000
 80067d4:	40022400 	.word	0x40022400
 80067d8:	40013c00 	.word	0x40013c00

080067dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	807b      	strh	r3, [r7, #2]
 80067e8:	4613      	mov	r3, r2
 80067ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067ec:	787b      	ldrb	r3, [r7, #1]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067f2:	887a      	ldrh	r2, [r7, #2]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80067f8:	e003      	b.n	8006802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80067fa:	887b      	ldrh	r3, [r7, #2]
 80067fc:	041a      	lsls	r2, r3, #16
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	619a      	str	r2, [r3, #24]
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800680e:	b480      	push	{r7}
 8006810:	b085      	sub	sp, #20
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006820:	887a      	ldrh	r2, [r7, #2]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4013      	ands	r3, r2
 8006826:	041a      	lsls	r2, r3, #16
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	43d9      	mvns	r1, r3
 800682c:	887b      	ldrh	r3, [r7, #2]
 800682e:	400b      	ands	r3, r1
 8006830:	431a      	orrs	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	619a      	str	r2, [r3, #24]
}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
	...

08006844 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	4603      	mov	r3, r0
 800684c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800684e:	4b08      	ldr	r3, [pc, #32]	; (8006870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006850:	695a      	ldr	r2, [r3, #20]
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	4013      	ands	r3, r2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d006      	beq.n	8006868 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800685a:	4a05      	ldr	r2, [pc, #20]	; (8006870 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800685c:	88fb      	ldrh	r3, [r7, #6]
 800685e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006860:	88fb      	ldrh	r3, [r7, #6]
 8006862:	4618      	mov	r0, r3
 8006864:	f7fb fbfa 	bl	800205c <HAL_GPIO_EXTI_Callback>
  }
}
 8006868:	bf00      	nop
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	40013c00 	.word	0x40013c00

08006874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e07f      	b.n	8006986 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d106      	bne.n	80068a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fd fbde 	bl	800405c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2224      	movs	r2, #36	; 0x24
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0201 	bic.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80068c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d107      	bne.n	80068ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068ea:	609a      	str	r2, [r3, #8]
 80068ec:	e006      	b.n	80068fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80068fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	2b02      	cmp	r3, #2
 8006902:	d104      	bne.n	800690e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800690c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6859      	ldr	r1, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <HAL_I2C_Init+0x11c>)
 800691a:	430b      	orrs	r3, r1
 800691c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800692c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691a      	ldr	r2, [r3, #16]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	69d9      	ldr	r1, [r3, #28]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a1a      	ldr	r2, [r3, #32]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2220      	movs	r2, #32
 8006972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	02008000 	.word	0x02008000

08006994 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e021      	b.n	80069ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2224      	movs	r2, #36	; 0x24
 80069aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0201 	bic.w	r2, r2, #1
 80069bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7fd fbf4 	bl	80041ac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	4608      	mov	r0, r1
 80069fe:	4611      	mov	r1, r2
 8006a00:	461a      	mov	r2, r3
 8006a02:	4603      	mov	r3, r0
 8006a04:	817b      	strh	r3, [r7, #10]
 8006a06:	460b      	mov	r3, r1
 8006a08:	813b      	strh	r3, [r7, #8]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	f040 80f9 	bne.w	8006c0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <HAL_I2C_Mem_Write+0x34>
 8006a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d105      	bne.n	8006a34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e0ed      	b.n	8006c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_I2C_Mem_Write+0x4e>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e0e6      	b.n	8006c10 <HAL_I2C_Mem_Write+0x21c>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a4a:	f7fe f8cf 	bl	8004bec <HAL_GetTick>
 8006a4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	2319      	movs	r3, #25
 8006a56:	2201      	movs	r2, #1
 8006a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 fad1 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0d1      	b.n	8006c10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2221      	movs	r2, #33	; 0x21
 8006a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2240      	movs	r2, #64	; 0x40
 8006a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a3a      	ldr	r2, [r7, #32]
 8006a86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a94:	88f8      	ldrh	r0, [r7, #6]
 8006a96:	893a      	ldrh	r2, [r7, #8]
 8006a98:	8979      	ldrh	r1, [r7, #10]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 f9e1 	bl	8006e6c <I2C_RequestMemoryWrite>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e0a9      	b.n	8006c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2bff      	cmp	r3, #255	; 0xff
 8006ac4:	d90e      	bls.n	8006ae4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	22ff      	movs	r2, #255	; 0xff
 8006aca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	8979      	ldrh	r1, [r7, #10]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 fc39 	bl	8007354 <I2C_TransferConfig>
 8006ae2:	e00f      	b.n	8006b04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	8979      	ldrh	r1, [r7, #10]
 8006af6:	2300      	movs	r3, #0
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f000 fc28 	bl	8007354 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 fabb 	bl	8007084 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e07b      	b.n	8006c10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	781a      	ldrb	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d034      	beq.n	8006bbc <HAL_I2C_Mem_Write+0x1c8>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d130      	bne.n	8006bbc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b60:	2200      	movs	r2, #0
 8006b62:	2180      	movs	r1, #128	; 0x80
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fa4d 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e04d      	b.n	8006c10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2bff      	cmp	r3, #255	; 0xff
 8006b7c:	d90e      	bls.n	8006b9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	22ff      	movs	r2, #255	; 0xff
 8006b82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	8979      	ldrh	r1, [r7, #10]
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fbdd 	bl	8007354 <I2C_TransferConfig>
 8006b9a:	e00f      	b.n	8006bbc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	8979      	ldrh	r1, [r7, #10]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 fbcc 	bl	8007354 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d19e      	bne.n	8006b04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fa9a 	bl	8007104 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e01a      	b.n	8006c10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2220      	movs	r2, #32
 8006be0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6859      	ldr	r1, [r3, #4]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	4b0a      	ldr	r3, [pc, #40]	; (8006c18 <HAL_I2C_Mem_Write+0x224>)
 8006bee:	400b      	ands	r3, r1
 8006bf0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e000      	b.n	8006c10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006c0e:	2302      	movs	r3, #2
  }
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	fe00e800 	.word	0xfe00e800

08006c1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af02      	add	r7, sp, #8
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	4608      	mov	r0, r1
 8006c26:	4611      	mov	r1, r2
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	817b      	strh	r3, [r7, #10]
 8006c2e:	460b      	mov	r3, r1
 8006c30:	813b      	strh	r3, [r7, #8]
 8006c32:	4613      	mov	r3, r2
 8006c34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b20      	cmp	r3, #32
 8006c40:	f040 80fd 	bne.w	8006e3e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <HAL_I2C_Mem_Read+0x34>
 8006c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d105      	bne.n	8006c5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e0f1      	b.n	8006e40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d101      	bne.n	8006c6a <HAL_I2C_Mem_Read+0x4e>
 8006c66:	2302      	movs	r3, #2
 8006c68:	e0ea      	b.n	8006e40 <HAL_I2C_Mem_Read+0x224>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c72:	f7fd ffbb 	bl	8004bec <HAL_GetTick>
 8006c76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	2319      	movs	r3, #25
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 f9bd 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d001      	beq.n	8006c94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0d5      	b.n	8006e40 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2222      	movs	r2, #34	; 0x22
 8006c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2240      	movs	r2, #64	; 0x40
 8006ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a3a      	ldr	r2, [r7, #32]
 8006cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006cbc:	88f8      	ldrh	r0, [r7, #6]
 8006cbe:	893a      	ldrh	r2, [r7, #8]
 8006cc0:	8979      	ldrh	r1, [r7, #10]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	4603      	mov	r3, r0
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f921 	bl	8006f14 <I2C_RequestMemoryRead>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e0ad      	b.n	8006e40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2bff      	cmp	r3, #255	; 0xff
 8006cec:	d90e      	bls.n	8006d0c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	22ff      	movs	r2, #255	; 0xff
 8006cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	8979      	ldrh	r1, [r7, #10]
 8006cfc:	4b52      	ldr	r3, [pc, #328]	; (8006e48 <HAL_I2C_Mem_Read+0x22c>)
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 fb25 	bl	8007354 <I2C_TransferConfig>
 8006d0a:	e00f      	b.n	8006d2c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	8979      	ldrh	r1, [r7, #10]
 8006d1e:	4b4a      	ldr	r3, [pc, #296]	; (8006e48 <HAL_I2C_Mem_Read+0x22c>)
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 fb14 	bl	8007354 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	2200      	movs	r2, #0
 8006d34:	2104      	movs	r1, #4
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 f964 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e07c      	b.n	8006e40 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	b2d2      	uxtb	r2, r2
 8006d52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d62:	3b01      	subs	r3, #1
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d034      	beq.n	8006dec <HAL_I2C_Mem_Read+0x1d0>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d130      	bne.n	8006dec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d90:	2200      	movs	r2, #0
 8006d92:	2180      	movs	r1, #128	; 0x80
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f935 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e04d      	b.n	8006e40 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2bff      	cmp	r3, #255	; 0xff
 8006dac:	d90e      	bls.n	8006dcc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	22ff      	movs	r2, #255	; 0xff
 8006db2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	8979      	ldrh	r1, [r7, #10]
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f000 fac5 	bl	8007354 <I2C_TransferConfig>
 8006dca:	e00f      	b.n	8006dec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	8979      	ldrh	r1, [r7, #10]
 8006dde:	2300      	movs	r3, #0
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 fab4 	bl	8007354 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d19a      	bne.n	8006d2c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 f982 	bl	8007104 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e01a      	b.n	8006e40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6859      	ldr	r1, [r3, #4]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <HAL_I2C_Mem_Read+0x230>)
 8006e1e:	400b      	ands	r3, r1
 8006e20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e000      	b.n	8006e40 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006e3e:	2302      	movs	r3, #2
  }
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	80002400 	.word	0x80002400
 8006e4c:	fe00e800 	.word	0xfe00e800

08006e50 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e5e:	b2db      	uxtb	r3, r3
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	4608      	mov	r0, r1
 8006e76:	4611      	mov	r1, r2
 8006e78:	461a      	mov	r2, r3
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	817b      	strh	r3, [r7, #10]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	813b      	strh	r3, [r7, #8]
 8006e82:	4613      	mov	r3, r2
 8006e84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	8979      	ldrh	r1, [r7, #10]
 8006e8c:	4b20      	ldr	r3, [pc, #128]	; (8006f10 <I2C_RequestMemoryWrite+0xa4>)
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f000 fa5d 	bl	8007354 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e9a:	69fa      	ldr	r2, [r7, #28]
 8006e9c:	69b9      	ldr	r1, [r7, #24]
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 f8f0 	bl	8007084 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e02c      	b.n	8006f08 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d105      	bne.n	8006ec0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006eb4:	893b      	ldrh	r3, [r7, #8]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	629a      	str	r2, [r3, #40]	; 0x28
 8006ebe:	e015      	b.n	8006eec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ec0:	893b      	ldrh	r3, [r7, #8]
 8006ec2:	0a1b      	lsrs	r3, r3, #8
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	69b9      	ldr	r1, [r7, #24]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 f8d6 	bl	8007084 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e012      	b.n	8006f08 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ee2:	893b      	ldrh	r3, [r7, #8]
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2180      	movs	r1, #128	; 0x80
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f884 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e000      	b.n	8006f08 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	80002000 	.word	0x80002000

08006f14 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af02      	add	r7, sp, #8
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	461a      	mov	r2, r3
 8006f22:	4603      	mov	r3, r0
 8006f24:	817b      	strh	r3, [r7, #10]
 8006f26:	460b      	mov	r3, r1
 8006f28:	813b      	strh	r3, [r7, #8]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	8979      	ldrh	r1, [r7, #10]
 8006f34:	4b20      	ldr	r3, [pc, #128]	; (8006fb8 <I2C_RequestMemoryRead+0xa4>)
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 fa0a 	bl	8007354 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f40:	69fa      	ldr	r2, [r7, #28]
 8006f42:	69b9      	ldr	r1, [r7, #24]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f89d 	bl	8007084 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e02c      	b.n	8006fae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f54:	88fb      	ldrh	r3, [r7, #6]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d105      	bne.n	8006f66 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f5a:	893b      	ldrh	r3, [r7, #8]
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
 8006f64:	e015      	b.n	8006f92 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f66:	893b      	ldrh	r3, [r7, #8]
 8006f68:	0a1b      	lsrs	r3, r3, #8
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f74:	69fa      	ldr	r2, [r7, #28]
 8006f76:	69b9      	ldr	r1, [r7, #24]
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 f883 	bl	8007084 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e012      	b.n	8006fae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f88:	893b      	ldrh	r3, [r7, #8]
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2140      	movs	r1, #64	; 0x40
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 f831 	bl	8007004 <I2C_WaitOnFlagUntilTimeout>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	80002000 	.word	0x80002000

08006fbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d103      	bne.n	8006fda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d007      	beq.n	8006ff8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	619a      	str	r2, [r3, #24]
  }
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	603b      	str	r3, [r7, #0]
 8007010:	4613      	mov	r3, r2
 8007012:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007014:	e022      	b.n	800705c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d01e      	beq.n	800705c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701e:	f7fd fde5 	bl	8004bec <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d302      	bcc.n	8007034 <I2C_WaitOnFlagUntilTimeout+0x30>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d113      	bne.n	800705c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007038:	f043 0220 	orr.w	r2, r3, #32
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2220      	movs	r2, #32
 8007044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e00f      	b.n	800707c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	699a      	ldr	r2, [r3, #24]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	4013      	ands	r3, r2
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	429a      	cmp	r2, r3
 800706a:	bf0c      	ite	eq
 800706c:	2301      	moveq	r3, #1
 800706e:	2300      	movne	r3, #0
 8007070:	b2db      	uxtb	r3, r3
 8007072:	461a      	mov	r2, r3
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	429a      	cmp	r2, r3
 8007078:	d0cd      	beq.n	8007016 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007090:	e02c      	b.n	80070ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	68b9      	ldr	r1, [r7, #8]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f870 	bl	800717c <I2C_IsErrorOccurred>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e02a      	b.n	80070fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ac:	d01e      	beq.n	80070ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ae:	f7fd fd9d 	bl	8004bec <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d302      	bcc.n	80070c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d113      	bne.n	80070ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c8:	f043 0220 	orr.w	r2, r3, #32
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e007      	b.n	80070fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d1cb      	bne.n	8007092 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007110:	e028      	b.n	8007164 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 f830 	bl	800717c <I2C_IsErrorOccurred>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e026      	b.n	8007174 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007126:	f7fd fd61 	bl	8004bec <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	429a      	cmp	r2, r3
 8007134:	d302      	bcc.n	800713c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d113      	bne.n	8007164 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007140:	f043 0220 	orr.w	r2, r3, #32
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2220      	movs	r2, #32
 800714c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e007      	b.n	8007174 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b20      	cmp	r3, #32
 8007170:	d1cf      	bne.n	8007112 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08a      	sub	sp, #40	; 0x28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d075      	beq.n	8007294 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2210      	movs	r2, #16
 80071ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80071b0:	e056      	b.n	8007260 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b8:	d052      	beq.n	8007260 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80071ba:	f7fd fd17 	bl	8004bec <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d302      	bcc.n	80071d0 <I2C_IsErrorOccurred+0x54>
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d147      	bne.n	8007260 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f2:	d12e      	bne.n	8007252 <I2C_IsErrorOccurred+0xd6>
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071fa:	d02a      	beq.n	8007252 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80071fc:	7cfb      	ldrb	r3, [r7, #19]
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d027      	beq.n	8007252 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007210:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007212:	f7fd fceb 	bl	8004bec <HAL_GetTick>
 8007216:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007218:	e01b      	b.n	8007252 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800721a:	f7fd fce7 	bl	8004bec <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b19      	cmp	r3, #25
 8007226:	d914      	bls.n	8007252 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722c:	f043 0220 	orr.w	r2, r3, #32
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2220      	movs	r2, #32
 8007238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	f003 0320 	and.w	r3, r3, #32
 800725c:	2b20      	cmp	r3, #32
 800725e:	d1dc      	bne.n	800721a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b20      	cmp	r3, #32
 800726c:	d003      	beq.n	8007276 <I2C_IsErrorOccurred+0xfa>
 800726e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007272:	2b00      	cmp	r3, #0
 8007274:	d09d      	beq.n	80071b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800727a:	2b00      	cmp	r3, #0
 800727c:	d103      	bne.n	8007286 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2220      	movs	r2, #32
 8007284:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	f043 0304 	orr.w	r3, r3, #4
 800728c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00b      	beq.n	80072be <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	f043 0301 	orr.w	r3, r3, #1
 80072ac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00b      	beq.n	80072e0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	f043 0308 	orr.w	r3, r3, #8
 80072ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00b      	beq.n	8007302 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80072ea:	6a3b      	ldr	r3, [r7, #32]
 80072ec:	f043 0302 	orr.w	r3, r3, #2
 80072f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007306:	2b00      	cmp	r3, #0
 8007308:	d01c      	beq.n	8007344 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800730a:	68f8      	ldr	r0, [r7, #12]
 800730c:	f7ff fe56 	bl	8006fbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6859      	ldr	r1, [r3, #4]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	4b0d      	ldr	r3, [pc, #52]	; (8007350 <I2C_IsErrorOccurred+0x1d4>)
 800731c:	400b      	ands	r3, r1
 800731e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	431a      	orrs	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2220      	movs	r2, #32
 8007330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007348:	4618      	mov	r0, r3
 800734a:	3728      	adds	r7, #40	; 0x28
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	fe00e800 	.word	0xfe00e800

08007354 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	607b      	str	r3, [r7, #4]
 800735e:	460b      	mov	r3, r1
 8007360:	817b      	strh	r3, [r7, #10]
 8007362:	4613      	mov	r3, r2
 8007364:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007366:	897b      	ldrh	r3, [r7, #10]
 8007368:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800736c:	7a7b      	ldrb	r3, [r7, #9]
 800736e:	041b      	lsls	r3, r3, #16
 8007370:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007374:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	4313      	orrs	r3, r2
 800737e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007382:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	0d5b      	lsrs	r3, r3, #21
 800738e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007392:	4b08      	ldr	r3, [pc, #32]	; (80073b4 <I2C_TransferConfig+0x60>)
 8007394:	430b      	orrs	r3, r1
 8007396:	43db      	mvns	r3, r3
 8007398:	ea02 0103 	and.w	r1, r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	03ff63ff 	.word	0x03ff63ff

080073b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b20      	cmp	r3, #32
 80073cc:	d138      	bne.n	8007440 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80073d8:	2302      	movs	r3, #2
 80073da:	e032      	b.n	8007442 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2224      	movs	r2, #36	; 0x24
 80073e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0201 	bic.w	r2, r2, #1
 80073fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800740a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6819      	ldr	r1, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 0201 	orr.w	r2, r2, #1
 800742a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800743c:	2300      	movs	r3, #0
 800743e:	e000      	b.n	8007442 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007440:	2302      	movs	r3, #2
  }
}
 8007442:	4618      	mov	r0, r3
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800744e:	b480      	push	{r7}
 8007450:	b085      	sub	sp, #20
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b20      	cmp	r3, #32
 8007462:	d139      	bne.n	80074d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800746e:	2302      	movs	r3, #2
 8007470:	e033      	b.n	80074da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2224      	movs	r2, #36	; 0x24
 800747e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0201 	bic.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80074a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	021b      	lsls	r3, r3, #8
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0201 	orr.w	r2, r2, #1
 80074c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	e000      	b.n	80074da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80074d8:	2302      	movs	r3, #2
  }
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
	...

080074e8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e0bf      	b.n	800767a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fc fe88 	bl	8004224 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800752a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6999      	ldr	r1, [r3, #24]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007540:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6899      	ldr	r1, [r3, #8]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	4b4a      	ldr	r3, [pc, #296]	; (8007684 <HAL_LTDC_Init+0x19c>)
 800755c:	400b      	ands	r3, r1
 800755e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	041b      	lsls	r3, r3, #16
 8007566:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6899      	ldr	r1, [r3, #8]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	431a      	orrs	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68d9      	ldr	r1, [r3, #12]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	4b3e      	ldr	r3, [pc, #248]	; (8007684 <HAL_LTDC_Init+0x19c>)
 800758a:	400b      	ands	r3, r1
 800758c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68d9      	ldr	r1, [r3, #12]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a1a      	ldr	r2, [r3, #32]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	431a      	orrs	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6919      	ldr	r1, [r3, #16]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	4b33      	ldr	r3, [pc, #204]	; (8007684 <HAL_LTDC_Init+0x19c>)
 80075b8:	400b      	ands	r3, r1
 80075ba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	041b      	lsls	r3, r3, #16
 80075c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6919      	ldr	r1, [r3, #16]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	431a      	orrs	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6959      	ldr	r1, [r3, #20]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	4b27      	ldr	r3, [pc, #156]	; (8007684 <HAL_LTDC_Init+0x19c>)
 80075e6:	400b      	ands	r3, r1
 80075e8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	041b      	lsls	r3, r3, #16
 80075f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6959      	ldr	r1, [r3, #20]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800760e:	021b      	lsls	r3, r3, #8
 8007610:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007618:	041b      	lsls	r3, r3, #16
 800761a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800762a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4313      	orrs	r3, r2
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0206 	orr.w	r2, r2, #6
 8007656:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0201 	orr.w	r2, r2, #1
 8007666:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	f000f800 	.word	0xf000f800

08007688 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f003 0304 	and.w	r3, r3, #4
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d023      	beq.n	80076f2 <HAL_LTDC_IRQHandler+0x6a>
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f003 0304 	and.w	r3, r3, #4
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d01e      	beq.n	80076f2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0204 	bic.w	r2, r2, #4
 80076c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2204      	movs	r2, #4
 80076ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80076d2:	f043 0201 	orr.w	r2, r3, #1
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2204      	movs	r2, #4
 80076e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f86f 	bl	80077d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d023      	beq.n	8007744 <HAL_LTDC_IRQHandler+0xbc>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d01e      	beq.n	8007744 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0202 	bic.w	r2, r2, #2
 8007714:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2202      	movs	r2, #2
 800771c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007724:	f043 0202 	orr.w	r2, r3, #2
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2204      	movs	r2, #4
 8007732:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f846 	bl	80077d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d01b      	beq.n	8007786 <HAL_LTDC_IRQHandler+0xfe>
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d016      	beq.n	8007786 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0201 	bic.w	r2, r2, #1
 8007766:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2201      	movs	r2, #1
 800776e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f82f 	bl	80077e4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01b      	beq.n	80077c8 <HAL_LTDC_IRQHandler+0x140>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f003 0308 	and.w	r3, r3, #8
 8007796:	2b00      	cmp	r3, #0
 8007798:	d016      	beq.n	80077c8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0208 	bic.w	r2, r2, #8
 80077a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2208      	movs	r2, #8
 80077b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f818 	bl	80077f8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80077c8:	bf00      	nop
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800780c:	b5b0      	push	{r4, r5, r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <HAL_LTDC_ConfigLayer+0x1a>
 8007822:	2302      	movs	r3, #2
 8007824:	e02c      	b.n	8007880 <HAL_LTDC_ConfigLayer+0x74>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2202      	movs	r2, #2
 8007832:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2134      	movs	r1, #52	; 0x34
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	4413      	add	r3, r2
 8007842:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	4614      	mov	r4, r2
 800784a:	461d      	mov	r5, r3
 800784c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800784e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	68b9      	ldr	r1, [r7, #8]
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f81f 	bl	80078a4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2201      	movs	r2, #1
 800786c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bdb0      	pop	{r4, r5, r7, pc}

08007888 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007896:	b2db      	uxtb	r3, r3
}
 8007898:	4618      	mov	r0, r3
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b089      	sub	sp, #36	; 0x24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	0c1b      	lsrs	r3, r3, #16
 80078bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078c0:	4413      	add	r3, r2
 80078c2:	041b      	lsls	r3, r3, #16
 80078c4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	01db      	lsls	r3, r3, #7
 80078d0:	4413      	add	r3, r2
 80078d2:	3384      	adds	r3, #132	; 0x84
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	6812      	ldr	r2, [r2, #0]
 80078da:	4611      	mov	r1, r2
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	01d2      	lsls	r2, r2, #7
 80078e0:	440a      	add	r2, r1
 80078e2:	3284      	adds	r2, #132	; 0x84
 80078e4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80078e8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	0c1b      	lsrs	r3, r3, #16
 80078f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078fa:	4413      	add	r3, r2
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4619      	mov	r1, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	01db      	lsls	r3, r3, #7
 8007908:	440b      	add	r3, r1
 800790a:	3384      	adds	r3, #132	; 0x84
 800790c:	4619      	mov	r1, r3
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	4313      	orrs	r3, r2
 8007912:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007922:	4413      	add	r3, r2
 8007924:	041b      	lsls	r3, r3, #16
 8007926:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	01db      	lsls	r3, r3, #7
 8007932:	4413      	add	r3, r2
 8007934:	3384      	adds	r3, #132	; 0x84
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	6812      	ldr	r2, [r2, #0]
 800793c:	4611      	mov	r1, r2
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	01d2      	lsls	r2, r2, #7
 8007942:	440a      	add	r2, r1
 8007944:	3284      	adds	r2, #132	; 0x84
 8007946:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800794a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800795a:	4413      	add	r3, r2
 800795c:	1c5a      	adds	r2, r3, #1
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4619      	mov	r1, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	01db      	lsls	r3, r3, #7
 8007968:	440b      	add	r3, r1
 800796a:	3384      	adds	r3, #132	; 0x84
 800796c:	4619      	mov	r1, r3
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	4313      	orrs	r3, r2
 8007972:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	461a      	mov	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	01db      	lsls	r3, r3, #7
 800797e:	4413      	add	r3, r2
 8007980:	3384      	adds	r3, #132	; 0x84
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	6812      	ldr	r2, [r2, #0]
 8007988:	4611      	mov	r1, r2
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	01d2      	lsls	r2, r2, #7
 800798e:	440a      	add	r2, r1
 8007990:	3284      	adds	r2, #132	; 0x84
 8007992:	f023 0307 	bic.w	r3, r3, #7
 8007996:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	01db      	lsls	r3, r3, #7
 80079a2:	4413      	add	r3, r2
 80079a4:	3384      	adds	r3, #132	; 0x84
 80079a6:	461a      	mov	r2, r3
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80079b4:	021b      	lsls	r3, r3, #8
 80079b6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80079be:	041b      	lsls	r3, r3, #16
 80079c0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	061b      	lsls	r3, r3, #24
 80079c8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	01db      	lsls	r3, r3, #7
 80079d4:	4413      	add	r3, r2
 80079d6:	3384      	adds	r3, #132	; 0x84
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	01db      	lsls	r3, r3, #7
 80079e4:	4413      	add	r3, r2
 80079e6:	3384      	adds	r3, #132	; 0x84
 80079e8:	461a      	mov	r2, r3
 80079ea:	2300      	movs	r3, #0
 80079ec:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80079f4:	461a      	mov	r2, r3
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	431a      	orrs	r2, r3
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	431a      	orrs	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4619      	mov	r1, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	01db      	lsls	r3, r3, #7
 8007a08:	440b      	add	r3, r1
 8007a0a:	3384      	adds	r3, #132	; 0x84
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	461a      	mov	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	01db      	lsls	r3, r3, #7
 8007a1e:	4413      	add	r3, r2
 8007a20:	3384      	adds	r3, #132	; 0x84
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	6812      	ldr	r2, [r2, #0]
 8007a28:	4611      	mov	r1, r2
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	01d2      	lsls	r2, r2, #7
 8007a2e:	440a      	add	r2, r1
 8007a30:	3284      	adds	r2, #132	; 0x84
 8007a32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a36:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	01db      	lsls	r3, r3, #7
 8007a42:	4413      	add	r3, r2
 8007a44:	3384      	adds	r3, #132	; 0x84
 8007a46:	461a      	mov	r2, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	461a      	mov	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	01db      	lsls	r3, r3, #7
 8007a58:	4413      	add	r3, r2
 8007a5a:	3384      	adds	r3, #132	; 0x84
 8007a5c:	69da      	ldr	r2, [r3, #28]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4619      	mov	r1, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	01db      	lsls	r3, r3, #7
 8007a68:	440b      	add	r3, r1
 8007a6a:	3384      	adds	r3, #132	; 0x84
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	4b58      	ldr	r3, [pc, #352]	; (8007bd0 <LTDC_SetConfig+0x32c>)
 8007a70:	4013      	ands	r3, r2
 8007a72:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	69da      	ldr	r2, [r3, #28]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	6a1b      	ldr	r3, [r3, #32]
 8007a7c:	68f9      	ldr	r1, [r7, #12]
 8007a7e:	6809      	ldr	r1, [r1, #0]
 8007a80:	4608      	mov	r0, r1
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	01c9      	lsls	r1, r1, #7
 8007a86:	4401      	add	r1, r0
 8007a88:	3184      	adds	r1, #132	; 0x84
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	01db      	lsls	r3, r3, #7
 8007a98:	4413      	add	r3, r2
 8007a9a:	3384      	adds	r3, #132	; 0x84
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	01db      	lsls	r3, r3, #7
 8007aa8:	4413      	add	r3, r2
 8007aaa:	3384      	adds	r3, #132	; 0x84
 8007aac:	461a      	mov	r2, r3
 8007aae:	2300      	movs	r3, #0
 8007ab0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	01db      	lsls	r3, r3, #7
 8007abc:	4413      	add	r3, r2
 8007abe:	3384      	adds	r3, #132	; 0x84
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d102      	bne.n	8007ad6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	61fb      	str	r3, [r7, #28]
 8007ad4:	e01b      	b.n	8007b0e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d102      	bne.n	8007ae4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	61fb      	str	r3, [r7, #28]
 8007ae2:	e014      	b.n	8007b0e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d00b      	beq.n	8007b04 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d007      	beq.n	8007b04 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d003      	beq.n	8007b04 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007b00:	2b07      	cmp	r3, #7
 8007b02:	d102      	bne.n	8007b0a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007b04:	2302      	movs	r3, #2
 8007b06:	61fb      	str	r3, [r7, #28]
 8007b08:	e001      	b.n	8007b0e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	01db      	lsls	r3, r3, #7
 8007b18:	4413      	add	r3, r2
 8007b1a:	3384      	adds	r3, #132	; 0x84
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	6812      	ldr	r2, [r2, #0]
 8007b22:	4611      	mov	r1, r2
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	01d2      	lsls	r2, r2, #7
 8007b28:	440a      	add	r2, r1
 8007b2a:	3284      	adds	r2, #132	; 0x84
 8007b2c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007b30:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b36:	69fa      	ldr	r2, [r7, #28]
 8007b38:	fb02 f303 	mul.w	r3, r2, r3
 8007b3c:	041a      	lsls	r2, r3, #16
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	6859      	ldr	r1, [r3, #4]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	1acb      	subs	r3, r1, r3
 8007b48:	69f9      	ldr	r1, [r7, #28]
 8007b4a:	fb01 f303 	mul.w	r3, r1, r3
 8007b4e:	3303      	adds	r3, #3
 8007b50:	68f9      	ldr	r1, [r7, #12]
 8007b52:	6809      	ldr	r1, [r1, #0]
 8007b54:	4608      	mov	r0, r1
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	01c9      	lsls	r1, r1, #7
 8007b5a:	4401      	add	r1, r0
 8007b5c:	3184      	adds	r1, #132	; 0x84
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	01db      	lsls	r3, r3, #7
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3384      	adds	r3, #132	; 0x84
 8007b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4619      	mov	r1, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	01db      	lsls	r3, r3, #7
 8007b7c:	440b      	add	r3, r1
 8007b7e:	3384      	adds	r3, #132	; 0x84
 8007b80:	4619      	mov	r1, r3
 8007b82:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <LTDC_SetConfig+0x330>)
 8007b84:	4013      	ands	r3, r2
 8007b86:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	01db      	lsls	r3, r3, #7
 8007b92:	4413      	add	r3, r2
 8007b94:	3384      	adds	r3, #132	; 0x84
 8007b96:	461a      	mov	r2, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	01db      	lsls	r3, r3, #7
 8007ba8:	4413      	add	r3, r2
 8007baa:	3384      	adds	r3, #132	; 0x84
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	4611      	mov	r1, r2
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	01d2      	lsls	r2, r2, #7
 8007bb8:	440a      	add	r2, r1
 8007bba:	3284      	adds	r2, #132	; 0x84
 8007bbc:	f043 0301 	orr.w	r3, r3, #1
 8007bc0:	6013      	str	r3, [r2, #0]
}
 8007bc2:	bf00      	nop
 8007bc4:	3724      	adds	r7, #36	; 0x24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	fffff8f8 	.word	0xfffff8f8
 8007bd4:	fffff800 	.word	0xfffff800

08007bd8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bdc:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a04      	ldr	r2, [pc, #16]	; (8007bf4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007be6:	6013      	str	r3, [r2, #0]
}
 8007be8:	bf00      	nop
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	40007000 	.word	0x40007000

08007bf8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007c02:	4b23      	ldr	r3, [pc, #140]	; (8007c90 <HAL_PWREx_EnableOverDrive+0x98>)
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	4a22      	ldr	r2, [pc, #136]	; (8007c90 <HAL_PWREx_EnableOverDrive+0x98>)
 8007c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8007c0e:	4b20      	ldr	r3, [pc, #128]	; (8007c90 <HAL_PWREx_EnableOverDrive+0x98>)
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c16:	603b      	str	r3, [r7, #0]
 8007c18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007c1a:	4b1e      	ldr	r3, [pc, #120]	; (8007c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a1d      	ldr	r2, [pc, #116]	; (8007c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c26:	f7fc ffe1 	bl	8004bec <HAL_GetTick>
 8007c2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c2c:	e009      	b.n	8007c42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007c2e:	f7fc ffdd 	bl	8004bec <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c3c:	d901      	bls.n	8007c42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e022      	b.n	8007c88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c42:	4b14      	ldr	r3, [pc, #80]	; (8007c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c4e:	d1ee      	bne.n	8007c2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007c50:	4b10      	ldr	r3, [pc, #64]	; (8007c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a0f      	ldr	r2, [pc, #60]	; (8007c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c5c:	f7fc ffc6 	bl	8004bec <HAL_GetTick>
 8007c60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007c62:	e009      	b.n	8007c78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007c64:	f7fc ffc2 	bl	8004bec <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c72:	d901      	bls.n	8007c78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e007      	b.n	8007c88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007c78:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c84:	d1ee      	bne.n	8007c64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40023800 	.word	0x40023800
 8007c94:	40007000 	.word	0x40007000

08007c98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e291      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0301 	and.w	r3, r3, #1
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 8087 	beq.w	8007dca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cbc:	4b96      	ldr	r3, [pc, #600]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f003 030c 	and.w	r3, r3, #12
 8007cc4:	2b04      	cmp	r3, #4
 8007cc6:	d00c      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cc8:	4b93      	ldr	r3, [pc, #588]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f003 030c 	and.w	r3, r3, #12
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d112      	bne.n	8007cfa <HAL_RCC_OscConfig+0x62>
 8007cd4:	4b90      	ldr	r3, [pc, #576]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ce0:	d10b      	bne.n	8007cfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ce2:	4b8d      	ldr	r3, [pc, #564]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d06c      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x130>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d168      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e26b      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d02:	d106      	bne.n	8007d12 <HAL_RCC_OscConfig+0x7a>
 8007d04:	4b84      	ldr	r3, [pc, #528]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a83      	ldr	r2, [pc, #524]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	e02e      	b.n	8007d70 <HAL_RCC_OscConfig+0xd8>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10c      	bne.n	8007d34 <HAL_RCC_OscConfig+0x9c>
 8007d1a:	4b7f      	ldr	r3, [pc, #508]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a7e      	ldr	r2, [pc, #504]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	4b7c      	ldr	r3, [pc, #496]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a7b      	ldr	r2, [pc, #492]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	e01d      	b.n	8007d70 <HAL_RCC_OscConfig+0xd8>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d3c:	d10c      	bne.n	8007d58 <HAL_RCC_OscConfig+0xc0>
 8007d3e:	4b76      	ldr	r3, [pc, #472]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a75      	ldr	r2, [pc, #468]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	4b73      	ldr	r3, [pc, #460]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a72      	ldr	r2, [pc, #456]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	e00b      	b.n	8007d70 <HAL_RCC_OscConfig+0xd8>
 8007d58:	4b6f      	ldr	r3, [pc, #444]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a6e      	ldr	r2, [pc, #440]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	4b6c      	ldr	r3, [pc, #432]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a6b      	ldr	r2, [pc, #428]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d013      	beq.n	8007da0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d78:	f7fc ff38 	bl	8004bec <HAL_GetTick>
 8007d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d80:	f7fc ff34 	bl	8004bec <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b64      	cmp	r3, #100	; 0x64
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e21f      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d92:	4b61      	ldr	r3, [pc, #388]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0f0      	beq.n	8007d80 <HAL_RCC_OscConfig+0xe8>
 8007d9e:	e014      	b.n	8007dca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da0:	f7fc ff24 	bl	8004bec <HAL_GetTick>
 8007da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007da6:	e008      	b.n	8007dba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007da8:	f7fc ff20 	bl	8004bec <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b64      	cmp	r3, #100	; 0x64
 8007db4:	d901      	bls.n	8007dba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e20b      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dba:	4b57      	ldr	r3, [pc, #348]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1f0      	bne.n	8007da8 <HAL_RCC_OscConfig+0x110>
 8007dc6:	e000      	b.n	8007dca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d069      	beq.n	8007eaa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007dd6:	4b50      	ldr	r3, [pc, #320]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	f003 030c 	and.w	r3, r3, #12
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d00b      	beq.n	8007dfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007de2:	4b4d      	ldr	r3, [pc, #308]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f003 030c 	and.w	r3, r3, #12
 8007dea:	2b08      	cmp	r3, #8
 8007dec:	d11c      	bne.n	8007e28 <HAL_RCC_OscConfig+0x190>
 8007dee:	4b4a      	ldr	r3, [pc, #296]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d116      	bne.n	8007e28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007dfa:	4b47      	ldr	r3, [pc, #284]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <HAL_RCC_OscConfig+0x17a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d001      	beq.n	8007e12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e1df      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e12:	4b41      	ldr	r3, [pc, #260]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	493d      	ldr	r1, [pc, #244]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e26:	e040      	b.n	8007eaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d023      	beq.n	8007e78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e30:	4b39      	ldr	r3, [pc, #228]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a38      	ldr	r2, [pc, #224]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e3c:	f7fc fed6 	bl	8004bec <HAL_GetTick>
 8007e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e42:	e008      	b.n	8007e56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e44:	f7fc fed2 	bl	8004bec <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e1bd      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e56:	4b30      	ldr	r3, [pc, #192]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0f0      	beq.n	8007e44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e62:	4b2d      	ldr	r3, [pc, #180]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	4929      	ldr	r1, [pc, #164]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	600b      	str	r3, [r1, #0]
 8007e76:	e018      	b.n	8007eaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e78:	4b27      	ldr	r3, [pc, #156]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a26      	ldr	r2, [pc, #152]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007e7e:	f023 0301 	bic.w	r3, r3, #1
 8007e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e84:	f7fc feb2 	bl	8004bec <HAL_GetTick>
 8007e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e8a:	e008      	b.n	8007e9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e8c:	f7fc feae 	bl	8004bec <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e199      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e9e:	4b1e      	ldr	r3, [pc, #120]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1f0      	bne.n	8007e8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 0308 	and.w	r3, r3, #8
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d038      	beq.n	8007f28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d019      	beq.n	8007ef2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ebe:	4b16      	ldr	r3, [pc, #88]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ec2:	4a15      	ldr	r2, [pc, #84]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007ec4:	f043 0301 	orr.w	r3, r3, #1
 8007ec8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eca:	f7fc fe8f 	bl	8004bec <HAL_GetTick>
 8007ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ed0:	e008      	b.n	8007ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ed2:	f7fc fe8b 	bl	8004bec <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d901      	bls.n	8007ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e176      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ee4:	4b0c      	ldr	r3, [pc, #48]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d0f0      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x23a>
 8007ef0:	e01a      	b.n	8007f28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ef2:	4b09      	ldr	r3, [pc, #36]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef6:	4a08      	ldr	r2, [pc, #32]	; (8007f18 <HAL_RCC_OscConfig+0x280>)
 8007ef8:	f023 0301 	bic.w	r3, r3, #1
 8007efc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007efe:	f7fc fe75 	bl	8004bec <HAL_GetTick>
 8007f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f04:	e00a      	b.n	8007f1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f06:	f7fc fe71 	bl	8004bec <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d903      	bls.n	8007f1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e15c      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
 8007f18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f1c:	4b91      	ldr	r3, [pc, #580]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f20:	f003 0302 	and.w	r3, r3, #2
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1ee      	bne.n	8007f06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 80a4 	beq.w	800807e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f36:	4b8b      	ldr	r3, [pc, #556]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10d      	bne.n	8007f5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f42:	4b88      	ldr	r3, [pc, #544]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f46:	4a87      	ldr	r2, [pc, #540]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8007f4e:	4b85      	ldr	r3, [pc, #532]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f56:	60bb      	str	r3, [r7, #8]
 8007f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f5e:	4b82      	ldr	r3, [pc, #520]	; (8008168 <HAL_RCC_OscConfig+0x4d0>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d118      	bne.n	8007f9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007f6a:	4b7f      	ldr	r3, [pc, #508]	; (8008168 <HAL_RCC_OscConfig+0x4d0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a7e      	ldr	r2, [pc, #504]	; (8008168 <HAL_RCC_OscConfig+0x4d0>)
 8007f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f76:	f7fc fe39 	bl	8004bec <HAL_GetTick>
 8007f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f7c:	e008      	b.n	8007f90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f7e:	f7fc fe35 	bl	8004bec <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	2b64      	cmp	r3, #100	; 0x64
 8007f8a:	d901      	bls.n	8007f90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e120      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f90:	4b75      	ldr	r3, [pc, #468]	; (8008168 <HAL_RCC_OscConfig+0x4d0>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d0f0      	beq.n	8007f7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d106      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x31a>
 8007fa4:	4b6f      	ldr	r3, [pc, #444]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa8:	4a6e      	ldr	r2, [pc, #440]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007faa:	f043 0301 	orr.w	r3, r3, #1
 8007fae:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb0:	e02d      	b.n	800800e <HAL_RCC_OscConfig+0x376>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10c      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x33c>
 8007fba:	4b6a      	ldr	r3, [pc, #424]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbe:	4a69      	ldr	r2, [pc, #420]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc6:	4b67      	ldr	r3, [pc, #412]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fca:	4a66      	ldr	r2, [pc, #408]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007fcc:	f023 0304 	bic.w	r3, r3, #4
 8007fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8007fd2:	e01c      	b.n	800800e <HAL_RCC_OscConfig+0x376>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b05      	cmp	r3, #5
 8007fda:	d10c      	bne.n	8007ff6 <HAL_RCC_OscConfig+0x35e>
 8007fdc:	4b61      	ldr	r3, [pc, #388]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe0:	4a60      	ldr	r2, [pc, #384]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007fe2:	f043 0304 	orr.w	r3, r3, #4
 8007fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fe8:	4b5e      	ldr	r3, [pc, #376]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fec:	4a5d      	ldr	r2, [pc, #372]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007fee:	f043 0301 	orr.w	r3, r3, #1
 8007ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ff4:	e00b      	b.n	800800e <HAL_RCC_OscConfig+0x376>
 8007ff6:	4b5b      	ldr	r3, [pc, #364]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffa:	4a5a      	ldr	r2, [pc, #360]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8007ffc:	f023 0301 	bic.w	r3, r3, #1
 8008000:	6713      	str	r3, [r2, #112]	; 0x70
 8008002:	4b58      	ldr	r3, [pc, #352]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8008004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008006:	4a57      	ldr	r2, [pc, #348]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8008008:	f023 0304 	bic.w	r3, r3, #4
 800800c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d015      	beq.n	8008042 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008016:	f7fc fde9 	bl	8004bec <HAL_GetTick>
 800801a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800801c:	e00a      	b.n	8008034 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800801e:	f7fc fde5 	bl	8004bec <HAL_GetTick>
 8008022:	4602      	mov	r2, r0
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	f241 3288 	movw	r2, #5000	; 0x1388
 800802c:	4293      	cmp	r3, r2
 800802e:	d901      	bls.n	8008034 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008030:	2303      	movs	r3, #3
 8008032:	e0ce      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008034:	4b4b      	ldr	r3, [pc, #300]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8008036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0ee      	beq.n	800801e <HAL_RCC_OscConfig+0x386>
 8008040:	e014      	b.n	800806c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008042:	f7fc fdd3 	bl	8004bec <HAL_GetTick>
 8008046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008048:	e00a      	b.n	8008060 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800804a:	f7fc fdcf 	bl	8004bec <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	f241 3288 	movw	r2, #5000	; 0x1388
 8008058:	4293      	cmp	r3, r2
 800805a:	d901      	bls.n	8008060 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e0b8      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008060:	4b40      	ldr	r3, [pc, #256]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8008062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1ee      	bne.n	800804a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800806c:	7dfb      	ldrb	r3, [r7, #23]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d105      	bne.n	800807e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008072:	4b3c      	ldr	r3, [pc, #240]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8008074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008076:	4a3b      	ldr	r2, [pc, #236]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8008078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800807c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 80a4 	beq.w	80081d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008088:	4b36      	ldr	r3, [pc, #216]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f003 030c 	and.w	r3, r3, #12
 8008090:	2b08      	cmp	r3, #8
 8008092:	d06b      	beq.n	800816c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	2b02      	cmp	r3, #2
 800809a:	d149      	bne.n	8008130 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800809c:	4b31      	ldr	r3, [pc, #196]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a30      	ldr	r2, [pc, #192]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 80080a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a8:	f7fc fda0 	bl	8004bec <HAL_GetTick>
 80080ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ae:	e008      	b.n	80080c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080b0:	f7fc fd9c 	bl	8004bec <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e087      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080c2:	4b28      	ldr	r3, [pc, #160]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1f0      	bne.n	80080b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	69da      	ldr	r2, [r3, #28]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	431a      	orrs	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	019b      	lsls	r3, r3, #6
 80080de:	431a      	orrs	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e4:	085b      	lsrs	r3, r3, #1
 80080e6:	3b01      	subs	r3, #1
 80080e8:	041b      	lsls	r3, r3, #16
 80080ea:	431a      	orrs	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	061b      	lsls	r3, r3, #24
 80080f2:	4313      	orrs	r3, r2
 80080f4:	4a1b      	ldr	r2, [pc, #108]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 80080f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080fc:	4b19      	ldr	r3, [pc, #100]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a18      	ldr	r2, [pc, #96]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8008102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008108:	f7fc fd70 	bl	8004bec <HAL_GetTick>
 800810c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800810e:	e008      	b.n	8008122 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008110:	f7fc fd6c 	bl	8004bec <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e057      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008122:	4b10      	ldr	r3, [pc, #64]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0f0      	beq.n	8008110 <HAL_RCC_OscConfig+0x478>
 800812e:	e04f      	b.n	80081d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008130:	4b0c      	ldr	r3, [pc, #48]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a0b      	ldr	r2, [pc, #44]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8008136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800813a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800813c:	f7fc fd56 	bl	8004bec <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008144:	f7fc fd52 	bl	8004bec <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e03d      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008156:	4b03      	ldr	r3, [pc, #12]	; (8008164 <HAL_RCC_OscConfig+0x4cc>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1f0      	bne.n	8008144 <HAL_RCC_OscConfig+0x4ac>
 8008162:	e035      	b.n	80081d0 <HAL_RCC_OscConfig+0x538>
 8008164:	40023800 	.word	0x40023800
 8008168:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800816c:	4b1b      	ldr	r3, [pc, #108]	; (80081dc <HAL_RCC_OscConfig+0x544>)
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d028      	beq.n	80081cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008184:	429a      	cmp	r2, r3
 8008186:	d121      	bne.n	80081cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008192:	429a      	cmp	r2, r3
 8008194:	d11a      	bne.n	80081cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800819c:	4013      	ands	r3, r2
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d111      	bne.n	80081cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	085b      	lsrs	r3, r3, #1
 80081b4:	3b01      	subs	r3, #1
 80081b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d107      	bne.n	80081cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d001      	beq.n	80081d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e000      	b.n	80081d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	40023800 	.word	0x40023800

080081e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80081ea:	2300      	movs	r3, #0
 80081ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e0d0      	b.n	800839a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081f8:	4b6a      	ldr	r3, [pc, #424]	; (80083a4 <HAL_RCC_ClockConfig+0x1c4>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 030f 	and.w	r3, r3, #15
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d910      	bls.n	8008228 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008206:	4b67      	ldr	r3, [pc, #412]	; (80083a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f023 020f 	bic.w	r2, r3, #15
 800820e:	4965      	ldr	r1, [pc, #404]	; (80083a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	4313      	orrs	r3, r2
 8008214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008216:	4b63      	ldr	r3, [pc, #396]	; (80083a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 030f 	and.w	r3, r3, #15
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	429a      	cmp	r2, r3
 8008222:	d001      	beq.n	8008228 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e0b8      	b.n	800839a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	2b00      	cmp	r3, #0
 8008232:	d020      	beq.n	8008276 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0304 	and.w	r3, r3, #4
 800823c:	2b00      	cmp	r3, #0
 800823e:	d005      	beq.n	800824c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008240:	4b59      	ldr	r3, [pc, #356]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	4a58      	ldr	r2, [pc, #352]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 8008246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800824a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0308 	and.w	r3, r3, #8
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008258:	4b53      	ldr	r3, [pc, #332]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	4a52      	ldr	r2, [pc, #328]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 800825e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008262:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008264:	4b50      	ldr	r3, [pc, #320]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	494d      	ldr	r1, [pc, #308]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 8008272:	4313      	orrs	r3, r2
 8008274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d040      	beq.n	8008304 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d107      	bne.n	800829a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800828a:	4b47      	ldr	r3, [pc, #284]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d115      	bne.n	80082c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e07f      	b.n	800839a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d107      	bne.n	80082b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082a2:	4b41      	ldr	r3, [pc, #260]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d109      	bne.n	80082c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e073      	b.n	800839a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082b2:	4b3d      	ldr	r3, [pc, #244]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e06b      	b.n	800839a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082c2:	4b39      	ldr	r3, [pc, #228]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	f023 0203 	bic.w	r2, r3, #3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	4936      	ldr	r1, [pc, #216]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082d4:	f7fc fc8a 	bl	8004bec <HAL_GetTick>
 80082d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082da:	e00a      	b.n	80082f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082dc:	f7fc fc86 	bl	8004bec <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d901      	bls.n	80082f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e053      	b.n	800839a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082f2:	4b2d      	ldr	r3, [pc, #180]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f003 020c 	and.w	r2, r3, #12
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	429a      	cmp	r2, r3
 8008302:	d1eb      	bne.n	80082dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008304:	4b27      	ldr	r3, [pc, #156]	; (80083a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 030f 	and.w	r3, r3, #15
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	429a      	cmp	r2, r3
 8008310:	d210      	bcs.n	8008334 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008312:	4b24      	ldr	r3, [pc, #144]	; (80083a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f023 020f 	bic.w	r2, r3, #15
 800831a:	4922      	ldr	r1, [pc, #136]	; (80083a4 <HAL_RCC_ClockConfig+0x1c4>)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	4313      	orrs	r3, r2
 8008320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008322:	4b20      	ldr	r3, [pc, #128]	; (80083a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 030f 	and.w	r3, r3, #15
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	429a      	cmp	r2, r3
 800832e:	d001      	beq.n	8008334 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e032      	b.n	800839a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0304 	and.w	r3, r3, #4
 800833c:	2b00      	cmp	r3, #0
 800833e:	d008      	beq.n	8008352 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008340:	4b19      	ldr	r3, [pc, #100]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	4916      	ldr	r1, [pc, #88]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 800834e:	4313      	orrs	r3, r2
 8008350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0308 	and.w	r3, r3, #8
 800835a:	2b00      	cmp	r3, #0
 800835c:	d009      	beq.n	8008372 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800835e:	4b12      	ldr	r3, [pc, #72]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	490e      	ldr	r1, [pc, #56]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 800836e:	4313      	orrs	r3, r2
 8008370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008372:	f000 f821 	bl	80083b8 <HAL_RCC_GetSysClockFreq>
 8008376:	4602      	mov	r2, r0
 8008378:	4b0b      	ldr	r3, [pc, #44]	; (80083a8 <HAL_RCC_ClockConfig+0x1c8>)
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	091b      	lsrs	r3, r3, #4
 800837e:	f003 030f 	and.w	r3, r3, #15
 8008382:	490a      	ldr	r1, [pc, #40]	; (80083ac <HAL_RCC_ClockConfig+0x1cc>)
 8008384:	5ccb      	ldrb	r3, [r1, r3]
 8008386:	fa22 f303 	lsr.w	r3, r2, r3
 800838a:	4a09      	ldr	r2, [pc, #36]	; (80083b0 <HAL_RCC_ClockConfig+0x1d0>)
 800838c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800838e:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <HAL_RCC_ClockConfig+0x1d4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4618      	mov	r0, r3
 8008394:	f7fc fb1c 	bl	80049d0 <HAL_InitTick>

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	40023c00 	.word	0x40023c00
 80083a8:	40023800 	.word	0x40023800
 80083ac:	08034000 	.word	0x08034000
 80083b0:	20000040 	.word	0x20000040
 80083b4:	20000044 	.word	0x20000044

080083b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083b8:	b5b0      	push	{r4, r5, r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80083be:	2100      	movs	r1, #0
 80083c0:	6079      	str	r1, [r7, #4]
 80083c2:	2100      	movs	r1, #0
 80083c4:	60f9      	str	r1, [r7, #12]
 80083c6:	2100      	movs	r1, #0
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80083ca:	2100      	movs	r1, #0
 80083cc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083ce:	4952      	ldr	r1, [pc, #328]	; (8008518 <HAL_RCC_GetSysClockFreq+0x160>)
 80083d0:	6889      	ldr	r1, [r1, #8]
 80083d2:	f001 010c 	and.w	r1, r1, #12
 80083d6:	2908      	cmp	r1, #8
 80083d8:	d00d      	beq.n	80083f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80083da:	2908      	cmp	r1, #8
 80083dc:	f200 8094 	bhi.w	8008508 <HAL_RCC_GetSysClockFreq+0x150>
 80083e0:	2900      	cmp	r1, #0
 80083e2:	d002      	beq.n	80083ea <HAL_RCC_GetSysClockFreq+0x32>
 80083e4:	2904      	cmp	r1, #4
 80083e6:	d003      	beq.n	80083f0 <HAL_RCC_GetSysClockFreq+0x38>
 80083e8:	e08e      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083ea:	4b4c      	ldr	r3, [pc, #304]	; (800851c <HAL_RCC_GetSysClockFreq+0x164>)
 80083ec:	60bb      	str	r3, [r7, #8]
      break;
 80083ee:	e08e      	b.n	800850e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083f0:	4b4b      	ldr	r3, [pc, #300]	; (8008520 <HAL_RCC_GetSysClockFreq+0x168>)
 80083f2:	60bb      	str	r3, [r7, #8]
      break;
 80083f4:	e08b      	b.n	800850e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083f6:	4948      	ldr	r1, [pc, #288]	; (8008518 <HAL_RCC_GetSysClockFreq+0x160>)
 80083f8:	6849      	ldr	r1, [r1, #4]
 80083fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80083fe:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008400:	4945      	ldr	r1, [pc, #276]	; (8008518 <HAL_RCC_GetSysClockFreq+0x160>)
 8008402:	6849      	ldr	r1, [r1, #4]
 8008404:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008408:	2900      	cmp	r1, #0
 800840a:	d024      	beq.n	8008456 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800840c:	4942      	ldr	r1, [pc, #264]	; (8008518 <HAL_RCC_GetSysClockFreq+0x160>)
 800840e:	6849      	ldr	r1, [r1, #4]
 8008410:	0989      	lsrs	r1, r1, #6
 8008412:	4608      	mov	r0, r1
 8008414:	f04f 0100 	mov.w	r1, #0
 8008418:	f240 14ff 	movw	r4, #511	; 0x1ff
 800841c:	f04f 0500 	mov.w	r5, #0
 8008420:	ea00 0204 	and.w	r2, r0, r4
 8008424:	ea01 0305 	and.w	r3, r1, r5
 8008428:	493d      	ldr	r1, [pc, #244]	; (8008520 <HAL_RCC_GetSysClockFreq+0x168>)
 800842a:	fb01 f003 	mul.w	r0, r1, r3
 800842e:	2100      	movs	r1, #0
 8008430:	fb01 f102 	mul.w	r1, r1, r2
 8008434:	1844      	adds	r4, r0, r1
 8008436:	493a      	ldr	r1, [pc, #232]	; (8008520 <HAL_RCC_GetSysClockFreq+0x168>)
 8008438:	fba2 0101 	umull	r0, r1, r2, r1
 800843c:	1863      	adds	r3, r4, r1
 800843e:	4619      	mov	r1, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	461a      	mov	r2, r3
 8008444:	f04f 0300 	mov.w	r3, #0
 8008448:	f7f7 fee2 	bl	8000210 <__aeabi_uldivmod>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4613      	mov	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	e04a      	b.n	80084ec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008456:	4b30      	ldr	r3, [pc, #192]	; (8008518 <HAL_RCC_GetSysClockFreq+0x160>)
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	099b      	lsrs	r3, r3, #6
 800845c:	461a      	mov	r2, r3
 800845e:	f04f 0300 	mov.w	r3, #0
 8008462:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008466:	f04f 0100 	mov.w	r1, #0
 800846a:	ea02 0400 	and.w	r4, r2, r0
 800846e:	ea03 0501 	and.w	r5, r3, r1
 8008472:	4620      	mov	r0, r4
 8008474:	4629      	mov	r1, r5
 8008476:	f04f 0200 	mov.w	r2, #0
 800847a:	f04f 0300 	mov.w	r3, #0
 800847e:	014b      	lsls	r3, r1, #5
 8008480:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008484:	0142      	lsls	r2, r0, #5
 8008486:	4610      	mov	r0, r2
 8008488:	4619      	mov	r1, r3
 800848a:	1b00      	subs	r0, r0, r4
 800848c:	eb61 0105 	sbc.w	r1, r1, r5
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	018b      	lsls	r3, r1, #6
 800849a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800849e:	0182      	lsls	r2, r0, #6
 80084a0:	1a12      	subs	r2, r2, r0
 80084a2:	eb63 0301 	sbc.w	r3, r3, r1
 80084a6:	f04f 0000 	mov.w	r0, #0
 80084aa:	f04f 0100 	mov.w	r1, #0
 80084ae:	00d9      	lsls	r1, r3, #3
 80084b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084b4:	00d0      	lsls	r0, r2, #3
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	1912      	adds	r2, r2, r4
 80084bc:	eb45 0303 	adc.w	r3, r5, r3
 80084c0:	f04f 0000 	mov.w	r0, #0
 80084c4:	f04f 0100 	mov.w	r1, #0
 80084c8:	0299      	lsls	r1, r3, #10
 80084ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80084ce:	0290      	lsls	r0, r2, #10
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	4610      	mov	r0, r2
 80084d6:	4619      	mov	r1, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	461a      	mov	r2, r3
 80084dc:	f04f 0300 	mov.w	r3, #0
 80084e0:	f7f7 fe96 	bl	8000210 <__aeabi_uldivmod>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4613      	mov	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80084ec:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <HAL_RCC_GetSysClockFreq+0x160>)
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	0c1b      	lsrs	r3, r3, #16
 80084f2:	f003 0303 	and.w	r3, r3, #3
 80084f6:	3301      	adds	r3, #1
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	fbb2 f3f3 	udiv	r3, r2, r3
 8008504:	60bb      	str	r3, [r7, #8]
      break;
 8008506:	e002      	b.n	800850e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008508:	4b04      	ldr	r3, [pc, #16]	; (800851c <HAL_RCC_GetSysClockFreq+0x164>)
 800850a:	60bb      	str	r3, [r7, #8]
      break;
 800850c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800850e:	68bb      	ldr	r3, [r7, #8]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bdb0      	pop	{r4, r5, r7, pc}
 8008518:	40023800 	.word	0x40023800
 800851c:	00f42400 	.word	0x00f42400
 8008520:	017d7840 	.word	0x017d7840

08008524 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008524:	b480      	push	{r7}
 8008526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008528:	4b03      	ldr	r3, [pc, #12]	; (8008538 <HAL_RCC_GetHCLKFreq+0x14>)
 800852a:	681b      	ldr	r3, [r3, #0]
}
 800852c:	4618      	mov	r0, r3
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	20000040 	.word	0x20000040

0800853c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008540:	f7ff fff0 	bl	8008524 <HAL_RCC_GetHCLKFreq>
 8008544:	4602      	mov	r2, r0
 8008546:	4b05      	ldr	r3, [pc, #20]	; (800855c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	0a9b      	lsrs	r3, r3, #10
 800854c:	f003 0307 	and.w	r3, r3, #7
 8008550:	4903      	ldr	r1, [pc, #12]	; (8008560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008552:	5ccb      	ldrb	r3, [r1, r3]
 8008554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008558:	4618      	mov	r0, r3
 800855a:	bd80      	pop	{r7, pc}
 800855c:	40023800 	.word	0x40023800
 8008560:	08034010 	.word	0x08034010

08008564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008568:	f7ff ffdc 	bl	8008524 <HAL_RCC_GetHCLKFreq>
 800856c:	4602      	mov	r2, r0
 800856e:	4b05      	ldr	r3, [pc, #20]	; (8008584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	0b5b      	lsrs	r3, r3, #13
 8008574:	f003 0307 	and.w	r3, r3, #7
 8008578:	4903      	ldr	r1, [pc, #12]	; (8008588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800857a:	5ccb      	ldrb	r3, [r1, r3]
 800857c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008580:	4618      	mov	r0, r3
 8008582:	bd80      	pop	{r7, pc}
 8008584:	40023800 	.word	0x40023800
 8008588:	08034010 	.word	0x08034010

0800858c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	220f      	movs	r2, #15
 800859a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800859c:	4b12      	ldr	r3, [pc, #72]	; (80085e8 <HAL_RCC_GetClockConfig+0x5c>)
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f003 0203 	and.w	r2, r3, #3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80085a8:	4b0f      	ldr	r3, [pc, #60]	; (80085e8 <HAL_RCC_GetClockConfig+0x5c>)
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80085b4:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <HAL_RCC_GetClockConfig+0x5c>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80085c0:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <HAL_RCC_GetClockConfig+0x5c>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	08db      	lsrs	r3, r3, #3
 80085c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80085ce:	4b07      	ldr	r3, [pc, #28]	; (80085ec <HAL_RCC_GetClockConfig+0x60>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 020f 	and.w	r2, r3, #15
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	601a      	str	r2, [r3, #0]
}
 80085da:	bf00      	nop
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	40023800 	.word	0x40023800
 80085ec:	40023c00 	.word	0x40023c00

080085f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80085f8:	2300      	movs	r3, #0
 80085fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008600:	2300      	movs	r3, #0
 8008602:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008604:	2300      	movs	r3, #0
 8008606:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008608:	2300      	movs	r3, #0
 800860a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0301 	and.w	r3, r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	d012      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008618:	4b69      	ldr	r3, [pc, #420]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	4a68      	ldr	r2, [pc, #416]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800861e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008622:	6093      	str	r3, [r2, #8]
 8008624:	4b66      	ldr	r3, [pc, #408]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008626:	689a      	ldr	r2, [r3, #8]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800862c:	4964      	ldr	r1, [pc, #400]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800862e:	4313      	orrs	r3, r2
 8008630:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008636:	2b00      	cmp	r3, #0
 8008638:	d101      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800863a:	2301      	movs	r3, #1
 800863c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008646:	2b00      	cmp	r3, #0
 8008648:	d017      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800864a:	4b5d      	ldr	r3, [pc, #372]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800864c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008650:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008658:	4959      	ldr	r1, [pc, #356]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800865a:	4313      	orrs	r3, r2
 800865c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008668:	d101      	bne.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800866a:	2301      	movs	r3, #1
 800866c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008672:	2b00      	cmp	r3, #0
 8008674:	d101      	bne.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008676:	2301      	movs	r3, #1
 8008678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d017      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008686:	4b4e      	ldr	r3, [pc, #312]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800868c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	494a      	ldr	r1, [pc, #296]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008696:	4313      	orrs	r3, r2
 8008698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086a4:	d101      	bne.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80086a6:	2301      	movs	r3, #1
 80086a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80086b2:	2301      	movs	r3, #1
 80086b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80086c2:	2301      	movs	r3, #1
 80086c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0320 	and.w	r3, r3, #32
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 808b 	beq.w	80087ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80086d4:	4b3a      	ldr	r3, [pc, #232]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d8:	4a39      	ldr	r2, [pc, #228]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086de:	6413      	str	r3, [r2, #64]	; 0x40
 80086e0:	4b37      	ldr	r3, [pc, #220]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e8:	60bb      	str	r3, [r7, #8]
 80086ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80086ec:	4b35      	ldr	r3, [pc, #212]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a34      	ldr	r2, [pc, #208]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086f8:	f7fc fa78 	bl	8004bec <HAL_GetTick>
 80086fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80086fe:	e008      	b.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008700:	f7fc fa74 	bl	8004bec <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	2b64      	cmp	r3, #100	; 0x64
 800870c:	d901      	bls.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e357      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008712:	4b2c      	ldr	r3, [pc, #176]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0f0      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800871e:	4b28      	ldr	r3, [pc, #160]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008726:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d035      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008736:	693a      	ldr	r2, [r7, #16]
 8008738:	429a      	cmp	r2, r3
 800873a:	d02e      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800873c:	4b20      	ldr	r3, [pc, #128]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800873e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008744:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008746:	4b1e      	ldr	r3, [pc, #120]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874a:	4a1d      	ldr	r2, [pc, #116]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800874c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008750:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008752:	4b1b      	ldr	r3, [pc, #108]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008756:	4a1a      	ldr	r2, [pc, #104]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800875c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800875e:	4a18      	ldr	r2, [pc, #96]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008764:	4b16      	ldr	r3, [pc, #88]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b01      	cmp	r3, #1
 800876e:	d114      	bne.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008770:	f7fc fa3c 	bl	8004bec <HAL_GetTick>
 8008774:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008776:	e00a      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008778:	f7fc fa38 	bl	8004bec <HAL_GetTick>
 800877c:	4602      	mov	r2, r0
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	f241 3288 	movw	r2, #5000	; 0x1388
 8008786:	4293      	cmp	r3, r2
 8008788:	d901      	bls.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e319      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800878e:	4b0c      	ldr	r3, [pc, #48]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0ee      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087a6:	d111      	bne.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80087a8:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80087b4:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80087b6:	400b      	ands	r3, r1
 80087b8:	4901      	ldr	r1, [pc, #4]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	608b      	str	r3, [r1, #8]
 80087be:	e00b      	b.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80087c0:	40023800 	.word	0x40023800
 80087c4:	40007000 	.word	0x40007000
 80087c8:	0ffffcff 	.word	0x0ffffcff
 80087cc:	4bb1      	ldr	r3, [pc, #708]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	4ab0      	ldr	r2, [pc, #704]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80087d6:	6093      	str	r3, [r2, #8]
 80087d8:	4bae      	ldr	r3, [pc, #696]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087e4:	49ab      	ldr	r1, [pc, #684]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0310 	and.w	r3, r3, #16
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d010      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087f6:	4ba7      	ldr	r3, [pc, #668]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087fc:	4aa5      	ldr	r2, [pc, #660]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008802:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008806:	4ba3      	ldr	r3, [pc, #652]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008808:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008810:	49a0      	ldr	r1, [pc, #640]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008812:	4313      	orrs	r3, r2
 8008814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00a      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008824:	4b9b      	ldr	r3, [pc, #620]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800882a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008832:	4998      	ldr	r1, [pc, #608]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008834:	4313      	orrs	r3, r2
 8008836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00a      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008846:	4b93      	ldr	r3, [pc, #588]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800884c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008854:	498f      	ldr	r1, [pc, #572]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008856:	4313      	orrs	r3, r2
 8008858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00a      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008868:	4b8a      	ldr	r3, [pc, #552]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800886a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800886e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008876:	4987      	ldr	r1, [pc, #540]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008878:	4313      	orrs	r3, r2
 800887a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00a      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800888a:	4b82      	ldr	r3, [pc, #520]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800888c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008890:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008898:	497e      	ldr	r1, [pc, #504]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800889a:	4313      	orrs	r3, r2
 800889c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00a      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80088ac:	4b79      	ldr	r3, [pc, #484]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b2:	f023 0203 	bic.w	r2, r3, #3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ba:	4976      	ldr	r1, [pc, #472]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00a      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80088ce:	4b71      	ldr	r3, [pc, #452]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d4:	f023 020c 	bic.w	r2, r3, #12
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088dc:	496d      	ldr	r1, [pc, #436]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00a      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80088f0:	4b68      	ldr	r3, [pc, #416]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088fe:	4965      	ldr	r1, [pc, #404]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008900:	4313      	orrs	r3, r2
 8008902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008912:	4b60      	ldr	r3, [pc, #384]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008918:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008920:	495c      	ldr	r1, [pc, #368]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008922:	4313      	orrs	r3, r2
 8008924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00a      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008934:	4b57      	ldr	r3, [pc, #348]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800893a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008942:	4954      	ldr	r1, [pc, #336]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008944:	4313      	orrs	r3, r2
 8008946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00a      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008956:	4b4f      	ldr	r3, [pc, #316]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800895c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008964:	494b      	ldr	r1, [pc, #300]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008966:	4313      	orrs	r3, r2
 8008968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00a      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008978:	4b46      	ldr	r3, [pc, #280]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800897a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800897e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008986:	4943      	ldr	r1, [pc, #268]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008988:	4313      	orrs	r3, r2
 800898a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00a      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800899a:	4b3e      	ldr	r3, [pc, #248]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800899c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089a8:	493a      	ldr	r1, [pc, #232]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00a      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80089bc:	4b35      	ldr	r3, [pc, #212]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ca:	4932      	ldr	r1, [pc, #200]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089cc:	4313      	orrs	r3, r2
 80089ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d011      	beq.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80089de:	4b2d      	ldr	r3, [pc, #180]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ec:	4929      	ldr	r1, [pc, #164]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089fc:	d101      	bne.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80089fe:	2301      	movs	r3, #1
 8008a00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0308 	and.w	r3, r3, #8
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a1e:	4b1d      	ldr	r3, [pc, #116]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a2c:	4919      	ldr	r1, [pc, #100]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00b      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008a40:	4b14      	ldr	r3, [pc, #80]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a50:	4910      	ldr	r1, [pc, #64]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d006      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 80d9 	beq.w	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008a6c:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a08      	ldr	r2, [pc, #32]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a78:	f7fc f8b8 	bl	8004bec <HAL_GetTick>
 8008a7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a7e:	e00b      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a80:	f7fc f8b4 	bl	8004bec <HAL_GetTick>
 8008a84:	4602      	mov	r2, r0
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	2b64      	cmp	r3, #100	; 0x64
 8008a8c:	d904      	bls.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e197      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008a92:	bf00      	nop
 8008a94:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a98:	4b6c      	ldr	r3, [pc, #432]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1ed      	bne.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d021      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d11d      	bne.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008ab8:	4b64      	ldr	r3, [pc, #400]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008abe:	0c1b      	lsrs	r3, r3, #16
 8008ac0:	f003 0303 	and.w	r3, r3, #3
 8008ac4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008ac6:	4b61      	ldr	r3, [pc, #388]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008acc:	0e1b      	lsrs	r3, r3, #24
 8008ace:	f003 030f 	and.w	r3, r3, #15
 8008ad2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	019a      	lsls	r2, r3, #6
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	041b      	lsls	r3, r3, #16
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	061b      	lsls	r3, r3, #24
 8008ae4:	431a      	orrs	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	071b      	lsls	r3, r3, #28
 8008aec:	4957      	ldr	r1, [pc, #348]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d004      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b08:	d00a      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d02e      	beq.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b1e:	d129      	bne.n	8008b74 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008b20:	4b4a      	ldr	r3, [pc, #296]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b26:	0c1b      	lsrs	r3, r3, #16
 8008b28:	f003 0303 	and.w	r3, r3, #3
 8008b2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008b2e:	4b47      	ldr	r3, [pc, #284]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b34:	0f1b      	lsrs	r3, r3, #28
 8008b36:	f003 0307 	and.w	r3, r3, #7
 8008b3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	019a      	lsls	r2, r3, #6
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	041b      	lsls	r3, r3, #16
 8008b46:	431a      	orrs	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	061b      	lsls	r3, r3, #24
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	071b      	lsls	r3, r3, #28
 8008b54:	493d      	ldr	r1, [pc, #244]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b56:	4313      	orrs	r3, r2
 8008b58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008b5c:	4b3b      	ldr	r3, [pc, #236]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b62:	f023 021f 	bic.w	r2, r3, #31
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	4937      	ldr	r1, [pc, #220]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d01d      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008b80:	4b32      	ldr	r3, [pc, #200]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b86:	0e1b      	lsrs	r3, r3, #24
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008b8e:	4b2f      	ldr	r3, [pc, #188]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b94:	0f1b      	lsrs	r3, r3, #28
 8008b96:	f003 0307 	and.w	r3, r3, #7
 8008b9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	019a      	lsls	r2, r3, #6
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	041b      	lsls	r3, r3, #16
 8008ba8:	431a      	orrs	r2, r3
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	061b      	lsls	r3, r3, #24
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	071b      	lsls	r3, r3, #28
 8008bb4:	4925      	ldr	r1, [pc, #148]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d011      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	019a      	lsls	r2, r3, #6
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	041b      	lsls	r3, r3, #16
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	061b      	lsls	r3, r3, #24
 8008bdc:	431a      	orrs	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	071b      	lsls	r3, r3, #28
 8008be4:	4919      	ldr	r1, [pc, #100]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008bec:	4b17      	ldr	r3, [pc, #92]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a16      	ldr	r2, [pc, #88]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bf8:	f7fb fff8 	bl	8004bec <HAL_GetTick>
 8008bfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008bfe:	e008      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008c00:	f7fb fff4 	bl	8004bec <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	2b64      	cmp	r3, #100	; 0x64
 8008c0c:	d901      	bls.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c0e:	2303      	movs	r3, #3
 8008c10:	e0d7      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008c12:	4b0e      	ldr	r3, [pc, #56]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d0f0      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	f040 80cd 	bne.w	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008c26:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a08      	ldr	r2, [pc, #32]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c32:	f7fb ffdb 	bl	8004bec <HAL_GetTick>
 8008c36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c38:	e00a      	b.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008c3a:	f7fb ffd7 	bl	8004bec <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	2b64      	cmp	r3, #100	; 0x64
 8008c46:	d903      	bls.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e0ba      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008c4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c50:	4b5e      	ldr	r3, [pc, #376]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c5c:	d0ed      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d009      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d02e      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d12a      	bne.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008c86:	4b51      	ldr	r3, [pc, #324]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c8c:	0c1b      	lsrs	r3, r3, #16
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008c94:	4b4d      	ldr	r3, [pc, #308]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c9a:	0f1b      	lsrs	r3, r3, #28
 8008c9c:	f003 0307 	and.w	r3, r3, #7
 8008ca0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	019a      	lsls	r2, r3, #6
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	041b      	lsls	r3, r3, #16
 8008cac:	431a      	orrs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	061b      	lsls	r3, r3, #24
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	071b      	lsls	r3, r3, #28
 8008cba:	4944      	ldr	r1, [pc, #272]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008cc2:	4b42      	ldr	r3, [pc, #264]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cc8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	493d      	ldr	r1, [pc, #244]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d022      	beq.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cf0:	d11d      	bne.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008cf2:	4b36      	ldr	r3, [pc, #216]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cf8:	0e1b      	lsrs	r3, r3, #24
 8008cfa:	f003 030f 	and.w	r3, r3, #15
 8008cfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008d00:	4b32      	ldr	r3, [pc, #200]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d06:	0f1b      	lsrs	r3, r3, #28
 8008d08:	f003 0307 	and.w	r3, r3, #7
 8008d0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	019a      	lsls	r2, r3, #6
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a1b      	ldr	r3, [r3, #32]
 8008d18:	041b      	lsls	r3, r3, #16
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	061b      	lsls	r3, r3, #24
 8008d20:	431a      	orrs	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	071b      	lsls	r3, r3, #28
 8008d26:	4929      	ldr	r1, [pc, #164]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0308 	and.w	r3, r3, #8
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d028      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008d3a:	4b24      	ldr	r3, [pc, #144]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d40:	0e1b      	lsrs	r3, r3, #24
 8008d42:	f003 030f 	and.w	r3, r3, #15
 8008d46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008d48:	4b20      	ldr	r3, [pc, #128]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d4e:	0c1b      	lsrs	r3, r3, #16
 8008d50:	f003 0303 	and.w	r3, r3, #3
 8008d54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	019a      	lsls	r2, r3, #6
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	041b      	lsls	r3, r3, #16
 8008d60:	431a      	orrs	r2, r3
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	061b      	lsls	r3, r3, #24
 8008d66:	431a      	orrs	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	69db      	ldr	r3, [r3, #28]
 8008d6c:	071b      	lsls	r3, r3, #28
 8008d6e:	4917      	ldr	r1, [pc, #92]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d70:	4313      	orrs	r3, r2
 8008d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008d76:	4b15      	ldr	r3, [pc, #84]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d84:	4911      	ldr	r1, [pc, #68]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008d8c:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a0e      	ldr	r2, [pc, #56]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d98:	f7fb ff28 	bl	8004bec <HAL_GetTick>
 8008d9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d9e:	e008      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008da0:	f7fb ff24 	bl	8004bec <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	2b64      	cmp	r3, #100	; 0x64
 8008dac:	d901      	bls.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e007      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008db2:	4b06      	ldr	r3, [pc, #24]	; (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dbe:	d1ef      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3720      	adds	r7, #32
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	40023800 	.word	0x40023800

08008dd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e081      	b.n	8008ee6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	7f5b      	ldrb	r3, [r3, #29]
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d105      	bne.n	8008df8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7fb fb18 	bl	8004428 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	22ca      	movs	r2, #202	; 0xca
 8008e04:	625a      	str	r2, [r3, #36]	; 0x24
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2253      	movs	r2, #83	; 0x53
 8008e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fb16 	bl	8009440 <RTC_EnterInitMode>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d008      	beq.n	8008e2c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	22ff      	movs	r2, #255	; 0xff
 8008e20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2204      	movs	r2, #4
 8008e26:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e05c      	b.n	8008ee6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6899      	ldr	r1, [r3, #8]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	4b2e      	ldr	r3, [pc, #184]	; (8008ef0 <HAL_RTC_Init+0x120>)
 8008e38:	400b      	ands	r3, r1
 8008e3a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6899      	ldr	r1, [r3, #8]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	431a      	orrs	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	68d2      	ldr	r2, [r2, #12]
 8008e62:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6919      	ldr	r1, [r3, #16]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	041a      	lsls	r2, r3, #16
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	430a      	orrs	r2, r1
 8008e76:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e86:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	f003 0320 	and.w	r3, r3, #32
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10e      	bne.n	8008eb4 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 faaa 	bl	80093f0 <HAL_RTC_WaitForSynchro>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d008      	beq.n	8008eb4 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	22ff      	movs	r2, #255	; 0xff
 8008ea8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2204      	movs	r2, #4
 8008eae:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e018      	b.n	8008ee6 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0208 	bic.w	r2, r2, #8
 8008ec2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699a      	ldr	r2, [r3, #24]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	22ff      	movs	r2, #255	; 0xff
 8008edc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
  }
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	ff8fffbf 	.word	0xff8fffbf

08008ef4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ef4:	b590      	push	{r4, r7, lr}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008f00:	2300      	movs	r3, #0
 8008f02:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	7f1b      	ldrb	r3, [r3, #28]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d101      	bne.n	8008f10 <HAL_RTC_SetTime+0x1c>
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	e0a8      	b.n	8009062 <HAL_RTC_SetTime+0x16e>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2201      	movs	r2, #1
 8008f14:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2202      	movs	r2, #2
 8008f1a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d126      	bne.n	8008f70 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d102      	bne.n	8008f36 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2200      	movs	r2, #0
 8008f34:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 faac 	bl	8009498 <RTC_ByteToBcd2>
 8008f40:	4603      	mov	r3, r0
 8008f42:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	785b      	ldrb	r3, [r3, #1]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 faa5 	bl	8009498 <RTC_ByteToBcd2>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008f52:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	789b      	ldrb	r3, [r3, #2]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fa9d 	bl	8009498 <RTC_ByteToBcd2>
 8008f5e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008f60:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	7b1b      	ldrb	r3, [r3, #12]
 8008f68:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	617b      	str	r3, [r7, #20]
 8008f6e:	e018      	b.n	8008fa2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d102      	bne.n	8008f84 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2200      	movs	r2, #0
 8008f82:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	785b      	ldrb	r3, [r3, #1]
 8008f8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008f90:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008f96:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	7b1b      	ldrb	r3, [r3, #12]
 8008f9c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	22ca      	movs	r2, #202	; 0xca
 8008fa8:	625a      	str	r2, [r3, #36]	; 0x24
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2253      	movs	r2, #83	; 0x53
 8008fb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 fa44 	bl	8009440 <RTC_EnterInitMode>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00b      	beq.n	8008fd6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	22ff      	movs	r2, #255	; 0xff
 8008fc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2204      	movs	r2, #4
 8008fca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e045      	b.n	8009062 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	6979      	ldr	r1, [r7, #20]
 8008fdc:	4b23      	ldr	r3, [pc, #140]	; (800906c <HAL_RTC_SetTime+0x178>)
 8008fde:	400b      	ands	r3, r1
 8008fe0:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ff0:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6899      	ldr	r1, [r3, #8]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	691a      	ldr	r2, [r3, #16]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	695b      	ldr	r3, [r3, #20]
 8009000:	431a      	orrs	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68da      	ldr	r2, [r3, #12]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009018:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f003 0320 	and.w	r3, r3, #32
 8009024:	2b00      	cmp	r3, #0
 8009026:	d111      	bne.n	800904c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 f9e1 	bl	80093f0 <HAL_RTC_WaitForSynchro>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00b      	beq.n	800904c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	22ff      	movs	r2, #255	; 0xff
 800903a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2204      	movs	r2, #4
 8009040:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e00a      	b.n	8009062 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	22ff      	movs	r2, #255	; 0xff
 8009052:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2201      	movs	r2, #1
 8009058:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009060:	2300      	movs	r3, #0
  }
}
 8009062:	4618      	mov	r0, r3
 8009064:	371c      	adds	r7, #28
 8009066:	46bd      	mov	sp, r7
 8009068:	bd90      	pop	{r4, r7, pc}
 800906a:	bf00      	nop
 800906c:	007f7f7f 	.word	0x007f7f7f

08009070 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009070:	b590      	push	{r4, r7, lr}
 8009072:	b087      	sub	sp, #28
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	7f1b      	ldrb	r3, [r3, #28]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_RTC_SetDate+0x1c>
 8009088:	2302      	movs	r3, #2
 800908a:	e092      	b.n	80091b2 <HAL_RTC_SetDate+0x142>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2201      	movs	r2, #1
 8009090:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2202      	movs	r2, #2
 8009096:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10e      	bne.n	80090bc <HAL_RTC_SetDate+0x4c>
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	785b      	ldrb	r3, [r3, #1]
 80090a2:	f003 0310 	and.w	r3, r3, #16
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d008      	beq.n	80090bc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	785b      	ldrb	r3, [r3, #1]
 80090ae:	f023 0310 	bic.w	r3, r3, #16
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	330a      	adds	r3, #10
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d11c      	bne.n	80090fc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	78db      	ldrb	r3, [r3, #3]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 f9e6 	bl	8009498 <RTC_ByteToBcd2>
 80090cc:	4603      	mov	r3, r0
 80090ce:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	785b      	ldrb	r3, [r3, #1]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f9df 	bl	8009498 <RTC_ByteToBcd2>
 80090da:	4603      	mov	r3, r0
 80090dc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80090de:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	789b      	ldrb	r3, [r3, #2]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 f9d7 	bl	8009498 <RTC_ByteToBcd2>
 80090ea:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80090ec:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	781b      	ldrb	r3, [r3, #0]
 80090f4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80090f6:	4313      	orrs	r3, r2
 80090f8:	617b      	str	r3, [r7, #20]
 80090fa:	e00e      	b.n	800911a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	78db      	ldrb	r3, [r3, #3]
 8009100:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	785b      	ldrb	r3, [r3, #1]
 8009106:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009108:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800910e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009116:	4313      	orrs	r3, r2
 8009118:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	22ca      	movs	r2, #202	; 0xca
 8009120:	625a      	str	r2, [r3, #36]	; 0x24
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2253      	movs	r2, #83	; 0x53
 8009128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 f988 	bl	8009440 <RTC_EnterInitMode>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00b      	beq.n	800914e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	22ff      	movs	r2, #255	; 0xff
 800913c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2204      	movs	r2, #4
 8009142:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2200      	movs	r2, #0
 8009148:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e031      	b.n	80091b2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	6979      	ldr	r1, [r7, #20]
 8009154:	4b19      	ldr	r3, [pc, #100]	; (80091bc <HAL_RTC_SetDate+0x14c>)
 8009156:	400b      	ands	r3, r1
 8009158:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009168:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f003 0320 	and.w	r3, r3, #32
 8009174:	2b00      	cmp	r3, #0
 8009176:	d111      	bne.n	800919c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 f939 	bl	80093f0 <HAL_RTC_WaitForSynchro>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00b      	beq.n	800919c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	22ff      	movs	r2, #255	; 0xff
 800918a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2204      	movs	r2, #4
 8009190:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e00a      	b.n	80091b2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	22ff      	movs	r2, #255	; 0xff
 80091a2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2201      	movs	r2, #1
 80091a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80091b0:	2300      	movs	r3, #0
  }
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	371c      	adds	r7, #28
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd90      	pop	{r4, r7, pc}
 80091ba:	bf00      	nop
 80091bc:	00ffff3f 	.word	0x00ffff3f

080091c0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80091c0:	b590      	push	{r4, r7, lr}
 80091c2:	b089      	sub	sp, #36	; 0x24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80091d0:	2300      	movs	r3, #0
 80091d2:	61fb      	str	r3, [r7, #28]
 80091d4:	2300      	movs	r3, #0
 80091d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	7f1b      	ldrb	r3, [r3, #28]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d101      	bne.n	80091e4 <HAL_RTC_SetAlarm+0x24>
 80091e0:	2302      	movs	r3, #2
 80091e2:	e101      	b.n	80093e8 <HAL_RTC_SetAlarm+0x228>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2201      	movs	r2, #1
 80091e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2202      	movs	r2, #2
 80091ee:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d137      	bne.n	8009266 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009200:	2b00      	cmp	r3, #0
 8009202:	d102      	bne.n	800920a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2200      	movs	r2, #0
 8009208:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	4618      	mov	r0, r3
 8009210:	f000 f942 	bl	8009498 <RTC_ByteToBcd2>
 8009214:	4603      	mov	r3, r0
 8009216:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	785b      	ldrb	r3, [r3, #1]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 f93b 	bl	8009498 <RTC_ByteToBcd2>
 8009222:	4603      	mov	r3, r0
 8009224:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009226:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	789b      	ldrb	r3, [r3, #2]
 800922c:	4618      	mov	r0, r3
 800922e:	f000 f933 	bl	8009498 <RTC_ByteToBcd2>
 8009232:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009234:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	7b1b      	ldrb	r3, [r3, #12]
 800923c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800923e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009248:	4618      	mov	r0, r3
 800924a:	f000 f925 	bl	8009498 <RTC_ByteToBcd2>
 800924e:	4603      	mov	r3, r0
 8009250:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009252:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800925a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009260:	4313      	orrs	r3, r2
 8009262:	61fb      	str	r3, [r7, #28]
 8009264:	e023      	b.n	80092ae <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009270:	2b00      	cmp	r3, #0
 8009272:	d102      	bne.n	800927a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2200      	movs	r2, #0
 8009278:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	785b      	ldrb	r3, [r3, #1]
 8009284:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009286:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800928c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	7b1b      	ldrb	r3, [r3, #12]
 8009292:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009294:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800929c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800929e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80092a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80092aa:	4313      	orrs	r3, r2
 80092ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	69db      	ldr	r3, [r3, #28]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	22ca      	movs	r2, #202	; 0xca
 80092c0:	625a      	str	r2, [r3, #36]	; 0x24
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2253      	movs	r2, #83	; 0x53
 80092c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d2:	d13f      	bne.n	8009354 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092e2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	689a      	ldr	r2, [r3, #8]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80092f2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092f4:	f7fb fc7a 	bl	8004bec <HAL_GetTick>
 80092f8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80092fa:	e013      	b.n	8009324 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80092fc:	f7fb fc76 	bl	8004bec <HAL_GetTick>
 8009300:	4602      	mov	r2, r0
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800930a:	d90b      	bls.n	8009324 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	22ff      	movs	r2, #255	; 0xff
 8009312:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2203      	movs	r2, #3
 8009318:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009320:	2303      	movs	r3, #3
 8009322:	e061      	b.n	80093e8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	f003 0301 	and.w	r3, r3, #1
 800932e:	2b00      	cmp	r3, #0
 8009330:	d0e4      	beq.n	80092fc <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	69fa      	ldr	r2, [r7, #28]
 8009338:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689a      	ldr	r2, [r3, #8]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009350:	609a      	str	r2, [r3, #8]
 8009352:	e03e      	b.n	80093d2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689a      	ldr	r2, [r3, #8]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009362:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689a      	ldr	r2, [r3, #8]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009372:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009374:	f7fb fc3a 	bl	8004bec <HAL_GetTick>
 8009378:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800937a:	e013      	b.n	80093a4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800937c:	f7fb fc36 	bl	8004bec <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800938a:	d90b      	bls.n	80093a4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	22ff      	movs	r2, #255	; 0xff
 8009392:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2203      	movs	r2, #3
 8009398:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e021      	b.n	80093e8 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0e4      	beq.n	800937c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	69fa      	ldr	r2, [r7, #28]
 80093b8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	689a      	ldr	r2, [r3, #8]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	22ff      	movs	r2, #255	; 0xff
 80093d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2201      	movs	r2, #1
 80093de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3724      	adds	r7, #36	; 0x24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd90      	pop	{r4, r7, pc}

080093f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800940a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800940c:	f7fb fbee 	bl	8004bec <HAL_GetTick>
 8009410:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009412:	e009      	b.n	8009428 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009414:	f7fb fbea 	bl	8004bec <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009422:	d901      	bls.n	8009428 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e007      	b.n	8009438 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f003 0320 	and.w	r3, r3, #32
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0ee      	beq.n	8009414 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009456:	2b00      	cmp	r3, #0
 8009458:	d119      	bne.n	800948e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f04f 32ff 	mov.w	r2, #4294967295
 8009462:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009464:	f7fb fbc2 	bl	8004bec <HAL_GetTick>
 8009468:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800946a:	e009      	b.n	8009480 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800946c:	f7fb fbbe 	bl	8004bec <HAL_GetTick>
 8009470:	4602      	mov	r2, r0
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800947a:	d901      	bls.n	8009480 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	e007      	b.n	8009490 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800948a:	2b00      	cmp	r3, #0
 800948c:	d0ee      	beq.n	800946c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80094a6:	e005      	b.n	80094b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	3301      	adds	r3, #1
 80094ac:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	3b0a      	subs	r3, #10
 80094b2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	2b09      	cmp	r3, #9
 80094b8:	d8f6      	bhi.n	80094a8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	011b      	lsls	r3, r3, #4
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	b2db      	uxtb	r3, r3
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b087      	sub	sp, #28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80094e0:	2300      	movs	r3, #0
 80094e2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	7f1b      	ldrb	r3, [r3, #28]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d101      	bne.n	80094f0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80094ec:	2302      	movs	r3, #2
 80094ee:	e03e      	b.n	800956e <HAL_RTCEx_SetTimeStamp+0x9a>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2201      	movs	r2, #1
 80094f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2202      	movs	r2, #2
 80094fa:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689a      	ldr	r2, [r3, #8]
 8009502:	4b1e      	ldr	r3, [pc, #120]	; (800957c <HAL_RTCEx_SetTimeStamp+0xa8>)
 8009504:	4013      	ands	r3, r2
 8009506:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8009508:	697a      	ldr	r2, [r7, #20]
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	4313      	orrs	r3, r2
 800950e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	22ca      	movs	r2, #202	; 0xca
 8009516:	625a      	str	r2, [r3, #36]	; 0x24
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2253      	movs	r2, #83	; 0x53
 800951e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f022 0206 	bic.w	r2, r2, #6
 800952e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	430a      	orrs	r2, r1
 800953e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	697a      	ldr	r2, [r7, #20]
 8009546:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	689a      	ldr	r2, [r3, #8]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009556:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	22ff      	movs	r2, #255	; 0xff
 800955e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2201      	movs	r2, #1
 8009564:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	371c      	adds	r7, #28
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	fffff7f7 	.word	0xfffff7f7

08009580 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e025      	b.n	80095e0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	d106      	bne.n	80095ae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7fb fa07 	bl	80049bc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2202      	movs	r2, #2
 80095b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	3304      	adds	r3, #4
 80095be:	4619      	mov	r1, r3
 80095c0:	4610      	mov	r0, r2
 80095c2:	f001 fdb7 	bl	800b134 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	461a      	mov	r2, r3
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	f001 fe0b 	bl	800b1ec <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095fa:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d101      	bne.n	8009606 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009602:	2302      	movs	r3, #2
 8009604:	e021      	b.n	800964a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009606:	7dfb      	ldrb	r3, [r7, #23]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d002      	beq.n	8009612 <HAL_SDRAM_SendCommand+0x2a>
 800960c:	7dfb      	ldrb	r3, [r7, #23]
 800960e:	2b05      	cmp	r3, #5
 8009610:	d118      	bne.n	8009644 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2202      	movs	r2, #2
 8009616:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	68b9      	ldr	r1, [r7, #8]
 8009622:	4618      	mov	r0, r3
 8009624:	f001 fe4c 	bl	800b2c0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d104      	bne.n	800963a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2205      	movs	r2, #5
 8009634:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009638:	e006      	b.n	8009648 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009642:	e001      	b.n	8009648 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	e000      	b.n	800964a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3718      	adds	r7, #24
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b02      	cmp	r3, #2
 8009666:	d101      	bne.n	800966c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009668:	2302      	movs	r3, #2
 800966a:	e016      	b.n	800969a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b01      	cmp	r3, #1
 8009676:	d10f      	bne.n	8009698 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2202      	movs	r2, #2
 800967c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	4618      	mov	r0, r3
 8009688:	f001 fe3e 	bl	800b308 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	e000      	b.n	800969a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
}
 800969a:	4618      	mov	r0, r3
 800969c:	3708      	adds	r7, #8
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b084      	sub	sp, #16
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e09d      	b.n	80097f0 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d108      	bne.n	80096ce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096c4:	d009      	beq.n	80096da <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	61da      	str	r2, [r3, #28]
 80096cc:	e005      	b.n	80096da <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d106      	bne.n	80096fa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7fa fec5 	bl	8004484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2202      	movs	r2, #2
 80096fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009710:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800971a:	d902      	bls.n	8009722 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800971c:	2300      	movs	r3, #0
 800971e:	60fb      	str	r3, [r7, #12]
 8009720:	e002      	b.n	8009728 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009726:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009730:	d007      	beq.n	8009742 <HAL_SPI_Init+0xa0>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800973a:	d002      	beq.n	8009742 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009752:	431a      	orrs	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	f003 0302 	and.w	r3, r3, #2
 800975c:	431a      	orrs	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	f003 0301 	and.w	r3, r3, #1
 8009766:	431a      	orrs	r2, r3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009770:	431a      	orrs	r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800977a:	431a      	orrs	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a1b      	ldr	r3, [r3, #32]
 8009780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009784:	ea42 0103 	orr.w	r1, r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	0c1b      	lsrs	r3, r3, #16
 800979e:	f003 0204 	and.w	r2, r3, #4
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	f003 0310 	and.w	r3, r3, #16
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b0:	f003 0308 	and.w	r3, r3, #8
 80097b4:	431a      	orrs	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80097be:	ea42 0103 	orr.w	r1, r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	430a      	orrs	r2, r1
 80097ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	69da      	ldr	r2, [r3, #28]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e049      	b.n	800989e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d106      	bne.n	8009824 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7fa fe92 	bl	8004548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2202      	movs	r2, #2
 8009828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	3304      	adds	r3, #4
 8009834:	4619      	mov	r1, r3
 8009836:	4610      	mov	r0, r2
 8009838:	f000 fac0 	bl	8009dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d001      	beq.n	80098c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e054      	b.n	800996a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2202      	movs	r2, #2
 80098c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f042 0201 	orr.w	r2, r2, #1
 80098d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a26      	ldr	r2, [pc, #152]	; (8009978 <HAL_TIM_Base_Start_IT+0xd0>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d022      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ea:	d01d      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a22      	ldr	r2, [pc, #136]	; (800997c <HAL_TIM_Base_Start_IT+0xd4>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d018      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a21      	ldr	r2, [pc, #132]	; (8009980 <HAL_TIM_Base_Start_IT+0xd8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d013      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a1f      	ldr	r2, [pc, #124]	; (8009984 <HAL_TIM_Base_Start_IT+0xdc>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d00e      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a1e      	ldr	r2, [pc, #120]	; (8009988 <HAL_TIM_Base_Start_IT+0xe0>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d009      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a1c      	ldr	r2, [pc, #112]	; (800998c <HAL_TIM_Base_Start_IT+0xe4>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d004      	beq.n	8009928 <HAL_TIM_Base_Start_IT+0x80>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a1b      	ldr	r2, [pc, #108]	; (8009990 <HAL_TIM_Base_Start_IT+0xe8>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d115      	bne.n	8009954 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689a      	ldr	r2, [r3, #8]
 800992e:	4b19      	ldr	r3, [pc, #100]	; (8009994 <HAL_TIM_Base_Start_IT+0xec>)
 8009930:	4013      	ands	r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b06      	cmp	r3, #6
 8009938:	d015      	beq.n	8009966 <HAL_TIM_Base_Start_IT+0xbe>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009940:	d011      	beq.n	8009966 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f042 0201 	orr.w	r2, r2, #1
 8009950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009952:	e008      	b.n	8009966 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f042 0201 	orr.w	r2, r2, #1
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	e000      	b.n	8009968 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	40010000 	.word	0x40010000
 800997c:	40000400 	.word	0x40000400
 8009980:	40000800 	.word	0x40000800
 8009984:	40000c00 	.word	0x40000c00
 8009988:	40010400 	.word	0x40010400
 800998c:	40014000 	.word	0x40014000
 8009990:	40001800 	.word	0x40001800
 8009994:	00010007 	.word	0x00010007

08009998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	f003 0302 	and.w	r3, r3, #2
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d122      	bne.n	80099f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	f003 0302 	and.w	r3, r3, #2
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d11b      	bne.n	80099f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f06f 0202 	mvn.w	r2, #2
 80099c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d003      	beq.n	80099e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 f9d0 	bl	8009d80 <HAL_TIM_IC_CaptureCallback>
 80099e0:	e005      	b.n	80099ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f9c2 	bl	8009d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f9d3 	bl	8009d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	f003 0304 	and.w	r3, r3, #4
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	d122      	bne.n	8009a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d11b      	bne.n	8009a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f06f 0204 	mvn.w	r2, #4
 8009a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d003      	beq.n	8009a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f9a6 	bl	8009d80 <HAL_TIM_IC_CaptureCallback>
 8009a34:	e005      	b.n	8009a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f998 	bl	8009d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f9a9 	bl	8009d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f003 0308 	and.w	r3, r3, #8
 8009a52:	2b08      	cmp	r3, #8
 8009a54:	d122      	bne.n	8009a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	f003 0308 	and.w	r3, r3, #8
 8009a60:	2b08      	cmp	r3, #8
 8009a62:	d11b      	bne.n	8009a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f06f 0208 	mvn.w	r2, #8
 8009a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2204      	movs	r2, #4
 8009a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	f003 0303 	and.w	r3, r3, #3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f97c 	bl	8009d80 <HAL_TIM_IC_CaptureCallback>
 8009a88:	e005      	b.n	8009a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 f96e 	bl	8009d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f97f 	bl	8009d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	f003 0310 	and.w	r3, r3, #16
 8009aa6:	2b10      	cmp	r3, #16
 8009aa8:	d122      	bne.n	8009af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	f003 0310 	and.w	r3, r3, #16
 8009ab4:	2b10      	cmp	r3, #16
 8009ab6:	d11b      	bne.n	8009af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f06f 0210 	mvn.w	r2, #16
 8009ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2208      	movs	r2, #8
 8009ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f952 	bl	8009d80 <HAL_TIM_IC_CaptureCallback>
 8009adc:	e005      	b.n	8009aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f944 	bl	8009d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f955 	bl	8009d94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d10e      	bne.n	8009b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d107      	bne.n	8009b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f06f 0201 	mvn.w	r2, #1
 8009b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f7f8 fd62 	bl	80025e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b26:	2b80      	cmp	r3, #128	; 0x80
 8009b28:	d10e      	bne.n	8009b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b34:	2b80      	cmp	r3, #128	; 0x80
 8009b36:	d107      	bne.n	8009b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fb0c 	bl	800a160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b56:	d10e      	bne.n	8009b76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b62:	2b80      	cmp	r3, #128	; 0x80
 8009b64:	d107      	bne.n	8009b76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 faff 	bl	800a174 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b80:	2b40      	cmp	r3, #64	; 0x40
 8009b82:	d10e      	bne.n	8009ba2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b8e:	2b40      	cmp	r3, #64	; 0x40
 8009b90:	d107      	bne.n	8009ba2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f903 	bl	8009da8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	f003 0320 	and.w	r3, r3, #32
 8009bac:	2b20      	cmp	r3, #32
 8009bae:	d10e      	bne.n	8009bce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	f003 0320 	and.w	r3, r3, #32
 8009bba:	2b20      	cmp	r3, #32
 8009bbc:	d107      	bne.n	8009bce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f06f 0220 	mvn.w	r2, #32
 8009bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fabf 	bl	800a14c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bce:	bf00      	nop
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d101      	bne.n	8009bf4 <HAL_TIM_ConfigClockSource+0x1c>
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	e0b4      	b.n	8009d5e <HAL_TIM_ConfigClockSource+0x186>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2202      	movs	r2, #2
 8009c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	4b56      	ldr	r3, [pc, #344]	; (8009d68 <HAL_TIM_ConfigClockSource+0x190>)
 8009c10:	4013      	ands	r3, r2
 8009c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c2c:	d03e      	beq.n	8009cac <HAL_TIM_ConfigClockSource+0xd4>
 8009c2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c32:	f200 8087 	bhi.w	8009d44 <HAL_TIM_ConfigClockSource+0x16c>
 8009c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c3a:	f000 8086 	beq.w	8009d4a <HAL_TIM_ConfigClockSource+0x172>
 8009c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c42:	d87f      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x16c>
 8009c44:	2b70      	cmp	r3, #112	; 0x70
 8009c46:	d01a      	beq.n	8009c7e <HAL_TIM_ConfigClockSource+0xa6>
 8009c48:	2b70      	cmp	r3, #112	; 0x70
 8009c4a:	d87b      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x16c>
 8009c4c:	2b60      	cmp	r3, #96	; 0x60
 8009c4e:	d050      	beq.n	8009cf2 <HAL_TIM_ConfigClockSource+0x11a>
 8009c50:	2b60      	cmp	r3, #96	; 0x60
 8009c52:	d877      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x16c>
 8009c54:	2b50      	cmp	r3, #80	; 0x50
 8009c56:	d03c      	beq.n	8009cd2 <HAL_TIM_ConfigClockSource+0xfa>
 8009c58:	2b50      	cmp	r3, #80	; 0x50
 8009c5a:	d873      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x16c>
 8009c5c:	2b40      	cmp	r3, #64	; 0x40
 8009c5e:	d058      	beq.n	8009d12 <HAL_TIM_ConfigClockSource+0x13a>
 8009c60:	2b40      	cmp	r3, #64	; 0x40
 8009c62:	d86f      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x16c>
 8009c64:	2b30      	cmp	r3, #48	; 0x30
 8009c66:	d064      	beq.n	8009d32 <HAL_TIM_ConfigClockSource+0x15a>
 8009c68:	2b30      	cmp	r3, #48	; 0x30
 8009c6a:	d86b      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x16c>
 8009c6c:	2b20      	cmp	r3, #32
 8009c6e:	d060      	beq.n	8009d32 <HAL_TIM_ConfigClockSource+0x15a>
 8009c70:	2b20      	cmp	r3, #32
 8009c72:	d867      	bhi.n	8009d44 <HAL_TIM_ConfigClockSource+0x16c>
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d05c      	beq.n	8009d32 <HAL_TIM_ConfigClockSource+0x15a>
 8009c78:	2b10      	cmp	r3, #16
 8009c7a:	d05a      	beq.n	8009d32 <HAL_TIM_ConfigClockSource+0x15a>
 8009c7c:	e062      	b.n	8009d44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6818      	ldr	r0, [r3, #0]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	6899      	ldr	r1, [r3, #8]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	685a      	ldr	r2, [r3, #4]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	f000 f9af 	bl	8009ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68ba      	ldr	r2, [r7, #8]
 8009ca8:	609a      	str	r2, [r3, #8]
      break;
 8009caa:	e04f      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6818      	ldr	r0, [r3, #0]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	6899      	ldr	r1, [r3, #8]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685a      	ldr	r2, [r3, #4]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	f000 f998 	bl	8009ff0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689a      	ldr	r2, [r3, #8]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cce:	609a      	str	r2, [r3, #8]
      break;
 8009cd0:	e03c      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6818      	ldr	r0, [r3, #0]
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	6859      	ldr	r1, [r3, #4]
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	f000 f90c 	bl	8009efc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2150      	movs	r1, #80	; 0x50
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 f965 	bl	8009fba <TIM_ITRx_SetConfig>
      break;
 8009cf0:	e02c      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6818      	ldr	r0, [r3, #0]
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	6859      	ldr	r1, [r3, #4]
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f000 f92b 	bl	8009f5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2160      	movs	r1, #96	; 0x60
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 f955 	bl	8009fba <TIM_ITRx_SetConfig>
      break;
 8009d10:	e01c      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6818      	ldr	r0, [r3, #0]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	6859      	ldr	r1, [r3, #4]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f000 f8ec 	bl	8009efc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2140      	movs	r1, #64	; 0x40
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 f945 	bl	8009fba <TIM_ITRx_SetConfig>
      break;
 8009d30:	e00c      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	f000 f93c 	bl	8009fba <TIM_ITRx_SetConfig>
      break;
 8009d42:	e003      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	73fb      	strb	r3, [r7, #15]
      break;
 8009d48:	e000      	b.n	8009d4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009d4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	fffeff88 	.word	0xfffeff88

08009d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a40      	ldr	r2, [pc, #256]	; (8009ed0 <TIM_Base_SetConfig+0x114>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d013      	beq.n	8009dfc <TIM_Base_SetConfig+0x40>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dda:	d00f      	beq.n	8009dfc <TIM_Base_SetConfig+0x40>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a3d      	ldr	r2, [pc, #244]	; (8009ed4 <TIM_Base_SetConfig+0x118>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d00b      	beq.n	8009dfc <TIM_Base_SetConfig+0x40>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a3c      	ldr	r2, [pc, #240]	; (8009ed8 <TIM_Base_SetConfig+0x11c>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d007      	beq.n	8009dfc <TIM_Base_SetConfig+0x40>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a3b      	ldr	r2, [pc, #236]	; (8009edc <TIM_Base_SetConfig+0x120>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d003      	beq.n	8009dfc <TIM_Base_SetConfig+0x40>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a3a      	ldr	r2, [pc, #232]	; (8009ee0 <TIM_Base_SetConfig+0x124>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d108      	bne.n	8009e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a2f      	ldr	r2, [pc, #188]	; (8009ed0 <TIM_Base_SetConfig+0x114>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d02b      	beq.n	8009e6e <TIM_Base_SetConfig+0xb2>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e1c:	d027      	beq.n	8009e6e <TIM_Base_SetConfig+0xb2>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a2c      	ldr	r2, [pc, #176]	; (8009ed4 <TIM_Base_SetConfig+0x118>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d023      	beq.n	8009e6e <TIM_Base_SetConfig+0xb2>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a2b      	ldr	r2, [pc, #172]	; (8009ed8 <TIM_Base_SetConfig+0x11c>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d01f      	beq.n	8009e6e <TIM_Base_SetConfig+0xb2>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a2a      	ldr	r2, [pc, #168]	; (8009edc <TIM_Base_SetConfig+0x120>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d01b      	beq.n	8009e6e <TIM_Base_SetConfig+0xb2>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a29      	ldr	r2, [pc, #164]	; (8009ee0 <TIM_Base_SetConfig+0x124>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d017      	beq.n	8009e6e <TIM_Base_SetConfig+0xb2>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a28      	ldr	r2, [pc, #160]	; (8009ee4 <TIM_Base_SetConfig+0x128>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d013      	beq.n	8009e6e <TIM_Base_SetConfig+0xb2>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4a27      	ldr	r2, [pc, #156]	; (8009ee8 <TIM_Base_SetConfig+0x12c>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d00f      	beq.n	8009e6e <TIM_Base_SetConfig+0xb2>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	4a26      	ldr	r2, [pc, #152]	; (8009eec <TIM_Base_SetConfig+0x130>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d00b      	beq.n	8009e6e <TIM_Base_SetConfig+0xb2>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	4a25      	ldr	r2, [pc, #148]	; (8009ef0 <TIM_Base_SetConfig+0x134>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d007      	beq.n	8009e6e <TIM_Base_SetConfig+0xb2>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a24      	ldr	r2, [pc, #144]	; (8009ef4 <TIM_Base_SetConfig+0x138>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d003      	beq.n	8009e6e <TIM_Base_SetConfig+0xb2>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a23      	ldr	r2, [pc, #140]	; (8009ef8 <TIM_Base_SetConfig+0x13c>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d108      	bne.n	8009e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	689a      	ldr	r2, [r3, #8]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a0a      	ldr	r2, [pc, #40]	; (8009ed0 <TIM_Base_SetConfig+0x114>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d003      	beq.n	8009eb4 <TIM_Base_SetConfig+0xf8>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a0c      	ldr	r2, [pc, #48]	; (8009ee0 <TIM_Base_SetConfig+0x124>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d103      	bne.n	8009ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	691a      	ldr	r2, [r3, #16]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	615a      	str	r2, [r3, #20]
}
 8009ec2:	bf00      	nop
 8009ec4:	3714      	adds	r7, #20
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	40010000 	.word	0x40010000
 8009ed4:	40000400 	.word	0x40000400
 8009ed8:	40000800 	.word	0x40000800
 8009edc:	40000c00 	.word	0x40000c00
 8009ee0:	40010400 	.word	0x40010400
 8009ee4:	40014000 	.word	0x40014000
 8009ee8:	40014400 	.word	0x40014400
 8009eec:	40014800 	.word	0x40014800
 8009ef0:	40001800 	.word	0x40001800
 8009ef4:	40001c00 	.word	0x40001c00
 8009ef8:	40002000 	.word	0x40002000

08009efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	f023 0201 	bic.w	r2, r3, #1
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	011b      	lsls	r3, r3, #4
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f023 030a 	bic.w	r3, r3, #10
 8009f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	621a      	str	r2, [r3, #32]
}
 8009f4e:	bf00      	nop
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b087      	sub	sp, #28
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	60f8      	str	r0, [r7, #12]
 8009f62:	60b9      	str	r1, [r7, #8]
 8009f64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	f023 0210 	bic.w	r2, r3, #16
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	031b      	lsls	r3, r3, #12
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	011b      	lsls	r3, r3, #4
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	697a      	ldr	r2, [r7, #20]
 8009fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	621a      	str	r2, [r3, #32]
}
 8009fae:	bf00      	nop
 8009fb0:	371c      	adds	r7, #28
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b085      	sub	sp, #20
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fd2:	683a      	ldr	r2, [r7, #0]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	f043 0307 	orr.w	r3, r3, #7
 8009fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	609a      	str	r2, [r3, #8]
}
 8009fe4:	bf00      	nop
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b087      	sub	sp, #28
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a00a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	021a      	lsls	r2, r3, #8
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	431a      	orrs	r2, r3
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4313      	orrs	r3, r2
 800a018:	697a      	ldr	r2, [r7, #20]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	609a      	str	r2, [r3, #8]
}
 800a024:	bf00      	nop
 800a026:	371c      	adds	r7, #28
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a040:	2b01      	cmp	r3, #1
 800a042:	d101      	bne.n	800a048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a044:	2302      	movs	r3, #2
 800a046:	e06d      	b.n	800a124 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2202      	movs	r2, #2
 800a054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a30      	ldr	r2, [pc, #192]	; (800a130 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d004      	beq.n	800a07c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a2f      	ldr	r2, [pc, #188]	; (800a134 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d108      	bne.n	800a08e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a082:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a094:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a20      	ldr	r2, [pc, #128]	; (800a130 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d022      	beq.n	800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ba:	d01d      	beq.n	800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a1d      	ldr	r2, [pc, #116]	; (800a138 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d018      	beq.n	800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a1c      	ldr	r2, [pc, #112]	; (800a13c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d013      	beq.n	800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a1a      	ldr	r2, [pc, #104]	; (800a140 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d00e      	beq.n	800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a15      	ldr	r2, [pc, #84]	; (800a134 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d009      	beq.n	800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a16      	ldr	r2, [pc, #88]	; (800a144 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d004      	beq.n	800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a15      	ldr	r2, [pc, #84]	; (800a148 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d10c      	bne.n	800a112 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	4313      	orrs	r3, r2
 800a108:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3714      	adds	r7, #20
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	40010000 	.word	0x40010000
 800a134:	40010400 	.word	0x40010400
 800a138:	40000400 	.word	0x40000400
 800a13c:	40000800 	.word	0x40000800
 800a140:	40000c00 	.word	0x40000c00
 800a144:	40014000 	.word	0x40014000
 800a148:	40001800 	.word	0x40001800

0800a14c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e040      	b.n	800a21c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d106      	bne.n	800a1b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7fa fa5e 	bl	800466c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2224      	movs	r2, #36	; 0x24
 800a1b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f022 0201 	bic.w	r2, r2, #1
 800a1c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fb16 	bl	800a7f8 <UART_SetConfig>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d101      	bne.n	800a1d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e022      	b.n	800a21c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fd6c 	bl	800acbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	685a      	ldr	r2, [r3, #4]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a1f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	689a      	ldr	r2, [r3, #8]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	681a      	ldr	r2, [r3, #0]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f042 0201 	orr.w	r2, r2, #1
 800a212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fdf3 	bl	800ae00 <UART_CheckIdleState>
 800a21a:	4603      	mov	r3, r0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b0ba      	sub	sp, #232	; 0xe8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	69db      	ldr	r3, [r3, #28]
 800a232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a24a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a24e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a252:	4013      	ands	r3, r2
 800a254:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d115      	bne.n	800a28c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a264:	f003 0320 	and.w	r3, r3, #32
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00f      	beq.n	800a28c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a270:	f003 0320 	and.w	r3, r3, #32
 800a274:	2b00      	cmp	r3, #0
 800a276:	d009      	beq.n	800a28c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f000 828f 	beq.w	800a7a0 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	4798      	blx	r3
      }
      return;
 800a28a:	e289      	b.n	800a7a0 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a28c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 8117 	beq.w	800a4c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a2a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a2a6:	4b85      	ldr	r3, [pc, #532]	; (800a4bc <HAL_UART_IRQHandler+0x298>)
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f000 810a 	beq.w	800a4c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2b4:	f003 0301 	and.w	r3, r3, #1
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d011      	beq.n	800a2e0 <HAL_UART_IRQHandler+0xbc>
 800a2bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00b      	beq.n	800a2e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2d6:	f043 0201 	orr.w	r2, r3, #1
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d011      	beq.n	800a310 <HAL_UART_IRQHandler+0xec>
 800a2ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00b      	beq.n	800a310 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a306:	f043 0204 	orr.w	r2, r3, #4
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a314:	f003 0304 	and.w	r3, r3, #4
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d011      	beq.n	800a340 <HAL_UART_IRQHandler+0x11c>
 800a31c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a320:	f003 0301 	and.w	r3, r3, #1
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00b      	beq.n	800a340 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2204      	movs	r2, #4
 800a32e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a336:	f043 0202 	orr.w	r2, r3, #2
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a344:	f003 0308 	and.w	r3, r3, #8
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d017      	beq.n	800a37c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a34c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a350:	f003 0320 	and.w	r3, r3, #32
 800a354:	2b00      	cmp	r3, #0
 800a356:	d105      	bne.n	800a364 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a35c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00b      	beq.n	800a37c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2208      	movs	r2, #8
 800a36a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a372:	f043 0208 	orr.w	r2, r3, #8
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a37c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a384:	2b00      	cmp	r3, #0
 800a386:	d012      	beq.n	800a3ae <HAL_UART_IRQHandler+0x18a>
 800a388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a38c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00c      	beq.n	800a3ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a39c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3a4:	f043 0220 	orr.w	r2, r3, #32
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	f000 81f5 	beq.w	800a7a4 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a3ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3be:	f003 0320 	and.w	r3, r3, #32
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00d      	beq.n	800a3e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a3c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3ca:	f003 0320 	and.w	r3, r3, #32
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d007      	beq.n	800a3e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d003      	beq.n	800a3e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f6:	2b40      	cmp	r3, #64	; 0x40
 800a3f8:	d005      	beq.n	800a406 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a3fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a402:	2b00      	cmp	r3, #0
 800a404:	d04f      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 fdf1 	bl	800afee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a416:	2b40      	cmp	r3, #64	; 0x40
 800a418:	d141      	bne.n	800a49e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3308      	adds	r3, #8
 800a420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a424:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a428:	e853 3f00 	ldrex	r3, [r3]
 800a42c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	3308      	adds	r3, #8
 800a442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a446:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a44a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a456:	e841 2300 	strex	r3, r2, [r1]
 800a45a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a45e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1d9      	bne.n	800a41a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d013      	beq.n	800a496 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a472:	4a13      	ldr	r2, [pc, #76]	; (800a4c0 <HAL_UART_IRQHandler+0x29c>)
 800a474:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fb fa86 	bl	800598c <HAL_DMA_Abort_IT>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d017      	beq.n	800a4b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a48c:	687a      	ldr	r2, [r7, #4]
 800a48e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a490:	4610      	mov	r0, r2
 800a492:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a494:	e00f      	b.n	800a4b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f998 	bl	800a7cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a49c:	e00b      	b.n	800a4b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f994 	bl	800a7cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4a4:	e007      	b.n	800a4b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 f990 	bl	800a7cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a4b4:	e176      	b.n	800a7a4 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4b6:	bf00      	nop
    return;
 800a4b8:	e174      	b.n	800a7a4 <HAL_UART_IRQHandler+0x580>
 800a4ba:	bf00      	nop
 800a4bc:	04000120 	.word	0x04000120
 800a4c0:	0800b0b5 	.word	0x0800b0b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	f040 8144 	bne.w	800a756 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4d2:	f003 0310 	and.w	r3, r3, #16
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 813d 	beq.w	800a756 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a4dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4e0:	f003 0310 	and.w	r3, r3, #16
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 8136 	beq.w	800a756 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2210      	movs	r2, #16
 800a4f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4fc:	2b40      	cmp	r3, #64	; 0x40
 800a4fe:	f040 80b2 	bne.w	800a666 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a50e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 8148 	beq.w	800a7a8 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a51e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a522:	429a      	cmp	r2, r3
 800a524:	f080 8140 	bcs.w	800a7a8 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a52e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a53c:	f000 8085 	beq.w	800a64a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a54c:	e853 3f00 	ldrex	r3, [r3]
 800a550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a55c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	461a      	mov	r2, r3
 800a566:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a56a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a56e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a572:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a576:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a57a:	e841 2300 	strex	r3, r2, [r1]
 800a57e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1da      	bne.n	800a540 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3308      	adds	r3, #8
 800a590:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a594:	e853 3f00 	ldrex	r3, [r3]
 800a598:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a59a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a59c:	f023 0301 	bic.w	r3, r3, #1
 800a5a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	3308      	adds	r3, #8
 800a5aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a5ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a5b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a5b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a5ba:	e841 2300 	strex	r3, r2, [r1]
 800a5be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a5c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1e1      	bne.n	800a58a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3308      	adds	r3, #8
 800a5cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5d0:	e853 3f00 	ldrex	r3, [r3]
 800a5d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a5d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3308      	adds	r3, #8
 800a5e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a5ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a5ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a5f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a5f2:	e841 2300 	strex	r3, r2, [r1]
 800a5f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a5f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e3      	bne.n	800a5c6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2220      	movs	r2, #32
 800a602:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a612:	e853 3f00 	ldrex	r3, [r3]
 800a616:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a61a:	f023 0310 	bic.w	r3, r3, #16
 800a61e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a62c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a62e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a630:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a632:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a634:	e841 2300 	strex	r3, r2, [r1]
 800a638:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a63a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1e4      	bne.n	800a60a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a644:	4618      	mov	r0, r3
 800a646:	f7fb f931 	bl	80058ac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a656:	b29b      	uxth	r3, r3
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	4619      	mov	r1, r3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f8be 	bl	800a7e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a664:	e0a0      	b.n	800a7a8 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a672:	b29b      	uxth	r3, r3
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a680:	b29b      	uxth	r3, r3
 800a682:	2b00      	cmp	r3, #0
 800a684:	f000 8092 	beq.w	800a7ac <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800a688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 808d 	beq.w	800a7ac <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69a:	e853 3f00 	ldrex	r3, [r3]
 800a69e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6b4:	647b      	str	r3, [r7, #68]	; 0x44
 800a6b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6bc:	e841 2300 	strex	r3, r2, [r1]
 800a6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1e4      	bne.n	800a692 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3308      	adds	r3, #8
 800a6ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	e853 3f00 	ldrex	r3, [r3]
 800a6d6:	623b      	str	r3, [r7, #32]
   return(result);
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	f023 0301 	bic.w	r3, r3, #1
 800a6de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	3308      	adds	r3, #8
 800a6e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a6ec:	633a      	str	r2, [r7, #48]	; 0x30
 800a6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6f4:	e841 2300 	strex	r3, r2, [r1]
 800a6f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d1e3      	bne.n	800a6c8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2220      	movs	r2, #32
 800a704:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	e853 3f00 	ldrex	r3, [r3]
 800a71e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f023 0310 	bic.w	r3, r3, #16
 800a726:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a734:	61fb      	str	r3, [r7, #28]
 800a736:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a738:	69b9      	ldr	r1, [r7, #24]
 800a73a:	69fa      	ldr	r2, [r7, #28]
 800a73c:	e841 2300 	strex	r3, r2, [r1]
 800a740:	617b      	str	r3, [r7, #20]
   return(result);
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1e4      	bne.n	800a712 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a74c:	4619      	mov	r1, r3
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f846 	bl	800a7e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a754:	e02a      	b.n	800a7ac <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a75a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00e      	beq.n	800a780 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d008      	beq.n	800a780 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a772:	2b00      	cmp	r3, #0
 800a774:	d01c      	beq.n	800a7b0 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	4798      	blx	r3
    }
    return;
 800a77e:	e017      	b.n	800a7b0 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d012      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x58e>
 800a78c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00c      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 fca1 	bl	800b0e0 <UART_EndTransmit_IT>
    return;
 800a79e:	e008      	b.n	800a7b2 <HAL_UART_IRQHandler+0x58e>
      return;
 800a7a0:	bf00      	nop
 800a7a2:	e006      	b.n	800a7b2 <HAL_UART_IRQHandler+0x58e>
    return;
 800a7a4:	bf00      	nop
 800a7a6:	e004      	b.n	800a7b2 <HAL_UART_IRQHandler+0x58e>
      return;
 800a7a8:	bf00      	nop
 800a7aa:	e002      	b.n	800a7b2 <HAL_UART_IRQHandler+0x58e>
      return;
 800a7ac:	bf00      	nop
 800a7ae:	e000      	b.n	800a7b2 <HAL_UART_IRQHandler+0x58e>
    return;
 800a7b0:	bf00      	nop
  }

}
 800a7b2:	37e8      	adds	r7, #232	; 0xe8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b088      	sub	sp, #32
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a800:	2300      	movs	r3, #0
 800a802:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689a      	ldr	r2, [r3, #8]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	431a      	orrs	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	431a      	orrs	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	69db      	ldr	r3, [r3, #28]
 800a818:	4313      	orrs	r3, r2
 800a81a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	4ba7      	ldr	r3, [pc, #668]	; (800aac0 <UART_SetConfig+0x2c8>)
 800a824:	4013      	ands	r3, r2
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	6812      	ldr	r2, [r2, #0]
 800a82a:	6979      	ldr	r1, [r7, #20]
 800a82c:	430b      	orrs	r3, r1
 800a82e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68da      	ldr	r2, [r3, #12]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	430a      	orrs	r2, r1
 800a844:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a1b      	ldr	r3, [r3, #32]
 800a850:	697a      	ldr	r2, [r7, #20]
 800a852:	4313      	orrs	r3, r2
 800a854:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	430a      	orrs	r2, r1
 800a868:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a95      	ldr	r2, [pc, #596]	; (800aac4 <UART_SetConfig+0x2cc>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d120      	bne.n	800a8b6 <UART_SetConfig+0xbe>
 800a874:	4b94      	ldr	r3, [pc, #592]	; (800aac8 <UART_SetConfig+0x2d0>)
 800a876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a87a:	f003 0303 	and.w	r3, r3, #3
 800a87e:	2b03      	cmp	r3, #3
 800a880:	d816      	bhi.n	800a8b0 <UART_SetConfig+0xb8>
 800a882:	a201      	add	r2, pc, #4	; (adr r2, 800a888 <UART_SetConfig+0x90>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a899 	.word	0x0800a899
 800a88c:	0800a8a5 	.word	0x0800a8a5
 800a890:	0800a89f 	.word	0x0800a89f
 800a894:	0800a8ab 	.word	0x0800a8ab
 800a898:	2301      	movs	r3, #1
 800a89a:	77fb      	strb	r3, [r7, #31]
 800a89c:	e14f      	b.n	800ab3e <UART_SetConfig+0x346>
 800a89e:	2302      	movs	r3, #2
 800a8a0:	77fb      	strb	r3, [r7, #31]
 800a8a2:	e14c      	b.n	800ab3e <UART_SetConfig+0x346>
 800a8a4:	2304      	movs	r3, #4
 800a8a6:	77fb      	strb	r3, [r7, #31]
 800a8a8:	e149      	b.n	800ab3e <UART_SetConfig+0x346>
 800a8aa:	2308      	movs	r3, #8
 800a8ac:	77fb      	strb	r3, [r7, #31]
 800a8ae:	e146      	b.n	800ab3e <UART_SetConfig+0x346>
 800a8b0:	2310      	movs	r3, #16
 800a8b2:	77fb      	strb	r3, [r7, #31]
 800a8b4:	e143      	b.n	800ab3e <UART_SetConfig+0x346>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a84      	ldr	r2, [pc, #528]	; (800aacc <UART_SetConfig+0x2d4>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d132      	bne.n	800a926 <UART_SetConfig+0x12e>
 800a8c0:	4b81      	ldr	r3, [pc, #516]	; (800aac8 <UART_SetConfig+0x2d0>)
 800a8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8c6:	f003 030c 	and.w	r3, r3, #12
 800a8ca:	2b0c      	cmp	r3, #12
 800a8cc:	d828      	bhi.n	800a920 <UART_SetConfig+0x128>
 800a8ce:	a201      	add	r2, pc, #4	; (adr r2, 800a8d4 <UART_SetConfig+0xdc>)
 800a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d4:	0800a909 	.word	0x0800a909
 800a8d8:	0800a921 	.word	0x0800a921
 800a8dc:	0800a921 	.word	0x0800a921
 800a8e0:	0800a921 	.word	0x0800a921
 800a8e4:	0800a915 	.word	0x0800a915
 800a8e8:	0800a921 	.word	0x0800a921
 800a8ec:	0800a921 	.word	0x0800a921
 800a8f0:	0800a921 	.word	0x0800a921
 800a8f4:	0800a90f 	.word	0x0800a90f
 800a8f8:	0800a921 	.word	0x0800a921
 800a8fc:	0800a921 	.word	0x0800a921
 800a900:	0800a921 	.word	0x0800a921
 800a904:	0800a91b 	.word	0x0800a91b
 800a908:	2300      	movs	r3, #0
 800a90a:	77fb      	strb	r3, [r7, #31]
 800a90c:	e117      	b.n	800ab3e <UART_SetConfig+0x346>
 800a90e:	2302      	movs	r3, #2
 800a910:	77fb      	strb	r3, [r7, #31]
 800a912:	e114      	b.n	800ab3e <UART_SetConfig+0x346>
 800a914:	2304      	movs	r3, #4
 800a916:	77fb      	strb	r3, [r7, #31]
 800a918:	e111      	b.n	800ab3e <UART_SetConfig+0x346>
 800a91a:	2308      	movs	r3, #8
 800a91c:	77fb      	strb	r3, [r7, #31]
 800a91e:	e10e      	b.n	800ab3e <UART_SetConfig+0x346>
 800a920:	2310      	movs	r3, #16
 800a922:	77fb      	strb	r3, [r7, #31]
 800a924:	e10b      	b.n	800ab3e <UART_SetConfig+0x346>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a69      	ldr	r2, [pc, #420]	; (800aad0 <UART_SetConfig+0x2d8>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d120      	bne.n	800a972 <UART_SetConfig+0x17a>
 800a930:	4b65      	ldr	r3, [pc, #404]	; (800aac8 <UART_SetConfig+0x2d0>)
 800a932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a936:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a93a:	2b30      	cmp	r3, #48	; 0x30
 800a93c:	d013      	beq.n	800a966 <UART_SetConfig+0x16e>
 800a93e:	2b30      	cmp	r3, #48	; 0x30
 800a940:	d814      	bhi.n	800a96c <UART_SetConfig+0x174>
 800a942:	2b20      	cmp	r3, #32
 800a944:	d009      	beq.n	800a95a <UART_SetConfig+0x162>
 800a946:	2b20      	cmp	r3, #32
 800a948:	d810      	bhi.n	800a96c <UART_SetConfig+0x174>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <UART_SetConfig+0x15c>
 800a94e:	2b10      	cmp	r3, #16
 800a950:	d006      	beq.n	800a960 <UART_SetConfig+0x168>
 800a952:	e00b      	b.n	800a96c <UART_SetConfig+0x174>
 800a954:	2300      	movs	r3, #0
 800a956:	77fb      	strb	r3, [r7, #31]
 800a958:	e0f1      	b.n	800ab3e <UART_SetConfig+0x346>
 800a95a:	2302      	movs	r3, #2
 800a95c:	77fb      	strb	r3, [r7, #31]
 800a95e:	e0ee      	b.n	800ab3e <UART_SetConfig+0x346>
 800a960:	2304      	movs	r3, #4
 800a962:	77fb      	strb	r3, [r7, #31]
 800a964:	e0eb      	b.n	800ab3e <UART_SetConfig+0x346>
 800a966:	2308      	movs	r3, #8
 800a968:	77fb      	strb	r3, [r7, #31]
 800a96a:	e0e8      	b.n	800ab3e <UART_SetConfig+0x346>
 800a96c:	2310      	movs	r3, #16
 800a96e:	77fb      	strb	r3, [r7, #31]
 800a970:	e0e5      	b.n	800ab3e <UART_SetConfig+0x346>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a57      	ldr	r2, [pc, #348]	; (800aad4 <UART_SetConfig+0x2dc>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d120      	bne.n	800a9be <UART_SetConfig+0x1c6>
 800a97c:	4b52      	ldr	r3, [pc, #328]	; (800aac8 <UART_SetConfig+0x2d0>)
 800a97e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a982:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a986:	2bc0      	cmp	r3, #192	; 0xc0
 800a988:	d013      	beq.n	800a9b2 <UART_SetConfig+0x1ba>
 800a98a:	2bc0      	cmp	r3, #192	; 0xc0
 800a98c:	d814      	bhi.n	800a9b8 <UART_SetConfig+0x1c0>
 800a98e:	2b80      	cmp	r3, #128	; 0x80
 800a990:	d009      	beq.n	800a9a6 <UART_SetConfig+0x1ae>
 800a992:	2b80      	cmp	r3, #128	; 0x80
 800a994:	d810      	bhi.n	800a9b8 <UART_SetConfig+0x1c0>
 800a996:	2b00      	cmp	r3, #0
 800a998:	d002      	beq.n	800a9a0 <UART_SetConfig+0x1a8>
 800a99a:	2b40      	cmp	r3, #64	; 0x40
 800a99c:	d006      	beq.n	800a9ac <UART_SetConfig+0x1b4>
 800a99e:	e00b      	b.n	800a9b8 <UART_SetConfig+0x1c0>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	77fb      	strb	r3, [r7, #31]
 800a9a4:	e0cb      	b.n	800ab3e <UART_SetConfig+0x346>
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	77fb      	strb	r3, [r7, #31]
 800a9aa:	e0c8      	b.n	800ab3e <UART_SetConfig+0x346>
 800a9ac:	2304      	movs	r3, #4
 800a9ae:	77fb      	strb	r3, [r7, #31]
 800a9b0:	e0c5      	b.n	800ab3e <UART_SetConfig+0x346>
 800a9b2:	2308      	movs	r3, #8
 800a9b4:	77fb      	strb	r3, [r7, #31]
 800a9b6:	e0c2      	b.n	800ab3e <UART_SetConfig+0x346>
 800a9b8:	2310      	movs	r3, #16
 800a9ba:	77fb      	strb	r3, [r7, #31]
 800a9bc:	e0bf      	b.n	800ab3e <UART_SetConfig+0x346>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a45      	ldr	r2, [pc, #276]	; (800aad8 <UART_SetConfig+0x2e0>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d125      	bne.n	800aa14 <UART_SetConfig+0x21c>
 800a9c8:	4b3f      	ldr	r3, [pc, #252]	; (800aac8 <UART_SetConfig+0x2d0>)
 800a9ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9d6:	d017      	beq.n	800aa08 <UART_SetConfig+0x210>
 800a9d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9dc:	d817      	bhi.n	800aa0e <UART_SetConfig+0x216>
 800a9de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9e2:	d00b      	beq.n	800a9fc <UART_SetConfig+0x204>
 800a9e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9e8:	d811      	bhi.n	800aa0e <UART_SetConfig+0x216>
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <UART_SetConfig+0x1fe>
 800a9ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9f2:	d006      	beq.n	800aa02 <UART_SetConfig+0x20a>
 800a9f4:	e00b      	b.n	800aa0e <UART_SetConfig+0x216>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	77fb      	strb	r3, [r7, #31]
 800a9fa:	e0a0      	b.n	800ab3e <UART_SetConfig+0x346>
 800a9fc:	2302      	movs	r3, #2
 800a9fe:	77fb      	strb	r3, [r7, #31]
 800aa00:	e09d      	b.n	800ab3e <UART_SetConfig+0x346>
 800aa02:	2304      	movs	r3, #4
 800aa04:	77fb      	strb	r3, [r7, #31]
 800aa06:	e09a      	b.n	800ab3e <UART_SetConfig+0x346>
 800aa08:	2308      	movs	r3, #8
 800aa0a:	77fb      	strb	r3, [r7, #31]
 800aa0c:	e097      	b.n	800ab3e <UART_SetConfig+0x346>
 800aa0e:	2310      	movs	r3, #16
 800aa10:	77fb      	strb	r3, [r7, #31]
 800aa12:	e094      	b.n	800ab3e <UART_SetConfig+0x346>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a30      	ldr	r2, [pc, #192]	; (800aadc <UART_SetConfig+0x2e4>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d125      	bne.n	800aa6a <UART_SetConfig+0x272>
 800aa1e:	4b2a      	ldr	r3, [pc, #168]	; (800aac8 <UART_SetConfig+0x2d0>)
 800aa20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa2c:	d017      	beq.n	800aa5e <UART_SetConfig+0x266>
 800aa2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa32:	d817      	bhi.n	800aa64 <UART_SetConfig+0x26c>
 800aa34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa38:	d00b      	beq.n	800aa52 <UART_SetConfig+0x25a>
 800aa3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa3e:	d811      	bhi.n	800aa64 <UART_SetConfig+0x26c>
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d003      	beq.n	800aa4c <UART_SetConfig+0x254>
 800aa44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa48:	d006      	beq.n	800aa58 <UART_SetConfig+0x260>
 800aa4a:	e00b      	b.n	800aa64 <UART_SetConfig+0x26c>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	77fb      	strb	r3, [r7, #31]
 800aa50:	e075      	b.n	800ab3e <UART_SetConfig+0x346>
 800aa52:	2302      	movs	r3, #2
 800aa54:	77fb      	strb	r3, [r7, #31]
 800aa56:	e072      	b.n	800ab3e <UART_SetConfig+0x346>
 800aa58:	2304      	movs	r3, #4
 800aa5a:	77fb      	strb	r3, [r7, #31]
 800aa5c:	e06f      	b.n	800ab3e <UART_SetConfig+0x346>
 800aa5e:	2308      	movs	r3, #8
 800aa60:	77fb      	strb	r3, [r7, #31]
 800aa62:	e06c      	b.n	800ab3e <UART_SetConfig+0x346>
 800aa64:	2310      	movs	r3, #16
 800aa66:	77fb      	strb	r3, [r7, #31]
 800aa68:	e069      	b.n	800ab3e <UART_SetConfig+0x346>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a1c      	ldr	r2, [pc, #112]	; (800aae0 <UART_SetConfig+0x2e8>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d137      	bne.n	800aae4 <UART_SetConfig+0x2ec>
 800aa74:	4b14      	ldr	r3, [pc, #80]	; (800aac8 <UART_SetConfig+0x2d0>)
 800aa76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aa7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa82:	d017      	beq.n	800aab4 <UART_SetConfig+0x2bc>
 800aa84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa88:	d817      	bhi.n	800aaba <UART_SetConfig+0x2c2>
 800aa8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa8e:	d00b      	beq.n	800aaa8 <UART_SetConfig+0x2b0>
 800aa90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa94:	d811      	bhi.n	800aaba <UART_SetConfig+0x2c2>
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d003      	beq.n	800aaa2 <UART_SetConfig+0x2aa>
 800aa9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa9e:	d006      	beq.n	800aaae <UART_SetConfig+0x2b6>
 800aaa0:	e00b      	b.n	800aaba <UART_SetConfig+0x2c2>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	77fb      	strb	r3, [r7, #31]
 800aaa6:	e04a      	b.n	800ab3e <UART_SetConfig+0x346>
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	77fb      	strb	r3, [r7, #31]
 800aaac:	e047      	b.n	800ab3e <UART_SetConfig+0x346>
 800aaae:	2304      	movs	r3, #4
 800aab0:	77fb      	strb	r3, [r7, #31]
 800aab2:	e044      	b.n	800ab3e <UART_SetConfig+0x346>
 800aab4:	2308      	movs	r3, #8
 800aab6:	77fb      	strb	r3, [r7, #31]
 800aab8:	e041      	b.n	800ab3e <UART_SetConfig+0x346>
 800aaba:	2310      	movs	r3, #16
 800aabc:	77fb      	strb	r3, [r7, #31]
 800aabe:	e03e      	b.n	800ab3e <UART_SetConfig+0x346>
 800aac0:	efff69f3 	.word	0xefff69f3
 800aac4:	40011000 	.word	0x40011000
 800aac8:	40023800 	.word	0x40023800
 800aacc:	40004400 	.word	0x40004400
 800aad0:	40004800 	.word	0x40004800
 800aad4:	40004c00 	.word	0x40004c00
 800aad8:	40005000 	.word	0x40005000
 800aadc:	40011400 	.word	0x40011400
 800aae0:	40007800 	.word	0x40007800
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a71      	ldr	r2, [pc, #452]	; (800acb0 <UART_SetConfig+0x4b8>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d125      	bne.n	800ab3a <UART_SetConfig+0x342>
 800aaee:	4b71      	ldr	r3, [pc, #452]	; (800acb4 <UART_SetConfig+0x4bc>)
 800aaf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aaf8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aafc:	d017      	beq.n	800ab2e <UART_SetConfig+0x336>
 800aafe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ab02:	d817      	bhi.n	800ab34 <UART_SetConfig+0x33c>
 800ab04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab08:	d00b      	beq.n	800ab22 <UART_SetConfig+0x32a>
 800ab0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab0e:	d811      	bhi.n	800ab34 <UART_SetConfig+0x33c>
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d003      	beq.n	800ab1c <UART_SetConfig+0x324>
 800ab14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab18:	d006      	beq.n	800ab28 <UART_SetConfig+0x330>
 800ab1a:	e00b      	b.n	800ab34 <UART_SetConfig+0x33c>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	77fb      	strb	r3, [r7, #31]
 800ab20:	e00d      	b.n	800ab3e <UART_SetConfig+0x346>
 800ab22:	2302      	movs	r3, #2
 800ab24:	77fb      	strb	r3, [r7, #31]
 800ab26:	e00a      	b.n	800ab3e <UART_SetConfig+0x346>
 800ab28:	2304      	movs	r3, #4
 800ab2a:	77fb      	strb	r3, [r7, #31]
 800ab2c:	e007      	b.n	800ab3e <UART_SetConfig+0x346>
 800ab2e:	2308      	movs	r3, #8
 800ab30:	77fb      	strb	r3, [r7, #31]
 800ab32:	e004      	b.n	800ab3e <UART_SetConfig+0x346>
 800ab34:	2310      	movs	r3, #16
 800ab36:	77fb      	strb	r3, [r7, #31]
 800ab38:	e001      	b.n	800ab3e <UART_SetConfig+0x346>
 800ab3a:	2310      	movs	r3, #16
 800ab3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	69db      	ldr	r3, [r3, #28]
 800ab42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab46:	d15a      	bne.n	800abfe <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800ab48:	7ffb      	ldrb	r3, [r7, #31]
 800ab4a:	2b08      	cmp	r3, #8
 800ab4c:	d827      	bhi.n	800ab9e <UART_SetConfig+0x3a6>
 800ab4e:	a201      	add	r2, pc, #4	; (adr r2, 800ab54 <UART_SetConfig+0x35c>)
 800ab50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab54:	0800ab79 	.word	0x0800ab79
 800ab58:	0800ab81 	.word	0x0800ab81
 800ab5c:	0800ab89 	.word	0x0800ab89
 800ab60:	0800ab9f 	.word	0x0800ab9f
 800ab64:	0800ab8f 	.word	0x0800ab8f
 800ab68:	0800ab9f 	.word	0x0800ab9f
 800ab6c:	0800ab9f 	.word	0x0800ab9f
 800ab70:	0800ab9f 	.word	0x0800ab9f
 800ab74:	0800ab97 	.word	0x0800ab97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab78:	f7fd fce0 	bl	800853c <HAL_RCC_GetPCLK1Freq>
 800ab7c:	61b8      	str	r0, [r7, #24]
        break;
 800ab7e:	e013      	b.n	800aba8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab80:	f7fd fcf0 	bl	8008564 <HAL_RCC_GetPCLK2Freq>
 800ab84:	61b8      	str	r0, [r7, #24]
        break;
 800ab86:	e00f      	b.n	800aba8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab88:	4b4b      	ldr	r3, [pc, #300]	; (800acb8 <UART_SetConfig+0x4c0>)
 800ab8a:	61bb      	str	r3, [r7, #24]
        break;
 800ab8c:	e00c      	b.n	800aba8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab8e:	f7fd fc13 	bl	80083b8 <HAL_RCC_GetSysClockFreq>
 800ab92:	61b8      	str	r0, [r7, #24]
        break;
 800ab94:	e008      	b.n	800aba8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab9a:	61bb      	str	r3, [r7, #24]
        break;
 800ab9c:	e004      	b.n	800aba8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	77bb      	strb	r3, [r7, #30]
        break;
 800aba6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d074      	beq.n	800ac98 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800abae:	69bb      	ldr	r3, [r7, #24]
 800abb0:	005a      	lsls	r2, r3, #1
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	085b      	lsrs	r3, r3, #1
 800abb8:	441a      	add	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	2b0f      	cmp	r3, #15
 800abc8:	d916      	bls.n	800abf8 <UART_SetConfig+0x400>
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abd0:	d212      	bcs.n	800abf8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	f023 030f 	bic.w	r3, r3, #15
 800abda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	085b      	lsrs	r3, r3, #1
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	f003 0307 	and.w	r3, r3, #7
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	89fb      	ldrh	r3, [r7, #14]
 800abea:	4313      	orrs	r3, r2
 800abec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	89fa      	ldrh	r2, [r7, #14]
 800abf4:	60da      	str	r2, [r3, #12]
 800abf6:	e04f      	b.n	800ac98 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	77bb      	strb	r3, [r7, #30]
 800abfc:	e04c      	b.n	800ac98 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800abfe:	7ffb      	ldrb	r3, [r7, #31]
 800ac00:	2b08      	cmp	r3, #8
 800ac02:	d828      	bhi.n	800ac56 <UART_SetConfig+0x45e>
 800ac04:	a201      	add	r2, pc, #4	; (adr r2, 800ac0c <UART_SetConfig+0x414>)
 800ac06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0a:	bf00      	nop
 800ac0c:	0800ac31 	.word	0x0800ac31
 800ac10:	0800ac39 	.word	0x0800ac39
 800ac14:	0800ac41 	.word	0x0800ac41
 800ac18:	0800ac57 	.word	0x0800ac57
 800ac1c:	0800ac47 	.word	0x0800ac47
 800ac20:	0800ac57 	.word	0x0800ac57
 800ac24:	0800ac57 	.word	0x0800ac57
 800ac28:	0800ac57 	.word	0x0800ac57
 800ac2c:	0800ac4f 	.word	0x0800ac4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac30:	f7fd fc84 	bl	800853c <HAL_RCC_GetPCLK1Freq>
 800ac34:	61b8      	str	r0, [r7, #24]
        break;
 800ac36:	e013      	b.n	800ac60 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac38:	f7fd fc94 	bl	8008564 <HAL_RCC_GetPCLK2Freq>
 800ac3c:	61b8      	str	r0, [r7, #24]
        break;
 800ac3e:	e00f      	b.n	800ac60 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac40:	4b1d      	ldr	r3, [pc, #116]	; (800acb8 <UART_SetConfig+0x4c0>)
 800ac42:	61bb      	str	r3, [r7, #24]
        break;
 800ac44:	e00c      	b.n	800ac60 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac46:	f7fd fbb7 	bl	80083b8 <HAL_RCC_GetSysClockFreq>
 800ac4a:	61b8      	str	r0, [r7, #24]
        break;
 800ac4c:	e008      	b.n	800ac60 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac52:	61bb      	str	r3, [r7, #24]
        break;
 800ac54:	e004      	b.n	800ac60 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800ac56:	2300      	movs	r3, #0
 800ac58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	77bb      	strb	r3, [r7, #30]
        break;
 800ac5e:	bf00      	nop
    }

    if (pclk != 0U)
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d018      	beq.n	800ac98 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	085a      	lsrs	r2, r3, #1
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	441a      	add	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	2b0f      	cmp	r3, #15
 800ac7e:	d909      	bls.n	800ac94 <UART_SetConfig+0x49c>
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac86:	d205      	bcs.n	800ac94 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	60da      	str	r2, [r3, #12]
 800ac92:	e001      	b.n	800ac98 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800aca4:	7fbb      	ldrb	r3, [r7, #30]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3720      	adds	r7, #32
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	40007c00 	.word	0x40007c00
 800acb4:	40023800 	.word	0x40023800
 800acb8:	00f42400 	.word	0x00f42400

0800acbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc8:	f003 0301 	and.w	r3, r3, #1
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00a      	beq.n	800ace6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	430a      	orrs	r2, r1
 800ace4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acea:	f003 0302 	and.w	r3, r3, #2
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00a      	beq.n	800ad08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	430a      	orrs	r2, r1
 800ad06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0c:	f003 0304 	and.w	r3, r3, #4
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00a      	beq.n	800ad2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	430a      	orrs	r2, r1
 800ad28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2e:	f003 0308 	and.w	r3, r3, #8
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00a      	beq.n	800ad4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	430a      	orrs	r2, r1
 800ad4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad50:	f003 0310 	and.w	r3, r3, #16
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00a      	beq.n	800ad6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	430a      	orrs	r2, r1
 800ad6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad72:	f003 0320 	and.w	r3, r3, #32
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00a      	beq.n	800ad90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	430a      	orrs	r2, r1
 800ad8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d01a      	beq.n	800add2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	430a      	orrs	r2, r1
 800adb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adba:	d10a      	bne.n	800add2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	430a      	orrs	r2, r1
 800add0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00a      	beq.n	800adf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	430a      	orrs	r2, r1
 800adf2:	605a      	str	r2, [r3, #4]
  }
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af02      	add	r7, sp, #8
 800ae06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae10:	f7f9 feec 	bl	8004bec <HAL_GetTick>
 800ae14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 0308 	and.w	r3, r3, #8
 800ae20:	2b08      	cmp	r3, #8
 800ae22:	d10e      	bne.n	800ae42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f817 	bl	800ae66 <UART_WaitOnFlagUntilTimeout>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e00d      	b.n	800ae5e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2220      	movs	r2, #32
 800ae46:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2220      	movs	r2, #32
 800ae4c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b09c      	sub	sp, #112	; 0x70
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	60f8      	str	r0, [r7, #12]
 800ae6e:	60b9      	str	r1, [r7, #8]
 800ae70:	603b      	str	r3, [r7, #0]
 800ae72:	4613      	mov	r3, r2
 800ae74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae76:	e0a5      	b.n	800afc4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7e:	f000 80a1 	beq.w	800afc4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae82:	f7f9 feb3 	bl	8004bec <HAL_GetTick>
 800ae86:	4602      	mov	r2, r0
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d302      	bcc.n	800ae98 <UART_WaitOnFlagUntilTimeout+0x32>
 800ae92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d13e      	bne.n	800af16 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aea0:	e853 3f00 	ldrex	r3, [r3]
 800aea4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aea8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aeac:	667b      	str	r3, [r7, #100]	; 0x64
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aeb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aebc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aebe:	e841 2300 	strex	r3, r2, [r1]
 800aec2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d1e6      	bne.n	800ae98 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	3308      	adds	r3, #8
 800aed0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed4:	e853 3f00 	ldrex	r3, [r3]
 800aed8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aedc:	f023 0301 	bic.w	r3, r3, #1
 800aee0:	663b      	str	r3, [r7, #96]	; 0x60
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	3308      	adds	r3, #8
 800aee8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aeea:	64ba      	str	r2, [r7, #72]	; 0x48
 800aeec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aef2:	e841 2300 	strex	r3, r2, [r1]
 800aef6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1e5      	bne.n	800aeca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	2220      	movs	r2, #32
 800af02:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2220      	movs	r2, #32
 800af08:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800af12:	2303      	movs	r3, #3
 800af14:	e067      	b.n	800afe6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 0304 	and.w	r3, r3, #4
 800af20:	2b00      	cmp	r3, #0
 800af22:	d04f      	beq.n	800afc4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	69db      	ldr	r3, [r3, #28]
 800af2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af32:	d147      	bne.n	800afc4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af46:	e853 3f00 	ldrex	r3, [r3]
 800af4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af52:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	461a      	mov	r2, r3
 800af5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af5c:	637b      	str	r3, [r7, #52]	; 0x34
 800af5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af64:	e841 2300 	strex	r3, r2, [r1]
 800af68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800af6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d1e6      	bne.n	800af3e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	3308      	adds	r3, #8
 800af76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	e853 3f00 	ldrex	r3, [r3]
 800af7e:	613b      	str	r3, [r7, #16]
   return(result);
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	f023 0301 	bic.w	r3, r3, #1
 800af86:	66bb      	str	r3, [r7, #104]	; 0x68
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	3308      	adds	r3, #8
 800af8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af90:	623a      	str	r2, [r7, #32]
 800af92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af94:	69f9      	ldr	r1, [r7, #28]
 800af96:	6a3a      	ldr	r2, [r7, #32]
 800af98:	e841 2300 	strex	r3, r2, [r1]
 800af9c:	61bb      	str	r3, [r7, #24]
   return(result);
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1e5      	bne.n	800af70 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2220      	movs	r2, #32
 800afa8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2220      	movs	r2, #32
 800afae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2220      	movs	r2, #32
 800afb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2200      	movs	r2, #0
 800afbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e010      	b.n	800afe6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	69da      	ldr	r2, [r3, #28]
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	4013      	ands	r3, r2
 800afce:	68ba      	ldr	r2, [r7, #8]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	bf0c      	ite	eq
 800afd4:	2301      	moveq	r3, #1
 800afd6:	2300      	movne	r3, #0
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	461a      	mov	r2, r3
 800afdc:	79fb      	ldrb	r3, [r7, #7]
 800afde:	429a      	cmp	r2, r3
 800afe0:	f43f af4a 	beq.w	800ae78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3770      	adds	r7, #112	; 0x70
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afee:	b480      	push	{r7}
 800aff0:	b095      	sub	sp, #84	; 0x54
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affe:	e853 3f00 	ldrex	r3, [r3]
 800b002:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b006:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b00a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	461a      	mov	r2, r3
 800b012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b014:	643b      	str	r3, [r7, #64]	; 0x40
 800b016:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b018:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b01a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b01c:	e841 2300 	strex	r3, r2, [r1]
 800b020:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1e6      	bne.n	800aff6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3308      	adds	r3, #8
 800b02e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b030:	6a3b      	ldr	r3, [r7, #32]
 800b032:	e853 3f00 	ldrex	r3, [r3]
 800b036:	61fb      	str	r3, [r7, #28]
   return(result);
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	f023 0301 	bic.w	r3, r3, #1
 800b03e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3308      	adds	r3, #8
 800b046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b048:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b04a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b04e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b050:	e841 2300 	strex	r3, r2, [r1]
 800b054:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1e5      	bne.n	800b028 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b060:	2b01      	cmp	r3, #1
 800b062:	d118      	bne.n	800b096 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	e853 3f00 	ldrex	r3, [r3]
 800b070:	60bb      	str	r3, [r7, #8]
   return(result);
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	f023 0310 	bic.w	r3, r3, #16
 800b078:	647b      	str	r3, [r7, #68]	; 0x44
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b082:	61bb      	str	r3, [r7, #24]
 800b084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	6979      	ldr	r1, [r7, #20]
 800b088:	69ba      	ldr	r2, [r7, #24]
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	613b      	str	r3, [r7, #16]
   return(result);
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e6      	bne.n	800b064 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2220      	movs	r2, #32
 800b09a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b0a8:	bf00      	nop
 800b0aa:	3754      	adds	r7, #84	; 0x54
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f7ff fb7a 	bl	800a7cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0d8:	bf00      	nop
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b088      	sub	sp, #32
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	e853 3f00 	ldrex	r3, [r3]
 800b0f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0fc:	61fb      	str	r3, [r7, #28]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	461a      	mov	r2, r3
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	61bb      	str	r3, [r7, #24]
 800b108:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10a:	6979      	ldr	r1, [r7, #20]
 800b10c:	69ba      	ldr	r2, [r7, #24]
 800b10e:	e841 2300 	strex	r3, r2, [r1]
 800b112:	613b      	str	r3, [r7, #16]
   return(result);
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1e6      	bne.n	800b0e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2220      	movs	r2, #32
 800b11e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7ff fb46 	bl	800a7b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b12c:	bf00      	nop
 800b12e:	3720      	adds	r7, #32
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}

0800b134 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d121      	bne.n	800b18a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	4b27      	ldr	r3, [pc, #156]	; (800b1e8 <FMC_SDRAM_Init+0xb4>)
 800b14c:	4013      	ands	r3, r2
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	6851      	ldr	r1, [r2, #4]
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	6892      	ldr	r2, [r2, #8]
 800b156:	4311      	orrs	r1, r2
 800b158:	683a      	ldr	r2, [r7, #0]
 800b15a:	68d2      	ldr	r2, [r2, #12]
 800b15c:	4311      	orrs	r1, r2
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	6912      	ldr	r2, [r2, #16]
 800b162:	4311      	orrs	r1, r2
 800b164:	683a      	ldr	r2, [r7, #0]
 800b166:	6952      	ldr	r2, [r2, #20]
 800b168:	4311      	orrs	r1, r2
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	6992      	ldr	r2, [r2, #24]
 800b16e:	4311      	orrs	r1, r2
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	69d2      	ldr	r2, [r2, #28]
 800b174:	4311      	orrs	r1, r2
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	6a12      	ldr	r2, [r2, #32]
 800b17a:	4311      	orrs	r1, r2
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b180:	430a      	orrs	r2, r1
 800b182:	431a      	orrs	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	601a      	str	r2, [r3, #0]
 800b188:	e026      	b.n	800b1d8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	69d9      	ldr	r1, [r3, #28]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	6a1b      	ldr	r3, [r3, #32]
 800b19a:	4319      	orrs	r1, r3
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a0:	430b      	orrs	r3, r1
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	685a      	ldr	r2, [r3, #4]
 800b1ac:	4b0e      	ldr	r3, [pc, #56]	; (800b1e8 <FMC_SDRAM_Init+0xb4>)
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	6851      	ldr	r1, [r2, #4]
 800b1b4:	683a      	ldr	r2, [r7, #0]
 800b1b6:	6892      	ldr	r2, [r2, #8]
 800b1b8:	4311      	orrs	r1, r2
 800b1ba:	683a      	ldr	r2, [r7, #0]
 800b1bc:	68d2      	ldr	r2, [r2, #12]
 800b1be:	4311      	orrs	r1, r2
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	6912      	ldr	r2, [r2, #16]
 800b1c4:	4311      	orrs	r1, r2
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	6952      	ldr	r2, [r2, #20]
 800b1ca:	4311      	orrs	r1, r2
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	6992      	ldr	r2, [r2, #24]
 800b1d0:	430a      	orrs	r2, r1
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	370c      	adds	r7, #12
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	ffff8000 	.word	0xffff8000

0800b1ec <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d128      	bne.n	800b250 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	1e59      	subs	r1, r3, #1
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	3b01      	subs	r3, #1
 800b212:	011b      	lsls	r3, r3, #4
 800b214:	4319      	orrs	r1, r3
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	3b01      	subs	r3, #1
 800b21c:	021b      	lsls	r3, r3, #8
 800b21e:	4319      	orrs	r1, r3
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	3b01      	subs	r3, #1
 800b226:	031b      	lsls	r3, r3, #12
 800b228:	4319      	orrs	r1, r3
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	3b01      	subs	r3, #1
 800b230:	041b      	lsls	r3, r3, #16
 800b232:	4319      	orrs	r1, r3
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	3b01      	subs	r3, #1
 800b23a:	051b      	lsls	r3, r3, #20
 800b23c:	4319      	orrs	r1, r3
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	3b01      	subs	r3, #1
 800b244:	061b      	lsls	r3, r3, #24
 800b246:	430b      	orrs	r3, r1
 800b248:	431a      	orrs	r2, r3
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	609a      	str	r2, [r3, #8]
 800b24e:	e02d      	b.n	800b2ac <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	689a      	ldr	r2, [r3, #8]
 800b254:	4b19      	ldr	r3, [pc, #100]	; (800b2bc <FMC_SDRAM_Timing_Init+0xd0>)
 800b256:	4013      	ands	r3, r2
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	68d2      	ldr	r2, [r2, #12]
 800b25c:	3a01      	subs	r2, #1
 800b25e:	0311      	lsls	r1, r2, #12
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	6952      	ldr	r2, [r2, #20]
 800b264:	3a01      	subs	r2, #1
 800b266:	0512      	lsls	r2, r2, #20
 800b268:	430a      	orrs	r2, r1
 800b26a:	431a      	orrs	r2, r3
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	1e59      	subs	r1, r3, #1
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	3b01      	subs	r3, #1
 800b284:	011b      	lsls	r3, r3, #4
 800b286:	4319      	orrs	r1, r3
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	021b      	lsls	r3, r3, #8
 800b290:	4319      	orrs	r1, r3
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	3b01      	subs	r3, #1
 800b298:	041b      	lsls	r3, r3, #16
 800b29a:	4319      	orrs	r1, r3
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	061b      	lsls	r3, r3, #24
 800b2a4:	430b      	orrs	r3, r1
 800b2a6:	431a      	orrs	r2, r3
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	ff0f0fff 	.word	0xff0f0fff

0800b2c0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	691a      	ldr	r2, [r3, #16]
 800b2d0:	4b0c      	ldr	r3, [pc, #48]	; (800b304 <FMC_SDRAM_SendCommand+0x44>)
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	6811      	ldr	r1, [r2, #0]
 800b2d8:	68ba      	ldr	r2, [r7, #8]
 800b2da:	6852      	ldr	r2, [r2, #4]
 800b2dc:	4311      	orrs	r1, r2
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	6892      	ldr	r2, [r2, #8]
 800b2e2:	3a01      	subs	r2, #1
 800b2e4:	0152      	lsls	r2, r2, #5
 800b2e6:	4311      	orrs	r1, r2
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	68d2      	ldr	r2, [r2, #12]
 800b2ec:	0252      	lsls	r2, r2, #9
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	431a      	orrs	r2, r3
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr
 800b304:	ffc00000 	.word	0xffc00000

0800b308 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	695a      	ldr	r2, [r3, #20]
 800b316:	4b07      	ldr	r3, [pc, #28]	; (800b334 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b318:	4013      	ands	r3, r2
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	0052      	lsls	r2, r2, #1
 800b31e:	431a      	orrs	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	ffffc001 	.word	0xffffc001

0800b338 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	4603      	mov	r3, r0
 800b340:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b342:	2300      	movs	r3, #0
 800b344:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b34a:	2b84      	cmp	r3, #132	; 0x84
 800b34c:	d005      	beq.n	800b35a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b34e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	4413      	add	r3, r2
 800b356:	3303      	adds	r3, #3
 800b358:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b35a:	68fb      	ldr	r3, [r7, #12]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3714      	adds	r7, #20
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b36c:	f001 f9e6 	bl	800c73c <vTaskStartScheduler>
  
  return osOK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	bd80      	pop	{r7, pc}

0800b376 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b376:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b378:	b089      	sub	sp, #36	; 0x24
 800b37a:	af04      	add	r7, sp, #16
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	695b      	ldr	r3, [r3, #20]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d020      	beq.n	800b3ca <osThreadCreate+0x54>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d01c      	beq.n	800b3ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685c      	ldr	r4, [r3, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681d      	ldr	r5, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	691e      	ldr	r6, [r3, #16]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7ff ffc8 	bl	800b338 <makeFreeRtosPriority>
 800b3a8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b3b2:	9202      	str	r2, [sp, #8]
 800b3b4:	9301      	str	r3, [sp, #4]
 800b3b6:	9100      	str	r1, [sp, #0]
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	4632      	mov	r2, r6
 800b3bc:	4629      	mov	r1, r5
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 febe 	bl	800c140 <xTaskCreateStatic>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	60fb      	str	r3, [r7, #12]
 800b3c8:	e01c      	b.n	800b404 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	685c      	ldr	r4, [r3, #4]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b3d6:	b29e      	uxth	r6, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7ff ffaa 	bl	800b338 <makeFreeRtosPriority>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	f107 030c 	add.w	r3, r7, #12
 800b3ea:	9301      	str	r3, [sp, #4]
 800b3ec:	9200      	str	r2, [sp, #0]
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	4632      	mov	r2, r6
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	f000 ff06 	bl	800c206 <xTaskCreate>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d001      	beq.n	800b404 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b400:	2300      	movs	r3, #0
 800b402:	e000      	b.n	800b406 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b404:	68fb      	ldr	r3, [r7, #12]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b40e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b084      	sub	sp, #16
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d001      	beq.n	800b424 <osDelay+0x16>
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	e000      	b.n	800b426 <osDelay+0x18>
 800b424:	2301      	movs	r3, #1
 800b426:	4618      	mov	r0, r3
 800b428:	f001 f952 	bl	800c6d0 <vTaskDelay>
  
  return osOK;
 800b42c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b436:	b590      	push	{r4, r7, lr}
 800b438:	b085      	sub	sp, #20
 800b43a:	af02      	add	r7, sp, #8
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d011      	beq.n	800b46c <osMessageCreate+0x36>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00d      	beq.n	800b46c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6818      	ldr	r0, [r3, #0]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6859      	ldr	r1, [r3, #4]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	689a      	ldr	r2, [r3, #8]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	2400      	movs	r4, #0
 800b462:	9400      	str	r4, [sp, #0]
 800b464:	f000 f92e 	bl	800b6c4 <xQueueGenericCreateStatic>
 800b468:	4603      	mov	r3, r0
 800b46a:	e008      	b.n	800b47e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6818      	ldr	r0, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	4619      	mov	r1, r3
 800b478:	f000 f9a6 	bl	800b7c8 <xQueueGenericCreate>
 800b47c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b47e:	4618      	mov	r0, r3
 800b480:	370c      	adds	r7, #12
 800b482:	46bd      	mov	sp, r7
 800b484:	bd90      	pop	{r4, r7, pc}

0800b486 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b486:	b480      	push	{r7}
 800b488:	b083      	sub	sp, #12
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f103 0208 	add.w	r2, r3, #8
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f04f 32ff 	mov.w	r2, #4294967295
 800b49e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f103 0208 	add.w	r2, r3, #8
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f103 0208 	add.w	r2, r3, #8
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4ba:	bf00      	nop
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b083      	sub	sp, #12
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	689a      	ldr	r2, [r3, #8]
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	683a      	ldr	r2, [r7, #0]
 800b50a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	1c5a      	adds	r2, r3, #1
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	601a      	str	r2, [r3, #0]
}
 800b51c:	bf00      	nop
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b53e:	d103      	bne.n	800b548 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	60fb      	str	r3, [r7, #12]
 800b546:	e00c      	b.n	800b562 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3308      	adds	r3, #8
 800b54c:	60fb      	str	r3, [r7, #12]
 800b54e:	e002      	b.n	800b556 <vListInsert+0x2e>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	60fb      	str	r3, [r7, #12]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d2f6      	bcs.n	800b550 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	685a      	ldr	r2, [r3, #4]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	68fa      	ldr	r2, [r7, #12]
 800b576:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	683a      	ldr	r2, [r7, #0]
 800b57c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	1c5a      	adds	r2, r3, #1
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	601a      	str	r2, [r3, #0]
}
 800b58e:	bf00      	nop
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b59a:	b480      	push	{r7}
 800b59c:	b085      	sub	sp, #20
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	6892      	ldr	r2, [r2, #8]
 800b5b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	6852      	ldr	r2, [r2, #4]
 800b5ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d103      	bne.n	800b5ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	689a      	ldr	r2, [r3, #8]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	1e5a      	subs	r2, r3, #1
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3714      	adds	r7, #20
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr
	...

0800b5f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10c      	bne.n	800b61e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	b672      	cpsid	i
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	b662      	cpsie	i
 800b618:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b61a:	bf00      	nop
 800b61c:	e7fe      	b.n	800b61c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b61e:	f001 fffd 	bl	800d61c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b62a:	68f9      	ldr	r1, [r7, #12]
 800b62c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b62e:	fb01 f303 	mul.w	r3, r1, r3
 800b632:	441a      	add	r2, r3
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2200      	movs	r2, #0
 800b63c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b64e:	3b01      	subs	r3, #1
 800b650:	68f9      	ldr	r1, [r7, #12]
 800b652:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b654:	fb01 f303 	mul.w	r3, r1, r3
 800b658:	441a      	add	r2, r3
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	22ff      	movs	r2, #255	; 0xff
 800b662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	22ff      	movs	r2, #255	; 0xff
 800b66a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d114      	bne.n	800b69e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d01a      	beq.n	800b6b2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	3310      	adds	r3, #16
 800b680:	4618      	mov	r0, r3
 800b682:	f001 fab9 	bl	800cbf8 <xTaskRemoveFromEventList>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d012      	beq.n	800b6b2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b68c:	4b0c      	ldr	r3, [pc, #48]	; (800b6c0 <xQueueGenericReset+0xd0>)
 800b68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b692:	601a      	str	r2, [r3, #0]
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	e009      	b.n	800b6b2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3310      	adds	r3, #16
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7ff feef 	bl	800b486 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	3324      	adds	r3, #36	; 0x24
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7ff feea 	bl	800b486 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b6b2:	f001 ffe7 	bl	800d684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b6b6:	2301      	movs	r3, #1
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3710      	adds	r7, #16
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	e000ed04 	.word	0xe000ed04

0800b6c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b08e      	sub	sp, #56	; 0x38
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
 800b6d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10c      	bne.n	800b6f2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6dc:	b672      	cpsid	i
 800b6de:	f383 8811 	msr	BASEPRI, r3
 800b6e2:	f3bf 8f6f 	isb	sy
 800b6e6:	f3bf 8f4f 	dsb	sy
 800b6ea:	b662      	cpsie	i
 800b6ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6ee:	bf00      	nop
 800b6f0:	e7fe      	b.n	800b6f0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d10c      	bne.n	800b712 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fc:	b672      	cpsid	i
 800b6fe:	f383 8811 	msr	BASEPRI, r3
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	f3bf 8f4f 	dsb	sy
 800b70a:	b662      	cpsie	i
 800b70c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b70e:	bf00      	nop
 800b710:	e7fe      	b.n	800b710 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <xQueueGenericCreateStatic+0x5a>
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <xQueueGenericCreateStatic+0x5e>
 800b71e:	2301      	movs	r3, #1
 800b720:	e000      	b.n	800b724 <xQueueGenericCreateStatic+0x60>
 800b722:	2300      	movs	r3, #0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10c      	bne.n	800b742 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72c:	b672      	cpsid	i
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	b662      	cpsie	i
 800b73c:	623b      	str	r3, [r7, #32]
}
 800b73e:	bf00      	nop
 800b740:	e7fe      	b.n	800b740 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d102      	bne.n	800b74e <xQueueGenericCreateStatic+0x8a>
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d101      	bne.n	800b752 <xQueueGenericCreateStatic+0x8e>
 800b74e:	2301      	movs	r3, #1
 800b750:	e000      	b.n	800b754 <xQueueGenericCreateStatic+0x90>
 800b752:	2300      	movs	r3, #0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10c      	bne.n	800b772 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75c:	b672      	cpsid	i
 800b75e:	f383 8811 	msr	BASEPRI, r3
 800b762:	f3bf 8f6f 	isb	sy
 800b766:	f3bf 8f4f 	dsb	sy
 800b76a:	b662      	cpsie	i
 800b76c:	61fb      	str	r3, [r7, #28]
}
 800b76e:	bf00      	nop
 800b770:	e7fe      	b.n	800b770 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b772:	2348      	movs	r3, #72	; 0x48
 800b774:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	2b48      	cmp	r3, #72	; 0x48
 800b77a:	d00c      	beq.n	800b796 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b780:	b672      	cpsid	i
 800b782:	f383 8811 	msr	BASEPRI, r3
 800b786:	f3bf 8f6f 	isb	sy
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	b662      	cpsie	i
 800b790:	61bb      	str	r3, [r7, #24]
}
 800b792:	bf00      	nop
 800b794:	e7fe      	b.n	800b794 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b796:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00d      	beq.n	800b7be <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	68b9      	ldr	r1, [r7, #8]
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f000 f847 	bl	800b84c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3730      	adds	r7, #48	; 0x30
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b08a      	sub	sp, #40	; 0x28
 800b7cc:	af02      	add	r7, sp, #8
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10c      	bne.n	800b7f6 <xQueueGenericCreate+0x2e>
	__asm volatile
 800b7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e0:	b672      	cpsid	i
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	b662      	cpsie	i
 800b7f0:	613b      	str	r3, [r7, #16]
}
 800b7f2:	bf00      	nop
 800b7f4:	e7fe      	b.n	800b7f4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d102      	bne.n	800b802 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	61fb      	str	r3, [r7, #28]
 800b800:	e004      	b.n	800b80c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	fb02 f303 	mul.w	r3, r2, r3
 800b80a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	3348      	adds	r3, #72	; 0x48
 800b810:	4618      	mov	r0, r3
 800b812:	f001 ffeb 	bl	800d7ec <pvPortMalloc>
 800b816:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d011      	beq.n	800b842 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	3348      	adds	r3, #72	; 0x48
 800b826:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b828:	69bb      	ldr	r3, [r7, #24]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b830:	79fa      	ldrb	r2, [r7, #7]
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	4613      	mov	r3, r2
 800b838:	697a      	ldr	r2, [r7, #20]
 800b83a:	68b9      	ldr	r1, [r7, #8]
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f000 f805 	bl	800b84c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b842:	69bb      	ldr	r3, [r7, #24]
	}
 800b844:	4618      	mov	r0, r3
 800b846:	3720      	adds	r7, #32
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d103      	bne.n	800b868 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	69ba      	ldr	r2, [r7, #24]
 800b864:	601a      	str	r2, [r3, #0]
 800b866:	e002      	b.n	800b86e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	68ba      	ldr	r2, [r7, #8]
 800b878:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b87a:	2101      	movs	r1, #1
 800b87c:	69b8      	ldr	r0, [r7, #24]
 800b87e:	f7ff feb7 	bl	800b5f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b882:	bf00      	nop
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b082      	sub	sp, #8
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00e      	beq.n	800b8b6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f81d 	bl	800b8f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b8b6:	bf00      	nop
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b086      	sub	sp, #24
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	617b      	str	r3, [r7, #20]
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b8d0:	79fb      	ldrb	r3, [r7, #7]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	6939      	ldr	r1, [r7, #16]
 800b8d6:	6978      	ldr	r0, [r7, #20]
 800b8d8:	f7ff ff76 	bl	800b7c8 <xQueueGenericCreate>
 800b8dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7ff ffd3 	bl	800b88a <prvInitialiseMutex>

		return xNewQueue;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
	}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3718      	adds	r7, #24
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
	...

0800b8f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b08e      	sub	sp, #56	; 0x38
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	607a      	str	r2, [r7, #4]
 800b8fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b8fe:	2300      	movs	r3, #0
 800b900:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d10c      	bne.n	800b926 <xQueueGenericSend+0x36>
	__asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b910:	b672      	cpsid	i
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	b662      	cpsie	i
 800b920:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d103      	bne.n	800b934 <xQueueGenericSend+0x44>
 800b92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b930:	2b00      	cmp	r3, #0
 800b932:	d101      	bne.n	800b938 <xQueueGenericSend+0x48>
 800b934:	2301      	movs	r3, #1
 800b936:	e000      	b.n	800b93a <xQueueGenericSend+0x4a>
 800b938:	2300      	movs	r3, #0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d10c      	bne.n	800b958 <xQueueGenericSend+0x68>
	__asm volatile
 800b93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b942:	b672      	cpsid	i
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	b662      	cpsie	i
 800b952:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b954:	bf00      	nop
 800b956:	e7fe      	b.n	800b956 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d103      	bne.n	800b966 <xQueueGenericSend+0x76>
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b962:	2b01      	cmp	r3, #1
 800b964:	d101      	bne.n	800b96a <xQueueGenericSend+0x7a>
 800b966:	2301      	movs	r3, #1
 800b968:	e000      	b.n	800b96c <xQueueGenericSend+0x7c>
 800b96a:	2300      	movs	r3, #0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10c      	bne.n	800b98a <xQueueGenericSend+0x9a>
	__asm volatile
 800b970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b974:	b672      	cpsid	i
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	b662      	cpsie	i
 800b984:	623b      	str	r3, [r7, #32]
}
 800b986:	bf00      	nop
 800b988:	e7fe      	b.n	800b988 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b98a:	f001 fafd 	bl	800cf88 <xTaskGetSchedulerState>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d102      	bne.n	800b99a <xQueueGenericSend+0xaa>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <xQueueGenericSend+0xae>
 800b99a:	2301      	movs	r3, #1
 800b99c:	e000      	b.n	800b9a0 <xQueueGenericSend+0xb0>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10c      	bne.n	800b9be <xQueueGenericSend+0xce>
	__asm volatile
 800b9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a8:	b672      	cpsid	i
 800b9aa:	f383 8811 	msr	BASEPRI, r3
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	b662      	cpsie	i
 800b9b8:	61fb      	str	r3, [r7, #28]
}
 800b9ba:	bf00      	nop
 800b9bc:	e7fe      	b.n	800b9bc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9be:	f001 fe2d 	bl	800d61c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d302      	bcc.n	800b9d4 <xQueueGenericSend+0xe4>
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d129      	bne.n	800ba28 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9d4:	683a      	ldr	r2, [r7, #0]
 800b9d6:	68b9      	ldr	r1, [r7, #8]
 800b9d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9da:	f000 faa1 	bl	800bf20 <prvCopyDataToQueue>
 800b9de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d010      	beq.n	800ba0a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ea:	3324      	adds	r3, #36	; 0x24
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f001 f903 	bl	800cbf8 <xTaskRemoveFromEventList>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d013      	beq.n	800ba20 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b9f8:	4b3f      	ldr	r3, [pc, #252]	; (800baf8 <xQueueGenericSend+0x208>)
 800b9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9fe:	601a      	str	r2, [r3, #0]
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	e00a      	b.n	800ba20 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ba0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d007      	beq.n	800ba20 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba10:	4b39      	ldr	r3, [pc, #228]	; (800baf8 <xQueueGenericSend+0x208>)
 800ba12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba16:	601a      	str	r2, [r3, #0]
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba20:	f001 fe30 	bl	800d684 <vPortExitCritical>
				return pdPASS;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e063      	b.n	800baf0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d103      	bne.n	800ba36 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba2e:	f001 fe29 	bl	800d684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba32:	2300      	movs	r3, #0
 800ba34:	e05c      	b.n	800baf0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d106      	bne.n	800ba4a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba3c:	f107 0314 	add.w	r3, r7, #20
 800ba40:	4618      	mov	r0, r3
 800ba42:	f001 f93d 	bl	800ccc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba46:	2301      	movs	r3, #1
 800ba48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba4a:	f001 fe1b 	bl	800d684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba4e:	f000 fee3 	bl	800c818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba52:	f001 fde3 	bl	800d61c <vPortEnterCritical>
 800ba56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba5c:	b25b      	sxtb	r3, r3
 800ba5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba62:	d103      	bne.n	800ba6c <xQueueGenericSend+0x17c>
 800ba64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba72:	b25b      	sxtb	r3, r3
 800ba74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba78:	d103      	bne.n	800ba82 <xQueueGenericSend+0x192>
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba82:	f001 fdff 	bl	800d684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba86:	1d3a      	adds	r2, r7, #4
 800ba88:	f107 0314 	add.w	r3, r7, #20
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f001 f92c 	bl	800ccec <xTaskCheckForTimeOut>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d124      	bne.n	800bae4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ba9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba9c:	f000 fb38 	bl	800c110 <prvIsQueueFull>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d018      	beq.n	800bad8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	3310      	adds	r3, #16
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	4611      	mov	r1, r2
 800baae:	4618      	mov	r0, r3
 800bab0:	f001 f87c 	bl	800cbac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bab6:	f000 fac3 	bl	800c040 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800baba:	f000 febb 	bl	800c834 <xTaskResumeAll>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f47f af7c 	bne.w	800b9be <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800bac6:	4b0c      	ldr	r3, [pc, #48]	; (800baf8 <xQueueGenericSend+0x208>)
 800bac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bacc:	601a      	str	r2, [r3, #0]
 800bace:	f3bf 8f4f 	dsb	sy
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	e772      	b.n	800b9be <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bada:	f000 fab1 	bl	800c040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bade:	f000 fea9 	bl	800c834 <xTaskResumeAll>
 800bae2:	e76c      	b.n	800b9be <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bae6:	f000 faab 	bl	800c040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800baea:	f000 fea3 	bl	800c834 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800baee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3738      	adds	r7, #56	; 0x38
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	e000ed04 	.word	0xe000ed04

0800bafc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b08c      	sub	sp, #48	; 0x30
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	60f8      	str	r0, [r7, #12]
 800bb04:	60b9      	str	r1, [r7, #8]
 800bb06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d10c      	bne.n	800bb30 <xQueueReceive+0x34>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1a:	b672      	cpsid	i
 800bb1c:	f383 8811 	msr	BASEPRI, r3
 800bb20:	f3bf 8f6f 	isb	sy
 800bb24:	f3bf 8f4f 	dsb	sy
 800bb28:	b662      	cpsie	i
 800bb2a:	623b      	str	r3, [r7, #32]
}
 800bb2c:	bf00      	nop
 800bb2e:	e7fe      	b.n	800bb2e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d103      	bne.n	800bb3e <xQueueReceive+0x42>
 800bb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d101      	bne.n	800bb42 <xQueueReceive+0x46>
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e000      	b.n	800bb44 <xQueueReceive+0x48>
 800bb42:	2300      	movs	r3, #0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d10c      	bne.n	800bb62 <xQueueReceive+0x66>
	__asm volatile
 800bb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb4c:	b672      	cpsid	i
 800bb4e:	f383 8811 	msr	BASEPRI, r3
 800bb52:	f3bf 8f6f 	isb	sy
 800bb56:	f3bf 8f4f 	dsb	sy
 800bb5a:	b662      	cpsie	i
 800bb5c:	61fb      	str	r3, [r7, #28]
}
 800bb5e:	bf00      	nop
 800bb60:	e7fe      	b.n	800bb60 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb62:	f001 fa11 	bl	800cf88 <xTaskGetSchedulerState>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d102      	bne.n	800bb72 <xQueueReceive+0x76>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d101      	bne.n	800bb76 <xQueueReceive+0x7a>
 800bb72:	2301      	movs	r3, #1
 800bb74:	e000      	b.n	800bb78 <xQueueReceive+0x7c>
 800bb76:	2300      	movs	r3, #0
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d10c      	bne.n	800bb96 <xQueueReceive+0x9a>
	__asm volatile
 800bb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb80:	b672      	cpsid	i
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	b662      	cpsie	i
 800bb90:	61bb      	str	r3, [r7, #24]
}
 800bb92:	bf00      	nop
 800bb94:	e7fe      	b.n	800bb94 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb96:	f001 fd41 	bl	800d61c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d01f      	beq.n	800bbe6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bba6:	68b9      	ldr	r1, [r7, #8]
 800bba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bbaa:	f000 fa23 	bl	800bff4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb0:	1e5a      	subs	r2, r3, #1
 800bbb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00f      	beq.n	800bbde <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc0:	3310      	adds	r3, #16
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f001 f818 	bl	800cbf8 <xTaskRemoveFromEventList>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d007      	beq.n	800bbde <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bbce:	4b3d      	ldr	r3, [pc, #244]	; (800bcc4 <xQueueReceive+0x1c8>)
 800bbd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbd4:	601a      	str	r2, [r3, #0]
 800bbd6:	f3bf 8f4f 	dsb	sy
 800bbda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bbde:	f001 fd51 	bl	800d684 <vPortExitCritical>
				return pdPASS;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e069      	b.n	800bcba <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d103      	bne.n	800bbf4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bbec:	f001 fd4a 	bl	800d684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	e062      	b.n	800bcba <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d106      	bne.n	800bc08 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbfa:	f107 0310 	add.w	r3, r7, #16
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f001 f85e 	bl	800ccc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc04:	2301      	movs	r3, #1
 800bc06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc08:	f001 fd3c 	bl	800d684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc0c:	f000 fe04 	bl	800c818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc10:	f001 fd04 	bl	800d61c <vPortEnterCritical>
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc1a:	b25b      	sxtb	r3, r3
 800bc1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc20:	d103      	bne.n	800bc2a <xQueueReceive+0x12e>
 800bc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc30:	b25b      	sxtb	r3, r3
 800bc32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc36:	d103      	bne.n	800bc40 <xQueueReceive+0x144>
 800bc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc40:	f001 fd20 	bl	800d684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc44:	1d3a      	adds	r2, r7, #4
 800bc46:	f107 0310 	add.w	r3, r7, #16
 800bc4a:	4611      	mov	r1, r2
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f001 f84d 	bl	800ccec <xTaskCheckForTimeOut>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d123      	bne.n	800bca0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc5a:	f000 fa43 	bl	800c0e4 <prvIsQueueEmpty>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d017      	beq.n	800bc94 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc66:	3324      	adds	r3, #36	; 0x24
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f000 ff9d 	bl	800cbac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc74:	f000 f9e4 	bl	800c040 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc78:	f000 fddc 	bl	800c834 <xTaskResumeAll>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d189      	bne.n	800bb96 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800bc82:	4b10      	ldr	r3, [pc, #64]	; (800bcc4 <xQueueReceive+0x1c8>)
 800bc84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc88:	601a      	str	r2, [r3, #0]
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	e780      	b.n	800bb96 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc96:	f000 f9d3 	bl	800c040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc9a:	f000 fdcb 	bl	800c834 <xTaskResumeAll>
 800bc9e:	e77a      	b.n	800bb96 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bca2:	f000 f9cd 	bl	800c040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bca6:	f000 fdc5 	bl	800c834 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcac:	f000 fa1a 	bl	800c0e4 <prvIsQueueEmpty>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f43f af6f 	beq.w	800bb96 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bcb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3730      	adds	r7, #48	; 0x30
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	e000ed04 	.word	0xe000ed04

0800bcc8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08e      	sub	sp, #56	; 0x38
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bcde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10c      	bne.n	800bcfe <xQueueSemaphoreTake+0x36>
	__asm volatile
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	b672      	cpsid	i
 800bcea:	f383 8811 	msr	BASEPRI, r3
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	f3bf 8f4f 	dsb	sy
 800bcf6:	b662      	cpsie	i
 800bcf8:	623b      	str	r3, [r7, #32]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00c      	beq.n	800bd20 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800bd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0a:	b672      	cpsid	i
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	b662      	cpsie	i
 800bd1a:	61fb      	str	r3, [r7, #28]
}
 800bd1c:	bf00      	nop
 800bd1e:	e7fe      	b.n	800bd1e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd20:	f001 f932 	bl	800cf88 <xTaskGetSchedulerState>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d102      	bne.n	800bd30 <xQueueSemaphoreTake+0x68>
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d101      	bne.n	800bd34 <xQueueSemaphoreTake+0x6c>
 800bd30:	2301      	movs	r3, #1
 800bd32:	e000      	b.n	800bd36 <xQueueSemaphoreTake+0x6e>
 800bd34:	2300      	movs	r3, #0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10c      	bne.n	800bd54 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	b672      	cpsid	i
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	b662      	cpsie	i
 800bd4e:	61bb      	str	r3, [r7, #24]
}
 800bd50:	bf00      	nop
 800bd52:	e7fe      	b.n	800bd52 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd54:	f001 fc62 	bl	800d61c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd5c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d024      	beq.n	800bdae <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd66:	1e5a      	subs	r2, r3, #1
 800bd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d104      	bne.n	800bd7e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bd74:	f001 face 	bl	800d314 <pvTaskIncrementMutexHeldCount>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	691b      	ldr	r3, [r3, #16]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00f      	beq.n	800bda6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd88:	3310      	adds	r3, #16
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 ff34 	bl	800cbf8 <xTaskRemoveFromEventList>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d007      	beq.n	800bda6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd96:	4b55      	ldr	r3, [pc, #340]	; (800beec <xQueueSemaphoreTake+0x224>)
 800bd98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd9c:	601a      	str	r2, [r3, #0]
 800bd9e:	f3bf 8f4f 	dsb	sy
 800bda2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bda6:	f001 fc6d 	bl	800d684 <vPortExitCritical>
				return pdPASS;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e099      	b.n	800bee2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d113      	bne.n	800bddc <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00c      	beq.n	800bdd4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800bdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbe:	b672      	cpsid	i
 800bdc0:	f383 8811 	msr	BASEPRI, r3
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	b662      	cpsie	i
 800bdce:	617b      	str	r3, [r7, #20]
}
 800bdd0:	bf00      	nop
 800bdd2:	e7fe      	b.n	800bdd2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bdd4:	f001 fc56 	bl	800d684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	e082      	b.n	800bee2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d106      	bne.n	800bdf0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bde2:	f107 030c 	add.w	r3, r7, #12
 800bde6:	4618      	mov	r0, r3
 800bde8:	f000 ff6a 	bl	800ccc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdec:	2301      	movs	r3, #1
 800bdee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdf0:	f001 fc48 	bl	800d684 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdf4:	f000 fd10 	bl	800c818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdf8:	f001 fc10 	bl	800d61c <vPortEnterCritical>
 800bdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be02:	b25b      	sxtb	r3, r3
 800be04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be08:	d103      	bne.n	800be12 <xQueueSemaphoreTake+0x14a>
 800be0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be18:	b25b      	sxtb	r3, r3
 800be1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1e:	d103      	bne.n	800be28 <xQueueSemaphoreTake+0x160>
 800be20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be22:	2200      	movs	r2, #0
 800be24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be28:	f001 fc2c 	bl	800d684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be2c:	463a      	mov	r2, r7
 800be2e:	f107 030c 	add.w	r3, r7, #12
 800be32:	4611      	mov	r1, r2
 800be34:	4618      	mov	r0, r3
 800be36:	f000 ff59 	bl	800ccec <xTaskCheckForTimeOut>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d132      	bne.n	800bea6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be42:	f000 f94f 	bl	800c0e4 <prvIsQueueEmpty>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d026      	beq.n	800be9a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d109      	bne.n	800be68 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800be54:	f001 fbe2 	bl	800d61c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f001 f8b1 	bl	800cfc4 <xTaskPriorityInherit>
 800be62:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800be64:	f001 fc0e 	bl	800d684 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6a:	3324      	adds	r3, #36	; 0x24
 800be6c:	683a      	ldr	r2, [r7, #0]
 800be6e:	4611      	mov	r1, r2
 800be70:	4618      	mov	r0, r3
 800be72:	f000 fe9b 	bl	800cbac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be78:	f000 f8e2 	bl	800c040 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be7c:	f000 fcda 	bl	800c834 <xTaskResumeAll>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	f47f af66 	bne.w	800bd54 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800be88:	4b18      	ldr	r3, [pc, #96]	; (800beec <xQueueSemaphoreTake+0x224>)
 800be8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be8e:	601a      	str	r2, [r3, #0]
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	e75c      	b.n	800bd54 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800be9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be9c:	f000 f8d0 	bl	800c040 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bea0:	f000 fcc8 	bl	800c834 <xTaskResumeAll>
 800bea4:	e756      	b.n	800bd54 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bea8:	f000 f8ca 	bl	800c040 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800beac:	f000 fcc2 	bl	800c834 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800beb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beb2:	f000 f917 	bl	800c0e4 <prvIsQueueEmpty>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f43f af4b 	beq.w	800bd54 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00d      	beq.n	800bee0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800bec4:	f001 fbaa 	bl	800d61c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beca:	f000 f811 	bl	800bef0 <prvGetDisinheritPriorityAfterTimeout>
 800bece:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bed6:	4618      	mov	r0, r3
 800bed8:	f001 f97e 	bl	800d1d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bedc:	f001 fbd2 	bl	800d684 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bee0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3738      	adds	r7, #56	; 0x38
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	e000ed04 	.word	0xe000ed04

0800bef0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befc:	2b00      	cmp	r3, #0
 800befe:	d006      	beq.n	800bf0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f1c3 0307 	rsb	r3, r3, #7
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	e001      	b.n	800bf12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bf12:	68fb      	ldr	r3, [r7, #12]
	}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3714      	adds	r7, #20
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b086      	sub	sp, #24
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10d      	bne.n	800bf5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d14d      	bne.n	800bfe2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f001 f8ba 	bl	800d0c4 <xTaskPriorityDisinherit>
 800bf50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	609a      	str	r2, [r3, #8]
 800bf58:	e043      	b.n	800bfe2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d119      	bne.n	800bf94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6858      	ldr	r0, [r3, #4]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf68:	461a      	mov	r2, r3
 800bf6a:	68b9      	ldr	r1, [r7, #8]
 800bf6c:	f001 fe48 	bl	800dc00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	685a      	ldr	r2, [r3, #4]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf78:	441a      	add	r2, r3
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	685a      	ldr	r2, [r3, #4]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d32b      	bcc.n	800bfe2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	605a      	str	r2, [r3, #4]
 800bf92:	e026      	b.n	800bfe2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	68d8      	ldr	r0, [r3, #12]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	68b9      	ldr	r1, [r7, #8]
 800bfa0:	f001 fe2e 	bl	800dc00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	68da      	ldr	r2, [r3, #12]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfac:	425b      	negs	r3, r3
 800bfae:	441a      	add	r2, r3
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	68da      	ldr	r2, [r3, #12]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d207      	bcs.n	800bfd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	689a      	ldr	r2, [r3, #8]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc8:	425b      	negs	r3, r3
 800bfca:	441a      	add	r2, r3
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	d105      	bne.n	800bfe2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	1c5a      	adds	r2, r3, #1
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bfea:	697b      	ldr	r3, [r7, #20]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3718      	adds	r7, #24
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c002:	2b00      	cmp	r3, #0
 800c004:	d018      	beq.n	800c038 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68da      	ldr	r2, [r3, #12]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00e:	441a      	add	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	68da      	ldr	r2, [r3, #12]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d303      	bcc.n	800c028 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	68d9      	ldr	r1, [r3, #12]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c030:	461a      	mov	r2, r3
 800c032:	6838      	ldr	r0, [r7, #0]
 800c034:	f001 fde4 	bl	800dc00 <memcpy>
	}
}
 800c038:	bf00      	nop
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c048:	f001 fae8 	bl	800d61c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c052:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c054:	e011      	b.n	800c07a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d012      	beq.n	800c084 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	3324      	adds	r3, #36	; 0x24
 800c062:	4618      	mov	r0, r3
 800c064:	f000 fdc8 	bl	800cbf8 <xTaskRemoveFromEventList>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d001      	beq.n	800c072 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c06e:	f000 fea3 	bl	800cdb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c072:	7bfb      	ldrb	r3, [r7, #15]
 800c074:	3b01      	subs	r3, #1
 800c076:	b2db      	uxtb	r3, r3
 800c078:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	dce9      	bgt.n	800c056 <prvUnlockQueue+0x16>
 800c082:	e000      	b.n	800c086 <prvUnlockQueue+0x46>
					break;
 800c084:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	22ff      	movs	r2, #255	; 0xff
 800c08a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c08e:	f001 faf9 	bl	800d684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c092:	f001 fac3 	bl	800d61c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c09c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c09e:	e011      	b.n	800c0c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d012      	beq.n	800c0ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3310      	adds	r3, #16
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f000 fda3 	bl	800cbf8 <xTaskRemoveFromEventList>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d001      	beq.n	800c0bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c0b8:	f000 fe7e 	bl	800cdb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c0c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	dce9      	bgt.n	800c0a0 <prvUnlockQueue+0x60>
 800c0cc:	e000      	b.n	800c0d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c0ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	22ff      	movs	r2, #255	; 0xff
 800c0d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c0d8:	f001 fad4 	bl	800d684 <vPortExitCritical>
}
 800c0dc:	bf00      	nop
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0ec:	f001 fa96 	bl	800d61c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d102      	bne.n	800c0fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	60fb      	str	r3, [r7, #12]
 800c0fc:	e001      	b.n	800c102 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0fe:	2300      	movs	r3, #0
 800c100:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c102:	f001 fabf 	bl	800d684 <vPortExitCritical>

	return xReturn;
 800c106:	68fb      	ldr	r3, [r7, #12]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c118:	f001 fa80 	bl	800d61c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c124:	429a      	cmp	r2, r3
 800c126:	d102      	bne.n	800c12e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c128:	2301      	movs	r3, #1
 800c12a:	60fb      	str	r3, [r7, #12]
 800c12c:	e001      	b.n	800c132 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c12e:	2300      	movs	r3, #0
 800c130:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c132:	f001 faa7 	bl	800d684 <vPortExitCritical>

	return xReturn;
 800c136:	68fb      	ldr	r3, [r7, #12]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c140:	b580      	push	{r7, lr}
 800c142:	b08e      	sub	sp, #56	; 0x38
 800c144:	af04      	add	r7, sp, #16
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
 800c14c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10c      	bne.n	800c16e <xTaskCreateStatic+0x2e>
	__asm volatile
 800c154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c158:	b672      	cpsid	i
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	b662      	cpsie	i
 800c168:	623b      	str	r3, [r7, #32]
}
 800c16a:	bf00      	nop
 800c16c:	e7fe      	b.n	800c16c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10c      	bne.n	800c18e <xTaskCreateStatic+0x4e>
	__asm volatile
 800c174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c178:	b672      	cpsid	i
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	b662      	cpsie	i
 800c188:	61fb      	str	r3, [r7, #28]
}
 800c18a:	bf00      	nop
 800c18c:	e7fe      	b.n	800c18c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c18e:	23b4      	movs	r3, #180	; 0xb4
 800c190:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	2bb4      	cmp	r3, #180	; 0xb4
 800c196:	d00c      	beq.n	800c1b2 <xTaskCreateStatic+0x72>
	__asm volatile
 800c198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19c:	b672      	cpsid	i
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	b662      	cpsie	i
 800c1ac:	61bb      	str	r3, [r7, #24]
}
 800c1ae:	bf00      	nop
 800c1b0:	e7fe      	b.n	800c1b0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c1b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d01e      	beq.n	800c1f8 <xTaskCreateStatic+0xb8>
 800c1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d01b      	beq.n	800c1f8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1cc:	2202      	movs	r2, #2
 800c1ce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	9303      	str	r3, [sp, #12]
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d8:	9302      	str	r3, [sp, #8]
 800c1da:	f107 0314 	add.w	r3, r7, #20
 800c1de:	9301      	str	r3, [sp, #4]
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	68b9      	ldr	r1, [r7, #8]
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f000 f850 	bl	800c290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1f2:	f000 f8ed 	bl	800c3d0 <prvAddNewTaskToReadyList>
 800c1f6:	e001      	b.n	800c1fc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1fc:	697b      	ldr	r3, [r7, #20]
	}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3728      	adds	r7, #40	; 0x28
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c206:	b580      	push	{r7, lr}
 800c208:	b08c      	sub	sp, #48	; 0x30
 800c20a:	af04      	add	r7, sp, #16
 800c20c:	60f8      	str	r0, [r7, #12]
 800c20e:	60b9      	str	r1, [r7, #8]
 800c210:	603b      	str	r3, [r7, #0]
 800c212:	4613      	mov	r3, r2
 800c214:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c216:	88fb      	ldrh	r3, [r7, #6]
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	4618      	mov	r0, r3
 800c21c:	f001 fae6 	bl	800d7ec <pvPortMalloc>
 800c220:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00e      	beq.n	800c246 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c228:	20b4      	movs	r0, #180	; 0xb4
 800c22a:	f001 fadf 	bl	800d7ec <pvPortMalloc>
 800c22e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d003      	beq.n	800c23e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	697a      	ldr	r2, [r7, #20]
 800c23a:	631a      	str	r2, [r3, #48]	; 0x30
 800c23c:	e005      	b.n	800c24a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c23e:	6978      	ldr	r0, [r7, #20]
 800c240:	f001 fb9e 	bl	800d980 <vPortFree>
 800c244:	e001      	b.n	800c24a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c246:	2300      	movs	r3, #0
 800c248:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d017      	beq.n	800c280 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c258:	88fa      	ldrh	r2, [r7, #6]
 800c25a:	2300      	movs	r3, #0
 800c25c:	9303      	str	r3, [sp, #12]
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	9302      	str	r3, [sp, #8]
 800c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c264:	9301      	str	r3, [sp, #4]
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	68b9      	ldr	r1, [r7, #8]
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f000 f80e 	bl	800c290 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c274:	69f8      	ldr	r0, [r7, #28]
 800c276:	f000 f8ab 	bl	800c3d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c27a:	2301      	movs	r3, #1
 800c27c:	61bb      	str	r3, [r7, #24]
 800c27e:	e002      	b.n	800c286 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c280:	f04f 33ff 	mov.w	r3, #4294967295
 800c284:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c286:	69bb      	ldr	r3, [r7, #24]
	}
 800c288:	4618      	mov	r0, r3
 800c28a:	3720      	adds	r7, #32
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b088      	sub	sp, #32
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2a2:	6879      	ldr	r1, [r7, #4]
 800c2a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c2a8:	440b      	add	r3, r1
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	4413      	add	r3, r2
 800c2ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	f023 0307 	bic.w	r3, r3, #7
 800c2b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	f003 0307 	and.w	r3, r3, #7
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00c      	beq.n	800c2dc <prvInitialiseNewTask+0x4c>
	__asm volatile
 800c2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c6:	b672      	cpsid	i
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	b662      	cpsie	i
 800c2d6:	617b      	str	r3, [r7, #20]
}
 800c2d8:	bf00      	nop
 800c2da:	e7fe      	b.n	800c2da <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d01f      	beq.n	800c322 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	61fb      	str	r3, [r7, #28]
 800c2e6:	e012      	b.n	800c30e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2e8:	68ba      	ldr	r2, [r7, #8]
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	7819      	ldrb	r1, [r3, #0]
 800c2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2f2:	69fb      	ldr	r3, [r7, #28]
 800c2f4:	4413      	add	r3, r2
 800c2f6:	3334      	adds	r3, #52	; 0x34
 800c2f8:	460a      	mov	r2, r1
 800c2fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	4413      	add	r3, r2
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d006      	beq.n	800c316 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c308:	69fb      	ldr	r3, [r7, #28]
 800c30a:	3301      	adds	r3, #1
 800c30c:	61fb      	str	r3, [r7, #28]
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	2b0f      	cmp	r3, #15
 800c312:	d9e9      	bls.n	800c2e8 <prvInitialiseNewTask+0x58>
 800c314:	e000      	b.n	800c318 <prvInitialiseNewTask+0x88>
			{
				break;
 800c316:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c320:	e003      	b.n	800c32a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	2200      	movs	r2, #0
 800c326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32c:	2b06      	cmp	r3, #6
 800c32e:	d901      	bls.n	800c334 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c330:	2306      	movs	r3, #6
 800c332:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c338:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c33e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c342:	2200      	movs	r2, #0
 800c344:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c348:	3304      	adds	r3, #4
 800c34a:	4618      	mov	r0, r3
 800c34c:	f7ff f8bb 	bl	800b4c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c352:	3318      	adds	r3, #24
 800c354:	4618      	mov	r0, r3
 800c356:	f7ff f8b6 	bl	800b4c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c35e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	f1c3 0207 	rsb	r2, r3, #7
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c36e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c372:	2200      	movs	r2, #0
 800c374:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c382:	334c      	adds	r3, #76	; 0x4c
 800c384:	2260      	movs	r2, #96	; 0x60
 800c386:	2100      	movs	r1, #0
 800c388:	4618      	mov	r0, r3
 800c38a:	f001 fc47 	bl	800dc1c <memset>
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	4a0c      	ldr	r2, [pc, #48]	; (800c3c4 <prvInitialiseNewTask+0x134>)
 800c392:	651a      	str	r2, [r3, #80]	; 0x50
 800c394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c396:	4a0c      	ldr	r2, [pc, #48]	; (800c3c8 <prvInitialiseNewTask+0x138>)
 800c398:	655a      	str	r2, [r3, #84]	; 0x54
 800c39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39c:	4a0b      	ldr	r2, [pc, #44]	; (800c3cc <prvInitialiseNewTask+0x13c>)
 800c39e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	68f9      	ldr	r1, [r7, #12]
 800c3a4:	69b8      	ldr	r0, [r7, #24]
 800c3a6:	f001 f82f 	bl	800d408 <pxPortInitialiseStack>
 800c3aa:	4602      	mov	r2, r0
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d002      	beq.n	800c3bc <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3bc:	bf00      	nop
 800c3be:	3720      	adds	r7, #32
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	08034040 	.word	0x08034040
 800c3c8:	08034060 	.word	0x08034060
 800c3cc:	08034020 	.word	0x08034020

0800c3d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b082      	sub	sp, #8
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c3d8:	f001 f920 	bl	800d61c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c3dc:	4b2a      	ldr	r3, [pc, #168]	; (800c488 <prvAddNewTaskToReadyList+0xb8>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	4a29      	ldr	r2, [pc, #164]	; (800c488 <prvAddNewTaskToReadyList+0xb8>)
 800c3e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c3e6:	4b29      	ldr	r3, [pc, #164]	; (800c48c <prvAddNewTaskToReadyList+0xbc>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d109      	bne.n	800c402 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c3ee:	4a27      	ldr	r2, [pc, #156]	; (800c48c <prvAddNewTaskToReadyList+0xbc>)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3f4:	4b24      	ldr	r3, [pc, #144]	; (800c488 <prvAddNewTaskToReadyList+0xb8>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d110      	bne.n	800c41e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c3fc:	f000 fd00 	bl	800ce00 <prvInitialiseTaskLists>
 800c400:	e00d      	b.n	800c41e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c402:	4b23      	ldr	r3, [pc, #140]	; (800c490 <prvAddNewTaskToReadyList+0xc0>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d109      	bne.n	800c41e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c40a:	4b20      	ldr	r3, [pc, #128]	; (800c48c <prvAddNewTaskToReadyList+0xbc>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c414:	429a      	cmp	r2, r3
 800c416:	d802      	bhi.n	800c41e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c418:	4a1c      	ldr	r2, [pc, #112]	; (800c48c <prvAddNewTaskToReadyList+0xbc>)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c41e:	4b1d      	ldr	r3, [pc, #116]	; (800c494 <prvAddNewTaskToReadyList+0xc4>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	3301      	adds	r3, #1
 800c424:	4a1b      	ldr	r2, [pc, #108]	; (800c494 <prvAddNewTaskToReadyList+0xc4>)
 800c426:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42c:	2201      	movs	r2, #1
 800c42e:	409a      	lsls	r2, r3
 800c430:	4b19      	ldr	r3, [pc, #100]	; (800c498 <prvAddNewTaskToReadyList+0xc8>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4313      	orrs	r3, r2
 800c436:	4a18      	ldr	r2, [pc, #96]	; (800c498 <prvAddNewTaskToReadyList+0xc8>)
 800c438:	6013      	str	r3, [r2, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c43e:	4613      	mov	r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	4413      	add	r3, r2
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	4a15      	ldr	r2, [pc, #84]	; (800c49c <prvAddNewTaskToReadyList+0xcc>)
 800c448:	441a      	add	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	3304      	adds	r3, #4
 800c44e:	4619      	mov	r1, r3
 800c450:	4610      	mov	r0, r2
 800c452:	f7ff f845 	bl	800b4e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c456:	f001 f915 	bl	800d684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c45a:	4b0d      	ldr	r3, [pc, #52]	; (800c490 <prvAddNewTaskToReadyList+0xc0>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00e      	beq.n	800c480 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c462:	4b0a      	ldr	r3, [pc, #40]	; (800c48c <prvAddNewTaskToReadyList+0xbc>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d207      	bcs.n	800c480 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c470:	4b0b      	ldr	r3, [pc, #44]	; (800c4a0 <prvAddNewTaskToReadyList+0xd0>)
 800c472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c476:	601a      	str	r2, [r3, #0]
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c480:	bf00      	nop
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	200006a8 	.word	0x200006a8
 800c48c:	200005a8 	.word	0x200005a8
 800c490:	200006b4 	.word	0x200006b4
 800c494:	200006c4 	.word	0x200006c4
 800c498:	200006b0 	.word	0x200006b0
 800c49c:	200005ac 	.word	0x200005ac
 800c4a0:	e000ed04 	.word	0xe000ed04

0800c4a4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c4ac:	f001 f8b6 	bl	800d61c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d102      	bne.n	800c4bc <vTaskDelete+0x18>
 800c4b6:	4b3a      	ldr	r3, [pc, #232]	; (800c5a0 <vTaskDelete+0xfc>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	e000      	b.n	800c4be <vTaskDelete+0x1a>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7ff f868 	bl	800b59a <uxListRemove>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d115      	bne.n	800c4fc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d4:	4933      	ldr	r1, [pc, #204]	; (800c5a4 <vTaskDelete+0x100>)
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	009b      	lsls	r3, r3, #2
 800c4da:	4413      	add	r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	440b      	add	r3, r1
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d10a      	bne.n	800c4fc <vTaskDelete+0x58>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c4f0:	43da      	mvns	r2, r3
 800c4f2:	4b2d      	ldr	r3, [pc, #180]	; (800c5a8 <vTaskDelete+0x104>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	4a2b      	ldr	r2, [pc, #172]	; (800c5a8 <vTaskDelete+0x104>)
 800c4fa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c500:	2b00      	cmp	r3, #0
 800c502:	d004      	beq.n	800c50e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	3318      	adds	r3, #24
 800c508:	4618      	mov	r0, r3
 800c50a:	f7ff f846 	bl	800b59a <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c50e:	4b27      	ldr	r3, [pc, #156]	; (800c5ac <vTaskDelete+0x108>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3301      	adds	r3, #1
 800c514:	4a25      	ldr	r2, [pc, #148]	; (800c5ac <vTaskDelete+0x108>)
 800c516:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c518:	4b21      	ldr	r3, [pc, #132]	; (800c5a0 <vTaskDelete+0xfc>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d10b      	bne.n	800c53a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	3304      	adds	r3, #4
 800c526:	4619      	mov	r1, r3
 800c528:	4821      	ldr	r0, [pc, #132]	; (800c5b0 <vTaskDelete+0x10c>)
 800c52a:	f7fe ffd9 	bl	800b4e0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c52e:	4b21      	ldr	r3, [pc, #132]	; (800c5b4 <vTaskDelete+0x110>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	3301      	adds	r3, #1
 800c534:	4a1f      	ldr	r2, [pc, #124]	; (800c5b4 <vTaskDelete+0x110>)
 800c536:	6013      	str	r3, [r2, #0]
 800c538:	e009      	b.n	800c54e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c53a:	4b1f      	ldr	r3, [pc, #124]	; (800c5b8 <vTaskDelete+0x114>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	3b01      	subs	r3, #1
 800c540:	4a1d      	ldr	r2, [pc, #116]	; (800c5b8 <vTaskDelete+0x114>)
 800c542:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f000 fcc9 	bl	800cedc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c54a:	f000 fcfd 	bl	800cf48 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c54e:	f001 f899 	bl	800d684 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c552:	4b1a      	ldr	r3, [pc, #104]	; (800c5bc <vTaskDelete+0x118>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d01d      	beq.n	800c596 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800c55a:	4b11      	ldr	r3, [pc, #68]	; (800c5a0 <vTaskDelete+0xfc>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	429a      	cmp	r2, r3
 800c562:	d118      	bne.n	800c596 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c564:	4b16      	ldr	r3, [pc, #88]	; (800c5c0 <vTaskDelete+0x11c>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00c      	beq.n	800c586 <vTaskDelete+0xe2>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	b672      	cpsid	i
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	b662      	cpsie	i
 800c580:	60bb      	str	r3, [r7, #8]
}
 800c582:	bf00      	nop
 800c584:	e7fe      	b.n	800c584 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800c586:	4b0f      	ldr	r3, [pc, #60]	; (800c5c4 <vTaskDelete+0x120>)
 800c588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c58c:	601a      	str	r2, [r3, #0]
 800c58e:	f3bf 8f4f 	dsb	sy
 800c592:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c596:	bf00      	nop
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	200005a8 	.word	0x200005a8
 800c5a4:	200005ac 	.word	0x200005ac
 800c5a8:	200006b0 	.word	0x200006b0
 800c5ac:	200006c4 	.word	0x200006c4
 800c5b0:	2000067c 	.word	0x2000067c
 800c5b4:	20000690 	.word	0x20000690
 800c5b8:	200006a8 	.word	0x200006a8
 800c5bc:	200006b4 	.word	0x200006b4
 800c5c0:	200006d0 	.word	0x200006d0
 800c5c4:	e000ed04 	.word	0xe000ed04

0800c5c8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b08a      	sub	sp, #40	; 0x28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10c      	bne.n	800c5f6 <vTaskDelayUntil+0x2e>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e0:	b672      	cpsid	i
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	b662      	cpsie	i
 800c5f0:	617b      	str	r3, [r7, #20]
}
 800c5f2:	bf00      	nop
 800c5f4:	e7fe      	b.n	800c5f4 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10c      	bne.n	800c616 <vTaskDelayUntil+0x4e>
	__asm volatile
 800c5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c600:	b672      	cpsid	i
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	b662      	cpsie	i
 800c610:	613b      	str	r3, [r7, #16]
}
 800c612:	bf00      	nop
 800c614:	e7fe      	b.n	800c614 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800c616:	4b2b      	ldr	r3, [pc, #172]	; (800c6c4 <vTaskDelayUntil+0xfc>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00c      	beq.n	800c638 <vTaskDelayUntil+0x70>
	__asm volatile
 800c61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c622:	b672      	cpsid	i
 800c624:	f383 8811 	msr	BASEPRI, r3
 800c628:	f3bf 8f6f 	isb	sy
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	b662      	cpsie	i
 800c632:	60fb      	str	r3, [r7, #12]
}
 800c634:	bf00      	nop
 800c636:	e7fe      	b.n	800c636 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800c638:	f000 f8ee 	bl	800c818 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c63c:	4b22      	ldr	r3, [pc, #136]	; (800c6c8 <vTaskDelayUntil+0x100>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	683a      	ldr	r2, [r7, #0]
 800c648:	4413      	add	r3, r2
 800c64a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	6a3a      	ldr	r2, [r7, #32]
 800c652:	429a      	cmp	r2, r3
 800c654:	d20b      	bcs.n	800c66e <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	69fa      	ldr	r2, [r7, #28]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d211      	bcs.n	800c684 <vTaskDelayUntil+0xbc>
 800c660:	69fa      	ldr	r2, [r7, #28]
 800c662:	6a3b      	ldr	r3, [r7, #32]
 800c664:	429a      	cmp	r2, r3
 800c666:	d90d      	bls.n	800c684 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c668:	2301      	movs	r3, #1
 800c66a:	627b      	str	r3, [r7, #36]	; 0x24
 800c66c:	e00a      	b.n	800c684 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	69fa      	ldr	r2, [r7, #28]
 800c674:	429a      	cmp	r2, r3
 800c676:	d303      	bcc.n	800c680 <vTaskDelayUntil+0xb8>
 800c678:	69fa      	ldr	r2, [r7, #28]
 800c67a:	6a3b      	ldr	r3, [r7, #32]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d901      	bls.n	800c684 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c680:	2301      	movs	r3, #1
 800c682:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	69fa      	ldr	r2, [r7, #28]
 800c688:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d006      	beq.n	800c69e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c690:	69fa      	ldr	r2, [r7, #28]
 800c692:	6a3b      	ldr	r3, [r7, #32]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	2100      	movs	r1, #0
 800c698:	4618      	mov	r0, r3
 800c69a:	f000 fe4f 	bl	800d33c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c69e:	f000 f8c9 	bl	800c834 <xTaskResumeAll>
 800c6a2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d107      	bne.n	800c6ba <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800c6aa:	4b08      	ldr	r3, [pc, #32]	; (800c6cc <vTaskDelayUntil+0x104>)
 800c6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6b0:	601a      	str	r2, [r3, #0]
 800c6b2:	f3bf 8f4f 	dsb	sy
 800c6b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6ba:	bf00      	nop
 800c6bc:	3728      	adds	r7, #40	; 0x28
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	200006d0 	.word	0x200006d0
 800c6c8:	200006ac 	.word	0x200006ac
 800c6cc:	e000ed04 	.word	0xe000ed04

0800c6d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d019      	beq.n	800c716 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c6e2:	4b14      	ldr	r3, [pc, #80]	; (800c734 <vTaskDelay+0x64>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00c      	beq.n	800c704 <vTaskDelay+0x34>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ee:	b672      	cpsid	i
 800c6f0:	f383 8811 	msr	BASEPRI, r3
 800c6f4:	f3bf 8f6f 	isb	sy
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	b662      	cpsie	i
 800c6fe:	60bb      	str	r3, [r7, #8]
}
 800c700:	bf00      	nop
 800c702:	e7fe      	b.n	800c702 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c704:	f000 f888 	bl	800c818 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c708:	2100      	movs	r1, #0
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 fe16 	bl	800d33c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c710:	f000 f890 	bl	800c834 <xTaskResumeAll>
 800c714:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d107      	bne.n	800c72c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c71c:	4b06      	ldr	r3, [pc, #24]	; (800c738 <vTaskDelay+0x68>)
 800c71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	f3bf 8f4f 	dsb	sy
 800c728:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c72c:	bf00      	nop
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}
 800c734:	200006d0 	.word	0x200006d0
 800c738:	e000ed04 	.word	0xe000ed04

0800c73c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b08a      	sub	sp, #40	; 0x28
 800c740:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c742:	2300      	movs	r3, #0
 800c744:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c746:	2300      	movs	r3, #0
 800c748:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c74a:	463a      	mov	r2, r7
 800c74c:	1d39      	adds	r1, r7, #4
 800c74e:	f107 0308 	add.w	r3, r7, #8
 800c752:	4618      	mov	r0, r3
 800c754:	f7f3 fed8 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c758:	6839      	ldr	r1, [r7, #0]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	9202      	str	r2, [sp, #8]
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	2300      	movs	r3, #0
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	2300      	movs	r3, #0
 800c768:	460a      	mov	r2, r1
 800c76a:	4923      	ldr	r1, [pc, #140]	; (800c7f8 <vTaskStartScheduler+0xbc>)
 800c76c:	4823      	ldr	r0, [pc, #140]	; (800c7fc <vTaskStartScheduler+0xc0>)
 800c76e:	f7ff fce7 	bl	800c140 <xTaskCreateStatic>
 800c772:	4603      	mov	r3, r0
 800c774:	4a22      	ldr	r2, [pc, #136]	; (800c800 <vTaskStartScheduler+0xc4>)
 800c776:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c778:	4b21      	ldr	r3, [pc, #132]	; (800c800 <vTaskStartScheduler+0xc4>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d002      	beq.n	800c786 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c780:	2301      	movs	r3, #1
 800c782:	617b      	str	r3, [r7, #20]
 800c784:	e001      	b.n	800c78a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c786:	2300      	movs	r3, #0
 800c788:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d11d      	bne.n	800c7cc <vTaskStartScheduler+0x90>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	b672      	cpsid	i
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	b662      	cpsie	i
 800c7a4:	613b      	str	r3, [r7, #16]
}
 800c7a6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c7a8:	4b16      	ldr	r3, [pc, #88]	; (800c804 <vTaskStartScheduler+0xc8>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	334c      	adds	r3, #76	; 0x4c
 800c7ae:	4a16      	ldr	r2, [pc, #88]	; (800c808 <vTaskStartScheduler+0xcc>)
 800c7b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c7b2:	4b16      	ldr	r3, [pc, #88]	; (800c80c <vTaskStartScheduler+0xd0>)
 800c7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c7ba:	4b15      	ldr	r3, [pc, #84]	; (800c810 <vTaskStartScheduler+0xd4>)
 800c7bc:	2201      	movs	r2, #1
 800c7be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c7c0:	4b14      	ldr	r3, [pc, #80]	; (800c814 <vTaskStartScheduler+0xd8>)
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c7c6:	f000 feab 	bl	800d520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c7ca:	e010      	b.n	800c7ee <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d2:	d10c      	bne.n	800c7ee <vTaskStartScheduler+0xb2>
	__asm volatile
 800c7d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d8:	b672      	cpsid	i
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	b662      	cpsie	i
 800c7e8:	60fb      	str	r3, [r7, #12]
}
 800c7ea:	bf00      	nop
 800c7ec:	e7fe      	b.n	800c7ec <vTaskStartScheduler+0xb0>
}
 800c7ee:	bf00      	nop
 800c7f0:	3718      	adds	r7, #24
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	0800de84 	.word	0x0800de84
 800c7fc:	0800cdd1 	.word	0x0800cdd1
 800c800:	200006cc 	.word	0x200006cc
 800c804:	200005a8 	.word	0x200005a8
 800c808:	20000050 	.word	0x20000050
 800c80c:	200006c8 	.word	0x200006c8
 800c810:	200006b4 	.word	0x200006b4
 800c814:	200006ac 	.word	0x200006ac

0800c818 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c818:	b480      	push	{r7}
 800c81a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c81c:	4b04      	ldr	r3, [pc, #16]	; (800c830 <vTaskSuspendAll+0x18>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	3301      	adds	r3, #1
 800c822:	4a03      	ldr	r2, [pc, #12]	; (800c830 <vTaskSuspendAll+0x18>)
 800c824:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c826:	bf00      	nop
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr
 800c830:	200006d0 	.word	0x200006d0

0800c834 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c83a:	2300      	movs	r3, #0
 800c83c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c83e:	2300      	movs	r3, #0
 800c840:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c842:	4b42      	ldr	r3, [pc, #264]	; (800c94c <xTaskResumeAll+0x118>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d10c      	bne.n	800c864 <xTaskResumeAll+0x30>
	__asm volatile
 800c84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84e:	b672      	cpsid	i
 800c850:	f383 8811 	msr	BASEPRI, r3
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	f3bf 8f4f 	dsb	sy
 800c85c:	b662      	cpsie	i
 800c85e:	603b      	str	r3, [r7, #0]
}
 800c860:	bf00      	nop
 800c862:	e7fe      	b.n	800c862 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c864:	f000 feda 	bl	800d61c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c868:	4b38      	ldr	r3, [pc, #224]	; (800c94c <xTaskResumeAll+0x118>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	3b01      	subs	r3, #1
 800c86e:	4a37      	ldr	r2, [pc, #220]	; (800c94c <xTaskResumeAll+0x118>)
 800c870:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c872:	4b36      	ldr	r3, [pc, #216]	; (800c94c <xTaskResumeAll+0x118>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d161      	bne.n	800c93e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c87a:	4b35      	ldr	r3, [pc, #212]	; (800c950 <xTaskResumeAll+0x11c>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d05d      	beq.n	800c93e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c882:	e02e      	b.n	800c8e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c884:	4b33      	ldr	r3, [pc, #204]	; (800c954 <xTaskResumeAll+0x120>)
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	3318      	adds	r3, #24
 800c890:	4618      	mov	r0, r3
 800c892:	f7fe fe82 	bl	800b59a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	3304      	adds	r3, #4
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7fe fe7d 	bl	800b59a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	409a      	lsls	r2, r3
 800c8a8:	4b2b      	ldr	r3, [pc, #172]	; (800c958 <xTaskResumeAll+0x124>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	4a2a      	ldr	r2, [pc, #168]	; (800c958 <xTaskResumeAll+0x124>)
 800c8b0:	6013      	str	r3, [r2, #0]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4413      	add	r3, r2
 800c8bc:	009b      	lsls	r3, r3, #2
 800c8be:	4a27      	ldr	r2, [pc, #156]	; (800c95c <xTaskResumeAll+0x128>)
 800c8c0:	441a      	add	r2, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	3304      	adds	r3, #4
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	f7fe fe09 	bl	800b4e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d2:	4b23      	ldr	r3, [pc, #140]	; (800c960 <xTaskResumeAll+0x12c>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d302      	bcc.n	800c8e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c8dc:	4b21      	ldr	r3, [pc, #132]	; (800c964 <xTaskResumeAll+0x130>)
 800c8de:	2201      	movs	r2, #1
 800c8e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8e2:	4b1c      	ldr	r3, [pc, #112]	; (800c954 <xTaskResumeAll+0x120>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1cc      	bne.n	800c884 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d001      	beq.n	800c8f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c8f0:	f000 fb2a 	bl	800cf48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c8f4:	4b1c      	ldr	r3, [pc, #112]	; (800c968 <xTaskResumeAll+0x134>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d010      	beq.n	800c922 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c900:	f000 f836 	bl	800c970 <xTaskIncrementTick>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d002      	beq.n	800c910 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c90a:	4b16      	ldr	r3, [pc, #88]	; (800c964 <xTaskResumeAll+0x130>)
 800c90c:	2201      	movs	r2, #1
 800c90e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	3b01      	subs	r3, #1
 800c914:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1f1      	bne.n	800c900 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800c91c:	4b12      	ldr	r3, [pc, #72]	; (800c968 <xTaskResumeAll+0x134>)
 800c91e:	2200      	movs	r2, #0
 800c920:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c922:	4b10      	ldr	r3, [pc, #64]	; (800c964 <xTaskResumeAll+0x130>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d009      	beq.n	800c93e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c92a:	2301      	movs	r3, #1
 800c92c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c92e:	4b0f      	ldr	r3, [pc, #60]	; (800c96c <xTaskResumeAll+0x138>)
 800c930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c934:	601a      	str	r2, [r3, #0]
 800c936:	f3bf 8f4f 	dsb	sy
 800c93a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c93e:	f000 fea1 	bl	800d684 <vPortExitCritical>

	return xAlreadyYielded;
 800c942:	68bb      	ldr	r3, [r7, #8]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	200006d0 	.word	0x200006d0
 800c950:	200006a8 	.word	0x200006a8
 800c954:	20000668 	.word	0x20000668
 800c958:	200006b0 	.word	0x200006b0
 800c95c:	200005ac 	.word	0x200005ac
 800c960:	200005a8 	.word	0x200005a8
 800c964:	200006bc 	.word	0x200006bc
 800c968:	200006b8 	.word	0x200006b8
 800c96c:	e000ed04 	.word	0xe000ed04

0800c970 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b086      	sub	sp, #24
 800c974:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c976:	2300      	movs	r3, #0
 800c978:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c97a:	4b4f      	ldr	r3, [pc, #316]	; (800cab8 <xTaskIncrementTick+0x148>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f040 808a 	bne.w	800ca98 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c984:	4b4d      	ldr	r3, [pc, #308]	; (800cabc <xTaskIncrementTick+0x14c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	3301      	adds	r3, #1
 800c98a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c98c:	4a4b      	ldr	r2, [pc, #300]	; (800cabc <xTaskIncrementTick+0x14c>)
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d122      	bne.n	800c9de <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c998:	4b49      	ldr	r3, [pc, #292]	; (800cac0 <xTaskIncrementTick+0x150>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d00c      	beq.n	800c9bc <xTaskIncrementTick+0x4c>
	__asm volatile
 800c9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a6:	b672      	cpsid	i
 800c9a8:	f383 8811 	msr	BASEPRI, r3
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	b662      	cpsie	i
 800c9b6:	603b      	str	r3, [r7, #0]
}
 800c9b8:	bf00      	nop
 800c9ba:	e7fe      	b.n	800c9ba <xTaskIncrementTick+0x4a>
 800c9bc:	4b40      	ldr	r3, [pc, #256]	; (800cac0 <xTaskIncrementTick+0x150>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	60fb      	str	r3, [r7, #12]
 800c9c2:	4b40      	ldr	r3, [pc, #256]	; (800cac4 <xTaskIncrementTick+0x154>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a3e      	ldr	r2, [pc, #248]	; (800cac0 <xTaskIncrementTick+0x150>)
 800c9c8:	6013      	str	r3, [r2, #0]
 800c9ca:	4a3e      	ldr	r2, [pc, #248]	; (800cac4 <xTaskIncrementTick+0x154>)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6013      	str	r3, [r2, #0]
 800c9d0:	4b3d      	ldr	r3, [pc, #244]	; (800cac8 <xTaskIncrementTick+0x158>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	4a3c      	ldr	r2, [pc, #240]	; (800cac8 <xTaskIncrementTick+0x158>)
 800c9d8:	6013      	str	r3, [r2, #0]
 800c9da:	f000 fab5 	bl	800cf48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c9de:	4b3b      	ldr	r3, [pc, #236]	; (800cacc <xTaskIncrementTick+0x15c>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	693a      	ldr	r2, [r7, #16]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d348      	bcc.n	800ca7a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9e8:	4b35      	ldr	r3, [pc, #212]	; (800cac0 <xTaskIncrementTick+0x150>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d104      	bne.n	800c9fc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9f2:	4b36      	ldr	r3, [pc, #216]	; (800cacc <xTaskIncrementTick+0x15c>)
 800c9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f8:	601a      	str	r2, [r3, #0]
					break;
 800c9fa:	e03e      	b.n	800ca7a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9fc:	4b30      	ldr	r3, [pc, #192]	; (800cac0 <xTaskIncrementTick+0x150>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ca0c:	693a      	ldr	r2, [r7, #16]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d203      	bcs.n	800ca1c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca14:	4a2d      	ldr	r2, [pc, #180]	; (800cacc <xTaskIncrementTick+0x15c>)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca1a:	e02e      	b.n	800ca7a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	3304      	adds	r3, #4
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fe fdba 	bl	800b59a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d004      	beq.n	800ca38 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	3318      	adds	r3, #24
 800ca32:	4618      	mov	r0, r3
 800ca34:	f7fe fdb1 	bl	800b59a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	409a      	lsls	r2, r3
 800ca40:	4b23      	ldr	r3, [pc, #140]	; (800cad0 <xTaskIncrementTick+0x160>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	4a22      	ldr	r2, [pc, #136]	; (800cad0 <xTaskIncrementTick+0x160>)
 800ca48:	6013      	str	r3, [r2, #0]
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca4e:	4613      	mov	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4413      	add	r3, r2
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	4a1f      	ldr	r2, [pc, #124]	; (800cad4 <xTaskIncrementTick+0x164>)
 800ca58:	441a      	add	r2, r3
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	3304      	adds	r3, #4
 800ca5e:	4619      	mov	r1, r3
 800ca60:	4610      	mov	r0, r2
 800ca62:	f7fe fd3d 	bl	800b4e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6a:	4b1b      	ldr	r3, [pc, #108]	; (800cad8 <xTaskIncrementTick+0x168>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d3b9      	bcc.n	800c9e8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ca74:	2301      	movs	r3, #1
 800ca76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca78:	e7b6      	b.n	800c9e8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca7a:	4b17      	ldr	r3, [pc, #92]	; (800cad8 <xTaskIncrementTick+0x168>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca80:	4914      	ldr	r1, [pc, #80]	; (800cad4 <xTaskIncrementTick+0x164>)
 800ca82:	4613      	mov	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	4413      	add	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	440b      	add	r3, r1
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2b01      	cmp	r3, #1
 800ca90:	d907      	bls.n	800caa2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800ca92:	2301      	movs	r3, #1
 800ca94:	617b      	str	r3, [r7, #20]
 800ca96:	e004      	b.n	800caa2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ca98:	4b10      	ldr	r3, [pc, #64]	; (800cadc <xTaskIncrementTick+0x16c>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	4a0f      	ldr	r2, [pc, #60]	; (800cadc <xTaskIncrementTick+0x16c>)
 800caa0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800caa2:	4b0f      	ldr	r3, [pc, #60]	; (800cae0 <xTaskIncrementTick+0x170>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d001      	beq.n	800caae <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800caaa:	2301      	movs	r3, #1
 800caac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800caae:	697b      	ldr	r3, [r7, #20]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	200006d0 	.word	0x200006d0
 800cabc:	200006ac 	.word	0x200006ac
 800cac0:	20000660 	.word	0x20000660
 800cac4:	20000664 	.word	0x20000664
 800cac8:	200006c0 	.word	0x200006c0
 800cacc:	200006c8 	.word	0x200006c8
 800cad0:	200006b0 	.word	0x200006b0
 800cad4:	200005ac 	.word	0x200005ac
 800cad8:	200005a8 	.word	0x200005a8
 800cadc:	200006b8 	.word	0x200006b8
 800cae0:	200006bc 	.word	0x200006bc

0800cae4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cae4:	b480      	push	{r7}
 800cae6:	b087      	sub	sp, #28
 800cae8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800caea:	4b2a      	ldr	r3, [pc, #168]	; (800cb94 <vTaskSwitchContext+0xb0>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d003      	beq.n	800cafa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800caf2:	4b29      	ldr	r3, [pc, #164]	; (800cb98 <vTaskSwitchContext+0xb4>)
 800caf4:	2201      	movs	r2, #1
 800caf6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800caf8:	e046      	b.n	800cb88 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cafa:	4b27      	ldr	r3, [pc, #156]	; (800cb98 <vTaskSwitchContext+0xb4>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb00:	4b26      	ldr	r3, [pc, #152]	; (800cb9c <vTaskSwitchContext+0xb8>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	fab3 f383 	clz	r3, r3
 800cb0c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cb0e:	7afb      	ldrb	r3, [r7, #11]
 800cb10:	f1c3 031f 	rsb	r3, r3, #31
 800cb14:	617b      	str	r3, [r7, #20]
 800cb16:	4922      	ldr	r1, [pc, #136]	; (800cba0 <vTaskSwitchContext+0xbc>)
 800cb18:	697a      	ldr	r2, [r7, #20]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	4413      	add	r3, r2
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	440b      	add	r3, r1
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d10c      	bne.n	800cb44 <vTaskSwitchContext+0x60>
	__asm volatile
 800cb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2e:	b672      	cpsid	i
 800cb30:	f383 8811 	msr	BASEPRI, r3
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	b662      	cpsie	i
 800cb3e:	607b      	str	r3, [r7, #4]
}
 800cb40:	bf00      	nop
 800cb42:	e7fe      	b.n	800cb42 <vTaskSwitchContext+0x5e>
 800cb44:	697a      	ldr	r2, [r7, #20]
 800cb46:	4613      	mov	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	4413      	add	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4a14      	ldr	r2, [pc, #80]	; (800cba0 <vTaskSwitchContext+0xbc>)
 800cb50:	4413      	add	r3, r2
 800cb52:	613b      	str	r3, [r7, #16]
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	685a      	ldr	r2, [r3, #4]
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	605a      	str	r2, [r3, #4]
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	685a      	ldr	r2, [r3, #4]
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	3308      	adds	r3, #8
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d104      	bne.n	800cb74 <vTaskSwitchContext+0x90>
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	685a      	ldr	r2, [r3, #4]
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	605a      	str	r2, [r3, #4]
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	4a0a      	ldr	r2, [pc, #40]	; (800cba4 <vTaskSwitchContext+0xc0>)
 800cb7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb7e:	4b09      	ldr	r3, [pc, #36]	; (800cba4 <vTaskSwitchContext+0xc0>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	334c      	adds	r3, #76	; 0x4c
 800cb84:	4a08      	ldr	r2, [pc, #32]	; (800cba8 <vTaskSwitchContext+0xc4>)
 800cb86:	6013      	str	r3, [r2, #0]
}
 800cb88:	bf00      	nop
 800cb8a:	371c      	adds	r7, #28
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr
 800cb94:	200006d0 	.word	0x200006d0
 800cb98:	200006bc 	.word	0x200006bc
 800cb9c:	200006b0 	.word	0x200006b0
 800cba0:	200005ac 	.word	0x200005ac
 800cba4:	200005a8 	.word	0x200005a8
 800cba8:	20000050 	.word	0x20000050

0800cbac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10c      	bne.n	800cbd6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc0:	b672      	cpsid	i
 800cbc2:	f383 8811 	msr	BASEPRI, r3
 800cbc6:	f3bf 8f6f 	isb	sy
 800cbca:	f3bf 8f4f 	dsb	sy
 800cbce:	b662      	cpsie	i
 800cbd0:	60fb      	str	r3, [r7, #12]
}
 800cbd2:	bf00      	nop
 800cbd4:	e7fe      	b.n	800cbd4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cbd6:	4b07      	ldr	r3, [pc, #28]	; (800cbf4 <vTaskPlaceOnEventList+0x48>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3318      	adds	r3, #24
 800cbdc:	4619      	mov	r1, r3
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7fe fca2 	bl	800b528 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cbe4:	2101      	movs	r1, #1
 800cbe6:	6838      	ldr	r0, [r7, #0]
 800cbe8:	f000 fba8 	bl	800d33c <prvAddCurrentTaskToDelayedList>
}
 800cbec:	bf00      	nop
 800cbee:	3710      	adds	r7, #16
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	200005a8 	.word	0x200005a8

0800cbf8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b086      	sub	sp, #24
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d10c      	bne.n	800cc28 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800cc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc12:	b672      	cpsid	i
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	b662      	cpsie	i
 800cc22:	60fb      	str	r3, [r7, #12]
}
 800cc24:	bf00      	nop
 800cc26:	e7fe      	b.n	800cc26 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	3318      	adds	r3, #24
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fe fcb4 	bl	800b59a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc32:	4b1d      	ldr	r3, [pc, #116]	; (800cca8 <xTaskRemoveFromEventList+0xb0>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d11c      	bne.n	800cc74 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	3304      	adds	r3, #4
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fe fcab 	bl	800b59a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc48:	2201      	movs	r2, #1
 800cc4a:	409a      	lsls	r2, r3
 800cc4c:	4b17      	ldr	r3, [pc, #92]	; (800ccac <xTaskRemoveFromEventList+0xb4>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4313      	orrs	r3, r2
 800cc52:	4a16      	ldr	r2, [pc, #88]	; (800ccac <xTaskRemoveFromEventList+0xb4>)
 800cc54:	6013      	str	r3, [r2, #0]
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	009b      	lsls	r3, r3, #2
 800cc5e:	4413      	add	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4a13      	ldr	r2, [pc, #76]	; (800ccb0 <xTaskRemoveFromEventList+0xb8>)
 800cc64:	441a      	add	r2, r3
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	3304      	adds	r3, #4
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	4610      	mov	r0, r2
 800cc6e:	f7fe fc37 	bl	800b4e0 <vListInsertEnd>
 800cc72:	e005      	b.n	800cc80 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	3318      	adds	r3, #24
 800cc78:	4619      	mov	r1, r3
 800cc7a:	480e      	ldr	r0, [pc, #56]	; (800ccb4 <xTaskRemoveFromEventList+0xbc>)
 800cc7c:	f7fe fc30 	bl	800b4e0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc84:	4b0c      	ldr	r3, [pc, #48]	; (800ccb8 <xTaskRemoveFromEventList+0xc0>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d905      	bls.n	800cc9a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc92:	4b0a      	ldr	r3, [pc, #40]	; (800ccbc <xTaskRemoveFromEventList+0xc4>)
 800cc94:	2201      	movs	r2, #1
 800cc96:	601a      	str	r2, [r3, #0]
 800cc98:	e001      	b.n	800cc9e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc9e:	697b      	ldr	r3, [r7, #20]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3718      	adds	r7, #24
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	200006d0 	.word	0x200006d0
 800ccac:	200006b0 	.word	0x200006b0
 800ccb0:	200005ac 	.word	0x200005ac
 800ccb4:	20000668 	.word	0x20000668
 800ccb8:	200005a8 	.word	0x200005a8
 800ccbc:	200006bc 	.word	0x200006bc

0800ccc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ccc8:	4b06      	ldr	r3, [pc, #24]	; (800cce4 <vTaskInternalSetTimeOutState+0x24>)
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ccd0:	4b05      	ldr	r3, [pc, #20]	; (800cce8 <vTaskInternalSetTimeOutState+0x28>)
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	605a      	str	r2, [r3, #4]
}
 800ccd8:	bf00      	nop
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr
 800cce4:	200006c0 	.word	0x200006c0
 800cce8:	200006ac 	.word	0x200006ac

0800ccec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b088      	sub	sp, #32
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d10c      	bne.n	800cd16 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ccfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd00:	b672      	cpsid	i
 800cd02:	f383 8811 	msr	BASEPRI, r3
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	b662      	cpsie	i
 800cd10:	613b      	str	r3, [r7, #16]
}
 800cd12:	bf00      	nop
 800cd14:	e7fe      	b.n	800cd14 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d10c      	bne.n	800cd36 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800cd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd20:	b672      	cpsid	i
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	b662      	cpsie	i
 800cd30:	60fb      	str	r3, [r7, #12]
}
 800cd32:	bf00      	nop
 800cd34:	e7fe      	b.n	800cd34 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800cd36:	f000 fc71 	bl	800d61c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd3a:	4b1d      	ldr	r3, [pc, #116]	; (800cdb0 <xTaskCheckForTimeOut+0xc4>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	69ba      	ldr	r2, [r7, #24]
 800cd46:	1ad3      	subs	r3, r2, r3
 800cd48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd52:	d102      	bne.n	800cd5a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cd54:	2300      	movs	r3, #0
 800cd56:	61fb      	str	r3, [r7, #28]
 800cd58:	e023      	b.n	800cda2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	4b15      	ldr	r3, [pc, #84]	; (800cdb4 <xTaskCheckForTimeOut+0xc8>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d007      	beq.n	800cd76 <xTaskCheckForTimeOut+0x8a>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	69ba      	ldr	r2, [r7, #24]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d302      	bcc.n	800cd76 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cd70:	2301      	movs	r3, #1
 800cd72:	61fb      	str	r3, [r7, #28]
 800cd74:	e015      	b.n	800cda2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d20b      	bcs.n	800cd98 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	1ad2      	subs	r2, r2, r3
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7ff ff97 	bl	800ccc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd92:	2300      	movs	r3, #0
 800cd94:	61fb      	str	r3, [r7, #28]
 800cd96:	e004      	b.n	800cda2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cda2:	f000 fc6f 	bl	800d684 <vPortExitCritical>

	return xReturn;
 800cda6:	69fb      	ldr	r3, [r7, #28]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3720      	adds	r7, #32
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	200006ac 	.word	0x200006ac
 800cdb4:	200006c0 	.word	0x200006c0

0800cdb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cdb8:	b480      	push	{r7}
 800cdba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cdbc:	4b03      	ldr	r3, [pc, #12]	; (800cdcc <vTaskMissedYield+0x14>)
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	601a      	str	r2, [r3, #0]
}
 800cdc2:	bf00      	nop
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr
 800cdcc:	200006bc 	.word	0x200006bc

0800cdd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cdd8:	f000 f852 	bl	800ce80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cddc:	4b06      	ldr	r3, [pc, #24]	; (800cdf8 <prvIdleTask+0x28>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d9f9      	bls.n	800cdd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cde4:	4b05      	ldr	r3, [pc, #20]	; (800cdfc <prvIdleTask+0x2c>)
 800cde6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdea:	601a      	str	r2, [r3, #0]
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cdf4:	e7f0      	b.n	800cdd8 <prvIdleTask+0x8>
 800cdf6:	bf00      	nop
 800cdf8:	200005ac 	.word	0x200005ac
 800cdfc:	e000ed04 	.word	0xe000ed04

0800ce00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce06:	2300      	movs	r3, #0
 800ce08:	607b      	str	r3, [r7, #4]
 800ce0a:	e00c      	b.n	800ce26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	4413      	add	r3, r2
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	4a12      	ldr	r2, [pc, #72]	; (800ce60 <prvInitialiseTaskLists+0x60>)
 800ce18:	4413      	add	r3, r2
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fe fb33 	bl	800b486 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	3301      	adds	r3, #1
 800ce24:	607b      	str	r3, [r7, #4]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b06      	cmp	r3, #6
 800ce2a:	d9ef      	bls.n	800ce0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce2c:	480d      	ldr	r0, [pc, #52]	; (800ce64 <prvInitialiseTaskLists+0x64>)
 800ce2e:	f7fe fb2a 	bl	800b486 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce32:	480d      	ldr	r0, [pc, #52]	; (800ce68 <prvInitialiseTaskLists+0x68>)
 800ce34:	f7fe fb27 	bl	800b486 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce38:	480c      	ldr	r0, [pc, #48]	; (800ce6c <prvInitialiseTaskLists+0x6c>)
 800ce3a:	f7fe fb24 	bl	800b486 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce3e:	480c      	ldr	r0, [pc, #48]	; (800ce70 <prvInitialiseTaskLists+0x70>)
 800ce40:	f7fe fb21 	bl	800b486 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce44:	480b      	ldr	r0, [pc, #44]	; (800ce74 <prvInitialiseTaskLists+0x74>)
 800ce46:	f7fe fb1e 	bl	800b486 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce4a:	4b0b      	ldr	r3, [pc, #44]	; (800ce78 <prvInitialiseTaskLists+0x78>)
 800ce4c:	4a05      	ldr	r2, [pc, #20]	; (800ce64 <prvInitialiseTaskLists+0x64>)
 800ce4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce50:	4b0a      	ldr	r3, [pc, #40]	; (800ce7c <prvInitialiseTaskLists+0x7c>)
 800ce52:	4a05      	ldr	r2, [pc, #20]	; (800ce68 <prvInitialiseTaskLists+0x68>)
 800ce54:	601a      	str	r2, [r3, #0]
}
 800ce56:	bf00      	nop
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	200005ac 	.word	0x200005ac
 800ce64:	20000638 	.word	0x20000638
 800ce68:	2000064c 	.word	0x2000064c
 800ce6c:	20000668 	.word	0x20000668
 800ce70:	2000067c 	.word	0x2000067c
 800ce74:	20000694 	.word	0x20000694
 800ce78:	20000660 	.word	0x20000660
 800ce7c:	20000664 	.word	0x20000664

0800ce80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce86:	e019      	b.n	800cebc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce88:	f000 fbc8 	bl	800d61c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce8c:	4b10      	ldr	r3, [pc, #64]	; (800ced0 <prvCheckTasksWaitingTermination+0x50>)
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	3304      	adds	r3, #4
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fe fb7e 	bl	800b59a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce9e:	4b0d      	ldr	r3, [pc, #52]	; (800ced4 <prvCheckTasksWaitingTermination+0x54>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	3b01      	subs	r3, #1
 800cea4:	4a0b      	ldr	r2, [pc, #44]	; (800ced4 <prvCheckTasksWaitingTermination+0x54>)
 800cea6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cea8:	4b0b      	ldr	r3, [pc, #44]	; (800ced8 <prvCheckTasksWaitingTermination+0x58>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	3b01      	subs	r3, #1
 800ceae:	4a0a      	ldr	r2, [pc, #40]	; (800ced8 <prvCheckTasksWaitingTermination+0x58>)
 800ceb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ceb2:	f000 fbe7 	bl	800d684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f810 	bl	800cedc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cebc:	4b06      	ldr	r3, [pc, #24]	; (800ced8 <prvCheckTasksWaitingTermination+0x58>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1e1      	bne.n	800ce88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cec4:	bf00      	nop
 800cec6:	bf00      	nop
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	2000067c 	.word	0x2000067c
 800ced4:	200006a8 	.word	0x200006a8
 800ced8:	20000690 	.word	0x20000690

0800cedc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	334c      	adds	r3, #76	; 0x4c
 800cee8:	4618      	mov	r0, r3
 800ceea:	f000 fead 	bl	800dc48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d108      	bne.n	800cf0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cefc:	4618      	mov	r0, r3
 800cefe:	f000 fd3f 	bl	800d980 <vPortFree>
				vPortFree( pxTCB );
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 fd3c 	bl	800d980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf08:	e01a      	b.n	800cf40 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d103      	bne.n	800cf1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fd33 	bl	800d980 <vPortFree>
	}
 800cf1a:	e011      	b.n	800cf40 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d00c      	beq.n	800cf40 <prvDeleteTCB+0x64>
	__asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2a:	b672      	cpsid	i
 800cf2c:	f383 8811 	msr	BASEPRI, r3
 800cf30:	f3bf 8f6f 	isb	sy
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	b662      	cpsie	i
 800cf3a:	60fb      	str	r3, [r7, #12]
}
 800cf3c:	bf00      	nop
 800cf3e:	e7fe      	b.n	800cf3e <prvDeleteTCB+0x62>
	}
 800cf40:	bf00      	nop
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf4e:	4b0c      	ldr	r3, [pc, #48]	; (800cf80 <prvResetNextTaskUnblockTime+0x38>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d104      	bne.n	800cf62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf58:	4b0a      	ldr	r3, [pc, #40]	; (800cf84 <prvResetNextTaskUnblockTime+0x3c>)
 800cf5a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cf60:	e008      	b.n	800cf74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf62:	4b07      	ldr	r3, [pc, #28]	; (800cf80 <prvResetNextTaskUnblockTime+0x38>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	4a04      	ldr	r2, [pc, #16]	; (800cf84 <prvResetNextTaskUnblockTime+0x3c>)
 800cf72:	6013      	str	r3, [r2, #0]
}
 800cf74:	bf00      	nop
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr
 800cf80:	20000660 	.word	0x20000660
 800cf84:	200006c8 	.word	0x200006c8

0800cf88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf8e:	4b0b      	ldr	r3, [pc, #44]	; (800cfbc <xTaskGetSchedulerState+0x34>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d102      	bne.n	800cf9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf96:	2301      	movs	r3, #1
 800cf98:	607b      	str	r3, [r7, #4]
 800cf9a:	e008      	b.n	800cfae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf9c:	4b08      	ldr	r3, [pc, #32]	; (800cfc0 <xTaskGetSchedulerState+0x38>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d102      	bne.n	800cfaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cfa4:	2302      	movs	r3, #2
 800cfa6:	607b      	str	r3, [r7, #4]
 800cfa8:	e001      	b.n	800cfae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cfae:	687b      	ldr	r3, [r7, #4]
	}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr
 800cfbc:	200006b4 	.word	0x200006b4
 800cfc0:	200006d0 	.word	0x200006d0

0800cfc4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d069      	beq.n	800d0ae <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfde:	4b36      	ldr	r3, [pc, #216]	; (800d0b8 <xTaskPriorityInherit+0xf4>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d259      	bcs.n	800d09c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	699b      	ldr	r3, [r3, #24]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	db06      	blt.n	800cffe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cff0:	4b31      	ldr	r3, [pc, #196]	; (800d0b8 <xTaskPriorityInherit+0xf4>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff6:	f1c3 0207 	rsb	r2, r3, #7
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	6959      	ldr	r1, [r3, #20]
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d006:	4613      	mov	r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	4413      	add	r3, r2
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4a2b      	ldr	r2, [pc, #172]	; (800d0bc <xTaskPriorityInherit+0xf8>)
 800d010:	4413      	add	r3, r2
 800d012:	4299      	cmp	r1, r3
 800d014:	d13a      	bne.n	800d08c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	3304      	adds	r3, #4
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7fe fabd 	bl	800b59a <uxListRemove>
 800d020:	4603      	mov	r3, r0
 800d022:	2b00      	cmp	r3, #0
 800d024:	d115      	bne.n	800d052 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d02a:	4924      	ldr	r1, [pc, #144]	; (800d0bc <xTaskPriorityInherit+0xf8>)
 800d02c:	4613      	mov	r3, r2
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	4413      	add	r3, r2
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	440b      	add	r3, r1
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10a      	bne.n	800d052 <xTaskPriorityInherit+0x8e>
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d040:	2201      	movs	r2, #1
 800d042:	fa02 f303 	lsl.w	r3, r2, r3
 800d046:	43da      	mvns	r2, r3
 800d048:	4b1d      	ldr	r3, [pc, #116]	; (800d0c0 <xTaskPriorityInherit+0xfc>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4013      	ands	r3, r2
 800d04e:	4a1c      	ldr	r2, [pc, #112]	; (800d0c0 <xTaskPriorityInherit+0xfc>)
 800d050:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d052:	4b19      	ldr	r3, [pc, #100]	; (800d0b8 <xTaskPriorityInherit+0xf4>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d060:	2201      	movs	r2, #1
 800d062:	409a      	lsls	r2, r3
 800d064:	4b16      	ldr	r3, [pc, #88]	; (800d0c0 <xTaskPriorityInherit+0xfc>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4313      	orrs	r3, r2
 800d06a:	4a15      	ldr	r2, [pc, #84]	; (800d0c0 <xTaskPriorityInherit+0xfc>)
 800d06c:	6013      	str	r3, [r2, #0]
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d072:	4613      	mov	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4413      	add	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4a10      	ldr	r2, [pc, #64]	; (800d0bc <xTaskPriorityInherit+0xf8>)
 800d07c:	441a      	add	r2, r3
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	3304      	adds	r3, #4
 800d082:	4619      	mov	r1, r3
 800d084:	4610      	mov	r0, r2
 800d086:	f7fe fa2b 	bl	800b4e0 <vListInsertEnd>
 800d08a:	e004      	b.n	800d096 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d08c:	4b0a      	ldr	r3, [pc, #40]	; (800d0b8 <xTaskPriorityInherit+0xf4>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d096:	2301      	movs	r3, #1
 800d098:	60fb      	str	r3, [r7, #12]
 800d09a:	e008      	b.n	800d0ae <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0a0:	4b05      	ldr	r3, [pc, #20]	; (800d0b8 <xTaskPriorityInherit+0xf4>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d201      	bcs.n	800d0ae <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
	}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	200005a8 	.word	0x200005a8
 800d0bc:	200005ac 	.word	0x200005ac
 800d0c0:	200006b0 	.word	0x200006b0

0800d0c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d072      	beq.n	800d1c0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d0da:	4b3c      	ldr	r3, [pc, #240]	; (800d1cc <xTaskPriorityDisinherit+0x108>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	693a      	ldr	r2, [r7, #16]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d00c      	beq.n	800d0fe <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e8:	b672      	cpsid	i
 800d0ea:	f383 8811 	msr	BASEPRI, r3
 800d0ee:	f3bf 8f6f 	isb	sy
 800d0f2:	f3bf 8f4f 	dsb	sy
 800d0f6:	b662      	cpsie	i
 800d0f8:	60fb      	str	r3, [r7, #12]
}
 800d0fa:	bf00      	nop
 800d0fc:	e7fe      	b.n	800d0fc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d102:	2b00      	cmp	r3, #0
 800d104:	d10c      	bne.n	800d120 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10a:	b672      	cpsid	i
 800d10c:	f383 8811 	msr	BASEPRI, r3
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	b662      	cpsie	i
 800d11a:	60bb      	str	r3, [r7, #8]
}
 800d11c:	bf00      	nop
 800d11e:	e7fe      	b.n	800d11e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d124:	1e5a      	subs	r2, r3, #1
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d132:	429a      	cmp	r2, r3
 800d134:	d044      	beq.n	800d1c0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d140      	bne.n	800d1c0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	3304      	adds	r3, #4
 800d142:	4618      	mov	r0, r3
 800d144:	f7fe fa29 	bl	800b59a <uxListRemove>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d115      	bne.n	800d17a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d152:	491f      	ldr	r1, [pc, #124]	; (800d1d0 <xTaskPriorityDisinherit+0x10c>)
 800d154:	4613      	mov	r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	4413      	add	r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	440b      	add	r3, r1
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10a      	bne.n	800d17a <xTaskPriorityDisinherit+0xb6>
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d168:	2201      	movs	r2, #1
 800d16a:	fa02 f303 	lsl.w	r3, r2, r3
 800d16e:	43da      	mvns	r2, r3
 800d170:	4b18      	ldr	r3, [pc, #96]	; (800d1d4 <xTaskPriorityDisinherit+0x110>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4013      	ands	r3, r2
 800d176:	4a17      	ldr	r2, [pc, #92]	; (800d1d4 <xTaskPriorityDisinherit+0x110>)
 800d178:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d186:	f1c3 0207 	rsb	r2, r3, #7
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d192:	2201      	movs	r2, #1
 800d194:	409a      	lsls	r2, r3
 800d196:	4b0f      	ldr	r3, [pc, #60]	; (800d1d4 <xTaskPriorityDisinherit+0x110>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4313      	orrs	r3, r2
 800d19c:	4a0d      	ldr	r2, [pc, #52]	; (800d1d4 <xTaskPriorityDisinherit+0x110>)
 800d19e:	6013      	str	r3, [r2, #0]
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	4a08      	ldr	r2, [pc, #32]	; (800d1d0 <xTaskPriorityDisinherit+0x10c>)
 800d1ae:	441a      	add	r2, r3
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	3304      	adds	r3, #4
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	4610      	mov	r0, r2
 800d1b8:	f7fe f992 	bl	800b4e0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d1c0:	697b      	ldr	r3, [r7, #20]
	}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3718      	adds	r7, #24
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	200005a8 	.word	0x200005a8
 800d1d0:	200005ac 	.word	0x200005ac
 800d1d4:	200006b0 	.word	0x200006b0

0800d1d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b088      	sub	sp, #32
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f000 8087 	beq.w	800d300 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d1f2:	69bb      	ldr	r3, [r7, #24]
 800d1f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10c      	bne.n	800d214 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800d1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fe:	b672      	cpsid	i
 800d200:	f383 8811 	msr	BASEPRI, r3
 800d204:	f3bf 8f6f 	isb	sy
 800d208:	f3bf 8f4f 	dsb	sy
 800d20c:	b662      	cpsie	i
 800d20e:	60fb      	str	r3, [r7, #12]
}
 800d210:	bf00      	nop
 800d212:	e7fe      	b.n	800d212 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d902      	bls.n	800d224 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	61fb      	str	r3, [r7, #28]
 800d222:	e002      	b.n	800d22a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d228:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d22a:	69bb      	ldr	r3, [r7, #24]
 800d22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22e:	69fa      	ldr	r2, [r7, #28]
 800d230:	429a      	cmp	r2, r3
 800d232:	d065      	beq.n	800d300 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d238:	697a      	ldr	r2, [r7, #20]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d160      	bne.n	800d300 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d23e:	4b32      	ldr	r3, [pc, #200]	; (800d308 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	69ba      	ldr	r2, [r7, #24]
 800d244:	429a      	cmp	r2, r3
 800d246:	d10c      	bne.n	800d262 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800d248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24c:	b672      	cpsid	i
 800d24e:	f383 8811 	msr	BASEPRI, r3
 800d252:	f3bf 8f6f 	isb	sy
 800d256:	f3bf 8f4f 	dsb	sy
 800d25a:	b662      	cpsie	i
 800d25c:	60bb      	str	r3, [r7, #8]
}
 800d25e:	bf00      	nop
 800d260:	e7fe      	b.n	800d260 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d262:	69bb      	ldr	r3, [r7, #24]
 800d264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d266:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d268:	69bb      	ldr	r3, [r7, #24]
 800d26a:	69fa      	ldr	r2, [r7, #28]
 800d26c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	699b      	ldr	r3, [r3, #24]
 800d272:	2b00      	cmp	r3, #0
 800d274:	db04      	blt.n	800d280 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	f1c3 0207 	rsb	r2, r3, #7
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d280:	69bb      	ldr	r3, [r7, #24]
 800d282:	6959      	ldr	r1, [r3, #20]
 800d284:	693a      	ldr	r2, [r7, #16]
 800d286:	4613      	mov	r3, r2
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4413      	add	r3, r2
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	4a1f      	ldr	r2, [pc, #124]	; (800d30c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d290:	4413      	add	r3, r2
 800d292:	4299      	cmp	r1, r3
 800d294:	d134      	bne.n	800d300 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d296:	69bb      	ldr	r3, [r7, #24]
 800d298:	3304      	adds	r3, #4
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fe f97d 	bl	800b59a <uxListRemove>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d115      	bne.n	800d2d2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2aa:	4918      	ldr	r1, [pc, #96]	; (800d30c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	4413      	add	r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	440b      	add	r3, r1
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d10a      	bne.n	800d2d2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d2c6:	43da      	mvns	r2, r3
 800d2c8:	4b11      	ldr	r3, [pc, #68]	; (800d310 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4013      	ands	r3, r2
 800d2ce:	4a10      	ldr	r2, [pc, #64]	; (800d310 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d2d0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	409a      	lsls	r2, r3
 800d2da:	4b0d      	ldr	r3, [pc, #52]	; (800d310 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	4a0b      	ldr	r2, [pc, #44]	; (800d310 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d2e2:	6013      	str	r3, [r2, #0]
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e8:	4613      	mov	r3, r2
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	4413      	add	r3, r2
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	4a06      	ldr	r2, [pc, #24]	; (800d30c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d2f2:	441a      	add	r2, r3
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	3304      	adds	r3, #4
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	4610      	mov	r0, r2
 800d2fc:	f7fe f8f0 	bl	800b4e0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d300:	bf00      	nop
 800d302:	3720      	adds	r7, #32
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	200005a8 	.word	0x200005a8
 800d30c:	200005ac 	.word	0x200005ac
 800d310:	200006b0 	.word	0x200006b0

0800d314 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d314:	b480      	push	{r7}
 800d316:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d318:	4b07      	ldr	r3, [pc, #28]	; (800d338 <pvTaskIncrementMutexHeldCount+0x24>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d004      	beq.n	800d32a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d320:	4b05      	ldr	r3, [pc, #20]	; (800d338 <pvTaskIncrementMutexHeldCount+0x24>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d326:	3201      	adds	r2, #1
 800d328:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d32a:	4b03      	ldr	r3, [pc, #12]	; (800d338 <pvTaskIncrementMutexHeldCount+0x24>)
 800d32c:	681b      	ldr	r3, [r3, #0]
	}
 800d32e:	4618      	mov	r0, r3
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr
 800d338:	200005a8 	.word	0x200005a8

0800d33c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d346:	4b29      	ldr	r3, [pc, #164]	; (800d3ec <prvAddCurrentTaskToDelayedList+0xb0>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d34c:	4b28      	ldr	r3, [pc, #160]	; (800d3f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	3304      	adds	r3, #4
 800d352:	4618      	mov	r0, r3
 800d354:	f7fe f921 	bl	800b59a <uxListRemove>
 800d358:	4603      	mov	r3, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d10b      	bne.n	800d376 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d35e:	4b24      	ldr	r3, [pc, #144]	; (800d3f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d364:	2201      	movs	r2, #1
 800d366:	fa02 f303 	lsl.w	r3, r2, r3
 800d36a:	43da      	mvns	r2, r3
 800d36c:	4b21      	ldr	r3, [pc, #132]	; (800d3f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4013      	ands	r3, r2
 800d372:	4a20      	ldr	r2, [pc, #128]	; (800d3f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d374:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37c:	d10a      	bne.n	800d394 <prvAddCurrentTaskToDelayedList+0x58>
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d007      	beq.n	800d394 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d384:	4b1a      	ldr	r3, [pc, #104]	; (800d3f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	3304      	adds	r3, #4
 800d38a:	4619      	mov	r1, r3
 800d38c:	481a      	ldr	r0, [pc, #104]	; (800d3f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d38e:	f7fe f8a7 	bl	800b4e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d392:	e026      	b.n	800d3e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4413      	add	r3, r2
 800d39a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d39c:	4b14      	ldr	r3, [pc, #80]	; (800d3f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d3a4:	68ba      	ldr	r2, [r7, #8]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d209      	bcs.n	800d3c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3ac:	4b13      	ldr	r3, [pc, #76]	; (800d3fc <prvAddCurrentTaskToDelayedList+0xc0>)
 800d3ae:	681a      	ldr	r2, [r3, #0]
 800d3b0:	4b0f      	ldr	r3, [pc, #60]	; (800d3f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	4610      	mov	r0, r2
 800d3ba:	f7fe f8b5 	bl	800b528 <vListInsert>
}
 800d3be:	e010      	b.n	800d3e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3c0:	4b0f      	ldr	r3, [pc, #60]	; (800d400 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	4b0a      	ldr	r3, [pc, #40]	; (800d3f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	4610      	mov	r0, r2
 800d3ce:	f7fe f8ab 	bl	800b528 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d3d2:	4b0c      	ldr	r3, [pc, #48]	; (800d404 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68ba      	ldr	r2, [r7, #8]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d202      	bcs.n	800d3e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d3dc:	4a09      	ldr	r2, [pc, #36]	; (800d404 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	6013      	str	r3, [r2, #0]
}
 800d3e2:	bf00      	nop
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	200006ac 	.word	0x200006ac
 800d3f0:	200005a8 	.word	0x200005a8
 800d3f4:	200006b0 	.word	0x200006b0
 800d3f8:	20000694 	.word	0x20000694
 800d3fc:	20000664 	.word	0x20000664
 800d400:	20000660 	.word	0x20000660
 800d404:	200006c8 	.word	0x200006c8

0800d408 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d408:	b480      	push	{r7}
 800d40a:	b085      	sub	sp, #20
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	3b04      	subs	r3, #4
 800d418:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	3b04      	subs	r3, #4
 800d426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	f023 0201 	bic.w	r2, r3, #1
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	3b04      	subs	r3, #4
 800d436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d438:	4a0c      	ldr	r2, [pc, #48]	; (800d46c <pxPortInitialiseStack+0x64>)
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	3b14      	subs	r3, #20
 800d442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d444:	687a      	ldr	r2, [r7, #4]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3b04      	subs	r3, #4
 800d44e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f06f 0202 	mvn.w	r2, #2
 800d456:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	3b20      	subs	r3, #32
 800d45c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d45e:	68fb      	ldr	r3, [r7, #12]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3714      	adds	r7, #20
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr
 800d46c:	0800d471 	.word	0x0800d471

0800d470 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d476:	2300      	movs	r3, #0
 800d478:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d47a:	4b14      	ldr	r3, [pc, #80]	; (800d4cc <prvTaskExitError+0x5c>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d482:	d00c      	beq.n	800d49e <prvTaskExitError+0x2e>
	__asm volatile
 800d484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d488:	b672      	cpsid	i
 800d48a:	f383 8811 	msr	BASEPRI, r3
 800d48e:	f3bf 8f6f 	isb	sy
 800d492:	f3bf 8f4f 	dsb	sy
 800d496:	b662      	cpsie	i
 800d498:	60fb      	str	r3, [r7, #12]
}
 800d49a:	bf00      	nop
 800d49c:	e7fe      	b.n	800d49c <prvTaskExitError+0x2c>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a2:	b672      	cpsid	i
 800d4a4:	f383 8811 	msr	BASEPRI, r3
 800d4a8:	f3bf 8f6f 	isb	sy
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	b662      	cpsie	i
 800d4b2:	60bb      	str	r3, [r7, #8]
}
 800d4b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d4b6:	bf00      	nop
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d0fc      	beq.n	800d4b8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d4be:	bf00      	nop
 800d4c0:	bf00      	nop
 800d4c2:	3714      	adds	r7, #20
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr
 800d4cc:	2000004c 	.word	0x2000004c

0800d4d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d4d0:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <pxCurrentTCBConst2>)
 800d4d2:	6819      	ldr	r1, [r3, #0]
 800d4d4:	6808      	ldr	r0, [r1, #0]
 800d4d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4da:	f380 8809 	msr	PSP, r0
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f04f 0000 	mov.w	r0, #0
 800d4e6:	f380 8811 	msr	BASEPRI, r0
 800d4ea:	4770      	bx	lr
 800d4ec:	f3af 8000 	nop.w

0800d4f0 <pxCurrentTCBConst2>:
 800d4f0:	200005a8 	.word	0x200005a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d4f4:	bf00      	nop
 800d4f6:	bf00      	nop

0800d4f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d4f8:	4808      	ldr	r0, [pc, #32]	; (800d51c <prvPortStartFirstTask+0x24>)
 800d4fa:	6800      	ldr	r0, [r0, #0]
 800d4fc:	6800      	ldr	r0, [r0, #0]
 800d4fe:	f380 8808 	msr	MSP, r0
 800d502:	f04f 0000 	mov.w	r0, #0
 800d506:	f380 8814 	msr	CONTROL, r0
 800d50a:	b662      	cpsie	i
 800d50c:	b661      	cpsie	f
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	df00      	svc	0
 800d518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d51a:	bf00      	nop
 800d51c:	e000ed08 	.word	0xe000ed08

0800d520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d526:	4b37      	ldr	r3, [pc, #220]	; (800d604 <xPortStartScheduler+0xe4>)
 800d528:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	22ff      	movs	r2, #255	; 0xff
 800d536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d540:	78fb      	ldrb	r3, [r7, #3]
 800d542:	b2db      	uxtb	r3, r3
 800d544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	4b2f      	ldr	r3, [pc, #188]	; (800d608 <xPortStartScheduler+0xe8>)
 800d54c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d54e:	4b2f      	ldr	r3, [pc, #188]	; (800d60c <xPortStartScheduler+0xec>)
 800d550:	2207      	movs	r2, #7
 800d552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d554:	e009      	b.n	800d56a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d556:	4b2d      	ldr	r3, [pc, #180]	; (800d60c <xPortStartScheduler+0xec>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	3b01      	subs	r3, #1
 800d55c:	4a2b      	ldr	r2, [pc, #172]	; (800d60c <xPortStartScheduler+0xec>)
 800d55e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d560:	78fb      	ldrb	r3, [r7, #3]
 800d562:	b2db      	uxtb	r3, r3
 800d564:	005b      	lsls	r3, r3, #1
 800d566:	b2db      	uxtb	r3, r3
 800d568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d56a:	78fb      	ldrb	r3, [r7, #3]
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d572:	2b80      	cmp	r3, #128	; 0x80
 800d574:	d0ef      	beq.n	800d556 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d576:	4b25      	ldr	r3, [pc, #148]	; (800d60c <xPortStartScheduler+0xec>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f1c3 0307 	rsb	r3, r3, #7
 800d57e:	2b04      	cmp	r3, #4
 800d580:	d00c      	beq.n	800d59c <xPortStartScheduler+0x7c>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d586:	b672      	cpsid	i
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	b662      	cpsie	i
 800d596:	60bb      	str	r3, [r7, #8]
}
 800d598:	bf00      	nop
 800d59a:	e7fe      	b.n	800d59a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d59c:	4b1b      	ldr	r3, [pc, #108]	; (800d60c <xPortStartScheduler+0xec>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	021b      	lsls	r3, r3, #8
 800d5a2:	4a1a      	ldr	r2, [pc, #104]	; (800d60c <xPortStartScheduler+0xec>)
 800d5a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d5a6:	4b19      	ldr	r3, [pc, #100]	; (800d60c <xPortStartScheduler+0xec>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d5ae:	4a17      	ldr	r2, [pc, #92]	; (800d60c <xPortStartScheduler+0xec>)
 800d5b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	b2da      	uxtb	r2, r3
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d5ba:	4b15      	ldr	r3, [pc, #84]	; (800d610 <xPortStartScheduler+0xf0>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4a14      	ldr	r2, [pc, #80]	; (800d610 <xPortStartScheduler+0xf0>)
 800d5c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d5c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d5c6:	4b12      	ldr	r3, [pc, #72]	; (800d610 <xPortStartScheduler+0xf0>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a11      	ldr	r2, [pc, #68]	; (800d610 <xPortStartScheduler+0xf0>)
 800d5cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d5d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d5d2:	f000 f8dd 	bl	800d790 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d5d6:	4b0f      	ldr	r3, [pc, #60]	; (800d614 <xPortStartScheduler+0xf4>)
 800d5d8:	2200      	movs	r2, #0
 800d5da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d5dc:	f000 f8fc 	bl	800d7d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d5e0:	4b0d      	ldr	r3, [pc, #52]	; (800d618 <xPortStartScheduler+0xf8>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a0c      	ldr	r2, [pc, #48]	; (800d618 <xPortStartScheduler+0xf8>)
 800d5e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d5ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d5ec:	f7ff ff84 	bl	800d4f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d5f0:	f7ff fa78 	bl	800cae4 <vTaskSwitchContext>
	prvTaskExitError();
 800d5f4:	f7ff ff3c 	bl	800d470 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	e000e400 	.word	0xe000e400
 800d608:	200006d4 	.word	0x200006d4
 800d60c:	200006d8 	.word	0x200006d8
 800d610:	e000ed20 	.word	0xe000ed20
 800d614:	2000004c 	.word	0x2000004c
 800d618:	e000ef34 	.word	0xe000ef34

0800d61c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
	__asm volatile
 800d622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d626:	b672      	cpsid	i
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	b662      	cpsie	i
 800d636:	607b      	str	r3, [r7, #4]
}
 800d638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d63a:	4b10      	ldr	r3, [pc, #64]	; (800d67c <vPortEnterCritical+0x60>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	3301      	adds	r3, #1
 800d640:	4a0e      	ldr	r2, [pc, #56]	; (800d67c <vPortEnterCritical+0x60>)
 800d642:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d644:	4b0d      	ldr	r3, [pc, #52]	; (800d67c <vPortEnterCritical+0x60>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d111      	bne.n	800d670 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d64c:	4b0c      	ldr	r3, [pc, #48]	; (800d680 <vPortEnterCritical+0x64>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	b2db      	uxtb	r3, r3
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00c      	beq.n	800d670 <vPortEnterCritical+0x54>
	__asm volatile
 800d656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65a:	b672      	cpsid	i
 800d65c:	f383 8811 	msr	BASEPRI, r3
 800d660:	f3bf 8f6f 	isb	sy
 800d664:	f3bf 8f4f 	dsb	sy
 800d668:	b662      	cpsie	i
 800d66a:	603b      	str	r3, [r7, #0]
}
 800d66c:	bf00      	nop
 800d66e:	e7fe      	b.n	800d66e <vPortEnterCritical+0x52>
	}
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr
 800d67c:	2000004c 	.word	0x2000004c
 800d680:	e000ed04 	.word	0xe000ed04

0800d684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d68a:	4b13      	ldr	r3, [pc, #76]	; (800d6d8 <vPortExitCritical+0x54>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d10c      	bne.n	800d6ac <vPortExitCritical+0x28>
	__asm volatile
 800d692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d696:	b672      	cpsid	i
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	b662      	cpsie	i
 800d6a6:	607b      	str	r3, [r7, #4]
}
 800d6a8:	bf00      	nop
 800d6aa:	e7fe      	b.n	800d6aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d6ac:	4b0a      	ldr	r3, [pc, #40]	; (800d6d8 <vPortExitCritical+0x54>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	4a09      	ldr	r2, [pc, #36]	; (800d6d8 <vPortExitCritical+0x54>)
 800d6b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d6b6:	4b08      	ldr	r3, [pc, #32]	; (800d6d8 <vPortExitCritical+0x54>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d105      	bne.n	800d6ca <vPortExitCritical+0x46>
 800d6be:	2300      	movs	r3, #0
 800d6c0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d6c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d6ca:	bf00      	nop
 800d6cc:	370c      	adds	r7, #12
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
 800d6d6:	bf00      	nop
 800d6d8:	2000004c 	.word	0x2000004c
 800d6dc:	00000000 	.word	0x00000000

0800d6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d6e0:	f3ef 8009 	mrs	r0, PSP
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	4b15      	ldr	r3, [pc, #84]	; (800d740 <pxCurrentTCBConst>)
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	f01e 0f10 	tst.w	lr, #16
 800d6f0:	bf08      	it	eq
 800d6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6fa:	6010      	str	r0, [r2, #0]
 800d6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d700:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d704:	b672      	cpsid	i
 800d706:	f380 8811 	msr	BASEPRI, r0
 800d70a:	f3bf 8f4f 	dsb	sy
 800d70e:	f3bf 8f6f 	isb	sy
 800d712:	b662      	cpsie	i
 800d714:	f7ff f9e6 	bl	800cae4 <vTaskSwitchContext>
 800d718:	f04f 0000 	mov.w	r0, #0
 800d71c:	f380 8811 	msr	BASEPRI, r0
 800d720:	bc09      	pop	{r0, r3}
 800d722:	6819      	ldr	r1, [r3, #0]
 800d724:	6808      	ldr	r0, [r1, #0]
 800d726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72a:	f01e 0f10 	tst.w	lr, #16
 800d72e:	bf08      	it	eq
 800d730:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d734:	f380 8809 	msr	PSP, r0
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	4770      	bx	lr
 800d73e:	bf00      	nop

0800d740 <pxCurrentTCBConst>:
 800d740:	200005a8 	.word	0x200005a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d744:	bf00      	nop
 800d746:	bf00      	nop

0800d748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
	__asm volatile
 800d74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d752:	b672      	cpsid	i
 800d754:	f383 8811 	msr	BASEPRI, r3
 800d758:	f3bf 8f6f 	isb	sy
 800d75c:	f3bf 8f4f 	dsb	sy
 800d760:	b662      	cpsie	i
 800d762:	607b      	str	r3, [r7, #4]
}
 800d764:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d766:	f7ff f903 	bl	800c970 <xTaskIncrementTick>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d003      	beq.n	800d778 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d770:	4b06      	ldr	r3, [pc, #24]	; (800d78c <SysTick_Handler+0x44>)
 800d772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d776:	601a      	str	r2, [r3, #0]
 800d778:	2300      	movs	r3, #0
 800d77a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	f383 8811 	msr	BASEPRI, r3
}
 800d782:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d784:	bf00      	nop
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	e000ed04 	.word	0xe000ed04

0800d790 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d790:	b480      	push	{r7}
 800d792:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d794:	4b0b      	ldr	r3, [pc, #44]	; (800d7c4 <vPortSetupTimerInterrupt+0x34>)
 800d796:	2200      	movs	r2, #0
 800d798:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d79a:	4b0b      	ldr	r3, [pc, #44]	; (800d7c8 <vPortSetupTimerInterrupt+0x38>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d7a0:	4b0a      	ldr	r3, [pc, #40]	; (800d7cc <vPortSetupTimerInterrupt+0x3c>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a0a      	ldr	r2, [pc, #40]	; (800d7d0 <vPortSetupTimerInterrupt+0x40>)
 800d7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d7aa:	099b      	lsrs	r3, r3, #6
 800d7ac:	4a09      	ldr	r2, [pc, #36]	; (800d7d4 <vPortSetupTimerInterrupt+0x44>)
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d7b2:	4b04      	ldr	r3, [pc, #16]	; (800d7c4 <vPortSetupTimerInterrupt+0x34>)
 800d7b4:	2207      	movs	r2, #7
 800d7b6:	601a      	str	r2, [r3, #0]
}
 800d7b8:	bf00      	nop
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	e000e010 	.word	0xe000e010
 800d7c8:	e000e018 	.word	0xe000e018
 800d7cc:	20000040 	.word	0x20000040
 800d7d0:	10624dd3 	.word	0x10624dd3
 800d7d4:	e000e014 	.word	0xe000e014

0800d7d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d7d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d7e8 <vPortEnableVFP+0x10>
 800d7dc:	6801      	ldr	r1, [r0, #0]
 800d7de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d7e2:	6001      	str	r1, [r0, #0]
 800d7e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d7e6:	bf00      	nop
 800d7e8:	e000ed88 	.word	0xe000ed88

0800d7ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b08a      	sub	sp, #40	; 0x28
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d7f8:	f7ff f80e 	bl	800c818 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d7fc:	4b5b      	ldr	r3, [pc, #364]	; (800d96c <pvPortMalloc+0x180>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d101      	bne.n	800d808 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d804:	f000 f91a 	bl	800da3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d808:	4b59      	ldr	r3, [pc, #356]	; (800d970 <pvPortMalloc+0x184>)
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4013      	ands	r3, r2
 800d810:	2b00      	cmp	r3, #0
 800d812:	f040 8092 	bne.w	800d93a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d01f      	beq.n	800d85c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d81c:	2208      	movs	r2, #8
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4413      	add	r3, r2
 800d822:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f003 0307 	and.w	r3, r3, #7
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d016      	beq.n	800d85c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f023 0307 	bic.w	r3, r3, #7
 800d834:	3308      	adds	r3, #8
 800d836:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f003 0307 	and.w	r3, r3, #7
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00c      	beq.n	800d85c <pvPortMalloc+0x70>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d846:	b672      	cpsid	i
 800d848:	f383 8811 	msr	BASEPRI, r3
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	b662      	cpsie	i
 800d856:	617b      	str	r3, [r7, #20]
}
 800d858:	bf00      	nop
 800d85a:	e7fe      	b.n	800d85a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d06b      	beq.n	800d93a <pvPortMalloc+0x14e>
 800d862:	4b44      	ldr	r3, [pc, #272]	; (800d974 <pvPortMalloc+0x188>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d866      	bhi.n	800d93a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d86c:	4b42      	ldr	r3, [pc, #264]	; (800d978 <pvPortMalloc+0x18c>)
 800d86e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d870:	4b41      	ldr	r3, [pc, #260]	; (800d978 <pvPortMalloc+0x18c>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d876:	e004      	b.n	800d882 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d903      	bls.n	800d894 <pvPortMalloc+0xa8>
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d1f1      	bne.n	800d878 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d894:	4b35      	ldr	r3, [pc, #212]	; (800d96c <pvPortMalloc+0x180>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d04d      	beq.n	800d93a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d89e:	6a3b      	ldr	r3, [r7, #32]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	2208      	movs	r2, #8
 800d8a4:	4413      	add	r3, r2
 800d8a6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	6a3b      	ldr	r3, [r7, #32]
 800d8ae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	685a      	ldr	r2, [r3, #4]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	1ad2      	subs	r2, r2, r3
 800d8b8:	2308      	movs	r3, #8
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d921      	bls.n	800d904 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	f003 0307 	and.w	r3, r3, #7
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00c      	beq.n	800d8ec <pvPortMalloc+0x100>
	__asm volatile
 800d8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d6:	b672      	cpsid	i
 800d8d8:	f383 8811 	msr	BASEPRI, r3
 800d8dc:	f3bf 8f6f 	isb	sy
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	b662      	cpsie	i
 800d8e6:	613b      	str	r3, [r7, #16]
}
 800d8e8:	bf00      	nop
 800d8ea:	e7fe      	b.n	800d8ea <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ee:	685a      	ldr	r2, [r3, #4]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	1ad2      	subs	r2, r2, r3
 800d8f4:	69bb      	ldr	r3, [r7, #24]
 800d8f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d8fe:	69b8      	ldr	r0, [r7, #24]
 800d900:	f000 f8fe 	bl	800db00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d904:	4b1b      	ldr	r3, [pc, #108]	; (800d974 <pvPortMalloc+0x188>)
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	1ad3      	subs	r3, r2, r3
 800d90e:	4a19      	ldr	r2, [pc, #100]	; (800d974 <pvPortMalloc+0x188>)
 800d910:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d912:	4b18      	ldr	r3, [pc, #96]	; (800d974 <pvPortMalloc+0x188>)
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	4b19      	ldr	r3, [pc, #100]	; (800d97c <pvPortMalloc+0x190>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d203      	bcs.n	800d926 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d91e:	4b15      	ldr	r3, [pc, #84]	; (800d974 <pvPortMalloc+0x188>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a16      	ldr	r2, [pc, #88]	; (800d97c <pvPortMalloc+0x190>)
 800d924:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d928:	685a      	ldr	r2, [r3, #4]
 800d92a:	4b11      	ldr	r3, [pc, #68]	; (800d970 <pvPortMalloc+0x184>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	431a      	orrs	r2, r3
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	2200      	movs	r2, #0
 800d938:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d93a:	f7fe ff7b 	bl	800c834 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	f003 0307 	and.w	r3, r3, #7
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00c      	beq.n	800d962 <pvPortMalloc+0x176>
	__asm volatile
 800d948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94c:	b672      	cpsid	i
 800d94e:	f383 8811 	msr	BASEPRI, r3
 800d952:	f3bf 8f6f 	isb	sy
 800d956:	f3bf 8f4f 	dsb	sy
 800d95a:	b662      	cpsie	i
 800d95c:	60fb      	str	r3, [r7, #12]
}
 800d95e:	bf00      	nop
 800d960:	e7fe      	b.n	800d960 <pvPortMalloc+0x174>
	return pvReturn;
 800d962:	69fb      	ldr	r3, [r7, #28]
}
 800d964:	4618      	mov	r0, r3
 800d966:	3728      	adds	r7, #40	; 0x28
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	20007ee4 	.word	0x20007ee4
 800d970:	20007ef0 	.word	0x20007ef0
 800d974:	20007ee8 	.word	0x20007ee8
 800d978:	20007edc 	.word	0x20007edc
 800d97c:	20007eec 	.word	0x20007eec

0800d980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b086      	sub	sp, #24
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d04c      	beq.n	800da2c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d992:	2308      	movs	r3, #8
 800d994:	425b      	negs	r3, r3
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	4413      	add	r3, r2
 800d99a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	685a      	ldr	r2, [r3, #4]
 800d9a4:	4b23      	ldr	r3, [pc, #140]	; (800da34 <vPortFree+0xb4>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d10c      	bne.n	800d9c8 <vPortFree+0x48>
	__asm volatile
 800d9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b2:	b672      	cpsid	i
 800d9b4:	f383 8811 	msr	BASEPRI, r3
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	f3bf 8f4f 	dsb	sy
 800d9c0:	b662      	cpsie	i
 800d9c2:	60fb      	str	r3, [r7, #12]
}
 800d9c4:	bf00      	nop
 800d9c6:	e7fe      	b.n	800d9c6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00c      	beq.n	800d9ea <vPortFree+0x6a>
	__asm volatile
 800d9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d4:	b672      	cpsid	i
 800d9d6:	f383 8811 	msr	BASEPRI, r3
 800d9da:	f3bf 8f6f 	isb	sy
 800d9de:	f3bf 8f4f 	dsb	sy
 800d9e2:	b662      	cpsie	i
 800d9e4:	60bb      	str	r3, [r7, #8]
}
 800d9e6:	bf00      	nop
 800d9e8:	e7fe      	b.n	800d9e8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	685a      	ldr	r2, [r3, #4]
 800d9ee:	4b11      	ldr	r3, [pc, #68]	; (800da34 <vPortFree+0xb4>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4013      	ands	r3, r2
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d019      	beq.n	800da2c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d115      	bne.n	800da2c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	685a      	ldr	r2, [r3, #4]
 800da04:	4b0b      	ldr	r3, [pc, #44]	; (800da34 <vPortFree+0xb4>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	43db      	mvns	r3, r3
 800da0a:	401a      	ands	r2, r3
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800da10:	f7fe ff02 	bl	800c818 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	685a      	ldr	r2, [r3, #4]
 800da18:	4b07      	ldr	r3, [pc, #28]	; (800da38 <vPortFree+0xb8>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4413      	add	r3, r2
 800da1e:	4a06      	ldr	r2, [pc, #24]	; (800da38 <vPortFree+0xb8>)
 800da20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800da22:	6938      	ldr	r0, [r7, #16]
 800da24:	f000 f86c 	bl	800db00 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800da28:	f7fe ff04 	bl	800c834 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800da2c:	bf00      	nop
 800da2e:	3718      	adds	r7, #24
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}
 800da34:	20007ef0 	.word	0x20007ef0
 800da38:	20007ee8 	.word	0x20007ee8

0800da3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800da3c:	b480      	push	{r7}
 800da3e:	b085      	sub	sp, #20
 800da40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da42:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800da46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800da48:	4b27      	ldr	r3, [pc, #156]	; (800dae8 <prvHeapInit+0xac>)
 800da4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f003 0307 	and.w	r3, r3, #7
 800da52:	2b00      	cmp	r3, #0
 800da54:	d00c      	beq.n	800da70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	3307      	adds	r3, #7
 800da5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f023 0307 	bic.w	r3, r3, #7
 800da62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	1ad3      	subs	r3, r2, r3
 800da6a:	4a1f      	ldr	r2, [pc, #124]	; (800dae8 <prvHeapInit+0xac>)
 800da6c:	4413      	add	r3, r2
 800da6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da74:	4a1d      	ldr	r2, [pc, #116]	; (800daec <prvHeapInit+0xb0>)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da7a:	4b1c      	ldr	r3, [pc, #112]	; (800daec <prvHeapInit+0xb0>)
 800da7c:	2200      	movs	r2, #0
 800da7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	68ba      	ldr	r2, [r7, #8]
 800da84:	4413      	add	r3, r2
 800da86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da88:	2208      	movs	r2, #8
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	1a9b      	subs	r3, r3, r2
 800da8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f023 0307 	bic.w	r3, r3, #7
 800da96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	4a15      	ldr	r2, [pc, #84]	; (800daf0 <prvHeapInit+0xb4>)
 800da9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da9e:	4b14      	ldr	r3, [pc, #80]	; (800daf0 <prvHeapInit+0xb4>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2200      	movs	r2, #0
 800daa4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800daa6:	4b12      	ldr	r3, [pc, #72]	; (800daf0 <prvHeapInit+0xb4>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2200      	movs	r2, #0
 800daac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	1ad2      	subs	r2, r2, r3
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dabc:	4b0c      	ldr	r3, [pc, #48]	; (800daf0 <prvHeapInit+0xb4>)
 800dabe:	681a      	ldr	r2, [r3, #0]
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	4a0a      	ldr	r2, [pc, #40]	; (800daf4 <prvHeapInit+0xb8>)
 800daca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	4a09      	ldr	r2, [pc, #36]	; (800daf8 <prvHeapInit+0xbc>)
 800dad2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dad4:	4b09      	ldr	r3, [pc, #36]	; (800dafc <prvHeapInit+0xc0>)
 800dad6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dada:	601a      	str	r2, [r3, #0]
}
 800dadc:	bf00      	nop
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae6:	4770      	bx	lr
 800dae8:	200006dc 	.word	0x200006dc
 800daec:	20007edc 	.word	0x20007edc
 800daf0:	20007ee4 	.word	0x20007ee4
 800daf4:	20007eec 	.word	0x20007eec
 800daf8:	20007ee8 	.word	0x20007ee8
 800dafc:	20007ef0 	.word	0x20007ef0

0800db00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db00:	b480      	push	{r7}
 800db02:	b085      	sub	sp, #20
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db08:	4b28      	ldr	r3, [pc, #160]	; (800dbac <prvInsertBlockIntoFreeList+0xac>)
 800db0a:	60fb      	str	r3, [r7, #12]
 800db0c:	e002      	b.n	800db14 <prvInsertBlockIntoFreeList+0x14>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	60fb      	str	r3, [r7, #12]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d8f7      	bhi.n	800db0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	68ba      	ldr	r2, [r7, #8]
 800db28:	4413      	add	r3, r2
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d108      	bne.n	800db42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	685a      	ldr	r2, [r3, #4]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	441a      	add	r2, r3
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	685b      	ldr	r3, [r3, #4]
 800db4a:	68ba      	ldr	r2, [r7, #8]
 800db4c:	441a      	add	r2, r3
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	429a      	cmp	r2, r3
 800db54:	d118      	bne.n	800db88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	4b15      	ldr	r3, [pc, #84]	; (800dbb0 <prvInsertBlockIntoFreeList+0xb0>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d00d      	beq.n	800db7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	685a      	ldr	r2, [r3, #4]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	441a      	add	r2, r3
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	601a      	str	r2, [r3, #0]
 800db7c:	e008      	b.n	800db90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db7e:	4b0c      	ldr	r3, [pc, #48]	; (800dbb0 <prvInsertBlockIntoFreeList+0xb0>)
 800db80:	681a      	ldr	r2, [r3, #0]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	601a      	str	r2, [r3, #0]
 800db86:	e003      	b.n	800db90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db90:	68fa      	ldr	r2, [r7, #12]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	429a      	cmp	r2, r3
 800db96:	d002      	beq.n	800db9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db9e:	bf00      	nop
 800dba0:	3714      	adds	r7, #20
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	20007edc 	.word	0x20007edc
 800dbb0:	20007ee4 	.word	0x20007ee4

0800dbb4 <__libc_init_array>:
 800dbb4:	b570      	push	{r4, r5, r6, lr}
 800dbb6:	4d0d      	ldr	r5, [pc, #52]	; (800dbec <__libc_init_array+0x38>)
 800dbb8:	4c0d      	ldr	r4, [pc, #52]	; (800dbf0 <__libc_init_array+0x3c>)
 800dbba:	1b64      	subs	r4, r4, r5
 800dbbc:	10a4      	asrs	r4, r4, #2
 800dbbe:	2600      	movs	r6, #0
 800dbc0:	42a6      	cmp	r6, r4
 800dbc2:	d109      	bne.n	800dbd8 <__libc_init_array+0x24>
 800dbc4:	4d0b      	ldr	r5, [pc, #44]	; (800dbf4 <__libc_init_array+0x40>)
 800dbc6:	4c0c      	ldr	r4, [pc, #48]	; (800dbf8 <__libc_init_array+0x44>)
 800dbc8:	f000 f8f6 	bl	800ddb8 <_init>
 800dbcc:	1b64      	subs	r4, r4, r5
 800dbce:	10a4      	asrs	r4, r4, #2
 800dbd0:	2600      	movs	r6, #0
 800dbd2:	42a6      	cmp	r6, r4
 800dbd4:	d105      	bne.n	800dbe2 <__libc_init_array+0x2e>
 800dbd6:	bd70      	pop	{r4, r5, r6, pc}
 800dbd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbdc:	4798      	blx	r3
 800dbde:	3601      	adds	r6, #1
 800dbe0:	e7ee      	b.n	800dbc0 <__libc_init_array+0xc>
 800dbe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbe6:	4798      	blx	r3
 800dbe8:	3601      	adds	r6, #1
 800dbea:	e7f2      	b.n	800dbd2 <__libc_init_array+0x1e>
 800dbec:	08034088 	.word	0x08034088
 800dbf0:	08034088 	.word	0x08034088
 800dbf4:	08034088 	.word	0x08034088
 800dbf8:	0803408c 	.word	0x0803408c

0800dbfc <__retarget_lock_acquire_recursive>:
 800dbfc:	4770      	bx	lr

0800dbfe <__retarget_lock_release_recursive>:
 800dbfe:	4770      	bx	lr

0800dc00 <memcpy>:
 800dc00:	440a      	add	r2, r1
 800dc02:	4291      	cmp	r1, r2
 800dc04:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc08:	d100      	bne.n	800dc0c <memcpy+0xc>
 800dc0a:	4770      	bx	lr
 800dc0c:	b510      	push	{r4, lr}
 800dc0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc16:	4291      	cmp	r1, r2
 800dc18:	d1f9      	bne.n	800dc0e <memcpy+0xe>
 800dc1a:	bd10      	pop	{r4, pc}

0800dc1c <memset>:
 800dc1c:	4402      	add	r2, r0
 800dc1e:	4603      	mov	r3, r0
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d100      	bne.n	800dc26 <memset+0xa>
 800dc24:	4770      	bx	lr
 800dc26:	f803 1b01 	strb.w	r1, [r3], #1
 800dc2a:	e7f9      	b.n	800dc20 <memset+0x4>

0800dc2c <cleanup_glue>:
 800dc2c:	b538      	push	{r3, r4, r5, lr}
 800dc2e:	460c      	mov	r4, r1
 800dc30:	6809      	ldr	r1, [r1, #0]
 800dc32:	4605      	mov	r5, r0
 800dc34:	b109      	cbz	r1, 800dc3a <cleanup_glue+0xe>
 800dc36:	f7ff fff9 	bl	800dc2c <cleanup_glue>
 800dc3a:	4621      	mov	r1, r4
 800dc3c:	4628      	mov	r0, r5
 800dc3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc42:	f000 b869 	b.w	800dd18 <_free_r>
	...

0800dc48 <_reclaim_reent>:
 800dc48:	4b2c      	ldr	r3, [pc, #176]	; (800dcfc <_reclaim_reent+0xb4>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4283      	cmp	r3, r0
 800dc4e:	b570      	push	{r4, r5, r6, lr}
 800dc50:	4604      	mov	r4, r0
 800dc52:	d051      	beq.n	800dcf8 <_reclaim_reent+0xb0>
 800dc54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dc56:	b143      	cbz	r3, 800dc6a <_reclaim_reent+0x22>
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d14a      	bne.n	800dcf4 <_reclaim_reent+0xac>
 800dc5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc60:	6819      	ldr	r1, [r3, #0]
 800dc62:	b111      	cbz	r1, 800dc6a <_reclaim_reent+0x22>
 800dc64:	4620      	mov	r0, r4
 800dc66:	f000 f857 	bl	800dd18 <_free_r>
 800dc6a:	6961      	ldr	r1, [r4, #20]
 800dc6c:	b111      	cbz	r1, 800dc74 <_reclaim_reent+0x2c>
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f000 f852 	bl	800dd18 <_free_r>
 800dc74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dc76:	b111      	cbz	r1, 800dc7e <_reclaim_reent+0x36>
 800dc78:	4620      	mov	r0, r4
 800dc7a:	f000 f84d 	bl	800dd18 <_free_r>
 800dc7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dc80:	b111      	cbz	r1, 800dc88 <_reclaim_reent+0x40>
 800dc82:	4620      	mov	r0, r4
 800dc84:	f000 f848 	bl	800dd18 <_free_r>
 800dc88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dc8a:	b111      	cbz	r1, 800dc92 <_reclaim_reent+0x4a>
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	f000 f843 	bl	800dd18 <_free_r>
 800dc92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dc94:	b111      	cbz	r1, 800dc9c <_reclaim_reent+0x54>
 800dc96:	4620      	mov	r0, r4
 800dc98:	f000 f83e 	bl	800dd18 <_free_r>
 800dc9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dc9e:	b111      	cbz	r1, 800dca6 <_reclaim_reent+0x5e>
 800dca0:	4620      	mov	r0, r4
 800dca2:	f000 f839 	bl	800dd18 <_free_r>
 800dca6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dca8:	b111      	cbz	r1, 800dcb0 <_reclaim_reent+0x68>
 800dcaa:	4620      	mov	r0, r4
 800dcac:	f000 f834 	bl	800dd18 <_free_r>
 800dcb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcb2:	b111      	cbz	r1, 800dcba <_reclaim_reent+0x72>
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	f000 f82f 	bl	800dd18 <_free_r>
 800dcba:	69a3      	ldr	r3, [r4, #24]
 800dcbc:	b1e3      	cbz	r3, 800dcf8 <_reclaim_reent+0xb0>
 800dcbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	4798      	blx	r3
 800dcc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dcc6:	b1b9      	cbz	r1, 800dcf8 <_reclaim_reent+0xb0>
 800dcc8:	4620      	mov	r0, r4
 800dcca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcce:	f7ff bfad 	b.w	800dc2c <cleanup_glue>
 800dcd2:	5949      	ldr	r1, [r1, r5]
 800dcd4:	b941      	cbnz	r1, 800dce8 <_reclaim_reent+0xa0>
 800dcd6:	3504      	adds	r5, #4
 800dcd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcda:	2d80      	cmp	r5, #128	; 0x80
 800dcdc:	68d9      	ldr	r1, [r3, #12]
 800dcde:	d1f8      	bne.n	800dcd2 <_reclaim_reent+0x8a>
 800dce0:	4620      	mov	r0, r4
 800dce2:	f000 f819 	bl	800dd18 <_free_r>
 800dce6:	e7ba      	b.n	800dc5e <_reclaim_reent+0x16>
 800dce8:	680e      	ldr	r6, [r1, #0]
 800dcea:	4620      	mov	r0, r4
 800dcec:	f000 f814 	bl	800dd18 <_free_r>
 800dcf0:	4631      	mov	r1, r6
 800dcf2:	e7ef      	b.n	800dcd4 <_reclaim_reent+0x8c>
 800dcf4:	2500      	movs	r5, #0
 800dcf6:	e7ef      	b.n	800dcd8 <_reclaim_reent+0x90>
 800dcf8:	bd70      	pop	{r4, r5, r6, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20000050 	.word	0x20000050

0800dd00 <__malloc_lock>:
 800dd00:	4801      	ldr	r0, [pc, #4]	; (800dd08 <__malloc_lock+0x8>)
 800dd02:	f7ff bf7b 	b.w	800dbfc <__retarget_lock_acquire_recursive>
 800dd06:	bf00      	nop
 800dd08:	20008824 	.word	0x20008824

0800dd0c <__malloc_unlock>:
 800dd0c:	4801      	ldr	r0, [pc, #4]	; (800dd14 <__malloc_unlock+0x8>)
 800dd0e:	f7ff bf76 	b.w	800dbfe <__retarget_lock_release_recursive>
 800dd12:	bf00      	nop
 800dd14:	20008824 	.word	0x20008824

0800dd18 <_free_r>:
 800dd18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd1a:	2900      	cmp	r1, #0
 800dd1c:	d048      	beq.n	800ddb0 <_free_r+0x98>
 800dd1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd22:	9001      	str	r0, [sp, #4]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f1a1 0404 	sub.w	r4, r1, #4
 800dd2a:	bfb8      	it	lt
 800dd2c:	18e4      	addlt	r4, r4, r3
 800dd2e:	f7ff ffe7 	bl	800dd00 <__malloc_lock>
 800dd32:	4a20      	ldr	r2, [pc, #128]	; (800ddb4 <_free_r+0x9c>)
 800dd34:	9801      	ldr	r0, [sp, #4]
 800dd36:	6813      	ldr	r3, [r2, #0]
 800dd38:	4615      	mov	r5, r2
 800dd3a:	b933      	cbnz	r3, 800dd4a <_free_r+0x32>
 800dd3c:	6063      	str	r3, [r4, #4]
 800dd3e:	6014      	str	r4, [r2, #0]
 800dd40:	b003      	add	sp, #12
 800dd42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd46:	f7ff bfe1 	b.w	800dd0c <__malloc_unlock>
 800dd4a:	42a3      	cmp	r3, r4
 800dd4c:	d90b      	bls.n	800dd66 <_free_r+0x4e>
 800dd4e:	6821      	ldr	r1, [r4, #0]
 800dd50:	1862      	adds	r2, r4, r1
 800dd52:	4293      	cmp	r3, r2
 800dd54:	bf04      	itt	eq
 800dd56:	681a      	ldreq	r2, [r3, #0]
 800dd58:	685b      	ldreq	r3, [r3, #4]
 800dd5a:	6063      	str	r3, [r4, #4]
 800dd5c:	bf04      	itt	eq
 800dd5e:	1852      	addeq	r2, r2, r1
 800dd60:	6022      	streq	r2, [r4, #0]
 800dd62:	602c      	str	r4, [r5, #0]
 800dd64:	e7ec      	b.n	800dd40 <_free_r+0x28>
 800dd66:	461a      	mov	r2, r3
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	b10b      	cbz	r3, 800dd70 <_free_r+0x58>
 800dd6c:	42a3      	cmp	r3, r4
 800dd6e:	d9fa      	bls.n	800dd66 <_free_r+0x4e>
 800dd70:	6811      	ldr	r1, [r2, #0]
 800dd72:	1855      	adds	r5, r2, r1
 800dd74:	42a5      	cmp	r5, r4
 800dd76:	d10b      	bne.n	800dd90 <_free_r+0x78>
 800dd78:	6824      	ldr	r4, [r4, #0]
 800dd7a:	4421      	add	r1, r4
 800dd7c:	1854      	adds	r4, r2, r1
 800dd7e:	42a3      	cmp	r3, r4
 800dd80:	6011      	str	r1, [r2, #0]
 800dd82:	d1dd      	bne.n	800dd40 <_free_r+0x28>
 800dd84:	681c      	ldr	r4, [r3, #0]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	6053      	str	r3, [r2, #4]
 800dd8a:	4421      	add	r1, r4
 800dd8c:	6011      	str	r1, [r2, #0]
 800dd8e:	e7d7      	b.n	800dd40 <_free_r+0x28>
 800dd90:	d902      	bls.n	800dd98 <_free_r+0x80>
 800dd92:	230c      	movs	r3, #12
 800dd94:	6003      	str	r3, [r0, #0]
 800dd96:	e7d3      	b.n	800dd40 <_free_r+0x28>
 800dd98:	6825      	ldr	r5, [r4, #0]
 800dd9a:	1961      	adds	r1, r4, r5
 800dd9c:	428b      	cmp	r3, r1
 800dd9e:	bf04      	itt	eq
 800dda0:	6819      	ldreq	r1, [r3, #0]
 800dda2:	685b      	ldreq	r3, [r3, #4]
 800dda4:	6063      	str	r3, [r4, #4]
 800dda6:	bf04      	itt	eq
 800dda8:	1949      	addeq	r1, r1, r5
 800ddaa:	6021      	streq	r1, [r4, #0]
 800ddac:	6054      	str	r4, [r2, #4]
 800ddae:	e7c7      	b.n	800dd40 <_free_r+0x28>
 800ddb0:	b003      	add	sp, #12
 800ddb2:	bd30      	pop	{r4, r5, pc}
 800ddb4:	20007ef4 	.word	0x20007ef4

0800ddb8 <_init>:
 800ddb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddba:	bf00      	nop
 800ddbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddbe:	bc08      	pop	{r3}
 800ddc0:	469e      	mov	lr, r3
 800ddc2:	4770      	bx	lr

0800ddc4 <_fini>:
 800ddc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc6:	bf00      	nop
 800ddc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddca:	bc08      	pop	{r3}
 800ddcc:	469e      	mov	lr, r3
 800ddce:	4770      	bx	lr
